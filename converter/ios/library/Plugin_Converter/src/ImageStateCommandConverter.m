//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-widget_library\Plugin_Converter\src\com\ashera\converter\ImageStateCommandConverter.java
//

#define J2OBJC_IMPORTED_BY_JAVA_IMPLEMENTATION 1




#include "AttributeCommand.h"
#include "BaseAttributeCommand.h"
#include "IOSObjectArray.h"
#include "IWidget.h"
#include "ImageStateCommandConverter.h"
#include "J2ObjC_source.h"
#include "java/lang/Boolean.h"
#include "java/lang/Integer.h"




#pragma clang diagnostic error "-Wreturn-type"
#pragma clang diagnostic ignored "-Wswitch"


@interface ASImageStateCommandConverter () {
 @public
  id value_;
}

@end

J2OBJC_FIELD_SETTER(ASImageStateCommandConverter, value_, id)

@implementation ASImageStateCommandConverter

- (instancetype)initWithNSString:(NSString *)id_ {
  ASImageStateCommandConverter_initWithNSString_(self, id_);
  return self;
}

- (id)modifyValueWithASIWidget:(id<ASIWidget>)widget
                        withId:(id)nativeView
                  withNSString:(NSString *)phase
                  withNSString:(NSString *)attributeName
                        withId:(id)value {
  if (self->value_ != nil) {
    return self->value_;
  }
  return value;
}

- (id<ASAttributeCommand>)newInstanceWithNSObjectArray:(IOSObjectArray *)args {
  ASImageStateCommandConverter *imageStateCommandConverter = create_ASImageStateCommandConverter_initWithNSString_(self->id__);
  [imageStateCommandConverter setPriorityWithInt:10];
  [imageStateCommandConverter updateArgsWithNSObjectArray:args];
  return imageStateCommandConverter;
}

- (void)updateArgsWithNSObjectArray:(IOSObjectArray *)args {
  JreStrongAssign(&self->value_, IOSObjectArray_Get(nil_chk(args), 0));
}

- (bool)executeAfterPostMeasure {
  return true;
}

- (void)dealloc {
  RELEASE_(value_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LASAttributeCommand;", 0x81, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x81, 5, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(modifyValueWithASIWidget:withId:withNSString:withNSString:withId:);
  methods[2].selector = @selector(newInstanceWithNSObjectArray:);
  methods[3].selector = @selector(updateArgsWithNSObjectArray:);
  methods[4].selector = @selector(executeAfterPostMeasure);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "value_", "LNSObject;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "modifyValue", "LASIWidget;LNSObject;LNSString;LNSString;LNSObject;", "newInstance", "[LNSObject;", "updateArgs" };
  static const J2ObjcClassInfo _ASImageStateCommandConverter = { "ImageStateCommandConverter", "com.ashera.converter", ptrTable, methods, fields, 7, 0x1, 5, 1, -1, -1, -1, -1, -1 };
  return &_ASImageStateCommandConverter;
}

@end

void ASImageStateCommandConverter_initWithNSString_(ASImageStateCommandConverter *self, NSString *id_) {
  ASBaseAttributeCommand_initWithNSString_(self, id_);
}

ASImageStateCommandConverter *new_ASImageStateCommandConverter_initWithNSString_(NSString *id_) {
  J2OBJC_NEW_IMPL(ASImageStateCommandConverter, initWithNSString_, id_)
}

ASImageStateCommandConverter *create_ASImageStateCommandConverter_initWithNSString_(NSString *id_) {
  J2OBJC_CREATE_IMPL(ASImageStateCommandConverter, initWithNSString_, id_)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASImageStateCommandConverter)

J2OBJC_NAME_MAPPING(ASImageStateCommandConverter, "com.ashera.converter", "AS")
