//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-widget_library\Plugin_Converter\src\com\ashera\converter\OverlayBoundsConverter.java
//

#include "IFragment.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "OverlayBoundsConverter.h"
#include "java/lang/Integer.h"
#include "java/util/List.h"
#include "java/util/Map.h"


@implementation ASOverlayBoundsConverter

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASOverlayBoundsConverter_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilList>)getDependentAttributes {
  return nil;
}

- (IOSIntArray *)convertFromWithId:(IOSObjectArray *)value
                   withJavaUtilMap:(id<JavaUtilMap>)dependentAttributesMap
                   withASIFragment:(id<ASIFragment>)fragment {
  NSString *algorithm = (NSString *) cast_chk(IOSObjectArray_Get(nil_chk(value), 0), [NSString class]);
  IOSIntArray *bounds = [IOSIntArray arrayWithLength:4];
  jint intrinsicWidth = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(IOSObjectArray_Get(value, 1), [JavaLangInteger class]))) intValue];
  jint intrinsicHeight = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(IOSObjectArray_Get(value, 2), [JavaLangInteger class]))) intValue];
  jint left = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(IOSObjectArray_Get(value, 3), [JavaLangInteger class]))) intValue];
  jint top = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(IOSObjectArray_Get(value, 4), [JavaLangInteger class]))) intValue];
  jint viewWidth = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(IOSObjectArray_Get(value, 5), [JavaLangInteger class]))) intValue];
  jint viewHeight = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(IOSObjectArray_Get(value, 6), [JavaLangInteger class]))) intValue];
  switch (JreIndexOfStr(algorithm, (id[]){ @"center", @"top_left", @"top_right", @"bottom_right", @"bottom_left" }, 5)) {
    case 0:
    *IOSIntArray_GetRef(bounds, 0) = left + JreIntDiv((viewWidth - intrinsicWidth), 2);
    *IOSIntArray_GetRef(bounds, 1) = top + JreIntDiv((viewHeight - intrinsicHeight), 2);
    *IOSIntArray_GetRef(bounds, 2) = intrinsicWidth;
    *IOSIntArray_GetRef(bounds, 3) = intrinsicHeight;
    break;
    case 1:
    *IOSIntArray_GetRef(bounds, 0) = left;
    *IOSIntArray_GetRef(bounds, 1) = top;
    *IOSIntArray_GetRef(bounds, 2) = intrinsicWidth;
    *IOSIntArray_GetRef(bounds, 3) = intrinsicHeight;
    break;
    case 2:
    *IOSIntArray_GetRef(bounds, 0) = left + viewWidth - intrinsicWidth;
    *IOSIntArray_GetRef(bounds, 1) = top;
    *IOSIntArray_GetRef(bounds, 2) = intrinsicWidth;
    *IOSIntArray_GetRef(bounds, 3) = intrinsicHeight;
    break;
    case 3:
    *IOSIntArray_GetRef(bounds, 0) = left + viewWidth - intrinsicWidth;
    *IOSIntArray_GetRef(bounds, 1) = top + viewHeight - intrinsicHeight;
    *IOSIntArray_GetRef(bounds, 2) = intrinsicWidth;
    *IOSIntArray_GetRef(bounds, 3) = intrinsicHeight;
    break;
    case 4:
    *IOSIntArray_GetRef(bounds, 0) = left;
    *IOSIntArray_GetRef(bounds, 1) = top + viewHeight - intrinsicHeight;
    *IOSIntArray_GetRef(bounds, 2) = intrinsicWidth;
    *IOSIntArray_GetRef(bounds, 3) = intrinsicHeight;
    break;
    default:
    break;
  }
  return bounds;
}

- (IOSObjectArray *)convertToWithId:(IOSIntArray *)value
                    withASIFragment:(id<ASIFragment>)fragment {
  return nil;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "[I", 0x1, 1, 2, -1, 3, -1, -1 },
    { NULL, "[LNSObject;", 0x1, 4, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getDependentAttributes);
  methods[2].selector = @selector(convertFromWithId:withJavaUtilMap:withASIFragment:);
  methods[3].selector = @selector(convertToWithId:withASIFragment:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "()Ljava/util/List<Ljava/lang/String;>;", "convertFrom", "[LNSObject;LJavaUtilMap;LASIFragment;", "([Ljava/lang/Object;Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;Lcom/ashera/core/IFragment;)[I", "convertTo", "[ILASIFragment;", "Ljava/lang/Object;Lcom/ashera/converter/IConverter<[I[Ljava/lang/Object;>;" };
  static const J2ObjcClassInfo _ASOverlayBoundsConverter = { "OverlayBoundsConverter", "com.ashera.converter", ptrTable, methods, NULL, 7, 0x1, 4, 0, -1, -1, -1, 6, -1 };
  return &_ASOverlayBoundsConverter;
}

@end

void ASOverlayBoundsConverter_init(ASOverlayBoundsConverter *self) {
  NSObject_init(self);
}

ASOverlayBoundsConverter *new_ASOverlayBoundsConverter_init() {
  J2OBJC_NEW_IMPL(ASOverlayBoundsConverter, init)
}

ASOverlayBoundsConverter *create_ASOverlayBoundsConverter_init() {
  J2OBJC_CREATE_IMPL(ASOverlayBoundsConverter, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASOverlayBoundsConverter)
