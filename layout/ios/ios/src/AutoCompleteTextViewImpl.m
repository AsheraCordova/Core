//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-ios-widgets\ios_widget_library\src\main\java\com\ashera\layout\AutoCompleteTextViewImpl.java
//

#include "AbstractBitFlagConverter.h"
#include "AbstractEnumToIntConverter.h"
#include "AdapterView.h"
#include "AttributedString.h"
#include "AutoCompleteTextView.h"
#include "AutoCompleteTextViewImpl.h"
#include "BaseHasWidgets.h"
#include "BaseMeasurableView.h"
#include "Color.h"
#include "ColorStateList.h"
#include "CommonConverters.h"
#include "ConverterFactory.h"
#include "DataSetObserver.h"
#include "Drawable.h"
#include "Editable.h"
#include "Event.h"
#include "EventBus.h"
#include "EventBusHandler.h"
#include "EventCommand.h"
#include "EventCommandFactory.h"
#include "EventExpressionParser.h"
#include "FontDescriptor.h"
#include "FontMetricsDescriptor.h"
#include "FormElement.h"
#include "FrameLayoutImpl.h"
#include "GravityConverter.h"
#include "HasWidgets.h"
#include "Html.h"
#include "IActivity.h"
#include "IAttributable.h"
#include "IConverter.h"
#include "IFragment.h"
#include "ILifeCycleDecorator.h"
#include "IListener.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "IWidget.h"
#include "IWidgetLifeCycleListener.h"
#include "IdGenerator.h"
#include "J2ObjC_source.h"
#include "KeyEvent.h"
#include "Layout.h"
#include "LayoutNativeVars.h"
#include "LinearLayout.h"
#include "LinearLayoutImpl.h"
#include "ListViewImpl.h"
#include "LoopParam.h"
#include "MeasureEvent.h"
#include "OnLayoutEvent.h"
#include "PluginInvoker.h"
#include "Rect.h"
#include "RelativeLayout.h"
#include "ResourceBundleUtils.h"
#include "SimpleWrapableView.h"
#include "TextDirectionHeuristic.h"
#include "TextView.h"
#include "TextWatcher.h"
#include "View.h"
#include "ViewGroup.h"
#include "ViewGroupImpl.h"
#include "ViewGroupModelImpl.h"
#include "ViewImpl.h"
#include "WidgetAttribute.h"
#include "WidgetFactory.h"
#include "java/lang/Boolean.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Character.h"
#include "java/lang/Float.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/Runnable.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/text/DecimalFormatSymbols.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Locale.h"
#include "java/util/Map.h"
#include "java/util/regex/Matcher.h"
#include "java/util/regex/Pattern.h"

#include "java/lang/Integer.h"
#include "java/lang/Float.h"
#include "java/lang/Boolean.h"
#include <UIKit/UIKit.h>
#include "HasLifeCycleDecorators.h"
#include "ASUIScrollView.h"
#include "ASUIView.h"

#include "ASUITextField.h"

static void (*ASAutoCompleteTextViewImpl_AutoCompleteTextViewExt_super$_dismissDropDown)(id, SEL);

@class ASAutoCompleteTextViewImpl_OutsideEventListener;
@class ASAutoCompleteTextViewImpl_PopupDataObserver;
@class JavaUtilLocale;
@class JavaUtilRegexPattern;
@protocol JavaLangCharSequence;
@protocol JavaUtilList;
@protocol JavaUtilMap;


#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface ASAutoCompleteTextViewImpl () {
 @public
  id originalTintColor_;
  jint maxLength_;
  JavaUtilRegexPattern *numericPattern_;
  id editorAction_;
  id onFocusChange_;
  jboolean selectAllOnFocus_;
  jboolean selectOnceOnFocus_;
  jboolean scrollHorizontally_;
  id onAfterTextChange_;
  id onBeforeTextChange_;
  id onTextChange_;
  jint start_;
  jint end_;
  jint count_;
  jint after_;
  NSString *str_;
  id<JavaUtilMap> textWatchers_;
  id<ADTextWatcher> textChangedListener_;
  jboolean textAllCaps_;
  jboolean callMeasureOnChange_;
  id<JavaUtilList> entries_;
  ASListViewImpl *listViewWidget_;
  id<ASIWidget> popupContainer_;
  ASAutoCompleteTextViewImpl_PopupDataObserver *observer_;
  NSString *hintText_;
  jint mPromptPosition_;
  NSString *hintViewPath_;
  id dropDownlistSelector_;
  jint dropDownWidth_;
  jint dropDownVerticalOffset_;
  jint dropDownHorizontalOffset_;
  jint dropDownHeight_;
  jint dropDownAnchor_;
  id<ADAutoCompleteTextView_OnDismissListener> onDismissListener_;
  ASAutoCompleteTextViewImpl_OutsideEventListener *outsideEventListener_;
  id<JavaUtilMap> fontDescriptors_;
  jboolean html_;
  jboolean escapeHtml_;
  id<JavaUtilMap> htmlConfig_;
  JavaUtilLocale *locale_;
  ADColorStateList *drawableTint_;
  ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *builder_;
  ASAutoCompleteTextViewImpl_AutoCompleteTextViewBean *bean_;
  ASSimpleWrapableView *simpleWrapableView_;
}

- (void)setWidgetOnNativeClass;

- (void)nativeTriggerChangeHandlersWithNSString:(NSString *)text;

- (void)nativeTriggerBeforeChangeHandlersWithNSString:(NSString *)text;

- (void)setCursorVisibleWithId:(id)objValue;

- (id)nativeGetTintColorWithBoolean:(jboolean)clearColor;

- (void)setCapitalizeWithId:(id)objValue;

- (void)nativeSetCapitalizeWithInt:(jint)capitalizeType;

- (void)setAutoTextWithId:(id)objValue;

- (void)nativeSetCorrectionTypeWithInt:(jint)capitalizeType;

- (jboolean)getCursorVisible;

- (void)setMaxLengthWithId:(id)objValue;

- (IOSObjectArray *)getDigitStrings;

- (NSString *)getLocaleValueFromRSWithNSString:(NSString *)defaultSymbol
                                  withNSString:(NSString *)key;

- (NSString *)getPlusString;

- (NSString *)getMinusString;

- (NSString *)getDecimalCharacter;

- (jboolean)numericPatternMatchesWithNSString:(NSString *)str;

- (void)removeNumericListener;

- (void)addNumericListenerWithJavaUtilRegexPattern:(JavaUtilRegexPattern *)pattern;

- (void)setPhoneNumberWithId:(id)objValue;

- (void)nativeSetPhoneNumberWithBoolean:(jboolean)value;

- (id)getFont;

- (void)setInputTypeWithId:(id)objValue;

- (void)nativeSetKeyboardTypeWithInt:(jint)value;

- (id)getInputType;

- (jint)nativeGetKeyboardType;

- (void)setImeOptionsWithId:(id)objValue
               withNSString:(NSString *)strValue;

- (void)nativeSetImeOptionsWithInt:(jint)imeOptions;

- (jint)nativeGetImeOptions;

- (id)getImeOptions;

- (void)setOnEditorActionWithId:(id)objValue;

- (void)setOnEditorActionListener;

- (void)setInputAccessoryViewDoneButtonWithId:(id)objValue;

- (void)nativeSetInputAccessoryViewDoneButtonWithNSString:(NSString *)title;

- (void)setOnFocusWithId:(id)objValue;

- (void)sendPressStartEvent;

- (void)sendPressEndEvent;

- (void)setSelectAllOnFocusWithId:(id)objValue;

- (void)setSelectAllWithId:(id)objValue;

- (jboolean)isFirstResponder;

- (void)becomeFirstResponder;

- (void)nativeSetSelectAllWithFloat:(jfloat)delay;

- (void)setSingleLineWithId:(id)objValue;

- (id)getSingleLine;

- (void)setScrollHorizontallyWithId:(id)objValue;

- (void)nativeAddTapGesture;

- (void)nativeSetScrollEnabledWithId:(id)scrollView
                         withBoolean:(jboolean)scrollEnabled;

- (void)setTextColorLinkWithADColorStateList:(ADColorStateList *)linkTextColors;

- (void)handleOnBeforeTextChangeWithNSString:(NSString *)s
                                     withInt:(jint)start
                                     withInt:(jint)count
                                     withInt:(jint)after;

- (id<ADTextWatcher>)getTextChangedListenerWithId:(id)objValue
                                     withNSString:(NSString *)name;

- (void)handleOnAfterTextChange;

- (void)handleOnTextChange;

- (void)setOnAfterTextChangeWithId:(id)objValue;

- (void)setBeforeOnTextChangeWithId:(id)objValue;

- (void)setOnTextChangeWithId:(id)objValue;

- (void)setTextAllCapsWithId:(id)objValue;

- (void)forceRedraw;

- (void)nativeSetContentSizeWithId:(id)uiView
                           withInt:(jint)contentWidth
                           withInt:(jint)height;

- (void)remeasure;

- (void)updateScrollViewContentOffset;

- (void)setInputViewWithId:(id)objValue;

- (void)setNativeInputViewWithId:(id)objValue;

- (void)setPickerView;

- (void)setDatePicker;

- (void)setErrorWithNSString:(NSString *)message;

- (void)nativeCreateWithJavaUtilMap:(id<JavaUtilMap>)params;

- (id)nativeCreateViewWithInt:(jint)viewType;

- (void)addMinMaxListener;

- (void)nativeAddTextFieldDidChange;

- (void)setPasswordTypeWithId:(id)objValue;

- (void)nativeSetSecureTextEntryWithBoolean:(jboolean)value;

- (void)nativeMakeFrameForChildWidgetWithInt:(jint)l
                                     withInt:(jint)t
                                     withInt:(jint)r
                                     withInt:(jint)b;

- (void)postSetAttributeEditTextWithASWidgetAttribute:(ASWidgetAttribute *)key
                                         withNSString:(NSString *)strValue
                                               withId:(id)objValue
                            withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator;

- (void)setBorderStyleWithId:(id)value;

- (void)nativeSetBorderStyleWithInt:(jint)value;

- (void)updatePadding;

- (void)nativeSetVerticalAligmentCenter;

- (void)nativeSetVerticalAligmentBottom;

- (void)nativeSetVerticalAligmentTop;

- (void)setHintColorWithId:(id)objValue;

- (void)nativeSetHintColorWithId:(id)value;

- (void)syncPlaceholderLabel;

- (void)setFocusWithId:(id)objValue;

- (void)setEntriesWithId:(id)objValue;

- (id<ASIWidget>)createPopup;

- (void)unregisterDataSetObserver;

- (void)createEntries;

- (void)beforetextChangeWithNSString:(NSString *)s
                             withInt:(jint)start
                             withInt:(jint)count;

- (void)createPopUpIfRequired;

- (void)afterTextChanged;

- (void)removePopUpContainer;

- (void)setThresholdWithId:(id)objValue;

- (void)setCompletionHintWithId:(id)objValue;

- (NSString *)getCompletionHint;

- (void)setCompletionViewWithId:(id)objValue;

- (void)setDropDownlistSelectorWithId:(id)objValue;

- (void)setDropDownWidthWithId:(id)objValue;

- (void)setDropDownVerticalOffsetWithId:(id)objValue;

- (void)setDropDownHorizontalOffsetWithId:(id)objValue;

- (void)setDropDownHeightWithId:(id)objValue;

- (id)getDropDownWidth;

- (id)getDropDownVerticalOffset;

- (id)getDropDownHorizontalOffset;

- (id)getDropDownHeight;

- (void)setAttrsOnTextView;

- (void)setDropDownAnchorWithId:(id)objValue;

- (id)getDropDownAnchor;

- (void)setOnDismissListenerWithADAutoCompleteTextView_OnDismissListener:(id<ADAutoCompleteTextView_OnDismissListener>)onDismissListener;

- (void)setDataObserverWithId:(id)observer;

- (void)postSetAttributeWithASWidgetAttribute:(ASWidgetAttribute *)key
                                 withNSString:(NSString *)strValue
                                       withId:(id)objValue
                    withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator;

- (void)setHintTextFormatWithId:(id)objValue;

- (void)setGravityWithId:(id)objValue;

- (void)updateTextAlignment;

- (id)getGravity;

- (void)setTypeFaceWithId:(id)objValue
             withNSString:(NSString *)strValue;

- (void)setFontFamilyWithId:(id)objValue
               withNSString:(NSString *)strValue;

- (void)setTextStyleWithId:(id)objValue;

- (id)getMinHeight;

- (id)getMinWidth;

- (void)setEmsWithId:(id)objValue;

- (void)setMinEmsWithId:(id)objValue;

- (void)setMaxEmsWithId:(id)objValue;

- (void)setWidthWithId:(id)objValue;

- (void)setHeightWithId:(id)objValue;

- (void)setMaxLinesWithId:(id)objValue;

- (void)setLinesWithId:(id)objValue;

- (void)setMinLinesWithId:(id)objValue;

- (void)setMaxHeightWithId:(id)objValue;

- (void)setMaxWidthWithId:(id)objValue;

- (void)setMinHeightWithId:(id)objValue;

- (void)setMinWidthWithId:(id)objValue;

- (id)getWidth;

- (jint)getHeight;

- (void)setFirstBaselineToTopHeightWithId:(id)objValue;

- (jboolean)getIncludeFontPadding;

- (id)getFirstBaselineToTopHeight;

- (void)setLastBaselineToBottomHeightWithId:(id)objValue;

- (id)getLastBaselineToBottomHeight;

- (void)initHtmlWithJavaUtilMap:(id<JavaUtilMap>)params OBJC_METHOD_FAMILY_NONE;

- (NSString *)getDigitString;

- (NSString *)getSignedChars;

- (NSString *)getDecimalChars;

- (void)setNumericWithId:(id)objValue;

- (void)setDigitsWithId:(id)objValue;

- (jint)nativeGetFontSize;

- (jint)nativeGetFontStyle;

- (void)nativeSetCustomFontWithInt:(jint)height
              withASFontDescriptor:(ASFontDescriptor *)fontDescriptor;

- (void)nativeSetFontStyleWithInt:(jint)style;

- (id)getPaddingTop;

- (id)getPaddingEnd;

- (id)getPaddingStart;

- (id)getPaddingLeft;

- (id)getPaddingRight;

- (id)getPaddingBottom;

- (void)setPaddingVerticalWithId:(id)objValue;

- (void)setPaddingHorizontalWithId:(id)objValue;

- (void)setPaddingEndWithId:(id)objValue;

- (void)setPaddingStartWithId:(id)objValue;

- (void)handleHtmlTextWithNSString:(NSString *)text;

- (void)nativeSetTextWithNSString:(NSString *)text;

- (void)nativeSetHtmlTextWithId:(id)text;

- (id)getMyText;

- (id)getTextSize;

- (void)setMyTextSizeWithId:(id)objValue;

- (void)nativeSetTextSizeWithInt:(jint)value;

- (void)setVerticalAligmentCenter;

- (void)setVerticalAligmentBottom;

- (void)setVerticalAligmentTop;

- (void)setHorizontalAligmentCenter;

- (void)setHorizontalAligmentRight;

- (void)setHorizontalAligmentRightInternal;

- (void)setHorizontalAligmentLeft;

- (void)setHorizontalAligmentLeftInternal;

- (jint)getTextAlignment;

- (void)setDrawablePaddingWithId:(id)objValue;

- (void)setDrawableBottomWithId:(id)objValue;

- (void)setDrawableTopWithId:(id)objValue;

- (void)setDrawableRightWithNSString:(NSString *)originalAttr
                              withId:(id)objValue;

- (void)setDrawableRightInternalWithNSString:(NSString *)originalAttr
                                      withId:(id)objValue;

- (void)setDrawableLeftWithNSString:(NSString *)originalAttr
                             withId:(id)objValue;

- (void)setDrawableLeftInternalWithNSString:(NSString *)originalAttr
                                     withId:(id)objValue;

- (jint)getImageHeightWithId:(id)objValue;

- (jint)getImageWidthWithId:(id)objValue;

- (id)getDrawablePadding;

- (void)setDrawableTintModeWithId:(id)value;

- (void)setDrawableTintWithId:(id)objValue;

- (void)setTextColorWithId:(id)objValue;

- (id)getTextColorState;

- (void)drawableStateChangeWithNSString:(NSString *)type
                         withADDrawable:(ADDrawable *)dr;

- (jint)getLineHeight;

- (jint)getBorderWidth;

- (void)setTextColorHighlightWithId:(id)objValue;

- (id)getTextColorHighlight;

- (void)createSimpleWrapableView;

- (jboolean)hasScrollView;

- (jboolean)isViewWrapped;

- (void)setForegroundFrameWithInt:(jint)l
                          withInt:(jint)t
                          withInt:(jint)r
                          withInt:(jint)b;

- (void)invalidateWrapViewHolder;

- (id)getScrollView;

- (void)initPopUp OBJC_METHOD_FAMILY_NONE;

- (void)nativeAddTextFieldDidChangeForPopup;

- (void)movePopUpContainerToTop;

- (void)showHidePopup;

- (jboolean)islinearlayout;

@end

J2OBJC_FIELD_SETTER(ASAutoCompleteTextViewImpl, originalTintColor_, id)
J2OBJC_FIELD_SETTER(ASAutoCompleteTextViewImpl, numericPattern_, JavaUtilRegexPattern *)
J2OBJC_FIELD_SETTER(ASAutoCompleteTextViewImpl, editorAction_, id)
J2OBJC_FIELD_SETTER(ASAutoCompleteTextViewImpl, onFocusChange_, id)
J2OBJC_FIELD_SETTER(ASAutoCompleteTextViewImpl, onAfterTextChange_, id)
J2OBJC_FIELD_SETTER(ASAutoCompleteTextViewImpl, onBeforeTextChange_, id)
J2OBJC_FIELD_SETTER(ASAutoCompleteTextViewImpl, onTextChange_, id)
J2OBJC_FIELD_SETTER(ASAutoCompleteTextViewImpl, str_, NSString *)
J2OBJC_FIELD_SETTER(ASAutoCompleteTextViewImpl, textWatchers_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(ASAutoCompleteTextViewImpl, textChangedListener_, id<ADTextWatcher>)
J2OBJC_FIELD_SETTER(ASAutoCompleteTextViewImpl, entries_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(ASAutoCompleteTextViewImpl, listViewWidget_, ASListViewImpl *)
J2OBJC_FIELD_SETTER(ASAutoCompleteTextViewImpl, popupContainer_, id<ASIWidget>)
J2OBJC_FIELD_SETTER(ASAutoCompleteTextViewImpl, observer_, ASAutoCompleteTextViewImpl_PopupDataObserver *)
J2OBJC_FIELD_SETTER(ASAutoCompleteTextViewImpl, hintText_, NSString *)
J2OBJC_FIELD_SETTER(ASAutoCompleteTextViewImpl, hintViewPath_, NSString *)
J2OBJC_FIELD_SETTER(ASAutoCompleteTextViewImpl, dropDownlistSelector_, id)
J2OBJC_FIELD_SETTER(ASAutoCompleteTextViewImpl, onDismissListener_, id<ADAutoCompleteTextView_OnDismissListener>)
J2OBJC_FIELD_SETTER(ASAutoCompleteTextViewImpl, outsideEventListener_, ASAutoCompleteTextViewImpl_OutsideEventListener *)
J2OBJC_FIELD_SETTER(ASAutoCompleteTextViewImpl, fontDescriptors_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(ASAutoCompleteTextViewImpl, htmlConfig_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(ASAutoCompleteTextViewImpl, locale_, JavaUtilLocale *)
J2OBJC_FIELD_SETTER(ASAutoCompleteTextViewImpl, drawableTint_, ADColorStateList *)
J2OBJC_FIELD_SETTER(ASAutoCompleteTextViewImpl, builder_, ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *)
J2OBJC_FIELD_SETTER(ASAutoCompleteTextViewImpl, bean_, ASAutoCompleteTextViewImpl_AutoCompleteTextViewBean *)
J2OBJC_FIELD_SETTER(ASAutoCompleteTextViewImpl, simpleWrapableView_, ASSimpleWrapableView *)

inline NSString *ASAutoCompleteTextViewImpl_get_FOREGROUND_REGEX(void);
static NSString *ASAutoCompleteTextViewImpl_FOREGROUND_REGEX = @"none";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ASAutoCompleteTextViewImpl, FOREGROUND_REGEX, NSString *)

inline NSString *ASAutoCompleteTextViewImpl_get_VIEW_HOLDER_REGEX(void);
static NSString *ASAutoCompleteTextViewImpl_VIEW_HOLDER_REGEX = @"(?!(?:drawForeground)$).*";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ASAutoCompleteTextViewImpl, VIEW_HOLDER_REGEX, NSString *)

inline NSString *ASAutoCompleteTextViewImpl_get_WIDGET_REGEX(void);
static NSString *ASAutoCompleteTextViewImpl_WIDGET_REGEX = @"drawForeground";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ASAutoCompleteTextViewImpl, WIDGET_REGEX, NSString *)

inline NSString *ASAutoCompleteTextViewImpl_get_DEFAULT_MODEL_FOR(void);
static NSString *ASAutoCompleteTextViewImpl_DEFAULT_MODEL_FOR = @"let item in . from entries->local into loopvar as map";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ASAutoCompleteTextViewImpl, DEFAULT_MODEL_FOR, NSString *)

inline jboolean ASAutoCompleteTextViewImpl_get_prepare(void);
inline jboolean ASAutoCompleteTextViewImpl_set_prepare(jboolean value);
inline jboolean *ASAutoCompleteTextViewImpl_getRef_prepare(void);
static jboolean ASAutoCompleteTextViewImpl_prepare;
J2OBJC_STATIC_FIELD_PRIMITIVE(ASAutoCompleteTextViewImpl, prepare, jboolean)

inline id<JavaUtilList> ASAutoCompleteTextViewImpl_get_regexSpecialCharacters(void);
inline id<JavaUtilList> ASAutoCompleteTextViewImpl_set_regexSpecialCharacters(id<JavaUtilList> value);
static id<JavaUtilList> ASAutoCompleteTextViewImpl_regexSpecialCharacters;
J2OBJC_STATIC_FIELD_OBJ(ASAutoCompleteTextViewImpl, regexSpecialCharacters, id<JavaUtilList>)

inline jint ASAutoCompleteTextViewImpl_get_ITALIC_FONT_TRAIT(void);
inline jint ASAutoCompleteTextViewImpl_set_ITALIC_FONT_TRAIT(jint value);
inline jint *ASAutoCompleteTextViewImpl_getRef_ITALIC_FONT_TRAIT(void);
static jint ASAutoCompleteTextViewImpl_ITALIC_FONT_TRAIT;
J2OBJC_STATIC_FIELD_PRIMITIVE(ASAutoCompleteTextViewImpl, ITALIC_FONT_TRAIT, jint)

inline jint ASAutoCompleteTextViewImpl_get_BOLD_FONT_TRAIT(void);
inline jint ASAutoCompleteTextViewImpl_set_BOLD_FONT_TRAIT(jint value);
inline jint *ASAutoCompleteTextViewImpl_getRef_BOLD_FONT_TRAIT(void);
static jint ASAutoCompleteTextViewImpl_BOLD_FONT_TRAIT;
J2OBJC_STATIC_FIELD_PRIMITIVE(ASAutoCompleteTextViewImpl, BOLD_FONT_TRAIT, jint)

inline jint ASAutoCompleteTextViewImpl_get_NORMAL_FONT_TRAIT(void);
#define ASAutoCompleteTextViewImpl_NORMAL_FONT_TRAIT 0
J2OBJC_STATIC_FIELD_CONSTANT(ASAutoCompleteTextViewImpl, NORMAL_FONT_TRAIT, jint)

inline jint ASAutoCompleteTextViewImpl_get_TEXT_ALIGN_CENTER(void);
#define ASAutoCompleteTextViewImpl_TEXT_ALIGN_CENTER 2
J2OBJC_STATIC_FIELD_CONSTANT(ASAutoCompleteTextViewImpl, TEXT_ALIGN_CENTER, jint)

inline jint ASAutoCompleteTextViewImpl_get_TEXT_ALIGN_LEFT(void);
#define ASAutoCompleteTextViewImpl_TEXT_ALIGN_LEFT 0
J2OBJC_STATIC_FIELD_CONSTANT(ASAutoCompleteTextViewImpl, TEXT_ALIGN_LEFT, jint)

inline jint ASAutoCompleteTextViewImpl_get_TEXT_ALIGN_RIGHT(void);
#define ASAutoCompleteTextViewImpl_TEXT_ALIGN_RIGHT 1
J2OBJC_STATIC_FIELD_CONSTANT(ASAutoCompleteTextViewImpl, TEXT_ALIGN_RIGHT, jint)

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_setWidgetOnNativeClass(ASAutoCompleteTextViewImpl *self);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_nativeTriggerChangeHandlersWithNSString_(ASAutoCompleteTextViewImpl *self, NSString *text);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_nativeTriggerBeforeChangeHandlersWithNSString_(ASAutoCompleteTextViewImpl *self, NSString *text);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_setCursorVisibleWithId_(ASAutoCompleteTextViewImpl *self, id objValue);

__attribute__((unused)) static id ASAutoCompleteTextViewImpl_nativeGetTintColorWithBoolean_(ASAutoCompleteTextViewImpl *self, jboolean clearColor);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_setCapitalizeWithId_(ASAutoCompleteTextViewImpl *self, id objValue);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_nativeSetCapitalizeWithInt_(ASAutoCompleteTextViewImpl *self, jint capitalizeType);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_setAutoTextWithId_(ASAutoCompleteTextViewImpl *self, id objValue);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_nativeSetCorrectionTypeWithInt_(ASAutoCompleteTextViewImpl *self, jint capitalizeType);

__attribute__((unused)) static jboolean ASAutoCompleteTextViewImpl_getCursorVisible(ASAutoCompleteTextViewImpl *self);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_setMaxLengthWithId_(ASAutoCompleteTextViewImpl *self, id objValue);

__attribute__((unused)) static IOSObjectArray *ASAutoCompleteTextViewImpl_getDigitStrings(ASAutoCompleteTextViewImpl *self);

__attribute__((unused)) static NSString *ASAutoCompleteTextViewImpl_getLocaleValueFromRSWithNSString_withNSString_(ASAutoCompleteTextViewImpl *self, NSString *defaultSymbol, NSString *key);

__attribute__((unused)) static NSString *ASAutoCompleteTextViewImpl_getPlusString(ASAutoCompleteTextViewImpl *self);

__attribute__((unused)) static NSString *ASAutoCompleteTextViewImpl_getMinusString(ASAutoCompleteTextViewImpl *self);

__attribute__((unused)) static NSString *ASAutoCompleteTextViewImpl_getDecimalCharacter(ASAutoCompleteTextViewImpl *self);

__attribute__((unused)) static jboolean ASAutoCompleteTextViewImpl_numericPatternMatchesWithNSString_(ASAutoCompleteTextViewImpl *self, NSString *str);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_removeNumericListener(ASAutoCompleteTextViewImpl *self);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_addNumericListenerWithJavaUtilRegexPattern_(ASAutoCompleteTextViewImpl *self, JavaUtilRegexPattern *pattern);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_setPhoneNumberWithId_(ASAutoCompleteTextViewImpl *self, id objValue);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_nativeSetPhoneNumberWithBoolean_(ASAutoCompleteTextViewImpl *self, jboolean value);

__attribute__((unused)) static id ASAutoCompleteTextViewImpl_getFont(ASAutoCompleteTextViewImpl *self);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_setInputTypeWithId_(ASAutoCompleteTextViewImpl *self, id objValue);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_nativeSetKeyboardTypeWithInt_(ASAutoCompleteTextViewImpl *self, jint value);

__attribute__((unused)) static id ASAutoCompleteTextViewImpl_getInputType(ASAutoCompleteTextViewImpl *self);

__attribute__((unused)) static jint ASAutoCompleteTextViewImpl_nativeGetKeyboardType(ASAutoCompleteTextViewImpl *self);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_setImeOptionsWithId_withNSString_(ASAutoCompleteTextViewImpl *self, id objValue, NSString *strValue);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_nativeSetImeOptionsWithInt_(ASAutoCompleteTextViewImpl *self, jint imeOptions);

__attribute__((unused)) static jint ASAutoCompleteTextViewImpl_nativeGetImeOptions(ASAutoCompleteTextViewImpl *self);

__attribute__((unused)) static id ASAutoCompleteTextViewImpl_getImeOptions(ASAutoCompleteTextViewImpl *self);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_setOnEditorActionWithId_(ASAutoCompleteTextViewImpl *self, id objValue);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_setOnEditorActionListener(ASAutoCompleteTextViewImpl *self);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_setInputAccessoryViewDoneButtonWithId_(ASAutoCompleteTextViewImpl *self, id objValue);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_nativeSetInputAccessoryViewDoneButtonWithNSString_(ASAutoCompleteTextViewImpl *self, NSString *title);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_setOnFocusWithId_(ASAutoCompleteTextViewImpl *self, id objValue);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_sendPressStartEvent(ASAutoCompleteTextViewImpl *self);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_sendPressEndEvent(ASAutoCompleteTextViewImpl *self);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_setSelectAllOnFocusWithId_(ASAutoCompleteTextViewImpl *self, id objValue);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_setSelectAllWithId_(ASAutoCompleteTextViewImpl *self, id objValue);

__attribute__((unused)) static jboolean ASAutoCompleteTextViewImpl_isFirstResponder(ASAutoCompleteTextViewImpl *self);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_becomeFirstResponder(ASAutoCompleteTextViewImpl *self);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_nativeSetSelectAllWithFloat_(ASAutoCompleteTextViewImpl *self, jfloat delay);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_setSingleLineWithId_(ASAutoCompleteTextViewImpl *self, id objValue);

__attribute__((unused)) static id ASAutoCompleteTextViewImpl_getSingleLine(ASAutoCompleteTextViewImpl *self);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_setScrollHorizontallyWithId_(ASAutoCompleteTextViewImpl *self, id objValue);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_nativeAddTapGesture(ASAutoCompleteTextViewImpl *self);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_nativeSetScrollEnabledWithId_withBoolean_(ASAutoCompleteTextViewImpl *self, id scrollView, jboolean scrollEnabled);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_setTextColorLinkWithADColorStateList_(ASAutoCompleteTextViewImpl *self, ADColorStateList *linkTextColors);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_handleOnBeforeTextChangeWithNSString_withInt_withInt_withInt_(ASAutoCompleteTextViewImpl *self, NSString *s, jint start, jint count, jint after);

__attribute__((unused)) static id<ADTextWatcher> ASAutoCompleteTextViewImpl_getTextChangedListenerWithId_withNSString_(ASAutoCompleteTextViewImpl *self, id objValue, NSString *name);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_handleOnAfterTextChange(ASAutoCompleteTextViewImpl *self);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_handleOnTextChange(ASAutoCompleteTextViewImpl *self);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_setOnAfterTextChangeWithId_(ASAutoCompleteTextViewImpl *self, id objValue);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_setBeforeOnTextChangeWithId_(ASAutoCompleteTextViewImpl *self, id objValue);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_setOnTextChangeWithId_(ASAutoCompleteTextViewImpl *self, id objValue);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_setTextAllCapsWithId_(ASAutoCompleteTextViewImpl *self, id objValue);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_forceRedraw(ASAutoCompleteTextViewImpl *self);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_nativeSetContentSizeWithId_withInt_withInt_(ASAutoCompleteTextViewImpl *self, id uiView, jint contentWidth, jint height);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_remeasure(ASAutoCompleteTextViewImpl *self);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_updateScrollViewContentOffset(ASAutoCompleteTextViewImpl *self);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_setInputViewWithId_(ASAutoCompleteTextViewImpl *self, id objValue);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_setNativeInputViewWithId_(ASAutoCompleteTextViewImpl *self, id objValue);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_setPickerView(ASAutoCompleteTextViewImpl *self);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_setDatePicker(ASAutoCompleteTextViewImpl *self);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_setErrorWithNSString_(ASAutoCompleteTextViewImpl *self, NSString *message);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_nativeCreateWithJavaUtilMap_(ASAutoCompleteTextViewImpl *self, id<JavaUtilMap> params);

__attribute__((unused)) static id ASAutoCompleteTextViewImpl_nativeCreateViewWithInt_(ASAutoCompleteTextViewImpl *self, jint viewType);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_addMinMaxListener(ASAutoCompleteTextViewImpl *self);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_nativeAddTextFieldDidChange(ASAutoCompleteTextViewImpl *self);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_setPasswordTypeWithId_(ASAutoCompleteTextViewImpl *self, id objValue);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_nativeSetSecureTextEntryWithBoolean_(ASAutoCompleteTextViewImpl *self, jboolean value);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_nativeMakeFrameForChildWidgetWithInt_withInt_withInt_withInt_(ASAutoCompleteTextViewImpl *self, jint l, jint t, jint r, jint b);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_postSetAttributeEditTextWithASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(ASAutoCompleteTextViewImpl *self, ASWidgetAttribute *key, NSString *strValue, id objValue, id<ASILifeCycleDecorator> decorator);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_setBorderStyleWithId_(ASAutoCompleteTextViewImpl *self, id value);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_nativeSetBorderStyleWithInt_(ASAutoCompleteTextViewImpl *self, jint value);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_updatePadding(ASAutoCompleteTextViewImpl *self);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_nativeSetVerticalAligmentCenter(ASAutoCompleteTextViewImpl *self);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_nativeSetVerticalAligmentBottom(ASAutoCompleteTextViewImpl *self);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_nativeSetVerticalAligmentTop(ASAutoCompleteTextViewImpl *self);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_setHintColorWithId_(ASAutoCompleteTextViewImpl *self, id objValue);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_nativeSetHintColorWithId_(ASAutoCompleteTextViewImpl *self, id value);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_syncPlaceholderLabel(ASAutoCompleteTextViewImpl *self);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_setFocusWithId_(ASAutoCompleteTextViewImpl *self, id objValue);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_setEntriesWithId_(ASAutoCompleteTextViewImpl *self, id objValue);

__attribute__((unused)) static id<ASIWidget> ASAutoCompleteTextViewImpl_createPopup(ASAutoCompleteTextViewImpl *self);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_unregisterDataSetObserver(ASAutoCompleteTextViewImpl *self);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_createEntries(ASAutoCompleteTextViewImpl *self);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_beforetextChangeWithNSString_withInt_withInt_(ASAutoCompleteTextViewImpl *self, NSString *s, jint start, jint count);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_createPopUpIfRequired(ASAutoCompleteTextViewImpl *self);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_afterTextChanged(ASAutoCompleteTextViewImpl *self);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_removePopUpContainer(ASAutoCompleteTextViewImpl *self);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_setThresholdWithId_(ASAutoCompleteTextViewImpl *self, id objValue);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_setCompletionHintWithId_(ASAutoCompleteTextViewImpl *self, id objValue);

__attribute__((unused)) static NSString *ASAutoCompleteTextViewImpl_getCompletionHint(ASAutoCompleteTextViewImpl *self);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_setCompletionViewWithId_(ASAutoCompleteTextViewImpl *self, id objValue);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_setDropDownlistSelectorWithId_(ASAutoCompleteTextViewImpl *self, id objValue);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_setDropDownWidthWithId_(ASAutoCompleteTextViewImpl *self, id objValue);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_setDropDownVerticalOffsetWithId_(ASAutoCompleteTextViewImpl *self, id objValue);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_setDropDownHorizontalOffsetWithId_(ASAutoCompleteTextViewImpl *self, id objValue);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_setDropDownHeightWithId_(ASAutoCompleteTextViewImpl *self, id objValue);

__attribute__((unused)) static id ASAutoCompleteTextViewImpl_getDropDownWidth(ASAutoCompleteTextViewImpl *self);

__attribute__((unused)) static id ASAutoCompleteTextViewImpl_getDropDownVerticalOffset(ASAutoCompleteTextViewImpl *self);

__attribute__((unused)) static id ASAutoCompleteTextViewImpl_getDropDownHorizontalOffset(ASAutoCompleteTextViewImpl *self);

__attribute__((unused)) static id ASAutoCompleteTextViewImpl_getDropDownHeight(ASAutoCompleteTextViewImpl *self);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_setAttrsOnTextView(ASAutoCompleteTextViewImpl *self);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_setDropDownAnchorWithId_(ASAutoCompleteTextViewImpl *self, id objValue);

__attribute__((unused)) static id ASAutoCompleteTextViewImpl_getDropDownAnchor(ASAutoCompleteTextViewImpl *self);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_setOnDismissListenerWithADAutoCompleteTextView_OnDismissListener_(ASAutoCompleteTextViewImpl *self, id<ADAutoCompleteTextView_OnDismissListener> onDismissListener);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_setDataObserverWithId_(ASAutoCompleteTextViewImpl *self, id observer);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_postSetAttributeWithASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(ASAutoCompleteTextViewImpl *self, ASWidgetAttribute *key, NSString *strValue, id objValue, id<ASILifeCycleDecorator> decorator);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_setHintTextFormatWithId_(ASAutoCompleteTextViewImpl *self, id objValue);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_setGravityWithId_(ASAutoCompleteTextViewImpl *self, id objValue);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_updateTextAlignment(ASAutoCompleteTextViewImpl *self);

__attribute__((unused)) static id ASAutoCompleteTextViewImpl_getGravity(ASAutoCompleteTextViewImpl *self);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_setTypeFaceWithId_withNSString_(ASAutoCompleteTextViewImpl *self, id objValue, NSString *strValue);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_setFontFamilyWithId_withNSString_(ASAutoCompleteTextViewImpl *self, id objValue, NSString *strValue);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_setTextStyleWithId_(ASAutoCompleteTextViewImpl *self, id objValue);

__attribute__((unused)) static id ASAutoCompleteTextViewImpl_getMinHeight(ASAutoCompleteTextViewImpl *self);

__attribute__((unused)) static id ASAutoCompleteTextViewImpl_getMinWidth(ASAutoCompleteTextViewImpl *self);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_setEmsWithId_(ASAutoCompleteTextViewImpl *self, id objValue);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_setMinEmsWithId_(ASAutoCompleteTextViewImpl *self, id objValue);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_setMaxEmsWithId_(ASAutoCompleteTextViewImpl *self, id objValue);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_setWidthWithId_(ASAutoCompleteTextViewImpl *self, id objValue);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_setHeightWithId_(ASAutoCompleteTextViewImpl *self, id objValue);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_setMaxLinesWithId_(ASAutoCompleteTextViewImpl *self, id objValue);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_setLinesWithId_(ASAutoCompleteTextViewImpl *self, id objValue);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_setMinLinesWithId_(ASAutoCompleteTextViewImpl *self, id objValue);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_setMaxHeightWithId_(ASAutoCompleteTextViewImpl *self, id objValue);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_setMaxWidthWithId_(ASAutoCompleteTextViewImpl *self, id objValue);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_setMinHeightWithId_(ASAutoCompleteTextViewImpl *self, id objValue);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_setMinWidthWithId_(ASAutoCompleteTextViewImpl *self, id objValue);

__attribute__((unused)) static id ASAutoCompleteTextViewImpl_getWidth(ASAutoCompleteTextViewImpl *self);

__attribute__((unused)) static jint ASAutoCompleteTextViewImpl_getHeight(ASAutoCompleteTextViewImpl *self);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_setFirstBaselineToTopHeightWithId_(ASAutoCompleteTextViewImpl *self, id objValue);

__attribute__((unused)) static jboolean ASAutoCompleteTextViewImpl_getIncludeFontPadding(ASAutoCompleteTextViewImpl *self);

__attribute__((unused)) static id ASAutoCompleteTextViewImpl_getFirstBaselineToTopHeight(ASAutoCompleteTextViewImpl *self);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_setLastBaselineToBottomHeightWithId_(ASAutoCompleteTextViewImpl *self, id objValue);

__attribute__((unused)) static id ASAutoCompleteTextViewImpl_getLastBaselineToBottomHeight(ASAutoCompleteTextViewImpl *self);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_initHtmlWithJavaUtilMap_(ASAutoCompleteTextViewImpl *self, id<JavaUtilMap> params);

__attribute__((unused)) static NSString *ASAutoCompleteTextViewImpl_getDigitString(ASAutoCompleteTextViewImpl *self);

__attribute__((unused)) static NSString *ASAutoCompleteTextViewImpl_getSignedChars(ASAutoCompleteTextViewImpl *self);

__attribute__((unused)) static NSString *ASAutoCompleteTextViewImpl_getDecimalChars(ASAutoCompleteTextViewImpl *self);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_setNumericWithId_(ASAutoCompleteTextViewImpl *self, id objValue);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_setDigitsWithId_(ASAutoCompleteTextViewImpl *self, id objValue);

__attribute__((unused)) static jint ASAutoCompleteTextViewImpl_nativeGetFontSize(ASAutoCompleteTextViewImpl *self);

__attribute__((unused)) static jint ASAutoCompleteTextViewImpl_nativeGetFontStyle(ASAutoCompleteTextViewImpl *self);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_nativeSetCustomFontWithInt_withASFontDescriptor_(ASAutoCompleteTextViewImpl *self, jint height, ASFontDescriptor *fontDescriptor);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_nativeSetFontStyleWithInt_(ASAutoCompleteTextViewImpl *self, jint style);

__attribute__((unused)) static id ASAutoCompleteTextViewImpl_getPaddingTop(ASAutoCompleteTextViewImpl *self);

__attribute__((unused)) static id ASAutoCompleteTextViewImpl_getPaddingEnd(ASAutoCompleteTextViewImpl *self);

__attribute__((unused)) static id ASAutoCompleteTextViewImpl_getPaddingStart(ASAutoCompleteTextViewImpl *self);

__attribute__((unused)) static id ASAutoCompleteTextViewImpl_getPaddingLeft(ASAutoCompleteTextViewImpl *self);

__attribute__((unused)) static id ASAutoCompleteTextViewImpl_getPaddingRight(ASAutoCompleteTextViewImpl *self);

__attribute__((unused)) static id ASAutoCompleteTextViewImpl_getPaddingBottom(ASAutoCompleteTextViewImpl *self);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_setPaddingVerticalWithId_(ASAutoCompleteTextViewImpl *self, id objValue);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_setPaddingHorizontalWithId_(ASAutoCompleteTextViewImpl *self, id objValue);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_setPaddingEndWithId_(ASAutoCompleteTextViewImpl *self, id objValue);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_setPaddingStartWithId_(ASAutoCompleteTextViewImpl *self, id objValue);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_handleHtmlTextWithNSString_(ASAutoCompleteTextViewImpl *self, NSString *text);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_nativeSetTextWithNSString_(ASAutoCompleteTextViewImpl *self, NSString *text);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_nativeSetHtmlTextWithId_(ASAutoCompleteTextViewImpl *self, id text);

__attribute__((unused)) static id ASAutoCompleteTextViewImpl_getMyText(ASAutoCompleteTextViewImpl *self);

__attribute__((unused)) static id ASAutoCompleteTextViewImpl_getTextSize(ASAutoCompleteTextViewImpl *self);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_setMyTextSizeWithId_(ASAutoCompleteTextViewImpl *self, id objValue);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_nativeSetTextSizeWithInt_(ASAutoCompleteTextViewImpl *self, jint value);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_setVerticalAligmentCenter(ASAutoCompleteTextViewImpl *self);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_setVerticalAligmentBottom(ASAutoCompleteTextViewImpl *self);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_setVerticalAligmentTop(ASAutoCompleteTextViewImpl *self);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_setHorizontalAligmentCenter(ASAutoCompleteTextViewImpl *self);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_setHorizontalAligmentRight(ASAutoCompleteTextViewImpl *self);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_setHorizontalAligmentRightInternal(ASAutoCompleteTextViewImpl *self);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_setHorizontalAligmentLeft(ASAutoCompleteTextViewImpl *self);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_setHorizontalAligmentLeftInternal(ASAutoCompleteTextViewImpl *self);

__attribute__((unused)) static jint ASAutoCompleteTextViewImpl_getTextAlignment(ASAutoCompleteTextViewImpl *self);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_setDrawablePaddingWithId_(ASAutoCompleteTextViewImpl *self, id objValue);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_setDrawableBottomWithId_(ASAutoCompleteTextViewImpl *self, id objValue);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_setDrawableTopWithId_(ASAutoCompleteTextViewImpl *self, id objValue);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_setDrawableRightWithNSString_withId_(ASAutoCompleteTextViewImpl *self, NSString *originalAttr, id objValue);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_setDrawableRightInternalWithNSString_withId_(ASAutoCompleteTextViewImpl *self, NSString *originalAttr, id objValue);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_setDrawableLeftWithNSString_withId_(ASAutoCompleteTextViewImpl *self, NSString *originalAttr, id objValue);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_setDrawableLeftInternalWithNSString_withId_(ASAutoCompleteTextViewImpl *self, NSString *originalAttr, id objValue);

__attribute__((unused)) static jint ASAutoCompleteTextViewImpl_getImageHeightWithId_(ASAutoCompleteTextViewImpl *self, id objValue);

__attribute__((unused)) static jint ASAutoCompleteTextViewImpl_getImageWidthWithId_(ASAutoCompleteTextViewImpl *self, id objValue);

__attribute__((unused)) static id ASAutoCompleteTextViewImpl_getDrawablePadding(ASAutoCompleteTextViewImpl *self);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_setDrawableTintModeWithId_(ASAutoCompleteTextViewImpl *self, id value);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_setDrawableTintWithId_(ASAutoCompleteTextViewImpl *self, id objValue);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_setTextColorWithId_(ASAutoCompleteTextViewImpl *self, id objValue);

__attribute__((unused)) static id ASAutoCompleteTextViewImpl_getTextColorState(ASAutoCompleteTextViewImpl *self);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_drawableStateChangeWithNSString_withADDrawable_(ASAutoCompleteTextViewImpl *self, NSString *type, ADDrawable *dr);

__attribute__((unused)) static jint ASAutoCompleteTextViewImpl_getLineHeight(ASAutoCompleteTextViewImpl *self);

__attribute__((unused)) static jint ASAutoCompleteTextViewImpl_getBorderWidth(ASAutoCompleteTextViewImpl *self);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_setTextColorHighlightWithId_(ASAutoCompleteTextViewImpl *self, id objValue);

__attribute__((unused)) static id ASAutoCompleteTextViewImpl_getTextColorHighlight(ASAutoCompleteTextViewImpl *self);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_createSimpleWrapableView(ASAutoCompleteTextViewImpl *self);

__attribute__((unused)) static jboolean ASAutoCompleteTextViewImpl_hasScrollView(ASAutoCompleteTextViewImpl *self);

__attribute__((unused)) static jboolean ASAutoCompleteTextViewImpl_isViewWrapped(ASAutoCompleteTextViewImpl *self);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_setForegroundFrameWithInt_withInt_withInt_withInt_(ASAutoCompleteTextViewImpl *self, jint l, jint t, jint r, jint b);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_invalidateWrapViewHolder(ASAutoCompleteTextViewImpl *self);

__attribute__((unused)) static id ASAutoCompleteTextViewImpl_getScrollView(ASAutoCompleteTextViewImpl *self);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_initPopUp(ASAutoCompleteTextViewImpl *self);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_nativeAddTextFieldDidChangeForPopup(ASAutoCompleteTextViewImpl *self);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_movePopUpContainerToTop(ASAutoCompleteTextViewImpl *self);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_showHidePopup(ASAutoCompleteTextViewImpl *self);

__attribute__((unused)) static jboolean ASAutoCompleteTextViewImpl_islinearlayout(ASAutoCompleteTextViewImpl *self);

@interface ASAutoCompleteTextViewImpl_DrawableTintMode () {
 @public
  id<JavaUtilMap> mapping_;
}

@end

J2OBJC_FIELD_SETTER(ASAutoCompleteTextViewImpl_DrawableTintMode, mapping_, id<JavaUtilMap>)

@interface ASAutoCompleteTextViewImpl_Font () {
 @public
  id<JavaUtilMap> mapping_;
}

@end

J2OBJC_FIELD_SETTER(ASAutoCompleteTextViewImpl_Font, mapping_, id<JavaUtilMap>)

@interface ASAutoCompleteTextViewImpl_TextStyle () {
 @public
  id<JavaUtilMap> mapping_;
}

@end

J2OBJC_FIELD_SETTER(ASAutoCompleteTextViewImpl_TextStyle, mapping_, id<JavaUtilMap>)

@interface ASAutoCompleteTextViewImpl_Capitalize () {
 @public
  id<JavaUtilMap> mapping_;
}

@end

J2OBJC_FIELD_SETTER(ASAutoCompleteTextViewImpl_Capitalize, mapping_, id<JavaUtilMap>)

@interface ASAutoCompleteTextViewImpl_Numeric () {
 @public
  id<JavaUtilMap> mapping_;
}

@end

J2OBJC_FIELD_SETTER(ASAutoCompleteTextViewImpl_Numeric, mapping_, id<JavaUtilMap>)

@interface ASAutoCompleteTextViewImpl_InputType () {
 @public
  id<JavaUtilMap> mapping_;
}

@end

J2OBJC_FIELD_SETTER(ASAutoCompleteTextViewImpl_InputType, mapping_, id<JavaUtilMap>)

@interface ASAutoCompleteTextViewImpl_ImeOptions () {
 @public
  id<JavaUtilMap> mapping_;
}

@end

J2OBJC_FIELD_SETTER(ASAutoCompleteTextViewImpl_ImeOptions, mapping_, id<JavaUtilMap>)

@interface ASAutoCompleteTextViewImpl_IosBorderStyle () {
 @public
  id<JavaUtilMap> mapping_;
}

@end

J2OBJC_FIELD_SETTER(ASAutoCompleteTextViewImpl_IosBorderStyle, mapping_, id<JavaUtilMap>)

@interface ASAutoCompleteTextViewImpl_InputView () {
 @public
  id<JavaUtilMap> mapping_;
}

@end

J2OBJC_FIELD_SETTER(ASAutoCompleteTextViewImpl_InputView, mapping_, id<JavaUtilMap>)

@interface ASAutoCompleteTextViewImpl_AutoCompleteTextViewExt () {
 @public
  __unsafe_unretained ASAutoCompleteTextViewImpl *this$0_;
  ASMeasureEvent *measureFinished_;
  ASOnLayoutEvent *onLayoutEvent_;
  id<JavaUtilList> overlays_;
  id<JavaUtilMap> templates_;
}

@end

J2OBJC_FIELD_SETTER(ASAutoCompleteTextViewImpl_AutoCompleteTextViewExt, measureFinished_, ASMeasureEvent *)
J2OBJC_FIELD_SETTER(ASAutoCompleteTextViewImpl_AutoCompleteTextViewExt, onLayoutEvent_, ASOnLayoutEvent *)
J2OBJC_FIELD_SETTER(ASAutoCompleteTextViewImpl_AutoCompleteTextViewExt, overlays_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(ASAutoCompleteTextViewImpl_AutoCompleteTextViewExt, templates_, id<JavaUtilMap>)

@interface ASAutoCompleteTextViewImpl_AutoCompleteTextViewExt_$Lambda$1 : NSObject < JavaLangRunnable > {
 @public
  ASAutoCompleteTextViewImpl_AutoCompleteTextViewExt *this$0_;
}

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(ASAutoCompleteTextViewImpl_AutoCompleteTextViewExt_$Lambda$1)

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_AutoCompleteTextViewExt_$Lambda$1_initWithASAutoCompleteTextViewImpl_AutoCompleteTextViewExt_(ASAutoCompleteTextViewImpl_AutoCompleteTextViewExt_$Lambda$1 *self, ASAutoCompleteTextViewImpl_AutoCompleteTextViewExt *outer$);

__attribute__((unused)) static ASAutoCompleteTextViewImpl_AutoCompleteTextViewExt_$Lambda$1 *new_ASAutoCompleteTextViewImpl_AutoCompleteTextViewExt_$Lambda$1_initWithASAutoCompleteTextViewImpl_AutoCompleteTextViewExt_(ASAutoCompleteTextViewImpl_AutoCompleteTextViewExt *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASAutoCompleteTextViewImpl_AutoCompleteTextViewExt_$Lambda$1 *create_ASAutoCompleteTextViewImpl_AutoCompleteTextViewExt_$Lambda$1_initWithASAutoCompleteTextViewImpl_AutoCompleteTextViewExt_(ASAutoCompleteTextViewImpl_AutoCompleteTextViewExt *outer$);

@interface ASAutoCompleteTextViewImpl_1 : NSObject < ADAdapterView_OnItemClickListener > {
 @public
  ASAutoCompleteTextViewImpl *this$0_;
}

- (instancetype)initWithASAutoCompleteTextViewImpl:(ASAutoCompleteTextViewImpl *)outer$;

- (void)onItemClickWithADAdapterView:(ADAdapterView *)parent
                          withADView:(ADView *)view
                             withInt:(jint)position
                            withLong:(jlong)id_;

@end

J2OBJC_EMPTY_STATIC_INIT(ASAutoCompleteTextViewImpl_1)

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_1_initWithASAutoCompleteTextViewImpl_(ASAutoCompleteTextViewImpl_1 *self, ASAutoCompleteTextViewImpl *outer$);

__attribute__((unused)) static ASAutoCompleteTextViewImpl_1 *new_ASAutoCompleteTextViewImpl_1_initWithASAutoCompleteTextViewImpl_(ASAutoCompleteTextViewImpl *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASAutoCompleteTextViewImpl_1 *create_ASAutoCompleteTextViewImpl_1_initWithASAutoCompleteTextViewImpl_(ASAutoCompleteTextViewImpl *outer$);

@interface ASAutoCompleteTextViewImpl_PopupDataObserver : ADDataSetObserver {
 @public
  ASAutoCompleteTextViewImpl *this$0_;
}

- (instancetype)initWithASAutoCompleteTextViewImpl:(ASAutoCompleteTextViewImpl *)outer$;

- (void)onChanged;

@end

J2OBJC_EMPTY_STATIC_INIT(ASAutoCompleteTextViewImpl_PopupDataObserver)

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_PopupDataObserver_initWithASAutoCompleteTextViewImpl_(ASAutoCompleteTextViewImpl_PopupDataObserver *self, ASAutoCompleteTextViewImpl *outer$);

__attribute__((unused)) static ASAutoCompleteTextViewImpl_PopupDataObserver *new_ASAutoCompleteTextViewImpl_PopupDataObserver_initWithASAutoCompleteTextViewImpl_(ASAutoCompleteTextViewImpl *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASAutoCompleteTextViewImpl_PopupDataObserver *create_ASAutoCompleteTextViewImpl_PopupDataObserver_initWithASAutoCompleteTextViewImpl_(ASAutoCompleteTextViewImpl *outer$);

J2OBJC_TYPE_LITERAL_HEADER(ASAutoCompleteTextViewImpl_PopupDataObserver)

@interface ASAutoCompleteTextViewImpl_2 : ASLoopParam {
 @public
  NSString *val$entry_;
}

- (instancetype)initWithNSString:(NSString *)capture$0;

- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(ASAutoCompleteTextViewImpl_2)

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_2_initWithNSString_(ASAutoCompleteTextViewImpl_2 *self, NSString *capture$0);

__attribute__((unused)) static ASAutoCompleteTextViewImpl_2 *new_ASAutoCompleteTextViewImpl_2_initWithNSString_(NSString *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASAutoCompleteTextViewImpl_2 *create_ASAutoCompleteTextViewImpl_2_initWithNSString_(NSString *capture$0);

@interface ASAutoCompleteTextViewImpl_OutsideEventListener : ASEventBusHandler {
 @public
  ASAutoCompleteTextViewImpl *window_;
}

- (instancetype)initWithASAutoCompleteTextViewImpl:(ASAutoCompleteTextViewImpl *)window
                                      withNSString:(NSString *)type;

- (void)doPerformWithId:(id)payload;

@end

J2OBJC_EMPTY_STATIC_INIT(ASAutoCompleteTextViewImpl_OutsideEventListener)

J2OBJC_FIELD_SETTER(ASAutoCompleteTextViewImpl_OutsideEventListener, window_, ASAutoCompleteTextViewImpl *)

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_OutsideEventListener_initWithASAutoCompleteTextViewImpl_withNSString_(ASAutoCompleteTextViewImpl_OutsideEventListener *self, ASAutoCompleteTextViewImpl *window, NSString *type);

__attribute__((unused)) static ASAutoCompleteTextViewImpl_OutsideEventListener *new_ASAutoCompleteTextViewImpl_OutsideEventListener_initWithASAutoCompleteTextViewImpl_withNSString_(ASAutoCompleteTextViewImpl *window, NSString *type) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASAutoCompleteTextViewImpl_OutsideEventListener *create_ASAutoCompleteTextViewImpl_OutsideEventListener_initWithASAutoCompleteTextViewImpl_withNSString_(ASAutoCompleteTextViewImpl *window, NSString *type);

J2OBJC_TYPE_LITERAL_HEADER(ASAutoCompleteTextViewImpl_OutsideEventListener)

@interface ASAutoCompleteTextViewImpl_OnDismissListener : NSObject < ADAutoCompleteTextView_OnDismissListener, ASIListener > {
 @public
  id<ASIWidget> w_;
  ADView *view_;
  NSString *strValue_;
  NSString *action_;
}

- (NSString *)getAction;

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue;

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue
                     withNSString:(NSString *)action;

- (void)onDismiss;

- (id<JavaUtilMap>)getOnDismissEventObj;

@end

J2OBJC_EMPTY_STATIC_INIT(ASAutoCompleteTextViewImpl_OnDismissListener)

J2OBJC_FIELD_SETTER(ASAutoCompleteTextViewImpl_OnDismissListener, w_, id<ASIWidget>)
J2OBJC_FIELD_SETTER(ASAutoCompleteTextViewImpl_OnDismissListener, view_, ADView *)
J2OBJC_FIELD_SETTER(ASAutoCompleteTextViewImpl_OnDismissListener, strValue_, NSString *)
J2OBJC_FIELD_SETTER(ASAutoCompleteTextViewImpl_OnDismissListener, action_, NSString *)

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_OnDismissListener_initWithASIWidget_withNSString_(ASAutoCompleteTextViewImpl_OnDismissListener *self, id<ASIWidget> w, NSString *strValue);

__attribute__((unused)) static ASAutoCompleteTextViewImpl_OnDismissListener *new_ASAutoCompleteTextViewImpl_OnDismissListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASAutoCompleteTextViewImpl_OnDismissListener *create_ASAutoCompleteTextViewImpl_OnDismissListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_OnDismissListener_initWithASIWidget_withNSString_withNSString_(ASAutoCompleteTextViewImpl_OnDismissListener *self, id<ASIWidget> w, NSString *strValue, NSString *action);

__attribute__((unused)) static ASAutoCompleteTextViewImpl_OnDismissListener *new_ASAutoCompleteTextViewImpl_OnDismissListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASAutoCompleteTextViewImpl_OnDismissListener *create_ASAutoCompleteTextViewImpl_OnDismissListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action);

J2OBJC_TYPE_LITERAL_HEADER(ASAutoCompleteTextViewImpl_OnDismissListener)

@interface ASAutoCompleteTextViewImpl_OnEditorActionListener : NSObject < ADTextView_OnEditorActionListener, ASIListener > {
 @public
  id<ASIWidget> w_;
  ADView *view_;
  NSString *strValue_;
  NSString *action_;
}

- (NSString *)getAction;

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue;

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue
                     withNSString:(NSString *)action;

- (jboolean)onEditorActionWithADTextView:(ADTextView *)v
                                 withInt:(jint)actionId
                          withADKeyEvent:(ADKeyEvent *)event;

- (id<JavaUtilMap>)getOnEditorActionEventObjWithADTextView:(ADTextView *)v
                                                   withInt:(jint)actionId
                                            withADKeyEvent:(ADKeyEvent *)event;

@end

J2OBJC_EMPTY_STATIC_INIT(ASAutoCompleteTextViewImpl_OnEditorActionListener)

J2OBJC_FIELD_SETTER(ASAutoCompleteTextViewImpl_OnEditorActionListener, w_, id<ASIWidget>)
J2OBJC_FIELD_SETTER(ASAutoCompleteTextViewImpl_OnEditorActionListener, view_, ADView *)
J2OBJC_FIELD_SETTER(ASAutoCompleteTextViewImpl_OnEditorActionListener, strValue_, NSString *)
J2OBJC_FIELD_SETTER(ASAutoCompleteTextViewImpl_OnEditorActionListener, action_, NSString *)

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_OnEditorActionListener_initWithASIWidget_withNSString_(ASAutoCompleteTextViewImpl_OnEditorActionListener *self, id<ASIWidget> w, NSString *strValue);

__attribute__((unused)) static ASAutoCompleteTextViewImpl_OnEditorActionListener *new_ASAutoCompleteTextViewImpl_OnEditorActionListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASAutoCompleteTextViewImpl_OnEditorActionListener *create_ASAutoCompleteTextViewImpl_OnEditorActionListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_OnEditorActionListener_initWithASIWidget_withNSString_withNSString_(ASAutoCompleteTextViewImpl_OnEditorActionListener *self, id<ASIWidget> w, NSString *strValue, NSString *action);

__attribute__((unused)) static ASAutoCompleteTextViewImpl_OnEditorActionListener *new_ASAutoCompleteTextViewImpl_OnEditorActionListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASAutoCompleteTextViewImpl_OnEditorActionListener *create_ASAutoCompleteTextViewImpl_OnEditorActionListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action);

J2OBJC_TYPE_LITERAL_HEADER(ASAutoCompleteTextViewImpl_OnEditorActionListener)

@interface ASAutoCompleteTextViewImpl_OnFocusChangeListener : NSObject < ADView_OnFocusChangeListener, ASIListener > {
 @public
  id<ASIWidget> w_;
  ADView *view_;
  NSString *strValue_;
  NSString *action_;
}

- (NSString *)getAction;

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue;

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue
                     withNSString:(NSString *)action;

- (void)onFocusChangeWithADView:(ADView *)v
                    withBoolean:(jboolean)hasFocus;

- (id<JavaUtilMap>)getOnFocusChangeEventObjWithADView:(ADView *)v
                                          withBoolean:(jboolean)hasFocus;

@end

J2OBJC_EMPTY_STATIC_INIT(ASAutoCompleteTextViewImpl_OnFocusChangeListener)

J2OBJC_FIELD_SETTER(ASAutoCompleteTextViewImpl_OnFocusChangeListener, w_, id<ASIWidget>)
J2OBJC_FIELD_SETTER(ASAutoCompleteTextViewImpl_OnFocusChangeListener, view_, ADView *)
J2OBJC_FIELD_SETTER(ASAutoCompleteTextViewImpl_OnFocusChangeListener, strValue_, NSString *)
J2OBJC_FIELD_SETTER(ASAutoCompleteTextViewImpl_OnFocusChangeListener, action_, NSString *)

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_OnFocusChangeListener_initWithASIWidget_withNSString_(ASAutoCompleteTextViewImpl_OnFocusChangeListener *self, id<ASIWidget> w, NSString *strValue);

__attribute__((unused)) static ASAutoCompleteTextViewImpl_OnFocusChangeListener *new_ASAutoCompleteTextViewImpl_OnFocusChangeListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASAutoCompleteTextViewImpl_OnFocusChangeListener *create_ASAutoCompleteTextViewImpl_OnFocusChangeListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_OnFocusChangeListener_initWithASIWidget_withNSString_withNSString_(ASAutoCompleteTextViewImpl_OnFocusChangeListener *self, id<ASIWidget> w, NSString *strValue, NSString *action);

__attribute__((unused)) static ASAutoCompleteTextViewImpl_OnFocusChangeListener *new_ASAutoCompleteTextViewImpl_OnFocusChangeListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASAutoCompleteTextViewImpl_OnFocusChangeListener *create_ASAutoCompleteTextViewImpl_OnFocusChangeListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action);

J2OBJC_TYPE_LITERAL_HEADER(ASAutoCompleteTextViewImpl_OnFocusChangeListener)

@interface ASAutoCompleteTextViewImpl_TextChangedListener : NSObject < ADTextWatcher, ASIListener > {
 @public
  id<ASIWidget> w_;
  ADView *view_;
  NSString *strValue_;
  NSString *action_;
}

- (NSString *)getAction;

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue;

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue
                     withNSString:(NSString *)action;

- (void)afterTextChangedWithADEditable:(id<ADEditable>)s;

- (void)beforeTextChangedWithJavaLangCharSequence:(id<JavaLangCharSequence>)s
                                          withInt:(jint)start
                                          withInt:(jint)count
                                          withInt:(jint)after;

- (void)onTextChangedWithJavaLangCharSequence:(id<JavaLangCharSequence>)s
                                      withInt:(jint)start
                                      withInt:(jint)before
                                      withInt:(jint)count;

- (id<JavaUtilMap>)getOnTextChangeEventObjWithJavaLangCharSequence:(id<JavaLangCharSequence>)s
                                                           withInt:(jint)start
                                                           withInt:(jint)before
                                                           withInt:(jint)count;

- (id<JavaUtilMap>)getOnbeforeTextChangeEventObjWithJavaLangCharSequence:(id<JavaLangCharSequence>)s
                                                                 withInt:(jint)start
                                                                 withInt:(jint)count
                                                                 withInt:(jint)after;

- (id<JavaUtilMap>)getOnafterTextChangeEventObjWithADEditable:(id<ADEditable>)s;

@end

J2OBJC_EMPTY_STATIC_INIT(ASAutoCompleteTextViewImpl_TextChangedListener)

J2OBJC_FIELD_SETTER(ASAutoCompleteTextViewImpl_TextChangedListener, w_, id<ASIWidget>)
J2OBJC_FIELD_SETTER(ASAutoCompleteTextViewImpl_TextChangedListener, view_, ADView *)
J2OBJC_FIELD_SETTER(ASAutoCompleteTextViewImpl_TextChangedListener, strValue_, NSString *)
J2OBJC_FIELD_SETTER(ASAutoCompleteTextViewImpl_TextChangedListener, action_, NSString *)

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_TextChangedListener_initWithASIWidget_withNSString_(ASAutoCompleteTextViewImpl_TextChangedListener *self, id<ASIWidget> w, NSString *strValue);

__attribute__((unused)) static ASAutoCompleteTextViewImpl_TextChangedListener *new_ASAutoCompleteTextViewImpl_TextChangedListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASAutoCompleteTextViewImpl_TextChangedListener *create_ASAutoCompleteTextViewImpl_TextChangedListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue);

__attribute__((unused)) static void ASAutoCompleteTextViewImpl_TextChangedListener_initWithASIWidget_withNSString_withNSString_(ASAutoCompleteTextViewImpl_TextChangedListener *self, id<ASIWidget> w, NSString *strValue, NSString *action);

__attribute__((unused)) static ASAutoCompleteTextViewImpl_TextChangedListener *new_ASAutoCompleteTextViewImpl_TextChangedListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASAutoCompleteTextViewImpl_TextChangedListener *create_ASAutoCompleteTextViewImpl_TextChangedListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action);

J2OBJC_TYPE_LITERAL_HEADER(ASAutoCompleteTextViewImpl_TextChangedListener)

@interface ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder () {
 @public
  ASAutoCompleteTextViewImpl *this$0_;
}

@end

@interface ASAutoCompleteTextViewImpl_AutoCompleteTextViewBean () {
 @public
  ASAutoCompleteTextViewImpl *this$0_;
}

@end

J2OBJC_INITIALIZED_DEFN(ASAutoCompleteTextViewImpl)

NSString *ASAutoCompleteTextViewImpl_LOCAL_NAME = @"AutoCompleteTextView";
NSString *ASAutoCompleteTextViewImpl_GROUP_NAME = @"AutoCompleteTextView";

@implementation ASAutoCompleteTextViewImpl

@synthesize uiView = uiView_;

- (void)loadAttributesWithNSString:(NSString *)attributeName {
  ASViewGroupModelImpl_register__WithNSString_(attributeName);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosText"])) withTypeWithNSString:@"resourcestring"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosPlaceholder"])) withTypeWithNSString:@"resourcestring"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"hint"])) withTypeWithNSString:@"resourcestring"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosTextColor"])) withTypeWithNSString:@"color"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosAdjustsFontSizeToFitWidth"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosMinimumFontSize"])) withTypeWithNSString:@"float"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosIsEditing"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosClearsOnBeginEditing"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosClearsOnInsertion"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosAllowsEditingTextAttributes"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosBackground"])) withTypeWithNSString:@"image"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosDisabledBackground"])) withTypeWithNSString:@"image"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"padding"])) withTypeWithNSString:@"dimension"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"paddingBottom"])) withTypeWithNSString:@"dimension"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"paddingRight"])) withTypeWithNSString:@"dimension"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"paddingLeft"])) withTypeWithNSString:@"dimension"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"paddingStart"])) withTypeWithNSString:@"dimension"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"paddingEnd"])) withTypeWithNSString:@"dimension"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"paddingTop"])) withTypeWithNSString:@"dimension"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"paddingHorizontal"])) withTypeWithNSString:@"dimension"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"paddingVertical"])) withTypeWithNSString:@"dimension"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"drawableLeft"])) withTypeWithNSString:@"drawable"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT_N_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"drawableStart"])) withTypeWithNSString:@"drawable"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT_N_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"drawableRight"])) withTypeWithNSString:@"drawable"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT_N_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"drawableEnd"])) withTypeWithNSString:@"drawable"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT_N_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"drawableTop"])) withTypeWithNSString:@"drawable"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT_N_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"drawableBottom"])) withTypeWithNSString:@"drawable"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT_N_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"drawablePadding"])) withTypeWithNSString:@"dimension"])) withOrderWithInt:1])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"drawableTint"])) withTypeWithNSString:@"colorstate"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_INVALIDATE]);
  ASConverterFactory_register__WithNSString_withASIConverter_(@"AutoCompleteTextView.drawableTintMode", new_ASAutoCompleteTextViewImpl_DrawableTintMode_init());
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"drawableTintMode"])) withTypeWithNSString:@"AutoCompleteTextView.drawableTintMode"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"minLines"])) withTypeWithNSString:@"int"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"lines"])) withTypeWithNSString:@"int"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"maxLines"])) withTypeWithNSString:@"int"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"minWidth"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"minHeight"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"maxWidth"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"maxHeight"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"height"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"width"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"maxEms"])) withTypeWithNSString:@"int"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"minEms"])) withTypeWithNSString:@"int"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"ems"])) withTypeWithNSString:@"int"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"editable"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"maxLength"])) withTypeWithNSString:@"int"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASConverterFactory_register__WithNSString_withASIConverter_(@"AutoCompleteTextView.font", new_ASAutoCompleteTextViewImpl_Font_init());
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"typeface"])) withTypeWithNSString:@"AutoCompleteTextView.font"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASConverterFactory_register__WithNSString_withASIConverter_(@"AutoCompleteTextView.textStyle", new_ASAutoCompleteTextViewImpl_TextStyle_init());
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"textStyle"])) withTypeWithNSString:@"AutoCompleteTextView.textStyle"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"fontFamily"])) withTypeWithNSString:@"font"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"enabled"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"textColorHighlight"])) withTypeWithNSString:@"color"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"firstBaselineToTopHeight"])) withTypeWithNSString:@"dimension"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"lastBaselineToBottomHeight"])) withTypeWithNSString:@"dimension"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"completionThreshold"])) withTypeWithNSString:@"int"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"completionHintView"])) withTypeWithNSString:@"string"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"completionHint"])) withTypeWithNSString:@"resourcestring"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"entries"])) withTypeWithNSString:@"array"])) withArrayTypeWithNSString:@"resourcestring"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"dropDownHeight"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"dropDownHorizontalOffset"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"dropDownVerticalOffset"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"dropDownWidth"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"dropDownSelector"])) withTypeWithNSString:@"drawable"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"dropDownAnchor"])) withTypeWithNSString:@"id"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"listitem"])) withTypeWithNSString:@"template"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"onDismiss"])) withTypeWithNSString:@"string"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"showDropDown"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"text"])) withTypeWithNSString:@"resourcestring"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"gravity"])) withTypeWithNSString:@"gravity"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"autoText"])) withTypeWithNSString:@"boolean"]);
  ASConverterFactory_register__WithNSString_withASIConverter_(@"AutoCompleteTextView.capitalize", new_ASAutoCompleteTextViewImpl_Capitalize_init());
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"capitalize"])) withTypeWithNSString:@"AutoCompleteTextView.capitalize"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"cursorVisible"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"textSize"])) withTypeWithNSString:@"dimensionsp"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASConverterFactory_register__WithNSString_withASIConverter_(@"AutoCompleteTextView.numeric", new_ASAutoCompleteTextViewImpl_Numeric_init());
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"numeric"])) withTypeWithNSString:@"AutoCompleteTextView.numeric"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"digits"])) withTypeWithNSString:@"string"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"password"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"phoneNumber"])) withTypeWithNSString:@"boolean"]);
  ASConverterFactory_register__WithNSString_withASIConverter_(@"AutoCompleteTextView.inputType", new_ASAutoCompleteTextViewImpl_InputType_init());
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"inputType"])) withTypeWithNSString:@"AutoCompleteTextView.inputType"]);
  ASConverterFactory_register__WithNSString_withASIConverter_(@"AutoCompleteTextView.imeOptions", new_ASAutoCompleteTextViewImpl_ImeOptions_init());
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"imeOptions"])) withTypeWithNSString:@"AutoCompleteTextView.imeOptions"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"selectAllOnFocus"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"selectAll"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"scrollHorizontally"])) withTypeWithNSString:@"boolean"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"singleLine"])) withTypeWithNSString:@"boolean"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"onEditorAction"])) withTypeWithNSString:@"string"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"textColorHint"])) withTypeWithNSString:@"colorstate"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT_N_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosInputAccessoryViewDoneButton"])) withTypeWithNSString:@"resourcestring"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"onFocusChange"])) withTypeWithNSString:@"string"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"textColor"])) withTypeWithNSString:@"colorstate"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"onTextChange"])) withTypeWithNSString:@"string"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"onbeforeTextChange"])) withTypeWithNSString:@"string"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"onafterTextChange"])) withTypeWithNSString:@"string"]);
  ASConverterFactory_register__WithNSString_withASIConverter_(@"AutoCompleteTextView.iosBorderStyle", new_ASAutoCompleteTextViewImpl_IosBorderStyle_init());
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosBorderStyle"])) withTypeWithNSString:@"AutoCompleteTextView.iosBorderStyle"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"hintTextFormat"])) withTypeWithNSString:@"resourcestring"])) withOrderWithInt:-1]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"textAllCaps"])) withTypeWithNSString:@"boolean"])) withOrderWithInt:-1])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASConverterFactory_register__WithNSString_withASIConverter_(@"AutoCompleteTextView.inputView", new_ASAutoCompleteTextViewImpl_InputView_init());
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosInputView"])) withTypeWithNSString:@"AutoCompleteTextView.inputView"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"setFocus"])) withTypeWithNSString:@"boolean"]);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASAutoCompleteTextViewImpl_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithNSString:(NSString *)localname {
  ASAutoCompleteTextViewImpl_initWithNSString_(self, localname);
  return self;
}

- (instancetype)initWithNSString:(NSString *)groupName
                    withNSString:(NSString *)localname {
  ASAutoCompleteTextViewImpl_initWithNSString_withNSString_(self, groupName, localname);
  return self;
}

- (IOSClass *)getViewClass {
  return ASAutoCompleteTextViewImpl_AutoCompleteTextViewExt_class_();
}

- (id<ASIWidget>)newInstance {
  return new_ASAutoCompleteTextViewImpl_initWithNSString_withNSString_(groupName_, localName_);
}

- (void)createWithASIFragment:(id<ASIFragment>)fragment
              withJavaUtilMap:(id<JavaUtilMap>)params {
  [super createWithASIFragment:fragment withJavaUtilMap:params];
  measurableView_ = new_ASAutoCompleteTextViewImpl_AutoCompleteTextViewExt_initWithASAutoCompleteTextViewImpl_(self);
  ASAutoCompleteTextViewImpl_createSimpleWrapableView(self);
  ASAutoCompleteTextViewImpl_nativeCreateWithJavaUtilMap_(self, params);
  ASViewImpl_registerCommandConveterWithASIWidget_(self);
  ASAutoCompleteTextViewImpl_setWidgetOnNativeClass(self);
}

- (void)setWidgetOnNativeClass {
  ASAutoCompleteTextViewImpl_setWidgetOnNativeClass(self);
}

- (void)setAttributeWithASWidgetAttribute:(ASWidgetAttribute *)key
                             withNSString:(NSString *)strValue
                                   withId:(id)objValue
                withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  id nativeWidget = [((ASSimpleWrapableView *) nil_chk(simpleWrapableView_)) getWrappedView];
  ASViewGroupModelImpl_setAttributeWithASIWidget_withASSimpleWrapableView_withASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(self, simpleWrapableView_, key, strValue, objValue, decorator);
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"iosText", @"hint", @"iosPlaceholder", @"iosTextColor", @"iosAdjustsFontSizeToFitWidth", @"iosMinimumFontSize", @"iosIsEditing", @"iosClearsOnBeginEditing", @"iosClearsOnInsertion", @"iosAllowsEditingTextAttributes", @"iosBackground", @"iosDisabledBackground", @"padding", @"paddingBottom", @"paddingRight", @"paddingLeft", @"paddingStart", @"paddingEnd", @"paddingTop", @"paddingHorizontal", @"paddingVertical", @"drawableLeft", @"drawableStart", @"drawableRight", @"drawableEnd", @"drawableTop", @"drawableBottom", @"drawablePadding", @"drawableTint", @"drawableTintMode", @"minLines", @"lines", @"maxLines", @"minWidth", @"minHeight", @"maxWidth", @"maxHeight", @"height", @"width", @"maxEms", @"minEms", @"ems", @"editable", @"maxLength", @"typeface", @"textStyle", @"fontFamily", @"enabled", @"textColorHighlight", @"firstBaselineToTopHeight", @"lastBaselineToBottomHeight", @"completionThreshold", @"completionHintView", @"completionHint", @"entries", @"dropDownHeight", @"dropDownHorizontalOffset", @"dropDownVerticalOffset", @"dropDownWidth", @"dropDownSelector", @"dropDownAnchor", @"listitem", @"onDismiss", @"showDropDown", @"text", @"gravity", @"autoText", @"capitalize", @"cursorVisible", @"textSize", @"numeric", @"digits", @"password", @"phoneNumber", @"inputType", @"imeOptions", @"selectAllOnFocus", @"selectAll", @"scrollHorizontally", @"singleLine", @"onEditorAction", @"textColorHint", @"iosInputAccessoryViewDoneButton", @"onFocusChange", @"textColor", @"onTextChange", @"onbeforeTextChange", @"onafterTextChange", @"iosBorderStyle", @"hintTextFormat", @"textAllCaps", @"iosInputView", @"setFocus" }, 93)) {
    case 0:
    {
      [self setTextWithId:nativeWidget withId:objValue];
    }
    break;
    case 1:
    case 2:
    {
      [self setPlaceholderWithId:nativeWidget withId:objValue];
    }
    break;
    case 3:
    {
      [self setTextColorWithId:nativeWidget withId:objValue];
    }
    break;
    case 4:
    {
      [self setAdjustsFontSizeToFitWidthWithId:nativeWidget withId:objValue];
    }
    break;
    case 5:
    {
      [self setMinimumFontSizeWithId:nativeWidget withId:objValue];
    }
    break;
    case 6:
    {
    }
    break;
    case 7:
    {
      [self setClearsOnBeginEditingWithId:nativeWidget withId:objValue];
    }
    break;
    case 8:
    {
      [self setClearsOnInsertionWithId:nativeWidget withId:objValue];
    }
    break;
    case 9:
    {
      [self setAllowsEditingTextAttributesWithId:nativeWidget withId:objValue];
    }
    break;
    case 10:
    {
      [self setBackgroundWithId:nativeWidget withId:objValue];
    }
    break;
    case 11:
    {
      [self setDisabledBackgroundWithId:nativeWidget withId:objValue];
    }
    break;
    case 12:
    {
      [self setPaddingWithId:objValue];
    }
    break;
    case 13:
    {
      [self setPaddingBottomWithId:objValue];
    }
    break;
    case 14:
    {
      [self setPaddingRightWithId:objValue];
    }
    break;
    case 15:
    {
      [self setPaddingLeftWithId:objValue];
    }
    break;
    case 16:
    {
      ASAutoCompleteTextViewImpl_setPaddingStartWithId_(self, objValue);
    }
    break;
    case 17:
    {
      ASAutoCompleteTextViewImpl_setPaddingEndWithId_(self, objValue);
    }
    break;
    case 18:
    {
      [self setPaddingTopWithId:objValue];
    }
    break;
    case 19:
    {
      ASAutoCompleteTextViewImpl_setPaddingHorizontalWithId_(self, objValue);
    }
    break;
    case 20:
    {
      ASAutoCompleteTextViewImpl_setPaddingVerticalWithId_(self, objValue);
    }
    break;
    case 21:
    {
      ASAutoCompleteTextViewImpl_setDrawableLeftWithNSString_withId_(self, @"drawableLeft", objValue);
    }
    break;
    case 22:
    {
      ASAutoCompleteTextViewImpl_setDrawableLeftWithNSString_withId_(self, @"drawableStart", objValue);
    }
    break;
    case 23:
    {
      ASAutoCompleteTextViewImpl_setDrawableRightWithNSString_withId_(self, @"drawableRight", objValue);
    }
    break;
    case 24:
    {
      ASAutoCompleteTextViewImpl_setDrawableRightWithNSString_withId_(self, @"drawableEnd", objValue);
    }
    break;
    case 25:
    {
      ASAutoCompleteTextViewImpl_setDrawableTopWithId_(self, objValue);
    }
    break;
    case 26:
    {
      ASAutoCompleteTextViewImpl_setDrawableBottomWithId_(self, objValue);
    }
    break;
    case 27:
    {
      ASAutoCompleteTextViewImpl_setDrawablePaddingWithId_(self, objValue);
    }
    break;
    case 28:
    {
      ASAutoCompleteTextViewImpl_setDrawableTintWithId_(self, objValue);
    }
    break;
    case 29:
    {
      ASAutoCompleteTextViewImpl_setDrawableTintModeWithId_(self, objValue);
    }
    break;
    case 30:
    {
      ASAutoCompleteTextViewImpl_setMinLinesWithId_(self, objValue);
    }
    break;
    case 31:
    {
      ASAutoCompleteTextViewImpl_setLinesWithId_(self, objValue);
    }
    break;
    case 32:
    {
      ASAutoCompleteTextViewImpl_setMaxLinesWithId_(self, objValue);
    }
    break;
    case 33:
    {
      ASAutoCompleteTextViewImpl_setMinWidthWithId_(self, objValue);
    }
    break;
    case 34:
    {
      ASAutoCompleteTextViewImpl_setMinHeightWithId_(self, objValue);
    }
    break;
    case 35:
    {
      ASAutoCompleteTextViewImpl_setMaxWidthWithId_(self, objValue);
    }
    break;
    case 36:
    {
      ASAutoCompleteTextViewImpl_setMaxHeightWithId_(self, objValue);
    }
    break;
    case 37:
    {
      ASAutoCompleteTextViewImpl_setHeightWithId_(self, objValue);
    }
    break;
    case 38:
    {
      ASAutoCompleteTextViewImpl_setWidthWithId_(self, objValue);
    }
    break;
    case 39:
    {
      ASAutoCompleteTextViewImpl_setMaxEmsWithId_(self, objValue);
    }
    break;
    case 40:
    {
      ASAutoCompleteTextViewImpl_setMinEmsWithId_(self, objValue);
    }
    break;
    case 41:
    {
      ASAutoCompleteTextViewImpl_setEmsWithId_(self, objValue);
    }
    break;
    case 42:
    {
      [self setEnabledWithId:objValue];
    }
    break;
    case 43:
    {
      ASAutoCompleteTextViewImpl_setMaxLengthWithId_(self, objValue);
    }
    break;
    case 44:
    {
      ASAutoCompleteTextViewImpl_setTypeFaceWithId_withNSString_(self, objValue, strValue);
    }
    break;
    case 45:
    {
      ASAutoCompleteTextViewImpl_setTextStyleWithId_(self, objValue);
    }
    break;
    case 46:
    {
      ASAutoCompleteTextViewImpl_setFontFamilyWithId_withNSString_(self, objValue, strValue);
    }
    break;
    case 47:
    {
      [self setEnabledWithId:objValue];
    }
    break;
    case 48:
    {
      ASAutoCompleteTextViewImpl_setTextColorHighlightWithId_(self, objValue);
    }
    break;
    case 49:
    {
      ASAutoCompleteTextViewImpl_setFirstBaselineToTopHeightWithId_(self, objValue);
    }
    break;
    case 50:
    {
      ASAutoCompleteTextViewImpl_setLastBaselineToBottomHeightWithId_(self, objValue);
    }
    break;
    case 51:
    {
      ASAutoCompleteTextViewImpl_setThresholdWithId_(self, objValue);
    }
    break;
    case 52:
    {
      ASAutoCompleteTextViewImpl_setCompletionViewWithId_(self, objValue);
    }
    break;
    case 53:
    {
      ASAutoCompleteTextViewImpl_setCompletionHintWithId_(self, objValue);
    }
    break;
    case 54:
    {
      ASAutoCompleteTextViewImpl_setEntriesWithId_(self, objValue);
    }
    break;
    case 55:
    {
      ASAutoCompleteTextViewImpl_setDropDownHeightWithId_(self, objValue);
    }
    break;
    case 56:
    {
      ASAutoCompleteTextViewImpl_setDropDownHorizontalOffsetWithId_(self, objValue);
    }
    break;
    case 57:
    {
      ASAutoCompleteTextViewImpl_setDropDownVerticalOffsetWithId_(self, objValue);
    }
    break;
    case 58:
    {
      ASAutoCompleteTextViewImpl_setDropDownWidthWithId_(self, objValue);
    }
    break;
    case 59:
    {
      ASAutoCompleteTextViewImpl_setDropDownlistSelectorWithId_(self, objValue);
    }
    break;
    case 60:
    {
      ASAutoCompleteTextViewImpl_setDropDownAnchorWithId_(self, objValue);
    }
    break;
    case 61:
    {
      [self addTemplateWithId:objValue];
    }
    break;
    case 62:
    {
      if ([objValue isKindOfClass:[NSString class]]) {
        ASAutoCompleteTextViewImpl_setOnDismissListenerWithADAutoCompleteTextView_OnDismissListener_(self, new_ASAutoCompleteTextViewImpl_OnDismissListener_initWithASIWidget_withNSString_withNSString_(self, strValue, @"onDismiss"));
      }
      else {
        ASAutoCompleteTextViewImpl_setOnDismissListenerWithADAutoCompleteTextView_OnDismissListener_(self, (id<ADAutoCompleteTextView_OnDismissListener>) cast_check(objValue, ADAutoCompleteTextView_OnDismissListener_class_()));
      }
    }
    break;
    case 63:
    {
      [self showDropDownWithId:objValue];
    }
    break;
    case 64:
    {
      [self setMyTextWithId:objValue];
    }
    break;
    case 65:
    {
      ASAutoCompleteTextViewImpl_setGravityWithId_(self, objValue);
    }
    break;
    case 66:
    {
      ASAutoCompleteTextViewImpl_setAutoTextWithId_(self, objValue);
    }
    break;
    case 67:
    {
      ASAutoCompleteTextViewImpl_setCapitalizeWithId_(self, objValue);
    }
    break;
    case 68:
    {
      ASAutoCompleteTextViewImpl_setCursorVisibleWithId_(self, objValue);
    }
    break;
    case 69:
    {
      ASAutoCompleteTextViewImpl_setMyTextSizeWithId_(self, objValue);
    }
    break;
    case 70:
    {
      ASAutoCompleteTextViewImpl_setNumericWithId_(self, objValue);
    }
    break;
    case 71:
    {
      ASAutoCompleteTextViewImpl_setDigitsWithId_(self, objValue);
    }
    break;
    case 72:
    {
      ASAutoCompleteTextViewImpl_setPasswordTypeWithId_(self, objValue);
    }
    break;
    case 73:
    {
      ASAutoCompleteTextViewImpl_setPhoneNumberWithId_(self, objValue);
    }
    break;
    case 74:
    {
      ASAutoCompleteTextViewImpl_setInputTypeWithId_(self, objValue);
    }
    break;
    case 75:
    {
      ASAutoCompleteTextViewImpl_setImeOptionsWithId_withNSString_(self, objValue, strValue);
    }
    break;
    case 76:
    {
      ASAutoCompleteTextViewImpl_setSelectAllOnFocusWithId_(self, objValue);
    }
    break;
    case 77:
    {
      ASAutoCompleteTextViewImpl_setSelectAllWithId_(self, objValue);
    }
    break;
    case 78:
    {
      ASAutoCompleteTextViewImpl_setScrollHorizontallyWithId_(self, objValue);
    }
    break;
    case 79:
    {
      ASAutoCompleteTextViewImpl_setSingleLineWithId_(self, objValue);
    }
    break;
    case 80:
    {
      ASAutoCompleteTextViewImpl_setOnEditorActionWithId_(self, objValue);
    }
    break;
    case 81:
    {
      ASAutoCompleteTextViewImpl_setHintColorWithId_(self, objValue);
    }
    break;
    case 82:
    {
      ASAutoCompleteTextViewImpl_setInputAccessoryViewDoneButtonWithId_(self, objValue);
    }
    break;
    case 83:
    {
      ASAutoCompleteTextViewImpl_setOnFocusWithId_(self, objValue);
    }
    break;
    case 84:
    {
      ASAutoCompleteTextViewImpl_setTextColorWithId_(self, objValue);
    }
    break;
    case 85:
    {
      ASAutoCompleteTextViewImpl_setOnTextChangeWithId_(self, objValue);
    }
    break;
    case 86:
    {
      ASAutoCompleteTextViewImpl_setBeforeOnTextChangeWithId_(self, objValue);
    }
    break;
    case 87:
    {
      ASAutoCompleteTextViewImpl_setOnAfterTextChangeWithId_(self, objValue);
    }
    break;
    case 88:
    {
      ASAutoCompleteTextViewImpl_setBorderStyleWithId_(self, objValue);
    }
    break;
    case 89:
    {
      ASAutoCompleteTextViewImpl_setHintTextFormatWithId_(self, objValue);
    }
    break;
    case 90:
    {
      ASAutoCompleteTextViewImpl_setTextAllCapsWithId_(self, objValue);
    }
    break;
    case 91:
    {
      ASAutoCompleteTextViewImpl_setInputViewWithId_(self, objValue);
    }
    break;
    case 92:
    {
      ASAutoCompleteTextViewImpl_setFocusWithId_(self, objValue);
    }
    break;
    default:
    break;
  }
  ASAutoCompleteTextViewImpl_postSetAttributeWithASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(self, key, strValue, objValue, decorator);
}

- (id)getAttributeWithASWidgetAttribute:(ASWidgetAttribute *)key
              withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  id nativeWidget = [((ASSimpleWrapableView *) nil_chk(simpleWrapableView_)) getWrappedView];
  id attributeValue = ASViewImpl_getAttributeWithASIWidget_withId_withASWidgetAttribute_withASILifeCycleDecorator_(self, nativeWidget, key, decorator);
  if (attributeValue != nil) {
    return attributeValue;
  }
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"iosText", @"hint", @"iosPlaceholder", @"iosTextColor", @"iosAdjustsFontSizeToFitWidth", @"iosMinimumFontSize", @"iosIsEditing", @"iosClearsOnBeginEditing", @"iosClearsOnInsertion", @"iosAllowsEditingTextAttributes", @"iosBackground", @"iosDisabledBackground", @"paddingBottom", @"paddingRight", @"paddingLeft", @"paddingStart", @"paddingEnd", @"paddingTop", @"drawablePadding", @"minLines", @"maxLines", @"minWidth", @"minHeight", @"maxWidth", @"maxHeight", @"height", @"width", @"maxEms", @"minEms", @"textColorHighlight", @"firstBaselineToTopHeight", @"lastBaselineToBottomHeight", @"completionHint", @"dropDownHeight", @"dropDownHorizontalOffset", @"dropDownVerticalOffset", @"dropDownWidth", @"dropDownAnchor", @"text", @"gravity", @"cursorVisible", @"textSize", @"inputType", @"imeOptions", @"textColor", @"onTextChange" }, 46)) {
    case 0:
    {
      return [self getText];
    }
    case 1:
    case 2:
    {
      return [self getPlaceholder];
    }
    case 3:
    {
      return [self getTextColor];
    }
    case 4:
    {
      return [self getAdjustsFontSizeToFitWidth];
    }
    case 5:
    {
      return [self getMinimumFontSize];
    }
    case 6:
    {
      return [self getIsEditing];
    }
    case 7:
    {
      return [self getClearsOnBeginEditing];
    }
    case 8:
    {
      return [self getClearsOnInsertion];
    }
    case 9:
    {
      return [self getAllowsEditingTextAttributes];
    }
    case 10:
    {
      return [self getBackground];
    }
    case 11:
    {
      return [self getDisabledBackground];
    }
    case 12:
    {
      return ASAutoCompleteTextViewImpl_getPaddingBottom(self);
    }
    case 13:
    {
      return ASAutoCompleteTextViewImpl_getPaddingRight(self);
    }
    case 14:
    {
      return ASAutoCompleteTextViewImpl_getPaddingLeft(self);
    }
    case 15:
    {
      return ASAutoCompleteTextViewImpl_getPaddingStart(self);
    }
    case 16:
    {
      return ASAutoCompleteTextViewImpl_getPaddingEnd(self);
    }
    case 17:
    {
      return ASAutoCompleteTextViewImpl_getPaddingTop(self);
    }
    case 18:
    {
      return ASAutoCompleteTextViewImpl_getDrawablePadding(self);
    }
    case 19:
    {
      return JavaLangInteger_valueOfWithInt_([self getMinLines]);
    }
    case 20:
    {
      return JavaLangInteger_valueOfWithInt_([self getMaxLines]);
    }
    case 21:
    {
      return ASAutoCompleteTextViewImpl_getMinWidth(self);
    }
    case 22:
    {
      return ASAutoCompleteTextViewImpl_getMinHeight(self);
    }
    case 23:
    {
      return JavaLangInteger_valueOfWithInt_([self getMaxWidth]);
    }
    case 24:
    {
      return JavaLangInteger_valueOfWithInt_([self getMaxHeight]);
    }
    case 25:
    {
      return JavaLangInteger_valueOfWithInt_(ASAutoCompleteTextViewImpl_getHeight(self));
    }
    case 26:
    {
      return ASAutoCompleteTextViewImpl_getWidth(self);
    }
    case 27:
    {
      return JavaLangInteger_valueOfWithInt_([self getMaxEms]);
    }
    case 28:
    {
      return JavaLangInteger_valueOfWithInt_([self getMinEms]);
    }
    case 29:
    {
      return ASAutoCompleteTextViewImpl_getTextColorHighlight(self);
    }
    case 30:
    {
      return ASAutoCompleteTextViewImpl_getFirstBaselineToTopHeight(self);
    }
    case 31:
    {
      return ASAutoCompleteTextViewImpl_getLastBaselineToBottomHeight(self);
    }
    case 32:
    {
      return ASAutoCompleteTextViewImpl_getCompletionHint(self);
    }
    case 33:
    {
      return ASAutoCompleteTextViewImpl_getDropDownHeight(self);
    }
    case 34:
    {
      return ASAutoCompleteTextViewImpl_getDropDownHorizontalOffset(self);
    }
    case 35:
    {
      return ASAutoCompleteTextViewImpl_getDropDownVerticalOffset(self);
    }
    case 36:
    {
      return ASAutoCompleteTextViewImpl_getDropDownWidth(self);
    }
    case 37:
    {
      return ASAutoCompleteTextViewImpl_getDropDownAnchor(self);
    }
    case 38:
    {
      return ASAutoCompleteTextViewImpl_getMyText(self);
    }
    case 39:
    {
      return ASAutoCompleteTextViewImpl_getGravity(self);
    }
    case 40:
    {
      return JavaLangBoolean_valueOfWithBoolean_(ASAutoCompleteTextViewImpl_getCursorVisible(self));
    }
    case 41:
    {
      return ASAutoCompleteTextViewImpl_getTextSize(self);
    }
    case 42:
    {
      return ASAutoCompleteTextViewImpl_getInputType(self);
    }
    case 43:
    {
      return ASAutoCompleteTextViewImpl_getImeOptions(self);
    }
    case 44:
    {
      return ASAutoCompleteTextViewImpl_getTextColorState(self);
    }
    case 45:
    {
      return self->textWatchers_ == nil ? nil : [self->textWatchers_ getWithId:[key getAttributeName]];
    }
  }
  return nil;
}

- (id)asWidget {
  return measurableView_;
}

- (void)setMyTextWithId:(id)text {
  NSString *mytext = (NSString *) cast_chk(text, [NSString class]);
  if (maxLength_ != -1 && [((NSString *) nil_chk(mytext)) java_length] > maxLength_) {
    mytext = [((NSString *) nil_chk(mytext)) java_substring:0 endIndex:maxLength_];
  }
  if (textAllCaps_) {
    mytext = [((NSString *) nil_chk(mytext)) uppercaseString];
  }
  ASAutoCompleteTextViewImpl_nativeTriggerBeforeChangeHandlersWithNSString_(self, (NSString *) cast_chk([self getText], [NSString class]));
  ASAutoCompleteTextViewImpl_nativeSetTextWithNSString_(self, mytext);
  ASAutoCompleteTextViewImpl_nativeTriggerChangeHandlersWithNSString_(self, (NSString *) cast_chk([self getText], [NSString class]));
}

- (void)nativeTriggerChangeHandlersWithNSString:(NSString *)text {
  ASAutoCompleteTextViewImpl_nativeTriggerChangeHandlersWithNSString_(self, text);
}

- (void)nativeTriggerBeforeChangeHandlersWithNSString:(NSString *)text {
  ASAutoCompleteTextViewImpl_nativeTriggerBeforeChangeHandlersWithNSString_(self, text);
}

- (void)setCursorVisibleWithId:(id)objValue {
  ASAutoCompleteTextViewImpl_setCursorVisibleWithId_(self, objValue);
}

- (id)nativeGetTintColorWithBoolean:(jboolean)clearColor {
  return ASAutoCompleteTextViewImpl_nativeGetTintColorWithBoolean_(self, clearColor);
}

- (void)setCapitalizeWithId:(id)objValue {
  ASAutoCompleteTextViewImpl_setCapitalizeWithId_(self, objValue);
}

- (void)nativeSetCapitalizeWithInt:(jint)capitalizeType {
  ASAutoCompleteTextViewImpl_nativeSetCapitalizeWithInt_(self, capitalizeType);
}

- (void)setAutoTextWithId:(id)objValue {
  ASAutoCompleteTextViewImpl_setAutoTextWithId_(self, objValue);
}

- (void)nativeSetCorrectionTypeWithInt:(jint)capitalizeType {
  ASAutoCompleteTextViewImpl_nativeSetCorrectionTypeWithInt_(self, capitalizeType);
}

- (jboolean)getCursorVisible {
  return ASAutoCompleteTextViewImpl_getCursorVisible(self);
}

- (void)setMaxLengthWithId:(id)objValue {
  ASAutoCompleteTextViewImpl_setMaxLengthWithId_(self, objValue);
}

- (void)setEnabledWithId:(id)objValue {
  jboolean isEnabled = objValue != nil && [(JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]) booleanValue];
  [self nativeSetEnabledWithBoolean:isEnabled];
}

- (IOSObjectArray *)getDigitStrings {
  return ASAutoCompleteTextViewImpl_getDigitStrings(self);
}

- (NSString *)getLocaleValueFromRSWithNSString:(NSString *)defaultSymbol
                                  withNSString:(NSString *)key {
  return ASAutoCompleteTextViewImpl_getLocaleValueFromRSWithNSString_withNSString_(self, defaultSymbol, key);
}

- (NSString *)getPlusString {
  return ASAutoCompleteTextViewImpl_getPlusString(self);
}

- (NSString *)getMinusString {
  return ASAutoCompleteTextViewImpl_getMinusString(self);
}

- (NSString *)getDecimalCharacter {
  return ASAutoCompleteTextViewImpl_getDecimalCharacter(self);
}

- (jboolean)numericPatternMatchesWithNSString:(NSString *)str {
  return ASAutoCompleteTextViewImpl_numericPatternMatchesWithNSString_(self, str);
}

- (void)removeNumericListener {
  ASAutoCompleteTextViewImpl_removeNumericListener(self);
}

- (void)addNumericListenerWithJavaUtilRegexPattern:(JavaUtilRegexPattern *)pattern {
  ASAutoCompleteTextViewImpl_addNumericListenerWithJavaUtilRegexPattern_(self, pattern);
}

-(BOOL) checkIfInputIsValid:(NSString *)string :(NSRange) range{
  if (maxLength_ > 0) {
    return ((ASUITextField*) uiView_).text.length + (string.length - range.length) <= maxLength_;
  }
  if (numericPattern_ != nil) {
    return [self numericPatternMatchesWithNSString: string];
  }
  return YES;
}

- (void)setPhoneNumberWithId:(id)objValue {
  ASAutoCompleteTextViewImpl_setPhoneNumberWithId_(self, objValue);
}

- (void)nativeSetPhoneNumberWithBoolean:(jboolean)value {
  ASAutoCompleteTextViewImpl_nativeSetPhoneNumberWithBoolean_(self, value);
}

- (id)getFont {
  return ASAutoCompleteTextViewImpl_getFont(self);
}

- (void)setInputTypeWithId:(id)objValue {
  ASAutoCompleteTextViewImpl_setInputTypeWithId_(self, objValue);
}

- (void)nativeSetKeyboardTypeWithInt:(jint)value {
  ASAutoCompleteTextViewImpl_nativeSetKeyboardTypeWithInt_(self, value);
}

- (id)getInputType {
  return ASAutoCompleteTextViewImpl_getInputType(self);
}

- (jint)nativeGetKeyboardType {
  return ASAutoCompleteTextViewImpl_nativeGetKeyboardType(self);
}

- (void)setImeOptionsWithId:(id)objValue
               withNSString:(NSString *)strValue {
  ASAutoCompleteTextViewImpl_setImeOptionsWithId_withNSString_(self, objValue, strValue);
}

- (void)nativeSetImeOptionsWithInt:(jint)imeOptions {
  ASAutoCompleteTextViewImpl_nativeSetImeOptionsWithInt_(self, imeOptions);
}

- (jint)nativeGetImeOptions {
  return ASAutoCompleteTextViewImpl_nativeGetImeOptions(self);
}

- (id)getImeOptions {
  return ASAutoCompleteTextViewImpl_getImeOptions(self);
}

- (void)setOnEditorActionWithId:(id)objValue {
  ASAutoCompleteTextViewImpl_setOnEditorActionWithId_(self, objValue);
}

- (void)setOnEditorActionListener {
  ASAutoCompleteTextViewImpl_setOnEditorActionListener(self);
}

-(BOOL)textField:(UITextField*)textField shouldChangeCharactersInRange:(NSRange)range replacementString:(NSString *)string{
  BOOL result = YES;
  if (textAllCaps_) {
    NSRange lowercaseCharRange = [string rangeOfCharacterFromSet:[NSCharacterSet lowercaseLetterCharacterSet]];
    if (lowercaseCharRange.location != NSNotFound) {
      if (textField.text.length == 0) {
        textField.text = [textField.text stringByReplacingCharactersInRange:range withString:[string uppercaseString]];
      } else {
        UITextPosition *beginning = textField.beginningOfDocument;
        UITextPosition *start = [textField positionFromPosition:beginning offset:range.location];
        UITextPosition *end = [textField positionFromPosition:start offset:range.length];
        UITextRange *textRange = [textField textRangeFromPosition:start toPosition:end];
        
        [textField replaceRange:textRange withText:[string uppercaseString]];
      }
      result = NO;
    }
  }
  [self handleOnBeforeTextChangeWithNSString: string withInt:range.location withInt: range.length withInt:string.length];
  return [self checkIfInputIsValid: string :range] && result;
}
- (BOOL)textFieldShouldReturn:(UITextField*)textField {
  // Execute any additional code
  if (self->editorAction_ != nil) {
    [self setOnEditorActionListener];
  }
  return YES;
}

- (void)setInputAccessoryViewDoneButtonWithId:(id)objValue {
  ASAutoCompleteTextViewImpl_setInputAccessoryViewDoneButtonWithId_(self, objValue);
}

- (void)nativeSetInputAccessoryViewDoneButtonWithNSString:(NSString *)title {
  ASAutoCompleteTextViewImpl_nativeSetInputAccessoryViewDoneButtonWithNSString_(self, title);
}

-(void)doneButtonPressed:(id)sender withEvent:(UIEvent *) event{
  [self textFieldShouldReturn: ((ASUITextField*)self.uiView)];
}
- (void)textFieldDidBeginEditing:(UITextField*)textField{
  if (self->selectAllOnFocus_) {
    [self nativeSetSelectAllWithFloat: 0];
  }
  
  if (self->selectOnceOnFocus_) {
    self->selectOnceOnFocus_ = FALSE;
    [self nativeSetSelectAllWithFloat: 0.5];
  }
  
  [self sendPressStartEvent];
}

- (void)textFieldDidEndEditing:(UITextField*)textField{
  [self sendPressEndEvent];
}

- (void) nativeSetSelectAllActual:(UITextView *)tv  {
  [tv setSelectedTextRange:[tv textRangeFromPosition:tv.beginningOfDocument toPosition:tv.endOfDocument]];
}

- (void)setOnFocusWithId:(id)objValue {
  ASAutoCompleteTextViewImpl_setOnFocusWithId_(self, objValue);
}

- (void)sendPressStartEvent {
  ASAutoCompleteTextViewImpl_sendPressStartEvent(self);
}

- (void)sendPressEndEvent {
  ASAutoCompleteTextViewImpl_sendPressEndEvent(self);
}

- (void)setSelectAllOnFocusWithId:(id)objValue {
  ASAutoCompleteTextViewImpl_setSelectAllOnFocusWithId_(self, objValue);
}

- (void)setSelectAllWithId:(id)objValue {
  ASAutoCompleteTextViewImpl_setSelectAllWithId_(self, objValue);
}

- (jboolean)isFirstResponder {
  return ASAutoCompleteTextViewImpl_isFirstResponder(self);
}

- (void)becomeFirstResponder {
  ASAutoCompleteTextViewImpl_becomeFirstResponder(self);
}

- (void)nativeSetSelectAllWithFloat:(jfloat)delay {
  ASAutoCompleteTextViewImpl_nativeSetSelectAllWithFloat_(self, delay);
}

- (void)setSingleLineWithId:(id)objValue {
  ASAutoCompleteTextViewImpl_setSingleLineWithId_(self, objValue);
}

- (id)getSingleLine {
  return ASAutoCompleteTextViewImpl_getSingleLine(self);
}

- (void)setScrollHorizontallyWithId:(id)objValue {
  ASAutoCompleteTextViewImpl_setScrollHorizontallyWithId_(self, objValue);
}

- (void)nativeAddTapGesture {
  ASAutoCompleteTextViewImpl_nativeAddTapGesture(self);
}

- (void)handleTap:(UITapGestureRecognizer *)gesture {
  ASUITextField* textView = ((ASUITextField*)self.uiView);
  if (![textView isFirstResponder]) {
    [textView becomeFirstResponder];
  }
  
  CGPoint point = [gesture locationInView:textView];
  UITextPosition *closestPosition = [textView closestPositionToPoint:point];
  if (closestPosition) {
    textView.selectedTextRange = [textView textRangeFromPosition:closestPosition toPosition:closestPosition];
  }
}

- (void)nativeSetScrollEnabledWithId:(id)scrollView
                         withBoolean:(jboolean)scrollEnabled {
  ASAutoCompleteTextViewImpl_nativeSetScrollEnabledWithId_withBoolean_(self, scrollView, scrollEnabled);
}

- (void)setTextColorLinkWithADColorStateList:(ADColorStateList *)linkTextColors {
  ASAutoCompleteTextViewImpl_setTextColorLinkWithADColorStateList_(self, linkTextColors);
}

- (void)handleOnBeforeTextChangeWithNSString:(NSString *)s
                                     withInt:(jint)start
                                     withInt:(jint)count
                                     withInt:(jint)after {
  ASAutoCompleteTextViewImpl_handleOnBeforeTextChangeWithNSString_withInt_withInt_withInt_(self, s, start, count, after);
}

- (id<ADTextWatcher>)getTextChangedListenerWithId:(id)objValue
                                     withNSString:(NSString *)name {
  return ASAutoCompleteTextViewImpl_getTextChangedListenerWithId_withNSString_(self, objValue, name);
}

- (void)handleOnAfterTextChange {
  ASAutoCompleteTextViewImpl_handleOnAfterTextChange(self);
}

- (void)handleOnTextChange {
  ASAutoCompleteTextViewImpl_handleOnTextChange(self);
}

- (void)setOnAfterTextChangeWithId:(id)objValue {
  ASAutoCompleteTextViewImpl_setOnAfterTextChangeWithId_(self, objValue);
}

- (void)setBeforeOnTextChangeWithId:(id)objValue {
  ASAutoCompleteTextViewImpl_setBeforeOnTextChangeWithId_(self, objValue);
}

- (void)setOnTextChangeWithId:(id)objValue {
  ASAutoCompleteTextViewImpl_setOnTextChangeWithId_(self, objValue);
}

- (void)setTextAllCapsWithId:(id)objValue {
  ASAutoCompleteTextViewImpl_setTextAllCapsWithId_(self, objValue);
}

- (void)forceRedraw {
  ASAutoCompleteTextViewImpl_forceRedraw(self);
}

- (void)nativeSetContentSizeWithId:(id)uiView
                           withInt:(jint)contentWidth
                           withInt:(jint)height {
  ASAutoCompleteTextViewImpl_nativeSetContentSizeWithId_withInt_withInt_(self, uiView, contentWidth, height);
}

- (void)remeasure {
  ASAutoCompleteTextViewImpl_remeasure(self);
}

- (void)updateScrollViewContentOffset {
  ASAutoCompleteTextViewImpl_updateScrollViewContentOffset(self);
}

- (void)setInputViewWithId:(id)objValue {
  ASAutoCompleteTextViewImpl_setInputViewWithId_(self, objValue);
}

- (void)setNativeInputViewWithId:(id)objValue {
  ASAutoCompleteTextViewImpl_setNativeInputViewWithId_(self, objValue);
}

- (void)setPickerView {
  ASAutoCompleteTextViewImpl_setPickerView(self);
}

- (void)setDatePicker {
  ASAutoCompleteTextViewImpl_setDatePicker(self);
}

- (NSString *)getTextEntered {
  return (NSString *) cast_chk(ASAutoCompleteTextViewImpl_getMyText(self), [NSString class]);
}

- (jboolean)isViewVisible {
  return [((ADAutoCompleteTextView *) nil_chk(measurableView_)) getVisibility] == ADView_VISIBLE;
}

- (void)focus {
  ASAutoCompleteTextViewImpl_becomeFirstResponder(self);
}

- (void)setErrorWithNSString:(NSString *)message {
  ASAutoCompleteTextViewImpl_setErrorWithNSString_(self, message);
}

- (void)nativeCreateWithJavaUtilMap:(id<JavaUtilMap>)params {
  ASAutoCompleteTextViewImpl_nativeCreateWithJavaUtilMap_(self, params);
}

- (id)nativeCreateViewWithInt:(jint)viewType {
  return ASAutoCompleteTextViewImpl_nativeCreateViewWithInt_(self, viewType);
}

- (void)addMinMaxListener {
  ASAutoCompleteTextViewImpl_addMinMaxListener(self);
}

- (void)nativeAddTextFieldDidChange {
  ASAutoCompleteTextViewImpl_nativeAddTextFieldDidChange(self);
}

-(void)textFieldDidChange:(UITextField *)textView{
  [self handleOnTextChange];
  [self handleOnAfterTextChange];
  if (callMeasureOnChange_) {
    [self remeasure];
  }
}

- (void)setPasswordTypeWithId:(id)objValue {
  ASAutoCompleteTextViewImpl_setPasswordTypeWithId_(self, objValue);
}

- (void)nativeSetSecureTextEntryWithBoolean:(jboolean)value {
  ASAutoCompleteTextViewImpl_nativeSetSecureTextEntryWithBoolean_(self, value);
}

- (void)nativeMakeFrameForChildWidgetWithInt:(jint)l
                                     withInt:(jint)t
                                     withInt:(jint)r
                                     withInt:(jint)b {
  ASAutoCompleteTextViewImpl_nativeMakeFrameForChildWidgetWithInt_withInt_withInt_withInt_(self, l, t, r, b);
}

- (void)postSetAttributeEditTextWithASWidgetAttribute:(ASWidgetAttribute *)key
                                         withNSString:(NSString *)strValue
                                               withId:(id)objValue
                            withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  ASAutoCompleteTextViewImpl_postSetAttributeEditTextWithASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(self, key, strValue, objValue, decorator);
}

- (void)setBorderStyleWithId:(id)value {
  ASAutoCompleteTextViewImpl_setBorderStyleWithId_(self, value);
}

- (void)nativeSetBorderStyleWithInt:(jint)value {
  ASAutoCompleteTextViewImpl_nativeSetBorderStyleWithInt_(self, value);
}

- (jint)measureWidth {
  jint width = [((ADAutoCompleteTextView *) nil_chk(measurableView_)) nativeMeasureWidthWithId:uiView_];
  return width;
}

- (jint)measureHeightWithInt:(jint)width {
  jint height = [((ADAutoCompleteTextView *) nil_chk(measurableView_)) nativeMeasureHeightWithId:uiView_ withInt:width];
  return height;
}

- (void)updatePadding {
  ASAutoCompleteTextViewImpl_updatePadding(self);
}

- (void)nativeSetVerticalAligmentCenter {
  ASAutoCompleteTextViewImpl_nativeSetVerticalAligmentCenter(self);
}

- (void)nativeSetVerticalAligmentBottom {
  ASAutoCompleteTextViewImpl_nativeSetVerticalAligmentBottom(self);
}

- (void)nativeSetVerticalAligmentTop {
  ASAutoCompleteTextViewImpl_nativeSetVerticalAligmentTop(self);
}

- (void)setHintColorWithId:(id)objValue {
  ASAutoCompleteTextViewImpl_setHintColorWithId_(self, objValue);
}

- (void)nativeSetHintColorWithId:(id)value {
  ASAutoCompleteTextViewImpl_nativeSetHintColorWithId_(self, value);
}

- (void)syncPlaceholderLabel {
  ASAutoCompleteTextViewImpl_syncPlaceholderLabel(self);
}

- (void)nativeSetEnabledWithBoolean:(jboolean)value {
  ((ASUITextField*)self.uiView).enabled = value;
}

- (void)setFocusWithId:(id)objValue {
  ASAutoCompleteTextViewImpl_setFocusWithId_(self, objValue);
}

- (id)invokeMethodEditTextWithNSString:(NSString *)methodName
                     withNSObjectArray:(IOSObjectArray *)args {
  if ([((NSString *) nil_chk(methodName)) isEqual:@"nativeWidgetFor"] && [nil_chk(IOSObjectArray_Get(nil_chk(args), 0)) isEqual:@"onFocusChange"]) {
    return uiView_;
  }
  return nil;
}

- (void)setEntriesWithId:(id)objValue {
  ASAutoCompleteTextViewImpl_setEntriesWithId_(self, objValue);
}

- (id<ASIWidget>)createPopup {
  return ASAutoCompleteTextViewImpl_createPopup(self);
}

- (void)setAttrsOnListView {
  if (dropDownlistSelector_ != nil) {
    [((ASListViewImpl *) nil_chk(listViewWidget_)) setAttributeWithNSString:@"listSelector" withId:dropDownlistSelector_ withBoolean:true];
  }
  [((ASListViewImpl_ListAdapter *) nil_chk([((ASListViewImpl *) nil_chk(listViewWidget_)) getListAdapter])) registerDataSetObserverWithADDataSetObserver:observer_];
  [((ASListViewImpl *) nil_chk(listViewWidget_)) setModelForWithNSString:ASAutoCompleteTextViewImpl_DEFAULT_MODEL_FOR];
  if (listItem_ == nil) {
    [((ASListViewImpl *) nil_chk(listViewWidget_)) addTemplateWithId:[self quickConvertWithId:@"@layout/autocomplete_entries" withNSString:@"template"]];
  }
  else {
    [((ASListViewImpl *) nil_chk(listViewWidget_)) addTemplateWithId:listItem_];
  }
  [((ASListViewImpl *) nil_chk(listViewWidget_)) setModelDescPathWithNSString:[self getModelDescPath]];
  [((ASListViewImpl *) nil_chk(listViewWidget_)) setModelIdPathWithNSString:[self getModelIdPath]];
  [((ASListViewImpl *) nil_chk(listViewWidget_)) setOnItemClickWithId:new_ASAutoCompleteTextViewImpl_1_initWithASAutoCompleteTextViewImpl_(self)];
}

- (ADTextView *)createHintViewWithASIWidget:(id<ASIWidget>)hintContainerWidget {
  ADLinearLayout_LayoutParams *hintParams = new_ADLinearLayout_LayoutParams_initWithInt_withInt_withFloat_(ADViewGroup_LayoutParams_MATCH_PARENT, 0, 1.0f);
  ADTextView *promptView;
  id<ASIWidget> promptWidget = (id<ASIWidget>) cast_check([self quickConvertWithId:hintViewPath_ withNSString:@"template"], ASIWidget_class_());
  promptWidget = [((id<ASIWidget>) nil_chk(promptWidget)) loadLazyWidgetsWithASHasWidgets:(id<ASHasWidgets>) cast_check(hintContainerWidget, ASHasWidgets_class_())];
  promptView = (ADTextView *) cast_chk([((id<ASIWidget>) nil_chk(promptWidget)) asWidget], [ADTextView class]);
  [promptWidget setAttributeWithNSString:@"text" withId:hintText_ withBoolean:true];
  [((ADTextView *) nil_chk(promptView)) setLayoutParamsWithADViewGroup_LayoutParams:hintParams];
  return promptView;
}

- (void)unregisterDataSetObserver {
  ASAutoCompleteTextViewImpl_unregisterDataSetObserver(self);
}

- (void)createEntries {
  ASAutoCompleteTextViewImpl_createEntries(self);
}

- (void)beforetextChangeWithNSString:(NSString *)s
                             withInt:(jint)start
                             withInt:(jint)count {
  ASAutoCompleteTextViewImpl_beforetextChangeWithNSString_withInt_withInt_(self, s, start, count);
}

- (void)createPopUpIfRequired {
  ASAutoCompleteTextViewImpl_createPopUpIfRequired(self);
}

- (void)afterTextChanged {
  ASAutoCompleteTextViewImpl_afterTextChanged(self);
}

- (void)removePopUpContainer {
  ASAutoCompleteTextViewImpl_removePopUpContainer(self);
}

- (void)setThresholdWithId:(id)objValue {
  ASAutoCompleteTextViewImpl_setThresholdWithId_(self, objValue);
}

- (void)setCompletionHintWithId:(id)objValue {
  ASAutoCompleteTextViewImpl_setCompletionHintWithId_(self, objValue);
}

- (NSString *)getCompletionHint {
  return ASAutoCompleteTextViewImpl_getCompletionHint(self);
}

- (void)setCompletionViewWithId:(id)objValue {
  ASAutoCompleteTextViewImpl_setCompletionViewWithId_(self, objValue);
}

- (void)setDropDownlistSelectorWithId:(id)objValue {
  ASAutoCompleteTextViewImpl_setDropDownlistSelectorWithId_(self, objValue);
}

- (void)setDropDownWidthWithId:(id)objValue {
  ASAutoCompleteTextViewImpl_setDropDownWidthWithId_(self, objValue);
}

- (void)setDropDownVerticalOffsetWithId:(id)objValue {
  ASAutoCompleteTextViewImpl_setDropDownVerticalOffsetWithId_(self, objValue);
}

- (void)setDropDownHorizontalOffsetWithId:(id)objValue {
  ASAutoCompleteTextViewImpl_setDropDownHorizontalOffsetWithId_(self, objValue);
}

- (void)setDropDownHeightWithId:(id)objValue {
  ASAutoCompleteTextViewImpl_setDropDownHeightWithId_(self, objValue);
}

- (id)getDropDownWidth {
  return ASAutoCompleteTextViewImpl_getDropDownWidth(self);
}

- (id)getDropDownVerticalOffset {
  return ASAutoCompleteTextViewImpl_getDropDownVerticalOffset(self);
}

- (id)getDropDownHorizontalOffset {
  return ASAutoCompleteTextViewImpl_getDropDownHorizontalOffset(self);
}

- (id)getDropDownHeight {
  return ASAutoCompleteTextViewImpl_getDropDownHeight(self);
}

- (void)setAttrsOnTextView {
  ASAutoCompleteTextViewImpl_setAttrsOnTextView(self);
}

- (void)setDropDownAnchorWithId:(id)objValue {
  ASAutoCompleteTextViewImpl_setDropDownAnchorWithId_(self, objValue);
}

- (id)getDropDownAnchor {
  return ASAutoCompleteTextViewImpl_getDropDownAnchor(self);
}

- (id)getChildAttributeWithASIWidget:(id<ASIWidget>)w
               withASWidgetAttribute:(ASWidgetAttribute *)key {
  return nil;
}

- (void)setChildAttributeWithASIWidget:(id<ASIWidget>)widget
                 withASWidgetAttribute:(ASWidgetAttribute *)key
                          withNSString:(NSString *)strValue
                                withId:(id)value {
}

- (void)setOnDismissListenerWithADAutoCompleteTextView_OnDismissListener:(id<ADAutoCompleteTextView_OnDismissListener>)onDismissListener {
  ASAutoCompleteTextViewImpl_setOnDismissListenerWithADAutoCompleteTextView_OnDismissListener_(self, onDismissListener);
}

- (void)showDropDownWithId:(id)objValue {
  if ([((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]))) booleanValue]) {
    if ([self isInitialised]) {
      ASAutoCompleteTextViewImpl_createPopUpIfRequired(self);
      ADDataSetObserver *tmpObserver = [((ADAutoCompleteTextView *) nil_chk(measurableView_)) getObserver];
      NSString *myText = (NSString *) cast_chk(ASAutoCompleteTextViewImpl_getMyText(self), [NSString class]);
      [((ASListViewImpl_ListAdapter *) nil_chk([((ASListViewImpl *) nil_chk(listViewWidget_)) getListAdapter])) unregisterDataSetObserverWithADDataSetObserver:tmpObserver];
      [((ASListViewImpl_ListAdapter *) nil_chk([((ASListViewImpl *) nil_chk(listViewWidget_)) getListAdapter])) dofilterSyncWithNSString:myText];
      [((ADAutoCompleteTextView *) nil_chk(measurableView_)) showDropDown];
      [((ASListViewImpl_ListAdapter *) nil_chk([((ASListViewImpl *) nil_chk(listViewWidget_)) getListAdapter])) registerDataSetObserverWithADDataSetObserver:tmpObserver];
      [((id<ASIFragment>) nil_chk([self getFragment])) remeasure];
    }
  }
  else {
    if (listViewWidget_ != nil) {
      [((ADAutoCompleteTextView *) nil_chk(measurableView_)) dismissDropDown];
    }
  }
}

- (id)invokeMethodWithNSString:(NSString *)methodName
             withNSObjectArray:(IOSObjectArray *)args {
  switch (JreIndexOfStr(methodName, (id[]){ @"setDataObserver" }, 1)) {
    case 0:
    ASAutoCompleteTextViewImpl_setDataObserverWithId_(self, IOSObjectArray_Get(nil_chk(args), 0));
    break;
    default:
    break;
  }
  return [self invokeMethodEditTextWithNSString:methodName withNSObjectArray:args];
}

- (void)setDataObserverWithId:(id)observer {
  ASAutoCompleteTextViewImpl_setDataObserverWithId_(self, observer);
}

- (void)postSetAttributeWithASWidgetAttribute:(ASWidgetAttribute *)key
                                 withNSString:(NSString *)strValue
                                       withId:(id)objValue
                    withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  ASAutoCompleteTextViewImpl_postSetAttributeWithASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(self, key, strValue, objValue, decorator);
}

- (void)addOutsideTouchListenerWithBoolean:(jboolean)add {
  ASEvent_StandardEvents *type = JreLoadEnum(ASEvent_StandardEvents, outsideClicked);
  if (outsideEventListener_ != nil) {
    [((ASEventBus *) nil_chk([((id<ASIFragment>) nil_chk(fragment_)) getEventBus])) offWithASEventBusHandlerArray:[IOSObjectArray newArrayWithObjects:(id[]){ outsideEventListener_ } count:1 type:ASEventBusHandler_class_()]];
    outsideEventListener_ = nil;
  }
  if (add) {
    outsideEventListener_ = new_ASAutoCompleteTextViewImpl_OutsideEventListener_initWithASAutoCompleteTextViewImpl_withNSString_(self, [((ASEvent_StandardEvents *) nil_chk(type)) description]);
    [((ASEventBus *) nil_chk([((id<ASIFragment>) nil_chk(fragment_)) getEventBus])) onWithNSString:[type description] withASEventBusHandlerArray:[IOSObjectArray newArrayWithObjects:(id[]){ outsideEventListener_ } count:1 type:ASEventBusHandler_class_()]];
  }
}

- (void)resetError {
  jint validationErrorDisplayType = [self getValidationErrorDisplayType];
  if ((validationErrorDisplayType & ASFormElement_ERROR_DISPLAY_TYPE_POPUP) != 0) {
    ASAutoCompleteTextViewImpl_setErrorWithNSString_(self, nil);
  }
  if ((validationErrorDisplayType & ASFormElement_ERROR_DISPLAY_TYPE_LABEL) != 0) {
    ASViewImpl_setMessageOnLabelWithASIWidget_withNSString_(self, @"");
  }
  if ((validationErrorDisplayType & ASFormElement_ERROR_DISPLAY_TYPE_STYLE) != 0) {
    ASViewImpl_setStyleWithASIWidget_withId_(self, [self getNormalStyle]);
  }
}

- (void)showErrorWithNSString:(NSString *)message {
  jint validationErrorDisplayType = [self getValidationErrorDisplayType];
  if ((validationErrorDisplayType & ASFormElement_ERROR_DISPLAY_TYPE_POPUP) != 0) {
    ASAutoCompleteTextViewImpl_setErrorWithNSString_(self, message);
  }
  if ((validationErrorDisplayType & ASFormElement_ERROR_DISPLAY_TYPE_LABEL) != 0) {
    ASViewImpl_setMessageOnLabelWithASIWidget_withNSString_(self, message);
  }
  if ((validationErrorDisplayType & ASFormElement_ERROR_DISPLAY_TYPE_STYLE) != 0) {
    ASViewImpl_setStyleWithASIWidget_withId_(self, [self getErrorStyle]);
  }
}

- (void)setHintTextFormatWithId:(id)objValue {
  ASAutoCompleteTextViewImpl_setHintTextFormatWithId_(self, objValue);
}

- (void)setGravityWithId:(id)objValue {
  ASAutoCompleteTextViewImpl_setGravityWithId_(self, objValue);
}

- (void)updateTextAlignment {
  ASAutoCompleteTextViewImpl_updateTextAlignment(self);
}

- (id)getGravity {
  return ASAutoCompleteTextViewImpl_getGravity(self);
}

- (void)onRtlPropertiesChangedWithInt:(jint)layoutDirection {
  if ([((ADAutoCompleteTextView *) nil_chk(measurableView_)) getRawTextAlignment] != 0 || [((ADAutoCompleteTextView *) nil_chk(measurableView_)) getRawLayoutDirection] != 0) {
    ASAutoCompleteTextViewImpl_updateTextAlignment(self);
  }
}

- (void)setTypeFaceWithId:(id)objValue
             withNSString:(NSString *)strValue {
  ASAutoCompleteTextViewImpl_setTypeFaceWithId_withNSString_(self, objValue, strValue);
}

- (void)setFontFamilyWithId:(id)objValue
               withNSString:(NSString *)strValue {
  ASAutoCompleteTextViewImpl_setFontFamilyWithId_withNSString_(self, objValue, strValue);
}

- (void)setTextStyleWithId:(id)objValue {
  ASAutoCompleteTextViewImpl_setTextStyleWithId_(self, objValue);
}

- (id)getMinHeight {
  return ASAutoCompleteTextViewImpl_getMinHeight(self);
}

- (id)getMinWidth {
  return ASAutoCompleteTextViewImpl_getMinWidth(self);
}

- (void)setEmsWithId:(id)objValue {
  ASAutoCompleteTextViewImpl_setEmsWithId_(self, objValue);
}

- (jint)getMaxEms {
  return [((ADAutoCompleteTextView *) nil_chk(measurableView_)) getMaxEms];
}

- (jint)getMinEms {
  return [((ADAutoCompleteTextView *) nil_chk(measurableView_)) getMinEms];
}

- (void)setMinEmsWithId:(id)objValue {
  ASAutoCompleteTextViewImpl_setMinEmsWithId_(self, objValue);
}

- (jint)getMinLines {
  return [((ADAutoCompleteTextView *) nil_chk(measurableView_)) getMinLines];
}

- (jint)getMaxLines {
  return [((ADAutoCompleteTextView *) nil_chk(measurableView_)) getMaxLines];
}

- (void)setMaxEmsWithId:(id)objValue {
  ASAutoCompleteTextViewImpl_setMaxEmsWithId_(self, objValue);
}

- (void)setWidthWithId:(id)objValue {
  ASAutoCompleteTextViewImpl_setWidthWithId_(self, objValue);
}

- (void)setHeightWithId:(id)objValue {
  ASAutoCompleteTextViewImpl_setHeightWithId_(self, objValue);
}

- (void)setMaxLinesWithId:(id)objValue {
  ASAutoCompleteTextViewImpl_setMaxLinesWithId_(self, objValue);
}

- (void)setLinesWithId:(id)objValue {
  ASAutoCompleteTextViewImpl_setLinesWithId_(self, objValue);
}

- (void)setMinLinesWithId:(id)objValue {
  ASAutoCompleteTextViewImpl_setMinLinesWithId_(self, objValue);
}

- (void)setMaxHeightWithId:(id)objValue {
  ASAutoCompleteTextViewImpl_setMaxHeightWithId_(self, objValue);
}

- (void)setMaxWidthWithId:(id)objValue {
  ASAutoCompleteTextViewImpl_setMaxWidthWithId_(self, objValue);
}

- (jint)getMaxWidth {
  return [((ADAutoCompleteTextView *) nil_chk(measurableView_)) getMaxWidth];
}

- (jint)getMaxHeight {
  return [((ADAutoCompleteTextView *) nil_chk(measurableView_)) getMaxHeight];
}

- (void)setMinHeightWithId:(id)objValue {
  ASAutoCompleteTextViewImpl_setMinHeightWithId_(self, objValue);
}

- (void)setMinWidthWithId:(id)objValue {
  ASAutoCompleteTextViewImpl_setMinWidthWithId_(self, objValue);
}

- (id)getWidth {
  return ASAutoCompleteTextViewImpl_getWidth(self);
}

- (jint)getHeight {
  return ASAutoCompleteTextViewImpl_getHeight(self);
}

- (void)setFirstBaselineToTopHeightWithId:(id)objValue {
  ASAutoCompleteTextViewImpl_setFirstBaselineToTopHeightWithId_(self, objValue);
}

- (jboolean)getIncludeFontPadding {
  return ASAutoCompleteTextViewImpl_getIncludeFontPadding(self);
}

- (id)getFirstBaselineToTopHeight {
  return ASAutoCompleteTextViewImpl_getFirstBaselineToTopHeight(self);
}

- (void)setLastBaselineToBottomHeightWithId:(id)objValue {
  ASAutoCompleteTextViewImpl_setLastBaselineToBottomHeightWithId_(self, objValue);
}

- (id)getLastBaselineToBottomHeight {
  return ASAutoCompleteTextViewImpl_getLastBaselineToBottomHeight(self);
}

- (void)initHtmlWithJavaUtilMap:(id<JavaUtilMap>)params {
  ASAutoCompleteTextViewImpl_initHtmlWithJavaUtilMap_(self, params);
}

- (NSString *)getDigitString {
  return ASAutoCompleteTextViewImpl_getDigitString(self);
}

- (NSString *)getSignedChars {
  return ASAutoCompleteTextViewImpl_getSignedChars(self);
}

- (NSString *)getDecimalChars {
  return ASAutoCompleteTextViewImpl_getDecimalChars(self);
}

- (void)setNumericWithId:(id)objValue {
  ASAutoCompleteTextViewImpl_setNumericWithId_(self, objValue);
}

- (void)setDigitsWithId:(id)objValue {
  ASAutoCompleteTextViewImpl_setDigitsWithId_(self, objValue);
}

- (jint)nativeGetFontSize {
  return ASAutoCompleteTextViewImpl_nativeGetFontSize(self);
}

- (jint)nativeGetFontStyle {
  return ASAutoCompleteTextViewImpl_nativeGetFontStyle(self);
}

- (void)nativeSetCustomFontWithInt:(jint)height
              withASFontDescriptor:(ASFontDescriptor *)fontDescriptor {
  ASAutoCompleteTextViewImpl_nativeSetCustomFontWithInt_withASFontDescriptor_(self, height, fontDescriptor);
}

- (void)nativeSetFontStyleWithInt:(jint)style {
  ASAutoCompleteTextViewImpl_nativeSetFontStyleWithInt_(self, style);
}

- (void)setPaddingWithId:(id)objValue {
  jint value = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
  ADView *view = (ADView *) cast_chk([self asWidget], [ADView class]);
  ASViewImpl_setPaddingWithId_withADView_(JavaLangInteger_valueOfWithInt_(value), view);
}

- (void)setPaddingBottomWithId:(id)objValue {
  jint value = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
  ADView *view = (ADView *) cast_chk([self asWidget], [ADView class]);
  ASViewImpl_setPaddingBottomWithId_withADView_(JavaLangInteger_valueOfWithInt_(value), view);
}

- (void)setPaddingTopWithId:(id)objValue {
  jint value = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
  ADView *view = (ADView *) cast_chk([self asWidget], [ADView class]);
  ASViewImpl_setPaddingTopWithId_withADView_(JavaLangInteger_valueOfWithInt_(value), view);
}

- (void)setPaddingLeftWithId:(id)objValue {
  jint value = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
  ADView *view = (ADView *) cast_chk([self asWidget], [ADView class]);
  ASViewImpl_setPaddingLeftWithId_withADView_(JavaLangInteger_valueOfWithInt_(value), view);
}

- (void)setPaddingRightWithId:(id)objValue {
  jint value = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
  ADView *view = (ADView *) cast_chk([self asWidget], [ADView class]);
  ASViewImpl_setPaddingRightWithId_withADView_(JavaLangInteger_valueOfWithInt_(value), view);
}

- (id)getPaddingTop {
  return ASAutoCompleteTextViewImpl_getPaddingTop(self);
}

- (id)getPaddingEnd {
  return ASAutoCompleteTextViewImpl_getPaddingEnd(self);
}

- (id)getPaddingStart {
  return ASAutoCompleteTextViewImpl_getPaddingStart(self);
}

- (id)getPaddingLeft {
  return ASAutoCompleteTextViewImpl_getPaddingLeft(self);
}

- (id)getPaddingRight {
  return ASAutoCompleteTextViewImpl_getPaddingRight(self);
}

- (id)getPaddingBottom {
  return ASAutoCompleteTextViewImpl_getPaddingBottom(self);
}

- (void)setPaddingVerticalWithId:(id)objValue {
  ASAutoCompleteTextViewImpl_setPaddingVerticalWithId_(self, objValue);
}

- (void)setPaddingHorizontalWithId:(id)objValue {
  ASAutoCompleteTextViewImpl_setPaddingHorizontalWithId_(self, objValue);
}

- (void)setPaddingEndWithId:(id)objValue {
  ASAutoCompleteTextViewImpl_setPaddingEndWithId_(self, objValue);
}

- (void)setPaddingStartWithId:(id)objValue {
  ASAutoCompleteTextViewImpl_setPaddingStartWithId_(self, objValue);
}

- (void)handleHtmlTextWithNSString:(NSString *)text {
  ASAutoCompleteTextViewImpl_handleHtmlTextWithNSString_(self, text);
}

- (void)nativeSetTextWithNSString:(NSString *)text {
  ASAutoCompleteTextViewImpl_nativeSetTextWithNSString_(self, text);
}

- (void)nativeSetHtmlTextWithId:(id)text {
  ASAutoCompleteTextViewImpl_nativeSetHtmlTextWithId_(self, text);
}

- (id)getMyText {
  return ASAutoCompleteTextViewImpl_getMyText(self);
}

- (id)getTextSize {
  return ASAutoCompleteTextViewImpl_getTextSize(self);
}

- (void)setMyTextSizeWithId:(id)objValue {
  ASAutoCompleteTextViewImpl_setMyTextSizeWithId_(self, objValue);
}

- (void)nativeSetTextSizeWithInt:(jint)value {
  ASAutoCompleteTextViewImpl_nativeSetTextSizeWithInt_(self, value);
}

- (void)setVerticalAligmentCenter {
  ASAutoCompleteTextViewImpl_setVerticalAligmentCenter(self);
}

- (void)setVerticalAligmentBottom {
  ASAutoCompleteTextViewImpl_setVerticalAligmentBottom(self);
}

- (void)setVerticalAligmentTop {
  ASAutoCompleteTextViewImpl_setVerticalAligmentTop(self);
}

- (void)setHorizontalAligmentCenter {
  ASAutoCompleteTextViewImpl_setHorizontalAligmentCenter(self);
}

- (void)setHorizontalAligmentRight {
  ASAutoCompleteTextViewImpl_setHorizontalAligmentRight(self);
}

- (void)setHorizontalAligmentRightInternal {
  ASAutoCompleteTextViewImpl_setHorizontalAligmentRightInternal(self);
}

- (void)setHorizontalAligmentLeft {
  ASAutoCompleteTextViewImpl_setHorizontalAligmentLeft(self);
}

- (void)setHorizontalAligmentLeftInternal {
  ASAutoCompleteTextViewImpl_setHorizontalAligmentLeftInternal(self);
}

- (jint)getTextAlignment {
  return ASAutoCompleteTextViewImpl_getTextAlignment(self);
}

- (void)setDrawablePaddingWithId:(id)objValue {
  ASAutoCompleteTextViewImpl_setDrawablePaddingWithId_(self, objValue);
}

- (void)setDrawableBottomWithId:(id)objValue {
  ASAutoCompleteTextViewImpl_setDrawableBottomWithId_(self, objValue);
}

- (void)setDrawableTopWithId:(id)objValue {
  ASAutoCompleteTextViewImpl_setDrawableTopWithId_(self, objValue);
}

- (void)setDrawableRightWithNSString:(NSString *)originalAttr
                              withId:(id)objValue {
  ASAutoCompleteTextViewImpl_setDrawableRightWithNSString_withId_(self, originalAttr, objValue);
}

- (void)setDrawableRightInternalWithNSString:(NSString *)originalAttr
                                      withId:(id)objValue {
  ASAutoCompleteTextViewImpl_setDrawableRightInternalWithNSString_withId_(self, originalAttr, objValue);
}

- (void)setDrawableLeftWithNSString:(NSString *)originalAttr
                             withId:(id)objValue {
  ASAutoCompleteTextViewImpl_setDrawableLeftWithNSString_withId_(self, originalAttr, objValue);
}

- (void)setDrawableLeftInternalWithNSString:(NSString *)originalAttr
                                     withId:(id)objValue {
  ASAutoCompleteTextViewImpl_setDrawableLeftInternalWithNSString_withId_(self, originalAttr, objValue);
}

- (jint)getImageHeightWithId:(id)objValue {
  return ASAutoCompleteTextViewImpl_getImageHeightWithId_(self, objValue);
}

- (jint)getImageWidthWithId:(id)objValue {
  return ASAutoCompleteTextViewImpl_getImageWidthWithId_(self, objValue);
}

- (id)getDrawablePadding {
  return ASAutoCompleteTextViewImpl_getDrawablePadding(self);
}

- (void)setDrawableTintModeWithId:(id)value {
  ASAutoCompleteTextViewImpl_setDrawableTintModeWithId_(self, value);
}

- (void)setDrawableTintWithId:(id)objValue {
  ASAutoCompleteTextViewImpl_setDrawableTintWithId_(self, objValue);
}

- (void)setTextColorWithId:(id)objValue {
  ASAutoCompleteTextViewImpl_setTextColorWithId_(self, objValue);
}

- (id)getTextColorState {
  return ASAutoCompleteTextViewImpl_getTextColorState(self);
}

- (void)drawableStateChanged {
  [super drawableStateChanged];
  ASAutoCompleteTextViewImpl_drawableStateChangeWithNSString_withADDrawable_(self, @"bottom", [((ADAutoCompleteTextView *) nil_chk(measurableView_)) getBottomDrawable]);
  ASAutoCompleteTextViewImpl_drawableStateChangeWithNSString_withADDrawable_(self, @"left", [((ADAutoCompleteTextView *) nil_chk(measurableView_)) getLeftDrawable]);
  ASAutoCompleteTextViewImpl_drawableStateChangeWithNSString_withADDrawable_(self, @"right", [((ADAutoCompleteTextView *) nil_chk(measurableView_)) getRightDrawable]);
  ASAutoCompleteTextViewImpl_drawableStateChangeWithNSString_withADDrawable_(self, @"top", [((ADAutoCompleteTextView *) nil_chk(measurableView_)) getTopDrawable]);
  if ([((ADAutoCompleteTextView *) nil_chk(measurableView_)) getTextColors] != nil && [((ADColorStateList *) nil_chk([((ADAutoCompleteTextView *) nil_chk(measurableView_)) getTextColors])) isStateful]) {
    ASAutoCompleteTextViewImpl_setTextColorWithId_(self, JavaLangInteger_valueOfWithInt_([((ADAutoCompleteTextView *) nil_chk(measurableView_)) getCurrentTextColor]));
  }
  if ([((ADAutoCompleteTextView *) nil_chk(measurableView_)) getHintTextColors] != nil && [((ADColorStateList *) nil_chk([((ADAutoCompleteTextView *) nil_chk(measurableView_)) getHintTextColors])) isStateful]) {
    ASAutoCompleteTextViewImpl_setHintColorWithId_(self, JavaLangInteger_valueOfWithInt_([((ADAutoCompleteTextView *) nil_chk(measurableView_)) getCurrentHintTextColor]));
    ASAutoCompleteTextViewImpl_syncPlaceholderLabel(self);
  }
  if (drawableTint_ != nil && [drawableTint_ isStateful]) {
    ASAutoCompleteTextViewImpl_setDrawableTintWithId_(self, drawableTint_);
    [self invalidate];
  }
  if ([((ADAutoCompleteTextView *) nil_chk(measurableView_)) getLinkTextColors] != nil && [((ADColorStateList *) nil_chk([((ADAutoCompleteTextView *) nil_chk(measurableView_)) getLinkTextColors])) isStateful]) {
    ASAutoCompleteTextViewImpl_setTextColorLinkWithADColorStateList_(self, [((ADAutoCompleteTextView *) nil_chk(measurableView_)) getLinkTextColors]);
  }
}

- (void)drawableStateChangeWithNSString:(NSString *)type
                         withADDrawable:(ADDrawable *)dr {
  ASAutoCompleteTextViewImpl_drawableStateChangeWithNSString_withADDrawable_(self, type, dr);
}

- (jint)getBorderPadding {
  return 0;
}

- (jint)getLineHeightPadding {
  return 0;
}

- (jint)getLineHeight {
  return ASAutoCompleteTextViewImpl_getLineHeight(self);
}

- (jint)getBorderWidth {
  return ASAutoCompleteTextViewImpl_getBorderWidth(self);
}

- (void)setTextColorHighlightWithId:(id)objValue {
  ASAutoCompleteTextViewImpl_setTextColorHighlightWithId_(self, objValue);
}

- (id)getTextColorHighlight {
  return ASAutoCompleteTextViewImpl_getTextColorHighlight(self);
}

- (void)setTextWithId:(id)nativeWidget
               withId:(id)value {
  ((ASUITextField*) nativeWidget).text = (NSString*) value;
}

- (id)getText {
  return ((ASUITextField*) uiView_).text;
}

- (void)setPlaceholderWithId:(id)nativeWidget
                      withId:(id)value {
  ((ASUITextField*) nativeWidget).placeholder = (NSString*) value;
}

- (id)getPlaceholder {
  return ((ASUITextField*) uiView_).placeholder;
}

- (void)setTextColorWithId:(id)nativeWidget
                    withId:(id)value {
  ((ASUITextField*) nativeWidget).textColor = (UIColor*) value;
}

- (id)getTextColor {
  return ((ASUITextField*) uiView_).textColor;
}

- (void)setAdjustsFontSizeToFitWidthWithId:(id)nativeWidget
                                    withId:(id)value {
  ((ASUITextField*) nativeWidget).adjustsFontSizeToFitWidth = [(JavaLangBoolean*) value booleanValue];
}

- (id)getAdjustsFontSizeToFitWidth {
  return [JavaLangBoolean valueOfWithBoolean :((ASUITextField*) uiView_).adjustsFontSizeToFitWidth];
}

- (void)setMinimumFontSizeWithId:(id)nativeWidget
                          withId:(id)value {
  ((ASUITextField*) nativeWidget).minimumFontSize = [(JavaLangFloat*) value floatValue];
}

- (id)getMinimumFontSize {
  return [JavaLangFloat valueOfWithFloat :((ASUITextField*) uiView_).minimumFontSize];
}

- (id)getIsEditing {
  return [JavaLangBoolean valueOfWithBoolean :((ASUITextField*) uiView_).editing];
}

- (void)setClearsOnBeginEditingWithId:(id)nativeWidget
                               withId:(id)value {
  ((ASUITextField*) nativeWidget).clearsOnBeginEditing = [(JavaLangBoolean*) value booleanValue];
}

- (id)getClearsOnBeginEditing {
  return [JavaLangBoolean valueOfWithBoolean :((ASUITextField*) uiView_).clearsOnBeginEditing];
}

- (void)setClearsOnInsertionWithId:(id)nativeWidget
                            withId:(id)value {
  ((ASUITextField*) nativeWidget).clearsOnInsertion = [(JavaLangBoolean*) value booleanValue];
}

- (id)getClearsOnInsertion {
  return [JavaLangBoolean valueOfWithBoolean :((ASUITextField*) uiView_).clearsOnInsertion];
}

- (void)setAllowsEditingTextAttributesWithId:(id)nativeWidget
                                      withId:(id)value {
  ((ASUITextField*) nativeWidget).allowsEditingTextAttributes = [(JavaLangBoolean*) value booleanValue];
}

- (id)getAllowsEditingTextAttributes {
  return [JavaLangBoolean valueOfWithBoolean :((ASUITextField*) uiView_).allowsEditingTextAttributes];
}

- (void)setBackgroundWithId:(id)nativeWidget
                     withId:(id)value {
  ((ASUITextField*) nativeWidget).background = (UIImage*) value;
}

- (id)getBackground {
  return ((ASUITextField*) uiView_).background;
}

- (void)setDisabledBackgroundWithId:(id)nativeWidget
                             withId:(id)value {
  ((ASUITextField*) nativeWidget).disabledBackground = (UIImage*) value;
}

- (id)getDisabledBackground {
  return ((ASUITextField*) uiView_).disabledBackground;
}

- (jboolean)checkIosVersionWithNSString:(NSString *)v {
  return ([[[UIDevice currentDevice] systemVersion] compare:v options:NSNumericSearch] == NSOrderedDescending);
}

- (void)setIdWithNSString:(NSString *)id_ {
  if (id_ != nil && ![id_ isEqual:@""]) {
    [super setIdWithNSString:id_];
    [((ADAutoCompleteTextView *) nil_chk(measurableView_)) setIdWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([self quickConvertWithId:id_ withNSString:@"id"], [JavaLangInteger class]))) intValue]];
  }
}

- (void)setVisibleWithBoolean:(jboolean)b {
  [((ADView *) nil_chk(((ADView *) cast_chk([self asWidget], [ADView class])))) setVisibilityWithInt:b ? ADView_VISIBLE : ADView_GONE];
}

- (void)requestLayout {
  if ([self isInitialised]) {
    ASViewImpl_requestLayoutWithASIWidget_withId_(self, [self asNativeWidget]);
  }
}

- (void)invalidate {
  if ([self isInitialised]) {
    ASViewImpl_invalidateWithASIWidget_withId_(self, [self asNativeWidget]);
    if (ASAutoCompleteTextViewImpl_isViewWrapped(self)) {
      ASViewImpl_invalidateWithASIWidget_withId_(self, [((ASSimpleWrapableView *) nil_chk(simpleWrapableView_)) getWrappedView]);
      if ([((ASSimpleWrapableView *) nil_chk(simpleWrapableView_)) getForeground] != nil) {
        ASViewImpl_invalidateWithASIWidget_withId_(self, [((ASSimpleWrapableView *) nil_chk(simpleWrapableView_)) getForeground]);
      }
    }
  }
}

- (id)getPluginWithNSString:(NSString *)plugin {
  return [((id<ASIAttributable>) nil_chk(ASWidgetFactory_getAttributableWithNSString_(plugin))) newInstanceWithASIWidget:self];
}

- (ASAutoCompleteTextViewImpl_AutoCompleteTextViewBean *)getBean {
  if (bean_ == nil) {
    bean_ = new_ASAutoCompleteTextViewImpl_AutoCompleteTextViewBean_initWithASAutoCompleteTextViewImpl_(self);
  }
  return bean_;
}

- (ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *)getBuilder {
  if (builder_ == nil) {
    builder_ = new_ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder_initWithASAutoCompleteTextViewImpl_(self);
  }
  return builder_;
}

- (void)createSimpleWrapableView {
  ASAutoCompleteTextViewImpl_createSimpleWrapableView(self);
}

- (jboolean)hasScrollView {
  return ASAutoCompleteTextViewImpl_hasScrollView(self);
}

- (jboolean)isViewWrapped {
  return ASAutoCompleteTextViewImpl_isViewWrapped(self);
}

- (void)addForegroundIfNeeded {
  if (ASAutoCompleteTextViewImpl_isViewWrapped(self) && ![((ASSimpleWrapableView *) nil_chk(simpleWrapableView_)) isDisableForeground]) {
    if ([((ASSimpleWrapableView *) nil_chk(simpleWrapableView_)) getForeground] == nil) {
      id foreground = [self nativeAddForeGroundWithASIWidget:self];
      ASViewGroupImpl_nativeAddViewWithId_withId_([((ASSimpleWrapableView *) nil_chk(simpleWrapableView_)) asNativeWidget], foreground);
      [((ASSimpleWrapableView *) nil_chk(simpleWrapableView_)) setForegroundWithId:foreground];
    }
  }
}

- (id)getForeground {
  return [((ASSimpleWrapableView *) nil_chk(simpleWrapableView_)) getForeground];
}

- (void)setForegroundFrameWithInt:(jint)l
                          withInt:(jint)t
                          withInt:(jint)r
                          withInt:(jint)b {
  ASAutoCompleteTextViewImpl_setForegroundFrameWithInt_withInt_withInt_withInt_(self, l, t, r, b);
}

- (id)asNativeWidget {
  return [((ASSimpleWrapableView *) nil_chk(simpleWrapableView_)) asNativeWidget];
}

- (void)invalidateWrapViewHolder {
  ASAutoCompleteTextViewImpl_invalidateWrapViewHolder(self);
}

- (id)createWrapperViewWithId:(id)wrapperParent
                      withInt:(jint)viewtype {
  uiView_ = ASAutoCompleteTextViewImpl_nativeCreateViewWithInt_(self, viewtype);
  ASViewGroupImpl_nativeAddViewWithId_withId_(ASViewImpl_getFirstChildOrSelfWithId_(wrapperParent), uiView_);
  return uiView_;
}

- (id)createWrapperViewHolderWithInt:(jint)viewType {
  return [self createWrapperViewHolderNativeWithInt:viewType];
}

- (id)nativeAddForeGroundWithASIWidget:(id<ASIWidget>)w {
  ASUIView* uiView = [ASUIView new];
  uiView.widget = w;
  uiView.commandRegex  = ASAutoCompleteTextViewImpl_FOREGROUND_REGEX;
  uiView.backgroundColor = [UIColor clearColor];
  return uiView;
}

- (id)createWrapperViewHolderNativeWithInt:(jint)viewType {
  if (viewType == 1) {
    ASUIView* uiView = [ASUIView new];
    uiView.widget = self;
    uiView.commandRegex  = ASAutoCompleteTextViewImpl_VIEW_HOLDER_REGEX;
    uiView.backgroundColor = [UIColor clearColor];
    
    return uiView;
  }
  
  if (viewType == 2 || viewType == 3) {
    ASUIView* uiView = [ASUIView new];
    uiView.widget = self;
    uiView.backgroundColor = [UIColor clearColor];
    uiView.commandRegex  = ASAutoCompleteTextViewImpl_VIEW_HOLDER_REGEX;
    
    ASUIScrollView* scrollview = [ASUIScrollView new];
    scrollview.scrollEnabled=YES;
    scrollview.bounces=NO;
    scrollview.preventAutoScroll=YES;
    scrollview.delaysContentTouches=YES;
    scrollview.userInteractionEnabled=YES;
    scrollview.widget = self;
    scrollview.backgroundColor = [UIColor clearColor];
    scrollview.commandRegex  = @"none";
    [uiView addSubview:scrollview];
    return uiView;
  }
  
  return nil;
}

- (id)getScrollView {
  return ASAutoCompleteTextViewImpl_getScrollView(self);
}

- (void)initPopUp {
  ASAutoCompleteTextViewImpl_initPopUp(self);
}

- (void)nativeAddTextFieldDidChangeForPopup {
  ASAutoCompleteTextViewImpl_nativeAddTextFieldDidChangeForPopup(self);
}

-(void)textFieldDidChangeForPopup:(UITextField *)textView{
  [self showHidePopup];
}

- (void)movePopUpContainerToTop {
  ASAutoCompleteTextViewImpl_movePopUpContainerToTop(self);
}

- (void)showHidePopup {
  ASAutoCompleteTextViewImpl_showHidePopup(self);
}

- (jint)nativeMeasureWidthWithId:(id)uiView {
  CGSize maximumLabelSize = CGSizeMake(CGFLOAT_MAX,CGFLOAT_MAX);
  CGSize requiredSize = [((UIView*)uiView) sizeThatFits:maximumLabelSize];
  return ceil(requiredSize.width);
}

- (jint)nativeMeasureHeightWithId:(id)uiView
                          withInt:(jint)width {
  CGSize maximumLabelSize = CGSizeMake(width,CGFLOAT_MAX);
  CGSize requiredSize = [((UIView*)uiView) sizeThatFits:maximumLabelSize];
  return ceil(requiredSize.height);
}

- (jboolean)islinearlayout {
  return ASAutoCompleteTextViewImpl_islinearlayout(self);
}

- (jboolean)isFocused {
  return ASAutoCompleteTextViewImpl_isFirstResponder(self);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "LIOSClass;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASIWidget;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, 5, -1, -1 },
    { NULL, "V", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 12, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 13, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 14, 11, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x102, 15, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 17, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 18, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 20, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 21, 19, -1, -1, -1, -1 },
    { NULL, "Z", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 22, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 23, 11, -1, -1, -1, -1 },
    { NULL, "[LNSString;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 24, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 25, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 26, 27, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 28, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 29, 16, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 30, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 31, 19, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 32, 33, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 34, 19, -1, -1, -1, -1 },
    { NULL, "I", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 35, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 36, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 37, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 38, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 39, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 40, 11, -1, -1, -1, -1 },
    { NULL, "Z", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 41, 42, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 43, 11, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 44, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 45, 46, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 47, 48, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 49, 50, -1, -1, -1, -1 },
    { NULL, "LADTextWatcher;", 0x2, 51, 33, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 52, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 53, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 54, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 55, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 56, 57, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 58, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 59, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 60, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 61, 62, -1, 63, -1, -1 },
    { NULL, "LNSObject;", 0x102, 64, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 65, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 66, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 67, 68, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 69, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 70, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 71, 19, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 72, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 73, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 74, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 75, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 76, 11, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x81, 77, 78, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 79, 11, -1, -1, -1, -1 },
    { NULL, "LASIWidget;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADTextView;", 0x1, 80, 81, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 82, 83, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 84, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 85, 11, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 86, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 87, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 88, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 89, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 90, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 91, 11, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 92, 11, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 93, 94, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 95, 96, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 97, 98, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 99, 11, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x81, 100, 78, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 101, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 102, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 103, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 104, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 105, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 106, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 107, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 108, 33, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 109, 33, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 110, 11, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 111, 11, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 112, 11, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 113, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 114, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 115, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 116, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 117, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 118, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 119, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 120, 11, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 121, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 122, 11, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 123, 11, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 124, 11, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 125, 62, -1, 63, -1, -1 },
    { NULL, "LNSString;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 126, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 127, 11, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 128, 129, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 130, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 131, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 132, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 133, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 134, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 135, 11, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 136, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 137, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 138, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 139, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 140, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 141, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 142, 11, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 143, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 144, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 145, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 146, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 147, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 148, 149, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 150, 149, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 151, 149, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 152, 149, -1, -1, -1, -1 },
    { NULL, "I", 0x102, 153, 11, -1, -1, -1, -1 },
    { NULL, "I", 0x102, 154, 11, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 155, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 156, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 157, 11, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 158, 159, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 160, 11, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 161, 162, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x101, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 163, 162, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x101, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 157, 162, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x101, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 164, 162, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x101, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 165, 162, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x101, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x101, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 166, 162, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x101, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 167, 162, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x101, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 168, 162, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x101, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 169, 162, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x101, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 170, 162, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x101, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x101, 171, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 172, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 173, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 174, 1, -1, -1, -1, -1 },
    { NULL, "LASAutoCompleteTextViewImpl_AutoCompleteTextViewBean;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 175, 68, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 176, 177, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 178, 19, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x101, 179, 81, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x101, 180, 19, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x101, 181, 11, -1, -1, -1, -1 },
    { NULL, "I", 0x101, 182, 177, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(loadAttributesWithNSString:);
  methods[1].selector = @selector(init);
  methods[2].selector = @selector(initWithNSString:);
  methods[3].selector = @selector(initWithNSString:withNSString:);
  methods[4].selector = @selector(getViewClass);
  methods[5].selector = @selector(newInstance);
  methods[6].selector = @selector(createWithASIFragment:withJavaUtilMap:);
  methods[7].selector = @selector(setWidgetOnNativeClass);
  methods[8].selector = @selector(setAttributeWithASWidgetAttribute:withNSString:withId:withASILifeCycleDecorator:);
  methods[9].selector = @selector(getAttributeWithASWidgetAttribute:withASILifeCycleDecorator:);
  methods[10].selector = @selector(asWidget);
  methods[11].selector = @selector(setMyTextWithId:);
  methods[12].selector = @selector(nativeTriggerChangeHandlersWithNSString:);
  methods[13].selector = @selector(nativeTriggerBeforeChangeHandlersWithNSString:);
  methods[14].selector = @selector(setCursorVisibleWithId:);
  methods[15].selector = @selector(nativeGetTintColorWithBoolean:);
  methods[16].selector = @selector(setCapitalizeWithId:);
  methods[17].selector = @selector(nativeSetCapitalizeWithInt:);
  methods[18].selector = @selector(setAutoTextWithId:);
  methods[19].selector = @selector(nativeSetCorrectionTypeWithInt:);
  methods[20].selector = @selector(getCursorVisible);
  methods[21].selector = @selector(setMaxLengthWithId:);
  methods[22].selector = @selector(setEnabledWithId:);
  methods[23].selector = @selector(getDigitStrings);
  methods[24].selector = @selector(getLocaleValueFromRSWithNSString:withNSString:);
  methods[25].selector = @selector(getPlusString);
  methods[26].selector = @selector(getMinusString);
  methods[27].selector = @selector(getDecimalCharacter);
  methods[28].selector = @selector(numericPatternMatchesWithNSString:);
  methods[29].selector = @selector(removeNumericListener);
  methods[30].selector = @selector(addNumericListenerWithJavaUtilRegexPattern:);
  methods[31].selector = @selector(setPhoneNumberWithId:);
  methods[32].selector = @selector(nativeSetPhoneNumberWithBoolean:);
  methods[33].selector = @selector(getFont);
  methods[34].selector = @selector(setInputTypeWithId:);
  methods[35].selector = @selector(nativeSetKeyboardTypeWithInt:);
  methods[36].selector = @selector(getInputType);
  methods[37].selector = @selector(nativeGetKeyboardType);
  methods[38].selector = @selector(setImeOptionsWithId:withNSString:);
  methods[39].selector = @selector(nativeSetImeOptionsWithInt:);
  methods[40].selector = @selector(nativeGetImeOptions);
  methods[41].selector = @selector(getImeOptions);
  methods[42].selector = @selector(setOnEditorActionWithId:);
  methods[43].selector = @selector(setOnEditorActionListener);
  methods[44].selector = @selector(setInputAccessoryViewDoneButtonWithId:);
  methods[45].selector = @selector(nativeSetInputAccessoryViewDoneButtonWithNSString:);
  methods[46].selector = @selector(setOnFocusWithId:);
  methods[47].selector = @selector(sendPressStartEvent);
  methods[48].selector = @selector(sendPressEndEvent);
  methods[49].selector = @selector(setSelectAllOnFocusWithId:);
  methods[50].selector = @selector(setSelectAllWithId:);
  methods[51].selector = @selector(isFirstResponder);
  methods[52].selector = @selector(becomeFirstResponder);
  methods[53].selector = @selector(nativeSetSelectAllWithFloat:);
  methods[54].selector = @selector(setSingleLineWithId:);
  methods[55].selector = @selector(getSingleLine);
  methods[56].selector = @selector(setScrollHorizontallyWithId:);
  methods[57].selector = @selector(nativeAddTapGesture);
  methods[58].selector = @selector(nativeSetScrollEnabledWithId:withBoolean:);
  methods[59].selector = @selector(setTextColorLinkWithADColorStateList:);
  methods[60].selector = @selector(handleOnBeforeTextChangeWithNSString:withInt:withInt:withInt:);
  methods[61].selector = @selector(getTextChangedListenerWithId:withNSString:);
  methods[62].selector = @selector(handleOnAfterTextChange);
  methods[63].selector = @selector(handleOnTextChange);
  methods[64].selector = @selector(setOnAfterTextChangeWithId:);
  methods[65].selector = @selector(setBeforeOnTextChangeWithId:);
  methods[66].selector = @selector(setOnTextChangeWithId:);
  methods[67].selector = @selector(setTextAllCapsWithId:);
  methods[68].selector = @selector(forceRedraw);
  methods[69].selector = @selector(nativeSetContentSizeWithId:withInt:withInt:);
  methods[70].selector = @selector(remeasure);
  methods[71].selector = @selector(updateScrollViewContentOffset);
  methods[72].selector = @selector(setInputViewWithId:);
  methods[73].selector = @selector(setNativeInputViewWithId:);
  methods[74].selector = @selector(setPickerView);
  methods[75].selector = @selector(setDatePicker);
  methods[76].selector = @selector(getTextEntered);
  methods[77].selector = @selector(isViewVisible);
  methods[78].selector = @selector(focus);
  methods[79].selector = @selector(setErrorWithNSString:);
  methods[80].selector = @selector(nativeCreateWithJavaUtilMap:);
  methods[81].selector = @selector(nativeCreateViewWithInt:);
  methods[82].selector = @selector(addMinMaxListener);
  methods[83].selector = @selector(nativeAddTextFieldDidChange);
  methods[84].selector = @selector(setPasswordTypeWithId:);
  methods[85].selector = @selector(nativeSetSecureTextEntryWithBoolean:);
  methods[86].selector = @selector(nativeMakeFrameForChildWidgetWithInt:withInt:withInt:withInt:);
  methods[87].selector = @selector(postSetAttributeEditTextWithASWidgetAttribute:withNSString:withId:withASILifeCycleDecorator:);
  methods[88].selector = @selector(setBorderStyleWithId:);
  methods[89].selector = @selector(nativeSetBorderStyleWithInt:);
  methods[90].selector = @selector(measureWidth);
  methods[91].selector = @selector(measureHeightWithInt:);
  methods[92].selector = @selector(updatePadding);
  methods[93].selector = @selector(nativeSetVerticalAligmentCenter);
  methods[94].selector = @selector(nativeSetVerticalAligmentBottom);
  methods[95].selector = @selector(nativeSetVerticalAligmentTop);
  methods[96].selector = @selector(setHintColorWithId:);
  methods[97].selector = @selector(nativeSetHintColorWithId:);
  methods[98].selector = @selector(syncPlaceholderLabel);
  methods[99].selector = @selector(nativeSetEnabledWithBoolean:);
  methods[100].selector = @selector(setFocusWithId:);
  methods[101].selector = @selector(invokeMethodEditTextWithNSString:withNSObjectArray:);
  methods[102].selector = @selector(setEntriesWithId:);
  methods[103].selector = @selector(createPopup);
  methods[104].selector = @selector(setAttrsOnListView);
  methods[105].selector = @selector(createHintViewWithASIWidget:);
  methods[106].selector = @selector(unregisterDataSetObserver);
  methods[107].selector = @selector(createEntries);
  methods[108].selector = @selector(beforetextChangeWithNSString:withInt:withInt:);
  methods[109].selector = @selector(createPopUpIfRequired);
  methods[110].selector = @selector(afterTextChanged);
  methods[111].selector = @selector(removePopUpContainer);
  methods[112].selector = @selector(setThresholdWithId:);
  methods[113].selector = @selector(setCompletionHintWithId:);
  methods[114].selector = @selector(getCompletionHint);
  methods[115].selector = @selector(setCompletionViewWithId:);
  methods[116].selector = @selector(setDropDownlistSelectorWithId:);
  methods[117].selector = @selector(setDropDownWidthWithId:);
  methods[118].selector = @selector(setDropDownVerticalOffsetWithId:);
  methods[119].selector = @selector(setDropDownHorizontalOffsetWithId:);
  methods[120].selector = @selector(setDropDownHeightWithId:);
  methods[121].selector = @selector(getDropDownWidth);
  methods[122].selector = @selector(getDropDownVerticalOffset);
  methods[123].selector = @selector(getDropDownHorizontalOffset);
  methods[124].selector = @selector(getDropDownHeight);
  methods[125].selector = @selector(setAttrsOnTextView);
  methods[126].selector = @selector(setDropDownAnchorWithId:);
  methods[127].selector = @selector(getDropDownAnchor);
  methods[128].selector = @selector(getChildAttributeWithASIWidget:withASWidgetAttribute:);
  methods[129].selector = @selector(setChildAttributeWithASIWidget:withASWidgetAttribute:withNSString:withId:);
  methods[130].selector = @selector(setOnDismissListenerWithADAutoCompleteTextView_OnDismissListener:);
  methods[131].selector = @selector(showDropDownWithId:);
  methods[132].selector = @selector(invokeMethodWithNSString:withNSObjectArray:);
  methods[133].selector = @selector(setDataObserverWithId:);
  methods[134].selector = @selector(postSetAttributeWithASWidgetAttribute:withNSString:withId:withASILifeCycleDecorator:);
  methods[135].selector = @selector(addOutsideTouchListenerWithBoolean:);
  methods[136].selector = @selector(resetError);
  methods[137].selector = @selector(showErrorWithNSString:);
  methods[138].selector = @selector(setHintTextFormatWithId:);
  methods[139].selector = @selector(setGravityWithId:);
  methods[140].selector = @selector(updateTextAlignment);
  methods[141].selector = @selector(getGravity);
  methods[142].selector = @selector(onRtlPropertiesChangedWithInt:);
  methods[143].selector = @selector(setTypeFaceWithId:withNSString:);
  methods[144].selector = @selector(setFontFamilyWithId:withNSString:);
  methods[145].selector = @selector(setTextStyleWithId:);
  methods[146].selector = @selector(getMinHeight);
  methods[147].selector = @selector(getMinWidth);
  methods[148].selector = @selector(setEmsWithId:);
  methods[149].selector = @selector(getMaxEms);
  methods[150].selector = @selector(getMinEms);
  methods[151].selector = @selector(setMinEmsWithId:);
  methods[152].selector = @selector(getMinLines);
  methods[153].selector = @selector(getMaxLines);
  methods[154].selector = @selector(setMaxEmsWithId:);
  methods[155].selector = @selector(setWidthWithId:);
  methods[156].selector = @selector(setHeightWithId:);
  methods[157].selector = @selector(setMaxLinesWithId:);
  methods[158].selector = @selector(setLinesWithId:);
  methods[159].selector = @selector(setMinLinesWithId:);
  methods[160].selector = @selector(setMaxHeightWithId:);
  methods[161].selector = @selector(setMaxWidthWithId:);
  methods[162].selector = @selector(getMaxWidth);
  methods[163].selector = @selector(getMaxHeight);
  methods[164].selector = @selector(setMinHeightWithId:);
  methods[165].selector = @selector(setMinWidthWithId:);
  methods[166].selector = @selector(getWidth);
  methods[167].selector = @selector(getHeight);
  methods[168].selector = @selector(setFirstBaselineToTopHeightWithId:);
  methods[169].selector = @selector(getIncludeFontPadding);
  methods[170].selector = @selector(getFirstBaselineToTopHeight);
  methods[171].selector = @selector(setLastBaselineToBottomHeightWithId:);
  methods[172].selector = @selector(getLastBaselineToBottomHeight);
  methods[173].selector = @selector(initHtmlWithJavaUtilMap:);
  methods[174].selector = @selector(getDigitString);
  methods[175].selector = @selector(getSignedChars);
  methods[176].selector = @selector(getDecimalChars);
  methods[177].selector = @selector(setNumericWithId:);
  methods[178].selector = @selector(setDigitsWithId:);
  methods[179].selector = @selector(nativeGetFontSize);
  methods[180].selector = @selector(nativeGetFontStyle);
  methods[181].selector = @selector(nativeSetCustomFontWithInt:withASFontDescriptor:);
  methods[182].selector = @selector(nativeSetFontStyleWithInt:);
  methods[183].selector = @selector(setPaddingWithId:);
  methods[184].selector = @selector(setPaddingBottomWithId:);
  methods[185].selector = @selector(setPaddingTopWithId:);
  methods[186].selector = @selector(setPaddingLeftWithId:);
  methods[187].selector = @selector(setPaddingRightWithId:);
  methods[188].selector = @selector(getPaddingTop);
  methods[189].selector = @selector(getPaddingEnd);
  methods[190].selector = @selector(getPaddingStart);
  methods[191].selector = @selector(getPaddingLeft);
  methods[192].selector = @selector(getPaddingRight);
  methods[193].selector = @selector(getPaddingBottom);
  methods[194].selector = @selector(setPaddingVerticalWithId:);
  methods[195].selector = @selector(setPaddingHorizontalWithId:);
  methods[196].selector = @selector(setPaddingEndWithId:);
  methods[197].selector = @selector(setPaddingStartWithId:);
  methods[198].selector = @selector(handleHtmlTextWithNSString:);
  methods[199].selector = @selector(nativeSetTextWithNSString:);
  methods[200].selector = @selector(nativeSetHtmlTextWithId:);
  methods[201].selector = @selector(getMyText);
  methods[202].selector = @selector(getTextSize);
  methods[203].selector = @selector(setMyTextSizeWithId:);
  methods[204].selector = @selector(nativeSetTextSizeWithInt:);
  methods[205].selector = @selector(setVerticalAligmentCenter);
  methods[206].selector = @selector(setVerticalAligmentBottom);
  methods[207].selector = @selector(setVerticalAligmentTop);
  methods[208].selector = @selector(setHorizontalAligmentCenter);
  methods[209].selector = @selector(setHorizontalAligmentRight);
  methods[210].selector = @selector(setHorizontalAligmentRightInternal);
  methods[211].selector = @selector(setHorizontalAligmentLeft);
  methods[212].selector = @selector(setHorizontalAligmentLeftInternal);
  methods[213].selector = @selector(getTextAlignment);
  methods[214].selector = @selector(setDrawablePaddingWithId:);
  methods[215].selector = @selector(setDrawableBottomWithId:);
  methods[216].selector = @selector(setDrawableTopWithId:);
  methods[217].selector = @selector(setDrawableRightWithNSString:withId:);
  methods[218].selector = @selector(setDrawableRightInternalWithNSString:withId:);
  methods[219].selector = @selector(setDrawableLeftWithNSString:withId:);
  methods[220].selector = @selector(setDrawableLeftInternalWithNSString:withId:);
  methods[221].selector = @selector(getImageHeightWithId:);
  methods[222].selector = @selector(getImageWidthWithId:);
  methods[223].selector = @selector(getDrawablePadding);
  methods[224].selector = @selector(setDrawableTintModeWithId:);
  methods[225].selector = @selector(setDrawableTintWithId:);
  methods[226].selector = @selector(setTextColorWithId:);
  methods[227].selector = @selector(getTextColorState);
  methods[228].selector = @selector(drawableStateChanged);
  methods[229].selector = @selector(drawableStateChangeWithNSString:withADDrawable:);
  methods[230].selector = @selector(getBorderPadding);
  methods[231].selector = @selector(getLineHeightPadding);
  methods[232].selector = @selector(getLineHeight);
  methods[233].selector = @selector(getBorderWidth);
  methods[234].selector = @selector(setTextColorHighlightWithId:);
  methods[235].selector = @selector(getTextColorHighlight);
  methods[236].selector = @selector(setTextWithId:withId:);
  methods[237].selector = @selector(getText);
  methods[238].selector = @selector(setPlaceholderWithId:withId:);
  methods[239].selector = @selector(getPlaceholder);
  methods[240].selector = @selector(setTextColorWithId:withId:);
  methods[241].selector = @selector(getTextColor);
  methods[242].selector = @selector(setAdjustsFontSizeToFitWidthWithId:withId:);
  methods[243].selector = @selector(getAdjustsFontSizeToFitWidth);
  methods[244].selector = @selector(setMinimumFontSizeWithId:withId:);
  methods[245].selector = @selector(getMinimumFontSize);
  methods[246].selector = @selector(getIsEditing);
  methods[247].selector = @selector(setClearsOnBeginEditingWithId:withId:);
  methods[248].selector = @selector(getClearsOnBeginEditing);
  methods[249].selector = @selector(setClearsOnInsertionWithId:withId:);
  methods[250].selector = @selector(getClearsOnInsertion);
  methods[251].selector = @selector(setAllowsEditingTextAttributesWithId:withId:);
  methods[252].selector = @selector(getAllowsEditingTextAttributes);
  methods[253].selector = @selector(setBackgroundWithId:withId:);
  methods[254].selector = @selector(getBackground);
  methods[255].selector = @selector(setDisabledBackgroundWithId:withId:);
  methods[256].selector = @selector(getDisabledBackground);
  methods[257].selector = @selector(checkIosVersionWithNSString:);
  methods[258].selector = @selector(setIdWithNSString:);
  methods[259].selector = @selector(setVisibleWithBoolean:);
  methods[260].selector = @selector(requestLayout);
  methods[261].selector = @selector(invalidate);
  methods[262].selector = @selector(getPluginWithNSString:);
  methods[263].selector = @selector(getBean);
  methods[264].selector = @selector(getBuilder);
  methods[265].selector = @selector(createSimpleWrapableView);
  methods[266].selector = @selector(hasScrollView);
  methods[267].selector = @selector(isViewWrapped);
  methods[268].selector = @selector(addForegroundIfNeeded);
  methods[269].selector = @selector(getForeground);
  methods[270].selector = @selector(setForegroundFrameWithInt:withInt:withInt:withInt:);
  methods[271].selector = @selector(asNativeWidget);
  methods[272].selector = @selector(invalidateWrapViewHolder);
  methods[273].selector = @selector(createWrapperViewWithId:withInt:);
  methods[274].selector = @selector(createWrapperViewHolderWithInt:);
  methods[275].selector = @selector(nativeAddForeGroundWithASIWidget:);
  methods[276].selector = @selector(createWrapperViewHolderNativeWithInt:);
  methods[277].selector = @selector(getScrollView);
  methods[278].selector = @selector(initPopUp);
  methods[279].selector = @selector(nativeAddTextFieldDidChangeForPopup);
  methods[280].selector = @selector(movePopUpContainerToTop);
  methods[281].selector = @selector(showHidePopup);
  methods[282].selector = @selector(nativeMeasureWidthWithId:);
  methods[283].selector = @selector(nativeMeasureHeightWithId:withInt:);
  methods[284].selector = @selector(islinearlayout);
  methods[285].selector = @selector(isFocused);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "FOREGROUND_REGEX", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 183, -1, -1 },
    { "VIEW_HOLDER_REGEX", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 184, -1, -1 },
    { "WIDGET_REGEX", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 185, -1, -1 },
    { "LOCAL_NAME", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 186, -1, -1 },
    { "GROUP_NAME", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 187, -1, -1 },
    { "uiView_", "LNSObject;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "measurableView_", "LADAutoCompleteTextView;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "originalTintColor_", "LNSObject;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "maxLength_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "numericPattern_", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "editorAction_", "LNSObject;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "onFocusChange_", "LNSObject;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "selectAllOnFocus_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "selectOnceOnFocus_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "scrollHorizontally_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "onAfterTextChange_", "LNSObject;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "onBeforeTextChange_", "LNSObject;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "onTextChange_", "LNSObject;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "start_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "end_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "count_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "after_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "str_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "textWatchers_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 188, -1 },
    { "textChangedListener_", "LADTextWatcher;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "textAllCaps_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "callMeasureOnChange_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "entries_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 189, -1 },
    { "listViewWidget_", "LASListViewImpl;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "popupContainer_", "LASIWidget;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "observer_", "LASAutoCompleteTextViewImpl_PopupDataObserver;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "DEFAULT_MODEL_FOR", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 190, -1, -1 },
    { "prepare", "Z", .constantValue.asLong = 0, 0xa, -1, 191, -1, -1 },
    { "hintText_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mPromptPosition_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "hintViewPath_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "dropDownlistSelector_", "LNSObject;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "dropDownWidth_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "dropDownVerticalOffset_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "dropDownHorizontalOffset_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "dropDownHeight_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "dropDownAnchor_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "onDismissListener_", "LADAutoCompleteTextView_OnDismissListener;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "myobserver_", "LADDataSetObserver;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "outsideEventListener_", "LASAutoCompleteTextViewImpl_OutsideEventListener;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "fontDescriptors_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 192, -1 },
    { "html_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "escapeHtml_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "htmlConfig_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 188, -1 },
    { "locale_", "LJavaUtilLocale;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "regexSpecialCharacters", "LJavaUtilList;", .constantValue.asLong = 0, 0xa, -1, 193, 189, -1 },
    { "ITALIC_FONT_TRAIT", "I", .constantValue.asLong = 0, 0xa, -1, 194, -1, -1 },
    { "BOLD_FONT_TRAIT", "I", .constantValue.asLong = 0, 0xa, -1, 195, -1, -1 },
    { "NORMAL_FONT_TRAIT", "I", .constantValue.asInt = ASAutoCompleteTextViewImpl_NORMAL_FONT_TRAIT, 0x1a, -1, -1, -1, -1 },
    { "TEXT_ALIGN_CENTER", "I", .constantValue.asInt = ASAutoCompleteTextViewImpl_TEXT_ALIGN_CENTER, 0x1a, -1, -1, -1, -1 },
    { "TEXT_ALIGN_LEFT", "I", .constantValue.asInt = ASAutoCompleteTextViewImpl_TEXT_ALIGN_LEFT, 0x1a, -1, -1, -1, -1 },
    { "TEXT_ALIGN_RIGHT", "I", .constantValue.asInt = ASAutoCompleteTextViewImpl_TEXT_ALIGN_RIGHT, 0x1a, -1, -1, -1, -1 },
    { "drawableTint_", "LADColorStateList;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "builder_", "LASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "bean_", "LASAutoCompleteTextViewImpl_AutoCompleteTextViewBean;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "simpleWrapableView_", "LASSimpleWrapableView;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "loadAttributes", "LNSString;", "LNSString;LNSString;", "create", "LASIFragment;LJavaUtilMap;", "(Lcom/ashera/core/IFragment;Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;)V", "setAttribute", "LASWidgetAttribute;LNSString;LNSObject;LASILifeCycleDecorator;", "getAttribute", "LASWidgetAttribute;LASILifeCycleDecorator;", "setMyText", "LNSObject;", "nativeTriggerChangeHandlers", "nativeTriggerBeforeChangeHandlers", "setCursorVisible", "nativeGetTintColor", "Z", "setCapitalize", "nativeSetCapitalize", "I", "setAutoText", "nativeSetCorrectionType", "setMaxLength", "setEnabled", "getLocaleValueFromRS", "numericPatternMatches", "addNumericListener", "LJavaUtilRegexPattern;", "setPhoneNumber", "nativeSetPhoneNumber", "setInputType", "nativeSetKeyboardType", "setImeOptions", "LNSObject;LNSString;", "nativeSetImeOptions", "setOnEditorAction", "setInputAccessoryViewDoneButton", "nativeSetInputAccessoryViewDoneButton", "setOnFocus", "setSelectAllOnFocus", "setSelectAll", "nativeSetSelectAll", "F", "setSingleLine", "setScrollHorizontally", "nativeSetScrollEnabled", "LNSObject;Z", "setTextColorLink", "LADColorStateList;", "handleOnBeforeTextChange", "LNSString;III", "getTextChangedListener", "setOnAfterTextChange", "setBeforeOnTextChange", "setOnTextChange", "setTextAllCaps", "nativeSetContentSize", "LNSObject;II", "setInputView", "setNativeInputView", "setError", "nativeCreate", "LJavaUtilMap;", "(Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;)V", "nativeCreateView", "setPasswordType", "nativeSetSecureTextEntry", "nativeMakeFrameForChildWidget", "IIII", "postSetAttributeEditText", "setBorderStyle", "nativeSetBorderStyle", "measureHeight", "setHintColor", "nativeSetHintColor", "nativeSetEnabled", "setFocus", "invokeMethodEditText", "LNSString;[LNSObject;", "setEntries", "createHintView", "LASIWidget;", "beforetextChange", "LNSString;II", "setThreshold", "setCompletionHint", "setCompletionView", "setDropDownlistSelector", "setDropDownWidth", "setDropDownVerticalOffset", "setDropDownHorizontalOffset", "setDropDownHeight", "setDropDownAnchor", "getChildAttribute", "LASIWidget;LASWidgetAttribute;", "setChildAttribute", "LASIWidget;LASWidgetAttribute;LNSString;LNSObject;", "setOnDismissListener", "LADAutoCompleteTextView_OnDismissListener;", "showDropDown", "invokeMethod", "setDataObserver", "postSetAttribute", "addOutsideTouchListener", "showError", "setHintTextFormat", "setGravity", "onRtlPropertiesChanged", "setTypeFace", "setFontFamily", "setTextStyle", "setEms", "setMinEms", "setMaxEms", "setWidth", "setHeight", "setMaxLines", "setLines", "setMinLines", "setMaxHeight", "setMaxWidth", "setMinHeight", "setMinWidth", "setFirstBaselineToTopHeight", "setLastBaselineToBottomHeight", "initHtml", "setNumeric", "setDigits", "nativeSetCustomFont", "ILASFontDescriptor;", "nativeSetFontStyle", "setPadding", "setPaddingBottom", "setPaddingTop", "setPaddingLeft", "setPaddingRight", "setPaddingVertical", "setPaddingHorizontal", "setPaddingEnd", "setPaddingStart", "handleHtmlText", "nativeSetText", "nativeSetHtmlText", "setMyTextSize", "nativeSetTextSize", "setDrawablePadding", "setDrawableBottom", "setDrawableTop", "setDrawableRight", "LNSString;LNSObject;", "setDrawableRightInternal", "setDrawableLeft", "setDrawableLeftInternal", "getImageHeight", "getImageWidth", "setDrawableTintMode", "setDrawableTint", "setTextColor", "drawableStateChange", "LNSString;LADDrawable;", "setTextColorHighlight", "setText", "LNSObject;LNSObject;", "setPlaceholder", "setAdjustsFontSizeToFitWidth", "setMinimumFontSize", "setClearsOnBeginEditing", "setClearsOnInsertion", "setAllowsEditingTextAttributes", "setBackground", "setDisabledBackground", "checkIosVersion", "setId", "setVisible", "getPlugin", "setForegroundFrame", "createWrapperView", "LNSObject;I", "createWrapperViewHolder", "nativeAddForeGround", "createWrapperViewHolderNative", "nativeMeasureWidth", "nativeMeasureHeight", &ASAutoCompleteTextViewImpl_FOREGROUND_REGEX, &ASAutoCompleteTextViewImpl_VIEW_HOLDER_REGEX, &ASAutoCompleteTextViewImpl_WIDGET_REGEX, &ASAutoCompleteTextViewImpl_LOCAL_NAME, &ASAutoCompleteTextViewImpl_GROUP_NAME, "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", "Ljava/util/List<Ljava/lang/String;>;", &ASAutoCompleteTextViewImpl_DEFAULT_MODEL_FOR, &ASAutoCompleteTextViewImpl_prepare, "Ljava/util/Map<Ljava/lang/String;Lcom/ashera/model/FontDescriptor;>;", &ASAutoCompleteTextViewImpl_regexSpecialCharacters, &ASAutoCompleteTextViewImpl_ITALIC_FONT_TRAIT, &ASAutoCompleteTextViewImpl_BOLD_FONT_TRAIT, "LASAutoCompleteTextViewImpl_DrawableTintMode;LASAutoCompleteTextViewImpl_Font;LASAutoCompleteTextViewImpl_TextStyle;LASAutoCompleteTextViewImpl_Capitalize;LASAutoCompleteTextViewImpl_Numeric;LASAutoCompleteTextViewImpl_InputType;LASAutoCompleteTextViewImpl_ImeOptions;LASAutoCompleteTextViewImpl_IosBorderStyle;LASAutoCompleteTextViewImpl_InputView;LASAutoCompleteTextViewImpl_AutoCompleteTextViewExt;LASAutoCompleteTextViewImpl_PopupDataObserver;LASAutoCompleteTextViewImpl_OutsideEventListener;LASAutoCompleteTextViewImpl_OnDismissListener;LASAutoCompleteTextViewImpl_OnEditorActionListener;LASAutoCompleteTextViewImpl_OnFocusChangeListener;LASAutoCompleteTextViewImpl_TextChangedListener;LASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder;LASAutoCompleteTextViewImpl_AutoCompleteTextViewBean;" };
  static const J2ObjcClassInfo _ASAutoCompleteTextViewImpl = { "AutoCompleteTextViewImpl", "com.ashera.layout", ptrTable, methods, fields, 7, 0x1, 286, 61, -1, 196, -1, -1, -1 };
  return &_ASAutoCompleteTextViewImpl;
}

+ (void)initialize {
  if (self == [ASAutoCompleteTextViewImpl class]) {
    ASAutoCompleteTextViewImpl_regexSpecialCharacters = JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ @"\\", @".", @"+", @"*", @"?", @"[", @"^", @"]", @"$", @"(", @")", @"{", @"}", @"=", @"!", @"<", @">", @"|", @":", @"-" } count:20 type:NSString_class_()]);
    ASAutoCompleteTextViewImpl_ITALIC_FONT_TRAIT = JreLoadStatic(ASLayoutNativeVars, UIFontDescriptorTraitItalic);
    ASAutoCompleteTextViewImpl_BOLD_FONT_TRAIT = JreLoadStatic(ASLayoutNativeVars, UIFontDescriptorTraitBold);
    J2OBJC_SET_INITIALIZED(ASAutoCompleteTextViewImpl)
  }
}

@end

void ASAutoCompleteTextViewImpl_init(ASAutoCompleteTextViewImpl *self) {
  ASBaseHasWidgets_initWithNSString_withNSString_(self, ASAutoCompleteTextViewImpl_GROUP_NAME, ASAutoCompleteTextViewImpl_LOCAL_NAME);
  self->maxLength_ = -1;
  self->textAllCaps_ = false;
  self->observer_ = new_ASAutoCompleteTextViewImpl_PopupDataObserver_initWithASAutoCompleteTextViewImpl_(self);
  self->mPromptPosition_ = 1;
  self->hintViewPath_ = @"@layout/autocomplete_completion";
  self->dropDownWidth_ = -1;
  self->dropDownVerticalOffset_ = -1;
  self->dropDownHorizontalOffset_ = -1;
  self->dropDownHeight_ = -1;
  self->dropDownAnchor_ = -1;
  self->locale_ = JavaUtilLocale_getDefault();
}

ASAutoCompleteTextViewImpl *new_ASAutoCompleteTextViewImpl_init() {
  J2OBJC_NEW_IMPL(ASAutoCompleteTextViewImpl, init)
}

ASAutoCompleteTextViewImpl *create_ASAutoCompleteTextViewImpl_init() {
  J2OBJC_CREATE_IMPL(ASAutoCompleteTextViewImpl, init)
}

void ASAutoCompleteTextViewImpl_initWithNSString_(ASAutoCompleteTextViewImpl *self, NSString *localname) {
  ASBaseHasWidgets_initWithNSString_withNSString_(self, ASAutoCompleteTextViewImpl_GROUP_NAME, localname);
  self->maxLength_ = -1;
  self->textAllCaps_ = false;
  self->observer_ = new_ASAutoCompleteTextViewImpl_PopupDataObserver_initWithASAutoCompleteTextViewImpl_(self);
  self->mPromptPosition_ = 1;
  self->hintViewPath_ = @"@layout/autocomplete_completion";
  self->dropDownWidth_ = -1;
  self->dropDownVerticalOffset_ = -1;
  self->dropDownHorizontalOffset_ = -1;
  self->dropDownHeight_ = -1;
  self->dropDownAnchor_ = -1;
  self->locale_ = JavaUtilLocale_getDefault();
}

ASAutoCompleteTextViewImpl *new_ASAutoCompleteTextViewImpl_initWithNSString_(NSString *localname) {
  J2OBJC_NEW_IMPL(ASAutoCompleteTextViewImpl, initWithNSString_, localname)
}

ASAutoCompleteTextViewImpl *create_ASAutoCompleteTextViewImpl_initWithNSString_(NSString *localname) {
  J2OBJC_CREATE_IMPL(ASAutoCompleteTextViewImpl, initWithNSString_, localname)
}

void ASAutoCompleteTextViewImpl_initWithNSString_withNSString_(ASAutoCompleteTextViewImpl *self, NSString *groupName, NSString *localname) {
  ASBaseHasWidgets_initWithNSString_withNSString_(self, groupName, localname);
  self->maxLength_ = -1;
  self->textAllCaps_ = false;
  self->observer_ = new_ASAutoCompleteTextViewImpl_PopupDataObserver_initWithASAutoCompleteTextViewImpl_(self);
  self->mPromptPosition_ = 1;
  self->hintViewPath_ = @"@layout/autocomplete_completion";
  self->dropDownWidth_ = -1;
  self->dropDownVerticalOffset_ = -1;
  self->dropDownHorizontalOffset_ = -1;
  self->dropDownHeight_ = -1;
  self->dropDownAnchor_ = -1;
  self->locale_ = JavaUtilLocale_getDefault();
}

ASAutoCompleteTextViewImpl *new_ASAutoCompleteTextViewImpl_initWithNSString_withNSString_(NSString *groupName, NSString *localname) {
  J2OBJC_NEW_IMPL(ASAutoCompleteTextViewImpl, initWithNSString_withNSString_, groupName, localname)
}

ASAutoCompleteTextViewImpl *create_ASAutoCompleteTextViewImpl_initWithNSString_withNSString_(NSString *groupName, NSString *localname) {
  J2OBJC_CREATE_IMPL(ASAutoCompleteTextViewImpl, initWithNSString_withNSString_, groupName, localname)
}

void ASAutoCompleteTextViewImpl_setWidgetOnNativeClass(ASAutoCompleteTextViewImpl *self) {
  ((ASUITextField*) self.uiView).widget = self;
}

void ASAutoCompleteTextViewImpl_nativeTriggerChangeHandlersWithNSString_(ASAutoCompleteTextViewImpl *self, NSString *text) {
  [self handleOnTextChange];
  [self handleOnAfterTextChange];
}

void ASAutoCompleteTextViewImpl_nativeTriggerBeforeChangeHandlersWithNSString_(ASAutoCompleteTextViewImpl *self, NSString *text) {
  [self handleOnBeforeTextChangeWithNSString: text withInt:0 withInt: 0 withInt:text.length];
}

void ASAutoCompleteTextViewImpl_setCursorVisibleWithId_(ASAutoCompleteTextViewImpl *self, id objValue) {
  ASViewImpl_setTintColorWithId_withId_(self->uiView_, ASAutoCompleteTextViewImpl_nativeGetTintColorWithBoolean_(self, ![((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]))) booleanValue]));
}

id ASAutoCompleteTextViewImpl_nativeGetTintColorWithBoolean_(ASAutoCompleteTextViewImpl *self, jboolean clearColor) {
  ASUITextField* tv = ((ASUITextField*)self.uiView);
  
  if (self->originalTintColor_ == nil) {
    self->originalTintColor_ = tv.tintColor;
  }
  
  if (clearColor) {
    if (CGColorEqualToColor(tv.tintColor.CGColor, [UIColor clearColor].CGColor)) {
      self->originalTintColor_ = tv.tintColor;
    }
    
    return [UIColor clearColor];
  }
  return self->originalTintColor_;
}

void ASAutoCompleteTextViewImpl_setCapitalizeWithId_(ASAutoCompleteTextViewImpl *self, id objValue) {
  ASAutoCompleteTextViewImpl_nativeSetCapitalizeWithInt_(self, [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]);
}

void ASAutoCompleteTextViewImpl_nativeSetCapitalizeWithInt_(ASAutoCompleteTextViewImpl *self, jint capitalizeType) {
  ASUITextField* tv = ((ASUITextField*)self.uiView);
  tv.autocapitalizationType = capitalizeType;
}

void ASAutoCompleteTextViewImpl_setAutoTextWithId_(ASAutoCompleteTextViewImpl *self, id objValue) {
  if ([((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]))) booleanValue]) {
    ASAutoCompleteTextViewImpl_nativeSetCorrectionTypeWithInt_(self, JreLoadStatic(ASLayoutNativeVars, UITextAutocorrectionTypeYes));
  }
  else {
    ASAutoCompleteTextViewImpl_nativeSetCorrectionTypeWithInt_(self, JreLoadStatic(ASLayoutNativeVars, UITextAutocorrectionTypeNo));
  }
}

void ASAutoCompleteTextViewImpl_nativeSetCorrectionTypeWithInt_(ASAutoCompleteTextViewImpl *self, jint capitalizeType) {
  ASUITextField* tv = ((ASUITextField*)self.uiView);
  tv.autocorrectionType = capitalizeType;
}

jboolean ASAutoCompleteTextViewImpl_getCursorVisible(ASAutoCompleteTextViewImpl *self) {
  ASUITextField* tv = ((ASUITextField*)self.uiView);
  return CGColorEqualToColor(tv.tintColor.CGColor, [UIColor clearColor].CGColor);
}

void ASAutoCompleteTextViewImpl_setMaxLengthWithId_(ASAutoCompleteTextViewImpl *self, id objValue) {
  self->maxLength_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
}

IOSObjectArray *ASAutoCompleteTextViewImpl_getDigitStrings(ASAutoCompleteTextViewImpl *self) {
  NSString *symbol = ASAutoCompleteTextViewImpl_getLocaleValueFromRSWithNSString_withNSString_(self, @"0,1,2,3,4,5,6,7,8,9", @"locale_digits_string");
  return [((NSString *) nil_chk(symbol)) java_split:@","];
}

NSString *ASAutoCompleteTextViewImpl_getLocaleValueFromRSWithNSString_withNSString_(ASAutoCompleteTextViewImpl *self, NSString *defaultSymbol, NSString *key) {
  NSString *symbol = ASResourceBundleUtils_getStringWithNSString_withNSString_withASIFragment_(@"values/strings", key, self->fragment_);
  if (symbol == nil) {
    symbol = defaultSymbol;
  }
  return symbol;
}

NSString *ASAutoCompleteTextViewImpl_getPlusString(ASAutoCompleteTextViewImpl *self) {
  NSString *symbol = ASAutoCompleteTextViewImpl_getLocaleValueFromRSWithNSString_withNSString_(self, @"+", @"locale_plus_sign");
  return symbol;
}

NSString *ASAutoCompleteTextViewImpl_getMinusString(ASAutoCompleteTextViewImpl *self) {
  JavaTextDecimalFormatSymbols *symbols = new_JavaTextDecimalFormatSymbols_initWithJavaUtilLocale_(self->locale_);
  return JreStrcat("C", [symbols getMinusSign]);
}

NSString *ASAutoCompleteTextViewImpl_getDecimalCharacter(ASAutoCompleteTextViewImpl *self) {
  JavaTextDecimalFormatSymbols *symbols = new_JavaTextDecimalFormatSymbols_initWithJavaUtilLocale_(self->locale_);
  return JreStrcat("C", [symbols getDecimalSeparator]);
}

jboolean ASAutoCompleteTextViewImpl_numericPatternMatchesWithNSString_(ASAutoCompleteTextViewImpl *self, NSString *str) {
  return [((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(self->numericPattern_)) matcherWithJavaLangCharSequence:str])) matches];
}

void ASAutoCompleteTextViewImpl_removeNumericListener(ASAutoCompleteTextViewImpl *self) {
  self->numericPattern_ = nil;
}

void ASAutoCompleteTextViewImpl_addNumericListenerWithJavaUtilRegexPattern_(ASAutoCompleteTextViewImpl *self, JavaUtilRegexPattern *pattern) {
  self->numericPattern_ = pattern;
}

void ASAutoCompleteTextViewImpl_setPhoneNumberWithId_(ASAutoCompleteTextViewImpl *self, id objValue) {
  ASAutoCompleteTextViewImpl_nativeSetPhoneNumberWithBoolean_(self, [((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]))) booleanValue]);
}

void ASAutoCompleteTextViewImpl_nativeSetPhoneNumberWithBoolean_(ASAutoCompleteTextViewImpl *self, jboolean value) {
  if (value) {
    [((ASUITextField*)self.uiView) setKeyboardType: UIKeyboardTypePhonePad];
  } else {
    [((ASUITextField*)self.uiView) setKeyboardType: UIKeyboardTypeDefault];
  }
}

id ASAutoCompleteTextViewImpl_getFont(ASAutoCompleteTextViewImpl *self) {
  return ((ASUITextField*)self.uiView).font;
}

void ASAutoCompleteTextViewImpl_setInputTypeWithId_(ASAutoCompleteTextViewImpl *self, id objValue) {
  ASAutoCompleteTextViewImpl_nativeSetKeyboardTypeWithInt_(self, [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]);
}

void ASAutoCompleteTextViewImpl_nativeSetKeyboardTypeWithInt_(ASAutoCompleteTextViewImpl *self, jint value) {
  [((ASUITextField*)self.uiView) setKeyboardType: value];
}

id ASAutoCompleteTextViewImpl_getInputType(ASAutoCompleteTextViewImpl *self) {
  return JavaLangInteger_valueOfWithInt_(ASAutoCompleteTextViewImpl_nativeGetKeyboardType(self));
}

jint ASAutoCompleteTextViewImpl_nativeGetKeyboardType(ASAutoCompleteTextViewImpl *self) {
  return ((ASUITextField*)self.uiView).keyboardType;
}

void ASAutoCompleteTextViewImpl_setImeOptionsWithId_withNSString_(ASAutoCompleteTextViewImpl *self, id objValue, NSString *strValue) {
  ASAutoCompleteTextViewImpl_nativeSetImeOptionsWithInt_(self, [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]);
}

void ASAutoCompleteTextViewImpl_nativeSetImeOptionsWithInt_(ASAutoCompleteTextViewImpl *self, jint imeOptions) {
  [((ASUITextField*)self->uiView_) setReturnKeyType:imeOptions];
}

jint ASAutoCompleteTextViewImpl_nativeGetImeOptions(ASAutoCompleteTextViewImpl *self) {
  return ((ASUITextField*)self->uiView_).returnKeyType;
}

id ASAutoCompleteTextViewImpl_getImeOptions(ASAutoCompleteTextViewImpl *self) {
  return JavaLangInteger_valueOfWithInt_(ASAutoCompleteTextViewImpl_nativeGetImeOptions(self));
}

void ASAutoCompleteTextViewImpl_setOnEditorActionWithId_(ASAutoCompleteTextViewImpl *self, id objValue) {
  self->editorAction_ = objValue;
}

void ASAutoCompleteTextViewImpl_setOnEditorActionListener(ASAutoCompleteTextViewImpl *self) {
  id<ADTextView_OnEditorActionListener> onEditorActionListener;
  if ([self->editorAction_ isKindOfClass:[NSString class]]) {
    onEditorActionListener = new_ASAutoCompleteTextViewImpl_OnEditorActionListener_initWithASIWidget_withNSString_(self, (NSString *) self->editorAction_);
  }
  else {
    onEditorActionListener = (id<ADTextView_OnEditorActionListener>) cast_check(self->editorAction_, ADTextView_OnEditorActionListener_class_());
  }
  [((id<ADTextView_OnEditorActionListener>) nil_chk(onEditorActionListener)) onEditorActionWithADTextView:self->measurableView_ withInt:0 withADKeyEvent:new_ADKeyEvent_init()];
}

void ASAutoCompleteTextViewImpl_setInputAccessoryViewDoneButtonWithId_(ASAutoCompleteTextViewImpl *self, id objValue) {
  ASAutoCompleteTextViewImpl_nativeSetInputAccessoryViewDoneButtonWithNSString_(self, (NSString *) cast_chk(objValue, [NSString class]));
}

void ASAutoCompleteTextViewImpl_nativeSetInputAccessoryViewDoneButtonWithNSString_(ASAutoCompleteTextViewImpl *self, NSString *title) {
  UIToolbar* keyboardToolbar = [[UIToolbar alloc] init];
  [keyboardToolbar sizeToFit];
  UIBarButtonItem *flexBarButton = [[UIBarButtonItem alloc]
  initWithBarButtonSystemItem:UIBarButtonSystemItemFlexibleSpace
  target:nil action:nil];
  UIBarButtonItem* doneBarButton = [[UIBarButtonItem alloc] initWithTitle:title style:UIBarButtonItemStylePlain
  target:self
  action:@selector(doneButtonPressed:withEvent:)];
  doneBarButton.style = UIBarButtonItemStylePlain;
  keyboardToolbar.items = @[flexBarButton, doneBarButton];
  ((ASUITextField*)self.uiView).inputAccessoryView = keyboardToolbar;
}

void ASAutoCompleteTextViewImpl_setOnFocusWithId_(ASAutoCompleteTextViewImpl *self, id objValue) {
  self->onFocusChange_ = objValue;
}

void ASAutoCompleteTextViewImpl_sendPressStartEvent(ASAutoCompleteTextViewImpl *self) {
  if (self->onFocusChange_ != nil) {
    id<ADView_OnFocusChangeListener> focusChangeListener;
    if ([self->onFocusChange_ isKindOfClass:[NSString class]]) {
      focusChangeListener = new_ASAutoCompleteTextViewImpl_OnFocusChangeListener_initWithASIWidget_withNSString_(self, (NSString *) self->onFocusChange_);
    }
    else {
      focusChangeListener = (id<ADView_OnFocusChangeListener>) cast_check(self->onFocusChange_, ADView_OnFocusChangeListener_class_());
    }
    [((ADAutoCompleteTextView *) nil_chk(self->measurableView_)) setFocusedWithBoolean:true];
    [focusChangeListener onFocusChangeWithADView:self->measurableView_ withBoolean:true];
  }
}

void ASAutoCompleteTextViewImpl_sendPressEndEvent(ASAutoCompleteTextViewImpl *self) {
  if (self->onFocusChange_ != nil) {
    id<ADView_OnFocusChangeListener> focusChangeListener;
    if ([self->onFocusChange_ isKindOfClass:[NSString class]]) {
      focusChangeListener = new_ASAutoCompleteTextViewImpl_OnFocusChangeListener_initWithASIWidget_withNSString_(self, (NSString *) self->onFocusChange_);
    }
    else {
      focusChangeListener = (id<ADView_OnFocusChangeListener>) cast_check(self->onFocusChange_, ADView_OnFocusChangeListener_class_());
    }
    [((ADAutoCompleteTextView *) nil_chk(self->measurableView_)) setFocusedWithBoolean:false];
    [focusChangeListener onFocusChangeWithADView:self->measurableView_ withBoolean:false];
  }
}

void ASAutoCompleteTextViewImpl_setSelectAllOnFocusWithId_(ASAutoCompleteTextViewImpl *self, id objValue) {
  self->selectAllOnFocus_ = [((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]))) booleanValue];
}

void ASAutoCompleteTextViewImpl_setSelectAllWithId_(ASAutoCompleteTextViewImpl *self, id objValue) {
  if ([self isInitialised] && [((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]))) booleanValue]) {
    if (ASAutoCompleteTextViewImpl_isFirstResponder(self)) {
      ASAutoCompleteTextViewImpl_nativeSetSelectAllWithFloat_(self, 0);
    }
    else {
      self->selectOnceOnFocus_ = true;
      ASAutoCompleteTextViewImpl_becomeFirstResponder(self);
    }
  }
}

jboolean ASAutoCompleteTextViewImpl_isFirstResponder(ASAutoCompleteTextViewImpl *self) {
  ASUITextField* tv = ((ASUITextField*)self.uiView);
  return [tv isFirstResponder];
}

void ASAutoCompleteTextViewImpl_becomeFirstResponder(ASAutoCompleteTextViewImpl *self) {
  ASUITextField* tv = ((ASUITextField*)self.uiView);
  [tv becomeFirstResponder];
}

void ASAutoCompleteTextViewImpl_nativeSetSelectAllWithFloat_(ASAutoCompleteTextViewImpl *self, jfloat delay) {
  ASUITextField* tv = ((ASUITextField*)self.uiView);
  [self performSelector:@selector(nativeSetSelectAllActual:) withObject:tv afterDelay:delay];
}

void ASAutoCompleteTextViewImpl_setSingleLineWithId_(ASAutoCompleteTextViewImpl *self, id objValue) {
  if ([((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]))) booleanValue]) {
    [((ADAutoCompleteTextView *) nil_chk(self->measurableView_)) setLinesWithInt:1];
  }
  else {
    [((ADAutoCompleteTextView *) nil_chk(self->measurableView_)) setMaxLinesWithInt:JavaLangInteger_MAX_VALUE];
    [((ADAutoCompleteTextView *) nil_chk(self->measurableView_)) setMinLinesWithInt:-1];
  }
}

id ASAutoCompleteTextViewImpl_getSingleLine(ASAutoCompleteTextViewImpl *self) {
  return JavaLangBoolean_valueOfWithBoolean_([((ADAutoCompleteTextView *) nil_chk(self->measurableView_)) getMaxLines] == 1 && [((ADAutoCompleteTextView *) nil_chk(self->measurableView_)) getMinLines] == 1);
}

void ASAutoCompleteTextViewImpl_setScrollHorizontallyWithId_(ASAutoCompleteTextViewImpl *self, id objValue) {
  if (ASAutoCompleteTextViewImpl_hasScrollView(self)) {
    self->scrollHorizontally_ = [((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]))) booleanValue];
    ASAutoCompleteTextViewImpl_nativeSetScrollEnabledWithId_withBoolean_(self, ASAutoCompleteTextViewImpl_getScrollView(self), self->scrollHorizontally_);
    ASAutoCompleteTextViewImpl_nativeAddTapGesture(self);
    ASAutoCompleteTextViewImpl_addMinMaxListener(self);
    [((ADAutoCompleteTextView *) nil_chk(self->measurableView_)) setCompoundHorizontalPaddingConsumedWithBoolean:self->scrollHorizontally_];
  }
  else {
    [((ADAutoCompleteTextView *) nil_chk(self->measurableView_)) setHorizontallyScrollingWithBoolean:[((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]))) booleanValue]];
  }
}

void ASAutoCompleteTextViewImpl_nativeAddTapGesture(ASAutoCompleteTextViewImpl *self) {
  UITapGestureRecognizer* tapGesture = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(handleTap:)];
  tapGesture.delegate = self;
  [((ASUITextField*)self.uiView) addGestureRecognizer:tapGesture];
}

void ASAutoCompleteTextViewImpl_nativeSetScrollEnabledWithId_withBoolean_(ASAutoCompleteTextViewImpl *self, id scrollView, jboolean scrollEnabled) {
  ((ASUIScrollView*)scrollView).scrollEnabled = scrollEnabled;
}

void ASAutoCompleteTextViewImpl_setTextColorLinkWithADColorStateList_(ASAutoCompleteTextViewImpl *self, ADColorStateList *linkTextColors) {
}

void ASAutoCompleteTextViewImpl_handleOnBeforeTextChangeWithNSString_withInt_withInt_withInt_(ASAutoCompleteTextViewImpl *self, NSString *s, jint start, jint count, jint after) {
  self->start_ = start;
  self->count_ = count;
  self->after_ = after;
  self->str_ = s;
  if (self->onBeforeTextChange_ != nil) {
    id<ADTextWatcher> textChangedListener = ASAutoCompleteTextViewImpl_getTextChangedListenerWithId_withNSString_(self, self->onBeforeTextChange_, @"onbeforeTextChange");
    [((id<ADTextWatcher>) nil_chk(textChangedListener)) beforeTextChangedWithJavaLangCharSequence:(NSString *) cast_chk([self getText], [NSString class]) withInt:start withInt:count withInt:after];
  }
}

id<ADTextWatcher> ASAutoCompleteTextViewImpl_getTextChangedListenerWithId_withNSString_(ASAutoCompleteTextViewImpl *self, id objValue, NSString *name) {
  id<ADTextWatcher> textWatcher = nil;
  if ([objValue isKindOfClass:[NSString class]]) {
    textWatcher = new_ASAutoCompleteTextViewImpl_TextChangedListener_initWithASIWidget_withNSString_(self, (NSString *) objValue);
  }
  else {
    textWatcher = (id<ADTextWatcher>) cast_check(objValue, ADTextWatcher_class_());
  }
  if (self->textWatchers_ == nil) {
    self->textWatchers_ = new_JavaUtilHashMap_init();
  }
  (void) [self->textWatchers_ putWithId:name withId:textWatcher];
  return textWatcher;
}

void ASAutoCompleteTextViewImpl_handleOnAfterTextChange(ASAutoCompleteTextViewImpl *self) {
  if (self->onAfterTextChange_ != nil) {
    id<ADTextWatcher> textChangedListener = ASAutoCompleteTextViewImpl_getTextChangedListenerWithId_withNSString_(self, self->onAfterTextChange_, @"onafterTextChange");
    [((id<ADTextWatcher>) nil_chk(textChangedListener)) afterTextChangedWithADEditable:nil];
  }
}

void ASAutoCompleteTextViewImpl_handleOnTextChange(ASAutoCompleteTextViewImpl *self) {
  if (self->onTextChange_ != nil) {
    [((id<ADTextWatcher>) nil_chk(self->textChangedListener_)) onTextChangedWithJavaLangCharSequence:(NSString *) cast_chk([self getText], [NSString class]) withInt:self->start_ withInt:self->after_ - [((NSString *) nil_chk(self->str_)) java_length] withInt:[((NSString *) nil_chk(self->str_)) java_length]];
  }
}

void ASAutoCompleteTextViewImpl_setOnAfterTextChangeWithId_(ASAutoCompleteTextViewImpl *self, id objValue) {
  self->onAfterTextChange_ = objValue;
  if (self->onAfterTextChange_ != nil) {
    ASAutoCompleteTextViewImpl_nativeAddTextFieldDidChange(self);
  }
}

void ASAutoCompleteTextViewImpl_setBeforeOnTextChangeWithId_(ASAutoCompleteTextViewImpl *self, id objValue) {
  self->onBeforeTextChange_ = objValue;
}

void ASAutoCompleteTextViewImpl_setOnTextChangeWithId_(ASAutoCompleteTextViewImpl *self, id objValue) {
  self->onTextChange_ = objValue;
  self->textChangedListener_ = ASAutoCompleteTextViewImpl_getTextChangedListenerWithId_withNSString_(self, self->onTextChange_, @"onTextChange");
  if (self->onTextChange_ != nil) {
    ASAutoCompleteTextViewImpl_nativeAddTextFieldDidChange(self);
  }
}

void ASAutoCompleteTextViewImpl_setTextAllCapsWithId_(ASAutoCompleteTextViewImpl *self, id objValue) {
  self->textAllCaps_ = [((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]))) booleanValue];
}

void ASAutoCompleteTextViewImpl_forceRedraw(ASAutoCompleteTextViewImpl *self) {
  NSString * text = ((ASUITextField*) self->uiView_).text;
  [((ASUITextField*) self->uiView_) setText:@""];
  [((ASUITextField*) self->uiView_) setText:text];
}

void ASAutoCompleteTextViewImpl_nativeSetContentSizeWithId_withInt_withInt_(ASAutoCompleteTextViewImpl *self, id uiView, jint contentWidth, jint height) {
  ((UIScrollView*) uiView).contentSize = CGSizeMake(contentWidth, height);
}

void ASAutoCompleteTextViewImpl_remeasure(ASAutoCompleteTextViewImpl *self) {
  if (ASAutoCompleteTextViewImpl_hasScrollView(self)) {
    ASAutoCompleteTextViewImpl_updateScrollViewContentOffset(self);
  }
  if ([((id<ASIFragment>) nil_chk(self->fragment_)) isViewLoaded]) {
    ASViewImpl_requestLayoutWithASIWidget_(self);
    [((id<ASIFragment>) nil_chk(self->fragment_)) remeasure];
  }
}

void ASAutoCompleteTextViewImpl_updateScrollViewContentOffset(ASAutoCompleteTextViewImpl *self) {
  ASUIScrollView* scrollView = ((ASUIScrollView*) [self getScrollView]);
  int x =   [((ASUITextField*)self.uiView) caretRectForPosition:((ASUITextField*)self.uiView).selectedTextRange.start].origin.x;
  int y = scrollView.contentOffset.x;
  
  if (x > y + scrollView.frame.size.width) {
    [scrollView setContentOffset:CGPointMake(x, scrollView.contentOffset.y) animated:NO];
  }
}

void ASAutoCompleteTextViewImpl_setInputViewWithId_(ASAutoCompleteTextViewImpl *self, id objValue) {
  if ([objValue isKindOfClass:[JavaLangInteger class]]) {
    jint inputView = [((JavaLangInteger *) nil_chk((JavaLangInteger *) objValue)) intValue];
    switch (inputView) {
      case 1:
      ASAutoCompleteTextViewImpl_setPickerView(self);
      break;
      default:
      break;
    }
  }
  else {
    if (objValue != nil) {
      ASAutoCompleteTextViewImpl_setNativeInputViewWithId_(self, objValue);
    }
  }
}

void ASAutoCompleteTextViewImpl_setNativeInputViewWithId_(ASAutoCompleteTextViewImpl *self, id objValue) {
  [((ASUITextField*)self.uiView) setInputView:(UIView*) objValue];
}

void ASAutoCompleteTextViewImpl_setPickerView(ASAutoCompleteTextViewImpl *self) {
  UIPickerView * picker = [UIPickerView new];
  picker.showsSelectionIndicator = YES;
  [((ASUITextField*)self.uiView) setInputView:picker];
}

void ASAutoCompleteTextViewImpl_setDatePicker(ASAutoCompleteTextViewImpl *self) {
  UIDatePicker *datepicker = [UIDatePicker new];
  [datepicker setDatePickerMode:UIDatePickerModeDate];
  [((ASUITextField*)self.uiView) setInputView:datepicker];
}

void ASAutoCompleteTextViewImpl_setErrorWithNSString_(ASAutoCompleteTextViewImpl *self, NSString *message) {
}

void ASAutoCompleteTextViewImpl_nativeCreateWithJavaUtilMap_(ASAutoCompleteTextViewImpl *self, id<JavaUtilMap> params) {
  [((ASSimpleWrapableView *) nil_chk(self->simpleWrapableView_)) setDisableForegroundWithBoolean:true];
  [self registerForAttributeCommandChainWithNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"hint" } count:1 type:NSString_class_()]];
  ASAutoCompleteTextViewImpl_initPopUp(self);
  [self registerForAttributeCommandChainWithPhaseWithNSString:@"predraw" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableStart", @"drawableEnd", @"drawableLeft", @"drawableTop", @"drawableRight", @"drawableBottom", @"drawablePadding", @"drawableTint", @"drawableTintMode" } count:9 type:NSString_class_()]];
}

id ASAutoCompleteTextViewImpl_nativeCreateViewWithInt_(ASAutoCompleteTextViewImpl *self, jint viewType) {
  ASUITextField* uiView = [ASUITextField new];
  uiView.delegate = self;
  if (viewType != -1) {
    uiView.commandRegex = ASAutoCompleteTextViewImpl_WIDGET_REGEX;
  }
  uiView.backgroundColor = [UIColor clearColor];
  return uiView;
}

void ASAutoCompleteTextViewImpl_addMinMaxListener(ASAutoCompleteTextViewImpl *self) {
  if (!self->callMeasureOnChange_) {
    ASAutoCompleteTextViewImpl_nativeAddTextFieldDidChange(self);
  }
  self->callMeasureOnChange_ = true;
}

void ASAutoCompleteTextViewImpl_nativeAddTextFieldDidChange(ASAutoCompleteTextViewImpl *self) {
  [((ASUITextField*)self.uiView) addTarget:self action:@selector(textFieldDidChange:) forControlEvents:UIControlEventEditingChanged];
}

void ASAutoCompleteTextViewImpl_setPasswordTypeWithId_(ASAutoCompleteTextViewImpl *self, id objValue) {
  ASAutoCompleteTextViewImpl_nativeSetSecureTextEntryWithBoolean_(self, [((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]))) booleanValue]);
}

void ASAutoCompleteTextViewImpl_nativeSetSecureTextEntryWithBoolean_(ASAutoCompleteTextViewImpl *self, jboolean value) {
  ((ASUITextField*)self.uiView).secureTextEntry = value;
}

void ASAutoCompleteTextViewImpl_nativeMakeFrameForChildWidgetWithInt_withInt_withInt_withInt_(ASAutoCompleteTextViewImpl *self, jint l, jint t, jint r, jint b) {
  if (ASAutoCompleteTextViewImpl_isViewWrapped(self)) {
    if (ASAutoCompleteTextViewImpl_hasScrollView(self)) {
      jint textWidth = [((ADAutoCompleteTextView *) nil_chk(self->measurableView_)) nativeMeasureWidthWithId:self->uiView_];
      jint horizontalPadding = [((ADAutoCompleteTextView *) nil_chk(self->measurableView_)) getCompoundPaddingLeft] + [((ADAutoCompleteTextView *) nil_chk(self->measurableView_)) getCompoundPaddingRight];
      if (textWidth < (r - l - horizontalPadding)) {
        textWidth = r - l - horizontalPadding;
      }
      ASViewImpl_updateBoundsWithId_withInt_withInt_withInt_withInt_(self->uiView_, 0, 0, textWidth, b - t);
      ASViewImpl_updateBoundsWithId_withInt_withInt_withInt_withInt_(ASAutoCompleteTextViewImpl_getScrollView(self), [((ADAutoCompleteTextView *) nil_chk(self->measurableView_)) getCompoundPaddingLeft], 0, r - l - [((ADAutoCompleteTextView *) nil_chk(self->measurableView_)) getCompoundPaddingRight] - [((ADAutoCompleteTextView *) nil_chk(self->measurableView_)) getCompoundPaddingLeft], b - t);
      ASAutoCompleteTextViewImpl_nativeSetContentSizeWithId_withInt_withInt_(self, ASAutoCompleteTextViewImpl_getScrollView(self), textWidth + 10, b - t);
    }
  }
}

void ASAutoCompleteTextViewImpl_postSetAttributeEditTextWithASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(ASAutoCompleteTextViewImpl *self, ASWidgetAttribute *key, NSString *strValue, id objValue, id<ASILifeCycleDecorator> decorator) {
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"textAllCaps", @"maxLength" }, 2)) {
    case 0:
    case 1:
    if ([self isInitialised]) {
      [self setMyTextWithId:[self getText]];
    }
    break;
    default:
    break;
  }
}

void ASAutoCompleteTextViewImpl_setBorderStyleWithId_(ASAutoCompleteTextViewImpl *self, id value) {
  ASAutoCompleteTextViewImpl_nativeSetBorderStyleWithInt_(self, [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(value, [JavaLangInteger class]))) intValue]);
}

void ASAutoCompleteTextViewImpl_nativeSetBorderStyleWithInt_(ASAutoCompleteTextViewImpl *self, jint value) {
  [((ASUITextField*)self.uiView) setBorderStyle:value];
}

void ASAutoCompleteTextViewImpl_updatePadding(ASAutoCompleteTextViewImpl *self) {
}

void ASAutoCompleteTextViewImpl_nativeSetVerticalAligmentCenter(ASAutoCompleteTextViewImpl *self) {
  ((ASUITextField*)self.uiView).contentVerticalAlignment = UIControlContentVerticalAlignmentCenter;
}

void ASAutoCompleteTextViewImpl_nativeSetVerticalAligmentBottom(ASAutoCompleteTextViewImpl *self) {
  ((ASUITextField*)self.uiView).contentVerticalAlignment = UIControlContentVerticalAlignmentBottom;
}

void ASAutoCompleteTextViewImpl_nativeSetVerticalAligmentTop(ASAutoCompleteTextViewImpl *self) {
  ((ASUITextField*)self.uiView).contentVerticalAlignment = UIControlContentVerticalAlignmentTop;
}

void ASAutoCompleteTextViewImpl_setHintColorWithId_(ASAutoCompleteTextViewImpl *self, id objValue) {
  if ([objValue isKindOfClass:[ADColorStateList class]]) {
    ADColorStateList *colorStateList = (ADColorStateList *) objValue;
    [((ADAutoCompleteTextView *) nil_chk(self->measurableView_)) setHintTextColorWithADColorStateList:colorStateList];
    objValue = JavaLangInteger_valueOfWithInt_([((ADAutoCompleteTextView *) nil_chk(self->measurableView_)) getCurrentHintTextColor]);
  }
  ASAutoCompleteTextViewImpl_nativeSetHintColorWithId_(self, ASViewImpl_getColorWithId_(objValue));
}

void ASAutoCompleteTextViewImpl_nativeSetHintColorWithId_(ASAutoCompleteTextViewImpl *self, id value) {
  ((ASUITextField*)self.uiView).placeHolderColor = (UIColor*) value;
}

void ASAutoCompleteTextViewImpl_syncPlaceholderLabel(ASAutoCompleteTextViewImpl *self) {
  [self invalidate];
}

void ASAutoCompleteTextViewImpl_setFocusWithId_(ASAutoCompleteTextViewImpl *self, id objValue) {
  if ([((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]))) booleanValue]) {
    ASAutoCompleteTextViewImpl_becomeFirstResponder(self);
  }
  else {
    [self setEnabledWithId:JavaLangBoolean_valueOfWithBoolean_(false)];
    [self setEnabledWithId:JavaLangBoolean_valueOfWithBoolean_(true)];
  }
}

void ASAutoCompleteTextViewImpl_setEntriesWithId_(ASAutoCompleteTextViewImpl *self, id objValue) {
  self->entries_ = (id<JavaUtilList>) cast_check(objValue, JavaUtilList_class_());
}

id<ASIWidget> ASAutoCompleteTextViewImpl_createPopup(ASAutoCompleteTextViewImpl *self) {
  ADTextView *promptView = nil;
  id<ASIWidget> parentWidget = ASWidgetFactory_createWidgetWithNSString_withNSString_withASHasWidgets_withBoolean_(ASFrameLayoutImpl_LOCAL_NAME, ASFrameLayoutImpl_GROUP_NAME, (id<ASHasWidgets>) cast_check([((id<ASIFragment>) nil_chk([self getRootFragment])) getRootWidget], ASHasWidgets_class_()), false);
  ADView *parentView = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(parentWidget)) asWidget], [ADView class]);
  ADRelativeLayout_LayoutParams *playoutParams = (ADRelativeLayout_LayoutParams *) cast_chk([((ADView *) nil_chk(parentView)) getLayoutParams], [ADRelativeLayout_LayoutParams class]);
  ((ADRelativeLayout_LayoutParams *) nil_chk(playoutParams))->width_ = ADViewGroup_LayoutParams_MATCH_PARENT;
  playoutParams->height_ = ADViewGroup_LayoutParams_WRAP_CONTENT;
  id<ASHasWidgets> listViewParent = (id<ASHasWidgets>) cast_check(parentWidget, ASHasWidgets_class_());
  if (self->hintText_ != nil) {
    id<ASIWidget> hintContainerWidget = ASWidgetFactory_createWidgetWithNSString_withNSString_withASHasWidgets_withBoolean_(ASLinearLayoutImpl_LOCAL_NAME, ASLinearLayoutImpl_GROUP_NAME, (id<ASHasWidgets>) cast_check(parentWidget, ASHasWidgets_class_()), false);
    ADLinearLayout *hintContainer = (ADLinearLayout *) cast_chk([((id<ASIWidget>) nil_chk(hintContainerWidget)) asWidget], [ADLinearLayout class]);
    ((ADViewGroup_LayoutParams *) nil_chk([((ADLinearLayout *) nil_chk(hintContainer)) getLayoutParams]))->width_ = ADViewGroup_LayoutParams_MATCH_PARENT;
    ((ADViewGroup_LayoutParams *) nil_chk([hintContainer getLayoutParams]))->height_ = ADViewGroup_LayoutParams_WRAP_CONTENT;
    [hintContainer setOrientationWithInt:ADLinearLayout_VERTICAL];
    listViewParent = (id<ASHasWidgets>) cast_check(hintContainerWidget, ASHasWidgets_class_());
    if (self->mPromptPosition_ == 0) {
      promptView = [self createHintViewWithASIWidget:hintContainerWidget];
    }
  }
  self->listViewWidget_ = (ASListViewImpl *) cast_chk(ASWidgetFactory_createWidgetWithNSString_withNSString_withASHasWidgets_withBoolean_(ASListViewImpl_LOCAL_NAME, ASListViewImpl_GROUP_NAME, listViewParent, false), [ASListViewImpl class]);
  ADView *listView = (ADView *) cast_chk([((ASListViewImpl *) nil_chk(self->listViewWidget_)) asWidget], [ADView class]);
  if (self->hintText_ != nil) {
    if (self->mPromptPosition_ == 1) {
      promptView = [self createHintViewWithASIWidget:listViewParent];
    }
  }
  ((ADViewGroup_LayoutParams *) nil_chk([((ADView *) nil_chk(listView)) getLayoutParams]))->width_ = ADViewGroup_LayoutParams_MATCH_PARENT;
  if (ASAutoCompleteTextViewImpl_islinearlayout(self)) {
    ((ADViewGroup_LayoutParams *) nil_chk([((ADView *) nil_chk(([((ADViewGroup *) cast_chk(listView, [ADViewGroup class])) getChildAtWithInt:0]))) getLayoutParams]))->width_ = ADViewGroup_LayoutParams_MATCH_PARENT;
    ((ADViewGroup_LayoutParams *) nil_chk([((ADView *) nil_chk([((ADViewGroup *) nil_chk(((ADViewGroup *) cast_chk([((ADViewGroup *) cast_chk(listView, [ADViewGroup class])) getChildAtWithInt:0], [ADViewGroup class])))) getChildAtWithInt:0])) getLayoutParams]))->width_ = ADViewGroup_LayoutParams_MATCH_PARENT;
  }
  else {
    ((ADViewGroup_LayoutParams *) nil_chk([listView getLayoutParams]))->height_ = ADViewGroup_LayoutParams_MATCH_PARENT;
  }
  [self setAttrsOnListView];
  [((ADAutoCompleteTextView *) nil_chk(self->measurableView_)) setAdapterWithADListAdapter:[((ASListViewImpl *) nil_chk(self->listViewWidget_)) getListAdapter]];
  [((ADAutoCompleteTextView *) nil_chk(self->measurableView_)) init__WithADView:parentView withADView:listView withADTextView:promptView withADRelativeLayout_LayoutParams:playoutParams];
  if (self->dropDownAnchor_ != -1) {
    [((ADAutoCompleteTextView *) nil_chk(self->measurableView_)) setAnchorViewWithADView:(ADView *) cast_chk([((id<ASIWidget>) nil_chk([((id<ASIWidget>) nil_chk([((id<ASIFragment>) nil_chk(self->fragment_)) getRootWidget])) findWidgetByIdWithNSString:ASIdGenerator_getNameWithInt_(self->dropDownAnchor_)])) asWidget], [ADView class])];
  }
  [((ADAutoCompleteTextView *) nil_chk(self->measurableView_)) setOnDismissListenerWithADAutoCompleteTextView_OnDismissListener:self->onDismissListener_];
  ASAutoCompleteTextViewImpl_setAttrsOnTextView(self);
  [self addOutsideTouchListenerWithBoolean:true];
  return parentWidget;
}

void ASAutoCompleteTextViewImpl_unregisterDataSetObserver(ASAutoCompleteTextViewImpl *self) {
  @try {
    [((ASListViewImpl_ListAdapter *) nil_chk([((ASListViewImpl *) nil_chk(self->listViewWidget_)) getListAdapter])) unregisterDataSetObserverWithADDataSetObserver:self->observer_];
  }
  @catch (JavaLangIllegalStateException *e) {
  }
}

void ASAutoCompleteTextViewImpl_createEntries(ASAutoCompleteTextViewImpl *self) {
  [((id<JavaUtilList>) nil_chk([((ASListViewImpl *) nil_chk(self->listViewWidget_)) getData])) clear];
  if (self->entries_ != nil) {
    for (NSString * __strong entry_ in self->entries_) {
      ASLoopParam *loopParam = new_ASAutoCompleteTextViewImpl_2_initWithNSString_(entry_);
      (void) [loopParam putWithId:@"item" withId:entry_];
      [((id<JavaUtilList>) nil_chk([((ASListViewImpl *) nil_chk(self->listViewWidget_)) getData])) addWithId:loopParam];
    }
  }
  else {
    [((id<JavaUtilList>) nil_chk([((ASListViewImpl *) nil_chk(self->listViewWidget_)) getData])) addAllWithJavaUtilCollection:self->dataList_];
  }
}

void ASAutoCompleteTextViewImpl_beforetextChangeWithNSString_withInt_withInt_(ASAutoCompleteTextViewImpl *self, NSString *s, jint start, jint count) {
  if ([self isInitialised]) {
    ASAutoCompleteTextViewImpl_createPopUpIfRequired(self);
    [((id<ADTextWatcher>) nil_chk([((ADAutoCompleteTextView *) nil_chk(self->measurableView_)) getTextWatcher])) beforeTextChangedWithJavaLangCharSequence:s withInt:start withInt:count withInt:[((NSString *) nil_chk(s)) java_length]];
  }
}

void ASAutoCompleteTextViewImpl_createPopUpIfRequired(ASAutoCompleteTextViewImpl *self) {
  if (self->popupContainer_ == nil) {
    self->popupContainer_ = ASAutoCompleteTextViewImpl_createPopup(self);
    ASAutoCompleteTextViewImpl_movePopUpContainerToTop(self);
  }
  ASAutoCompleteTextViewImpl_createEntries(self);
}

void ASAutoCompleteTextViewImpl_afterTextChanged(ASAutoCompleteTextViewImpl *self) {
  if ([self isInitialised]) {
    [((id<ADTextWatcher>) nil_chk([((ADAutoCompleteTextView *) nil_chk(self->measurableView_)) getTextWatcher])) afterTextChangedWithADEditable:nil];
  }
}

void ASAutoCompleteTextViewImpl_removePopUpContainer(ASAutoCompleteTextViewImpl *self) {
  if (self->popupContainer_ != nil) {
    [((id<ASHasWidgets>) nil_chk([self->popupContainer_ getParent])) removeWithASIWidget:self->popupContainer_];
    self->popupContainer_ = nil;
  }
  ASAutoCompleteTextViewImpl_unregisterDataSetObserver(self);
  [self addOutsideTouchListenerWithBoolean:false];
}

void ASAutoCompleteTextViewImpl_setThresholdWithId_(ASAutoCompleteTextViewImpl *self, id objValue) {
  [((ADAutoCompleteTextView *) nil_chk(self->measurableView_)) setThresholdWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
}

void ASAutoCompleteTextViewImpl_setCompletionHintWithId_(ASAutoCompleteTextViewImpl *self, id objValue) {
  self->hintText_ = (NSString *) cast_chk(objValue, [NSString class]);
}

NSString *ASAutoCompleteTextViewImpl_getCompletionHint(ASAutoCompleteTextViewImpl *self) {
  return self->hintText_;
}

void ASAutoCompleteTextViewImpl_setCompletionViewWithId_(ASAutoCompleteTextViewImpl *self, id objValue) {
  self->hintViewPath_ = (NSString *) cast_chk(objValue, [NSString class]);
}

void ASAutoCompleteTextViewImpl_setDropDownlistSelectorWithId_(ASAutoCompleteTextViewImpl *self, id objValue) {
  self->dropDownlistSelector_ = objValue;
}

void ASAutoCompleteTextViewImpl_setDropDownWidthWithId_(ASAutoCompleteTextViewImpl *self, id objValue) {
  self->dropDownWidth_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
}

void ASAutoCompleteTextViewImpl_setDropDownVerticalOffsetWithId_(ASAutoCompleteTextViewImpl *self, id objValue) {
  self->dropDownVerticalOffset_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
}

void ASAutoCompleteTextViewImpl_setDropDownHorizontalOffsetWithId_(ASAutoCompleteTextViewImpl *self, id objValue) {
  self->dropDownHorizontalOffset_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
}

void ASAutoCompleteTextViewImpl_setDropDownHeightWithId_(ASAutoCompleteTextViewImpl *self, id objValue) {
  self->dropDownHeight_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
}

id ASAutoCompleteTextViewImpl_getDropDownWidth(ASAutoCompleteTextViewImpl *self) {
  return JavaLangInteger_valueOfWithInt_(self->dropDownWidth_);
}

id ASAutoCompleteTextViewImpl_getDropDownVerticalOffset(ASAutoCompleteTextViewImpl *self) {
  return JavaLangInteger_valueOfWithInt_(self->dropDownVerticalOffset_);
}

id ASAutoCompleteTextViewImpl_getDropDownHorizontalOffset(ASAutoCompleteTextViewImpl *self) {
  return JavaLangInteger_valueOfWithInt_(self->dropDownHorizontalOffset_);
}

id ASAutoCompleteTextViewImpl_getDropDownHeight(ASAutoCompleteTextViewImpl *self) {
  return JavaLangInteger_valueOfWithInt_(self->dropDownHeight_);
}

void ASAutoCompleteTextViewImpl_setAttrsOnTextView(ASAutoCompleteTextViewImpl *self) {
  if (self->dropDownWidth_ != -1) {
    [((ADAutoCompleteTextView *) nil_chk(self->measurableView_)) setDropDownWidthWithInt:self->dropDownWidth_];
  }
  if (self->dropDownHeight_ != -1) {
    [((ADAutoCompleteTextView *) nil_chk(self->measurableView_)) setDropDownHeightWithInt:self->dropDownHeight_];
  }
  if (self->dropDownVerticalOffset_ != -1) {
    [((ADAutoCompleteTextView *) nil_chk(self->measurableView_)) setDropDownVerticalOffsetWithInt:self->dropDownVerticalOffset_];
  }
  if (self->dropDownHorizontalOffset_ != -1) {
    [((ADAutoCompleteTextView *) nil_chk(self->measurableView_)) setDropDownHorizontalOffsetWithInt:self->dropDownHorizontalOffset_];
  }
}

void ASAutoCompleteTextViewImpl_setDropDownAnchorWithId_(ASAutoCompleteTextViewImpl *self, id objValue) {
  self->dropDownAnchor_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
}

id ASAutoCompleteTextViewImpl_getDropDownAnchor(ASAutoCompleteTextViewImpl *self) {
  return JavaLangInteger_valueOfWithInt_(self->dropDownAnchor_);
}

void ASAutoCompleteTextViewImpl_setOnDismissListenerWithADAutoCompleteTextView_OnDismissListener_(ASAutoCompleteTextViewImpl *self, id<ADAutoCompleteTextView_OnDismissListener> onDismissListener) {
  self->onDismissListener_ = onDismissListener;
}

void ASAutoCompleteTextViewImpl_setDataObserverWithId_(ASAutoCompleteTextViewImpl *self, id observer) {
  self->myobserver_ = (ADDataSetObserver *) cast_chk(observer, [ADDataSetObserver class]);
}

void ASAutoCompleteTextViewImpl_postSetAttributeWithASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(ASAutoCompleteTextViewImpl *self, ASWidgetAttribute *key, NSString *strValue, id objValue, id<ASILifeCycleDecorator> decorator) {
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"showDropDown" }, 1)) {
    case 0:
    break;
    default:
    ASAutoCompleteTextViewImpl_postSetAttributeEditTextWithASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(self, key, strValue, objValue, decorator);
    break;
  }
}

void ASAutoCompleteTextViewImpl_setHintTextFormatWithId_(ASAutoCompleteTextViewImpl *self, id objValue) {
  [self applyAttributeCommandWithNSString:@"hint" withNSString:ASCommonConverters_command_textformatter withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"hintTextFormat" } count:1 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ (NSString *) cast_chk(objValue, [NSString class]) } count:1 type:NSObject_class_()]];
}

void ASAutoCompleteTextViewImpl_setGravityWithId_(ASAutoCompleteTextViewImpl *self, id objValue) {
  jint value = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
  [((ADAutoCompleteTextView *) nil_chk(self->measurableView_)) setGravityWithInt:value];
  jint major = value & ASGravityConverter_VERTICAL_GRAVITY_MASK;
  ASAutoCompleteTextViewImpl_updateTextAlignment(self);
  switch (major) {
    case ASGravityConverter_TOP:
    ASAutoCompleteTextViewImpl_setVerticalAligmentTop(self);
    break;
    case ASGravityConverter_BOTTOM:
    ASAutoCompleteTextViewImpl_setVerticalAligmentBottom(self);
    break;
    case ASGravityConverter_CENTER_VERTICAL:
    ASAutoCompleteTextViewImpl_setVerticalAligmentCenter(self);
    break;
    default:
    ASAutoCompleteTextViewImpl_setVerticalAligmentTop(self);
    break;
  }
}

void ASAutoCompleteTextViewImpl_updateTextAlignment(ASAutoCompleteTextViewImpl *self) {
  ADLayout_Alignment *minor = [((ADAutoCompleteTextView *) nil_chk(self->measurableView_)) getAlignmentOfLayout];
  jboolean isRtl = false;
  jboolean hasTextDirection = [((ADAutoCompleteTextView *) nil_chk(self->measurableView_)) getRawTextDirection] != 0;
  if (hasTextDirection) {
    id<ADTextDirectionHeuristic> heuristic = [((ADAutoCompleteTextView *) nil_chk(self->measurableView_)) getTextDirectionHeuristic];
    NSString *text = (NSString *) cast_chk(ASAutoCompleteTextViewImpl_getMyText(self), [NSString class]);
    isRtl = [((id<ADTextDirectionHeuristic>) nil_chk(heuristic)) isRtlWithJavaLangCharSequence:text withInt:0 withInt:[((NSString *) nil_chk(text)) java_length]];
  }
  switch ([minor ordinal]) {
    case ADLayout_Alignment_Enum_ALIGN_LEFT:
    ASAutoCompleteTextViewImpl_setHorizontalAligmentLeft(self);
    break;
    case ADLayout_Alignment_Enum_ALIGN_NORMAL:
    if (hasTextDirection) {
      if (isRtl) {
        ASAutoCompleteTextViewImpl_setHorizontalAligmentRight(self);
      }
      else {
        ASAutoCompleteTextViewImpl_setHorizontalAligmentLeft(self);
      }
    }
    else {
      ASAutoCompleteTextViewImpl_setHorizontalAligmentLeft(self);
    }
    break;
    case ADLayout_Alignment_Enum_ALIGN_RIGHT:
    ASAutoCompleteTextViewImpl_setHorizontalAligmentRight(self);
    break;
    case ADLayout_Alignment_Enum_ALIGN_OPPOSITE:
    if (hasTextDirection) {
      if (isRtl) {
        ASAutoCompleteTextViewImpl_setHorizontalAligmentLeft(self);
      }
      else {
        ASAutoCompleteTextViewImpl_setHorizontalAligmentRight(self);
      }
    }
    else {
      ASAutoCompleteTextViewImpl_setHorizontalAligmentRight(self);
    }
    break;
    case ADLayout_Alignment_Enum_ALIGN_CENTER:
    ASAutoCompleteTextViewImpl_setHorizontalAligmentCenter(self);
    break;
    default:
    ASAutoCompleteTextViewImpl_setHorizontalAligmentLeft(self);
    break;
  }
}

id ASAutoCompleteTextViewImpl_getGravity(ASAutoCompleteTextViewImpl *self) {
  ASBaseMeasurableView_VerticalAligment *verticalAligment = [((ADAutoCompleteTextView *) nil_chk(self->measurableView_)) getVerticalAligment];
  if (verticalAligment == nil) {
    verticalAligment = JreLoadEnum(ASBaseMeasurableView_VerticalAligment, top);
  }
  jint gravityVertical = 0;
  switch ([verticalAligment ordinal]) {
    case ASBaseMeasurableView_VerticalAligment_Enum_top:
    gravityVertical = ASGravityConverter_TOP;
    break;
    case ASBaseMeasurableView_VerticalAligment_Enum_middle:
    gravityVertical = ASGravityConverter_CENTER_VERTICAL;
    break;
    case ASBaseMeasurableView_VerticalAligment_Enum_bottom:
    gravityVertical = ASGravityConverter_BOTTOM;
    break;
    default:
    break;
  }
  jint aligment = ASAutoCompleteTextViewImpl_getTextAlignment(self);
  jint gravitHorizontal = 0;
  switch (aligment) {
    case ASAutoCompleteTextViewImpl_TEXT_ALIGN_CENTER:
    gravitHorizontal = ASGravityConverter_CENTER_HORIZONTAL;
    break;
    case ASAutoCompleteTextViewImpl_TEXT_ALIGN_LEFT:
    gravitHorizontal = ASGravityConverter_LEFT;
    break;
    case ASAutoCompleteTextViewImpl_TEXT_ALIGN_RIGHT:
    gravitHorizontal = ASGravityConverter_RIGHT;
    break;
    default:
    break;
  }
  jint gravity = gravitHorizontal | gravityVertical;
  return JavaLangInteger_valueOfWithInt_(gravity);
}

void ASAutoCompleteTextViewImpl_setTypeFaceWithId_withNSString_(ASAutoCompleteTextViewImpl *self, id objValue, NSString *strValue) {
  ASAutoCompleteTextViewImpl_setFontFamilyWithId_withNSString_(self, objValue, strValue);
}

void ASAutoCompleteTextViewImpl_setFontFamilyWithId_withNSString_(ASAutoCompleteTextViewImpl *self, id objValue, NSString *strValue) {
  if ([objValue isKindOfClass:[JavaLangInteger class]]) {
    objValue = ASPluginInvoker_convertFromWithASIConverter_withJavaUtilMap_withId_withASIFragment_(ASConverterFactory_getWithNSString_(ASCommonConverters_font), nil, strValue, self->fragment_);
  }
  self->fontDescriptors_ = (id<JavaUtilMap>) cast_check(objValue, JavaUtilMap_class_());
  jint style = ASAutoCompleteTextViewImpl_nativeGetFontStyle(self);
  jint height = ASAutoCompleteTextViewImpl_nativeGetFontSize(self);
  NSString *weight = @"400";
  if ((style & ASAutoCompleteTextViewImpl_BOLD_FONT_TRAIT) != 0) {
    weight = @"700";
  }
  NSString *fontStyle = @"normal";
  if ((style & ASAutoCompleteTextViewImpl_ITALIC_FONT_TRAIT) != 0) {
    fontStyle = @"italic";
  }
  ASFontDescriptor *fontDescriptor = [((id<JavaUtilMap>) nil_chk(self->fontDescriptors_)) getWithId:JreStrcat("$C$", fontStyle, '_', weight)];
  ASAutoCompleteTextViewImpl_nativeSetCustomFontWithInt_withASFontDescriptor_(self, height, fontDescriptor);
}

void ASAutoCompleteTextViewImpl_setTextStyleWithId_(ASAutoCompleteTextViewImpl *self, id objValue) {
  jint value = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
  if (self->fontDescriptors_ != nil) {
    jint height = ASAutoCompleteTextViewImpl_nativeGetFontSize(self);
    NSString *weight = @"400";
    if ((value & (jint) 0x1) != 0) {
      weight = @"700";
    }
    NSString *fontStyle = @"normal";
    if ((value & (jint) 0x2) != 0) {
      fontStyle = @"italic";
    }
    ASFontDescriptor *fontDescriptor = [((id<JavaUtilMap>) nil_chk(self->fontDescriptors_)) getWithId:JreStrcat("$C$", fontStyle, '_', weight)];
    ASAutoCompleteTextViewImpl_nativeSetCustomFontWithInt_withASFontDescriptor_(self, height, fontDescriptor);
  }
  else {
    jint style = ASAutoCompleteTextViewImpl_NORMAL_FONT_TRAIT;
    if ((value & (jint) 0x1) != 0) {
      style = style | ASAutoCompleteTextViewImpl_BOLD_FONT_TRAIT;
    }
    if ((value & (jint) 0x2) != 0) {
      style = style | ASAutoCompleteTextViewImpl_ITALIC_FONT_TRAIT;
    }
    ASAutoCompleteTextViewImpl_nativeSetFontStyleWithInt_(self, style);
  }
}

id ASAutoCompleteTextViewImpl_getMinHeight(ASAutoCompleteTextViewImpl *self) {
  return JavaLangInteger_valueOfWithInt_([((ADAutoCompleteTextView *) nil_chk(self->measurableView_)) getMinHeight]);
}

id ASAutoCompleteTextViewImpl_getMinWidth(ASAutoCompleteTextViewImpl *self) {
  return JavaLangInteger_valueOfWithInt_([((ADAutoCompleteTextView *) nil_chk(self->measurableView_)) getMinWidth]);
}

void ASAutoCompleteTextViewImpl_setEmsWithId_(ASAutoCompleteTextViewImpl *self, id objValue) {
  ASAutoCompleteTextViewImpl_setMinEmsWithId_(self, objValue);
  ASAutoCompleteTextViewImpl_setMaxEmsWithId_(self, objValue);
}

void ASAutoCompleteTextViewImpl_setMinEmsWithId_(ASAutoCompleteTextViewImpl *self, id objValue) {
  [((ADAutoCompleteTextView *) nil_chk(self->measurableView_)) setMinEmsWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
  ASAutoCompleteTextViewImpl_addMinMaxListener(self);
}

void ASAutoCompleteTextViewImpl_setMaxEmsWithId_(ASAutoCompleteTextViewImpl *self, id objValue) {
  [((ADAutoCompleteTextView *) nil_chk(self->measurableView_)) setMaxEmsWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
  ASAutoCompleteTextViewImpl_addMinMaxListener(self);
}

void ASAutoCompleteTextViewImpl_setWidthWithId_(ASAutoCompleteTextViewImpl *self, id objValue) {
  ASAutoCompleteTextViewImpl_setMinWidthWithId_(self, objValue);
  ASAutoCompleteTextViewImpl_setMaxWidthWithId_(self, objValue);
}

void ASAutoCompleteTextViewImpl_setHeightWithId_(ASAutoCompleteTextViewImpl *self, id objValue) {
  ASAutoCompleteTextViewImpl_setMinHeightWithId_(self, objValue);
  ASAutoCompleteTextViewImpl_setMaxHeightWithId_(self, objValue);
}

void ASAutoCompleteTextViewImpl_setMaxLinesWithId_(ASAutoCompleteTextViewImpl *self, id objValue) {
  [((ADAutoCompleteTextView *) nil_chk(self->measurableView_)) setMaxLinesWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
  ASAutoCompleteTextViewImpl_addMinMaxListener(self);
}

void ASAutoCompleteTextViewImpl_setLinesWithId_(ASAutoCompleteTextViewImpl *self, id objValue) {
  ASAutoCompleteTextViewImpl_setMinLinesWithId_(self, objValue);
  ASAutoCompleteTextViewImpl_setMaxLinesWithId_(self, objValue);
}

void ASAutoCompleteTextViewImpl_setMinLinesWithId_(ASAutoCompleteTextViewImpl *self, id objValue) {
  [((ADAutoCompleteTextView *) nil_chk(self->measurableView_)) setMinLinesWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
  ASAutoCompleteTextViewImpl_addMinMaxListener(self);
}

void ASAutoCompleteTextViewImpl_setMaxHeightWithId_(ASAutoCompleteTextViewImpl *self, id objValue) {
  [((ADAutoCompleteTextView *) nil_chk(self->measurableView_)) setMaxHeightWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
  ASAutoCompleteTextViewImpl_addMinMaxListener(self);
}

void ASAutoCompleteTextViewImpl_setMaxWidthWithId_(ASAutoCompleteTextViewImpl *self, id objValue) {
  [((ADAutoCompleteTextView *) nil_chk(self->measurableView_)) setMaxWidthWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
  ASAutoCompleteTextViewImpl_addMinMaxListener(self);
}

void ASAutoCompleteTextViewImpl_setMinHeightWithId_(ASAutoCompleteTextViewImpl *self, id objValue) {
  [((ADAutoCompleteTextView *) nil_chk(self->measurableView_)) setMinHeightWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
  ASAutoCompleteTextViewImpl_addMinMaxListener(self);
}

void ASAutoCompleteTextViewImpl_setMinWidthWithId_(ASAutoCompleteTextViewImpl *self, id objValue) {
  [((ADAutoCompleteTextView *) nil_chk(self->measurableView_)) setMinWidthWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
  ASAutoCompleteTextViewImpl_addMinMaxListener(self);
}

id ASAutoCompleteTextViewImpl_getWidth(ASAutoCompleteTextViewImpl *self) {
  return JavaLangInteger_valueOfWithInt_([((ADAutoCompleteTextView *) nil_chk(self->measurableView_)) getWidth]);
}

jint ASAutoCompleteTextViewImpl_getHeight(ASAutoCompleteTextViewImpl *self) {
  return [((ADAutoCompleteTextView *) nil_chk(self->measurableView_)) getHeight];
}

void ASAutoCompleteTextViewImpl_setFirstBaselineToTopHeightWithId_(ASAutoCompleteTextViewImpl *self, id objValue) {
  ASFontMetricsDescriptor *fontMetrics = ASPluginInvoker_getFontMetricsWithId_(ASAutoCompleteTextViewImpl_getFont(self));
  jint firstBaselineToTopHeight = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
  jint fontMetricsTop;
  if (ASAutoCompleteTextViewImpl_getIncludeFontPadding(self)) {
    fontMetricsTop = ((ASFontMetricsDescriptor *) nil_chk(fontMetrics))->top_;
  }
  else {
    fontMetricsTop = ((ASFontMetricsDescriptor *) nil_chk(fontMetrics))->ascent_;
  }
  if (firstBaselineToTopHeight > JavaLangMath_absWithInt_(fontMetricsTop)) {
    jint paddingTop = firstBaselineToTopHeight - (-fontMetricsTop);
    [((ADAutoCompleteTextView *) nil_chk(self->measurableView_)) setPaddingWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(ASAutoCompleteTextViewImpl_getPaddingLeft(self), [JavaLangInteger class]))) intValue] withInt:paddingTop withInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(ASAutoCompleteTextViewImpl_getPaddingRight(self), [JavaLangInteger class]))) intValue] withInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(ASAutoCompleteTextViewImpl_getPaddingBottom(self), [JavaLangInteger class]))) intValue]];
  }
}

jboolean ASAutoCompleteTextViewImpl_getIncludeFontPadding(ASAutoCompleteTextViewImpl *self) {
  return false;
}

id ASAutoCompleteTextViewImpl_getFirstBaselineToTopHeight(ASAutoCompleteTextViewImpl *self) {
  ASFontMetricsDescriptor *fontMetrics = ASPluginInvoker_getFontMetricsWithId_(ASAutoCompleteTextViewImpl_getFont(self));
  return JavaLangInteger_valueOfWithInt_([((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(ASAutoCompleteTextViewImpl_getPaddingTop(self), [JavaLangInteger class]))) intValue] - ((ASFontMetricsDescriptor *) nil_chk(fontMetrics))->top_);
}

void ASAutoCompleteTextViewImpl_setLastBaselineToBottomHeightWithId_(ASAutoCompleteTextViewImpl *self, id objValue) {
  ASFontMetricsDescriptor *fontMetrics = ASPluginInvoker_getFontMetricsWithId_(ASAutoCompleteTextViewImpl_getFont(self));
  jint lastBaselineToBottomHeight = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
  jint fontMetricsBottom;
  if (ASAutoCompleteTextViewImpl_getIncludeFontPadding(self)) {
    fontMetricsBottom = ((ASFontMetricsDescriptor *) nil_chk(fontMetrics))->bottom_;
  }
  else {
    fontMetricsBottom = ((ASFontMetricsDescriptor *) nil_chk(fontMetrics))->descent_;
  }
  if (lastBaselineToBottomHeight > JavaLangMath_absWithInt_(fontMetricsBottom)) {
    jint paddingBottom = lastBaselineToBottomHeight - fontMetricsBottom;
    [((ADAutoCompleteTextView *) nil_chk(self->measurableView_)) setPaddingWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(ASAutoCompleteTextViewImpl_getPaddingLeft(self), [JavaLangInteger class]))) intValue] withInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(ASAutoCompleteTextViewImpl_getPaddingTop(self), [JavaLangInteger class]))) intValue] withInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(ASAutoCompleteTextViewImpl_getPaddingRight(self), [JavaLangInteger class]))) intValue] withInt:paddingBottom];
  }
}

id ASAutoCompleteTextViewImpl_getLastBaselineToBottomHeight(ASAutoCompleteTextViewImpl *self) {
  ASFontMetricsDescriptor *fontMetrics = ASPluginInvoker_getFontMetricsWithId_(ASAutoCompleteTextViewImpl_getFont(self));
  return JavaLangInteger_valueOfWithInt_([((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(ASAutoCompleteTextViewImpl_getPaddingBottom(self), [JavaLangInteger class]))) intValue] + ((ASFontMetricsDescriptor *) nil_chk(fontMetrics))->bottom_);
}

void ASAutoCompleteTextViewImpl_initHtmlWithJavaUtilMap_(ASAutoCompleteTextViewImpl *self, id<JavaUtilMap> params) {
  if ([((id<JavaUtilMap>) nil_chk(params)) containsKeyWithId:@"html"]) {
    self->html_ = [nil_chk([params getWithId:@"html"]) isEqual:@"true"];
    if (self->html_) {
      self->htmlConfig_ = new_JavaUtilHashMap_init();
    }
    else {
      if (self->escapeHtml_) {
        [self applyAttributeCommandWithNSString:@"text" withNSString:ASCommonConverters_command_escapehtml withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){  } count:0 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithLength:0 type:NSObject_class_()]];
      }
    }
  }
}

NSString *ASAutoCompleteTextViewImpl_getDigitString(ASAutoCompleteTextViewImpl *self) {
  NSString *defaultDigits = @"0123456789";
  IOSObjectArray *digits = ASAutoCompleteTextViewImpl_getDigitStrings(self);
  JavaLangStringBuilder *stringBuilder = new_JavaLangStringBuilder_init();
  for (jint i = 0; i < 10; i++) {
    if ([((NSString *) nil_chk(IOSObjectArray_Get(nil_chk(digits), i))) java_length] > 1) {
      return defaultDigits;
    }
    (void) [stringBuilder appendWithId:JavaLangCharacter_valueOfWithChar_([((NSString *) nil_chk(IOSObjectArray_Get(digits, i))) charAtWithInt:0])];
  }
  return [stringBuilder description];
}

NSString *ASAutoCompleteTextViewImpl_getSignedChars(ASAutoCompleteTextViewImpl *self) {
  NSString *defaultSignedChars = @"\\+\\-";
  NSString *minusString = ASAutoCompleteTextViewImpl_getMinusString(self);
  NSString *plusString = ASAutoCompleteTextViewImpl_getPlusString(self);
  if ([((NSString *) nil_chk(minusString)) java_length] > 1 || [((NSString *) nil_chk(plusString)) java_length] > 1) {
    return defaultSignedChars;
  }
  NSString *minus = minusString;
  NSString *plus = plusString;
  if ([((id<JavaUtilList>) nil_chk(ASAutoCompleteTextViewImpl_regexSpecialCharacters)) containsWithId:minus]) {
    minus = JreStrcat("C$", '\\', minus);
  }
  if ([((id<JavaUtilList>) nil_chk(ASAutoCompleteTextViewImpl_regexSpecialCharacters)) containsWithId:plus]) {
    plus = JreStrcat("C$", '\\', plus);
  }
  return JreStrcat("$$", plus, minus);
}

NSString *ASAutoCompleteTextViewImpl_getDecimalChars(ASAutoCompleteTextViewImpl *self) {
  NSString *defaultDecimalChars = @"\\.";
  NSString *separatorString = ASAutoCompleteTextViewImpl_getDecimalCharacter(self);
  if ([((NSString *) nil_chk(separatorString)) java_length] > 1) {
    return defaultDecimalChars;
  }
  NSString *decimal = separatorString;
  if ([((id<JavaUtilList>) nil_chk(ASAutoCompleteTextViewImpl_regexSpecialCharacters)) containsWithId:decimal]) {
    decimal = JreStrcat("C$", '\\', decimal);
  }
  return decimal;
}

void ASAutoCompleteTextViewImpl_setNumericWithId_(ASAutoCompleteTextViewImpl *self, id objValue) {
  jint value = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
  ASAutoCompleteTextViewImpl_removeNumericListener(self);
  JavaLangStringBuilder *regex = new_JavaLangStringBuilder_init();
  NSString *digits = ASAutoCompleteTextViewImpl_getDigitString(self);
  if ((value & (jint) 0x3) != 1) {
    NSString *signedChars = ASAutoCompleteTextViewImpl_getSignedChars(self);
    (void) [regex appendWithNSString:NSString_java_formatWithNSString_withNSObjectArray_(@"[%s]?", [IOSObjectArray newArrayWithObjects:(id[]){ signedChars } count:1 type:NSObject_class_()])];
  }
  if ((value & (jint) 0x5) != 1) {
    NSString *decimalChars = ASAutoCompleteTextViewImpl_getDecimalChars(self);
    (void) [regex appendWithNSString:NSString_java_formatWithNSString_withNSObjectArray_(@"[%s]*[%s]?[%s]*", [IOSObjectArray newArrayWithObjects:(id[]){ digits, decimalChars, digits } count:3 type:NSObject_class_()])];
  }
  else {
    (void) [regex appendWithNSString:NSString_java_formatWithNSString_withNSObjectArray_(@"[%s]*", [IOSObjectArray newArrayWithObjects:(id[]){ digits } count:1 type:NSObject_class_()])];
  }
  if ([regex java_length] > 0) {
    JavaUtilRegexPattern *pattern = JavaUtilRegexPattern_compileWithNSString_([regex description]);
    ASAutoCompleteTextViewImpl_addNumericListenerWithJavaUtilRegexPattern_(self, pattern);
  }
}

void ASAutoCompleteTextViewImpl_setDigitsWithId_(ASAutoCompleteTextViewImpl *self, id objValue) {
  ASAutoCompleteTextViewImpl_removeNumericListener(self);
  JavaLangStringBuilder *regex = new_JavaLangStringBuilder_init();
  NSString *digits = (NSString *) cast_chk(objValue, [NSString class]);
  (void) [regex appendWithNSString:NSString_java_formatWithNSString_withNSObjectArray_(@"[%s]*", [IOSObjectArray newArrayWithObjects:(id[]){ digits } count:1 type:NSObject_class_()])];
  if ([regex java_length] > 0) {
    JavaUtilRegexPattern *pattern = JavaUtilRegexPattern_compileWithNSString_([regex description]);
    ASAutoCompleteTextViewImpl_addNumericListenerWithJavaUtilRegexPattern_(self, pattern);
  }
}

jint ASAutoCompleteTextViewImpl_nativeGetFontSize(ASAutoCompleteTextViewImpl *self) {
  return JreFpToInt(JavaLangMath_ceilWithDouble_([((JavaLangFloat *) nil_chk((JavaLangFloat *) cast_chk(ASAutoCompleteTextViewImpl_getTextSize(self), [JavaLangFloat class]))) floatValue]));
}

jint ASAutoCompleteTextViewImpl_nativeGetFontStyle(ASAutoCompleteTextViewImpl *self) {
  ASUITextField* label = ((ASUITextField*)self->uiView_);
  return label.font.fontDescriptor.symbolicTraits;
}

void ASAutoCompleteTextViewImpl_nativeSetCustomFontWithInt_withASFontDescriptor_(ASAutoCompleteTextViewImpl *self, jint height, ASFontDescriptor *fontDescriptor) {
  ASUITextField* label = ((ASUITextField*)self->uiView_);
  UIFont* font = [UIFont fontWithName:[fontDescriptor getName] size:height];
  if (font == nil) {
    [NSException raise:@"InitNotImplemented" format:@"%@", [NSString stringWithFormat:@"Failed to load the %@ font. Make sure the font file is included in the project and the font name is spelled correctly.", [fontDescriptor getName]]];
  }
  if ([fontDescriptor getStyle] != 0) {
    UIFontDescriptor* fontD = [font.fontDescriptor fontDescriptorWithSymbolicTraits:[fontDescriptor getStyle]];
    ((ASUITextField*)label).font = [UIFont fontWithDescriptor:fontD size:0];
  } else {
    ((ASUITextField*)label).font = font;
  }
}

void ASAutoCompleteTextViewImpl_nativeSetFontStyleWithInt_(ASAutoCompleteTextViewImpl *self, jint style) {
  ASUITextField* label = ((ASUITextField*)self->uiView_);
  UIFontDescriptor* fontD = [label.font.fontDescriptor fontDescriptorWithSymbolicTraits:style];
  ((ASUITextField*)label).font = [UIFont fontWithDescriptor:fontD size:0];
}

id ASAutoCompleteTextViewImpl_getPaddingTop(ASAutoCompleteTextViewImpl *self) {
  return JavaLangInteger_valueOfWithInt_([((ADView *) nil_chk(((ADView *) cast_chk([self asWidget], [ADView class])))) getPaddingTop]);
}

id ASAutoCompleteTextViewImpl_getPaddingEnd(ASAutoCompleteTextViewImpl *self) {
  return JavaLangInteger_valueOfWithInt_([((ADView *) nil_chk(((ADView *) cast_chk([self asWidget], [ADView class])))) getPaddingEnd]);
}

id ASAutoCompleteTextViewImpl_getPaddingStart(ASAutoCompleteTextViewImpl *self) {
  return JavaLangInteger_valueOfWithInt_([((ADView *) nil_chk(((ADView *) cast_chk([self asWidget], [ADView class])))) getPaddingStart]);
}

id ASAutoCompleteTextViewImpl_getPaddingLeft(ASAutoCompleteTextViewImpl *self) {
  return JavaLangInteger_valueOfWithInt_([((ADView *) nil_chk(((ADView *) cast_chk([self asWidget], [ADView class])))) getPaddingLeft]);
}

id ASAutoCompleteTextViewImpl_getPaddingRight(ASAutoCompleteTextViewImpl *self) {
  return JavaLangInteger_valueOfWithInt_([((ADView *) nil_chk(((ADView *) cast_chk([self asWidget], [ADView class])))) getPaddingRight]);
}

id ASAutoCompleteTextViewImpl_getPaddingBottom(ASAutoCompleteTextViewImpl *self) {
  return JavaLangInteger_valueOfWithInt_([((ADView *) nil_chk(((ADView *) cast_chk([self asWidget], [ADView class])))) getPaddingBottom]);
}

void ASAutoCompleteTextViewImpl_setPaddingVerticalWithId_(ASAutoCompleteTextViewImpl *self, id objValue) {
  [self setPaddingTopWithId:objValue];
  [self setPaddingBottomWithId:objValue];
}

void ASAutoCompleteTextViewImpl_setPaddingHorizontalWithId_(ASAutoCompleteTextViewImpl *self, id objValue) {
  [self setPaddingLeftWithId:objValue];
  [self setPaddingRightWithId:objValue];
}

void ASAutoCompleteTextViewImpl_setPaddingEndWithId_(ASAutoCompleteTextViewImpl *self, id objValue) {
  [self setPaddingRightWithId:objValue];
}

void ASAutoCompleteTextViewImpl_setPaddingStartWithId_(ASAutoCompleteTextViewImpl *self, id objValue) {
  [self setPaddingLeftWithId:objValue];
}

void ASAutoCompleteTextViewImpl_handleHtmlTextWithNSString_(ASAutoCompleteTextViewImpl *self, NSString *text) {
  ASAutoCompleteTextViewImpl_nativeSetHtmlTextWithId_(self, [((id<ASAttributedString>) nil_chk(ASHtml_fromHtmlWithNSString_withJavaUtilMap_withASIFragment_(text, self->htmlConfig_, self->fragment_))) get]);
}

void ASAutoCompleteTextViewImpl_nativeSetTextWithNSString_(ASAutoCompleteTextViewImpl *self, NSString *text) {
  [((ASUITextField*)self->uiView_) setText:text];
}

void ASAutoCompleteTextViewImpl_nativeSetHtmlTextWithId_(ASAutoCompleteTextViewImpl *self, id text) {
  [((ASUITextField*)self->uiView_) setAttributedText : (NSMutableAttributedString*)text];
}

id ASAutoCompleteTextViewImpl_getMyText(ASAutoCompleteTextViewImpl *self) {
  return ((ASUITextField*)self.uiView).text;
}

id ASAutoCompleteTextViewImpl_getTextSize(ASAutoCompleteTextViewImpl *self) {
  return [JavaLangFloat valueOfWithFloat:((ASUITextField*)self.uiView).font.pointSize];
}

void ASAutoCompleteTextViewImpl_setMyTextSizeWithId_(ASAutoCompleteTextViewImpl *self, id objValue) {
  jfloat fontSize = [((JavaLangFloat *) nil_chk(((JavaLangFloat *) cast_chk(objValue, [JavaLangFloat class])))) floatValue] * [((id<ASIActivity>) nil_chk([((id<ASIFragment>) nil_chk([self getFragment])) getRootActivity])) getScaleFactor];
  ASAutoCompleteTextViewImpl_nativeSetTextSizeWithInt_(self, JreFpToInt(fontSize));
}

void ASAutoCompleteTextViewImpl_nativeSetTextSizeWithInt_(ASAutoCompleteTextViewImpl *self, jint value) {
  [((ASUITextField*)self.uiView) setFont: [((ASUITextField*)self.uiView).font fontWithSize: value]];
}

void ASAutoCompleteTextViewImpl_setVerticalAligmentCenter(ASAutoCompleteTextViewImpl *self) {
  [((ADAutoCompleteTextView *) nil_chk(self->measurableView_)) setVerticalAligmentWithASBaseMeasurableView_VerticalAligment:JreLoadEnum(ASBaseMeasurableView_VerticalAligment, middle)];
  ASAutoCompleteTextViewImpl_nativeSetVerticalAligmentCenter(self);
}

void ASAutoCompleteTextViewImpl_setVerticalAligmentBottom(ASAutoCompleteTextViewImpl *self) {
  [((ADAutoCompleteTextView *) nil_chk(self->measurableView_)) setVerticalAligmentWithASBaseMeasurableView_VerticalAligment:JreLoadEnum(ASBaseMeasurableView_VerticalAligment, bottom)];
  ASAutoCompleteTextViewImpl_nativeSetVerticalAligmentBottom(self);
}

void ASAutoCompleteTextViewImpl_setVerticalAligmentTop(ASAutoCompleteTextViewImpl *self) {
  [((ADAutoCompleteTextView *) nil_chk(self->measurableView_)) setVerticalAligmentWithASBaseMeasurableView_VerticalAligment:JreLoadEnum(ASBaseMeasurableView_VerticalAligment, top)];
  ASAutoCompleteTextViewImpl_nativeSetVerticalAligmentTop(self);
}

void ASAutoCompleteTextViewImpl_setHorizontalAligmentCenter(ASAutoCompleteTextViewImpl *self) {
  ((ASUITextField*)self.uiView).textAlignment = NSTextAlignmentCenter;
}

void ASAutoCompleteTextViewImpl_setHorizontalAligmentRight(ASAutoCompleteTextViewImpl *self) {
  ASAutoCompleteTextViewImpl_setHorizontalAligmentRightInternal(self);
}

void ASAutoCompleteTextViewImpl_setHorizontalAligmentRightInternal(ASAutoCompleteTextViewImpl *self) {
  ((ASUITextField*)self.uiView).textAlignment = NSTextAlignmentRight;
}

void ASAutoCompleteTextViewImpl_setHorizontalAligmentLeft(ASAutoCompleteTextViewImpl *self) {
  ASAutoCompleteTextViewImpl_setHorizontalAligmentLeftInternal(self);
}

void ASAutoCompleteTextViewImpl_setHorizontalAligmentLeftInternal(ASAutoCompleteTextViewImpl *self) {
  ((ASUITextField*)self.uiView).textAlignment = NSTextAlignmentLeft;
}

jint ASAutoCompleteTextViewImpl_getTextAlignment(ASAutoCompleteTextViewImpl *self) {
  int alignment = (int) ((ASUITextField*)self.uiView).textAlignment;
  
  if (alignment == NSTextAlignmentCenter) {
    return 2;
  }
  
  if (alignment == NSTextAlignmentLeft) {
    return 0;
  }
  
  if (alignment == NSTextAlignmentRight) {
    return 1;
  }
  
  return 0;
}

void ASAutoCompleteTextViewImpl_setDrawablePaddingWithId_(ASAutoCompleteTextViewImpl *self, id objValue) {
  [((ADAutoCompleteTextView *) nil_chk(self->measurableView_)) setDrawablePaddingWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
  ASAutoCompleteTextViewImpl_updatePadding(self);
}

void ASAutoCompleteTextViewImpl_setDrawableBottomWithId_(ASAutoCompleteTextViewImpl *self, id objValue) {
  if ([@"@null" isEqual:objValue]) {
    [((ADAutoCompleteTextView *) nil_chk(self->measurableView_)) setBottomDrawableWithADDrawable:nil];
    [self applyAttributeCommandWithNSString:@"drawableBottom" withNSString:@"drawDrawableIcon" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){  } count:0 type:NSString_class_()] withBoolean:false withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"bottom" } count:1 type:NSObject_class_()]];
  }
  else if (objValue != nil && [objValue isKindOfClass:[ADDrawable class]]) {
    [((ADAutoCompleteTextView *) nil_chk(self->measurableView_)) setBottomDrawableWithADDrawable:(ADDrawable *) cast_chk(objValue, [ADDrawable class])];
    [self applyAttributeCommandWithNSString:@"drawableBottom" withNSString:@"drawDrawableIcon" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){  } count:0 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"bottom" } count:1 type:NSObject_class_()]];
    ASAutoCompleteTextViewImpl_updatePadding(self);
  }
}

void ASAutoCompleteTextViewImpl_setDrawableTopWithId_(ASAutoCompleteTextViewImpl *self, id objValue) {
  if ([@"@null" isEqual:objValue]) {
    [((ADAutoCompleteTextView *) nil_chk(self->measurableView_)) setTopDrawableWithADDrawable:nil];
    [self applyAttributeCommandWithNSString:@"drawableTop" withNSString:@"drawDrawableIcon" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){  } count:0 type:NSString_class_()] withBoolean:false withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"top" } count:1 type:NSObject_class_()]];
  }
  else if (objValue != nil && [objValue isKindOfClass:[ADDrawable class]]) {
    [((ADAutoCompleteTextView *) nil_chk(self->measurableView_)) setTopDrawableWithADDrawable:(ADDrawable *) cast_chk(objValue, [ADDrawable class])];
    [self applyAttributeCommandWithNSString:@"drawableTop" withNSString:@"drawDrawableIcon" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){  } count:0 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"top" } count:1 type:NSObject_class_()]];
    ASAutoCompleteTextViewImpl_updatePadding(self);
  }
}

void ASAutoCompleteTextViewImpl_setDrawableRightWithNSString_withId_(ASAutoCompleteTextViewImpl *self, NSString *originalAttr, id objValue) {
  if (ASViewImpl_isRTLLayoutWithASIWidget_(self)) {
    ASAutoCompleteTextViewImpl_setDrawableLeftInternalWithNSString_withId_(self, originalAttr, objValue);
  }
  else {
    ASAutoCompleteTextViewImpl_setDrawableRightInternalWithNSString_withId_(self, originalAttr, objValue);
  }
}

void ASAutoCompleteTextViewImpl_setDrawableRightInternalWithNSString_withId_(ASAutoCompleteTextViewImpl *self, NSString *originalAttr, id objValue) {
  if ([@"@null" isEqual:objValue]) {
    [((ADAutoCompleteTextView *) nil_chk(self->measurableView_)) setRightDrawableWithADDrawable:nil];
    [self applyAttributeCommandWithNSString:originalAttr withNSString:@"drawDrawableIcon" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){  } count:0 type:NSString_class_()] withBoolean:false withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"right" } count:1 type:NSObject_class_()]];
  }
  else if (objValue != nil && [objValue isKindOfClass:[ADDrawable class]]) {
    [((ADAutoCompleteTextView *) nil_chk(self->measurableView_)) setRightDrawableWithADDrawable:(ADDrawable *) cast_chk(objValue, [ADDrawable class])];
    [self applyAttributeCommandWithNSString:originalAttr withNSString:@"drawDrawableIcon" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){  } count:0 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"right" } count:1 type:NSObject_class_()]];
    ASAutoCompleteTextViewImpl_updatePadding(self);
  }
}

void ASAutoCompleteTextViewImpl_setDrawableLeftWithNSString_withId_(ASAutoCompleteTextViewImpl *self, NSString *originalAttr, id objValue) {
  if (objValue != nil) {
    if (ASViewImpl_isRTLLayoutWithASIWidget_(self)) {
      ASAutoCompleteTextViewImpl_setDrawableRightInternalWithNSString_withId_(self, originalAttr, objValue);
    }
    else {
      ASAutoCompleteTextViewImpl_setDrawableLeftInternalWithNSString_withId_(self, originalAttr, objValue);
    }
  }
}

void ASAutoCompleteTextViewImpl_setDrawableLeftInternalWithNSString_withId_(ASAutoCompleteTextViewImpl *self, NSString *originalAttr, id objValue) {
  if ([@"@null" isEqual:objValue]) {
    [((ADAutoCompleteTextView *) nil_chk(self->measurableView_)) setLeftDrawableWithADDrawable:nil];
    [self applyAttributeCommandWithNSString:originalAttr withNSString:@"drawDrawableIcon" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){  } count:0 type:NSString_class_()] withBoolean:false withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"left" } count:1 type:NSObject_class_()]];
  }
  else if (objValue != nil && [objValue isKindOfClass:[ADDrawable class]]) {
    [((ADAutoCompleteTextView *) nil_chk(self->measurableView_)) setLeftDrawableWithADDrawable:(ADDrawable *) cast_chk(objValue, [ADDrawable class])];
    [self applyAttributeCommandWithNSString:originalAttr withNSString:@"drawDrawableIcon" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){  } count:0 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"left" } count:1 type:NSObject_class_()]];
    ASAutoCompleteTextViewImpl_updatePadding(self);
  }
}

jint ASAutoCompleteTextViewImpl_getImageHeightWithId_(ASAutoCompleteTextViewImpl *self, id objValue) {
  if ([objValue isKindOfClass:[UIImage class]]) {
    UIImage* image = ((UIImage*) objValue);
    return image.size.height;
  }
  
  return 0;
}

jint ASAutoCompleteTextViewImpl_getImageWidthWithId_(ASAutoCompleteTextViewImpl *self, id objValue) {
  if ([objValue isKindOfClass:[UIImage class]]) {
    UIImage* image = ((UIImage*) objValue);
    return image.size.width;
  }
  
  return 0;
}

id ASAutoCompleteTextViewImpl_getDrawablePadding(ASAutoCompleteTextViewImpl *self) {
  return JavaLangInteger_valueOfWithInt_([((ADAutoCompleteTextView *) nil_chk(self->measurableView_)) getDrawablePadding]);
}

void ASAutoCompleteTextViewImpl_setDrawableTintModeWithId_(ASAutoCompleteTextViewImpl *self, id value) {
  if ([((ADAutoCompleteTextView *) nil_chk(self->measurableView_)) getLeftDrawable] != nil) {
    [self applyAttributeCommandWithNSString:@"drawableStart" withNSString:@"cgTintColor" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTintMode" } count:1 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTintMode", value } count:2 type:NSObject_class_()]];
    [self applyAttributeCommandWithNSString:@"drawableLeft" withNSString:@"cgTintColor" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTintMode" } count:1 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTintMode", value } count:2 type:NSObject_class_()]];
  }
  if ([((ADAutoCompleteTextView *) nil_chk(self->measurableView_)) getRightDrawable] != nil) {
    [self applyAttributeCommandWithNSString:@"drawableRight" withNSString:@"cgTintColor" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTintMode" } count:1 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTintMode", value } count:2 type:NSObject_class_()]];
    [self applyAttributeCommandWithNSString:@"drawableEnd" withNSString:@"cgTintColor" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTintMode" } count:1 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTintMode", value } count:2 type:NSObject_class_()]];
  }
  if ([((ADAutoCompleteTextView *) nil_chk(self->measurableView_)) getTopDrawable] != nil) {
    [self applyAttributeCommandWithNSString:@"drawableTop" withNSString:@"cgTintColor" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTintMode" } count:1 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTintMode", value } count:2 type:NSObject_class_()]];
  }
  if ([((ADAutoCompleteTextView *) nil_chk(self->measurableView_)) getBottomDrawable] != nil) {
    [self applyAttributeCommandWithNSString:@"drawableBottom" withNSString:@"cgTintColor" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTintMode" } count:1 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTintMode", value } count:2 type:NSObject_class_()]];
  }
}

void ASAutoCompleteTextViewImpl_setDrawableTintWithId_(ASAutoCompleteTextViewImpl *self, id objValue) {
  if ([objValue isKindOfClass:[ADColorStateList class]]) {
    ADColorStateList *colorStateList = (ADColorStateList *) objValue;
    self->drawableTint_ = colorStateList;
    objValue = JavaLangInteger_valueOfWithInt_([((ADColorStateList *) nil_chk(self->drawableTint_)) getColorForStateWithIntArray:[((ADAutoCompleteTextView *) nil_chk(self->measurableView_)) getDrawableState] withInt:ADColor_RED]);
  }
  if ([((ADAutoCompleteTextView *) nil_chk(self->measurableView_)) getLeftDrawable] != nil) {
    [self applyAttributeCommandWithNSString:@"drawableLeft" withNSString:@"cgTintColor" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTint" } count:1 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTint", ASViewImpl_getColorWithId_(objValue) } count:2 type:NSObject_class_()]];
    [self applyAttributeCommandWithNSString:@"drawableStart" withNSString:@"cgTintColor" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTint" } count:1 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTint", ASViewImpl_getColorWithId_(objValue) } count:2 type:NSObject_class_()]];
  }
  if ([((ADAutoCompleteTextView *) nil_chk(self->measurableView_)) getRightDrawable] != nil) {
    [self applyAttributeCommandWithNSString:@"drawableRight" withNSString:@"cgTintColor" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTint" } count:1 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTint", ASViewImpl_getColorWithId_(objValue) } count:2 type:NSObject_class_()]];
    [self applyAttributeCommandWithNSString:@"drawableEnd" withNSString:@"cgTintColor" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTint" } count:1 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTint", ASViewImpl_getColorWithId_(objValue) } count:2 type:NSObject_class_()]];
  }
  if ([((ADAutoCompleteTextView *) nil_chk(self->measurableView_)) getTopDrawable] != nil) {
    [self applyAttributeCommandWithNSString:@"drawableTop" withNSString:@"cgTintColor" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTint" } count:1 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTint", ASViewImpl_getColorWithId_(objValue) } count:2 type:NSObject_class_()]];
  }
  if ([((ADAutoCompleteTextView *) nil_chk(self->measurableView_)) getBottomDrawable] != nil) {
    [self applyAttributeCommandWithNSString:@"drawableBottom" withNSString:@"cgTintColor" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTint" } count:1 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTint", ASViewImpl_getColorWithId_(objValue) } count:2 type:NSObject_class_()]];
  }
}

void ASAutoCompleteTextViewImpl_setTextColorWithId_(ASAutoCompleteTextViewImpl *self, id objValue) {
  if ([objValue isKindOfClass:[ADColorStateList class]]) {
    ADColorStateList *colorStateList = (ADColorStateList *) objValue;
    [((ADAutoCompleteTextView *) nil_chk(self->measurableView_)) setTextColorWithADColorStateList:colorStateList];
    objValue = JavaLangInteger_valueOfWithInt_([((ADAutoCompleteTextView *) nil_chk(self->measurableView_)) getCurrentTextColor]);
  }
  [self setTextColorWithId:self->uiView_ withId:ASViewImpl_getColorWithId_(objValue)];
}

id ASAutoCompleteTextViewImpl_getTextColorState(ASAutoCompleteTextViewImpl *self) {
  return [((ADAutoCompleteTextView *) nil_chk(self->measurableView_)) getTextColors];
}

void ASAutoCompleteTextViewImpl_drawableStateChangeWithNSString_withADDrawable_(ASAutoCompleteTextViewImpl *self, NSString *type, ADDrawable *dr) {
  IOSIntArray *state = [((ADAutoCompleteTextView *) nil_chk(self->measurableView_)) getDrawableState];
  if (dr != nil && [dr isStateful] && [dr setStateWithIntArray:state]) {
    switch (JreIndexOfStr(type, (id[]){ @"bottom", @"top", @"left", @"right" }, 4)) {
      case 0:
      ASAutoCompleteTextViewImpl_setDrawableBottomWithId_(self, dr);
      break;
      case 1:
      ASAutoCompleteTextViewImpl_setDrawableTopWithId_(self, dr);
      break;
      case 2:
      ASAutoCompleteTextViewImpl_setDrawableLeftWithNSString_withId_(self, @"drawableLeft", dr);
      break;
      case 3:
      ASAutoCompleteTextViewImpl_setDrawableRightWithNSString_withId_(self, @"drawableRight", dr);
      break;
      default:
      break;
    }
  }
  [self invalidate];
}

jint ASAutoCompleteTextViewImpl_getLineHeight(ASAutoCompleteTextViewImpl *self) {
  return ceil(((ASUITextField*)self.uiView).font.lineHeight);
}

jint ASAutoCompleteTextViewImpl_getBorderWidth(ASAutoCompleteTextViewImpl *self) {
  return 0;
}

void ASAutoCompleteTextViewImpl_setTextColorHighlightWithId_(ASAutoCompleteTextViewImpl *self, id objValue) {
  ASViewImpl_setTintColorWithId_withId_(self->uiView_, objValue);
}

id ASAutoCompleteTextViewImpl_getTextColorHighlight(ASAutoCompleteTextViewImpl *self) {
  return ASViewImpl_getTintColorWithId_(self->uiView_);
}

void ASAutoCompleteTextViewImpl_createSimpleWrapableView(ASAutoCompleteTextViewImpl *self) {
  jboolean wrapViewFeature = [self hasFeatureWithNSString:@"enableFeatures" withNSString:@"decorator"];
  jint viewType = -1;
  if (wrapViewFeature) {
    jboolean hscroll = [self hasFeatureWithNSString:@"enableFeatures" withNSString:@"hscroll"];
    jboolean vscroll = [self hasFeatureWithNSString:@"enableFeatures" withNSString:@"vscroll"];
    viewType = 1;
    if (hscroll) viewType = 2;
    if (vscroll) viewType = 3;
  }
  self->simpleWrapableView_ = new_ASSimpleWrapableView_initWithASIWidget_withInt_(self, viewType);
}

jboolean ASAutoCompleteTextViewImpl_hasScrollView(ASAutoCompleteTextViewImpl *self) {
  return ASAutoCompleteTextViewImpl_isViewWrapped(self) && ([((ASSimpleWrapableView *) nil_chk(self->simpleWrapableView_)) getViewtype] == 2 || [((ASSimpleWrapableView *) nil_chk(self->simpleWrapableView_)) getViewtype] == 3);
}

jboolean ASAutoCompleteTextViewImpl_isViewWrapped(ASAutoCompleteTextViewImpl *self) {
  return [((ASSimpleWrapableView *) nil_chk(self->simpleWrapableView_)) isViewWrapped];
}

void ASAutoCompleteTextViewImpl_setForegroundFrameWithInt_withInt_withInt_withInt_(ASAutoCompleteTextViewImpl *self, jint l, jint t, jint r, jint b) {
  id foreground = [((ASSimpleWrapableView *) nil_chk(self->simpleWrapableView_)) getForeground];
  if (foreground != nil) {
    ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_(foreground, 0, 0, r - l, b - t);
  }
}

void ASAutoCompleteTextViewImpl_invalidateWrapViewHolder(ASAutoCompleteTextViewImpl *self) {
  if (ASAutoCompleteTextViewImpl_isViewWrapped(self)) {
    ASViewImpl_nativeInvalidateWithId_([((ASSimpleWrapableView *) nil_chk(self->simpleWrapableView_)) getWrapperViewHolder]);
  }
}

id ASAutoCompleteTextViewImpl_getScrollView(ASAutoCompleteTextViewImpl *self) {
  UIView* uiview = (UIView*)[self->simpleWrapableView_ getWrapperViewHolder];
  return uiview.subviews[0];
}

void ASAutoCompleteTextViewImpl_initPopUp(ASAutoCompleteTextViewImpl *self) {
  ASAutoCompleteTextViewImpl_nativeAddTextFieldDidChangeForPopup(self);
}

void ASAutoCompleteTextViewImpl_nativeAddTextFieldDidChangeForPopup(ASAutoCompleteTextViewImpl *self) {
  [((ASUITextField*)self.uiView) addTarget:self action:@selector(textFieldDidChangeForPopup:) forControlEvents:UIControlEventEditingChanged];
}

void ASAutoCompleteTextViewImpl_movePopUpContainerToTop(ASAutoCompleteTextViewImpl *self) {
}

void ASAutoCompleteTextViewImpl_showHidePopup(ASAutoCompleteTextViewImpl *self) {
  ASAutoCompleteTextViewImpl_beforetextChangeWithNSString_withInt_withInt_(self, @"", 0, 0);
  ASAutoCompleteTextViewImpl_afterTextChanged(self);
}

jboolean ASAutoCompleteTextViewImpl_islinearlayout(ASAutoCompleteTextViewImpl *self) {
  return false;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASAutoCompleteTextViewImpl)

@implementation ASAutoCompleteTextViewImpl_DrawableTintMode

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASAutoCompleteTextViewImpl_DrawableTintMode_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilMap>)getMapping {
  return mapping_;
}

- (JavaLangInteger *)getDefault {
  return JavaLangInteger_valueOfWithInt_(0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMapping);
  methods[2].selector = @selector(getDefault);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapping_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "LASAutoCompleteTextViewImpl;" };
  static const J2ObjcClassInfo _ASAutoCompleteTextViewImpl_DrawableTintMode = { "DrawableTintMode", "com.ashera.layout", ptrTable, methods, fields, 7, 0x18, 3, 1, 2, -1, -1, -1, -1 };
  return &_ASAutoCompleteTextViewImpl_DrawableTintMode;
}

@end

void ASAutoCompleteTextViewImpl_DrawableTintMode_init(ASAutoCompleteTextViewImpl_DrawableTintMode *self) {
  ASAbstractEnumToIntConverter_init(self);
  self->mapping_ = new_JavaUtilHashMap_init();
  {
    (void) [self->mapping_ putWithId:@"add" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, kCGBlendModeOverlay))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"multiply" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, kCGBlendModeMultiply))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"screen" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, kCGBlendModeScreen))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"src_atop" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, kCGBlendModeSourceAtop))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"src_in" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, kCGBlendModeSourceIn))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"src_over" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, kCGBlendModeNormal))];
  }
}

ASAutoCompleteTextViewImpl_DrawableTintMode *new_ASAutoCompleteTextViewImpl_DrawableTintMode_init() {
  J2OBJC_NEW_IMPL(ASAutoCompleteTextViewImpl_DrawableTintMode, init)
}

ASAutoCompleteTextViewImpl_DrawableTintMode *create_ASAutoCompleteTextViewImpl_DrawableTintMode_init() {
  J2OBJC_CREATE_IMPL(ASAutoCompleteTextViewImpl_DrawableTintMode, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASAutoCompleteTextViewImpl_DrawableTintMode)

@implementation ASAutoCompleteTextViewImpl_Font

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASAutoCompleteTextViewImpl_Font_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilMap>)getMapping {
  return mapping_;
}

- (JavaLangInteger *)getDefault {
  return JavaLangInteger_valueOfWithInt_(0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMapping);
  methods[2].selector = @selector(getDefault);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapping_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "LASAutoCompleteTextViewImpl;" };
  static const J2ObjcClassInfo _ASAutoCompleteTextViewImpl_Font = { "Font", "com.ashera.layout", ptrTable, methods, fields, 7, 0x18, 3, 1, 2, -1, -1, -1, -1 };
  return &_ASAutoCompleteTextViewImpl_Font;
}

@end

void ASAutoCompleteTextViewImpl_Font_init(ASAutoCompleteTextViewImpl_Font *self) {
  ASAbstractEnumToIntConverter_init(self);
  self->mapping_ = new_JavaUtilHashMap_init();
  {
    (void) [self->mapping_ putWithId:@"monospace" withId:JavaLangInteger_valueOfWithInt_((jint) 0x3)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"normal" withId:JavaLangInteger_valueOfWithInt_((jint) 0x0)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"sans" withId:JavaLangInteger_valueOfWithInt_((jint) 0x1)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"serif" withId:JavaLangInteger_valueOfWithInt_((jint) 0x2)];
  }
}

ASAutoCompleteTextViewImpl_Font *new_ASAutoCompleteTextViewImpl_Font_init() {
  J2OBJC_NEW_IMPL(ASAutoCompleteTextViewImpl_Font, init)
}

ASAutoCompleteTextViewImpl_Font *create_ASAutoCompleteTextViewImpl_Font_init() {
  J2OBJC_CREATE_IMPL(ASAutoCompleteTextViewImpl_Font, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASAutoCompleteTextViewImpl_Font)

@implementation ASAutoCompleteTextViewImpl_TextStyle

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASAutoCompleteTextViewImpl_TextStyle_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilMap>)getMapping {
  return mapping_;
}

- (JavaLangInteger *)getDefault {
  return JavaLangInteger_valueOfWithInt_(0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMapping);
  methods[2].selector = @selector(getDefault);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapping_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "LASAutoCompleteTextViewImpl;" };
  static const J2ObjcClassInfo _ASAutoCompleteTextViewImpl_TextStyle = { "TextStyle", "com.ashera.layout", ptrTable, methods, fields, 7, 0x18, 3, 1, 2, -1, -1, -1, -1 };
  return &_ASAutoCompleteTextViewImpl_TextStyle;
}

@end

void ASAutoCompleteTextViewImpl_TextStyle_init(ASAutoCompleteTextViewImpl_TextStyle *self) {
  ASAbstractBitFlagConverter_init(self);
  self->mapping_ = new_JavaUtilHashMap_init();
  {
    (void) [self->mapping_ putWithId:@"bold" withId:JavaLangInteger_valueOfWithInt_((jint) 0x1)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"italic" withId:JavaLangInteger_valueOfWithInt_((jint) 0x2)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"normal" withId:JavaLangInteger_valueOfWithInt_((jint) 0x0)];
  }
}

ASAutoCompleteTextViewImpl_TextStyle *new_ASAutoCompleteTextViewImpl_TextStyle_init() {
  J2OBJC_NEW_IMPL(ASAutoCompleteTextViewImpl_TextStyle, init)
}

ASAutoCompleteTextViewImpl_TextStyle *create_ASAutoCompleteTextViewImpl_TextStyle_init() {
  J2OBJC_CREATE_IMPL(ASAutoCompleteTextViewImpl_TextStyle, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASAutoCompleteTextViewImpl_TextStyle)

@implementation ASAutoCompleteTextViewImpl_Capitalize

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASAutoCompleteTextViewImpl_Capitalize_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilMap>)getMapping {
  return mapping_;
}

- (JavaLangInteger *)getDefault {
  return JavaLangInteger_valueOfWithInt_(0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMapping);
  methods[2].selector = @selector(getDefault);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapping_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "LASAutoCompleteTextViewImpl;" };
  static const J2ObjcClassInfo _ASAutoCompleteTextViewImpl_Capitalize = { "Capitalize", "com.ashera.layout", ptrTable, methods, fields, 7, 0x18, 3, 1, 2, -1, -1, -1, -1 };
  return &_ASAutoCompleteTextViewImpl_Capitalize;
}

@end

void ASAutoCompleteTextViewImpl_Capitalize_init(ASAutoCompleteTextViewImpl_Capitalize *self) {
  ASAbstractEnumToIntConverter_init(self);
  self->mapping_ = new_JavaUtilHashMap_init();
  {
    (void) [self->mapping_ putWithId:@"none" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UITextAutocapitalizationTypeNone))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"words" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UITextAutocapitalizationTypeWords))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"sentences" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UITextAutocapitalizationTypeSentences))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"characters" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UITextAutocapitalizationTypeAllCharacters))];
  }
}

ASAutoCompleteTextViewImpl_Capitalize *new_ASAutoCompleteTextViewImpl_Capitalize_init() {
  J2OBJC_NEW_IMPL(ASAutoCompleteTextViewImpl_Capitalize, init)
}

ASAutoCompleteTextViewImpl_Capitalize *create_ASAutoCompleteTextViewImpl_Capitalize_init() {
  J2OBJC_CREATE_IMPL(ASAutoCompleteTextViewImpl_Capitalize, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASAutoCompleteTextViewImpl_Capitalize)

@implementation ASAutoCompleteTextViewImpl_Numeric

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASAutoCompleteTextViewImpl_Numeric_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilMap>)getMapping {
  return mapping_;
}

- (JavaLangInteger *)getDefault {
  return JavaLangInteger_valueOfWithInt_(0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMapping);
  methods[2].selector = @selector(getDefault);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapping_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "LASAutoCompleteTextViewImpl;" };
  static const J2ObjcClassInfo _ASAutoCompleteTextViewImpl_Numeric = { "Numeric", "com.ashera.layout", ptrTable, methods, fields, 7, 0x18, 3, 1, 2, -1, -1, -1, -1 };
  return &_ASAutoCompleteTextViewImpl_Numeric;
}

@end

void ASAutoCompleteTextViewImpl_Numeric_init(ASAutoCompleteTextViewImpl_Numeric *self) {
  ASAbstractBitFlagConverter_init(self);
  self->mapping_ = new_JavaUtilHashMap_init();
  {
    (void) [self->mapping_ putWithId:@"decimal" withId:JavaLangInteger_valueOfWithInt_((jint) 0x5)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"integer" withId:JavaLangInteger_valueOfWithInt_((jint) 0x1)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"signed" withId:JavaLangInteger_valueOfWithInt_((jint) 0x3)];
  }
}

ASAutoCompleteTextViewImpl_Numeric *new_ASAutoCompleteTextViewImpl_Numeric_init() {
  J2OBJC_NEW_IMPL(ASAutoCompleteTextViewImpl_Numeric, init)
}

ASAutoCompleteTextViewImpl_Numeric *create_ASAutoCompleteTextViewImpl_Numeric_init() {
  J2OBJC_CREATE_IMPL(ASAutoCompleteTextViewImpl_Numeric, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASAutoCompleteTextViewImpl_Numeric)

@implementation ASAutoCompleteTextViewImpl_InputType

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASAutoCompleteTextViewImpl_InputType_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilMap>)getMapping {
  return mapping_;
}

- (JavaLangInteger *)getDefault {
  return JavaLangInteger_valueOfWithInt_(0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMapping);
  methods[2].selector = @selector(getDefault);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapping_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "LASAutoCompleteTextViewImpl;" };
  static const J2ObjcClassInfo _ASAutoCompleteTextViewImpl_InputType = { "InputType", "com.ashera.layout", ptrTable, methods, fields, 7, 0x18, 3, 1, 2, -1, -1, -1, -1 };
  return &_ASAutoCompleteTextViewImpl_InputType;
}

@end

void ASAutoCompleteTextViewImpl_InputType_init(ASAutoCompleteTextViewImpl_InputType *self) {
  ASAbstractEnumToIntConverter_init(self);
  self->mapping_ = new_JavaUtilHashMap_init();
  {
    (void) [self->mapping_ putWithId:@"date" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIKeyboardTypeDate))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"datetime" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIKeyboardTypeDatetime))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"none" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIKeyboardTypeNone))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"number" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIKeyboardTypeNumber))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"numberDecimal" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIKeyboardTypeNumberDecimal))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"numberPassword" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIKeyboardTypeNumberPassword))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"numberSigned" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIKeyboardTypeNumberSigned))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"phone" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIKeyboardTypePhone))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"text" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIKeyboardTypeText))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"textAutoComplete" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIKeyboardTypeTextAutoComplete))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"textAutoCorrect" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIKeyboardTypeTextAutoCorrect))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"textCapCharacters" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIKeyboardTypeTextCapCharacters))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"textCapSentences" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIKeyboardTypeTextCapSentences))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"textCapWords" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIKeyboardTypeTextCapWords))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"textEmailAddress" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIKeyboardTypeTextEmailAddress))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"textEmailSubject" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIKeyboardTypeTextEmailSubject))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"textFilter" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIKeyboardTypeTextFilter))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"textImeMultiLine" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIKeyboardTypeTextImeMultiLine))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"textLongMessage" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIKeyboardTypeTextLongMessage))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"textMultiLine" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIKeyboardTypeTextMultiLine))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"textNoSuggestions" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIKeyboardTypeTextNoSuggestions))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"textPassword" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIKeyboardTypeTextPassword))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"textPersonName" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIKeyboardTypeTextPersonName))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"textPhonetic" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIKeyboardTypeTextPhonetic))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"textPostalAddress" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIKeyboardTypeTextPostalAddress))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"textShortMessage" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIKeyboardTypeTextShortMessage))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"textUri" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIKeyboardTypeTextUri))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"textVisiblePassword" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIKeyboardTypeTextVisiblePassword))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"textWebEditText" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIKeyboardTypeTextWebEditText))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"textWebEmailAddress" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIKeyboardTypeTextWebEmailAddress))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"textWebPassword" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIKeyboardTypeTextWebPassword))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"time" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIKeyboardTypeTime))];
  }
}

ASAutoCompleteTextViewImpl_InputType *new_ASAutoCompleteTextViewImpl_InputType_init() {
  J2OBJC_NEW_IMPL(ASAutoCompleteTextViewImpl_InputType, init)
}

ASAutoCompleteTextViewImpl_InputType *create_ASAutoCompleteTextViewImpl_InputType_init() {
  J2OBJC_CREATE_IMPL(ASAutoCompleteTextViewImpl_InputType, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASAutoCompleteTextViewImpl_InputType)

@implementation ASAutoCompleteTextViewImpl_ImeOptions

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASAutoCompleteTextViewImpl_ImeOptions_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilMap>)getMapping {
  return mapping_;
}

- (JavaLangInteger *)getDefault {
  return JavaLangInteger_valueOfWithInt_(0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMapping);
  methods[2].selector = @selector(getDefault);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapping_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "LASAutoCompleteTextViewImpl;" };
  static const J2ObjcClassInfo _ASAutoCompleteTextViewImpl_ImeOptions = { "ImeOptions", "com.ashera.layout", ptrTable, methods, fields, 7, 0x18, 3, 1, 2, -1, -1, -1, -1 };
  return &_ASAutoCompleteTextViewImpl_ImeOptions;
}

@end

void ASAutoCompleteTextViewImpl_ImeOptions_init(ASAutoCompleteTextViewImpl_ImeOptions *self) {
  ASAbstractEnumToIntConverter_init(self);
  self->mapping_ = new_JavaUtilHashMap_init();
  {
    (void) [self->mapping_ putWithId:@"actionDone" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIReturnKeyTypeActionDone))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"actionGo" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIReturnKeyTypeActionGo))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"actionNext" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIReturnKeyTypeActionNext))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"actionNone" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIReturnKeyTypeActionNone))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"actionPrevious" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIReturnKeyTypeActionPrevious))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"actionSearch" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIReturnKeyTypeActionSearch))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"actionSend" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIReturnKeyTypeActionSend))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"actionUnspecified" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIReturnKeyTypeActionUnspecified))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"flagForceAscii" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIReturnKeyTypeFlagForceAscii))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"flagNavigateNext" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIReturnKeyTypeFlagNavigateNext))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"flagNavigatePrevious" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIReturnKeyTypeFlagNavigatePrevious))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"flagNoAccessoryAction" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIReturnKeyTypeFlagNoAccessoryAction))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"flagNoEnterAction" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIReturnKeyTypeFlagNoEnterAction))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"flagNoExtractUi" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIReturnKeyTypeFlagNoExtractUi))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"flagNoFullscreen" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIReturnKeyTypeFlagNoFullscreen))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"flagNoPersonalizedLearning" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIReturnKeyTypeFlagNoPersonalizedLearning))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"normal" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIReturnKeyTypeNormal))];
  }
}

ASAutoCompleteTextViewImpl_ImeOptions *new_ASAutoCompleteTextViewImpl_ImeOptions_init() {
  J2OBJC_NEW_IMPL(ASAutoCompleteTextViewImpl_ImeOptions, init)
}

ASAutoCompleteTextViewImpl_ImeOptions *create_ASAutoCompleteTextViewImpl_ImeOptions_init() {
  J2OBJC_CREATE_IMPL(ASAutoCompleteTextViewImpl_ImeOptions, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASAutoCompleteTextViewImpl_ImeOptions)

@implementation ASAutoCompleteTextViewImpl_IosBorderStyle

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASAutoCompleteTextViewImpl_IosBorderStyle_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilMap>)getMapping {
  return mapping_;
}

- (JavaLangInteger *)getDefault {
  return JavaLangInteger_valueOfWithInt_(0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMapping);
  methods[2].selector = @selector(getDefault);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapping_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "LASAutoCompleteTextViewImpl;" };
  static const J2ObjcClassInfo _ASAutoCompleteTextViewImpl_IosBorderStyle = { "IosBorderStyle", "com.ashera.layout", ptrTable, methods, fields, 7, 0x18, 3, 1, 2, -1, -1, -1, -1 };
  return &_ASAutoCompleteTextViewImpl_IosBorderStyle;
}

@end

void ASAutoCompleteTextViewImpl_IosBorderStyle_init(ASAutoCompleteTextViewImpl_IosBorderStyle *self) {
  ASAbstractEnumToIntConverter_init(self);
  self->mapping_ = new_JavaUtilHashMap_init();
  {
    (void) [self->mapping_ putWithId:@"none" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UITextBorderStyleNone))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"line" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UITextBorderStyleLine))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"bezel" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UITextBorderStyleBezel))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"roundedRect" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UITextBorderStyleRoundedRect))];
  }
}

ASAutoCompleteTextViewImpl_IosBorderStyle *new_ASAutoCompleteTextViewImpl_IosBorderStyle_init() {
  J2OBJC_NEW_IMPL(ASAutoCompleteTextViewImpl_IosBorderStyle, init)
}

ASAutoCompleteTextViewImpl_IosBorderStyle *create_ASAutoCompleteTextViewImpl_IosBorderStyle_init() {
  J2OBJC_CREATE_IMPL(ASAutoCompleteTextViewImpl_IosBorderStyle, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASAutoCompleteTextViewImpl_IosBorderStyle)

@implementation ASAutoCompleteTextViewImpl_InputView

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASAutoCompleteTextViewImpl_InputView_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilMap>)getMapping {
  return mapping_;
}

- (JavaLangInteger *)getDefault {
  return JavaLangInteger_valueOfWithInt_(0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMapping);
  methods[2].selector = @selector(getDefault);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapping_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "LASAutoCompleteTextViewImpl;" };
  static const J2ObjcClassInfo _ASAutoCompleteTextViewImpl_InputView = { "InputView", "com.ashera.layout", ptrTable, methods, fields, 7, 0x18, 3, 1, 2, -1, -1, -1, -1 };
  return &_ASAutoCompleteTextViewImpl_InputView;
}

@end

void ASAutoCompleteTextViewImpl_InputView_init(ASAutoCompleteTextViewImpl_InputView *self) {
  ASAbstractEnumToIntConverter_init(self);
  self->mapping_ = new_JavaUtilHashMap_init();
  {
    (void) [self->mapping_ putWithId:@"picker" withId:JavaLangInteger_valueOfWithInt_((jint) 0x1)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"datepicker" withId:JavaLangInteger_valueOfWithInt_((jint) 0x2)];
  }
}

ASAutoCompleteTextViewImpl_InputView *new_ASAutoCompleteTextViewImpl_InputView_init() {
  J2OBJC_NEW_IMPL(ASAutoCompleteTextViewImpl_InputView, init)
}

ASAutoCompleteTextViewImpl_InputView *create_ASAutoCompleteTextViewImpl_InputView_init() {
  J2OBJC_CREATE_IMPL(ASAutoCompleteTextViewImpl_InputView, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASAutoCompleteTextViewImpl_InputView)

J2OBJC_INITIALIZED_DEFN(ASAutoCompleteTextViewImpl_AutoCompleteTextViewExt)

@implementation ASAutoCompleteTextViewImpl_AutoCompleteTextViewExt

- (id<ASIWidget>)getWidget {
  return this$0_;
}

- (instancetype)initWithASAutoCompleteTextViewImpl:(ASAutoCompleteTextViewImpl *)outer$ {
  ASAutoCompleteTextViewImpl_AutoCompleteTextViewExt_initWithASAutoCompleteTextViewImpl_(self, outer$);
  return self;
}

- (void)onMeasureWithInt:(jint)widthMeasureSpec
                 withInt:(jint)heightMeasureSpec {
  [super onMeasureWithInt:widthMeasureSpec withInt:heightMeasureSpec];
  id<ASIWidgetLifeCycleListener> listener = [this$0_ getListener];
  if (listener != nil) {
    [((ASMeasureEvent *) nil_chk(measureFinished_)) setWidthWithInt:[self getMeasuredWidth]];
    [((ASMeasureEvent *) nil_chk(measureFinished_)) setHeightWithInt:[self getMeasuredHeight]];
    [listener eventOccurredWithASIWidgetLifeCycleListener_EventId:JreLoadEnum(ASIWidgetLifeCycleListener_EventId, measureFinished) withASWidgetEvent:measureFinished_];
  }
}

- (void)onLayoutWithBoolean:(jboolean)changed
                    withInt:(jint)l
                    withInt:(jint)t
                    withInt:(jint)r
                    withInt:(jint)b {
  [super onLayoutWithBoolean:changed withInt:l withInt:t withInt:r withInt:b];
  ASViewImpl_setDrawableBoundsWithASIWidget_withInt_withInt_withInt_withInt_(this$0_, l, t, r, b);
  if (![self isOverlay]) {
    ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_([this$0_ asNativeWidget], l, t, r, b);
    ASAutoCompleteTextViewImpl_nativeMakeFrameForChildWidgetWithInt_withInt_withInt_withInt_(this$0_, l, t, r, b);
  }
  [this$0_ replayBufferedEvents];
  ASViewImpl_redrawDrawablesWithASIWidget_(this$0_);
  overlays_ = ASViewImpl_drawOverlayWithASIWidget_withJavaUtilList_(this$0_, overlays_);
  id<ASIWidgetLifeCycleListener> listener = [this$0_ getListener];
  if (listener != nil) {
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setBWithInt:b];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setLWithInt:l];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setRWithInt:r];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setTWithInt:t];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setChangedWithBoolean:changed];
    [listener eventOccurredWithASIWidgetLifeCycleListener_EventId:JreLoadEnum(ASIWidgetLifeCycleListener_EventId, onLayout) withASWidgetEvent:onLayoutEvent_];
  }
  if ([this$0_ isInvalidateOnFrameChange] && [this$0_ isInitialised]) {
    [this$0_ invalidate];
  }
}

- (void)executeWithNSString:(NSString *)method
          withNSObjectArray:(IOSObjectArray *)canvas {
}

- (void)updateMeasuredDimensionWithInt:(jint)width
                               withInt:(jint)height {
  [self setMeasuredDimensionWithInt:width withInt:height];
}

- (id<ASILifeCycleDecorator>)newInstanceWithASIWidget:(id<ASIWidget>)widget {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)setAttributeWithASWidgetAttribute:(ASWidgetAttribute *)widgetAttribute
                             withNSString:(NSString *)strValue
                                   withId:(id)objValue {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (id<JavaUtilList>)getMethods {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)initialized {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (id)getAttributeWithASWidgetAttribute:(ASWidgetAttribute *)widgetAttribute {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)drawableStateChanged {
  [super drawableStateChanged];
  ASViewImpl_drawableStateChangedWithASIWidget_(this$0_);
}

- (ADView *)inflateViewWithNSString:(NSString *)layout {
  if (templates_ == nil) {
    templates_ = new_JavaUtilHashMap_init();
  }
  id<ASIWidget> template_ = [templates_ getWithId:layout];
  if (template_ == nil) {
    template_ = (id<ASIWidget>) cast_check([this$0_ quickConvertWithId:layout withNSString:@"template"], ASIWidget_class_());
    (void) [((id<JavaUtilMap>) nil_chk(templates_)) putWithId:layout withId:template_];
  }
  id<ASIWidget> widget = [((id<ASIWidget>) nil_chk(template_)) loadLazyWidgetsWithASHasWidgets:[this$0_ getParent]];
  return (ADView *) cast_chk([((id<ASIWidget>) nil_chk(widget)) asWidget], [ADView class]);
}

- (void)remeasure {
  if ([this$0_ getFragment] != nil) {
    [((id<ASIFragment>) nil_chk([this$0_ getFragment])) remeasure];
  }
}

- (void)removeFromParent {
  [((id<ASHasWidgets>) nil_chk([this$0_ getParent])) removeWithASIWidget:this$0_];
}

- (void)getLocationOnScreenWithIntArray:(IOSIntArray *)appScreenLocation {
  *IOSIntArray_GetRef(nil_chk(appScreenLocation), 0) = ASViewImpl_getLocationXOnScreenWithId_([this$0_ asNativeWidget]);
  *IOSIntArray_GetRef(appScreenLocation, 1) = ASViewImpl_getLocationYOnScreenWithId_([this$0_ asNativeWidget]);
}

- (void)getWindowVisibleDisplayFrameWithADRect:(ADRect *)displayFrame {
  ((ADRect *) nil_chk(displayFrame))->left_ = ASViewImpl_getLocationXOnScreenWithId_([this$0_ asNativeWidget]);
  displayFrame->top_ = ASViewImpl_getLocationYOnScreenWithId_([this$0_ asNativeWidget]);
  displayFrame->right_ = displayFrame->left_ + [self getWidth];
  displayFrame->bottom_ = displayFrame->top_ + [self getHeight];
}

- (void)offsetTopAndBottomWithInt:(jint)offset {
  [super offsetTopAndBottomWithInt:offset];
  ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_([this$0_ asNativeWidget], [self getLeft], [self getTop], [self getRight], [self getBottom]);
}

- (void)offsetLeftAndRightWithInt:(jint)offset {
  [super offsetLeftAndRightWithInt:offset];
  ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_([this$0_ asNativeWidget], [self getLeft], [self getTop], [self getRight], [self getBottom]);
}

- (void)setMyAttributeWithNSString:(NSString *)name
                            withId:(id)value {
  if ([((NSString *) nil_chk(name)) isEqual:@"state0"]) {
    [self setState0WithId:value];
    return;
  }
  if ([name isEqual:@"state1"]) {
    [self setState1WithId:value];
    return;
  }
  if ([name isEqual:@"state2"]) {
    [self setState2WithId:value];
    return;
  }
  if ([name isEqual:@"state3"]) {
    [self setState3WithId:value];
    return;
  }
  if ([name isEqual:@"state4"]) {
    [self setState4WithId:value];
    return;
  }
  [this$0_ setAttributeWithNSString:name withId:value withBoolean:!([value isKindOfClass:[NSString class]])];
}

- (void)setVisibilityWithInt:(jint)visibility {
  [super setVisibilityWithInt:visibility];
  ASViewImpl_nativeSetVisibilityWithId_withBoolean_([this$0_ asNativeWidget], visibility != ADView_VISIBLE);
}

- (jint)getBorderPadding {
  return [this$0_ getBorderPadding];
}

- (jint)getLineHeight {
  return ASAutoCompleteTextViewImpl_getLineHeight(this$0_);
}

- (jint)getBorderWidth {
  return ASAutoCompleteTextViewImpl_getBorderWidth(this$0_);
}

- (jint)getLineHeightPadding {
  return [this$0_ getLineHeightPadding];
}

- (jint)nativeMeasureWidthWithId:(id)uiView {
  return ASViewImpl_nativeMeasureWidthWithId_(uiView);
}

- (jint)nativeMeasureHeightWithId:(id)uiView
                          withInt:(jint)width {
  return ASViewImpl_nativeMeasureHeightWithId_withInt_(uiView, width);
}

- (jint)computeSizeWithFloat:(jfloat)width {
  return [self nativeMeasureHeightWithId:this$0_->uiView_ withInt:JreFpToInt(width)];
}

- (NSString *)getText {
  return (NSString *) cast_chk(ASAutoCompleteTextViewImpl_getMyText(this$0_), [NSString class]);
}

- (void)dismissDropDown {
  [((ADAutoCompleteTextView *) nil_chk(this$0_->measurableView_)) postWithJavaLangRunnable:new_ASAutoCompleteTextViewImpl_AutoCompleteTextViewExt_$Lambda$1_initWithASAutoCompleteTextViewImpl_AutoCompleteTextViewExt_(self)];
}

- (void)setState0WithId:(id)value {
  ASViewImpl_setStateWithASIWidget_withInt_withId_(this$0_, 0, value);
}

- (void)setState1WithId:(id)value {
  ASViewImpl_setStateWithASIWidget_withInt_withId_(this$0_, 1, value);
}

- (void)setState2WithId:(id)value {
  ASViewImpl_setStateWithASIWidget_withInt_withId_(this$0_, 2, value);
}

- (void)setState3WithId:(id)value {
  ASViewImpl_setStateWithASIWidget_withInt_withId_(this$0_, 3, value);
}

- (void)setState4WithId:(id)value {
  ASViewImpl_setStateWithASIWidget_withInt_withId_(this$0_, 4, value);
}

- (void)state0 {
  ASViewImpl_stateWithASIWidget_withInt_(this$0_, 0);
}

- (void)state1 {
  ASViewImpl_stateWithASIWidget_withInt_(this$0_, 1);
}

- (void)state2 {
  ASViewImpl_stateWithASIWidget_withInt_(this$0_, 2);
}

- (void)state3 {
  ASViewImpl_stateWithASIWidget_withInt_(this$0_, 3);
}

- (void)state4 {
  ASViewImpl_stateWithASIWidget_withInt_(this$0_, 4);
}

- (void)stateYes {
  ASViewImpl_stateYesWithASIWidget_(this$0_);
}

- (void)stateNo {
  ASViewImpl_stateNoWithASIWidget_(this$0_);
}

- (void)__javaClone:(ASAutoCompleteTextViewImpl_AutoCompleteTextViewExt *)original {
  [super __javaClone:original];
  JreRelease(this$0_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LASIWidget;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x81, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 2, -1, -1, -1, -1 },
    { NULL, "LASILifeCycleDecorator;", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 12, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADView;", 0x1, 15, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 18, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 20, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 21, 22, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 23, 22, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 24, 25, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 26, 22, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 27, 28, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 29, 30, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 31, 32, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 33, 28, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 34, 28, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 35, 28, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 36, 28, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 37, 28, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getWidget);
  methods[1].selector = @selector(initWithASAutoCompleteTextViewImpl:);
  methods[2].selector = @selector(onMeasureWithInt:withInt:);
  methods[3].selector = @selector(onLayoutWithBoolean:withInt:withInt:withInt:withInt:);
  methods[4].selector = @selector(executeWithNSString:withNSObjectArray:);
  methods[5].selector = @selector(updateMeasuredDimensionWithInt:withInt:);
  methods[6].selector = @selector(newInstanceWithASIWidget:);
  methods[7].selector = @selector(setAttributeWithASWidgetAttribute:withNSString:withId:);
  methods[8].selector = @selector(getMethods);
  methods[9].selector = @selector(initialized);
  methods[10].selector = @selector(getAttributeWithASWidgetAttribute:);
  methods[11].selector = @selector(drawableStateChanged);
  methods[12].selector = @selector(inflateViewWithNSString:);
  methods[13].selector = @selector(remeasure);
  methods[14].selector = @selector(removeFromParent);
  methods[15].selector = @selector(getLocationOnScreenWithIntArray:);
  methods[16].selector = @selector(getWindowVisibleDisplayFrameWithADRect:);
  methods[17].selector = @selector(offsetTopAndBottomWithInt:);
  methods[18].selector = @selector(offsetLeftAndRightWithInt:);
  methods[19].selector = @selector(setMyAttributeWithNSString:withId:);
  methods[20].selector = @selector(setVisibilityWithInt:);
  methods[21].selector = @selector(getBorderPadding);
  methods[22].selector = @selector(getLineHeight);
  methods[23].selector = @selector(getBorderWidth);
  methods[24].selector = @selector(getLineHeightPadding);
  methods[25].selector = @selector(nativeMeasureWidthWithId:);
  methods[26].selector = @selector(nativeMeasureHeightWithId:withInt:);
  methods[27].selector = @selector(computeSizeWithFloat:);
  methods[28].selector = @selector(getText);
  methods[29].selector = @selector(dismissDropDown);
  methods[30].selector = @selector(setState0WithId:);
  methods[31].selector = @selector(setState1WithId:);
  methods[32].selector = @selector(setState2WithId:);
  methods[33].selector = @selector(setState3WithId:);
  methods[34].selector = @selector(setState4WithId:);
  methods[35].selector = @selector(state0);
  methods[36].selector = @selector(state1);
  methods[37].selector = @selector(state2);
  methods[38].selector = @selector(state3);
  methods[39].selector = @selector(state4);
  methods[40].selector = @selector(stateYes);
  methods[41].selector = @selector(stateNo);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASAutoCompleteTextViewImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "measureFinished_", "LASMeasureEvent;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "onLayoutEvent_", "LASOnLayoutEvent;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "overlays_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 38, -1 },
    { "templates_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 39, -1 },
  };
  static const void *ptrTable[] = { "LASAutoCompleteTextViewImpl;", "onMeasure", "II", "onLayout", "ZIIII", "execute", "LNSString;[LNSObject;", "updateMeasuredDimension", "newInstance", "LASIWidget;", "setAttribute", "LASWidgetAttribute;LNSString;LNSObject;", "()Ljava/util/List<Ljava/lang/String;>;", "getAttribute", "LASWidgetAttribute;", "inflateView", "LNSString;", "getLocationOnScreen", "[I", "getWindowVisibleDisplayFrame", "LADRect;", "offsetTopAndBottom", "I", "offsetLeftAndRight", "setMyAttribute", "LNSString;LNSObject;", "setVisibility", "nativeMeasureWidth", "LNSObject;", "nativeMeasureHeight", "LNSObject;I", "computeSize", "F", "setState0", "setState1", "setState2", "setState3", "setState4", "Ljava/util/List<Lcom/ashera/widget/IWidget;>;", "Ljava/util/Map<Ljava/lang/String;Lcom/ashera/widget/IWidget;>;" };
  static const J2ObjcClassInfo _ASAutoCompleteTextViewImpl_AutoCompleteTextViewExt = { "AutoCompleteTextViewExt", "com.ashera.layout", ptrTable, methods, fields, 7, 0x1, 42, 5, 0, -1, -1, -1, -1 };
  return &_ASAutoCompleteTextViewImpl_AutoCompleteTextViewExt;
}

+ (void)initialize {
  if (self == [ASAutoCompleteTextViewImpl_AutoCompleteTextViewExt class]) {
    ASAutoCompleteTextViewImpl_AutoCompleteTextViewExt_super$_dismissDropDown = (void (*)(id, SEL))[ADAutoCompleteTextView instanceMethodForSelector:@selector(dismissDropDown)];
    J2OBJC_SET_INITIALIZED(ASAutoCompleteTextViewImpl_AutoCompleteTextViewExt)
  }
}

@end

void ASAutoCompleteTextViewImpl_AutoCompleteTextViewExt_initWithASAutoCompleteTextViewImpl_(ASAutoCompleteTextViewImpl_AutoCompleteTextViewExt *self, ASAutoCompleteTextViewImpl *outer$) {
  self->this$0_ = outer$;
  ADAutoCompleteTextView_initWithASIWidget_(self, outer$);
  self->measureFinished_ = new_ASMeasureEvent_init();
  self->onLayoutEvent_ = new_ASOnLayoutEvent_init();
}

ASAutoCompleteTextViewImpl_AutoCompleteTextViewExt *new_ASAutoCompleteTextViewImpl_AutoCompleteTextViewExt_initWithASAutoCompleteTextViewImpl_(ASAutoCompleteTextViewImpl *outer$) {
  J2OBJC_NEW_IMPL(ASAutoCompleteTextViewImpl_AutoCompleteTextViewExt, initWithASAutoCompleteTextViewImpl_, outer$)
}

ASAutoCompleteTextViewImpl_AutoCompleteTextViewExt *create_ASAutoCompleteTextViewImpl_AutoCompleteTextViewExt_initWithASAutoCompleteTextViewImpl_(ASAutoCompleteTextViewImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASAutoCompleteTextViewImpl_AutoCompleteTextViewExt, initWithASAutoCompleteTextViewImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASAutoCompleteTextViewImpl_AutoCompleteTextViewExt)

@implementation ASAutoCompleteTextViewImpl_AutoCompleteTextViewExt_$Lambda$1

- (void)run {
  ASAutoCompleteTextViewImpl_AutoCompleteTextViewExt_super$_dismissDropDown(this$0_, @selector(dismissDropDown));
  ASAutoCompleteTextViewImpl_removePopUpContainer(this$0_->this$0_);
}

@end

void ASAutoCompleteTextViewImpl_AutoCompleteTextViewExt_$Lambda$1_initWithASAutoCompleteTextViewImpl_AutoCompleteTextViewExt_(ASAutoCompleteTextViewImpl_AutoCompleteTextViewExt_$Lambda$1 *self, ASAutoCompleteTextViewImpl_AutoCompleteTextViewExt *outer$) {
  self->this$0_ = outer$;
  NSObject_init(self);
}

ASAutoCompleteTextViewImpl_AutoCompleteTextViewExt_$Lambda$1 *new_ASAutoCompleteTextViewImpl_AutoCompleteTextViewExt_$Lambda$1_initWithASAutoCompleteTextViewImpl_AutoCompleteTextViewExt_(ASAutoCompleteTextViewImpl_AutoCompleteTextViewExt *outer$) {
  J2OBJC_NEW_IMPL(ASAutoCompleteTextViewImpl_AutoCompleteTextViewExt_$Lambda$1, initWithASAutoCompleteTextViewImpl_AutoCompleteTextViewExt_, outer$)
}

ASAutoCompleteTextViewImpl_AutoCompleteTextViewExt_$Lambda$1 *create_ASAutoCompleteTextViewImpl_AutoCompleteTextViewExt_$Lambda$1_initWithASAutoCompleteTextViewImpl_AutoCompleteTextViewExt_(ASAutoCompleteTextViewImpl_AutoCompleteTextViewExt *outer$) {
  J2OBJC_CREATE_IMPL(ASAutoCompleteTextViewImpl_AutoCompleteTextViewExt_$Lambda$1, initWithASAutoCompleteTextViewImpl_AutoCompleteTextViewExt_, outer$)
}

@implementation ASAutoCompleteTextViewImpl_1

- (instancetype)initWithASAutoCompleteTextViewImpl:(ASAutoCompleteTextViewImpl *)outer$ {
  ASAutoCompleteTextViewImpl_1_initWithASAutoCompleteTextViewImpl_(self, outer$);
  return self;
}

- (void)onItemClickWithADAdapterView:(ADAdapterView *)parent
                          withADView:(ADView *)view
                             withInt:(jint)position
                            withLong:(jlong)id_ {
  NSString *desc = [nil_chk([((ASListViewImpl_ListAdapter *) nil_chk([((ASListViewImpl *) nil_chk(this$0_->listViewWidget_)) getListAdapter])) getItemWithInt:position]) description];
  [this$0_ setMyTextWithId:desc];
  [((ADAutoCompleteTextView *) nil_chk(this$0_->measurableView_)) dismissDropDown];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASAutoCompleteTextViewImpl:);
  methods[1].selector = @selector(onItemClickWithADAdapterView:withADView:withInt:withLong:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASAutoCompleteTextViewImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASAutoCompleteTextViewImpl;", "onItemClick", "LADAdapterView;LADView;IJ", "(Lr/android/widget/AdapterView<*>;Lr/android/view/View;IJ)V", "setAttrsOnListView" };
  static const J2ObjcClassInfo _ASAutoCompleteTextViewImpl_1 = { "", "com.ashera.layout", ptrTable, methods, fields, 7, 0x8010, 2, 1, 0, -1, 4, -1, -1 };
  return &_ASAutoCompleteTextViewImpl_1;
}

@end

void ASAutoCompleteTextViewImpl_1_initWithASAutoCompleteTextViewImpl_(ASAutoCompleteTextViewImpl_1 *self, ASAutoCompleteTextViewImpl *outer$) {
  self->this$0_ = outer$;
  NSObject_init(self);
}

ASAutoCompleteTextViewImpl_1 *new_ASAutoCompleteTextViewImpl_1_initWithASAutoCompleteTextViewImpl_(ASAutoCompleteTextViewImpl *outer$) {
  J2OBJC_NEW_IMPL(ASAutoCompleteTextViewImpl_1, initWithASAutoCompleteTextViewImpl_, outer$)
}

ASAutoCompleteTextViewImpl_1 *create_ASAutoCompleteTextViewImpl_1_initWithASAutoCompleteTextViewImpl_(ASAutoCompleteTextViewImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASAutoCompleteTextViewImpl_1, initWithASAutoCompleteTextViewImpl_, outer$)
}

@implementation ASAutoCompleteTextViewImpl_PopupDataObserver

- (instancetype)initWithASAutoCompleteTextViewImpl:(ASAutoCompleteTextViewImpl *)outer$ {
  ASAutoCompleteTextViewImpl_PopupDataObserver_initWithASAutoCompleteTextViewImpl_(self, outer$);
  return self;
}

- (void)onChanged {
  JavaUtilArrayList *items = new_JavaUtilArrayList_init();
  for (jint i = 0; i < [((ASListViewImpl_ListAdapter *) nil_chk([((ASListViewImpl *) nil_chk(this$0_->listViewWidget_)) getListAdapter])) getCount]; i++) {
    [items addWithId:(ASLoopParam *) cast_chk([((ASListViewImpl_ListAdapter *) nil_chk([((ASListViewImpl *) nil_chk(this$0_->listViewWidget_)) getListAdapter])) getItemWithInt:i], [ASLoopParam class])];
  }
  [((ASListViewImpl *) nil_chk(this$0_->listViewWidget_)) storeUserDataWithNSString:@"entries" withId:items];
  [((ASListViewImpl *) nil_chk(this$0_->listViewWidget_)) notifyDataSetChanged];
  if (this$0_->myobserver_ != nil) {
    [this$0_->myobserver_ onChanged];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASAutoCompleteTextViewImpl:);
  methods[1].selector = @selector(onChanged);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASAutoCompleteTextViewImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASAutoCompleteTextViewImpl;" };
  static const J2ObjcClassInfo _ASAutoCompleteTextViewImpl_PopupDataObserver = { "PopupDataObserver", "com.ashera.layout", ptrTable, methods, fields, 7, 0x12, 2, 1, 0, -1, -1, -1, -1 };
  return &_ASAutoCompleteTextViewImpl_PopupDataObserver;
}

@end

void ASAutoCompleteTextViewImpl_PopupDataObserver_initWithASAutoCompleteTextViewImpl_(ASAutoCompleteTextViewImpl_PopupDataObserver *self, ASAutoCompleteTextViewImpl *outer$) {
  self->this$0_ = outer$;
  ADDataSetObserver_init(self);
}

ASAutoCompleteTextViewImpl_PopupDataObserver *new_ASAutoCompleteTextViewImpl_PopupDataObserver_initWithASAutoCompleteTextViewImpl_(ASAutoCompleteTextViewImpl *outer$) {
  J2OBJC_NEW_IMPL(ASAutoCompleteTextViewImpl_PopupDataObserver, initWithASAutoCompleteTextViewImpl_, outer$)
}

ASAutoCompleteTextViewImpl_PopupDataObserver *create_ASAutoCompleteTextViewImpl_PopupDataObserver_initWithASAutoCompleteTextViewImpl_(ASAutoCompleteTextViewImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASAutoCompleteTextViewImpl_PopupDataObserver, initWithASAutoCompleteTextViewImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASAutoCompleteTextViewImpl_PopupDataObserver)

@implementation ASAutoCompleteTextViewImpl_2

- (instancetype)initWithNSString:(NSString *)capture$0 {
  ASAutoCompleteTextViewImpl_2_initWithNSString_(self, capture$0);
  return self;
}

- (NSString *)description {
  return val$entry_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$entry_", "LNSString;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "toString", "LASAutoCompleteTextViewImpl;", "createEntries" };
  static const J2ObjcClassInfo _ASAutoCompleteTextViewImpl_2 = { "", "com.ashera.layout", ptrTable, methods, fields, 7, 0x8010, 2, 1, 2, -1, 3, -1, -1 };
  return &_ASAutoCompleteTextViewImpl_2;
}

@end

void ASAutoCompleteTextViewImpl_2_initWithNSString_(ASAutoCompleteTextViewImpl_2 *self, NSString *capture$0) {
  self->val$entry_ = capture$0;
  ASLoopParam_init(self);
}

ASAutoCompleteTextViewImpl_2 *new_ASAutoCompleteTextViewImpl_2_initWithNSString_(NSString *capture$0) {
  J2OBJC_NEW_IMPL(ASAutoCompleteTextViewImpl_2, initWithNSString_, capture$0)
}

ASAutoCompleteTextViewImpl_2 *create_ASAutoCompleteTextViewImpl_2_initWithNSString_(NSString *capture$0) {
  J2OBJC_CREATE_IMPL(ASAutoCompleteTextViewImpl_2, initWithNSString_, capture$0)
}

@implementation ASAutoCompleteTextViewImpl_OutsideEventListener

- (instancetype)initWithASAutoCompleteTextViewImpl:(ASAutoCompleteTextViewImpl *)window
                                      withNSString:(NSString *)type {
  ASAutoCompleteTextViewImpl_OutsideEventListener_initWithASAutoCompleteTextViewImpl_withNSString_(self, window, type);
  return self;
}

- (void)doPerformWithId:(id)payload {
  if (![((ASAutoCompleteTextViewImpl *) nil_chk(window_)) isFocused]) {
    [((ADAutoCompleteTextView *) nil_chk(((ASAutoCompleteTextViewImpl *) nil_chk(window_))->measurableView_)) dismissDropDown];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASAutoCompleteTextViewImpl:withNSString:);
  methods[1].selector = @selector(doPerformWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "window_", "LASAutoCompleteTextViewImpl;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASAutoCompleteTextViewImpl;LNSString;", "doPerform", "LNSObject;", "LASAutoCompleteTextViewImpl;" };
  static const J2ObjcClassInfo _ASAutoCompleteTextViewImpl_OutsideEventListener = { "OutsideEventListener", "com.ashera.layout", ptrTable, methods, fields, 7, 0x1a, 2, 1, 3, -1, -1, -1, -1 };
  return &_ASAutoCompleteTextViewImpl_OutsideEventListener;
}

@end

void ASAutoCompleteTextViewImpl_OutsideEventListener_initWithASAutoCompleteTextViewImpl_withNSString_(ASAutoCompleteTextViewImpl_OutsideEventListener *self, ASAutoCompleteTextViewImpl *window, NSString *type) {
  ASEventBusHandler_initWithNSString_(self, type);
  self->window_ = window;
}

ASAutoCompleteTextViewImpl_OutsideEventListener *new_ASAutoCompleteTextViewImpl_OutsideEventListener_initWithASAutoCompleteTextViewImpl_withNSString_(ASAutoCompleteTextViewImpl *window, NSString *type) {
  J2OBJC_NEW_IMPL(ASAutoCompleteTextViewImpl_OutsideEventListener, initWithASAutoCompleteTextViewImpl_withNSString_, window, type)
}

ASAutoCompleteTextViewImpl_OutsideEventListener *create_ASAutoCompleteTextViewImpl_OutsideEventListener_initWithASAutoCompleteTextViewImpl_withNSString_(ASAutoCompleteTextViewImpl *window, NSString *type) {
  J2OBJC_CREATE_IMPL(ASAutoCompleteTextViewImpl_OutsideEventListener, initWithASAutoCompleteTextViewImpl_withNSString_, window, type)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASAutoCompleteTextViewImpl_OutsideEventListener)

@implementation ASAutoCompleteTextViewImpl_OnDismissListener

- (NSString *)getAction {
  return action_;
}

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue {
  ASAutoCompleteTextViewImpl_OnDismissListener_initWithASIWidget_withNSString_(self, w, strValue);
  return self;
}

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue
                     withNSString:(NSString *)action {
  ASAutoCompleteTextViewImpl_OnDismissListener_initWithASIWidget_withNSString_withNSString_(self, w, strValue, action);
  return self;
}

- (void)onDismiss {
  if (action_ == nil || [action_ isEqual:@"onDismiss"]) {
    [((id<ASIWidget>) nil_chk(w_)) syncModelFromUiToPojoWithNSString:@"onDismiss"];
    id<JavaUtilMap> obj = [self getOnDismissEventObj];
    NSString *commandName = (NSString *) cast_chk([((id<JavaUtilMap>) nil_chk(obj)) getWithId:ASEventExpressionParser_KEY_COMMAND_NAME], [NSString class]);
    NSString *commandType = (NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_COMMAND_TYPE], [NSString class]);
    switch (JreIndexOfStr(commandType, (id[]){ @"+" }, 1)) {
      case 0:
      if (ASEventCommandFactory_hasCommandWithNSString_(commandName)) {
        (void) [((id<ASEventCommand>) nil_chk(ASEventCommandFactory_getCommandWithNSString_(commandName))) executeCommandWithASIWidget:w_ withJavaUtilMap:obj withNSObjectArray:[IOSObjectArray newArrayWithLength:0 type:NSObject_class_()]];
      }
      break;
      default:
      break;
    }
    if ([obj containsKeyWithId:@"refreshUiFromModel"]) {
      id widgets = [obj removeWithId:@"refreshUiFromModel"];
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, widgets, true);
    }
    if ([((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds] != nil) {
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, [((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds], true);
    }
    if (strValue_ != nil && ![strValue_ java_isEmpty] && ![((NSString *) nil_chk([((NSString *) nil_chk(strValue_)) java_trim])) java_hasPrefix:@"+"]) {
      id<ASIActivity> activity = [((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getRootActivity];
      [((id<ASIActivity>) nil_chk(activity)) sendEventMessageWithJavaUtilMap:obj];
    }
  }
  return;
}

- (id<JavaUtilMap>)getOnDismissEventObj {
  id<JavaUtilMap> obj = ASPluginInvoker_getJSONCompatMap();
  (void) [((id<JavaUtilMap>) nil_chk(obj)) putWithId:@"action" withId:@"action"];
  (void) [obj putWithId:@"eventType" withId:@"dismiss"];
  (void) [obj putWithId:@"fragmentId" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getFragmentId]];
  (void) [obj putWithId:@"actionUrl" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getActionUrl]];
  if ([((id<ASIWidget>) nil_chk(w_)) getComponentId] != nil) {
    (void) [obj putWithId:@"componentId" withId:[((id<ASIWidget>) nil_chk(w_)) getComponentId]];
  }
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"id", [((id<ASIWidget>) nil_chk(w_)) getId]);
  (void) ASEventExpressionParser_parseEventExpressionWithNSString_withJavaUtilMap_(strValue_, obj);
  [((id<ASIWidget>) nil_chk(w_)) updateModelToEventMapWithJavaUtilMap:obj withNSString:@"onDismiss" withNSString:(NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_EVENT_ARGS], [NSString class])];
  return obj;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getAction);
  methods[1].selector = @selector(initWithASIWidget:withNSString:);
  methods[2].selector = @selector(initWithASIWidget:withNSString:withNSString:);
  methods[3].selector = @selector(onDismiss);
  methods[4].selector = @selector(getOnDismissEventObj);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "w_", "LASIWidget;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "view_", "LADView;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "strValue_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "action_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASIWidget;LNSString;", "LASIWidget;LNSString;LNSString;", "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", "LASAutoCompleteTextViewImpl;" };
  static const J2ObjcClassInfo _ASAutoCompleteTextViewImpl_OnDismissListener = { "OnDismissListener", "com.ashera.layout", ptrTable, methods, fields, 7, 0xa, 5, 4, 3, -1, -1, -1, -1 };
  return &_ASAutoCompleteTextViewImpl_OnDismissListener;
}

@end

void ASAutoCompleteTextViewImpl_OnDismissListener_initWithASIWidget_withNSString_(ASAutoCompleteTextViewImpl_OnDismissListener *self, id<ASIWidget> w, NSString *strValue) {
  NSObject_init(self);
  self->w_ = w;
  self->strValue_ = strValue;
}

ASAutoCompleteTextViewImpl_OnDismissListener *new_ASAutoCompleteTextViewImpl_OnDismissListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) {
  J2OBJC_NEW_IMPL(ASAutoCompleteTextViewImpl_OnDismissListener, initWithASIWidget_withNSString_, w, strValue)
}

ASAutoCompleteTextViewImpl_OnDismissListener *create_ASAutoCompleteTextViewImpl_OnDismissListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) {
  J2OBJC_CREATE_IMPL(ASAutoCompleteTextViewImpl_OnDismissListener, initWithASIWidget_withNSString_, w, strValue)
}

void ASAutoCompleteTextViewImpl_OnDismissListener_initWithASIWidget_withNSString_withNSString_(ASAutoCompleteTextViewImpl_OnDismissListener *self, id<ASIWidget> w, NSString *strValue, NSString *action) {
  NSObject_init(self);
  self->w_ = w;
  self->strValue_ = strValue;
  self->action_ = action;
}

ASAutoCompleteTextViewImpl_OnDismissListener *new_ASAutoCompleteTextViewImpl_OnDismissListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) {
  J2OBJC_NEW_IMPL(ASAutoCompleteTextViewImpl_OnDismissListener, initWithASIWidget_withNSString_withNSString_, w, strValue, action)
}

ASAutoCompleteTextViewImpl_OnDismissListener *create_ASAutoCompleteTextViewImpl_OnDismissListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) {
  J2OBJC_CREATE_IMPL(ASAutoCompleteTextViewImpl_OnDismissListener, initWithASIWidget_withNSString_withNSString_, w, strValue, action)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASAutoCompleteTextViewImpl_OnDismissListener)

@implementation ASAutoCompleteTextViewImpl_OnEditorActionListener

- (NSString *)getAction {
  return action_;
}

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue {
  ASAutoCompleteTextViewImpl_OnEditorActionListener_initWithASIWidget_withNSString_(self, w, strValue);
  return self;
}

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue
                     withNSString:(NSString *)action {
  ASAutoCompleteTextViewImpl_OnEditorActionListener_initWithASIWidget_withNSString_withNSString_(self, w, strValue, action);
  return self;
}

- (jboolean)onEditorActionWithADTextView:(ADTextView *)v
                                 withInt:(jint)actionId
                          withADKeyEvent:(ADKeyEvent *)event {
  jboolean result = true;
  if (action_ == nil || [action_ isEqual:@"onEditorAction"]) {
    [((id<ASIWidget>) nil_chk(w_)) syncModelFromUiToPojoWithNSString:@"onEditorAction"];
    id<JavaUtilMap> obj = [self getOnEditorActionEventObjWithADTextView:v withInt:actionId withADKeyEvent:event];
    NSString *commandName = (NSString *) cast_chk([((id<JavaUtilMap>) nil_chk(obj)) getWithId:ASEventExpressionParser_KEY_COMMAND_NAME], [NSString class]);
    NSString *commandType = (NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_COMMAND_TYPE], [NSString class]);
    switch (JreIndexOfStr(commandType, (id[]){ @"+" }, 1)) {
      case 0:
      if (ASEventCommandFactory_hasCommandWithNSString_(commandName)) {
        id commandResult = [((id<ASEventCommand>) nil_chk(ASEventCommandFactory_getCommandWithNSString_(commandName))) executeCommandWithASIWidget:w_ withJavaUtilMap:obj withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ v, JavaLangInteger_valueOfWithInt_(actionId), event } count:3 type:NSObject_class_()]];
        if (commandResult != nil) {
          result = [(JavaLangBoolean *) cast_chk(commandResult, [JavaLangBoolean class]) booleanValue];
        }
      }
      break;
      default:
      break;
    }
    if ([obj containsKeyWithId:@"refreshUiFromModel"]) {
      id widgets = [obj removeWithId:@"refreshUiFromModel"];
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, widgets, true);
    }
    if ([((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds] != nil) {
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, [((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds], true);
    }
    if (strValue_ != nil && ![strValue_ java_isEmpty] && ![((NSString *) nil_chk([((NSString *) nil_chk(strValue_)) java_trim])) java_hasPrefix:@"+"]) {
      id<ASIActivity> activity = [((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getRootActivity];
      [((id<ASIActivity>) nil_chk(activity)) sendEventMessageWithJavaUtilMap:obj];
    }
  }
  return result;
}

- (id<JavaUtilMap>)getOnEditorActionEventObjWithADTextView:(ADTextView *)v
                                                   withInt:(jint)actionId
                                            withADKeyEvent:(ADKeyEvent *)event {
  id<JavaUtilMap> obj = ASPluginInvoker_getJSONCompatMap();
  (void) [((id<JavaUtilMap>) nil_chk(obj)) putWithId:@"action" withId:@"action"];
  (void) [obj putWithId:@"eventType" withId:@"editoraction"];
  (void) [obj putWithId:@"fragmentId" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getFragmentId]];
  (void) [obj putWithId:@"actionUrl" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getActionUrl]];
  if ([((id<ASIWidget>) nil_chk(w_)) getComponentId] != nil) {
    (void) [obj putWithId:@"componentId" withId:[((id<ASIWidget>) nil_chk(w_)) getComponentId]];
  }
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"id", [((id<ASIWidget>) nil_chk(w_)) getId]);
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"actionId", JavaLangInteger_valueOfWithInt_(actionId));
  ASViewImpl_addEventInfoWithJavaUtilMap_withADKeyEvent_(obj, event);
  (void) ASEventExpressionParser_parseEventExpressionWithNSString_withJavaUtilMap_(strValue_, obj);
  [((id<ASIWidget>) nil_chk(w_)) updateModelToEventMapWithJavaUtilMap:obj withNSString:@"onEditorAction" withNSString:(NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_EVENT_ARGS], [NSString class])];
  return obj;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, 4, 3, -1, 5, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getAction);
  methods[1].selector = @selector(initWithASIWidget:withNSString:);
  methods[2].selector = @selector(initWithASIWidget:withNSString:withNSString:);
  methods[3].selector = @selector(onEditorActionWithADTextView:withInt:withADKeyEvent:);
  methods[4].selector = @selector(getOnEditorActionEventObjWithADTextView:withInt:withADKeyEvent:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "w_", "LASIWidget;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "view_", "LADView;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "strValue_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "action_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASIWidget;LNSString;", "LASIWidget;LNSString;LNSString;", "onEditorAction", "LADTextView;ILADKeyEvent;", "getOnEditorActionEventObj", "(Lr/android/widget/TextView;ILr/android/view/KeyEvent;)Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", "LASAutoCompleteTextViewImpl;" };
  static const J2ObjcClassInfo _ASAutoCompleteTextViewImpl_OnEditorActionListener = { "OnEditorActionListener", "com.ashera.layout", ptrTable, methods, fields, 7, 0xa, 5, 4, 6, -1, -1, -1, -1 };
  return &_ASAutoCompleteTextViewImpl_OnEditorActionListener;
}

@end

void ASAutoCompleteTextViewImpl_OnEditorActionListener_initWithASIWidget_withNSString_(ASAutoCompleteTextViewImpl_OnEditorActionListener *self, id<ASIWidget> w, NSString *strValue) {
  NSObject_init(self);
  self->w_ = w;
  self->strValue_ = strValue;
}

ASAutoCompleteTextViewImpl_OnEditorActionListener *new_ASAutoCompleteTextViewImpl_OnEditorActionListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) {
  J2OBJC_NEW_IMPL(ASAutoCompleteTextViewImpl_OnEditorActionListener, initWithASIWidget_withNSString_, w, strValue)
}

ASAutoCompleteTextViewImpl_OnEditorActionListener *create_ASAutoCompleteTextViewImpl_OnEditorActionListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) {
  J2OBJC_CREATE_IMPL(ASAutoCompleteTextViewImpl_OnEditorActionListener, initWithASIWidget_withNSString_, w, strValue)
}

void ASAutoCompleteTextViewImpl_OnEditorActionListener_initWithASIWidget_withNSString_withNSString_(ASAutoCompleteTextViewImpl_OnEditorActionListener *self, id<ASIWidget> w, NSString *strValue, NSString *action) {
  NSObject_init(self);
  self->w_ = w;
  self->strValue_ = strValue;
  self->action_ = action;
}

ASAutoCompleteTextViewImpl_OnEditorActionListener *new_ASAutoCompleteTextViewImpl_OnEditorActionListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) {
  J2OBJC_NEW_IMPL(ASAutoCompleteTextViewImpl_OnEditorActionListener, initWithASIWidget_withNSString_withNSString_, w, strValue, action)
}

ASAutoCompleteTextViewImpl_OnEditorActionListener *create_ASAutoCompleteTextViewImpl_OnEditorActionListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) {
  J2OBJC_CREATE_IMPL(ASAutoCompleteTextViewImpl_OnEditorActionListener, initWithASIWidget_withNSString_withNSString_, w, strValue, action)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASAutoCompleteTextViewImpl_OnEditorActionListener)

@implementation ASAutoCompleteTextViewImpl_OnFocusChangeListener

- (NSString *)getAction {
  return action_;
}

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue {
  ASAutoCompleteTextViewImpl_OnFocusChangeListener_initWithASIWidget_withNSString_(self, w, strValue);
  return self;
}

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue
                     withNSString:(NSString *)action {
  ASAutoCompleteTextViewImpl_OnFocusChangeListener_initWithASIWidget_withNSString_withNSString_(self, w, strValue, action);
  return self;
}

- (void)onFocusChangeWithADView:(ADView *)v
                    withBoolean:(jboolean)hasFocus {
  if (action_ == nil || [action_ isEqual:@"onFocusChange"]) {
    [((id<ASIWidget>) nil_chk(w_)) syncModelFromUiToPojoWithNSString:@"onFocusChange"];
    id<JavaUtilMap> obj = [self getOnFocusChangeEventObjWithADView:v withBoolean:hasFocus];
    NSString *commandName = (NSString *) cast_chk([((id<JavaUtilMap>) nil_chk(obj)) getWithId:ASEventExpressionParser_KEY_COMMAND_NAME], [NSString class]);
    NSString *commandType = (NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_COMMAND_TYPE], [NSString class]);
    switch (JreIndexOfStr(commandType, (id[]){ @"+" }, 1)) {
      case 0:
      if (ASEventCommandFactory_hasCommandWithNSString_(commandName)) {
        (void) [((id<ASEventCommand>) nil_chk(ASEventCommandFactory_getCommandWithNSString_(commandName))) executeCommandWithASIWidget:w_ withJavaUtilMap:obj withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ v, JavaLangBoolean_valueOfWithBoolean_(hasFocus) } count:2 type:NSObject_class_()]];
      }
      break;
      default:
      break;
    }
    if ([obj containsKeyWithId:@"refreshUiFromModel"]) {
      id widgets = [obj removeWithId:@"refreshUiFromModel"];
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, widgets, true);
    }
    if ([((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds] != nil) {
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, [((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds], true);
    }
    if (strValue_ != nil && ![strValue_ java_isEmpty] && ![((NSString *) nil_chk([((NSString *) nil_chk(strValue_)) java_trim])) java_hasPrefix:@"+"]) {
      id<ASIActivity> activity = [((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getRootActivity];
      [((id<ASIActivity>) nil_chk(activity)) sendEventMessageWithJavaUtilMap:obj];
    }
  }
  return;
}

- (id<JavaUtilMap>)getOnFocusChangeEventObjWithADView:(ADView *)v
                                          withBoolean:(jboolean)hasFocus {
  id<JavaUtilMap> obj = ASPluginInvoker_getJSONCompatMap();
  (void) [((id<JavaUtilMap>) nil_chk(obj)) putWithId:@"action" withId:@"action"];
  (void) [obj putWithId:@"eventType" withId:@"focuschange"];
  (void) [obj putWithId:@"fragmentId" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getFragmentId]];
  (void) [obj putWithId:@"actionUrl" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getActionUrl]];
  if ([((id<ASIWidget>) nil_chk(w_)) getComponentId] != nil) {
    (void) [obj putWithId:@"componentId" withId:[((id<ASIWidget>) nil_chk(w_)) getComponentId]];
  }
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"id", [((id<ASIWidget>) nil_chk(w_)) getId]);
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"hasFocus", JavaLangBoolean_valueOfWithBoolean_(hasFocus));
  (void) ASEventExpressionParser_parseEventExpressionWithNSString_withJavaUtilMap_(strValue_, obj);
  [((id<ASIWidget>) nil_chk(w_)) updateModelToEventMapWithJavaUtilMap:obj withNSString:@"onFocusChange" withNSString:(NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_EVENT_ARGS], [NSString class])];
  return obj;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, 4, 3, -1, 5, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getAction);
  methods[1].selector = @selector(initWithASIWidget:withNSString:);
  methods[2].selector = @selector(initWithASIWidget:withNSString:withNSString:);
  methods[3].selector = @selector(onFocusChangeWithADView:withBoolean:);
  methods[4].selector = @selector(getOnFocusChangeEventObjWithADView:withBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "w_", "LASIWidget;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "view_", "LADView;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "strValue_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "action_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASIWidget;LNSString;", "LASIWidget;LNSString;LNSString;", "onFocusChange", "LADView;Z", "getOnFocusChangeEventObj", "(Lr/android/view/View;Z)Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", "LASAutoCompleteTextViewImpl;" };
  static const J2ObjcClassInfo _ASAutoCompleteTextViewImpl_OnFocusChangeListener = { "OnFocusChangeListener", "com.ashera.layout", ptrTable, methods, fields, 7, 0xa, 5, 4, 6, -1, -1, -1, -1 };
  return &_ASAutoCompleteTextViewImpl_OnFocusChangeListener;
}

@end

void ASAutoCompleteTextViewImpl_OnFocusChangeListener_initWithASIWidget_withNSString_(ASAutoCompleteTextViewImpl_OnFocusChangeListener *self, id<ASIWidget> w, NSString *strValue) {
  NSObject_init(self);
  self->w_ = w;
  self->strValue_ = strValue;
}

ASAutoCompleteTextViewImpl_OnFocusChangeListener *new_ASAutoCompleteTextViewImpl_OnFocusChangeListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) {
  J2OBJC_NEW_IMPL(ASAutoCompleteTextViewImpl_OnFocusChangeListener, initWithASIWidget_withNSString_, w, strValue)
}

ASAutoCompleteTextViewImpl_OnFocusChangeListener *create_ASAutoCompleteTextViewImpl_OnFocusChangeListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) {
  J2OBJC_CREATE_IMPL(ASAutoCompleteTextViewImpl_OnFocusChangeListener, initWithASIWidget_withNSString_, w, strValue)
}

void ASAutoCompleteTextViewImpl_OnFocusChangeListener_initWithASIWidget_withNSString_withNSString_(ASAutoCompleteTextViewImpl_OnFocusChangeListener *self, id<ASIWidget> w, NSString *strValue, NSString *action) {
  NSObject_init(self);
  self->w_ = w;
  self->strValue_ = strValue;
  self->action_ = action;
}

ASAutoCompleteTextViewImpl_OnFocusChangeListener *new_ASAutoCompleteTextViewImpl_OnFocusChangeListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) {
  J2OBJC_NEW_IMPL(ASAutoCompleteTextViewImpl_OnFocusChangeListener, initWithASIWidget_withNSString_withNSString_, w, strValue, action)
}

ASAutoCompleteTextViewImpl_OnFocusChangeListener *create_ASAutoCompleteTextViewImpl_OnFocusChangeListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) {
  J2OBJC_CREATE_IMPL(ASAutoCompleteTextViewImpl_OnFocusChangeListener, initWithASIWidget_withNSString_withNSString_, w, strValue, action)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASAutoCompleteTextViewImpl_OnFocusChangeListener)

@implementation ASAutoCompleteTextViewImpl_TextChangedListener

- (NSString *)getAction {
  return action_;
}

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue {
  ASAutoCompleteTextViewImpl_TextChangedListener_initWithASIWidget_withNSString_(self, w, strValue);
  return self;
}

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue
                     withNSString:(NSString *)action {
  ASAutoCompleteTextViewImpl_TextChangedListener_initWithASIWidget_withNSString_withNSString_(self, w, strValue, action);
  return self;
}

- (void)afterTextChangedWithADEditable:(id<ADEditable>)s {
  if (action_ == nil || [action_ isEqual:@"onafterTextChange"]) {
    [((id<ASIWidget>) nil_chk(w_)) syncModelFromUiToPojoWithNSString:@"onafterTextChange"];
    id<JavaUtilMap> obj = [self getOnafterTextChangeEventObjWithADEditable:s];
    NSString *commandName = (NSString *) cast_chk([((id<JavaUtilMap>) nil_chk(obj)) getWithId:ASEventExpressionParser_KEY_COMMAND_NAME], [NSString class]);
    NSString *commandType = (NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_COMMAND_TYPE], [NSString class]);
    switch (JreIndexOfStr(commandType, (id[]){ @"+" }, 1)) {
      case 0:
      if (ASEventCommandFactory_hasCommandWithNSString_(commandName)) {
        (void) [((id<ASEventCommand>) nil_chk(ASEventCommandFactory_getCommandWithNSString_(commandName))) executeCommandWithASIWidget:w_ withJavaUtilMap:obj withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ s } count:1 type:NSObject_class_()]];
      }
      break;
      default:
      break;
    }
    if ([obj containsKeyWithId:@"refreshUiFromModel"]) {
      id widgets = [obj removeWithId:@"refreshUiFromModel"];
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, widgets, true);
    }
    if ([((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds] != nil) {
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, [((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds], true);
    }
    if (strValue_ != nil && ![strValue_ java_isEmpty] && ![((NSString *) nil_chk([((NSString *) nil_chk(strValue_)) java_trim])) java_hasPrefix:@"+"]) {
      id<ASIActivity> activity = [((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getRootActivity];
      [((id<ASIActivity>) nil_chk(activity)) sendEventMessageWithJavaUtilMap:obj];
    }
  }
  return;
}

- (void)beforeTextChangedWithJavaLangCharSequence:(id<JavaLangCharSequence>)s
                                          withInt:(jint)start
                                          withInt:(jint)count
                                          withInt:(jint)after {
  if (action_ == nil || [action_ isEqual:@"onbeforeTextChange"]) {
    [((id<ASIWidget>) nil_chk(w_)) syncModelFromUiToPojoWithNSString:@"onbeforeTextChange"];
    id<JavaUtilMap> obj = [self getOnbeforeTextChangeEventObjWithJavaLangCharSequence:s withInt:start withInt:count withInt:after];
    NSString *commandName = (NSString *) cast_chk([((id<JavaUtilMap>) nil_chk(obj)) getWithId:ASEventExpressionParser_KEY_COMMAND_NAME], [NSString class]);
    NSString *commandType = (NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_COMMAND_TYPE], [NSString class]);
    switch (JreIndexOfStr(commandType, (id[]){ @"+" }, 1)) {
      case 0:
      if (ASEventCommandFactory_hasCommandWithNSString_(commandName)) {
        (void) [((id<ASEventCommand>) nil_chk(ASEventCommandFactory_getCommandWithNSString_(commandName))) executeCommandWithASIWidget:w_ withJavaUtilMap:obj withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ s, JavaLangInteger_valueOfWithInt_(start), JavaLangInteger_valueOfWithInt_(count), JavaLangInteger_valueOfWithInt_(after) } count:4 type:NSObject_class_()]];
      }
      break;
      default:
      break;
    }
    if ([obj containsKeyWithId:@"refreshUiFromModel"]) {
      id widgets = [obj removeWithId:@"refreshUiFromModel"];
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, widgets, true);
    }
    if ([((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds] != nil) {
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, [((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds], true);
    }
    if (strValue_ != nil && ![strValue_ java_isEmpty] && ![((NSString *) nil_chk([((NSString *) nil_chk(strValue_)) java_trim])) java_hasPrefix:@"+"]) {
      id<ASIActivity> activity = [((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getRootActivity];
      [((id<ASIActivity>) nil_chk(activity)) sendEventMessageWithJavaUtilMap:obj];
    }
  }
  return;
}

- (void)onTextChangedWithJavaLangCharSequence:(id<JavaLangCharSequence>)s
                                      withInt:(jint)start
                                      withInt:(jint)before
                                      withInt:(jint)count {
  if (action_ == nil || [action_ isEqual:@"onTextChange"]) {
    [((id<ASIWidget>) nil_chk(w_)) syncModelFromUiToPojoWithNSString:@"onTextChange"];
    id<JavaUtilMap> obj = [self getOnTextChangeEventObjWithJavaLangCharSequence:s withInt:start withInt:before withInt:count];
    NSString *commandName = (NSString *) cast_chk([((id<JavaUtilMap>) nil_chk(obj)) getWithId:ASEventExpressionParser_KEY_COMMAND_NAME], [NSString class]);
    NSString *commandType = (NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_COMMAND_TYPE], [NSString class]);
    switch (JreIndexOfStr(commandType, (id[]){ @"+" }, 1)) {
      case 0:
      if (ASEventCommandFactory_hasCommandWithNSString_(commandName)) {
        (void) [((id<ASEventCommand>) nil_chk(ASEventCommandFactory_getCommandWithNSString_(commandName))) executeCommandWithASIWidget:w_ withJavaUtilMap:obj withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ s, JavaLangInteger_valueOfWithInt_(start), JavaLangInteger_valueOfWithInt_(before), JavaLangInteger_valueOfWithInt_(count) } count:4 type:NSObject_class_()]];
      }
      break;
      default:
      break;
    }
    if ([obj containsKeyWithId:@"refreshUiFromModel"]) {
      id widgets = [obj removeWithId:@"refreshUiFromModel"];
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, widgets, true);
    }
    if ([((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds] != nil) {
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, [((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds], true);
    }
    if (strValue_ != nil && ![strValue_ java_isEmpty] && ![((NSString *) nil_chk([((NSString *) nil_chk(strValue_)) java_trim])) java_hasPrefix:@"+"]) {
      id<ASIActivity> activity = [((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getRootActivity];
      [((id<ASIActivity>) nil_chk(activity)) sendEventMessageWithJavaUtilMap:obj];
    }
  }
  return;
}

- (id<JavaUtilMap>)getOnTextChangeEventObjWithJavaLangCharSequence:(id<JavaLangCharSequence>)s
                                                           withInt:(jint)start
                                                           withInt:(jint)before
                                                           withInt:(jint)count {
  id<JavaUtilMap> obj = ASPluginInvoker_getJSONCompatMap();
  (void) [((id<JavaUtilMap>) nil_chk(obj)) putWithId:@"action" withId:@"action"];
  (void) [obj putWithId:@"eventType" withId:@"textchange"];
  (void) [obj putWithId:@"fragmentId" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getFragmentId]];
  (void) [obj putWithId:@"actionUrl" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getActionUrl]];
  if ([((id<ASIWidget>) nil_chk(w_)) getComponentId] != nil) {
    (void) [obj putWithId:@"componentId" withId:[((id<ASIWidget>) nil_chk(w_)) getComponentId]];
  }
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"id", [((id<ASIWidget>) nil_chk(w_)) getId]);
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"s", NSString_java_valueOf_(s));
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"start", JavaLangInteger_valueOfWithInt_(start));
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"before", JavaLangInteger_valueOfWithInt_(before));
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"count", JavaLangInteger_valueOfWithInt_(count));
  (void) ASEventExpressionParser_parseEventExpressionWithNSString_withJavaUtilMap_(strValue_, obj);
  [((id<ASIWidget>) nil_chk(w_)) updateModelToEventMapWithJavaUtilMap:obj withNSString:@"onTextChange" withNSString:(NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_EVENT_ARGS], [NSString class])];
  return obj;
}

- (id<JavaUtilMap>)getOnbeforeTextChangeEventObjWithJavaLangCharSequence:(id<JavaLangCharSequence>)s
                                                                 withInt:(jint)start
                                                                 withInt:(jint)count
                                                                 withInt:(jint)after {
  id<JavaUtilMap> obj = ASPluginInvoker_getJSONCompatMap();
  (void) [((id<JavaUtilMap>) nil_chk(obj)) putWithId:@"action" withId:@"action"];
  (void) [obj putWithId:@"eventType" withId:@"beforetextchange"];
  (void) [obj putWithId:@"fragmentId" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getFragmentId]];
  (void) [obj putWithId:@"actionUrl" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getActionUrl]];
  if ([((id<ASIWidget>) nil_chk(w_)) getComponentId] != nil) {
    (void) [obj putWithId:@"componentId" withId:[((id<ASIWidget>) nil_chk(w_)) getComponentId]];
  }
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"id", [((id<ASIWidget>) nil_chk(w_)) getId]);
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"s", NSString_java_valueOf_(s));
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"start", JavaLangInteger_valueOfWithInt_(start));
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"count", JavaLangInteger_valueOfWithInt_(count));
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"after", JavaLangInteger_valueOfWithInt_(after));
  (void) ASEventExpressionParser_parseEventExpressionWithNSString_withJavaUtilMap_(strValue_, obj);
  [((id<ASIWidget>) nil_chk(w_)) updateModelToEventMapWithJavaUtilMap:obj withNSString:@"onbeforeTextChange" withNSString:(NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_EVENT_ARGS], [NSString class])];
  return obj;
}

- (id<JavaUtilMap>)getOnafterTextChangeEventObjWithADEditable:(id<ADEditable>)s {
  id<JavaUtilMap> obj = ASPluginInvoker_getJSONCompatMap();
  (void) [((id<JavaUtilMap>) nil_chk(obj)) putWithId:@"action" withId:@"action"];
  (void) [obj putWithId:@"eventType" withId:@"aftertextchange"];
  (void) [obj putWithId:@"fragmentId" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getFragmentId]];
  (void) [obj putWithId:@"actionUrl" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getActionUrl]];
  if ([((id<ASIWidget>) nil_chk(w_)) getComponentId] != nil) {
    (void) [obj putWithId:@"componentId" withId:[((id<ASIWidget>) nil_chk(w_)) getComponentId]];
  }
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"id", [((id<ASIWidget>) nil_chk(w_)) getId]);
  (void) ASEventExpressionParser_parseEventExpressionWithNSString_withJavaUtilMap_(strValue_, obj);
  [((id<ASIWidget>) nil_chk(w_)) updateModelToEventMapWithJavaUtilMap:obj withNSString:@"onafterTextChange" withNSString:(NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_EVENT_ARGS], [NSString class])];
  return obj;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 5, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, 7, 5, -1, 8, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, 9, 5, -1, 8, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, 10, 3, -1, 11, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getAction);
  methods[1].selector = @selector(initWithASIWidget:withNSString:);
  methods[2].selector = @selector(initWithASIWidget:withNSString:withNSString:);
  methods[3].selector = @selector(afterTextChangedWithADEditable:);
  methods[4].selector = @selector(beforeTextChangedWithJavaLangCharSequence:withInt:withInt:withInt:);
  methods[5].selector = @selector(onTextChangedWithJavaLangCharSequence:withInt:withInt:withInt:);
  methods[6].selector = @selector(getOnTextChangeEventObjWithJavaLangCharSequence:withInt:withInt:withInt:);
  methods[7].selector = @selector(getOnbeforeTextChangeEventObjWithJavaLangCharSequence:withInt:withInt:withInt:);
  methods[8].selector = @selector(getOnafterTextChangeEventObjWithADEditable:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "w_", "LASIWidget;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "view_", "LADView;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "strValue_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "action_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASIWidget;LNSString;", "LASIWidget;LNSString;LNSString;", "afterTextChanged", "LADEditable;", "beforeTextChanged", "LJavaLangCharSequence;III", "onTextChanged", "getOnTextChangeEventObj", "(Ljava/lang/CharSequence;III)Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", "getOnbeforeTextChangeEventObj", "getOnafterTextChangeEventObj", "(Lr/android/text/Editable;)Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", "LASAutoCompleteTextViewImpl;" };
  static const J2ObjcClassInfo _ASAutoCompleteTextViewImpl_TextChangedListener = { "TextChangedListener", "com.ashera.layout", ptrTable, methods, fields, 7, 0xa, 9, 4, 12, -1, -1, -1, -1 };
  return &_ASAutoCompleteTextViewImpl_TextChangedListener;
}

@end

void ASAutoCompleteTextViewImpl_TextChangedListener_initWithASIWidget_withNSString_(ASAutoCompleteTextViewImpl_TextChangedListener *self, id<ASIWidget> w, NSString *strValue) {
  NSObject_init(self);
  self->w_ = w;
  self->strValue_ = strValue;
}

ASAutoCompleteTextViewImpl_TextChangedListener *new_ASAutoCompleteTextViewImpl_TextChangedListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) {
  J2OBJC_NEW_IMPL(ASAutoCompleteTextViewImpl_TextChangedListener, initWithASIWidget_withNSString_, w, strValue)
}

ASAutoCompleteTextViewImpl_TextChangedListener *create_ASAutoCompleteTextViewImpl_TextChangedListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) {
  J2OBJC_CREATE_IMPL(ASAutoCompleteTextViewImpl_TextChangedListener, initWithASIWidget_withNSString_, w, strValue)
}

void ASAutoCompleteTextViewImpl_TextChangedListener_initWithASIWidget_withNSString_withNSString_(ASAutoCompleteTextViewImpl_TextChangedListener *self, id<ASIWidget> w, NSString *strValue, NSString *action) {
  NSObject_init(self);
  self->w_ = w;
  self->strValue_ = strValue;
  self->action_ = action;
}

ASAutoCompleteTextViewImpl_TextChangedListener *new_ASAutoCompleteTextViewImpl_TextChangedListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) {
  J2OBJC_NEW_IMPL(ASAutoCompleteTextViewImpl_TextChangedListener, initWithASIWidget_withNSString_withNSString_, w, strValue, action)
}

ASAutoCompleteTextViewImpl_TextChangedListener *create_ASAutoCompleteTextViewImpl_TextChangedListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) {
  J2OBJC_CREATE_IMPL(ASAutoCompleteTextViewImpl_TextChangedListener, initWithASIWidget_withNSString_withNSString_, w, strValue, action)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASAutoCompleteTextViewImpl_TextChangedListener)

@implementation ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder

- (instancetype)initWithASAutoCompleteTextViewImpl:(ASAutoCompleteTextViewImpl *)outer$ {
  ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder_initWithASAutoCompleteTextViewImpl_(self, outer$);
  return self;
}

- (ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *)executeWithBoolean:(jboolean)setter {
  if (setter) {
    [this$0_ executeCommandWithJavaUtilMap:command_ withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_SETTER_METHOD];
    [((id<ASIFragment>) nil_chk([this$0_ getFragment])) remeasure];
  }
  [this$0_ executeCommandWithJavaUtilMap:command_ withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_GETTER_METHOD];
  return self;
}

- (ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *)tryGetIosText {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosText"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getIosText {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosText"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *)setIosTextWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosText"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *)tryGetIosPlaceholder {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosPlaceholder"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getIosPlaceholder {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosPlaceholder"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *)setIosPlaceholderWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosPlaceholder"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *)tryGetHint {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosPlaceholder"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getHint {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosPlaceholder"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *)setHintWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"hint"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *)tryGetIosTextColor {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosTextColor"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getIosTextColor {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosTextColor"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *)setIosTextColorWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosTextColor"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *)tryGetIosAdjustsFontSizeToFitWidth {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosAdjustsFontSizeToFitWidth"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)isIosAdjustsFontSizeToFitWidth {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosAdjustsFontSizeToFitWidth"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *)setIosAdjustsFontSizeToFitWidthWithBoolean:(jboolean)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosAdjustsFontSizeToFitWidth"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangBoolean_valueOfWithBoolean_(value)];
  return self;
}

- (ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *)tryGetIosMinimumFontSize {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosMinimumFontSize"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getIosMinimumFontSize {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosMinimumFontSize"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *)setIosMinimumFontSizeWithFloat:(jfloat)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosMinimumFontSize"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangFloat_valueOfWithFloat_(value)];
  return self;
}

- (ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *)tryGetIosIsEditing {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosIsEditing"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)isIosIsEditing {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosIsEditing"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *)tryGetIosClearsOnBeginEditing {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosClearsOnBeginEditing"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)isIosClearsOnBeginEditing {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosClearsOnBeginEditing"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *)setIosClearsOnBeginEditingWithBoolean:(jboolean)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosClearsOnBeginEditing"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangBoolean_valueOfWithBoolean_(value)];
  return self;
}

- (ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *)tryGetIosClearsOnInsertion {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosClearsOnInsertion"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)isIosClearsOnInsertion {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosClearsOnInsertion"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *)setIosClearsOnInsertionWithBoolean:(jboolean)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosClearsOnInsertion"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangBoolean_valueOfWithBoolean_(value)];
  return self;
}

- (ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *)tryGetIosAllowsEditingTextAttributes {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosAllowsEditingTextAttributes"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)isIosAllowsEditingTextAttributes {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosAllowsEditingTextAttributes"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *)setIosAllowsEditingTextAttributesWithBoolean:(jboolean)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosAllowsEditingTextAttributes"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangBoolean_valueOfWithBoolean_(value)];
  return self;
}

- (ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *)tryGetIosBackground {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosBackground"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getIosBackground {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosBackground"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *)setIosBackgroundWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosBackground"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *)tryGetIosDisabledBackground {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosDisabledBackground"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getIosDisabledBackground {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosDisabledBackground"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *)setIosDisabledBackgroundWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosDisabledBackground"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *)setPaddingWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"padding"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *)tryGetPaddingBottom {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingBottom"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getPaddingBottom {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingBottom"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *)setPaddingBottomWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingBottom"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *)tryGetPaddingRight {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingRight"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getPaddingRight {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingRight"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *)setPaddingRightWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingRight"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *)tryGetPaddingLeft {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingLeft"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getPaddingLeft {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingLeft"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *)setPaddingLeftWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingLeft"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *)tryGetPaddingStart {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingStart"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getPaddingStart {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingStart"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *)setPaddingStartWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingStart"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *)tryGetPaddingEnd {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingEnd"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getPaddingEnd {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingEnd"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *)setPaddingEndWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingEnd"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *)tryGetPaddingTop {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingTop"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getPaddingTop {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingTop"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *)setPaddingTopWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingTop"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *)setPaddingHorizontalWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingHorizontal"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *)setPaddingVerticalWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingVertical"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *)setDrawableLeftWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"drawableLeft"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *)setDrawableStartWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"drawableStart"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *)setDrawableRightWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"drawableRight"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *)setDrawableEndWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"drawableEnd"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *)setDrawableTopWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"drawableTop"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *)setDrawableBottomWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"drawableBottom"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *)tryGetDrawablePadding {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"drawablePadding"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getDrawablePadding {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"drawablePadding"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *)setDrawablePaddingWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"drawablePadding"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *)setDrawableTintWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"drawableTint"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *)setDrawableTintModeWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"drawableTintMode"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *)tryGetMinLines {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"minLines"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getMinLines {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"minLines"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *)setMinLinesWithInt:(jint)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"minLines"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangInteger_valueOfWithInt_(value)];
  return self;
}

- (ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *)setLinesWithInt:(jint)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"lines"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangInteger_valueOfWithInt_(value)];
  return self;
}

- (ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *)tryGetMaxLines {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"maxLines"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getMaxLines {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"maxLines"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *)setMaxLinesWithInt:(jint)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"maxLines"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangInteger_valueOfWithInt_(value)];
  return self;
}

- (ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *)tryGetMinWidth {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"minWidth"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getMinWidth {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"minWidth"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *)setMinWidthWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"minWidth"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *)tryGetMinHeight {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"minHeight"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getMinHeight {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"minHeight"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *)setMinHeightWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"minHeight"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *)tryGetMaxWidth {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"maxWidth"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getMaxWidth {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"maxWidth"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *)setMaxWidthWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"maxWidth"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *)tryGetMaxHeight {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"maxHeight"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getMaxHeight {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"maxHeight"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *)setMaxHeightWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"maxHeight"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *)tryGetHeight {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"height"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getHeight {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"height"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *)setHeightWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"height"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *)tryGetWidth {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"width"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getWidth {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"width"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *)setWidthWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"width"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *)tryGetMaxEms {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"maxEms"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getMaxEms {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"maxEms"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *)setMaxEmsWithInt:(jint)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"maxEms"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangInteger_valueOfWithInt_(value)];
  return self;
}

- (ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *)tryGetMinEms {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"minEms"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getMinEms {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"minEms"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *)setMinEmsWithInt:(jint)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"minEms"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangInteger_valueOfWithInt_(value)];
  return self;
}

- (ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *)setEmsWithInt:(jint)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"ems"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangInteger_valueOfWithInt_(value)];
  return self;
}

- (ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *)setEditableWithBoolean:(jboolean)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"editable"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangBoolean_valueOfWithBoolean_(value)];
  return self;
}

- (ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *)setMaxLengthWithInt:(jint)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"maxLength"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangInteger_valueOfWithInt_(value)];
  return self;
}

- (ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *)setTypefaceWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"typeface"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *)setTextStyleWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"textStyle"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *)setFontFamilyWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"fontFamily"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *)setEnabledWithBoolean:(jboolean)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"enabled"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangBoolean_valueOfWithBoolean_(value)];
  return self;
}

- (ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *)tryGetTextColorHighlight {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"textColorHighlight"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getTextColorHighlight {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"textColorHighlight"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *)setTextColorHighlightWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"textColorHighlight"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *)tryGetFirstBaselineToTopHeight {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"firstBaselineToTopHeight"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getFirstBaselineToTopHeight {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"firstBaselineToTopHeight"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *)setFirstBaselineToTopHeightWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"firstBaselineToTopHeight"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *)tryGetLastBaselineToBottomHeight {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"lastBaselineToBottomHeight"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getLastBaselineToBottomHeight {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"lastBaselineToBottomHeight"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *)setLastBaselineToBottomHeightWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"lastBaselineToBottomHeight"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *)setCompletionThresholdWithInt:(jint)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"completionThreshold"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangInteger_valueOfWithInt_(value)];
  return self;
}

- (ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *)setCompletionHintViewWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"completionHintView"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *)tryGetCompletionHint {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"completionHint"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getCompletionHint {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"completionHint"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *)setCompletionHintWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"completionHint"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *)setEntriesWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"entries"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *)tryGetDropDownHeight {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"dropDownHeight"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getDropDownHeight {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"dropDownHeight"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *)setDropDownHeightWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"dropDownHeight"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *)tryGetDropDownHorizontalOffset {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"dropDownHorizontalOffset"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getDropDownHorizontalOffset {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"dropDownHorizontalOffset"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *)setDropDownHorizontalOffsetWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"dropDownHorizontalOffset"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *)tryGetDropDownVerticalOffset {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"dropDownVerticalOffset"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getDropDownVerticalOffset {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"dropDownVerticalOffset"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *)setDropDownVerticalOffsetWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"dropDownVerticalOffset"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *)tryGetDropDownWidth {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"dropDownWidth"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getDropDownWidth {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"dropDownWidth"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *)setDropDownWidthWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"dropDownWidth"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *)setDropDownSelectorWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"dropDownSelector"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *)tryGetDropDownAnchor {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"dropDownAnchor"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getDropDownAnchor {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"dropDownAnchor"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *)setDropDownAnchorWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"dropDownAnchor"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *)setListitemWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"listitem"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *)setOnDismissWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"onDismiss"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *)showDropDownWithBoolean:(jboolean)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"showDropDown"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangBoolean_valueOfWithBoolean_(value)];
  return self;
}

- (ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *)tryGetText {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"text"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getText {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"text"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *)setTextWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"text"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *)tryGetGravity {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"gravity"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getGravity {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"gravity"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *)setGravityWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"gravity"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *)setAutoTextWithBoolean:(jboolean)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"autoText"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangBoolean_valueOfWithBoolean_(value)];
  return self;
}

- (ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *)setCapitalizeWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"capitalize"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *)tryGetCursorVisible {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"cursorVisible"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)isCursorVisible {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"cursorVisible"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *)setCursorVisibleWithBoolean:(jboolean)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"cursorVisible"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangBoolean_valueOfWithBoolean_(value)];
  return self;
}

- (ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *)tryGetTextSize {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"textSize"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getTextSize {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"textSize"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *)setTextSizeWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"textSize"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *)setNumericWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"numeric"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *)setDigitsWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"digits"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *)setPasswordWithBoolean:(jboolean)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"password"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangBoolean_valueOfWithBoolean_(value)];
  return self;
}

- (ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *)setPhoneNumberWithBoolean:(jboolean)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"phoneNumber"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangBoolean_valueOfWithBoolean_(value)];
  return self;
}

- (ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *)tryGetInputType {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"inputType"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getInputType {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"inputType"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *)setInputTypeWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"inputType"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *)tryGetImeOptions {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"imeOptions"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getImeOptions {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"imeOptions"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *)setImeOptionsWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"imeOptions"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *)selectAllOnFocusWithBoolean:(jboolean)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"selectAllOnFocus"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangBoolean_valueOfWithBoolean_(value)];
  return self;
}

- (ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *)selectAllWithBoolean:(jboolean)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"selectAll"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangBoolean_valueOfWithBoolean_(value)];
  return self;
}

- (ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *)setScrollHorizontallyWithBoolean:(jboolean)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"scrollHorizontally"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangBoolean_valueOfWithBoolean_(value)];
  return self;
}

- (ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *)setSingleLineWithBoolean:(jboolean)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"singleLine"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangBoolean_valueOfWithBoolean_(value)];
  return self;
}

- (ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *)setOnEditorActionWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"onEditorAction"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *)setTextColorHintWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"textColorHint"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *)setIosInputAccessoryViewDoneButtonWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosInputAccessoryViewDoneButton"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *)setOnFocusChangeWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"onFocusChange"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *)tryGetTextColor {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"textColor"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getTextColor {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"textColor"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *)setTextColorWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"textColor"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *)tryGetOnTextChange {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"onTextChange"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getOnTextChange {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"onTextChange"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *)setOnTextChangeWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"onTextChange"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *)setOnbeforeTextChangeWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"onbeforeTextChange"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *)setOnafterTextChangeWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"onafterTextChange"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *)setIosBorderStyleWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosBorderStyle"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *)setHintTextFormatWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"hintTextFormat"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *)setTextAllCapsWithBoolean:(jboolean)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"textAllCaps"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangBoolean_valueOfWithBoolean_(value)];
  return self;
}

- (ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *)setIosInputViewWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosInputView"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *)setSetFocusWithBoolean:(jboolean)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"setFocus"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangBoolean_valueOfWithBoolean_(value)];
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder;", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder;", 0x1, 5, 4, -1, -1, -1, -1 },
    { NULL, "LASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder;", 0x1, 6, 4, -1, -1, -1, -1 },
    { NULL, "LASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder;", 0x1, 7, 4, -1, -1, -1, -1 },
    { NULL, "LASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder;", 0x1, 8, 2, -1, -1, -1, -1 },
    { NULL, "LASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder;", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "LASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder;", 0x1, 11, 2, -1, -1, -1, -1 },
    { NULL, "LASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder;", 0x1, 12, 2, -1, -1, -1, -1 },
    { NULL, "LASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder;", 0x1, 13, 2, -1, -1, -1, -1 },
    { NULL, "LASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder;", 0x1, 14, 4, -1, -1, -1, -1 },
    { NULL, "LASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder;", 0x1, 15, 4, -1, -1, -1, -1 },
    { NULL, "LASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder;", 0x1, 16, 4, -1, -1, -1, -1 },
    { NULL, "LASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder;", 0x1, 17, 4, -1, -1, -1, -1 },
    { NULL, "LASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder;", 0x1, 18, 4, -1, -1, -1, -1 },
    { NULL, "LASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder;", 0x1, 19, 4, -1, -1, -1, -1 },
    { NULL, "LASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder;", 0x1, 20, 4, -1, -1, -1, -1 },
    { NULL, "LASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder;", 0x1, 21, 4, -1, -1, -1, -1 },
    { NULL, "LASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder;", 0x1, 22, 4, -1, -1, -1, -1 },
    { NULL, "LASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder;", 0x1, 23, 4, -1, -1, -1, -1 },
    { NULL, "LASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder;", 0x1, 24, 4, -1, -1, -1, -1 },
    { NULL, "LASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder;", 0x1, 25, 4, -1, -1, -1, -1 },
    { NULL, "LASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder;", 0x1, 26, 4, -1, -1, -1, -1 },
    { NULL, "LASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder;", 0x1, 27, 4, -1, -1, -1, -1 },
    { NULL, "LASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder;", 0x1, 28, 4, -1, -1, -1, -1 },
    { NULL, "LASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder;", 0x1, 29, 4, -1, -1, -1, -1 },
    { NULL, "LASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder;", 0x1, 30, 4, -1, -1, -1, -1 },
    { NULL, "LASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder;", 0x1, 31, 4, -1, -1, -1, -1 },
    { NULL, "LASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder;", 0x1, 32, 4, -1, -1, -1, -1 },
    { NULL, "LASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder;", 0x1, 33, 4, -1, -1, -1, -1 },
    { NULL, "LASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder;", 0x1, 34, 35, -1, -1, -1, -1 },
    { NULL, "LASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder;", 0x1, 36, 35, -1, -1, -1, -1 },
    { NULL, "LASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder;", 0x1, 37, 35, -1, -1, -1, -1 },
    { NULL, "LASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder;", 0x1, 38, 4, -1, -1, -1, -1 },
    { NULL, "LASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder;", 0x1, 39, 4, -1, -1, -1, -1 },
    { NULL, "LASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder;", 0x1, 40, 4, -1, -1, -1, -1 },
    { NULL, "LASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder;", 0x1, 41, 4, -1, -1, -1, -1 },
    { NULL, "LASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder;", 0x1, 42, 4, -1, -1, -1, -1 },
    { NULL, "LASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder;", 0x1, 43, 4, -1, -1, -1, -1 },
    { NULL, "LASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder;", 0x1, 44, 35, -1, -1, -1, -1 },
    { NULL, "LASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder;", 0x1, 45, 35, -1, -1, -1, -1 },
    { NULL, "LASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder;", 0x1, 46, 35, -1, -1, -1, -1 },
    { NULL, "LASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder;", 0x1, 47, 2, -1, -1, -1, -1 },
    { NULL, "LASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder;", 0x1, 48, 35, -1, -1, -1, -1 },
    { NULL, "LASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder;", 0x1, 49, 4, -1, -1, -1, -1 },
    { NULL, "LASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder;", 0x1, 50, 4, -1, -1, -1, -1 },
    { NULL, "LASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder;", 0x1, 51, 4, -1, -1, -1, -1 },
    { NULL, "LASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder;", 0x1, 52, 2, -1, -1, -1, -1 },
    { NULL, "LASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder;", 0x1, 53, 4, -1, -1, -1, -1 },
    { NULL, "LASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder;", 0x1, 54, 4, -1, -1, -1, -1 },
    { NULL, "LASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder;", 0x1, 55, 4, -1, -1, -1, -1 },
    { NULL, "LASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder;", 0x1, 56, 35, -1, -1, -1, -1 },
    { NULL, "LASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder;", 0x1, 57, 4, -1, -1, -1, -1 },
    { NULL, "LASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder;", 0x1, 58, 4, -1, -1, -1, -1 },
    { NULL, "LASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder;", 0x1, 59, 4, -1, -1, -1, -1 },
    { NULL, "LASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder;", 0x1, 60, 4, -1, -1, -1, -1 },
    { NULL, "LASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder;", 0x1, 61, 4, -1, -1, -1, -1 },
    { NULL, "LASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder;", 0x1, 62, 4, -1, -1, -1, -1 },
    { NULL, "LASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder;", 0x1, 63, 4, -1, -1, -1, -1 },
    { NULL, "LASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder;", 0x1, 64, 4, -1, -1, -1, -1 },
    { NULL, "LASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder;", 0x1, 65, 4, -1, -1, -1, -1 },
    { NULL, "LASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder;", 0x1, 66, 4, -1, -1, -1, -1 },
    { NULL, "LASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder;", 0x1, 67, 4, -1, -1, -1, -1 },
    { NULL, "LASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder;", 0x1, 68, 2, -1, -1, -1, -1 },
    { NULL, "LASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder;", 0x1, 69, 4, -1, -1, -1, -1 },
    { NULL, "LASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder;", 0x1, 70, 4, -1, -1, -1, -1 },
    { NULL, "LASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder;", 0x1, 71, 2, -1, -1, -1, -1 },
    { NULL, "LASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder;", 0x1, 72, 4, -1, -1, -1, -1 },
    { NULL, "LASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder;", 0x1, 73, 2, -1, -1, -1, -1 },
    { NULL, "LASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder;", 0x1, 74, 4, -1, -1, -1, -1 },
    { NULL, "LASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder;", 0x1, 75, 4, -1, -1, -1, -1 },
    { NULL, "LASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder;", 0x1, 76, 4, -1, -1, -1, -1 },
    { NULL, "LASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder;", 0x1, 77, 2, -1, -1, -1, -1 },
    { NULL, "LASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder;", 0x1, 78, 2, -1, -1, -1, -1 },
    { NULL, "LASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder;", 0x1, 79, 4, -1, -1, -1, -1 },
    { NULL, "LASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder;", 0x1, 80, 4, -1, -1, -1, -1 },
    { NULL, "LASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder;", 0x1, 81, 2, -1, -1, -1, -1 },
    { NULL, "LASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder;", 0x1, 82, 2, -1, -1, -1, -1 },
    { NULL, "LASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder;", 0x1, 83, 2, -1, -1, -1, -1 },
    { NULL, "LASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder;", 0x1, 84, 2, -1, -1, -1, -1 },
    { NULL, "LASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder;", 0x1, 85, 4, -1, -1, -1, -1 },
    { NULL, "LASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder;", 0x1, 86, 4, -1, -1, -1, -1 },
    { NULL, "LASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder;", 0x1, 87, 4, -1, -1, -1, -1 },
    { NULL, "LASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder;", 0x1, 88, 4, -1, -1, -1, -1 },
    { NULL, "LASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder;", 0x1, 89, 4, -1, -1, -1, -1 },
    { NULL, "LASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder;", 0x1, 90, 4, -1, -1, -1, -1 },
    { NULL, "LASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder;", 0x1, 91, 4, -1, -1, -1, -1 },
    { NULL, "LASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder;", 0x1, 92, 4, -1, -1, -1, -1 },
    { NULL, "LASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder;", 0x1, 93, 4, -1, -1, -1, -1 },
    { NULL, "LASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder;", 0x1, 94, 4, -1, -1, -1, -1 },
    { NULL, "LASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder;", 0x1, 95, 2, -1, -1, -1, -1 },
    { NULL, "LASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder;", 0x1, 96, 4, -1, -1, -1, -1 },
    { NULL, "LASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder;", 0x1, 97, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASAutoCompleteTextViewImpl:);
  methods[1].selector = @selector(executeWithBoolean:);
  methods[2].selector = @selector(tryGetIosText);
  methods[3].selector = @selector(getIosText);
  methods[4].selector = @selector(setIosTextWithNSString:);
  methods[5].selector = @selector(tryGetIosPlaceholder);
  methods[6].selector = @selector(getIosPlaceholder);
  methods[7].selector = @selector(setIosPlaceholderWithNSString:);
  methods[8].selector = @selector(tryGetHint);
  methods[9].selector = @selector(getHint);
  methods[10].selector = @selector(setHintWithNSString:);
  methods[11].selector = @selector(tryGetIosTextColor);
  methods[12].selector = @selector(getIosTextColor);
  methods[13].selector = @selector(setIosTextColorWithNSString:);
  methods[14].selector = @selector(tryGetIosAdjustsFontSizeToFitWidth);
  methods[15].selector = @selector(isIosAdjustsFontSizeToFitWidth);
  methods[16].selector = @selector(setIosAdjustsFontSizeToFitWidthWithBoolean:);
  methods[17].selector = @selector(tryGetIosMinimumFontSize);
  methods[18].selector = @selector(getIosMinimumFontSize);
  methods[19].selector = @selector(setIosMinimumFontSizeWithFloat:);
  methods[20].selector = @selector(tryGetIosIsEditing);
  methods[21].selector = @selector(isIosIsEditing);
  methods[22].selector = @selector(tryGetIosClearsOnBeginEditing);
  methods[23].selector = @selector(isIosClearsOnBeginEditing);
  methods[24].selector = @selector(setIosClearsOnBeginEditingWithBoolean:);
  methods[25].selector = @selector(tryGetIosClearsOnInsertion);
  methods[26].selector = @selector(isIosClearsOnInsertion);
  methods[27].selector = @selector(setIosClearsOnInsertionWithBoolean:);
  methods[28].selector = @selector(tryGetIosAllowsEditingTextAttributes);
  methods[29].selector = @selector(isIosAllowsEditingTextAttributes);
  methods[30].selector = @selector(setIosAllowsEditingTextAttributesWithBoolean:);
  methods[31].selector = @selector(tryGetIosBackground);
  methods[32].selector = @selector(getIosBackground);
  methods[33].selector = @selector(setIosBackgroundWithNSString:);
  methods[34].selector = @selector(tryGetIosDisabledBackground);
  methods[35].selector = @selector(getIosDisabledBackground);
  methods[36].selector = @selector(setIosDisabledBackgroundWithNSString:);
  methods[37].selector = @selector(setPaddingWithNSString:);
  methods[38].selector = @selector(tryGetPaddingBottom);
  methods[39].selector = @selector(getPaddingBottom);
  methods[40].selector = @selector(setPaddingBottomWithNSString:);
  methods[41].selector = @selector(tryGetPaddingRight);
  methods[42].selector = @selector(getPaddingRight);
  methods[43].selector = @selector(setPaddingRightWithNSString:);
  methods[44].selector = @selector(tryGetPaddingLeft);
  methods[45].selector = @selector(getPaddingLeft);
  methods[46].selector = @selector(setPaddingLeftWithNSString:);
  methods[47].selector = @selector(tryGetPaddingStart);
  methods[48].selector = @selector(getPaddingStart);
  methods[49].selector = @selector(setPaddingStartWithNSString:);
  methods[50].selector = @selector(tryGetPaddingEnd);
  methods[51].selector = @selector(getPaddingEnd);
  methods[52].selector = @selector(setPaddingEndWithNSString:);
  methods[53].selector = @selector(tryGetPaddingTop);
  methods[54].selector = @selector(getPaddingTop);
  methods[55].selector = @selector(setPaddingTopWithNSString:);
  methods[56].selector = @selector(setPaddingHorizontalWithNSString:);
  methods[57].selector = @selector(setPaddingVerticalWithNSString:);
  methods[58].selector = @selector(setDrawableLeftWithNSString:);
  methods[59].selector = @selector(setDrawableStartWithNSString:);
  methods[60].selector = @selector(setDrawableRightWithNSString:);
  methods[61].selector = @selector(setDrawableEndWithNSString:);
  methods[62].selector = @selector(setDrawableTopWithNSString:);
  methods[63].selector = @selector(setDrawableBottomWithNSString:);
  methods[64].selector = @selector(tryGetDrawablePadding);
  methods[65].selector = @selector(getDrawablePadding);
  methods[66].selector = @selector(setDrawablePaddingWithNSString:);
  methods[67].selector = @selector(setDrawableTintWithNSString:);
  methods[68].selector = @selector(setDrawableTintModeWithNSString:);
  methods[69].selector = @selector(tryGetMinLines);
  methods[70].selector = @selector(getMinLines);
  methods[71].selector = @selector(setMinLinesWithInt:);
  methods[72].selector = @selector(setLinesWithInt:);
  methods[73].selector = @selector(tryGetMaxLines);
  methods[74].selector = @selector(getMaxLines);
  methods[75].selector = @selector(setMaxLinesWithInt:);
  methods[76].selector = @selector(tryGetMinWidth);
  methods[77].selector = @selector(getMinWidth);
  methods[78].selector = @selector(setMinWidthWithNSString:);
  methods[79].selector = @selector(tryGetMinHeight);
  methods[80].selector = @selector(getMinHeight);
  methods[81].selector = @selector(setMinHeightWithNSString:);
  methods[82].selector = @selector(tryGetMaxWidth);
  methods[83].selector = @selector(getMaxWidth);
  methods[84].selector = @selector(setMaxWidthWithNSString:);
  methods[85].selector = @selector(tryGetMaxHeight);
  methods[86].selector = @selector(getMaxHeight);
  methods[87].selector = @selector(setMaxHeightWithNSString:);
  methods[88].selector = @selector(tryGetHeight);
  methods[89].selector = @selector(getHeight);
  methods[90].selector = @selector(setHeightWithNSString:);
  methods[91].selector = @selector(tryGetWidth);
  methods[92].selector = @selector(getWidth);
  methods[93].selector = @selector(setWidthWithNSString:);
  methods[94].selector = @selector(tryGetMaxEms);
  methods[95].selector = @selector(getMaxEms);
  methods[96].selector = @selector(setMaxEmsWithInt:);
  methods[97].selector = @selector(tryGetMinEms);
  methods[98].selector = @selector(getMinEms);
  methods[99].selector = @selector(setMinEmsWithInt:);
  methods[100].selector = @selector(setEmsWithInt:);
  methods[101].selector = @selector(setEditableWithBoolean:);
  methods[102].selector = @selector(setMaxLengthWithInt:);
  methods[103].selector = @selector(setTypefaceWithNSString:);
  methods[104].selector = @selector(setTextStyleWithNSString:);
  methods[105].selector = @selector(setFontFamilyWithNSString:);
  methods[106].selector = @selector(setEnabledWithBoolean:);
  methods[107].selector = @selector(tryGetTextColorHighlight);
  methods[108].selector = @selector(getTextColorHighlight);
  methods[109].selector = @selector(setTextColorHighlightWithNSString:);
  methods[110].selector = @selector(tryGetFirstBaselineToTopHeight);
  methods[111].selector = @selector(getFirstBaselineToTopHeight);
  methods[112].selector = @selector(setFirstBaselineToTopHeightWithNSString:);
  methods[113].selector = @selector(tryGetLastBaselineToBottomHeight);
  methods[114].selector = @selector(getLastBaselineToBottomHeight);
  methods[115].selector = @selector(setLastBaselineToBottomHeightWithNSString:);
  methods[116].selector = @selector(setCompletionThresholdWithInt:);
  methods[117].selector = @selector(setCompletionHintViewWithNSString:);
  methods[118].selector = @selector(tryGetCompletionHint);
  methods[119].selector = @selector(getCompletionHint);
  methods[120].selector = @selector(setCompletionHintWithNSString:);
  methods[121].selector = @selector(setEntriesWithNSString:);
  methods[122].selector = @selector(tryGetDropDownHeight);
  methods[123].selector = @selector(getDropDownHeight);
  methods[124].selector = @selector(setDropDownHeightWithNSString:);
  methods[125].selector = @selector(tryGetDropDownHorizontalOffset);
  methods[126].selector = @selector(getDropDownHorizontalOffset);
  methods[127].selector = @selector(setDropDownHorizontalOffsetWithNSString:);
  methods[128].selector = @selector(tryGetDropDownVerticalOffset);
  methods[129].selector = @selector(getDropDownVerticalOffset);
  methods[130].selector = @selector(setDropDownVerticalOffsetWithNSString:);
  methods[131].selector = @selector(tryGetDropDownWidth);
  methods[132].selector = @selector(getDropDownWidth);
  methods[133].selector = @selector(setDropDownWidthWithNSString:);
  methods[134].selector = @selector(setDropDownSelectorWithNSString:);
  methods[135].selector = @selector(tryGetDropDownAnchor);
  methods[136].selector = @selector(getDropDownAnchor);
  methods[137].selector = @selector(setDropDownAnchorWithNSString:);
  methods[138].selector = @selector(setListitemWithNSString:);
  methods[139].selector = @selector(setOnDismissWithNSString:);
  methods[140].selector = @selector(showDropDownWithBoolean:);
  methods[141].selector = @selector(tryGetText);
  methods[142].selector = @selector(getText);
  methods[143].selector = @selector(setTextWithNSString:);
  methods[144].selector = @selector(tryGetGravity);
  methods[145].selector = @selector(getGravity);
  methods[146].selector = @selector(setGravityWithNSString:);
  methods[147].selector = @selector(setAutoTextWithBoolean:);
  methods[148].selector = @selector(setCapitalizeWithNSString:);
  methods[149].selector = @selector(tryGetCursorVisible);
  methods[150].selector = @selector(isCursorVisible);
  methods[151].selector = @selector(setCursorVisibleWithBoolean:);
  methods[152].selector = @selector(tryGetTextSize);
  methods[153].selector = @selector(getTextSize);
  methods[154].selector = @selector(setTextSizeWithNSString:);
  methods[155].selector = @selector(setNumericWithNSString:);
  methods[156].selector = @selector(setDigitsWithNSString:);
  methods[157].selector = @selector(setPasswordWithBoolean:);
  methods[158].selector = @selector(setPhoneNumberWithBoolean:);
  methods[159].selector = @selector(tryGetInputType);
  methods[160].selector = @selector(getInputType);
  methods[161].selector = @selector(setInputTypeWithNSString:);
  methods[162].selector = @selector(tryGetImeOptions);
  methods[163].selector = @selector(getImeOptions);
  methods[164].selector = @selector(setImeOptionsWithNSString:);
  methods[165].selector = @selector(selectAllOnFocusWithBoolean:);
  methods[166].selector = @selector(selectAllWithBoolean:);
  methods[167].selector = @selector(setScrollHorizontallyWithBoolean:);
  methods[168].selector = @selector(setSingleLineWithBoolean:);
  methods[169].selector = @selector(setOnEditorActionWithNSString:);
  methods[170].selector = @selector(setTextColorHintWithNSString:);
  methods[171].selector = @selector(setIosInputAccessoryViewDoneButtonWithNSString:);
  methods[172].selector = @selector(setOnFocusChangeWithNSString:);
  methods[173].selector = @selector(tryGetTextColor);
  methods[174].selector = @selector(getTextColor);
  methods[175].selector = @selector(setTextColorWithNSString:);
  methods[176].selector = @selector(tryGetOnTextChange);
  methods[177].selector = @selector(getOnTextChange);
  methods[178].selector = @selector(setOnTextChangeWithNSString:);
  methods[179].selector = @selector(setOnbeforeTextChangeWithNSString:);
  methods[180].selector = @selector(setOnafterTextChangeWithNSString:);
  methods[181].selector = @selector(setIosBorderStyleWithNSString:);
  methods[182].selector = @selector(setHintTextFormatWithNSString:);
  methods[183].selector = @selector(setTextAllCapsWithBoolean:);
  methods[184].selector = @selector(setIosInputViewWithNSString:);
  methods[185].selector = @selector(setSetFocusWithBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASAutoCompleteTextViewImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASAutoCompleteTextViewImpl;", "execute", "Z", "setIosText", "LNSString;", "setIosPlaceholder", "setHint", "setIosTextColor", "setIosAdjustsFontSizeToFitWidth", "setIosMinimumFontSize", "F", "setIosClearsOnBeginEditing", "setIosClearsOnInsertion", "setIosAllowsEditingTextAttributes", "setIosBackground", "setIosDisabledBackground", "setPadding", "setPaddingBottom", "setPaddingRight", "setPaddingLeft", "setPaddingStart", "setPaddingEnd", "setPaddingTop", "setPaddingHorizontal", "setPaddingVertical", "setDrawableLeft", "setDrawableStart", "setDrawableRight", "setDrawableEnd", "setDrawableTop", "setDrawableBottom", "setDrawablePadding", "setDrawableTint", "setDrawableTintMode", "setMinLines", "I", "setLines", "setMaxLines", "setMinWidth", "setMinHeight", "setMaxWidth", "setMaxHeight", "setHeight", "setWidth", "setMaxEms", "setMinEms", "setEms", "setEditable", "setMaxLength", "setTypeface", "setTextStyle", "setFontFamily", "setEnabled", "setTextColorHighlight", "setFirstBaselineToTopHeight", "setLastBaselineToBottomHeight", "setCompletionThreshold", "setCompletionHintView", "setCompletionHint", "setEntries", "setDropDownHeight", "setDropDownHorizontalOffset", "setDropDownVerticalOffset", "setDropDownWidth", "setDropDownSelector", "setDropDownAnchor", "setListitem", "setOnDismiss", "showDropDown", "setText", "setGravity", "setAutoText", "setCapitalize", "setCursorVisible", "setTextSize", "setNumeric", "setDigits", "setPassword", "setPhoneNumber", "setInputType", "setImeOptions", "selectAllOnFocus", "selectAll", "setScrollHorizontally", "setSingleLine", "setOnEditorAction", "setTextColorHint", "setIosInputAccessoryViewDoneButton", "setOnFocusChange", "setTextColor", "setOnTextChange", "setOnbeforeTextChange", "setOnafterTextChange", "setIosBorderStyle", "setHintTextFormat", "setTextAllCaps", "setIosInputView", "setSetFocus", "Lcom/ashera/layout/ViewImpl$ViewCommandBuilder<Lcom/ashera/layout/AutoCompleteTextViewImpl$AutoCompleteTextViewCommandBuilder;>;" };
  static const J2ObjcClassInfo _ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder = { "AutoCompleteTextViewCommandBuilder", "com.ashera.layout", ptrTable, methods, fields, 7, 0x1, 186, 1, 0, -1, -1, 98, -1 };
  return &_ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder;
}

@end

void ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder_initWithASAutoCompleteTextViewImpl_(ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *self, ASAutoCompleteTextViewImpl *outer$) {
  self->this$0_ = outer$;
  ASViewImpl_ViewCommandBuilder_init(self);
}

ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *new_ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder_initWithASAutoCompleteTextViewImpl_(ASAutoCompleteTextViewImpl *outer$) {
  J2OBJC_NEW_IMPL(ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder, initWithASAutoCompleteTextViewImpl_, outer$)
}

ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *create_ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder_initWithASAutoCompleteTextViewImpl_(ASAutoCompleteTextViewImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder, initWithASAutoCompleteTextViewImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder)

@implementation ASAutoCompleteTextViewImpl_AutoCompleteTextViewBean

- (instancetype)initWithASAutoCompleteTextViewImpl:(ASAutoCompleteTextViewImpl *)outer$ {
  ASAutoCompleteTextViewImpl_AutoCompleteTextViewBean_initWithASAutoCompleteTextViewImpl_(self, outer$);
  return self;
}

- (id)getIosText {
  return [((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetIosText])) executeWithBoolean:false])) getIosText];
}

- (void)setIosTextWithNSString:(NSString *)value {
  (void) [((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setIosTextWithNSString:value])) executeWithBoolean:true];
}

- (id)getIosPlaceholder {
  return [((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetIosPlaceholder])) executeWithBoolean:false])) getIosPlaceholder];
}

- (void)setIosPlaceholderWithNSString:(NSString *)value {
  (void) [((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setIosPlaceholderWithNSString:value])) executeWithBoolean:true];
}

- (id)getHint {
  return [((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetHint])) executeWithBoolean:false])) getHint];
}

- (void)setHintWithNSString:(NSString *)value {
  (void) [((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setHintWithNSString:value])) executeWithBoolean:true];
}

- (id)getIosTextColor {
  return [((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetIosTextColor])) executeWithBoolean:false])) getIosTextColor];
}

- (void)setIosTextColorWithNSString:(NSString *)value {
  (void) [((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setIosTextColorWithNSString:value])) executeWithBoolean:true];
}

- (id)isIosAdjustsFontSizeToFitWidth {
  return [((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetIosAdjustsFontSizeToFitWidth])) executeWithBoolean:false])) isIosAdjustsFontSizeToFitWidth];
}

- (void)setIosAdjustsFontSizeToFitWidthWithBoolean:(jboolean)value {
  (void) [((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setIosAdjustsFontSizeToFitWidthWithBoolean:value])) executeWithBoolean:true];
}

- (id)getIosMinimumFontSize {
  return [((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetIosMinimumFontSize])) executeWithBoolean:false])) getIosMinimumFontSize];
}

- (void)setIosMinimumFontSizeWithFloat:(jfloat)value {
  (void) [((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setIosMinimumFontSizeWithFloat:value])) executeWithBoolean:true];
}

- (id)isIosIsEditing {
  return [((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetIosIsEditing])) executeWithBoolean:false])) isIosIsEditing];
}

- (id)isIosClearsOnBeginEditing {
  return [((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetIosClearsOnBeginEditing])) executeWithBoolean:false])) isIosClearsOnBeginEditing];
}

- (void)setIosClearsOnBeginEditingWithBoolean:(jboolean)value {
  (void) [((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setIosClearsOnBeginEditingWithBoolean:value])) executeWithBoolean:true];
}

- (id)isIosClearsOnInsertion {
  return [((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetIosClearsOnInsertion])) executeWithBoolean:false])) isIosClearsOnInsertion];
}

- (void)setIosClearsOnInsertionWithBoolean:(jboolean)value {
  (void) [((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setIosClearsOnInsertionWithBoolean:value])) executeWithBoolean:true];
}

- (id)isIosAllowsEditingTextAttributes {
  return [((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetIosAllowsEditingTextAttributes])) executeWithBoolean:false])) isIosAllowsEditingTextAttributes];
}

- (void)setIosAllowsEditingTextAttributesWithBoolean:(jboolean)value {
  (void) [((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setIosAllowsEditingTextAttributesWithBoolean:value])) executeWithBoolean:true];
}

- (id)getIosBackground {
  return [((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetIosBackground])) executeWithBoolean:false])) getIosBackground];
}

- (void)setIosBackgroundWithNSString:(NSString *)value {
  (void) [((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setIosBackgroundWithNSString:value])) executeWithBoolean:true];
}

- (id)getIosDisabledBackground {
  return [((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetIosDisabledBackground])) executeWithBoolean:false])) getIosDisabledBackground];
}

- (void)setIosDisabledBackgroundWithNSString:(NSString *)value {
  (void) [((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setIosDisabledBackgroundWithNSString:value])) executeWithBoolean:true];
}

- (void)setPaddingWithNSString:(NSString *)value {
  (void) [((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setPaddingWithNSString:value])) executeWithBoolean:true];
}

- (id)getPaddingBottom {
  return [((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetPaddingBottom])) executeWithBoolean:false])) getPaddingBottom];
}

- (void)setPaddingBottomWithNSString:(NSString *)value {
  (void) [((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setPaddingBottomWithNSString:value])) executeWithBoolean:true];
}

- (id)getPaddingRight {
  return [((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetPaddingRight])) executeWithBoolean:false])) getPaddingRight];
}

- (void)setPaddingRightWithNSString:(NSString *)value {
  (void) [((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setPaddingRightWithNSString:value])) executeWithBoolean:true];
}

- (id)getPaddingLeft {
  return [((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetPaddingLeft])) executeWithBoolean:false])) getPaddingLeft];
}

- (void)setPaddingLeftWithNSString:(NSString *)value {
  (void) [((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setPaddingLeftWithNSString:value])) executeWithBoolean:true];
}

- (id)getPaddingStart {
  return [((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetPaddingStart])) executeWithBoolean:false])) getPaddingStart];
}

- (void)setPaddingStartWithNSString:(NSString *)value {
  (void) [((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setPaddingStartWithNSString:value])) executeWithBoolean:true];
}

- (id)getPaddingEnd {
  return [((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetPaddingEnd])) executeWithBoolean:false])) getPaddingEnd];
}

- (void)setPaddingEndWithNSString:(NSString *)value {
  (void) [((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setPaddingEndWithNSString:value])) executeWithBoolean:true];
}

- (id)getPaddingTop {
  return [((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetPaddingTop])) executeWithBoolean:false])) getPaddingTop];
}

- (void)setPaddingTopWithNSString:(NSString *)value {
  (void) [((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setPaddingTopWithNSString:value])) executeWithBoolean:true];
}

- (void)setPaddingHorizontalWithNSString:(NSString *)value {
  (void) [((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setPaddingHorizontalWithNSString:value])) executeWithBoolean:true];
}

- (void)setPaddingVerticalWithNSString:(NSString *)value {
  (void) [((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setPaddingVerticalWithNSString:value])) executeWithBoolean:true];
}

- (void)setDrawableLeftWithNSString:(NSString *)value {
  (void) [((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setDrawableLeftWithNSString:value])) executeWithBoolean:true];
}

- (void)setDrawableStartWithNSString:(NSString *)value {
  (void) [((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setDrawableStartWithNSString:value])) executeWithBoolean:true];
}

- (void)setDrawableRightWithNSString:(NSString *)value {
  (void) [((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setDrawableRightWithNSString:value])) executeWithBoolean:true];
}

- (void)setDrawableEndWithNSString:(NSString *)value {
  (void) [((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setDrawableEndWithNSString:value])) executeWithBoolean:true];
}

- (void)setDrawableTopWithNSString:(NSString *)value {
  (void) [((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setDrawableTopWithNSString:value])) executeWithBoolean:true];
}

- (void)setDrawableBottomWithNSString:(NSString *)value {
  (void) [((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setDrawableBottomWithNSString:value])) executeWithBoolean:true];
}

- (id)getDrawablePadding {
  return [((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetDrawablePadding])) executeWithBoolean:false])) getDrawablePadding];
}

- (void)setDrawablePaddingWithNSString:(NSString *)value {
  (void) [((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setDrawablePaddingWithNSString:value])) executeWithBoolean:true];
}

- (void)setDrawableTintWithNSString:(NSString *)value {
  (void) [((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setDrawableTintWithNSString:value])) executeWithBoolean:true];
}

- (void)setDrawableTintModeWithNSString:(NSString *)value {
  (void) [((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setDrawableTintModeWithNSString:value])) executeWithBoolean:true];
}

- (id)getMinLines {
  return [((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetMinLines])) executeWithBoolean:false])) getMinLines];
}

- (void)setMinLinesWithInt:(jint)value {
  (void) [((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setMinLinesWithInt:value])) executeWithBoolean:true];
}

- (void)setLinesWithInt:(jint)value {
  (void) [((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setLinesWithInt:value])) executeWithBoolean:true];
}

- (id)getMaxLines {
  return [((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetMaxLines])) executeWithBoolean:false])) getMaxLines];
}

- (void)setMaxLinesWithInt:(jint)value {
  (void) [((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setMaxLinesWithInt:value])) executeWithBoolean:true];
}

- (id)getMinWidth {
  return [((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetMinWidth])) executeWithBoolean:false])) getMinWidth];
}

- (void)setMinWidthWithNSString:(NSString *)value {
  (void) [((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setMinWidthWithNSString:value])) executeWithBoolean:true];
}

- (id)getMinHeight {
  return [((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetMinHeight])) executeWithBoolean:false])) getMinHeight];
}

- (void)setMinHeightWithNSString:(NSString *)value {
  (void) [((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setMinHeightWithNSString:value])) executeWithBoolean:true];
}

- (id)getMaxWidth {
  return [((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetMaxWidth])) executeWithBoolean:false])) getMaxWidth];
}

- (void)setMaxWidthWithNSString:(NSString *)value {
  (void) [((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setMaxWidthWithNSString:value])) executeWithBoolean:true];
}

- (id)getMaxHeight {
  return [((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetMaxHeight])) executeWithBoolean:false])) getMaxHeight];
}

- (void)setMaxHeightWithNSString:(NSString *)value {
  (void) [((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setMaxHeightWithNSString:value])) executeWithBoolean:true];
}

- (id)getHeight {
  return [((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetHeight])) executeWithBoolean:false])) getHeight];
}

- (void)setHeightWithNSString:(NSString *)value {
  (void) [((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setHeightWithNSString:value])) executeWithBoolean:true];
}

- (id)getWidth {
  return [((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetWidth])) executeWithBoolean:false])) getWidth];
}

- (void)setWidthWithNSString:(NSString *)value {
  (void) [((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setWidthWithNSString:value])) executeWithBoolean:true];
}

- (id)getMaxEms {
  return [((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetMaxEms])) executeWithBoolean:false])) getMaxEms];
}

- (void)setMaxEmsWithInt:(jint)value {
  (void) [((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setMaxEmsWithInt:value])) executeWithBoolean:true];
}

- (id)getMinEms {
  return [((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetMinEms])) executeWithBoolean:false])) getMinEms];
}

- (void)setMinEmsWithInt:(jint)value {
  (void) [((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setMinEmsWithInt:value])) executeWithBoolean:true];
}

- (void)setEmsWithInt:(jint)value {
  (void) [((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setEmsWithInt:value])) executeWithBoolean:true];
}

- (void)setEditableWithBoolean:(jboolean)value {
  (void) [((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setEditableWithBoolean:value])) executeWithBoolean:true];
}

- (void)setMaxLengthWithInt:(jint)value {
  (void) [((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setMaxLengthWithInt:value])) executeWithBoolean:true];
}

- (void)setTypefaceWithNSString:(NSString *)value {
  (void) [((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setTypefaceWithNSString:value])) executeWithBoolean:true];
}

- (void)setTextStyleWithNSString:(NSString *)value {
  (void) [((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setTextStyleWithNSString:value])) executeWithBoolean:true];
}

- (void)setFontFamilyWithNSString:(NSString *)value {
  (void) [((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setFontFamilyWithNSString:value])) executeWithBoolean:true];
}

- (void)setEnabledWithBoolean:(jboolean)value {
  (void) [((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setEnabledWithBoolean:value])) executeWithBoolean:true];
}

- (id)getTextColorHighlight {
  return [((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetTextColorHighlight])) executeWithBoolean:false])) getTextColorHighlight];
}

- (void)setTextColorHighlightWithNSString:(NSString *)value {
  (void) [((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setTextColorHighlightWithNSString:value])) executeWithBoolean:true];
}

- (id)getFirstBaselineToTopHeight {
  return [((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetFirstBaselineToTopHeight])) executeWithBoolean:false])) getFirstBaselineToTopHeight];
}

- (void)setFirstBaselineToTopHeightWithNSString:(NSString *)value {
  (void) [((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setFirstBaselineToTopHeightWithNSString:value])) executeWithBoolean:true];
}

- (id)getLastBaselineToBottomHeight {
  return [((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetLastBaselineToBottomHeight])) executeWithBoolean:false])) getLastBaselineToBottomHeight];
}

- (void)setLastBaselineToBottomHeightWithNSString:(NSString *)value {
  (void) [((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setLastBaselineToBottomHeightWithNSString:value])) executeWithBoolean:true];
}

- (void)setCompletionThresholdWithInt:(jint)value {
  (void) [((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setCompletionThresholdWithInt:value])) executeWithBoolean:true];
}

- (void)setCompletionHintViewWithNSString:(NSString *)value {
  (void) [((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setCompletionHintViewWithNSString:value])) executeWithBoolean:true];
}

- (id)getCompletionHint {
  return [((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetCompletionHint])) executeWithBoolean:false])) getCompletionHint];
}

- (void)setCompletionHintWithNSString:(NSString *)value {
  (void) [((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setCompletionHintWithNSString:value])) executeWithBoolean:true];
}

- (void)setEntriesWithNSString:(NSString *)value {
  (void) [((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setEntriesWithNSString:value])) executeWithBoolean:true];
}

- (id)getDropDownHeight {
  return [((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetDropDownHeight])) executeWithBoolean:false])) getDropDownHeight];
}

- (void)setDropDownHeightWithNSString:(NSString *)value {
  (void) [((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setDropDownHeightWithNSString:value])) executeWithBoolean:true];
}

- (id)getDropDownHorizontalOffset {
  return [((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetDropDownHorizontalOffset])) executeWithBoolean:false])) getDropDownHorizontalOffset];
}

- (void)setDropDownHorizontalOffsetWithNSString:(NSString *)value {
  (void) [((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setDropDownHorizontalOffsetWithNSString:value])) executeWithBoolean:true];
}

- (id)getDropDownVerticalOffset {
  return [((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetDropDownVerticalOffset])) executeWithBoolean:false])) getDropDownVerticalOffset];
}

- (void)setDropDownVerticalOffsetWithNSString:(NSString *)value {
  (void) [((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setDropDownVerticalOffsetWithNSString:value])) executeWithBoolean:true];
}

- (id)getDropDownWidth {
  return [((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetDropDownWidth])) executeWithBoolean:false])) getDropDownWidth];
}

- (void)setDropDownWidthWithNSString:(NSString *)value {
  (void) [((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setDropDownWidthWithNSString:value])) executeWithBoolean:true];
}

- (void)setDropDownSelectorWithNSString:(NSString *)value {
  (void) [((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setDropDownSelectorWithNSString:value])) executeWithBoolean:true];
}

- (id)getDropDownAnchor {
  return [((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetDropDownAnchor])) executeWithBoolean:false])) getDropDownAnchor];
}

- (void)setDropDownAnchorWithNSString:(NSString *)value {
  (void) [((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setDropDownAnchorWithNSString:value])) executeWithBoolean:true];
}

- (void)setListitemWithNSString:(NSString *)value {
  (void) [((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setListitemWithNSString:value])) executeWithBoolean:true];
}

- (void)setOnDismissWithNSString:(NSString *)value {
  (void) [((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setOnDismissWithNSString:value])) executeWithBoolean:true];
}

- (void)showDropDownWithBoolean:(jboolean)value {
  (void) [((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) showDropDownWithBoolean:value])) executeWithBoolean:true];
}

- (id)getText {
  return [((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetText])) executeWithBoolean:false])) getText];
}

- (void)setTextWithNSString:(NSString *)value {
  (void) [((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setTextWithNSString:value])) executeWithBoolean:true];
}

- (id)getGravity {
  return [((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetGravity])) executeWithBoolean:false])) getGravity];
}

- (void)setGravityWithNSString:(NSString *)value {
  (void) [((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setGravityWithNSString:value])) executeWithBoolean:true];
}

- (void)setAutoTextWithBoolean:(jboolean)value {
  (void) [((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setAutoTextWithBoolean:value])) executeWithBoolean:true];
}

- (void)setCapitalizeWithNSString:(NSString *)value {
  (void) [((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setCapitalizeWithNSString:value])) executeWithBoolean:true];
}

- (id)isCursorVisible {
  return [((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetCursorVisible])) executeWithBoolean:false])) isCursorVisible];
}

- (void)setCursorVisibleWithBoolean:(jboolean)value {
  (void) [((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setCursorVisibleWithBoolean:value])) executeWithBoolean:true];
}

- (id)getTextSize {
  return [((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetTextSize])) executeWithBoolean:false])) getTextSize];
}

- (void)setTextSizeWithNSString:(NSString *)value {
  (void) [((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setTextSizeWithNSString:value])) executeWithBoolean:true];
}

- (void)setNumericWithNSString:(NSString *)value {
  (void) [((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setNumericWithNSString:value])) executeWithBoolean:true];
}

- (void)setDigitsWithNSString:(NSString *)value {
  (void) [((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setDigitsWithNSString:value])) executeWithBoolean:true];
}

- (void)setPasswordWithBoolean:(jboolean)value {
  (void) [((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setPasswordWithBoolean:value])) executeWithBoolean:true];
}

- (void)setPhoneNumberWithBoolean:(jboolean)value {
  (void) [((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setPhoneNumberWithBoolean:value])) executeWithBoolean:true];
}

- (id)getInputType {
  return [((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetInputType])) executeWithBoolean:false])) getInputType];
}

- (void)setInputTypeWithNSString:(NSString *)value {
  (void) [((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setInputTypeWithNSString:value])) executeWithBoolean:true];
}

- (id)getImeOptions {
  return [((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetImeOptions])) executeWithBoolean:false])) getImeOptions];
}

- (void)setImeOptionsWithNSString:(NSString *)value {
  (void) [((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setImeOptionsWithNSString:value])) executeWithBoolean:true];
}

- (void)selectAllOnFocusWithBoolean:(jboolean)value {
  (void) [((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) selectAllOnFocusWithBoolean:value])) executeWithBoolean:true];
}

- (void)selectAllWithBoolean:(jboolean)value {
  (void) [((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) selectAllWithBoolean:value])) executeWithBoolean:true];
}

- (void)setScrollHorizontallyWithBoolean:(jboolean)value {
  (void) [((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setScrollHorizontallyWithBoolean:value])) executeWithBoolean:true];
}

- (void)setSingleLineWithBoolean:(jboolean)value {
  (void) [((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setSingleLineWithBoolean:value])) executeWithBoolean:true];
}

- (void)setOnEditorActionWithNSString:(NSString *)value {
  (void) [((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setOnEditorActionWithNSString:value])) executeWithBoolean:true];
}

- (void)setTextColorHintWithNSString:(NSString *)value {
  (void) [((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setTextColorHintWithNSString:value])) executeWithBoolean:true];
}

- (void)setIosInputAccessoryViewDoneButtonWithNSString:(NSString *)value {
  (void) [((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setIosInputAccessoryViewDoneButtonWithNSString:value])) executeWithBoolean:true];
}

- (void)setOnFocusChangeWithNSString:(NSString *)value {
  (void) [((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setOnFocusChangeWithNSString:value])) executeWithBoolean:true];
}

- (id)getTextColor {
  return [((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetTextColor])) executeWithBoolean:false])) getTextColor];
}

- (void)setTextColorWithNSString:(NSString *)value {
  (void) [((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setTextColorWithNSString:value])) executeWithBoolean:true];
}

- (id)getOnTextChange {
  return [((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetOnTextChange])) executeWithBoolean:false])) getOnTextChange];
}

- (void)setOnTextChangeWithNSString:(NSString *)value {
  (void) [((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setOnTextChangeWithNSString:value])) executeWithBoolean:true];
}

- (void)setOnbeforeTextChangeWithNSString:(NSString *)value {
  (void) [((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setOnbeforeTextChangeWithNSString:value])) executeWithBoolean:true];
}

- (void)setOnafterTextChangeWithNSString:(NSString *)value {
  (void) [((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setOnafterTextChangeWithNSString:value])) executeWithBoolean:true];
}

- (void)setIosBorderStyleWithNSString:(NSString *)value {
  (void) [((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setIosBorderStyleWithNSString:value])) executeWithBoolean:true];
}

- (void)setHintTextFormatWithNSString:(NSString *)value {
  (void) [((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setHintTextFormatWithNSString:value])) executeWithBoolean:true];
}

- (void)setTextAllCapsWithBoolean:(jboolean)value {
  (void) [((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setTextAllCapsWithBoolean:value])) executeWithBoolean:true];
}

- (void)setIosInputViewWithNSString:(NSString *)value {
  (void) [((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setIosInputViewWithNSString:value])) executeWithBoolean:true];
}

- (void)setSetFocusWithBoolean:(jboolean)value {
  (void) [((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([((ASAutoCompleteTextViewImpl_AutoCompleteTextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setSetFocusWithBoolean:value])) executeWithBoolean:true];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 7, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 7, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 7, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 21, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 22, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 23, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 24, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 25, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 26, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 27, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 28, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 29, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 30, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 31, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 32, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 33, 34, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 35, 34, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 36, 34, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 37, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 38, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 39, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 40, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 41, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 42, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 43, 34, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 44, 34, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 45, 34, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 46, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 47, 34, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 48, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 49, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 50, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 51, 7, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 52, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 53, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 54, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 55, 34, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 56, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 57, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 58, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 59, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 60, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 61, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 62, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 63, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 64, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 65, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 66, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 67, 7, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 68, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 69, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 70, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 71, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 72, 7, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 73, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 74, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 75, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 76, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 77, 7, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 78, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 79, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 80, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 81, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 82, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 83, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 84, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 85, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 86, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 87, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 88, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 89, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 90, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 91, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 92, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 93, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 94, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 95, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 96, 7, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASAutoCompleteTextViewImpl:);
  methods[1].selector = @selector(getIosText);
  methods[2].selector = @selector(setIosTextWithNSString:);
  methods[3].selector = @selector(getIosPlaceholder);
  methods[4].selector = @selector(setIosPlaceholderWithNSString:);
  methods[5].selector = @selector(getHint);
  methods[6].selector = @selector(setHintWithNSString:);
  methods[7].selector = @selector(getIosTextColor);
  methods[8].selector = @selector(setIosTextColorWithNSString:);
  methods[9].selector = @selector(isIosAdjustsFontSizeToFitWidth);
  methods[10].selector = @selector(setIosAdjustsFontSizeToFitWidthWithBoolean:);
  methods[11].selector = @selector(getIosMinimumFontSize);
  methods[12].selector = @selector(setIosMinimumFontSizeWithFloat:);
  methods[13].selector = @selector(isIosIsEditing);
  methods[14].selector = @selector(isIosClearsOnBeginEditing);
  methods[15].selector = @selector(setIosClearsOnBeginEditingWithBoolean:);
  methods[16].selector = @selector(isIosClearsOnInsertion);
  methods[17].selector = @selector(setIosClearsOnInsertionWithBoolean:);
  methods[18].selector = @selector(isIosAllowsEditingTextAttributes);
  methods[19].selector = @selector(setIosAllowsEditingTextAttributesWithBoolean:);
  methods[20].selector = @selector(getIosBackground);
  methods[21].selector = @selector(setIosBackgroundWithNSString:);
  methods[22].selector = @selector(getIosDisabledBackground);
  methods[23].selector = @selector(setIosDisabledBackgroundWithNSString:);
  methods[24].selector = @selector(setPaddingWithNSString:);
  methods[25].selector = @selector(getPaddingBottom);
  methods[26].selector = @selector(setPaddingBottomWithNSString:);
  methods[27].selector = @selector(getPaddingRight);
  methods[28].selector = @selector(setPaddingRightWithNSString:);
  methods[29].selector = @selector(getPaddingLeft);
  methods[30].selector = @selector(setPaddingLeftWithNSString:);
  methods[31].selector = @selector(getPaddingStart);
  methods[32].selector = @selector(setPaddingStartWithNSString:);
  methods[33].selector = @selector(getPaddingEnd);
  methods[34].selector = @selector(setPaddingEndWithNSString:);
  methods[35].selector = @selector(getPaddingTop);
  methods[36].selector = @selector(setPaddingTopWithNSString:);
  methods[37].selector = @selector(setPaddingHorizontalWithNSString:);
  methods[38].selector = @selector(setPaddingVerticalWithNSString:);
  methods[39].selector = @selector(setDrawableLeftWithNSString:);
  methods[40].selector = @selector(setDrawableStartWithNSString:);
  methods[41].selector = @selector(setDrawableRightWithNSString:);
  methods[42].selector = @selector(setDrawableEndWithNSString:);
  methods[43].selector = @selector(setDrawableTopWithNSString:);
  methods[44].selector = @selector(setDrawableBottomWithNSString:);
  methods[45].selector = @selector(getDrawablePadding);
  methods[46].selector = @selector(setDrawablePaddingWithNSString:);
  methods[47].selector = @selector(setDrawableTintWithNSString:);
  methods[48].selector = @selector(setDrawableTintModeWithNSString:);
  methods[49].selector = @selector(getMinLines);
  methods[50].selector = @selector(setMinLinesWithInt:);
  methods[51].selector = @selector(setLinesWithInt:);
  methods[52].selector = @selector(getMaxLines);
  methods[53].selector = @selector(setMaxLinesWithInt:);
  methods[54].selector = @selector(getMinWidth);
  methods[55].selector = @selector(setMinWidthWithNSString:);
  methods[56].selector = @selector(getMinHeight);
  methods[57].selector = @selector(setMinHeightWithNSString:);
  methods[58].selector = @selector(getMaxWidth);
  methods[59].selector = @selector(setMaxWidthWithNSString:);
  methods[60].selector = @selector(getMaxHeight);
  methods[61].selector = @selector(setMaxHeightWithNSString:);
  methods[62].selector = @selector(getHeight);
  methods[63].selector = @selector(setHeightWithNSString:);
  methods[64].selector = @selector(getWidth);
  methods[65].selector = @selector(setWidthWithNSString:);
  methods[66].selector = @selector(getMaxEms);
  methods[67].selector = @selector(setMaxEmsWithInt:);
  methods[68].selector = @selector(getMinEms);
  methods[69].selector = @selector(setMinEmsWithInt:);
  methods[70].selector = @selector(setEmsWithInt:);
  methods[71].selector = @selector(setEditableWithBoolean:);
  methods[72].selector = @selector(setMaxLengthWithInt:);
  methods[73].selector = @selector(setTypefaceWithNSString:);
  methods[74].selector = @selector(setTextStyleWithNSString:);
  methods[75].selector = @selector(setFontFamilyWithNSString:);
  methods[76].selector = @selector(setEnabledWithBoolean:);
  methods[77].selector = @selector(getTextColorHighlight);
  methods[78].selector = @selector(setTextColorHighlightWithNSString:);
  methods[79].selector = @selector(getFirstBaselineToTopHeight);
  methods[80].selector = @selector(setFirstBaselineToTopHeightWithNSString:);
  methods[81].selector = @selector(getLastBaselineToBottomHeight);
  methods[82].selector = @selector(setLastBaselineToBottomHeightWithNSString:);
  methods[83].selector = @selector(setCompletionThresholdWithInt:);
  methods[84].selector = @selector(setCompletionHintViewWithNSString:);
  methods[85].selector = @selector(getCompletionHint);
  methods[86].selector = @selector(setCompletionHintWithNSString:);
  methods[87].selector = @selector(setEntriesWithNSString:);
  methods[88].selector = @selector(getDropDownHeight);
  methods[89].selector = @selector(setDropDownHeightWithNSString:);
  methods[90].selector = @selector(getDropDownHorizontalOffset);
  methods[91].selector = @selector(setDropDownHorizontalOffsetWithNSString:);
  methods[92].selector = @selector(getDropDownVerticalOffset);
  methods[93].selector = @selector(setDropDownVerticalOffsetWithNSString:);
  methods[94].selector = @selector(getDropDownWidth);
  methods[95].selector = @selector(setDropDownWidthWithNSString:);
  methods[96].selector = @selector(setDropDownSelectorWithNSString:);
  methods[97].selector = @selector(getDropDownAnchor);
  methods[98].selector = @selector(setDropDownAnchorWithNSString:);
  methods[99].selector = @selector(setListitemWithNSString:);
  methods[100].selector = @selector(setOnDismissWithNSString:);
  methods[101].selector = @selector(showDropDownWithBoolean:);
  methods[102].selector = @selector(getText);
  methods[103].selector = @selector(setTextWithNSString:);
  methods[104].selector = @selector(getGravity);
  methods[105].selector = @selector(setGravityWithNSString:);
  methods[106].selector = @selector(setAutoTextWithBoolean:);
  methods[107].selector = @selector(setCapitalizeWithNSString:);
  methods[108].selector = @selector(isCursorVisible);
  methods[109].selector = @selector(setCursorVisibleWithBoolean:);
  methods[110].selector = @selector(getTextSize);
  methods[111].selector = @selector(setTextSizeWithNSString:);
  methods[112].selector = @selector(setNumericWithNSString:);
  methods[113].selector = @selector(setDigitsWithNSString:);
  methods[114].selector = @selector(setPasswordWithBoolean:);
  methods[115].selector = @selector(setPhoneNumberWithBoolean:);
  methods[116].selector = @selector(getInputType);
  methods[117].selector = @selector(setInputTypeWithNSString:);
  methods[118].selector = @selector(getImeOptions);
  methods[119].selector = @selector(setImeOptionsWithNSString:);
  methods[120].selector = @selector(selectAllOnFocusWithBoolean:);
  methods[121].selector = @selector(selectAllWithBoolean:);
  methods[122].selector = @selector(setScrollHorizontallyWithBoolean:);
  methods[123].selector = @selector(setSingleLineWithBoolean:);
  methods[124].selector = @selector(setOnEditorActionWithNSString:);
  methods[125].selector = @selector(setTextColorHintWithNSString:);
  methods[126].selector = @selector(setIosInputAccessoryViewDoneButtonWithNSString:);
  methods[127].selector = @selector(setOnFocusChangeWithNSString:);
  methods[128].selector = @selector(getTextColor);
  methods[129].selector = @selector(setTextColorWithNSString:);
  methods[130].selector = @selector(getOnTextChange);
  methods[131].selector = @selector(setOnTextChangeWithNSString:);
  methods[132].selector = @selector(setOnbeforeTextChangeWithNSString:);
  methods[133].selector = @selector(setOnafterTextChangeWithNSString:);
  methods[134].selector = @selector(setIosBorderStyleWithNSString:);
  methods[135].selector = @selector(setHintTextFormatWithNSString:);
  methods[136].selector = @selector(setTextAllCapsWithBoolean:);
  methods[137].selector = @selector(setIosInputViewWithNSString:);
  methods[138].selector = @selector(setSetFocusWithBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASAutoCompleteTextViewImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASAutoCompleteTextViewImpl;", "setIosText", "LNSString;", "setIosPlaceholder", "setHint", "setIosTextColor", "setIosAdjustsFontSizeToFitWidth", "Z", "setIosMinimumFontSize", "F", "setIosClearsOnBeginEditing", "setIosClearsOnInsertion", "setIosAllowsEditingTextAttributes", "setIosBackground", "setIosDisabledBackground", "setPadding", "setPaddingBottom", "setPaddingRight", "setPaddingLeft", "setPaddingStart", "setPaddingEnd", "setPaddingTop", "setPaddingHorizontal", "setPaddingVertical", "setDrawableLeft", "setDrawableStart", "setDrawableRight", "setDrawableEnd", "setDrawableTop", "setDrawableBottom", "setDrawablePadding", "setDrawableTint", "setDrawableTintMode", "setMinLines", "I", "setLines", "setMaxLines", "setMinWidth", "setMinHeight", "setMaxWidth", "setMaxHeight", "setHeight", "setWidth", "setMaxEms", "setMinEms", "setEms", "setEditable", "setMaxLength", "setTypeface", "setTextStyle", "setFontFamily", "setEnabled", "setTextColorHighlight", "setFirstBaselineToTopHeight", "setLastBaselineToBottomHeight", "setCompletionThreshold", "setCompletionHintView", "setCompletionHint", "setEntries", "setDropDownHeight", "setDropDownHorizontalOffset", "setDropDownVerticalOffset", "setDropDownWidth", "setDropDownSelector", "setDropDownAnchor", "setListitem", "setOnDismiss", "showDropDown", "setText", "setGravity", "setAutoText", "setCapitalize", "setCursorVisible", "setTextSize", "setNumeric", "setDigits", "setPassword", "setPhoneNumber", "setInputType", "setImeOptions", "selectAllOnFocus", "selectAll", "setScrollHorizontally", "setSingleLine", "setOnEditorAction", "setTextColorHint", "setIosInputAccessoryViewDoneButton", "setOnFocusChange", "setTextColor", "setOnTextChange", "setOnbeforeTextChange", "setOnafterTextChange", "setIosBorderStyle", "setHintTextFormat", "setTextAllCaps", "setIosInputView", "setSetFocus" };
  static const J2ObjcClassInfo _ASAutoCompleteTextViewImpl_AutoCompleteTextViewBean = { "AutoCompleteTextViewBean", "com.ashera.layout", ptrTable, methods, fields, 7, 0x1, 139, 1, 0, -1, -1, -1, -1 };
  return &_ASAutoCompleteTextViewImpl_AutoCompleteTextViewBean;
}

@end

void ASAutoCompleteTextViewImpl_AutoCompleteTextViewBean_initWithASAutoCompleteTextViewImpl_(ASAutoCompleteTextViewImpl_AutoCompleteTextViewBean *self, ASAutoCompleteTextViewImpl *outer$) {
  self->this$0_ = outer$;
  ASViewImpl_ViewBean_initWithASIWidget_(self, outer$);
}

ASAutoCompleteTextViewImpl_AutoCompleteTextViewBean *new_ASAutoCompleteTextViewImpl_AutoCompleteTextViewBean_initWithASAutoCompleteTextViewImpl_(ASAutoCompleteTextViewImpl *outer$) {
  J2OBJC_NEW_IMPL(ASAutoCompleteTextViewImpl_AutoCompleteTextViewBean, initWithASAutoCompleteTextViewImpl_, outer$)
}

ASAutoCompleteTextViewImpl_AutoCompleteTextViewBean *create_ASAutoCompleteTextViewImpl_AutoCompleteTextViewBean_initWithASAutoCompleteTextViewImpl_(ASAutoCompleteTextViewImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASAutoCompleteTextViewImpl_AutoCompleteTextViewBean, initWithASAutoCompleteTextViewImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASAutoCompleteTextViewImpl_AutoCompleteTextViewBean)
