//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-ios-widgets\ios_widget_library\src\main\java\com\ashera\layout\ViewImpl.java
//

#define J2OBJC_IMPORTED_BY_JAVA_IMPLEMENTATION 1




#include "AbstractBitFlagConverter.h"
#include "AbstractEnumToIntConverter.h"
#include "AccelerateInterpolator.h"
#include "Animator.h"
#include "AnimatorSet.h"
#include "AnticipateInterpolator.h"
#include "AnticipateOvershootInterpolator.h"
#include "ArgbEvaluator.h"
#include "BaseHasWidgets.h"
#include "BaseWidget.h"
#include "Chronometer.h"
#include "Color.h"
#include "ColorDrawable.h"
#include "ColorStateList.h"
#include "ContentHandlerAdapter.h"
#include "ConverterFactory.h"
#include "CssDataHolder.h"
#include "CssTree.h"
#include "CycleInterpolator.h"
#include "DecelerateInterpolator.h"
#include "Drawable.h"
#include "EventCommand.h"
#include "EventCommandFactory.h"
#include "EventExpressionParser.h"
#include "Field.h"
#include "Form.h"
#include "FormElement.h"
#include "HasWidgets.h"
#include "HtmlParser.h"
#include "IActivity.h"
#include "IAttributable.h"
#include "IFragment.h"
#include "ILifeCycleDecorator.h"
#include "IListener.h"
#include "IMaxDimension.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "IWidget.h"
#include "IdGenerator.h"
#include "Interpolator.h"
#include "J2ObjC_source.h"
#include "KeyEvent.h"
#include "LayoutNativeVars.h"
#include "MenuItem.h"
#include "MotionEvent.h"
#include "ObjectAnimator.h"
#include "OvershootInterpolator.h"
#include "Path.h"
#include "PluginInvoker.h"
#include "PointF.h"
#include "Property.h"
#include "PropertyValuesHolder.h"
#include "Rect.h"
#include "SimpleWrapableView.h"
#include "StateListDrawable.h"
#include "StringUtils.h"
#include "StyleSheet.h"
#include "SwipeHelper.h"
#include "TypeConverter.h"
#include "TypeEvaluator.h"
#include "Validation.h"
#include "ValidationErrorLabel.h"
#include "ValidatorFactory.h"
#include "ValueAnimator.h"
#include "View.h"
#include "ViewCompat.h"
#include "ViewImpl.h"
#include "ViewOverlay.h"
#include "WidgetAttribute.h"
#include "WidgetAttributeValue.h"
#include "WidgetFactory.h"
#include "java/io/PrintStream.h"
#include "java/lang/Boolean.h"
#include "java/lang/Character.h"
#include "java/lang/Float.h"
#include "java/lang/Integer.h"
#include "java/lang/Runnable.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"
#include "java/util/Collections.h"
#include "java/util/Comparator.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/Stack.h"
#include "java/util/function/Function.h"
#include "java/util/function/ToDoubleFunction.h"
#include "java/util/function/ToIntFunction.h"
#include "java/util/function/ToLongFunction.h"
#include "org/xml/sax/Attributes.h"

#include <UIKit/UIKit.h>
#include "ASUIView.h"

#include "ASUITapGestureRecognizer.h"
#include "ASUISwipeGestureRecognizer.h"
#include "ASUILongTapGestureRecognizer.h"


@class NSString;


#pragma clang diagnostic error "-Wreturn-type"
#pragma clang diagnostic ignored "-Wswitch"


#pragma clang diagnostic ignored "-Wprotocol"

@interface ASViewImpl ()

- (instancetype)init;

+ (void)setAttributeWithASIWidget:(id<ASIWidget>)w
                           withId:(id)nativeWidget
            withASWidgetAttribute:(ASWidgetAttribute *)key
                     withNSString:(NSString *)strValue
                           withId:(id)objValue
        withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator;

+ (id)getModelSyncEventsWithASIWidget:(id<ASIWidget>)w;

+ (void)setModelSyncEventsWithASIWidget:(id<ASIWidget>)w
                           withNSString:(NSString *)strValue
                                 withId:(id)objValue
                             withADView:(ADView *)view;

+ (void)setModelParamWithASIWidget:(id<ASIWidget>)w
                      withNSString:(NSString *)strValue
                            withId:(id)objValue
                        withADView:(ADView *)view;

+ (void)setModelPojoToUiWithASIWidget:(id<ASIWidget>)w
                         withNSString:(NSString *)strValue
                               withId:(id)objValue
                           withADView:(ADView *)view;

+ (void)setModelUiToPojoWithASIWidget:(id<ASIWidget>)w
                         withNSString:(NSString *)strValue
                               withId:(id)objValue
                           withADView:(ADView *)view;

+ (void)notifyDataSetChangedWithASIWidget:(id<ASIWidget>)w
                                   withId:(id)objValue;

+ (void)updateModelDataWithASIWidget:(id<ASIWidget>)w
                              withId:(id)expression
                              withId:(id)payload;

+ (id)getModelUiToPojoWithASIWidget:(id<ASIWidget>)w;

+ (id)getModelPojoToUiWithASIWidget:(id<ASIWidget>)w;

+ (id)getModelParamWithASIWidget:(id<ASIWidget>)w;

+ (void)setModelPojoToUiParamsWithASIWidget:(id<ASIWidget>)w
                                     withId:(id)objValue;

+ (void)setModelUiToPojoEventIdsWithASIWidget:(id<ASIWidget>)w
                                       withId:(id)objValue;

+ (void)setZIndexWithASIWidget:(id<ASIWidget>)w
                        withId:(id)objValue;

+ (void)setSelectedWithId:(id)objValue
               withADView:(ADView *)view;

+ (id)getSelectedWithASIWidget:(id<ASIWidget>)w
                    withADView:(ADView *)view;

+ (void)setInvalidateOnFrameChangeWithASIWidget:(id<ASIWidget>)w
                                         withId:(id)objValue;

+ (void)setBackgroundRepeatWithASIWidget:(id<ASIWidget>)w
                            withNSString:(NSString *)strValue
                                  withId:(id)objValue
                              withADView:(ADView *)view;

+ (void)setForegroundRepeatWithASIWidget:(id<ASIWidget>)w
                            withNSString:(NSString *)strValue
                                  withId:(id)objValue
                              withADView:(ADView *)view;

+ (void)validateFormWithASIWidget:(id<ASIWidget>)w
                           withId:(id)objValue;

+ (id)getValidateFormResultWithASIWidget:(id<ASIWidget>)w;

+ (void)setValidationWithASIWidget:(id<ASIWidget>)w
                            withId:(id)objValue;

+ (void)setTypeWithASIWidget:(id<ASIWidget>)w
                withNSString:(NSString *)value
                      withId:(id)objValue;

+ (void)setPatternWithASIWidget:(id<ASIWidget>)w
                         withId:(id)objValue;

+ (void)setMaxWithASIWidget:(id<ASIWidget>)w
                     withId:(id)objValue;

+ (void)setMinWithASIWidget:(id<ASIWidget>)w
                     withId:(id)objValue;

+ (void)setMaxlengthWithASIWidget:(id<ASIWidget>)w
                           withId:(id)objValue;

+ (void)setMinlengthWithASIWidget:(id<ASIWidget>)w
                           withId:(id)objValue;

+ (void)setRequiredWithASIWidget:(id<ASIWidget>)w
                          withId:(id)objValue;

+ (void)setCustomErrorMessageKeysWithASIWidget:(id<ASIWidget>)w
                                        withId:(id)objValue;

+ (void)setCustomErrorMessageValuesWithASIWidget:(id<ASIWidget>)w
                                          withId:(id)objValue;

+ (void)setValidationErrorDisplayWithASIWidget:(id<ASIWidget>)w
                                  withNSString:(NSString *)strValue
                                        withId:(id)objValue;

+ (void)setErrorStyleWithASIWidget:(id<ASIWidget>)w
                        withADView:(ADView *)view
                            withId:(id)objValue;

+ (void)setStyleWithASIWidget:(id<ASIWidget>)w
                   withADView:(ADView *)view
                       withId:(id)objValue;

+ (void)setAnimatorListenerWithASIWidget:(id<ASIWidget>)w
         withADAnimator_AnimatorListener:(id<ADAnimator_AnimatorListener>)animatorListener;

+ (void)endAnimatorWithASIWidget:(id<ASIWidget>)w
                          withId:(id)objValue;

+ (void)startAnimatorWithASIWidget:(id<ASIWidget>)w
                            withId:(id)objValue;

+ (id)getLayoutDirectionWithASIWidget:(id<ASIWidget>)w;

+ (void)setTextAlignmentWithASIWidget:(id<ASIWidget>)w
                               withId:(id)objValue;

+ (void)setTextDirectionWithASIWidget:(id<ASIWidget>)w
                               withId:(id)objValue;

+ (id)getTextAlignmentWithASIWidget:(id<ASIWidget>)w;

+ (id)getTextDirectionWithASIWidget:(id<ASIWidget>)w;

+ (void)setMinHeightWithASIWidget:(id<ASIWidget>)w
                           withId:(id)objValue;

+ (void)setMinWidthWithASIWidget:(id<ASIWidget>)w
                          withId:(id)objValue;

+ (id)getMinHeightWithASIWidget:(id<ASIWidget>)w;

+ (id)getMinWidthWithASIWidget:(id<ASIWidget>)w;

+ (id)getVisibilityWithASIWidget:(id<ASIWidget>)w;

+ (void)setLongClickableWithASIWidget:(id<ASIWidget>)w
                               withId:(id)objValue;

+ (id)getLongClickableWithASIWidget:(id<ASIWidget>)w;

+ (void)setDuplicateParentStateWithASIWidget:(id<ASIWidget>)w
                                      withId:(id)objValue;

+ (id)getDuplicateParentStateWithASIWidget:(id<ASIWidget>)w;

+ (id)getClickableWithASIWidget:(id<ASIWidget>)w;

+ (void)invalidateWithASIWidget:(id<ASIWidget>)w;

+ (id)getClipDataWithADView_DragEvent:(ADView_DragEvent *)event;

+ (void)setElevationWithASIWidget:(id<ASIWidget>)w
                           withId:(id)objValue;

+ (void)setBottomWithASIWidget:(id<ASIWidget>)w
                        withId:(id)objValue;

+ (void)setTopWithASIWidget:(id<ASIWidget>)w
                     withId:(id)objValue;

+ (void)setRightWithASIWidget:(id<ASIWidget>)w
                       withId:(id)objValue;

+ (void)setLeftWithASIWidget:(id<ASIWidget>)w
                      withId:(id)objValue;

+ (id)getBottomWithASIWidget:(id<ASIWidget>)w;

+ (id)getTopWithASIWidget:(id<ASIWidget>)w;

+ (id)getRightWithASIWidget:(id<ASIWidget>)w;

+ (id)getLeftWithASIWidget:(id<ASIWidget>)w;

+ (void)setAnimatorXmlWithASIWidget:(id<ASIWidget>)w
                             withId:(id)objValue;

+ (void)setBgOnControlWithASIWidget:(id<ASIWidget>)w
                             withId:(id)uiview
                             withId:(id)objValue;

+ (void)setBackgroundWithASIWidget:(id<ASIWidget>)w
                            withId:(id)nativeView
                            withId:(id)objValue;

+ (void)updateWidthAndHeightWithASIWidget:(id<ASIWidget>)w
                  withADStateListDrawable:(ADStateListDrawable *)background
                                   withId:(id)value
                             withNSString:(NSString *)type
                             withNSString:(NSString *)conveterType;

+ (bool)isResizableImageWithId:(id)obj;

+ (void)clearBgColorWithId:(id)view
                    withId:(id)value;

+ (void)nativeSetBgColorWithId:(id)view
                        withId:(id)value;

+ (void)setOnClickWithASIWidget:(id<ASIWidget>)w
                         withId:(id)nativeView
                         withId:(id)objValue;

+ (bool)isNativeRtlSupported;

+ (void)setBackgroundTintModeWithASIWidget:(id<ASIWidget>)w
                                    withId:(id)objValue;

+ (void)setBackgroundTintWithASIWidget:(id<ASIWidget>)w
                                withId:(id)objValue;

+ (void)setForegroundTintModeWithASIWidget:(id<ASIWidget>)w
                                    withId:(id)objValue;

+ (void)setForegroundTintWithASIWidget:(id<ASIWidget>)w
                                withId:(id)objValue;

+ (void)setForegroundWithASIWidget:(id<ASIWidget>)w
                            withId:(id)nativeWidget
                            withId:(id)objValue;

+ (void)setFgOnControlWithASIWidget:(id<ASIWidget>)w
                             withId:(id)nativeWidget
                             withId:(id)objValue;

+ (id)getClickableWithId:(id)nativeWidget;

+ (bool)nativeGetClickableWithId:(id)view;

+ (void)setClickableWithASIWidget:(id<ASIWidget>)w
                           withId:(id)nativeWidget
                           withId:(id)objValue;

+ (void)nativeSetClickableWithId:(id)view
                     withBoolean:(bool)clickable;

+ (void)setOnLongClickWithASIWidget:(id<ASIWidget>)w
                             withId:(id)nativeView
                             withId:(id)objValue;

+ (void)setTranslationXWithASIWidget:(id<ASIWidget>)w
                              withId:(id)objValue;

+ (void)relayoutWithASIWidget:(id<ASIWidget>)w;

+ (void)setTranslationYWithASIWidget:(id<ASIWidget>)w
                              withId:(id)objValue;

+ (void)setTranslationZWithASIWidget:(id<ASIWidget>)w
                              withId:(id)objValue;

+ (void)setTransformPivotYWithASIWidget:(id<ASIWidget>)w
                                 withId:(id)objValue;

+ (void)setTransformPivotXWithASIWidget:(id<ASIWidget>)w
                                 withId:(id)objValue;

+ (void)setScaleYWithASIWidget:(id<ASIWidget>)w
                        withId:(id)objValue;

+ (void)setScaleXWithASIWidget:(id<ASIWidget>)w
                        withId:(id)objValue;

+ (void)setRotationYWithASIWidget:(id<ASIWidget>)w
                           withId:(id)objValue;

+ (void)setRotationXWithASIWidget:(id<ASIWidget>)w
                           withId:(id)objValue;

+ (void)setRotationWithASIWidget:(id<ASIWidget>)w
                          withId:(id)objValue;

+ (id)getTranslationXWithASIWidget:(id<ASIWidget>)w;

+ (id)getTransformPivotYWithASIWidget:(id<ASIWidget>)w;

+ (id)getTransformPivotXWithASIWidget:(id<ASIWidget>)w;

+ (id)getScaleYWithASIWidget:(id<ASIWidget>)w;

+ (id)getScaleXWithASIWidget:(id<ASIWidget>)w;

+ (id)getRotationYWithASIWidget:(id<ASIWidget>)w;

+ (id)getRotationXWithASIWidget:(id<ASIWidget>)w;

+ (id)getRotationWithASIWidget:(id<ASIWidget>)w;

+ (id)getTranslationZWithASIWidget:(id<ASIWidget>)w;

+ (id)getTranslationYWithASIWidget:(id<ASIWidget>)w;

+ (id)getForegroundTintWithASIWidget:(id<ASIWidget>)w;

+ (id)getForegroundTintModeWithASIWidget:(id<ASIWidget>)w;

+ (id)getBackgroundTintModeWithASIWidget:(id<ASIWidget>)w;

+ (id)getBackgroundTintWithASIWidget:(id<ASIWidget>)w;

+ (bool)isMirrorSupported;

+ (void)setOnTouchWithASIWidget:(id<ASIWidget>)w
                         withId:(id)nativeView
                         withId:(id)objValue;

+ (void)setOnDragWithASIWidget:(id<ASIWidget>)w
                        withId:(id)nativeView
                        withId:(id)objValue;

+ (void)setAsDragSourceWithASIWidget:(id<ASIWidget>)w
                              withId:(id)nativeWidget
                              withId:(id)objValue;

+ (id)getForegroundWithASIWidget:(id<ASIWidget>)w;

+ (id)getBackgroundWithASIWidget:(id<ASIWidget>)w;

+ (void)setOnKeyWithASIWidget:(id<ASIWidget>)w
                       withId:(id)objValue;

+ (void)setLayerCornerRadiusWithId:(id)nativeWidget
                            withId:(id)objValue;

+ (void)nativeSetLayerCornerRadiusWithId:(id)nativeWidget
                               withFloat:(float)value;

+ (void)setLayerBorderColorWithId:(id)nativeWidget
                           withId:(id)objValue;

+ (void)nativeLayerBorderColorWithId:(id)nativeWidget
                              withId:(id)value;

+ (void)setLayerBorderWidthWithId:(id)nativeWidget
                           withId:(id)objValue;

+ (void)nativeLayerBorderWidthWithId:(id)nativeWidget
                           withFloat:(float)value;

+ (void)setLayerMasksToBoundsWithId:(id)nativeWidget
                             withId:(id)objValue;

+ (void)nativeLayerBMasksToBoundsWithId:(id)nativeWidget
                            withBoolean:(bool)value;

+ (void)nativeBringToFrontWithJavaUtilList:(id<JavaUtilList>)widgets;

+ (void)setNativeIdWithASIWidget:(id<ASIWidget>)w
                    withNSString:(NSString *)strValue;

+ (void)setOutsideTouchableWithASIWidget:(id<ASIWidget>)w
                            withNSString:(NSString *)strValue
                                  withId:(id)objValue
                              withADView:(ADView *)view;

+ (void)setOnSwipeListenerWithASIWidget:(id<ASIWidget>)w
        withASSwipeHelper_SwipeListener:(id<ASSwipeHelper_SwipeListener>)swipeListener;

+ (void)setOutlineSpotShadowColorWithASIWidget:(id<ASIWidget>)w
                                        withId:(id)objValue;

+ (void)setOutlineAmbientShadowColorWithASIWidget:(id<ASIWidget>)w
                                           withId:(id)objValue;

+ (void)setShadowColorWithId:(id)view
                      withId:(id)color;

+ (void)setCornerRadiusWithASIWidget:(id<ASIWidget>)w
                              withId:(id)nativeWidget
                              withId:(id)objValue;

+ (void)setCornerRadiusOnViewWithId:(id)view
                          withFloat:(float)radius;

@end

__attribute__((unused)) static void ASViewImpl_init(ASViewImpl *self);

__attribute__((unused)) static ASViewImpl *new_ASViewImpl_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASViewImpl *create_ASViewImpl_init(void);

__attribute__((unused)) static void ASViewImpl_setAttributeWithASIWidget_withId_withASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(id<ASIWidget> w, id nativeWidget, ASWidgetAttribute *key, NSString *strValue, id objValue, id<ASILifeCycleDecorator> decorator);

__attribute__((unused)) static id ASViewImpl_getModelSyncEventsWithASIWidget_(id<ASIWidget> w);

__attribute__((unused)) static void ASViewImpl_setModelSyncEventsWithASIWidget_withNSString_withId_withADView_(id<ASIWidget> w, NSString *strValue, id objValue, ADView *view);

__attribute__((unused)) static void ASViewImpl_setModelParamWithASIWidget_withNSString_withId_withADView_(id<ASIWidget> w, NSString *strValue, id objValue, ADView *view);

__attribute__((unused)) static void ASViewImpl_setModelPojoToUiWithASIWidget_withNSString_withId_withADView_(id<ASIWidget> w, NSString *strValue, id objValue, ADView *view);

__attribute__((unused)) static void ASViewImpl_setModelUiToPojoWithASIWidget_withNSString_withId_withADView_(id<ASIWidget> w, NSString *strValue, id objValue, ADView *view);

__attribute__((unused)) static void ASViewImpl_notifyDataSetChangedWithASIWidget_withId_(id<ASIWidget> w, id objValue);

__attribute__((unused)) static void ASViewImpl_updateModelDataWithASIWidget_withId_withId_(id<ASIWidget> w, id expression, id payload);

__attribute__((unused)) static id ASViewImpl_getModelUiToPojoWithASIWidget_(id<ASIWidget> w);

__attribute__((unused)) static id ASViewImpl_getModelPojoToUiWithASIWidget_(id<ASIWidget> w);

__attribute__((unused)) static id ASViewImpl_getModelParamWithASIWidget_(id<ASIWidget> w);

__attribute__((unused)) static void ASViewImpl_setModelPojoToUiParamsWithASIWidget_withId_(id<ASIWidget> w, id objValue);

__attribute__((unused)) static void ASViewImpl_setModelUiToPojoEventIdsWithASIWidget_withId_(id<ASIWidget> w, id objValue);

__attribute__((unused)) static void ASViewImpl_setZIndexWithASIWidget_withId_(id<ASIWidget> w, id objValue);

__attribute__((unused)) static void ASViewImpl_setSelectedWithId_withADView_(id objValue, ADView *view);

__attribute__((unused)) static id ASViewImpl_getSelectedWithASIWidget_withADView_(id<ASIWidget> w, ADView *view);

__attribute__((unused)) static void ASViewImpl_setInvalidateOnFrameChangeWithASIWidget_withId_(id<ASIWidget> w, id objValue);

__attribute__((unused)) static void ASViewImpl_setBackgroundRepeatWithASIWidget_withNSString_withId_withADView_(id<ASIWidget> w, NSString *strValue, id objValue, ADView *view);

__attribute__((unused)) static void ASViewImpl_setForegroundRepeatWithASIWidget_withNSString_withId_withADView_(id<ASIWidget> w, NSString *strValue, id objValue, ADView *view);

__attribute__((unused)) static void ASViewImpl_validateFormWithASIWidget_withId_(id<ASIWidget> w, id objValue);

__attribute__((unused)) static id ASViewImpl_getValidateFormResultWithASIWidget_(id<ASIWidget> w);

__attribute__((unused)) static void ASViewImpl_setValidationWithASIWidget_withId_(id<ASIWidget> w, id objValue);

__attribute__((unused)) static void ASViewImpl_setTypeWithASIWidget_withNSString_withId_(id<ASIWidget> w, NSString *value, id objValue);

__attribute__((unused)) static void ASViewImpl_setPatternWithASIWidget_withId_(id<ASIWidget> w, id objValue);

__attribute__((unused)) static void ASViewImpl_setMaxWithASIWidget_withId_(id<ASIWidget> w, id objValue);

__attribute__((unused)) static void ASViewImpl_setMinWithASIWidget_withId_(id<ASIWidget> w, id objValue);

__attribute__((unused)) static void ASViewImpl_setMaxlengthWithASIWidget_withId_(id<ASIWidget> w, id objValue);

__attribute__((unused)) static void ASViewImpl_setMinlengthWithASIWidget_withId_(id<ASIWidget> w, id objValue);

__attribute__((unused)) static void ASViewImpl_setRequiredWithASIWidget_withId_(id<ASIWidget> w, id objValue);

__attribute__((unused)) static void ASViewImpl_setCustomErrorMessageKeysWithASIWidget_withId_(id<ASIWidget> w, id objValue);

__attribute__((unused)) static void ASViewImpl_setCustomErrorMessageValuesWithASIWidget_withId_(id<ASIWidget> w, id objValue);

__attribute__((unused)) static void ASViewImpl_setValidationErrorDisplayWithASIWidget_withNSString_withId_(id<ASIWidget> w, NSString *strValue, id objValue);

__attribute__((unused)) static void ASViewImpl_setErrorStyleWithASIWidget_withADView_withId_(id<ASIWidget> w, ADView *view, id objValue);

__attribute__((unused)) static void ASViewImpl_setStyleWithASIWidget_withADView_withId_(id<ASIWidget> w, ADView *view, id objValue);

__attribute__((unused)) static void ASViewImpl_setAnimatorListenerWithASIWidget_withADAnimator_AnimatorListener_(id<ASIWidget> w, id<ADAnimator_AnimatorListener> animatorListener);

__attribute__((unused)) static void ASViewImpl_endAnimatorWithASIWidget_withId_(id<ASIWidget> w, id objValue);

__attribute__((unused)) static void ASViewImpl_startAnimatorWithASIWidget_withId_(id<ASIWidget> w, id objValue);

__attribute__((unused)) static id ASViewImpl_getLayoutDirectionWithASIWidget_(id<ASIWidget> w);

__attribute__((unused)) static void ASViewImpl_setTextAlignmentWithASIWidget_withId_(id<ASIWidget> w, id objValue);

__attribute__((unused)) static void ASViewImpl_setTextDirectionWithASIWidget_withId_(id<ASIWidget> w, id objValue);

__attribute__((unused)) static id ASViewImpl_getTextAlignmentWithASIWidget_(id<ASIWidget> w);

__attribute__((unused)) static id ASViewImpl_getTextDirectionWithASIWidget_(id<ASIWidget> w);

__attribute__((unused)) static void ASViewImpl_setMinHeightWithASIWidget_withId_(id<ASIWidget> w, id objValue);

__attribute__((unused)) static void ASViewImpl_setMinWidthWithASIWidget_withId_(id<ASIWidget> w, id objValue);

__attribute__((unused)) static id ASViewImpl_getMinHeightWithASIWidget_(id<ASIWidget> w);

__attribute__((unused)) static id ASViewImpl_getMinWidthWithASIWidget_(id<ASIWidget> w);

__attribute__((unused)) static id ASViewImpl_getVisibilityWithASIWidget_(id<ASIWidget> w);

__attribute__((unused)) static void ASViewImpl_setLongClickableWithASIWidget_withId_(id<ASIWidget> w, id objValue);

__attribute__((unused)) static id ASViewImpl_getLongClickableWithASIWidget_(id<ASIWidget> w);

__attribute__((unused)) static void ASViewImpl_setDuplicateParentStateWithASIWidget_withId_(id<ASIWidget> w, id objValue);

__attribute__((unused)) static id ASViewImpl_getDuplicateParentStateWithASIWidget_(id<ASIWidget> w);

__attribute__((unused)) static id ASViewImpl_getClickableWithASIWidget_(id<ASIWidget> w);

__attribute__((unused)) static void ASViewImpl_invalidateWithASIWidget_(id<ASIWidget> w);

__attribute__((unused)) static id ASViewImpl_getClipDataWithADView_DragEvent_(ADView_DragEvent *event);

__attribute__((unused)) static void ASViewImpl_setElevationWithASIWidget_withId_(id<ASIWidget> w, id objValue);

__attribute__((unused)) static void ASViewImpl_setBottomWithASIWidget_withId_(id<ASIWidget> w, id objValue);

__attribute__((unused)) static void ASViewImpl_setTopWithASIWidget_withId_(id<ASIWidget> w, id objValue);

__attribute__((unused)) static void ASViewImpl_setRightWithASIWidget_withId_(id<ASIWidget> w, id objValue);

__attribute__((unused)) static void ASViewImpl_setLeftWithASIWidget_withId_(id<ASIWidget> w, id objValue);

__attribute__((unused)) static id ASViewImpl_getBottomWithASIWidget_(id<ASIWidget> w);

__attribute__((unused)) static id ASViewImpl_getTopWithASIWidget_(id<ASIWidget> w);

__attribute__((unused)) static id ASViewImpl_getRightWithASIWidget_(id<ASIWidget> w);

__attribute__((unused)) static id ASViewImpl_getLeftWithASIWidget_(id<ASIWidget> w);

__attribute__((unused)) static void ASViewImpl_setAnimatorXmlWithASIWidget_withId_(id<ASIWidget> w, id objValue);

__attribute__((unused)) static void ASViewImpl_setBgOnControlWithASIWidget_withId_withId_(id<ASIWidget> w, id uiview, id objValue);

__attribute__((unused)) static void ASViewImpl_setBackgroundWithASIWidget_withId_withId_(id<ASIWidget> w, id nativeView, id objValue);

__attribute__((unused)) static void ASViewImpl_updateWidthAndHeightWithASIWidget_withADStateListDrawable_withId_withNSString_withNSString_(id<ASIWidget> w, ADStateListDrawable *background, id value, NSString *type, NSString *conveterType);

__attribute__((unused)) static bool ASViewImpl_isResizableImageWithId_(id obj);

__attribute__((unused)) static void ASViewImpl_clearBgColorWithId_withId_(id view, id value);

__attribute__((unused)) static void ASViewImpl_nativeSetBgColorWithId_withId_(id view, id value);

__attribute__((unused)) static void ASViewImpl_setOnClickWithASIWidget_withId_withId_(id<ASIWidget> w, id nativeView, id objValue);

__attribute__((unused)) static bool ASViewImpl_isNativeRtlSupported(void);

__attribute__((unused)) static void ASViewImpl_setBackgroundTintModeWithASIWidget_withId_(id<ASIWidget> w, id objValue);

__attribute__((unused)) static void ASViewImpl_setBackgroundTintWithASIWidget_withId_(id<ASIWidget> w, id objValue);

__attribute__((unused)) static void ASViewImpl_setForegroundTintModeWithASIWidget_withId_(id<ASIWidget> w, id objValue);

__attribute__((unused)) static void ASViewImpl_setForegroundTintWithASIWidget_withId_(id<ASIWidget> w, id objValue);

__attribute__((unused)) static void ASViewImpl_setForegroundWithASIWidget_withId_withId_(id<ASIWidget> w, id nativeWidget, id objValue);

__attribute__((unused)) static void ASViewImpl_setFgOnControlWithASIWidget_withId_withId_(id<ASIWidget> w, id nativeWidget, id objValue);

__attribute__((unused)) static id ASViewImpl_getClickableWithId_(id nativeWidget);

__attribute__((unused)) static bool ASViewImpl_nativeGetClickableWithId_(id view);

__attribute__((unused)) static void ASViewImpl_setClickableWithASIWidget_withId_withId_(id<ASIWidget> w, id nativeWidget, id objValue);

__attribute__((unused)) static void ASViewImpl_nativeSetClickableWithId_withBoolean_(id view, bool clickable);

__attribute__((unused)) static void ASViewImpl_setOnLongClickWithASIWidget_withId_withId_(id<ASIWidget> w, id nativeView, id objValue);

__attribute__((unused)) static void ASViewImpl_setTranslationXWithASIWidget_withId_(id<ASIWidget> w, id objValue);

__attribute__((unused)) static void ASViewImpl_relayoutWithASIWidget_(id<ASIWidget> w);

__attribute__((unused)) static void ASViewImpl_setTranslationYWithASIWidget_withId_(id<ASIWidget> w, id objValue);

__attribute__((unused)) static void ASViewImpl_setTranslationZWithASIWidget_withId_(id<ASIWidget> w, id objValue);

__attribute__((unused)) static void ASViewImpl_setTransformPivotYWithASIWidget_withId_(id<ASIWidget> w, id objValue);

__attribute__((unused)) static void ASViewImpl_setTransformPivotXWithASIWidget_withId_(id<ASIWidget> w, id objValue);

__attribute__((unused)) static void ASViewImpl_setScaleYWithASIWidget_withId_(id<ASIWidget> w, id objValue);

__attribute__((unused)) static void ASViewImpl_setScaleXWithASIWidget_withId_(id<ASIWidget> w, id objValue);

__attribute__((unused)) static void ASViewImpl_setRotationYWithASIWidget_withId_(id<ASIWidget> w, id objValue);

__attribute__((unused)) static void ASViewImpl_setRotationXWithASIWidget_withId_(id<ASIWidget> w, id objValue);

__attribute__((unused)) static void ASViewImpl_setRotationWithASIWidget_withId_(id<ASIWidget> w, id objValue);

__attribute__((unused)) static id ASViewImpl_getTranslationXWithASIWidget_(id<ASIWidget> w);

__attribute__((unused)) static id ASViewImpl_getTransformPivotYWithASIWidget_(id<ASIWidget> w);

__attribute__((unused)) static id ASViewImpl_getTransformPivotXWithASIWidget_(id<ASIWidget> w);

__attribute__((unused)) static id ASViewImpl_getScaleYWithASIWidget_(id<ASIWidget> w);

__attribute__((unused)) static id ASViewImpl_getScaleXWithASIWidget_(id<ASIWidget> w);

__attribute__((unused)) static id ASViewImpl_getRotationYWithASIWidget_(id<ASIWidget> w);

__attribute__((unused)) static id ASViewImpl_getRotationXWithASIWidget_(id<ASIWidget> w);

__attribute__((unused)) static id ASViewImpl_getRotationWithASIWidget_(id<ASIWidget> w);

__attribute__((unused)) static id ASViewImpl_getTranslationZWithASIWidget_(id<ASIWidget> w);

__attribute__((unused)) static id ASViewImpl_getTranslationYWithASIWidget_(id<ASIWidget> w);

__attribute__((unused)) static id ASViewImpl_getForegroundTintWithASIWidget_(id<ASIWidget> w);

__attribute__((unused)) static id ASViewImpl_getForegroundTintModeWithASIWidget_(id<ASIWidget> w);

__attribute__((unused)) static id ASViewImpl_getBackgroundTintModeWithASIWidget_(id<ASIWidget> w);

__attribute__((unused)) static id ASViewImpl_getBackgroundTintWithASIWidget_(id<ASIWidget> w);

__attribute__((unused)) static bool ASViewImpl_isMirrorSupported(void);

__attribute__((unused)) static void ASViewImpl_setOnTouchWithASIWidget_withId_withId_(id<ASIWidget> w, id nativeView, id objValue);

__attribute__((unused)) static void ASViewImpl_setOnDragWithASIWidget_withId_withId_(id<ASIWidget> w, id nativeView, id objValue);

__attribute__((unused)) static void ASViewImpl_setAsDragSourceWithASIWidget_withId_withId_(id<ASIWidget> w, id nativeWidget, id objValue);

__attribute__((unused)) static id ASViewImpl_getForegroundWithASIWidget_(id<ASIWidget> w);

__attribute__((unused)) static id ASViewImpl_getBackgroundWithASIWidget_(id<ASIWidget> w);

__attribute__((unused)) static void ASViewImpl_setOnKeyWithASIWidget_withId_(id<ASIWidget> w, id objValue);

__attribute__((unused)) static void ASViewImpl_setLayerCornerRadiusWithId_withId_(id nativeWidget, id objValue);

__attribute__((unused)) static void ASViewImpl_nativeSetLayerCornerRadiusWithId_withFloat_(id nativeWidget, float value);

__attribute__((unused)) static void ASViewImpl_setLayerBorderColorWithId_withId_(id nativeWidget, id objValue);

__attribute__((unused)) static void ASViewImpl_nativeLayerBorderColorWithId_withId_(id nativeWidget, id value);

__attribute__((unused)) static void ASViewImpl_setLayerBorderWidthWithId_withId_(id nativeWidget, id objValue);

__attribute__((unused)) static void ASViewImpl_nativeLayerBorderWidthWithId_withFloat_(id nativeWidget, float value);

__attribute__((unused)) static void ASViewImpl_setLayerMasksToBoundsWithId_withId_(id nativeWidget, id objValue);

__attribute__((unused)) static void ASViewImpl_nativeLayerBMasksToBoundsWithId_withBoolean_(id nativeWidget, bool value);

__attribute__((unused)) static void ASViewImpl_nativeBringToFrontWithJavaUtilList_(id<JavaUtilList> widgets);

__attribute__((unused)) static void ASViewImpl_setNativeIdWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue);

__attribute__((unused)) static void ASViewImpl_setOutsideTouchableWithASIWidget_withNSString_withId_withADView_(id<ASIWidget> w, NSString *strValue, id objValue, ADView *view);

__attribute__((unused)) static void ASViewImpl_setOnSwipeListenerWithASIWidget_withASSwipeHelper_SwipeListener_(id<ASIWidget> w, id<ASSwipeHelper_SwipeListener> swipeListener);

__attribute__((unused)) static void ASViewImpl_setOutlineSpotShadowColorWithASIWidget_withId_(id<ASIWidget> w, id objValue);

__attribute__((unused)) static void ASViewImpl_setOutlineAmbientShadowColorWithASIWidget_withId_(id<ASIWidget> w, id objValue);

__attribute__((unused)) static void ASViewImpl_setShadowColorWithId_withId_(id view, id color);

__attribute__((unused)) static void ASViewImpl_setCornerRadiusWithASIWidget_withId_withId_(id<ASIWidget> w, id nativeWidget, id objValue);

__attribute__((unused)) static void ASViewImpl_setCornerRadiusOnViewWithId_withFloat_(id view, float radius);

@interface ASViewImpl_IosAccessibilityTraits () {
 @public
  id<JavaUtilMap> mapping_;
}

@end

J2OBJC_FIELD_SETTER(ASViewImpl_IosAccessibilityTraits, mapping_, id<JavaUtilMap>)

@interface ASViewImpl_Vtype () {
 @public
  id<JavaUtilMap> mapping_;
}

@end

J2OBJC_FIELD_SETTER(ASViewImpl_Vtype, mapping_, id<JavaUtilMap>)

@interface ASViewImpl_ValidationErrorDisplay () {
 @public
  id<JavaUtilMap> mapping_;
}

@end

J2OBJC_FIELD_SETTER(ASViewImpl_ValidationErrorDisplay, mapping_, id<JavaUtilMap>)

@interface ASViewImpl_BackgroundRepeat () {
 @public
  id<JavaUtilMap> mapping_;
}

@end

J2OBJC_FIELD_SETTER(ASViewImpl_BackgroundRepeat, mapping_, id<JavaUtilMap>)

@interface ASViewImpl_BackgroundTintMode () {
 @public
  id<JavaUtilMap> mapping_;
}

@end

J2OBJC_FIELD_SETTER(ASViewImpl_BackgroundTintMode, mapping_, id<JavaUtilMap>)

@interface ASViewImpl_ForegroundRepeat () {
 @public
  id<JavaUtilMap> mapping_;
}

@end

J2OBJC_FIELD_SETTER(ASViewImpl_ForegroundRepeat, mapping_, id<JavaUtilMap>)

@interface ASViewImpl_ForegroundTintMode () {
 @public
  id<JavaUtilMap> mapping_;
}

@end

J2OBJC_FIELD_SETTER(ASViewImpl_ForegroundTintMode, mapping_, id<JavaUtilMap>)

@interface ASViewImpl_Visibility () {
 @public
  id<JavaUtilMap> mapping_;
}

@end

J2OBJC_FIELD_SETTER(ASViewImpl_Visibility, mapping_, id<JavaUtilMap>)

@interface ASViewImpl_LayoutDirection () {
 @public
  id<JavaUtilMap> mapping_;
}

@end

J2OBJC_FIELD_SETTER(ASViewImpl_LayoutDirection, mapping_, id<JavaUtilMap>)

@interface ASViewImpl_TextDirection () {
 @public
  id<JavaUtilMap> mapping_;
}

@end

J2OBJC_FIELD_SETTER(ASViewImpl_TextDirection, mapping_, id<JavaUtilMap>)

@interface ASViewImpl_TextAlignment () {
 @public
  id<JavaUtilMap> mapping_;
}

@end

J2OBJC_FIELD_SETTER(ASViewImpl_TextAlignment, mapping_, id<JavaUtilMap>)

@interface ASViewImpl_1 : NSObject < JavaUtilComparator >

- (instancetype)init;

- (int32_t)compareWithId:(id<ASIWidget>)arg0
                  withId:(id<ASIWidget>)arg1;

@end

J2OBJC_EMPTY_STATIC_INIT(ASViewImpl_1)

__attribute__((unused)) static void ASViewImpl_1_init(ASViewImpl_1 *self);

__attribute__((unused)) static ASViewImpl_1 *new_ASViewImpl_1_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASViewImpl_1 *create_ASViewImpl_1_init(void);


@interface ASViewImpl_AddRemoveCallBack : NSObject

@end

@interface ASViewImpl_PanCallBack : NSObject

@end

@interface ASViewImpl_AnimationCallBack : NSObject

@end

@interface ASViewImpl_2 : NSObject < ADDrawable_MeasureTextHelper > {
 @public
  id<ASIWidget> val$w_;
}

- (instancetype)initWithASIWidget:(id<ASIWidget>)capture$0;

- (float)getTextWidth;

- (float)getTextHeight;

@end

J2OBJC_EMPTY_STATIC_INIT(ASViewImpl_2)

__attribute__((unused)) static void ASViewImpl_2_initWithASIWidget_(ASViewImpl_2 *self, id<ASIWidget> capture$0);

__attribute__((unused)) static ASViewImpl_2 *new_ASViewImpl_2_initWithASIWidget_(id<ASIWidget> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASViewImpl_2 *create_ASViewImpl_2_initWithASIWidget_(id<ASIWidget> capture$0);


@interface ASViewImpl_AnimationContentHandler : ASContentHandlerAdapter {
 @public
  int32_t valueType_;
  NSString *valueTo_;
  NSString *valueFrom_;
  JavaUtilStack *sequenceOrderings_;
  int32_t sequenceOrdering_;
  id<ASIWidget> w_;
  JavaUtilStack *childAnimators_;
  JavaUtilStack *animatorSets_;
  ADAnimatorSet *animatorSet_;
  float arg0_;
  float arg1_;
  float extraTension_;
  float cycles_;
  id<ADInterpolator> timeInterpolator_;
  NSString *pathData_;
  NSString *propertyYName_;
  NSString *propertyXName_;
}

- (void)setFactorWithASIWidget:(id<ASIWidget>)w
                  withNSString:(NSString *)value;

- (void)setTensionWithASIWidget:(id<ASIWidget>)w
                   withNSString:(NSString *)value;

- (void)setExtraTensionWithASIWidget:(id<ASIWidget>)w
                        withNSString:(NSString *)value;

- (void)setCyclesWithASIWidget:(id<ASIWidget>)w
                  withNSString:(NSString *)value;

- (ADAnimatorSet *)getAnimatorSet;

- (instancetype)initWithASIWidget:(id<ASIWidget>)w;

- (void)startElementWithNSString:(NSString *)uri
                    withNSString:(NSString *)localName
                    withNSString:(NSString *)qName
         withOrgXmlSaxAttributes:(id<OrgXmlSaxAttributes>)atts;

- (void)setUpPathWithADObjectAnimator:(ADObjectAnimator *)objectAnimator;

- (void)endElementWithNSString:(NSString *)uri
                  withNSString:(NSString *)localName
                  withNSString:(NSString *)qName;

- (void)charactersWithCharArray:(IOSCharArray *)ch
                        withInt:(int32_t)start
                        withInt:(int32_t)length;

- (void)setStartOffsetWithASIWidget:(id<ASIWidget>)w
                withADValueAnimator:(ADValueAnimator *)animator
                       withNSString:(NSString *)value;

- (void)setValueTypeWithASIWidget:(id<ASIWidget>)w
              withADValueAnimator:(ADValueAnimator *)animator
                     withNSString:(NSString *)value;

- (void)setValueToWithASIWidget:(id<ASIWidget>)w
            withADValueAnimator:(ADValueAnimator *)animator
                   withNSString:(NSString *)value;

- (void)setValueFromWithASIWidget:(id<ASIWidget>)w
              withADValueAnimator:(ADValueAnimator *)animator
                     withNSString:(NSString *)value;

- (void)setInterpolatorWithASIWidget:(id<ASIWidget>)w
                 withADValueAnimator:(ADValueAnimator *)animator
                        withNSString:(NSString *)value;

- (void)setPathDataWithASIWidget:(id<ASIWidget>)w
            withADObjectAnimator:(ADObjectAnimator *)animator
                    withNSString:(NSString *)value;

- (void)setPropertyYNameWithASIWidget:(id<ASIWidget>)w
                 withADObjectAnimator:(ADObjectAnimator *)animator
                         withNSString:(NSString *)value;

- (void)setPropertyXNameWithASIWidget:(id<ASIWidget>)w
                 withADObjectAnimator:(ADObjectAnimator *)animator
                         withNSString:(NSString *)value;

- (void)setOrderingWithASIWidget:(id<ASIWidget>)w
               withADAnimatorSet:(ADAnimatorSet *)animatorSet
                    withNSString:(NSString *)value;

+ (int32_t)inferValueTypeFromValuesWithASIWidget:(id<ASIWidget>)w
                                    withNSString:(NSString *)valueFromId
                                    withNSString:(NSString *)valueToId;

+ (ADPropertyValuesHolder *)getPVHWithASIWidget:(id<ASIWidget>)w
                                        withInt:(int32_t)valueType
                                   withNSString:(NSString *)valueFromId
                                   withNSString:(NSString *)valueToId
                                   withNSString:(NSString *)propertyName;

+ (bool)isColorWithNSString:(NSString *)val;

+ (bool)isDimenWithNSString:(NSString *)val;

- (void)parseAnimatorWithASIWidget:(id<ASIWidget>)w
               withADValueAnimator:(ADValueAnimator *)animator
           withOrgXmlSaxAttributes:(id<OrgXmlSaxAttributes>)atts;

- (void)setDurationWithASIWidget:(id<ASIWidget>)w
             withADValueAnimator:(ADValueAnimator *)animator
                    withNSString:(NSString *)strValue;

- (int32_t)getRepeatCountWithNSString:(NSString *)value
                        withASIWidget:(id<ASIWidget>)w;

- (void)setRepeatCountWithASIWidget:(id<ASIWidget>)w
                withADValueAnimator:(ADValueAnimator *)animator
                       withNSString:(NSString *)strValue;

- (int32_t)getRepeatModeWithNSString:(NSString *)value;

- (void)setRepeatModeWithASIWidget:(id<ASIWidget>)w
               withADValueAnimator:(ADValueAnimator *)animator
                      withNSString:(NSString *)strValue;

- (int32_t)getValueTypeWithNSString:(NSString *)value;

- (void)parsePropertyAnimatorWithASIWidget:(id<ASIWidget>)w
                      withADObjectAnimator:(ADObjectAnimator *)animator
                   withOrgXmlSaxAttributes:(id<OrgXmlSaxAttributes>)atts;

- (void)setPropertyNameWithASIWidget:(id<ASIWidget>)w
                withADObjectAnimator:(ADObjectAnimator *)animator
                        withNSString:(NSString *)strValue;

- (void)parseAnimatorSetWithASIWidget:(id<ASIWidget>)w
                    withADAnimatorSet:(ADAnimatorSet *)animatorSet
              withOrgXmlSaxAttributes:(id<OrgXmlSaxAttributes>)atts;

- (int32_t)getOrderingWithNSString:(NSString *)value;

- (void)parseAccelerateInterpolatorWithASIWidget:(id<ASIWidget>)w
                         withOrgXmlSaxAttributes:(id<OrgXmlSaxAttributes>)atts;

- (void)parseDecelerateInterpolatorWithASIWidget:(id<ASIWidget>)w
                         withOrgXmlSaxAttributes:(id<OrgXmlSaxAttributes>)atts;

- (void)parseCycleInterpolatorWithASIWidget:(id<ASIWidget>)w
                    withOrgXmlSaxAttributes:(id<OrgXmlSaxAttributes>)atts;

- (void)parseAnticipateInterpolatorWithASIWidget:(id<ASIWidget>)w
                         withOrgXmlSaxAttributes:(id<OrgXmlSaxAttributes>)atts;

- (void)parseOvershootInterpolatorWithASIWidget:(id<ASIWidget>)w
                        withOrgXmlSaxAttributes:(id<OrgXmlSaxAttributes>)atts;

- (void)parseAnticipateOvershootInterpolatorWithASIWidget:(id<ASIWidget>)w
                                  withOrgXmlSaxAttributes:(id<OrgXmlSaxAttributes>)atts;

@end

J2OBJC_EMPTY_STATIC_INIT(ASViewImpl_AnimationContentHandler)

J2OBJC_FIELD_SETTER(ASViewImpl_AnimationContentHandler, valueTo_, NSString *)
J2OBJC_FIELD_SETTER(ASViewImpl_AnimationContentHandler, valueFrom_, NSString *)
J2OBJC_FIELD_SETTER(ASViewImpl_AnimationContentHandler, sequenceOrderings_, JavaUtilStack *)
J2OBJC_FIELD_SETTER(ASViewImpl_AnimationContentHandler, w_, id<ASIWidget>)
J2OBJC_FIELD_SETTER(ASViewImpl_AnimationContentHandler, childAnimators_, JavaUtilStack *)
J2OBJC_FIELD_SETTER(ASViewImpl_AnimationContentHandler, animatorSets_, JavaUtilStack *)
J2OBJC_FIELD_SETTER(ASViewImpl_AnimationContentHandler, animatorSet_, ADAnimatorSet *)
J2OBJC_FIELD_SETTER(ASViewImpl_AnimationContentHandler, timeInterpolator_, id<ADInterpolator>)
J2OBJC_FIELD_SETTER(ASViewImpl_AnimationContentHandler, pathData_, NSString *)
J2OBJC_FIELD_SETTER(ASViewImpl_AnimationContentHandler, propertyYName_, NSString *)
J2OBJC_FIELD_SETTER(ASViewImpl_AnimationContentHandler, propertyXName_, NSString *)

inline int32_t ASViewImpl_AnimationContentHandler_get_VALUE_TYPE_FLOAT(void);
#define ASViewImpl_AnimationContentHandler_VALUE_TYPE_FLOAT 0
J2OBJC_STATIC_FIELD_CONSTANT(ASViewImpl_AnimationContentHandler, VALUE_TYPE_FLOAT, int32_t)

inline int32_t ASViewImpl_AnimationContentHandler_get_VALUE_TYPE_INT(void);
#define ASViewImpl_AnimationContentHandler_VALUE_TYPE_INT 1
J2OBJC_STATIC_FIELD_CONSTANT(ASViewImpl_AnimationContentHandler, VALUE_TYPE_INT, int32_t)

inline int32_t ASViewImpl_AnimationContentHandler_get_VALUE_TYPE_PATH(void);
#define ASViewImpl_AnimationContentHandler_VALUE_TYPE_PATH 2
J2OBJC_STATIC_FIELD_CONSTANT(ASViewImpl_AnimationContentHandler, VALUE_TYPE_PATH, int32_t)

inline int32_t ASViewImpl_AnimationContentHandler_get_VALUE_TYPE_COLOR(void);
#define ASViewImpl_AnimationContentHandler_VALUE_TYPE_COLOR 3
J2OBJC_STATIC_FIELD_CONSTANT(ASViewImpl_AnimationContentHandler, VALUE_TYPE_COLOR, int32_t)

inline int32_t ASViewImpl_AnimationContentHandler_get_VALUE_TYPE_UNDEFINED(void);
#define ASViewImpl_AnimationContentHandler_VALUE_TYPE_UNDEFINED 4
J2OBJC_STATIC_FIELD_CONSTANT(ASViewImpl_AnimationContentHandler, VALUE_TYPE_UNDEFINED, int32_t)

inline int32_t ASViewImpl_AnimationContentHandler_get_TOGETHER(void);
#define ASViewImpl_AnimationContentHandler_TOGETHER 0
J2OBJC_STATIC_FIELD_CONSTANT(ASViewImpl_AnimationContentHandler, TOGETHER, int32_t)

inline int32_t ASViewImpl_AnimationContentHandler_get_SEQUENTIALLY(void);
#define ASViewImpl_AnimationContentHandler_SEQUENTIALLY 1
J2OBJC_STATIC_FIELD_CONSTANT(ASViewImpl_AnimationContentHandler, SEQUENTIALLY, int32_t)

__attribute__((unused)) static void ASViewImpl_AnimationContentHandler_setFactorWithASIWidget_withNSString_(ASViewImpl_AnimationContentHandler *self, id<ASIWidget> w, NSString *value);

__attribute__((unused)) static void ASViewImpl_AnimationContentHandler_setTensionWithASIWidget_withNSString_(ASViewImpl_AnimationContentHandler *self, id<ASIWidget> w, NSString *value);

__attribute__((unused)) static void ASViewImpl_AnimationContentHandler_setExtraTensionWithASIWidget_withNSString_(ASViewImpl_AnimationContentHandler *self, id<ASIWidget> w, NSString *value);

__attribute__((unused)) static void ASViewImpl_AnimationContentHandler_setCyclesWithASIWidget_withNSString_(ASViewImpl_AnimationContentHandler *self, id<ASIWidget> w, NSString *value);

__attribute__((unused)) static void ASViewImpl_AnimationContentHandler_initWithASIWidget_(ASViewImpl_AnimationContentHandler *self, id<ASIWidget> w);

__attribute__((unused)) static ASViewImpl_AnimationContentHandler *new_ASViewImpl_AnimationContentHandler_initWithASIWidget_(id<ASIWidget> w) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASViewImpl_AnimationContentHandler *create_ASViewImpl_AnimationContentHandler_initWithASIWidget_(id<ASIWidget> w);

__attribute__((unused)) static void ASViewImpl_AnimationContentHandler_setUpPathWithADObjectAnimator_(ASViewImpl_AnimationContentHandler *self, ADObjectAnimator *objectAnimator);

__attribute__((unused)) static void ASViewImpl_AnimationContentHandler_setStartOffsetWithASIWidget_withADValueAnimator_withNSString_(ASViewImpl_AnimationContentHandler *self, id<ASIWidget> w, ADValueAnimator *animator, NSString *value);

__attribute__((unused)) static void ASViewImpl_AnimationContentHandler_setValueTypeWithASIWidget_withADValueAnimator_withNSString_(ASViewImpl_AnimationContentHandler *self, id<ASIWidget> w, ADValueAnimator *animator, NSString *value);

__attribute__((unused)) static void ASViewImpl_AnimationContentHandler_setValueToWithASIWidget_withADValueAnimator_withNSString_(ASViewImpl_AnimationContentHandler *self, id<ASIWidget> w, ADValueAnimator *animator, NSString *value);

__attribute__((unused)) static void ASViewImpl_AnimationContentHandler_setValueFromWithASIWidget_withADValueAnimator_withNSString_(ASViewImpl_AnimationContentHandler *self, id<ASIWidget> w, ADValueAnimator *animator, NSString *value);

__attribute__((unused)) static void ASViewImpl_AnimationContentHandler_setInterpolatorWithASIWidget_withADValueAnimator_withNSString_(ASViewImpl_AnimationContentHandler *self, id<ASIWidget> w, ADValueAnimator *animator, NSString *value);

__attribute__((unused)) static void ASViewImpl_AnimationContentHandler_setPathDataWithASIWidget_withADObjectAnimator_withNSString_(ASViewImpl_AnimationContentHandler *self, id<ASIWidget> w, ADObjectAnimator *animator, NSString *value);

__attribute__((unused)) static void ASViewImpl_AnimationContentHandler_setPropertyYNameWithASIWidget_withADObjectAnimator_withNSString_(ASViewImpl_AnimationContentHandler *self, id<ASIWidget> w, ADObjectAnimator *animator, NSString *value);

__attribute__((unused)) static void ASViewImpl_AnimationContentHandler_setPropertyXNameWithASIWidget_withADObjectAnimator_withNSString_(ASViewImpl_AnimationContentHandler *self, id<ASIWidget> w, ADObjectAnimator *animator, NSString *value);

__attribute__((unused)) static void ASViewImpl_AnimationContentHandler_setOrderingWithASIWidget_withADAnimatorSet_withNSString_(ASViewImpl_AnimationContentHandler *self, id<ASIWidget> w, ADAnimatorSet *animatorSet, NSString *value);

__attribute__((unused)) static int32_t ASViewImpl_AnimationContentHandler_inferValueTypeFromValuesWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *valueFromId, NSString *valueToId);

__attribute__((unused)) static ADPropertyValuesHolder *ASViewImpl_AnimationContentHandler_getPVHWithASIWidget_withInt_withNSString_withNSString_withNSString_(id<ASIWidget> w, int32_t valueType, NSString *valueFromId, NSString *valueToId, NSString *propertyName);

__attribute__((unused)) static bool ASViewImpl_AnimationContentHandler_isColorWithNSString_(NSString *val);

__attribute__((unused)) static bool ASViewImpl_AnimationContentHandler_isDimenWithNSString_(NSString *val);

__attribute__((unused)) static void ASViewImpl_AnimationContentHandler_parseAnimatorWithASIWidget_withADValueAnimator_withOrgXmlSaxAttributes_(ASViewImpl_AnimationContentHandler *self, id<ASIWidget> w, ADValueAnimator *animator, id<OrgXmlSaxAttributes> atts);

__attribute__((unused)) static void ASViewImpl_AnimationContentHandler_setDurationWithASIWidget_withADValueAnimator_withNSString_(ASViewImpl_AnimationContentHandler *self, id<ASIWidget> w, ADValueAnimator *animator, NSString *strValue);

__attribute__((unused)) static int32_t ASViewImpl_AnimationContentHandler_getRepeatCountWithNSString_withASIWidget_(ASViewImpl_AnimationContentHandler *self, NSString *value, id<ASIWidget> w);

__attribute__((unused)) static void ASViewImpl_AnimationContentHandler_setRepeatCountWithASIWidget_withADValueAnimator_withNSString_(ASViewImpl_AnimationContentHandler *self, id<ASIWidget> w, ADValueAnimator *animator, NSString *strValue);

__attribute__((unused)) static int32_t ASViewImpl_AnimationContentHandler_getRepeatModeWithNSString_(ASViewImpl_AnimationContentHandler *self, NSString *value);

__attribute__((unused)) static void ASViewImpl_AnimationContentHandler_setRepeatModeWithASIWidget_withADValueAnimator_withNSString_(ASViewImpl_AnimationContentHandler *self, id<ASIWidget> w, ADValueAnimator *animator, NSString *strValue);

__attribute__((unused)) static int32_t ASViewImpl_AnimationContentHandler_getValueTypeWithNSString_(ASViewImpl_AnimationContentHandler *self, NSString *value);

__attribute__((unused)) static void ASViewImpl_AnimationContentHandler_parsePropertyAnimatorWithASIWidget_withADObjectAnimator_withOrgXmlSaxAttributes_(ASViewImpl_AnimationContentHandler *self, id<ASIWidget> w, ADObjectAnimator *animator, id<OrgXmlSaxAttributes> atts);

__attribute__((unused)) static void ASViewImpl_AnimationContentHandler_setPropertyNameWithASIWidget_withADObjectAnimator_withNSString_(ASViewImpl_AnimationContentHandler *self, id<ASIWidget> w, ADObjectAnimator *animator, NSString *strValue);

__attribute__((unused)) static void ASViewImpl_AnimationContentHandler_parseAnimatorSetWithASIWidget_withADAnimatorSet_withOrgXmlSaxAttributes_(ASViewImpl_AnimationContentHandler *self, id<ASIWidget> w, ADAnimatorSet *animatorSet, id<OrgXmlSaxAttributes> atts);

__attribute__((unused)) static int32_t ASViewImpl_AnimationContentHandler_getOrderingWithNSString_(ASViewImpl_AnimationContentHandler *self, NSString *value);

__attribute__((unused)) static void ASViewImpl_AnimationContentHandler_parseAccelerateInterpolatorWithASIWidget_withOrgXmlSaxAttributes_(ASViewImpl_AnimationContentHandler *self, id<ASIWidget> w, id<OrgXmlSaxAttributes> atts);

__attribute__((unused)) static void ASViewImpl_AnimationContentHandler_parseDecelerateInterpolatorWithASIWidget_withOrgXmlSaxAttributes_(ASViewImpl_AnimationContentHandler *self, id<ASIWidget> w, id<OrgXmlSaxAttributes> atts);

__attribute__((unused)) static void ASViewImpl_AnimationContentHandler_parseCycleInterpolatorWithASIWidget_withOrgXmlSaxAttributes_(ASViewImpl_AnimationContentHandler *self, id<ASIWidget> w, id<OrgXmlSaxAttributes> atts);

__attribute__((unused)) static void ASViewImpl_AnimationContentHandler_parseAnticipateInterpolatorWithASIWidget_withOrgXmlSaxAttributes_(ASViewImpl_AnimationContentHandler *self, id<ASIWidget> w, id<OrgXmlSaxAttributes> atts);

__attribute__((unused)) static void ASViewImpl_AnimationContentHandler_parseOvershootInterpolatorWithASIWidget_withOrgXmlSaxAttributes_(ASViewImpl_AnimationContentHandler *self, id<ASIWidget> w, id<OrgXmlSaxAttributes> atts);

__attribute__((unused)) static void ASViewImpl_AnimationContentHandler_parseAnticipateOvershootInterpolatorWithASIWidget_withOrgXmlSaxAttributes_(ASViewImpl_AnimationContentHandler *self, id<ASIWidget> w, id<OrgXmlSaxAttributes> atts);

J2OBJC_TYPE_LITERAL_HEADER(ASViewImpl_AnimationContentHandler)


@interface ASViewImpl_AnimationContentHandler_CustomTypeConverterX : ADTypeConverter

- (instancetype)initWithASViewImpl_AnimationContentHandler:(ASViewImpl_AnimationContentHandler *)outer$
                                              withIOSClass:(IOSClass *)fromClass
                                              withIOSClass:(IOSClass *)toClass;

- (JavaLangFloat *)convertWithId:(ADPointF *)value;

@end

J2OBJC_EMPTY_STATIC_INIT(ASViewImpl_AnimationContentHandler_CustomTypeConverterX)

__attribute__((unused)) static void ASViewImpl_AnimationContentHandler_CustomTypeConverterX_initWithASViewImpl_AnimationContentHandler_withIOSClass_withIOSClass_(ASViewImpl_AnimationContentHandler_CustomTypeConverterX *self, ASViewImpl_AnimationContentHandler *outer$, IOSClass *fromClass, IOSClass *toClass);

__attribute__((unused)) static ASViewImpl_AnimationContentHandler_CustomTypeConverterX *new_ASViewImpl_AnimationContentHandler_CustomTypeConverterX_initWithASViewImpl_AnimationContentHandler_withIOSClass_withIOSClass_(ASViewImpl_AnimationContentHandler *outer$, IOSClass *fromClass, IOSClass *toClass) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASViewImpl_AnimationContentHandler_CustomTypeConverterX *create_ASViewImpl_AnimationContentHandler_CustomTypeConverterX_initWithASViewImpl_AnimationContentHandler_withIOSClass_withIOSClass_(ASViewImpl_AnimationContentHandler *outer$, IOSClass *fromClass, IOSClass *toClass);

J2OBJC_TYPE_LITERAL_HEADER(ASViewImpl_AnimationContentHandler_CustomTypeConverterX)


@interface ASViewImpl_AnimationContentHandler_CustomTypeConverterY : ADTypeConverter

- (instancetype)initWithASViewImpl_AnimationContentHandler:(ASViewImpl_AnimationContentHandler *)outer$
                                              withIOSClass:(IOSClass *)fromClass
                                              withIOSClass:(IOSClass *)toClass;

- (JavaLangFloat *)convertWithId:(ADPointF *)value;

@end

J2OBJC_EMPTY_STATIC_INIT(ASViewImpl_AnimationContentHandler_CustomTypeConverterY)

__attribute__((unused)) static void ASViewImpl_AnimationContentHandler_CustomTypeConverterY_initWithASViewImpl_AnimationContentHandler_withIOSClass_withIOSClass_(ASViewImpl_AnimationContentHandler_CustomTypeConverterY *self, ASViewImpl_AnimationContentHandler *outer$, IOSClass *fromClass, IOSClass *toClass);

__attribute__((unused)) static ASViewImpl_AnimationContentHandler_CustomTypeConverterY *new_ASViewImpl_AnimationContentHandler_CustomTypeConverterY_initWithASViewImpl_AnimationContentHandler_withIOSClass_withIOSClass_(ASViewImpl_AnimationContentHandler *outer$, IOSClass *fromClass, IOSClass *toClass) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASViewImpl_AnimationContentHandler_CustomTypeConverterY *create_ASViewImpl_AnimationContentHandler_CustomTypeConverterY_initWithASViewImpl_AnimationContentHandler_withIOSClass_withIOSClass_(ASViewImpl_AnimationContentHandler *outer$, IOSClass *fromClass, IOSClass *toClass);

J2OBJC_TYPE_LITERAL_HEADER(ASViewImpl_AnimationContentHandler_CustomTypeConverterY)


@interface ASViewImpl_CustomProperty : ADProperty {
 @public
  NSString *name_;
}

- (instancetype)initWithIOSClass:(IOSClass *)type
                    withNSString:(NSString *)name;

- (id)getWithId:(id)object;

- (void)setWithId:(id)object
           withId:(id)value;

@end

J2OBJC_EMPTY_STATIC_INIT(ASViewImpl_CustomProperty)

J2OBJC_FIELD_SETTER(ASViewImpl_CustomProperty, name_, NSString *)

__attribute__((unused)) static void ASViewImpl_CustomProperty_initWithIOSClass_withNSString_(ASViewImpl_CustomProperty *self, IOSClass *type, NSString *name);

__attribute__((unused)) static ASViewImpl_CustomProperty *new_ASViewImpl_CustomProperty_initWithIOSClass_withNSString_(IOSClass *type, NSString *name) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASViewImpl_CustomProperty *create_ASViewImpl_CustomProperty_initWithIOSClass_withNSString_(IOSClass *type, NSString *name);

J2OBJC_TYPE_LITERAL_HEADER(ASViewImpl_CustomProperty)


@interface ASViewImpl_AnimatorListener : NSObject < ADAnimator_AnimatorListener, ASIListener > {
 @public
  id<ASIWidget> w_;
  ADView *view_;
  NSString *strValue_;
  NSString *action_;
}

- (NSString *)getAction;

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue;

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue
                     withNSString:(NSString *)action;

- (void)onAnimationStartWithADAnimator:(ADAnimator *)animation;

- (id<JavaUtilMap>)getOnAnimationStartEventObjWithADAnimator:(ADAnimator *)animation;

- (void)onAnimationEndWithADAnimator:(ADAnimator *)animation;

- (id<JavaUtilMap>)getOnAnimationEndEventObjWithADAnimator:(ADAnimator *)animation;

- (void)onAnimationCancelWithADAnimator:(ADAnimator *)animation;

- (id<JavaUtilMap>)getOnAnimationCancelEventObjWithADAnimator:(ADAnimator *)animation;

- (void)onAnimationRepeatWithADAnimator:(ADAnimator *)animation;

- (id<JavaUtilMap>)getOnAnimationRepeatEventObjWithADAnimator:(ADAnimator *)animation;

@end

J2OBJC_EMPTY_STATIC_INIT(ASViewImpl_AnimatorListener)

J2OBJC_FIELD_SETTER(ASViewImpl_AnimatorListener, w_, id<ASIWidget>)
J2OBJC_FIELD_SETTER(ASViewImpl_AnimatorListener, view_, ADView *)
J2OBJC_FIELD_SETTER(ASViewImpl_AnimatorListener, strValue_, NSString *)
J2OBJC_FIELD_SETTER(ASViewImpl_AnimatorListener, action_, NSString *)

__attribute__((unused)) static void ASViewImpl_AnimatorListener_initWithASIWidget_withNSString_(ASViewImpl_AnimatorListener *self, id<ASIWidget> w, NSString *strValue);

__attribute__((unused)) static ASViewImpl_AnimatorListener *new_ASViewImpl_AnimatorListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASViewImpl_AnimatorListener *create_ASViewImpl_AnimatorListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue);

__attribute__((unused)) static void ASViewImpl_AnimatorListener_initWithASIWidget_withNSString_withNSString_(ASViewImpl_AnimatorListener *self, id<ASIWidget> w, NSString *strValue, NSString *action);

__attribute__((unused)) static ASViewImpl_AnimatorListener *new_ASViewImpl_AnimatorListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASViewImpl_AnimatorListener *create_ASViewImpl_AnimatorListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action);

J2OBJC_TYPE_LITERAL_HEADER(ASViewImpl_AnimatorListener)


@interface ASViewImpl_OnClickListener : NSObject < ADView_OnClickListener, ASIListener > {
 @public
  id<ASIWidget> w_;
  ADView *view_;
  NSString *strValue_;
  NSString *action_;
}

- (NSString *)getAction;

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue;

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue
                     withNSString:(NSString *)action;

- (void)onClickWithADView:(ADView *)v;

- (id<JavaUtilMap>)getOnClickEventObjWithADView:(ADView *)v;

@end

J2OBJC_EMPTY_STATIC_INIT(ASViewImpl_OnClickListener)

J2OBJC_FIELD_SETTER(ASViewImpl_OnClickListener, w_, id<ASIWidget>)
J2OBJC_FIELD_SETTER(ASViewImpl_OnClickListener, view_, ADView *)
J2OBJC_FIELD_SETTER(ASViewImpl_OnClickListener, strValue_, NSString *)
J2OBJC_FIELD_SETTER(ASViewImpl_OnClickListener, action_, NSString *)

__attribute__((unused)) static void ASViewImpl_OnClickListener_initWithASIWidget_withNSString_(ASViewImpl_OnClickListener *self, id<ASIWidget> w, NSString *strValue);

__attribute__((unused)) static ASViewImpl_OnClickListener *new_ASViewImpl_OnClickListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASViewImpl_OnClickListener *create_ASViewImpl_OnClickListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue);

__attribute__((unused)) static void ASViewImpl_OnClickListener_initWithASIWidget_withNSString_withNSString_(ASViewImpl_OnClickListener *self, id<ASIWidget> w, NSString *strValue, NSString *action);

__attribute__((unused)) static ASViewImpl_OnClickListener *new_ASViewImpl_OnClickListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASViewImpl_OnClickListener *create_ASViewImpl_OnClickListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action);

J2OBJC_TYPE_LITERAL_HEADER(ASViewImpl_OnClickListener)


@interface ASViewImpl_OnTouchListener : NSObject < ADView_OnTouchListener, ASIListener > {
 @public
  id<ASIWidget> w_;
  ADView *view_;
  NSString *strValue_;
  NSString *action_;
}

- (NSString *)getAction;

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue;

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue
                     withNSString:(NSString *)action;

- (bool)onTouchWithADView:(ADView *)v
        withADMotionEvent:(ADMotionEvent *)event;

- (id<JavaUtilMap>)getOnTouchEventObjWithADView:(ADView *)v
                              withADMotionEvent:(ADMotionEvent *)event;

@end

J2OBJC_EMPTY_STATIC_INIT(ASViewImpl_OnTouchListener)

J2OBJC_FIELD_SETTER(ASViewImpl_OnTouchListener, w_, id<ASIWidget>)
J2OBJC_FIELD_SETTER(ASViewImpl_OnTouchListener, view_, ADView *)
J2OBJC_FIELD_SETTER(ASViewImpl_OnTouchListener, strValue_, NSString *)
J2OBJC_FIELD_SETTER(ASViewImpl_OnTouchListener, action_, NSString *)

__attribute__((unused)) static void ASViewImpl_OnTouchListener_initWithASIWidget_withNSString_(ASViewImpl_OnTouchListener *self, id<ASIWidget> w, NSString *strValue);

__attribute__((unused)) static ASViewImpl_OnTouchListener *new_ASViewImpl_OnTouchListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASViewImpl_OnTouchListener *create_ASViewImpl_OnTouchListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue);

__attribute__((unused)) static void ASViewImpl_OnTouchListener_initWithASIWidget_withNSString_withNSString_(ASViewImpl_OnTouchListener *self, id<ASIWidget> w, NSString *strValue, NSString *action);

__attribute__((unused)) static ASViewImpl_OnTouchListener *new_ASViewImpl_OnTouchListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASViewImpl_OnTouchListener *create_ASViewImpl_OnTouchListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action);

J2OBJC_TYPE_LITERAL_HEADER(ASViewImpl_OnTouchListener)


@interface ASViewImpl_OnLongClickListener : NSObject < ADView_OnLongClickListener, ASIListener > {
 @public
  id<ASIWidget> w_;
  ADView *view_;
  NSString *strValue_;
  NSString *action_;
}

- (NSString *)getAction;

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue;

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue
                     withNSString:(NSString *)action;

- (bool)onLongClickWithADView:(ADView *)v;

- (id<JavaUtilMap>)getOnLongClickEventObjWithADView:(ADView *)v;

@end

J2OBJC_EMPTY_STATIC_INIT(ASViewImpl_OnLongClickListener)

J2OBJC_FIELD_SETTER(ASViewImpl_OnLongClickListener, w_, id<ASIWidget>)
J2OBJC_FIELD_SETTER(ASViewImpl_OnLongClickListener, view_, ADView *)
J2OBJC_FIELD_SETTER(ASViewImpl_OnLongClickListener, strValue_, NSString *)
J2OBJC_FIELD_SETTER(ASViewImpl_OnLongClickListener, action_, NSString *)

__attribute__((unused)) static void ASViewImpl_OnLongClickListener_initWithASIWidget_withNSString_(ASViewImpl_OnLongClickListener *self, id<ASIWidget> w, NSString *strValue);

__attribute__((unused)) static ASViewImpl_OnLongClickListener *new_ASViewImpl_OnLongClickListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASViewImpl_OnLongClickListener *create_ASViewImpl_OnLongClickListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue);

__attribute__((unused)) static void ASViewImpl_OnLongClickListener_initWithASIWidget_withNSString_withNSString_(ASViewImpl_OnLongClickListener *self, id<ASIWidget> w, NSString *strValue, NSString *action);

__attribute__((unused)) static ASViewImpl_OnLongClickListener *new_ASViewImpl_OnLongClickListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASViewImpl_OnLongClickListener *create_ASViewImpl_OnLongClickListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action);

J2OBJC_TYPE_LITERAL_HEADER(ASViewImpl_OnLongClickListener)


@interface ASViewImpl_OnDragListener : NSObject < ADView_OnDragListener, ASIListener > {
 @public
  id<ASIWidget> w_;
  ADView *view_;
  NSString *strValue_;
  NSString *action_;
}

- (NSString *)getAction;

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue;

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue
                     withNSString:(NSString *)action;

- (bool)onDragWithADView:(ADView *)v
    withADView_DragEvent:(ADView_DragEvent *)event;

- (id<JavaUtilMap>)getOnDragEventObjWithADView:(ADView *)v
                          withADView_DragEvent:(ADView_DragEvent *)event;

@end

J2OBJC_EMPTY_STATIC_INIT(ASViewImpl_OnDragListener)

J2OBJC_FIELD_SETTER(ASViewImpl_OnDragListener, w_, id<ASIWidget>)
J2OBJC_FIELD_SETTER(ASViewImpl_OnDragListener, view_, ADView *)
J2OBJC_FIELD_SETTER(ASViewImpl_OnDragListener, strValue_, NSString *)
J2OBJC_FIELD_SETTER(ASViewImpl_OnDragListener, action_, NSString *)

__attribute__((unused)) static void ASViewImpl_OnDragListener_initWithASIWidget_withNSString_(ASViewImpl_OnDragListener *self, id<ASIWidget> w, NSString *strValue);

__attribute__((unused)) static ASViewImpl_OnDragListener *new_ASViewImpl_OnDragListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASViewImpl_OnDragListener *create_ASViewImpl_OnDragListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue);

__attribute__((unused)) static void ASViewImpl_OnDragListener_initWithASIWidget_withNSString_withNSString_(ASViewImpl_OnDragListener *self, id<ASIWidget> w, NSString *strValue, NSString *action);

__attribute__((unused)) static ASViewImpl_OnDragListener *new_ASViewImpl_OnDragListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASViewImpl_OnDragListener *create_ASViewImpl_OnDragListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action);

J2OBJC_TYPE_LITERAL_HEADER(ASViewImpl_OnDragListener)


@interface ASViewImpl_OnKeyListener : NSObject < ADView_OnKeyListener, ASIListener > {
 @public
  id<ASIWidget> w_;
  ADView *view_;
  NSString *strValue_;
  NSString *action_;
}

- (NSString *)getAction;

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue;

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue
                     withNSString:(NSString *)action;

- (bool)onKeyWithADView:(ADView *)v
                withInt:(int32_t)keyCode
         withADKeyEvent:(ADKeyEvent *)event;

- (id<JavaUtilMap>)getOnKeyEventObjWithADView:(ADView *)v
                                      withInt:(int32_t)keyCode
                               withADKeyEvent:(ADKeyEvent *)event;

@end

J2OBJC_EMPTY_STATIC_INIT(ASViewImpl_OnKeyListener)

J2OBJC_FIELD_SETTER(ASViewImpl_OnKeyListener, w_, id<ASIWidget>)
J2OBJC_FIELD_SETTER(ASViewImpl_OnKeyListener, view_, ADView *)
J2OBJC_FIELD_SETTER(ASViewImpl_OnKeyListener, strValue_, NSString *)
J2OBJC_FIELD_SETTER(ASViewImpl_OnKeyListener, action_, NSString *)

__attribute__((unused)) static void ASViewImpl_OnKeyListener_initWithASIWidget_withNSString_(ASViewImpl_OnKeyListener *self, id<ASIWidget> w, NSString *strValue);

__attribute__((unused)) static ASViewImpl_OnKeyListener *new_ASViewImpl_OnKeyListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASViewImpl_OnKeyListener *create_ASViewImpl_OnKeyListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue);

__attribute__((unused)) static void ASViewImpl_OnKeyListener_initWithASIWidget_withNSString_withNSString_(ASViewImpl_OnKeyListener *self, id<ASIWidget> w, NSString *strValue, NSString *action);

__attribute__((unused)) static ASViewImpl_OnKeyListener *new_ASViewImpl_OnKeyListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASViewImpl_OnKeyListener *create_ASViewImpl_OnKeyListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action);

J2OBJC_TYPE_LITERAL_HEADER(ASViewImpl_OnKeyListener)


@interface ASViewImpl_SwipeListener : NSObject < ASSwipeHelper_SwipeListener, ASIListener > {
 @public
  id<ASIWidget> w_;
  ADView *view_;
  NSString *strValue_;
  NSString *action_;
}

- (NSString *)getAction;

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue;

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue
                     withNSString:(NSString *)action;

- (bool)onSwipedWithNSString:(NSString *)direction;

- (id<JavaUtilMap>)getOnSwipedEventObjWithNSString:(NSString *)direction;

@end

J2OBJC_EMPTY_STATIC_INIT(ASViewImpl_SwipeListener)

J2OBJC_FIELD_SETTER(ASViewImpl_SwipeListener, w_, id<ASIWidget>)
J2OBJC_FIELD_SETTER(ASViewImpl_SwipeListener, view_, ADView *)
J2OBJC_FIELD_SETTER(ASViewImpl_SwipeListener, strValue_, NSString *)
J2OBJC_FIELD_SETTER(ASViewImpl_SwipeListener, action_, NSString *)

__attribute__((unused)) static void ASViewImpl_SwipeListener_initWithASIWidget_withNSString_(ASViewImpl_SwipeListener *self, id<ASIWidget> w, NSString *strValue);

__attribute__((unused)) static ASViewImpl_SwipeListener *new_ASViewImpl_SwipeListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASViewImpl_SwipeListener *create_ASViewImpl_SwipeListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue);

__attribute__((unused)) static void ASViewImpl_SwipeListener_initWithASIWidget_withNSString_withNSString_(ASViewImpl_SwipeListener *self, id<ASIWidget> w, NSString *strValue, NSString *action);

__attribute__((unused)) static ASViewImpl_SwipeListener *new_ASViewImpl_SwipeListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASViewImpl_SwipeListener *create_ASViewImpl_SwipeListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action);

J2OBJC_TYPE_LITERAL_HEADER(ASViewImpl_SwipeListener)


@interface ASViewImpl_UIControlEventTouchDelegate () {
 @public
  WEAK_ id<ASIWidget> widget_;
  id<ADView_OnTouchListener> listener_;
}

@end

J2OBJC_FIELD_SETTER(ASViewImpl_UIControlEventTouchDelegate, listener_, id<ADView_OnTouchListener>)

@interface ASViewImpl_UILongTapGestureRecognizerDelegate () {
 @public
  WEAK_ id<ASIWidget> widget_;
  id<ADView_OnLongClickListener> listener_;
}

@end

J2OBJC_FIELD_SETTER(ASViewImpl_UILongTapGestureRecognizerDelegate, listener_, id<ADView_OnLongClickListener>)

@interface ASViewImpl_UITapGestureRecognizerDelegate () {
 @public
  WEAK_ id<ASIWidget> widget_;
  id<ADView_OnClickListener> listener_;
}

@end

J2OBJC_FIELD_SETTER(ASViewImpl_UITapGestureRecognizerDelegate, listener_, id<ADView_OnClickListener>)

@interface ASViewImpl_UIDragInteractionDelegate () {
 @public
  id<ASIWidget> widget_;
  NSString *eventArgs_;
}

- (id)getEventObjWithASIWidget:(id<ASIWidget>)w;

- (void)sendEventWithInt:(int32_t)x
                 withInt:(int32_t)y
                 withInt:(int32_t)action
             withBoolean:(bool)dragCanAccept;

@end

J2OBJC_FIELD_SETTER(ASViewImpl_UIDragInteractionDelegate, widget_, id<ASIWidget>)
J2OBJC_FIELD_SETTER(ASViewImpl_UIDragInteractionDelegate, eventArgs_, NSString *)

__attribute__((unused)) static id ASViewImpl_UIDragInteractionDelegate_getEventObjWithASIWidget_(ASViewImpl_UIDragInteractionDelegate *self, id<ASIWidget> w);

__attribute__((unused)) static void ASViewImpl_UIDragInteractionDelegate_sendEventWithInt_withInt_withInt_withBoolean_(ASViewImpl_UIDragInteractionDelegate *self, int32_t x, int32_t y, int32_t action, bool dragCanAccept);

@interface ASViewImpl_UIDropInteractionDelegate () {
 @public
  WEAK_ id<ASIWidget> widget_;
  id<ADView_OnDragListener> listener_;
}

@end

J2OBJC_FIELD_SETTER(ASViewImpl_UIDropInteractionDelegate, listener_, id<ADView_OnDragListener>)

@interface ASViewImpl_UISwipeGestureRecognizerDelegate () {
 @public
  WEAK_ id<ASIWidget> widget_;
  id<ASSwipeHelper_SwipeListener> listener_;
}

@end

J2OBJC_FIELD_SETTER(ASViewImpl_UISwipeGestureRecognizerDelegate, listener_, id<ASSwipeHelper_SwipeListener>)

@interface ASViewImpl_PanGestureRecognizer () {
 @public
  WEAK_ id<ASIWidget> widget_;
  id uiView_;
  id uiLocationView_;
  id<ASViewImpl_PanCallBack> callback_;
}

- (void)addUIPanGestureRecognizer;

@end

J2OBJC_FIELD_SETTER(ASViewImpl_PanGestureRecognizer, uiView_, id)
J2OBJC_FIELD_SETTER(ASViewImpl_PanGestureRecognizer, uiLocationView_, id)
J2OBJC_FIELD_SETTER(ASViewImpl_PanGestureRecognizer, callback_, id<ASViewImpl_PanCallBack>)

__attribute__((unused)) static void ASViewImpl_PanGestureRecognizer_addUIPanGestureRecognizer(ASViewImpl_PanGestureRecognizer *self);

@interface ASViewImpl_AnimationUtils () {
 @public
  id objview_;
  id<ASViewImpl_AnimationCallBack> callBack_;
}

- (void)nativeAnimateWithInt:(int32_t)x
                     withInt:(int32_t)y
                     withInt:(int32_t)animationDurationInMs;

@end

J2OBJC_FIELD_SETTER(ASViewImpl_AnimationUtils, objview_, id)
J2OBJC_FIELD_SETTER(ASViewImpl_AnimationUtils, callBack_, id<ASViewImpl_AnimationCallBack>)

__attribute__((unused)) static void ASViewImpl_AnimationUtils_nativeAnimateWithInt_withInt_withInt_(ASViewImpl_AnimationUtils *self, int32_t x, int32_t y, int32_t animationDurationInMs);

@interface ASViewImpl_$Lambda$1 : NSObject < JavaLangRunnable > {
 @public
  ADAnimator *val$animator_;
}

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(ASViewImpl_$Lambda$1)

__attribute__((unused)) static void ASViewImpl_$Lambda$1_initWithADAnimator_(ASViewImpl_$Lambda$1 *self, ADAnimator *capture$0);

__attribute__((unused)) static ASViewImpl_$Lambda$1 *new_ASViewImpl_$Lambda$1_initWithADAnimator_(ADAnimator *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASViewImpl_$Lambda$1 *create_ASViewImpl_$Lambda$1_initWithADAnimator_(ADAnimator *capture$0);


@implementation ASViewImpl

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASViewImpl_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (void)register__WithNSString:(NSString *)localName {
  ASViewImpl_register__WithNSString_(localName);
}

+ (void)setAttributeWithASIWidget:(id<ASIWidget>)w
            withASWidgetAttribute:(ASWidgetAttribute *)key
                     withNSString:(NSString *)strValue
                           withId:(id)objValue
        withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  ASViewImpl_setAttributeWithASIWidget_withASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(w, key, strValue, objValue, decorator);
}

+ (void)setAttributeWithASIWidget:(id<ASIWidget>)w
         withASSimpleWrapableView:(ASSimpleWrapableView *)wrapperView
            withASWidgetAttribute:(ASWidgetAttribute *)key
                     withNSString:(NSString *)strValue
                           withId:(id)objValue
        withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  ASViewImpl_setAttributeWithASIWidget_withASSimpleWrapableView_withASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(w, wrapperView, key, strValue, objValue, decorator);
}

+ (void)setAttributeWithASIWidget:(id<ASIWidget>)w
                           withId:(id)nativeWidget
            withASWidgetAttribute:(ASWidgetAttribute *)key
                     withNSString:(NSString *)strValue
                           withId:(id)objValue
        withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  ASViewImpl_setAttributeWithASIWidget_withId_withASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(w, nativeWidget, key, strValue, objValue, decorator);
}

+ (id)getAttributeWithASIWidget:(id<ASIWidget>)w
          withASWidgetAttribute:(ASWidgetAttribute *)key
      withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  return ASViewImpl_getAttributeWithASIWidget_withASWidgetAttribute_withASILifeCycleDecorator_(w, key, decorator);
}

+ (id)getAttributeWithASIWidget:(id<ASIWidget>)w
                         withId:(id)nativeWidget
          withASWidgetAttribute:(ASWidgetAttribute *)key
      withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  return ASViewImpl_getAttributeWithASIWidget_withId_withASWidgetAttribute_withASILifeCycleDecorator_(w, nativeWidget, key, decorator);
}

+ (bool)checkIosVersionWithNSString:(NSString *)v {
  return ASViewImpl_checkIosVersionWithNSString_(v);
}

+ (void)setPaddingWithId:(id)objValue
              withADView:(ADView *)view {
  ASViewImpl_setPaddingWithId_withADView_(objValue, view);
}

+ (void)setPaddingLeftWithId:(id)objValue
                  withADView:(ADView *)view {
  ASViewImpl_setPaddingLeftWithId_withADView_(objValue, view);
}

+ (void)setPaddingRightWithId:(id)objValue
                   withADView:(ADView *)view {
  ASViewImpl_setPaddingRightWithId_withADView_(objValue, view);
}

+ (void)setPaddingTopWithId:(id)objValue
                 withADView:(ADView *)view {
  ASViewImpl_setPaddingTopWithId_withADView_(objValue, view);
}

+ (void)setPaddingBottomWithId:(id)objValue
                    withADView:(ADView *)view {
  ASViewImpl_setPaddingBottomWithId_withADView_(objValue, view);
}

+ (id)getPaddingTopWithASIWidget:(id<ASIWidget>)w
                      withADView:(ADView *)view {
  return ASViewImpl_getPaddingTopWithASIWidget_withADView_(w, view);
}

+ (id)getPaddingBottomWithASIWidget:(id<ASIWidget>)w
                         withADView:(ADView *)view {
  return ASViewImpl_getPaddingBottomWithASIWidget_withADView_(w, view);
}

+ (id)getPaddingLeftWithASIWidget:(id<ASIWidget>)w
                       withADView:(ADView *)view {
  return ASViewImpl_getPaddingLeftWithASIWidget_withADView_(w, view);
}

+ (id)getPaddingRightWithASIWidget:(id<ASIWidget>)w
                        withADView:(ADView *)view {
  return ASViewImpl_getPaddingRightWithASIWidget_withADView_(w, view);
}

+ (void)setPaddingHorizontalWithId:(id)objValue
                        withADView:(ADView *)view {
  ASViewImpl_setPaddingHorizontalWithId_withADView_(objValue, view);
}

+ (void)setPaddingVerticalWithId:(id)objValue
                      withADView:(ADView *)view {
  ASViewImpl_setPaddingVerticalWithId_withADView_(objValue, view);
}

+ (void)setIdWithASIWidget:(id<ASIWidget>)w
              withNSString:(NSString *)strValue
                    withId:(id)objValue
                withADView:(ADView *)view {
  ASViewImpl_setIdWithASIWidget_withNSString_withId_withADView_(w, strValue, objValue, view);
}

+ (id)getModelSyncEventsWithASIWidget:(id<ASIWidget>)w {
  return ASViewImpl_getModelSyncEventsWithASIWidget_(w);
}

+ (void)setModelSyncEventsWithASIWidget:(id<ASIWidget>)w
                           withNSString:(NSString *)strValue
                                 withId:(id)objValue
                             withADView:(ADView *)view {
  ASViewImpl_setModelSyncEventsWithASIWidget_withNSString_withId_withADView_(w, strValue, objValue, view);
}

+ (void)setModelParamWithASIWidget:(id<ASIWidget>)w
                      withNSString:(NSString *)strValue
                            withId:(id)objValue
                        withADView:(ADView *)view {
  ASViewImpl_setModelParamWithASIWidget_withNSString_withId_withADView_(w, strValue, objValue, view);
}

+ (void)setModelPojoToUiWithASIWidget:(id<ASIWidget>)w
                         withNSString:(NSString *)strValue
                               withId:(id)objValue
                           withADView:(ADView *)view {
  ASViewImpl_setModelPojoToUiWithASIWidget_withNSString_withId_withADView_(w, strValue, objValue, view);
}

+ (void)setModelUiToPojoWithASIWidget:(id<ASIWidget>)w
                         withNSString:(NSString *)strValue
                               withId:(id)objValue
                           withADView:(ADView *)view {
  ASViewImpl_setModelUiToPojoWithASIWidget_withNSString_withId_withADView_(w, strValue, objValue, view);
}

+ (void)notifyDataSetChangedWithASIWidget:(id<ASIWidget>)w
                                   withId:(id)objValue {
  ASViewImpl_notifyDataSetChangedWithASIWidget_withId_(w, objValue);
}

+ (void)updateModelDataWithASIWidget:(id<ASIWidget>)w
                              withId:(id)expression
                              withId:(id)payload {
  ASViewImpl_updateModelDataWithASIWidget_withId_withId_(w, expression, payload);
}

+ (id)getModelUiToPojoWithASIWidget:(id<ASIWidget>)w {
  return ASViewImpl_getModelUiToPojoWithASIWidget_(w);
}

+ (id)getModelPojoToUiWithASIWidget:(id<ASIWidget>)w {
  return ASViewImpl_getModelPojoToUiWithASIWidget_(w);
}

+ (id)getModelParamWithASIWidget:(id<ASIWidget>)w {
  return ASViewImpl_getModelParamWithASIWidget_(w);
}

+ (void)setModelPojoToUiParamsWithASIWidget:(id<ASIWidget>)w
                                     withId:(id)objValue {
  ASViewImpl_setModelPojoToUiParamsWithASIWidget_withId_(w, objValue);
}

+ (void)refreshUiFromModelWithASIWidget:(id<ASIWidget>)w
                                 withId:(id)objValue {
  ASViewImpl_refreshUiFromModelWithASIWidget_withId_(w, objValue);
}

+ (void)refreshUiFromModelWithASIWidget:(id<ASIWidget>)w
                                 withId:(id)objValue
                            withBoolean:(bool)remeasure {
  ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w, objValue, remeasure);
}

+ (void)setModelUiToPojoEventIdsWithASIWidget:(id<ASIWidget>)w
                                       withId:(id)objValue {
  ASViewImpl_setModelUiToPojoEventIdsWithASIWidget_withId_(w, objValue);
}

+ (void)setZIndexWithASIWidget:(id<ASIWidget>)w
                        withId:(id)objValue {
  ASViewImpl_setZIndexWithASIWidget_withId_(w, objValue);
}

+ (void)setMaxHeightWithASIWidget:(id<ASIWidget>)w
                           withId:(id)objValue {
  ASViewImpl_setMaxHeightWithASIWidget_withId_(w, objValue);
}

+ (void)setMaxWidthWithASIWidget:(id<ASIWidget>)w
                          withId:(id)objValue {
  ASViewImpl_setMaxWidthWithASIWidget_withId_(w, objValue);
}

+ (id)getMaxWidthWithASIWidget:(id<ASIWidget>)w {
  return ASViewImpl_getMaxWidthWithASIWidget_(w);
}

+ (id)getMaxHeightWithASIWidget:(id<ASIWidget>)w {
  return ASViewImpl_getMaxHeightWithASIWidget_(w);
}

+ (void)setSelectedWithId:(id)objValue
               withADView:(ADView *)view {
  ASViewImpl_setSelectedWithId_withADView_(objValue, view);
}

+ (id)getSelectedWithASIWidget:(id<ASIWidget>)w
                    withADView:(ADView *)view {
  return ASViewImpl_getSelectedWithASIWidget_withADView_(w, view);
}

+ (void)setInvalidateOnFrameChangeWithASIWidget:(id<ASIWidget>)w
                                         withId:(id)objValue {
  ASViewImpl_setInvalidateOnFrameChangeWithASIWidget_withId_(w, objValue);
}

+ (void)setBackgroundRepeatWithASIWidget:(id<ASIWidget>)w
                            withNSString:(NSString *)strValue
                                  withId:(id)objValue
                              withADView:(ADView *)view {
  ASViewImpl_setBackgroundRepeatWithASIWidget_withNSString_withId_withADView_(w, strValue, objValue, view);
}

+ (void)setForegroundRepeatWithASIWidget:(id<ASIWidget>)w
                            withNSString:(NSString *)strValue
                                  withId:(id)objValue
                              withADView:(ADView *)view {
  ASViewImpl_setForegroundRepeatWithASIWidget_withNSString_withId_withADView_(w, strValue, objValue, view);
}

+ (void)addEventInfoWithJavaUtilMap:(id<JavaUtilMap>)obj
                  withADMotionEvent:(ADMotionEvent *)event {
  ASViewImpl_addEventInfoWithJavaUtilMap_withADMotionEvent_(obj, event);
}

+ (void)addEventInfoWithJavaUtilMap:(id<JavaUtilMap>)obj
                     withADKeyEvent:(ADKeyEvent *)event {
  ASViewImpl_addEventInfoWithJavaUtilMap_withADKeyEvent_(obj, event);
}

+ (void)addEventInfoWithJavaUtilMap:(id<JavaUtilMap>)obj
               withADView_DragEvent:(ADView_DragEvent *)event {
  ASViewImpl_addEventInfoWithJavaUtilMap_withADView_DragEvent_(obj, event);
}

+ (void)addEventInfoWithJavaUtilMap:(id<JavaUtilMap>)obj
                  withADChronometer:(ADChronometer *)chronometer
                    withASIFragment:(id<ASIFragment>)fragment {
  ASViewImpl_addEventInfoWithJavaUtilMap_withADChronometer_withASIFragment_(obj, chronometer, fragment);
}

+ (void)addEventInfoWithJavaUtilMap:(id<JavaUtilMap>)obj
                   withJavaUtilList:(id<JavaUtilList>)checkedIds
                    withASIFragment:(id<ASIFragment>)fragment {
  ASViewImpl_addEventInfoWithJavaUtilMap_withJavaUtilList_withASIFragment_(obj, checkedIds, fragment);
}

+ (void)validateFormWithASIWidget:(id<ASIWidget>)w
                           withId:(id)objValue {
  ASViewImpl_validateFormWithASIWidget_withId_(w, objValue);
}

+ (id)getValidateFormResultWithASIWidget:(id<ASIWidget>)w {
  return ASViewImpl_getValidateFormResultWithASIWidget_(w);
}

+ (void)setValidationWithASIWidget:(id<ASIWidget>)w
                            withId:(id)objValue {
  ASViewImpl_setValidationWithASIWidget_withId_(w, objValue);
}

+ (id<JavaUtilList>)getFormsWithASIWidget:(id<ASIWidget>)w {
  return ASViewImpl_getFormsWithASIWidget_(w);
}

+ (void)setTypeWithASIWidget:(id<ASIWidget>)w
                withNSString:(NSString *)value
                      withId:(id)objValue {
  ASViewImpl_setTypeWithASIWidget_withNSString_withId_(w, value, objValue);
}

+ (void)setPatternWithASIWidget:(id<ASIWidget>)w
                         withId:(id)objValue {
  ASViewImpl_setPatternWithASIWidget_withId_(w, objValue);
}

+ (void)setMaxWithASIWidget:(id<ASIWidget>)w
                     withId:(id)objValue {
  ASViewImpl_setMaxWithASIWidget_withId_(w, objValue);
}

+ (void)setMinWithASIWidget:(id<ASIWidget>)w
                     withId:(id)objValue {
  ASViewImpl_setMinWithASIWidget_withId_(w, objValue);
}

+ (void)setMaxlengthWithASIWidget:(id<ASIWidget>)w
                           withId:(id)objValue {
  ASViewImpl_setMaxlengthWithASIWidget_withId_(w, objValue);
}

+ (void)setMinlengthWithASIWidget:(id<ASIWidget>)w
                           withId:(id)objValue {
  ASViewImpl_setMinlengthWithASIWidget_withId_(w, objValue);
}

+ (void)setRequiredWithASIWidget:(id<ASIWidget>)w
                          withId:(id)objValue {
  ASViewImpl_setRequiredWithASIWidget_withId_(w, objValue);
}

+ (void)addValidatorWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)validationName
                withNSStringArray:(IOSObjectArray *)params {
  ASViewImpl_addValidatorWithASIWidget_withNSString_withNSStringArray_(w, validationName, params);
}

+ (void)setCustomErrorMessageKeysWithASIWidget:(id<ASIWidget>)w
                                        withId:(id)objValue {
  ASViewImpl_setCustomErrorMessageKeysWithASIWidget_withId_(w, objValue);
}

+ (void)setCustomErrorMessageValuesWithASIWidget:(id<ASIWidget>)w
                                          withId:(id)objValue {
  ASViewImpl_setCustomErrorMessageValuesWithASIWidget_withId_(w, objValue);
}

+ (void)setValidationErrorDisplayWithASIWidget:(id<ASIWidget>)w
                                  withNSString:(NSString *)strValue
                                        withId:(id)objValue {
  ASViewImpl_setValidationErrorDisplayWithASIWidget_withNSString_withId_(w, strValue, objValue);
}

+ (void)setErrorStyleWithASIWidget:(id<ASIWidget>)w
                        withADView:(ADView *)view
                            withId:(id)objValue {
  ASViewImpl_setErrorStyleWithASIWidget_withADView_withId_(w, view, objValue);
}

+ (void)setStyleWithASIWidget:(id<ASIWidget>)w
                   withADView:(ADView *)view
                       withId:(id)objValue {
  ASViewImpl_setStyleWithASIWidget_withADView_withId_(w, view, objValue);
}

+ (void)setStyleWithASIWidget:(id<ASIWidget>)w
                       withId:(id)objValue {
  ASViewImpl_setStyleWithASIWidget_withId_(w, objValue);
}

+ (void)setMessageOnLabelWithASIWidget:(id<ASIWidget>)w
                          withNSString:(NSString *)message {
  ASViewImpl_setMessageOnLabelWithASIWidget_withNSString_(w, message);
}

+ (void)stateWithASIWidget:(id<ASIWidget>)w
                   withInt:(int32_t)i {
  ASViewImpl_stateWithASIWidget_withInt_(w, i);
}

+ (void)setStateWithASIWidget:(id<ASIWidget>)w
                      withInt:(int32_t)i
                       withId:(id)value {
  ASViewImpl_setStateWithASIWidget_withInt_withId_(w, i, value);
}

+ (void)stateYesWithASIWidget:(id<ASIWidget>)w {
  ASViewImpl_stateYesWithASIWidget_(w);
}

+ (void)stateNoWithASIWidget:(id<ASIWidget>)w {
  ASViewImpl_stateNoWithASIWidget_(w);
}

+ (void)setAnimatorListenerWithASIWidget:(id<ASIWidget>)w
         withADAnimator_AnimatorListener:(id<ADAnimator_AnimatorListener>)animatorListener {
  ASViewImpl_setAnimatorListenerWithASIWidget_withADAnimator_AnimatorListener_(w, animatorListener);
}

+ (void)endAnimatorWithASIWidget:(id<ASIWidget>)w
                          withId:(id)objValue {
  ASViewImpl_endAnimatorWithASIWidget_withId_(w, objValue);
}

+ (void)startAnimatorWithASIWidget:(id<ASIWidget>)w
                            withId:(id)objValue {
  ASViewImpl_startAnimatorWithASIWidget_withId_(w, objValue);
}

+ (void)setLayoutDirectionWithASIWidget:(id<ASIWidget>)w
                                 withId:(id)objValue {
  ASViewImpl_setLayoutDirectionWithASIWidget_withId_(w, objValue);
}

+ (id)getLayoutDirectionWithASIWidget:(id<ASIWidget>)w {
  return ASViewImpl_getLayoutDirectionWithASIWidget_(w);
}

+ (void)setTextAlignmentWithASIWidget:(id<ASIWidget>)w
                               withId:(id)objValue {
  ASViewImpl_setTextAlignmentWithASIWidget_withId_(w, objValue);
}

+ (void)setTextDirectionWithASIWidget:(id<ASIWidget>)w
                               withId:(id)objValue {
  ASViewImpl_setTextDirectionWithASIWidget_withId_(w, objValue);
}

+ (id)getTextAlignmentWithASIWidget:(id<ASIWidget>)w {
  return ASViewImpl_getTextAlignmentWithASIWidget_(w);
}

+ (id)getTextDirectionWithASIWidget:(id<ASIWidget>)w {
  return ASViewImpl_getTextDirectionWithASIWidget_(w);
}

+ (bool)isRTLLayoutDirectionWithASIWidget:(id<ASIWidget>)widget {
  return ASViewImpl_isRTLLayoutDirectionWithASIWidget_(widget);
}

+ (void)drawableStateChangedWithASIWidget:(id<ASIWidget>)w {
  ASViewImpl_drawableStateChangedWithASIWidget_(w);
}

+ (id)getColorWithId:(id)objValue {
  return ASViewImpl_getColorWithId_(objValue);
}

+ (void)setDrawableBoundsWithASIWidget:(id<ASIWidget>)widget
                               withInt:(int32_t)l
                               withInt:(int32_t)t
                               withInt:(int32_t)r
                               withInt:(int32_t)b {
  ASViewImpl_setDrawableBoundsWithASIWidget_withInt_withInt_withInt_withInt_(widget, l, t, r, b);
}

+ (void)redrawDrawablesWithASIWidget:(id<ASIWidget>)w {
  ASViewImpl_redrawDrawablesWithASIWidget_(w);
}

+ (void)setMinHeightWithASIWidget:(id<ASIWidget>)w
                           withId:(id)objValue {
  ASViewImpl_setMinHeightWithASIWidget_withId_(w, objValue);
}

+ (void)setMinWidthWithASIWidget:(id<ASIWidget>)w
                          withId:(id)objValue {
  ASViewImpl_setMinWidthWithASIWidget_withId_(w, objValue);
}

+ (id)getMinHeightWithASIWidget:(id<ASIWidget>)w {
  return ASViewImpl_getMinHeightWithASIWidget_(w);
}

+ (id)getMinWidthWithASIWidget:(id<ASIWidget>)w {
  return ASViewImpl_getMinWidthWithASIWidget_(w);
}

+ (id)getVisibilityWithASIWidget:(id<ASIWidget>)w {
  return ASViewImpl_getVisibilityWithASIWidget_(w);
}

+ (void)setLongClickableWithASIWidget:(id<ASIWidget>)w
                               withId:(id)objValue {
  ASViewImpl_setLongClickableWithASIWidget_withId_(w, objValue);
}

+ (id)getLongClickableWithASIWidget:(id<ASIWidget>)w {
  return ASViewImpl_getLongClickableWithASIWidget_(w);
}

+ (void)setDuplicateParentStateWithASIWidget:(id<ASIWidget>)w
                                      withId:(id)objValue {
  ASViewImpl_setDuplicateParentStateWithASIWidget_withId_(w, objValue);
}

+ (id)getDuplicateParentStateWithASIWidget:(id<ASIWidget>)w {
  return ASViewImpl_getDuplicateParentStateWithASIWidget_(w);
}

+ (id)getClickableWithASIWidget:(id<ASIWidget>)w {
  return ASViewImpl_getClickableWithASIWidget_(w);
}

+ (void)requestLayoutWithASIWidget:(id<ASIWidget>)w {
  ASViewImpl_requestLayoutWithASIWidget_(w);
}

+ (void)invalidateWithASIWidget:(id<ASIWidget>)w {
  ASViewImpl_invalidateWithASIWidget_(w);
}

+ (id)getClipDataWithADView_DragEvent:(ADView_DragEvent *)event {
  return ASViewImpl_getClipDataWithADView_DragEvent_(event);
}

+ (ADDrawable *)getDrawableWithADColorStateList:(ADColorStateList *)colorStateList {
  return ASViewImpl_getDrawableWithADColorStateList_(colorStateList);
}

+ (void)setElevationWithASIWidget:(id<ASIWidget>)w
                           withId:(id)objValue {
  ASViewImpl_setElevationWithASIWidget_withId_(w, objValue);
}

+ (NSString *)getValueWithNSString:(NSString *)key
           withOrgXmlSaxAttributes:(id<OrgXmlSaxAttributes>)attributes {
  return ASViewImpl_getValueWithNSString_withOrgXmlSaxAttributes_(key, attributes);
}

+ (void)setBottomWithASIWidget:(id<ASIWidget>)w
                        withId:(id)objValue {
  ASViewImpl_setBottomWithASIWidget_withId_(w, objValue);
}

+ (void)setTopWithASIWidget:(id<ASIWidget>)w
                     withId:(id)objValue {
  ASViewImpl_setTopWithASIWidget_withId_(w, objValue);
}

+ (void)setRightWithASIWidget:(id<ASIWidget>)w
                       withId:(id)objValue {
  ASViewImpl_setRightWithASIWidget_withId_(w, objValue);
}

+ (void)setLeftWithASIWidget:(id<ASIWidget>)w
                      withId:(id)objValue {
  ASViewImpl_setLeftWithASIWidget_withId_(w, objValue);
}

+ (id)getBottomWithASIWidget:(id<ASIWidget>)w {
  return ASViewImpl_getBottomWithASIWidget_(w);
}

+ (id)getTopWithASIWidget:(id<ASIWidget>)w {
  return ASViewImpl_getTopWithASIWidget_(w);
}

+ (id)getRightWithASIWidget:(id<ASIWidget>)w {
  return ASViewImpl_getRightWithASIWidget_(w);
}

+ (id)getLeftWithASIWidget:(id<ASIWidget>)w {
  return ASViewImpl_getLeftWithASIWidget_(w);
}

+ (id<JavaUtilList>)drawOverlayWithASIWidget:(id<ASIWidget>)overlayWrapper
                            withJavaUtilList:(id<JavaUtilList>)overlays {
  return ASViewImpl_drawOverlayWithASIWidget_withJavaUtilList_(overlayWrapper, overlays);
}

+ (void)setAnimatorXmlWithASIWidget:(id<ASIWidget>)w
                             withId:(id)objValue {
  ASViewImpl_setAnimatorXmlWithASIWidget_withId_(w, objValue);
}

+ (id<ADInterpolator>)getInterpolatorWithASIWidget:(id<ASIWidget>)w
                                            withId:(id)objValue {
  return ASViewImpl_getInterpolatorWithASIWidget_withId_(w, objValue);
}

+ (void)addEventInfoWithJavaUtilMap:(id<JavaUtilMap>)obj
                     withADMenuItem:(id<ADMenuItem>)item {
  ASViewImpl_addEventInfoWithJavaUtilMap_withADMenuItem_(obj, item);
}

+ (void)setBackgroundColorWithId:(id)nativeWidget
                          withId:(id)value {
  ASViewImpl_setBackgroundColorWithId_withId_(nativeWidget, value);
}

+ (id)getBackgroundColorWithId:(id)uiView {
  return ASViewImpl_getBackgroundColorWithId_(uiView);
}

+ (void)setIsHiddenWithId:(id)nativeWidget
                   withId:(id)value {
  ASViewImpl_setIsHiddenWithId_withId_(nativeWidget, value);
}

+ (id)getIsHiddenWithId:(id)uiView {
  return ASViewImpl_getIsHiddenWithId_(uiView);
}

+ (void)setAlphaWithId:(id)nativeWidget
                withId:(id)value {
  ASViewImpl_setAlphaWithId_withId_(nativeWidget, value);
}

+ (id)getAlphaWithId:(id)uiView {
  return ASViewImpl_getAlphaWithId_(uiView);
}

+ (void)setIsOpaqueWithId:(id)nativeWidget
                   withId:(id)value {
  ASViewImpl_setIsOpaqueWithId_withId_(nativeWidget, value);
}

+ (id)getIsOpaqueWithId:(id)uiView {
  return ASViewImpl_getIsOpaqueWithId_(uiView);
}

+ (void)setTintColorWithId:(id)nativeWidget
                    withId:(id)value {
  ASViewImpl_setTintColorWithId_withId_(nativeWidget, value);
}

+ (id)getTintColorWithId:(id)uiView {
  return ASViewImpl_getTintColorWithId_(uiView);
}

+ (void)setClipsToBoundsWithId:(id)nativeWidget
                        withId:(id)value {
  ASViewImpl_setClipsToBoundsWithId_withId_(nativeWidget, value);
}

+ (id)getClipsToBoundsWithId:(id)uiView {
  return ASViewImpl_getClipsToBoundsWithId_(uiView);
}

+ (void)setClearsContextBeforeDrawingWithId:(id)nativeWidget
                                     withId:(id)value {
  ASViewImpl_setClearsContextBeforeDrawingWithId_withId_(nativeWidget, value);
}

+ (id)getClearsContextBeforeDrawingWithId:(id)uiView {
  return ASViewImpl_getClearsContextBeforeDrawingWithId_(uiView);
}

+ (void)setIsUserInteractionEnabledWithId:(id)nativeWidget
                                   withId:(id)value {
  ASViewImpl_setIsUserInteractionEnabledWithId_withId_(nativeWidget, value);
}

+ (id)getIsUserInteractionEnabledWithId:(id)uiView {
  return ASViewImpl_getIsUserInteractionEnabledWithId_(uiView);
}

+ (void)setIsMultipleTouchEnabledWithId:(id)nativeWidget
                                 withId:(id)value {
  ASViewImpl_setIsMultipleTouchEnabledWithId_withId_(nativeWidget, value);
}

+ (id)getIsMultipleTouchEnabledWithId:(id)uiView {
  return ASViewImpl_getIsMultipleTouchEnabledWithId_(uiView);
}

+ (void)setIsExclusiveTouchWithId:(id)nativeWidget
                           withId:(id)value {
  ASViewImpl_setIsExclusiveTouchWithId_withId_(nativeWidget, value);
}

+ (id)getIsExclusiveTouchWithId:(id)uiView {
  return ASViewImpl_getIsExclusiveTouchWithId_(uiView);
}

+ (void)setPreservesSuperviewLayoutMarginsWithId:(id)nativeWidget
                                          withId:(id)value {
  ASViewImpl_setPreservesSuperviewLayoutMarginsWithId_withId_(nativeWidget, value);
}

+ (id)getPreservesSuperviewLayoutMarginsWithId:(id)uiView {
  return ASViewImpl_getPreservesSuperviewLayoutMarginsWithId_(uiView);
}

+ (void)setInsetsLayoutMarginsFromSafeAreaWithId:(id)nativeWidget
                                          withId:(id)value {
  ASViewImpl_setInsetsLayoutMarginsFromSafeAreaWithId_withId_(nativeWidget, value);
}

+ (id)getInsetsLayoutMarginsFromSafeAreaWithId:(id)uiView {
  return ASViewImpl_getInsetsLayoutMarginsFromSafeAreaWithId_(uiView);
}

+ (void)setAutoresizesSubviewsWithId:(id)nativeWidget
                              withId:(id)value {
  ASViewImpl_setAutoresizesSubviewsWithId_withId_(nativeWidget, value);
}

+ (id)getAutoresizesSubviewsWithId:(id)uiView {
  return ASViewImpl_getAutoresizesSubviewsWithId_(uiView);
}

+ (void)setTranslatesAutoresizingMaskIntoConstraintsWithId:(id)nativeWidget
                                                    withId:(id)value {
  ASViewImpl_setTranslatesAutoresizingMaskIntoConstraintsWithId_withId_(nativeWidget, value);
}

+ (id)getTranslatesAutoresizingMaskIntoConstraintsWithId:(id)uiView {
  return ASViewImpl_getTranslatesAutoresizingMaskIntoConstraintsWithId_(uiView);
}

+ (void)setContentScaleFactorWithId:(id)nativeWidget
                             withId:(id)value {
  ASViewImpl_setContentScaleFactorWithId_withId_(nativeWidget, value);
}

+ (id)getContentScaleFactorWithId:(id)uiView {
  return ASViewImpl_getContentScaleFactorWithId_(uiView);
}

+ (id)getIsFocusedWithId:(id)uiView {
  return ASViewImpl_getIsFocusedWithId_(uiView);
}

+ (void)setRestorationIdentifierWithId:(id)nativeWidget
                                withId:(id)value {
  ASViewImpl_setRestorationIdentifierWithId_withId_(nativeWidget, value);
}

+ (id)getRestorationIdentifierWithId:(id)uiView {
  return ASViewImpl_getRestorationIdentifierWithId_(uiView);
}

+ (void)setTagWithId:(id)nativeWidget
              withId:(id)value {
  ASViewImpl_setTagWithId_withId_(nativeWidget, value);
}

+ (id)getTagWithId:(id)uiView {
  return ASViewImpl_getTagWithId_(uiView);
}

+ (void)setAccessibilityIgnoresInvertColorsWithId:(id)nativeWidget
                                           withId:(id)value {
  ASViewImpl_setAccessibilityIgnoresInvertColorsWithId_withId_(nativeWidget, value);
}

+ (id)getAccessibilityIgnoresInvertColorsWithId:(id)uiView {
  return ASViewImpl_getAccessibilityIgnoresInvertColorsWithId_(uiView);
}

+ (void)setLargeContentImageWithId:(id)nativeWidget
                            withId:(id)value {
  ASViewImpl_setLargeContentImageWithId_withId_(nativeWidget, value);
}

+ (id)getLargeContentImageWithId:(id)uiView {
  return ASViewImpl_getLargeContentImageWithId_(uiView);
}

+ (void)setLargeContentTitleWithId:(id)nativeWidget
                            withId:(id)value {
  ASViewImpl_setLargeContentTitleWithId_withId_(nativeWidget, value);
}

+ (id)getLargeContentTitleWithId:(id)uiView {
  return ASViewImpl_getLargeContentTitleWithId_(uiView);
}

+ (void)setScalesLargeContentImageWithId:(id)nativeWidget
                                  withId:(id)value {
  ASViewImpl_setScalesLargeContentImageWithId_withId_(nativeWidget, value);
}

+ (id)getScalesLargeContentImageWithId:(id)uiView {
  return ASViewImpl_getScalesLargeContentImageWithId_(uiView);
}

+ (void)setShowsLargeContentViewerWithId:(id)nativeWidget
                                  withId:(id)value {
  ASViewImpl_setShowsLargeContentViewerWithId_withId_(nativeWidget, value);
}

+ (id)getShowsLargeContentViewerWithId:(id)uiView {
  return ASViewImpl_getShowsLargeContentViewerWithId_(uiView);
}

+ (void)setIsAccessibilityElementWithId:(id)nativeWidget
                                 withId:(id)value {
  ASViewImpl_setIsAccessibilityElementWithId_withId_(nativeWidget, value);
}

+ (id)getIsAccessibilityElementWithId:(id)uiView {
  return ASViewImpl_getIsAccessibilityElementWithId_(uiView);
}

+ (void)setAccessibilityLabelWithId:(id)nativeWidget
                             withId:(id)value {
  ASViewImpl_setAccessibilityLabelWithId_withId_(nativeWidget, value);
}

+ (id)getAccessibilityLabelWithId:(id)uiView {
  return ASViewImpl_getAccessibilityLabelWithId_(uiView);
}

+ (void)setAccessibilityHintWithId:(id)nativeWidget
                            withId:(id)value {
  ASViewImpl_setAccessibilityHintWithId_withId_(nativeWidget, value);
}

+ (id)getAccessibilityHintWithId:(id)uiView {
  return ASViewImpl_getAccessibilityHintWithId_(uiView);
}

+ (void)setAccessibilityValueWithId:(id)nativeWidget
                             withId:(id)value {
  ASViewImpl_setAccessibilityValueWithId_withId_(nativeWidget, value);
}

+ (id)getAccessibilityValueWithId:(id)uiView {
  return ASViewImpl_getAccessibilityValueWithId_(uiView);
}

+ (void)setAccessibilityTraitsWithId:(id)nativeWidget
                              withId:(id)value {
  ASViewImpl_setAccessibilityTraitsWithId_withId_(nativeWidget, value);
}

+ (id)getAccessibilityTraitsWithId:(id)uiView {
  return ASViewImpl_getAccessibilityTraitsWithId_(uiView);
}

+ (void)nativeMakeFrameWithId:(id)uiView
                      withInt:(int32_t)l
                      withInt:(int32_t)t
                      withInt:(int32_t)r
                      withInt:(int32_t)b
                      withInt:(int32_t)height {
  ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_withInt_(uiView, l, t, r, b, height);
}

+ (void)updateBoundsWithId:(id)objview
                   withInt:(int32_t)x
                   withInt:(int32_t)y
                   withInt:(int32_t)width
                   withInt:(int32_t)height {
  ASViewImpl_updateBoundsWithId_withInt_withInt_withInt_withInt_(objview, x, y, width, height);
}

+ (id)getFirstChildOrSelfWithId:(id)objview {
  return ASViewImpl_getFirstChildOrSelfWithId_(objview);
}

+ (void)nativeMakeFrameForHorizontalScrollViewWithId:(id)uiView
                                             withInt:(int32_t)l
                                             withInt:(int32_t)t
                                             withInt:(int32_t)r
                                             withInt:(int32_t)b
                                             withInt:(int32_t)width {
  ASViewImpl_nativeMakeFrameForHorizontalScrollViewWithId_withInt_withInt_withInt_withInt_withInt_(uiView, l, t, r, b, width);
}

+ (void)nativeMakeFrameWithId:(id)uiView
                      withInt:(int32_t)l
                      withInt:(int32_t)t
                      withInt:(int32_t)r
                      withInt:(int32_t)b {
  ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_(uiView, l, t, r, b);
}

+ (bool)isRTLLayoutWithASIWidget:(id<ASIWidget>)widget {
  return ASViewImpl_isRTLLayoutWithASIWidget_(widget);
}

+ (bool)isRTLLayout {
  return ASViewImpl_isRTLLayout();
}

+ (void)setBgOnControlWithASIWidget:(id<ASIWidget>)w
                             withId:(id)uiview
                             withId:(id)objValue {
  ASViewImpl_setBgOnControlWithASIWidget_withId_withId_(w, uiview, objValue);
}

+ (void)setBackgroundWithASIWidget:(id<ASIWidget>)w
                            withId:(id)nativeView
                            withId:(id)objValue {
  ASViewImpl_setBackgroundWithASIWidget_withId_withId_(w, nativeView, objValue);
}

+ (void)updateWidthAndHeightWithASIWidget:(id<ASIWidget>)w
                  withADStateListDrawable:(ADStateListDrawable *)background
                                   withId:(id)value
                             withNSString:(NSString *)type
                             withNSString:(NSString *)conveterType {
  ASViewImpl_updateWidthAndHeightWithASIWidget_withADStateListDrawable_withId_withNSString_withNSString_(w, background, value, type, conveterType);
}

+ (void)setBgDrawabeOnViewWithInt:(int32_t)width
                          withInt:(int32_t)height
                       withADView:(ADView *)view {
  ASViewImpl_setBgDrawabeOnViewWithInt_withInt_withADView_(width, height, view);
}

+ (bool)isColorWithId:(id)value {
  return ASViewImpl_isColorWithId_(value);
}

+ (bool)isResizableImageWithId:(id)obj {
  return ASViewImpl_isResizableImageWithId_(obj);
}

+ (bool)isImageWithId:(id)value {
  return ASViewImpl_isImageWithId_(value);
}

+ (int32_t)getImageWidthWithId:(id)value {
  return ASViewImpl_getImageWidthWithId_(value);
}

+ (int32_t)getImageHeightWithId:(id)value {
  return ASViewImpl_getImageHeightWithId_(value);
}

+ (void)clearBgColorWithId:(id)view
                    withId:(id)value {
  ASViewImpl_clearBgColorWithId_withId_(view, value);
}

+ (void)nativeSetBgColorWithId:(id)view
                        withId:(id)value {
  ASViewImpl_nativeSetBgColorWithId_withId_(view, value);
}

+ (void)setOnClickWithASIWidget:(id<ASIWidget>)w
                         withId:(id)nativeView
                         withId:(id)objValue {
  ASViewImpl_setOnClickWithASIWidget_withId_withId_(w, nativeView, objValue);
}

+ (void)setOnClickWithASIWidget:(id<ASIWidget>)w
                   withNSString:(NSString *)id_
                         withId:(id)nativeView
     withADView_OnClickListener:(id<ADView_OnClickListener>)onClickListener {
  ASViewImpl_setOnClickWithASIWidget_withNSString_withId_withADView_OnClickListener_(w, id_, nativeView, onClickListener);
}

+ (void)registerCommandConveterWithASIWidget:(id<ASIWidget>)widget {
  ASViewImpl_registerCommandConveterWithASIWidget_(widget);
}

+ (bool)isNativeRtlSupported {
  return ASViewImpl_isNativeRtlSupported();
}

+ (id)getParentWithASIWidget:(id<ASIWidget>)widget {
  return ASViewImpl_getParentWithASIWidget_(widget);
}

+ (void)setBackgroundTintModeWithASIWidget:(id<ASIWidget>)w
                                    withId:(id)objValue {
  ASViewImpl_setBackgroundTintModeWithASIWidget_withId_(w, objValue);
}

+ (void)setBackgroundTintWithASIWidget:(id<ASIWidget>)w
                                withId:(id)objValue {
  ASViewImpl_setBackgroundTintWithASIWidget_withId_(w, objValue);
}

+ (void)setForegroundTintModeWithASIWidget:(id<ASIWidget>)w
                                    withId:(id)objValue {
  ASViewImpl_setForegroundTintModeWithASIWidget_withId_(w, objValue);
}

+ (void)setForegroundTintWithASIWidget:(id<ASIWidget>)w
                                withId:(id)objValue {
  ASViewImpl_setForegroundTintWithASIWidget_withId_(w, objValue);
}

+ (void)setForegroundWithASIWidget:(id<ASIWidget>)w
                            withId:(id)nativeWidget
                            withId:(id)objValue {
  ASViewImpl_setForegroundWithASIWidget_withId_withId_(w, nativeWidget, objValue);
}

+ (void)setFgOnControlWithASIWidget:(id<ASIWidget>)w
                             withId:(id)nativeWidget
                             withId:(id)objValue {
  ASViewImpl_setFgOnControlWithASIWidget_withId_withId_(w, nativeWidget, objValue);
}

+ (void)setVisibilityWithASIWidget:(id<ASIWidget>)w
                            withId:(id)nativeWidget
                            withId:(id)objValue {
  ASViewImpl_setVisibilityWithASIWidget_withId_withId_(w, nativeWidget, objValue);
}

+ (void)nativeSetVisibilityWithId:(id)view
                      withBoolean:(bool)hidden {
  ASViewImpl_nativeSetVisibilityWithId_withBoolean_(view, hidden);
}

+ (id)getClickableWithId:(id)nativeWidget {
  return ASViewImpl_getClickableWithId_(nativeWidget);
}

+ (bool)nativeGetClickableWithId:(id)view {
  return ASViewImpl_nativeGetClickableWithId_(view);
}

+ (void)setClickableWithASIWidget:(id<ASIWidget>)w
                           withId:(id)nativeWidget
                           withId:(id)objValue {
  ASViewImpl_setClickableWithASIWidget_withId_withId_(w, nativeWidget, objValue);
}

+ (void)nativeSetClickableWithId:(id)view
                     withBoolean:(bool)clickable {
  ASViewImpl_nativeSetClickableWithId_withBoolean_(view, clickable);
}

+ (void)setOnLongClickWithASIWidget:(id<ASIWidget>)w
                             withId:(id)nativeView
                             withId:(id)objValue {
  ASViewImpl_setOnLongClickWithASIWidget_withId_withId_(w, nativeView, objValue);
}

+ (void)setOnLongClickWithASIWidget:(id<ASIWidget>)w
                             withId:(id)nativeView
     withADView_OnLongClickListener:(id<ADView_OnLongClickListener>)listener {
  ASViewImpl_setOnLongClickWithASIWidget_withId_withADView_OnLongClickListener_(w, nativeView, listener);
}

+ (void)setTranslationXWithASIWidget:(id<ASIWidget>)w
                              withId:(id)objValue {
  ASViewImpl_setTranslationXWithASIWidget_withId_(w, objValue);
}

+ (void)relayoutWithASIWidget:(id<ASIWidget>)w {
  ASViewImpl_relayoutWithASIWidget_(w);
}

+ (void)setTranslationYWithASIWidget:(id<ASIWidget>)w
                              withId:(id)objValue {
  ASViewImpl_setTranslationYWithASIWidget_withId_(w, objValue);
}

+ (void)setTranslationZWithASIWidget:(id<ASIWidget>)w
                              withId:(id)objValue {
  ASViewImpl_setTranslationZWithASIWidget_withId_(w, objValue);
}

+ (void)setTransformPivotYWithASIWidget:(id<ASIWidget>)w
                                 withId:(id)objValue {
  ASViewImpl_setTransformPivotYWithASIWidget_withId_(w, objValue);
}

+ (void)setTransformPivotXWithASIWidget:(id<ASIWidget>)w
                                 withId:(id)objValue {
  ASViewImpl_setTransformPivotXWithASIWidget_withId_(w, objValue);
}

+ (void)setScaleYWithASIWidget:(id<ASIWidget>)w
                        withId:(id)objValue {
  ASViewImpl_setScaleYWithASIWidget_withId_(w, objValue);
}

+ (void)setScaleXWithASIWidget:(id<ASIWidget>)w
                        withId:(id)objValue {
  ASViewImpl_setScaleXWithASIWidget_withId_(w, objValue);
}

+ (void)setRotationYWithASIWidget:(id<ASIWidget>)w
                           withId:(id)objValue {
  ASViewImpl_setRotationYWithASIWidget_withId_(w, objValue);
}

+ (void)setRotationXWithASIWidget:(id<ASIWidget>)w
                           withId:(id)objValue {
  ASViewImpl_setRotationXWithASIWidget_withId_(w, objValue);
}

+ (void)setRotationWithASIWidget:(id<ASIWidget>)w
                          withId:(id)objValue {
  ASViewImpl_setRotationWithASIWidget_withId_(w, objValue);
}

+ (id)getTranslationXWithASIWidget:(id<ASIWidget>)w {
  return ASViewImpl_getTranslationXWithASIWidget_(w);
}

+ (id)getTransformPivotYWithASIWidget:(id<ASIWidget>)w {
  return ASViewImpl_getTransformPivotYWithASIWidget_(w);
}

+ (id)getTransformPivotXWithASIWidget:(id<ASIWidget>)w {
  return ASViewImpl_getTransformPivotXWithASIWidget_(w);
}

+ (id)getScaleYWithASIWidget:(id<ASIWidget>)w {
  return ASViewImpl_getScaleYWithASIWidget_(w);
}

+ (id)getScaleXWithASIWidget:(id<ASIWidget>)w {
  return ASViewImpl_getScaleXWithASIWidget_(w);
}

+ (id)getRotationYWithASIWidget:(id<ASIWidget>)w {
  return ASViewImpl_getRotationYWithASIWidget_(w);
}

+ (id)getRotationXWithASIWidget:(id<ASIWidget>)w {
  return ASViewImpl_getRotationXWithASIWidget_(w);
}

+ (id)getRotationWithASIWidget:(id<ASIWidget>)w {
  return ASViewImpl_getRotationWithASIWidget_(w);
}

+ (id)getTranslationZWithASIWidget:(id<ASIWidget>)w {
  return ASViewImpl_getTranslationZWithASIWidget_(w);
}

+ (id)getTranslationYWithASIWidget:(id<ASIWidget>)w {
  return ASViewImpl_getTranslationYWithASIWidget_(w);
}

+ (id)getForegroundTintWithASIWidget:(id<ASIWidget>)w {
  return ASViewImpl_getForegroundTintWithASIWidget_(w);
}

+ (id)getForegroundTintModeWithASIWidget:(id<ASIWidget>)w {
  return ASViewImpl_getForegroundTintModeWithASIWidget_(w);
}

+ (id)getBackgroundTintModeWithASIWidget:(id<ASIWidget>)w {
  return ASViewImpl_getBackgroundTintModeWithASIWidget_(w);
}

+ (id)getBackgroundTintWithASIWidget:(id<ASIWidget>)w {
  return ASViewImpl_getBackgroundTintWithASIWidget_(w);
}

+ (void)requestLayoutWithASIWidget:(id<ASIWidget>)w
                            withId:(id)nativeView {
  ASViewImpl_requestLayoutWithASIWidget_withId_(w, nativeView);
}

+ (void)invalidateWithASIWidget:(id<ASIWidget>)w
                         withId:(id)nativeView {
  ASViewImpl_invalidateWithASIWidget_withId_(w, nativeView);
}

+ (void)nativeRequestLayoutWithId:(id)view {
  ASViewImpl_nativeRequestLayoutWithId_(view);
}

+ (void)nativeInvalidateWithId:(id)view {
  ASViewImpl_nativeInvalidateWithId_(view);
}

+ (void)setKeepScreenOnWithId:(id)nativeWidget
                       withId:(id)value {
  ASViewImpl_setKeepScreenOnWithId_withId_(nativeWidget, value);
}

+ (id)getKeepScreenOnWithId:(id)uiView {
  return ASViewImpl_getKeepScreenOnWithId_(uiView);
}

+ (bool)isMirrorSupported {
  return ASViewImpl_isMirrorSupported();
}

+ (void)setOnTouchWithASIWidget:(id<ASIWidget>)w
                         withId:(id)nativeView
                         withId:(id)objValue {
  ASViewImpl_setOnTouchWithASIWidget_withId_withId_(w, nativeView, objValue);
}

+ (void)startDragWithASIWidget:(id<ASIWidget>)w
                  withNSString:(NSString *)eventData {
  ASViewImpl_startDragWithASIWidget_withNSString_(w, eventData);
}

+ (void)setOnDragWithASIWidget:(id<ASIWidget>)w
                        withId:(id)nativeView
                        withId:(id)objValue {
  ASViewImpl_setOnDragWithASIWidget_withId_withId_(w, nativeView, objValue);
}

+ (void)setAsDragSourceWithASIWidget:(id<ASIWidget>)w
                              withId:(id)nativeWidget
                              withId:(id)objValue {
  ASViewImpl_setAsDragSourceWithASIWidget_withId_withId_(w, nativeWidget, objValue);
}

+ (id)getForegroundWithASIWidget:(id<ASIWidget>)w {
  return ASViewImpl_getForegroundWithASIWidget_(w);
}

+ (id)getBackgroundWithASIWidget:(id<ASIWidget>)w {
  return ASViewImpl_getBackgroundWithASIWidget_(w);
}

+ (void)setOnKeyWithASIWidget:(id<ASIWidget>)w
                       withId:(id)objValue {
  ASViewImpl_setOnKeyWithASIWidget_withId_(w, objValue);
}

+ (void)setLayerCornerRadiusWithId:(id)nativeWidget
                            withId:(id)objValue {
  ASViewImpl_setLayerCornerRadiusWithId_withId_(nativeWidget, objValue);
}

+ (void)nativeSetLayerCornerRadiusWithId:(id)nativeWidget
                               withFloat:(float)value {
  ASViewImpl_nativeSetLayerCornerRadiusWithId_withFloat_(nativeWidget, value);
}

+ (void)setLayerBorderColorWithId:(id)nativeWidget
                           withId:(id)objValue {
  ASViewImpl_setLayerBorderColorWithId_withId_(nativeWidget, objValue);
}

+ (void)nativeLayerBorderColorWithId:(id)nativeWidget
                              withId:(id)value {
  ASViewImpl_nativeLayerBorderColorWithId_withId_(nativeWidget, value);
}

+ (void)setLayerBorderWidthWithId:(id)nativeWidget
                           withId:(id)objValue {
  ASViewImpl_setLayerBorderWidthWithId_withId_(nativeWidget, objValue);
}

+ (void)nativeLayerBorderWidthWithId:(id)nativeWidget
                           withFloat:(float)value {
  ASViewImpl_nativeLayerBorderWidthWithId_withFloat_(nativeWidget, value);
}

+ (void)setLayerMasksToBoundsWithId:(id)nativeWidget
                             withId:(id)objValue {
  ASViewImpl_setLayerMasksToBoundsWithId_withId_(nativeWidget, objValue);
}

+ (void)nativeLayerBMasksToBoundsWithId:(id)nativeWidget
                            withBoolean:(bool)value {
  ASViewImpl_nativeLayerBMasksToBoundsWithId_withBoolean_(nativeWidget, value);
}

+ (void)nativeBringToFrontWithJavaUtilList:(id<JavaUtilList>)widgets {
  ASViewImpl_nativeBringToFrontWithJavaUtilList_(widgets);
}

+ (void)nativeBringToFrontWithId:(id)nativeWidget {
  ASViewImpl_nativeBringToFrontWithId_(nativeWidget);
}

+ (void)setNativeIdWithASIWidget:(id<ASIWidget>)w
                    withNSString:(NSString *)strValue {
  ASViewImpl_setNativeIdWithASIWidget_withNSString_(w, strValue);
}

+ (int32_t)getLocationXOnScreenWithId:(id)nativeWidget {
  return ASViewImpl_getLocationXOnScreenWithId_(nativeWidget);
}

+ (int32_t)getLocationYOnScreenWithId:(id)nativeWidget {
  return ASViewImpl_getLocationYOnScreenWithId_(nativeWidget);
}

+ (void)setOutsideTouchableWithASIWidget:(id<ASIWidget>)w
                            withNSString:(NSString *)strValue
                                  withId:(id)objValue
                              withADView:(ADView *)view {
  ASViewImpl_setOutsideTouchableWithASIWidget_withNSString_withId_withADView_(w, strValue, objValue, view);
}

+ (int32_t)nativeMeasureWidthWithId:(id)uiView {
  return ASViewImpl_nativeMeasureWidthWithId_(uiView);
}

+ (int32_t)nativeMeasureHeightWithId:(id)uiView
                             withInt:(int32_t)width {
  return ASViewImpl_nativeMeasureHeightWithId_withInt_(uiView, width);
}

+ (void)setOnSwipeListenerWithASIWidget:(id<ASIWidget>)w
        withASSwipeHelper_SwipeListener:(id<ASSwipeHelper_SwipeListener>)swipeListener {
  ASViewImpl_setOnSwipeListenerWithASIWidget_withASSwipeHelper_SwipeListener_(w, swipeListener);
}

+ (void)addPanListenerWithASIWidget:(id<ASIWidget>)widget
                             withId:(id)uiView
         withASViewImpl_PanCallBack:(id<ASViewImpl_PanCallBack>)callback {
  ASViewImpl_addPanListenerWithASIWidget_withId_withASViewImpl_PanCallBack_(widget, uiView, callback);
}

+ (void)addPanListenerWithASIWidget:(id<ASIWidget>)widget
                             withId:(id)uiView
                             withId:(id)uiLocationView
         withASViewImpl_PanCallBack:(id<ASViewImpl_PanCallBack>)callback {
  ASViewImpl_addPanListenerWithASIWidget_withId_withId_withASViewImpl_PanCallBack_(widget, uiView, uiLocationView, callback);
}

+ (int32_t)getXWithId:(id)objview {
  return ASViewImpl_getXWithId_(objview);
}

+ (int32_t)getYWithId:(id)objview {
  return ASViewImpl_getYWithId_(objview);
}

+ (void)updateBoundsXWithId:(id)objview
                    withInt:(int32_t)x {
  ASViewImpl_updateBoundsXWithId_withInt_(objview, x);
}

+ (void)translateWithAnimationWithId:(id)objview
                             withInt:(int32_t)x
                             withInt:(int32_t)y
                             withInt:(int32_t)animationDurationInMs
    withASViewImpl_AnimationCallBack:(id<ASViewImpl_AnimationCallBack>)callBack {
  ASViewImpl_translateWithAnimationWithId_withInt_withInt_withInt_withASViewImpl_AnimationCallBack_(objview, x, y, animationDurationInMs, callBack);
}

+ (void)setOutlineSpotShadowColorWithASIWidget:(id<ASIWidget>)w
                                        withId:(id)objValue {
  ASViewImpl_setOutlineSpotShadowColorWithASIWidget_withId_(w, objValue);
}

+ (void)setOutlineAmbientShadowColorWithASIWidget:(id<ASIWidget>)w
                                           withId:(id)objValue {
  ASViewImpl_setOutlineAmbientShadowColorWithASIWidget_withId_(w, objValue);
}

+ (void)setShadowColorWithId:(id)view
                      withId:(id)color {
  ASViewImpl_setShadowColorWithId_withId_(view, color);
}

+ (void)setCornerRadiusWithASIWidget:(id<ASIWidget>)w
                              withId:(id)nativeWidget
                              withId:(id)objValue {
  ASViewImpl_setCornerRadiusWithASIWidget_withId_withId_(w, nativeWidget, objValue);
}

+ (void)setCornerRadiusOnViewWithId:(id)view
                          withFloat:(float)radius {
  ASViewImpl_setCornerRadiusOnViewWithId_withFloat_(view, radius);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 2, 4, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 2, 5, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x9, 6, 7, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x9, 6, 8, -1, -1, -1, -1 },
    { NULL, "Z", 0x109, 9, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 12, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 13, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 14, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 15, 11, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x9, 16, 17, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x9, 18, 17, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x9, 19, 17, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x9, 20, 17, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 21, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 22, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 23, 24, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0xa, 25, 26, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 27, 24, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 28, 24, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 29, 24, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 30, 24, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 31, 32, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 33, 34, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0xa, 35, 26, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0xa, 36, 26, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0xa, 37, 26, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 38, 32, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 39, 32, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 39, 40, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 41, 32, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 42, 32, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 43, 32, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 44, 32, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x9, 45, 26, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x9, 46, 26, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 47, 11, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0xa, 48, 17, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 49, 32, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 50, 24, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 51, 24, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 52, 53, -1, 54, -1, -1 },
    { NULL, "V", 0x9, 52, 55, -1, 56, -1, -1 },
    { NULL, "V", 0x9, 52, 57, -1, 58, -1, -1 },
    { NULL, "V", 0x9, 52, 59, -1, 60, -1, -1 },
    { NULL, "V", 0x9, 52, 61, -1, 62, -1, -1 },
    { NULL, "V", 0xa, 63, 32, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0xa, 64, 26, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 65, 32, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x9, 66, 26, -1, 67, -1, -1 },
    { NULL, "V", 0xa, 68, 69, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 70, 32, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 71, 32, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 72, 32, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 73, 32, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 74, 32, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 75, 32, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 76, 77, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 78, 32, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 79, 32, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 80, 69, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 81, 82, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 83, 82, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 83, 32, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 84, 85, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 86, 87, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 88, 89, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 90, 26, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 91, 26, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 92, 93, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 94, 32, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 95, 32, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 96, 32, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0xa, 97, 26, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 98, 32, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 99, 32, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0xa, 100, 26, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0xa, 101, 26, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 102, 26, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 103, 26, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x9, 104, 105, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 106, 107, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 108, 26, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 109, 32, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 110, 32, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0xa, 111, 26, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0xa, 112, 26, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0xa, 113, 26, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 114, 32, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0xa, 115, 26, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 116, 32, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0xa, 117, 26, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0xa, 118, 26, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 119, 26, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 120, 26, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0xa, 121, 122, -1, -1, -1, -1 },
    { NULL, "LADDrawable;", 0x9, 123, 124, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 125, 32, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 126, 127, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 128, 32, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 129, 32, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 130, 32, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 131, 32, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0xa, 132, 26, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0xa, 133, 26, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0xa, 134, 26, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0xa, 135, 26, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x9, 136, 137, -1, 138, -1, -1 },
    { NULL, "V", 0xa, 139, 32, -1, -1, -1, -1 },
    { NULL, "LADInterpolator;", 0x9, 140, 32, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 52, 141, -1, 142, -1, -1 },
    { NULL, "V", 0x109, 143, 144, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x109, 145, 105, -1, -1, -1, -1 },
    { NULL, "V", 0x109, 146, 144, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x109, 147, 105, -1, -1, -1, -1 },
    { NULL, "V", 0x109, 148, 144, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x109, 149, 105, -1, -1, -1, -1 },
    { NULL, "V", 0x109, 150, 144, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x109, 151, 105, -1, -1, -1, -1 },
    { NULL, "V", 0x109, 152, 144, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x109, 153, 105, -1, -1, -1, -1 },
    { NULL, "V", 0x109, 154, 144, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x109, 155, 105, -1, -1, -1, -1 },
    { NULL, "V", 0x109, 156, 144, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x109, 157, 105, -1, -1, -1, -1 },
    { NULL, "V", 0x109, 158, 144, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x109, 159, 105, -1, -1, -1, -1 },
    { NULL, "V", 0x109, 160, 144, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x109, 161, 105, -1, -1, -1, -1 },
    { NULL, "V", 0x109, 162, 144, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x109, 163, 105, -1, -1, -1, -1 },
    { NULL, "V", 0x109, 164, 144, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x109, 165, 105, -1, -1, -1, -1 },
    { NULL, "V", 0x109, 166, 144, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x109, 167, 105, -1, -1, -1, -1 },
    { NULL, "V", 0x109, 168, 144, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x109, 169, 105, -1, -1, -1, -1 },
    { NULL, "V", 0x109, 170, 144, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x109, 171, 105, -1, -1, -1, -1 },
    { NULL, "V", 0x109, 172, 144, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x109, 173, 105, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x109, 174, 105, -1, -1, -1, -1 },
    { NULL, "V", 0x109, 175, 144, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x109, 176, 105, -1, -1, -1, -1 },
    { NULL, "V", 0x109, 177, 144, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x109, 178, 105, -1, -1, -1, -1 },
    { NULL, "V", 0x109, 179, 144, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x109, 180, 105, -1, -1, -1, -1 },
    { NULL, "V", 0x109, 181, 144, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x109, 182, 105, -1, -1, -1, -1 },
    { NULL, "V", 0x109, 183, 144, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x109, 184, 105, -1, -1, -1, -1 },
    { NULL, "V", 0x109, 185, 144, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x109, 186, 105, -1, -1, -1, -1 },
    { NULL, "V", 0x109, 187, 144, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x109, 188, 105, -1, -1, -1, -1 },
    { NULL, "V", 0x109, 189, 144, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x109, 190, 105, -1, -1, -1, -1 },
    { NULL, "V", 0x109, 191, 144, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x109, 192, 105, -1, -1, -1, -1 },
    { NULL, "V", 0x109, 193, 144, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x109, 194, 105, -1, -1, -1, -1 },
    { NULL, "V", 0x109, 195, 144, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x109, 196, 105, -1, -1, -1, -1 },
    { NULL, "V", 0x109, 197, 144, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x109, 198, 105, -1, -1, -1, -1 },
    { NULL, "V", 0x109, 199, 200, -1, -1, -1, -1 },
    { NULL, "V", 0x109, 201, 202, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x109, 203, 105, -1, -1, -1, -1 },
    { NULL, "V", 0x109, 204, 200, -1, -1, -1, -1 },
    { NULL, "V", 0x109, 199, 202, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 205, 26, -1, -1, -1, -1 },
    { NULL, "Z", 0x109, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 206, 34, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 207, 34, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 208, 209, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 210, 211, -1, -1, -1, -1 },
    { NULL, "Z", 0x109, 212, 105, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 213, 105, -1, -1, -1, -1 },
    { NULL, "Z", 0x109, 214, 105, -1, -1, -1, -1 },
    { NULL, "I", 0x109, 215, 105, -1, -1, -1, -1 },
    { NULL, "I", 0x109, 216, 105, -1, -1, -1, -1 },
    { NULL, "V", 0x10a, 217, 144, -1, -1, -1, -1 },
    { NULL, "V", 0x10a, 218, 144, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 219, 34, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 219, 220, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 221, 26, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x9, 222, 26, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 223, 32, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 224, 32, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 225, 32, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 226, 32, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 227, 34, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 228, 34, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 229, 34, -1, -1, -1, -1 },
    { NULL, "V", 0x109, 230, 231, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0xa, 118, 105, -1, -1, -1, -1 },
    { NULL, "Z", 0x10a, 232, 105, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 233, 34, -1, -1, -1, -1 },
    { NULL, "V", 0x10a, 234, 231, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 235, 34, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 235, 236, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 237, 32, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 238, 26, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 239, 32, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 240, 32, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 241, 32, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 242, 32, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 243, 32, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 244, 32, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 245, 32, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 246, 32, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 247, 32, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0xa, 248, 26, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0xa, 249, 26, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0xa, 250, 26, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0xa, 251, 26, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0xa, 252, 26, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0xa, 253, 26, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0xa, 254, 26, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0xa, 255, 26, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0xa, 256, 26, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0xa, 257, 26, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0xa, 258, 26, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0xa, 259, 26, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0xa, 260, 26, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0xa, 261, 26, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 119, 32, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 120, 32, -1, -1, -1, -1 },
    { NULL, "V", 0x109, 262, 105, -1, -1, -1, -1 },
    { NULL, "V", 0x109, 263, 105, -1, -1, -1, -1 },
    { NULL, "V", 0x109, 264, 144, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x109, 265, 105, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 266, 34, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 267, 85, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 268, 34, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 269, 34, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0xa, 270, 26, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0xa, 271, 26, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 272, 32, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 273, 144, -1, -1, -1, -1 },
    { NULL, "V", 0x10a, 274, 275, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 276, 144, -1, -1, -1, -1 },
    { NULL, "V", 0x10a, 277, 144, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 278, 144, -1, -1, -1, -1 },
    { NULL, "V", 0x10a, 279, 275, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 280, 144, -1, -1, -1, -1 },
    { NULL, "V", 0x10a, 281, 231, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 282, 283, -1, 284, -1, -1 },
    { NULL, "V", 0x109, 282, 105, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 285, 85, -1, -1, -1, -1 },
    { NULL, "I", 0x109, 286, 105, -1, -1, -1, -1 },
    { NULL, "I", 0x109, 287, 105, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 288, 24, -1, -1, -1, -1 },
    { NULL, "I", 0x109, 289, 105, -1, -1, -1, -1 },
    { NULL, "I", 0x109, 290, 291, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 292, 293, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 294, 295, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 294, 296, -1, -1, -1, -1 },
    { NULL, "I", 0x109, 297, 105, -1, -1, -1, -1 },
    { NULL, "I", 0x109, 298, 105, -1, -1, -1, -1 },
    { NULL, "V", 0x109, 299, 291, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 300, 301, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 302, 32, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 303, 32, -1, -1, -1, -1 },
    { NULL, "V", 0x10a, 304, 144, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 305, 34, -1, -1, -1, -1 },
    { NULL, "V", 0x10a, 306, 275, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(register__WithNSString:);
  methods[2].selector = @selector(setAttributeWithASIWidget:withASWidgetAttribute:withNSString:withId:withASILifeCycleDecorator:);
  methods[3].selector = @selector(setAttributeWithASIWidget:withASSimpleWrapableView:withASWidgetAttribute:withNSString:withId:withASILifeCycleDecorator:);
  methods[4].selector = @selector(setAttributeWithASIWidget:withId:withASWidgetAttribute:withNSString:withId:withASILifeCycleDecorator:);
  methods[5].selector = @selector(getAttributeWithASIWidget:withASWidgetAttribute:withASILifeCycleDecorator:);
  methods[6].selector = @selector(getAttributeWithASIWidget:withId:withASWidgetAttribute:withASILifeCycleDecorator:);
  methods[7].selector = @selector(checkIosVersionWithNSString:);
  methods[8].selector = @selector(setPaddingWithId:withADView:);
  methods[9].selector = @selector(setPaddingLeftWithId:withADView:);
  methods[10].selector = @selector(setPaddingRightWithId:withADView:);
  methods[11].selector = @selector(setPaddingTopWithId:withADView:);
  methods[12].selector = @selector(setPaddingBottomWithId:withADView:);
  methods[13].selector = @selector(getPaddingTopWithASIWidget:withADView:);
  methods[14].selector = @selector(getPaddingBottomWithASIWidget:withADView:);
  methods[15].selector = @selector(getPaddingLeftWithASIWidget:withADView:);
  methods[16].selector = @selector(getPaddingRightWithASIWidget:withADView:);
  methods[17].selector = @selector(setPaddingHorizontalWithId:withADView:);
  methods[18].selector = @selector(setPaddingVerticalWithId:withADView:);
  methods[19].selector = @selector(setIdWithASIWidget:withNSString:withId:withADView:);
  methods[20].selector = @selector(getModelSyncEventsWithASIWidget:);
  methods[21].selector = @selector(setModelSyncEventsWithASIWidget:withNSString:withId:withADView:);
  methods[22].selector = @selector(setModelParamWithASIWidget:withNSString:withId:withADView:);
  methods[23].selector = @selector(setModelPojoToUiWithASIWidget:withNSString:withId:withADView:);
  methods[24].selector = @selector(setModelUiToPojoWithASIWidget:withNSString:withId:withADView:);
  methods[25].selector = @selector(notifyDataSetChangedWithASIWidget:withId:);
  methods[26].selector = @selector(updateModelDataWithASIWidget:withId:withId:);
  methods[27].selector = @selector(getModelUiToPojoWithASIWidget:);
  methods[28].selector = @selector(getModelPojoToUiWithASIWidget:);
  methods[29].selector = @selector(getModelParamWithASIWidget:);
  methods[30].selector = @selector(setModelPojoToUiParamsWithASIWidget:withId:);
  methods[31].selector = @selector(refreshUiFromModelWithASIWidget:withId:);
  methods[32].selector = @selector(refreshUiFromModelWithASIWidget:withId:withBoolean:);
  methods[33].selector = @selector(setModelUiToPojoEventIdsWithASIWidget:withId:);
  methods[34].selector = @selector(setZIndexWithASIWidget:withId:);
  methods[35].selector = @selector(setMaxHeightWithASIWidget:withId:);
  methods[36].selector = @selector(setMaxWidthWithASIWidget:withId:);
  methods[37].selector = @selector(getMaxWidthWithASIWidget:);
  methods[38].selector = @selector(getMaxHeightWithASIWidget:);
  methods[39].selector = @selector(setSelectedWithId:withADView:);
  methods[40].selector = @selector(getSelectedWithASIWidget:withADView:);
  methods[41].selector = @selector(setInvalidateOnFrameChangeWithASIWidget:withId:);
  methods[42].selector = @selector(setBackgroundRepeatWithASIWidget:withNSString:withId:withADView:);
  methods[43].selector = @selector(setForegroundRepeatWithASIWidget:withNSString:withId:withADView:);
  methods[44].selector = @selector(addEventInfoWithJavaUtilMap:withADMotionEvent:);
  methods[45].selector = @selector(addEventInfoWithJavaUtilMap:withADKeyEvent:);
  methods[46].selector = @selector(addEventInfoWithJavaUtilMap:withADView_DragEvent:);
  methods[47].selector = @selector(addEventInfoWithJavaUtilMap:withADChronometer:withASIFragment:);
  methods[48].selector = @selector(addEventInfoWithJavaUtilMap:withJavaUtilList:withASIFragment:);
  methods[49].selector = @selector(validateFormWithASIWidget:withId:);
  methods[50].selector = @selector(getValidateFormResultWithASIWidget:);
  methods[51].selector = @selector(setValidationWithASIWidget:withId:);
  methods[52].selector = @selector(getFormsWithASIWidget:);
  methods[53].selector = @selector(setTypeWithASIWidget:withNSString:withId:);
  methods[54].selector = @selector(setPatternWithASIWidget:withId:);
  methods[55].selector = @selector(setMaxWithASIWidget:withId:);
  methods[56].selector = @selector(setMinWithASIWidget:withId:);
  methods[57].selector = @selector(setMaxlengthWithASIWidget:withId:);
  methods[58].selector = @selector(setMinlengthWithASIWidget:withId:);
  methods[59].selector = @selector(setRequiredWithASIWidget:withId:);
  methods[60].selector = @selector(addValidatorWithASIWidget:withNSString:withNSStringArray:);
  methods[61].selector = @selector(setCustomErrorMessageKeysWithASIWidget:withId:);
  methods[62].selector = @selector(setCustomErrorMessageValuesWithASIWidget:withId:);
  methods[63].selector = @selector(setValidationErrorDisplayWithASIWidget:withNSString:withId:);
  methods[64].selector = @selector(setErrorStyleWithASIWidget:withADView:withId:);
  methods[65].selector = @selector(setStyleWithASIWidget:withADView:withId:);
  methods[66].selector = @selector(setStyleWithASIWidget:withId:);
  methods[67].selector = @selector(setMessageOnLabelWithASIWidget:withNSString:);
  methods[68].selector = @selector(stateWithASIWidget:withInt:);
  methods[69].selector = @selector(setStateWithASIWidget:withInt:withId:);
  methods[70].selector = @selector(stateYesWithASIWidget:);
  methods[71].selector = @selector(stateNoWithASIWidget:);
  methods[72].selector = @selector(setAnimatorListenerWithASIWidget:withADAnimator_AnimatorListener:);
  methods[73].selector = @selector(endAnimatorWithASIWidget:withId:);
  methods[74].selector = @selector(startAnimatorWithASIWidget:withId:);
  methods[75].selector = @selector(setLayoutDirectionWithASIWidget:withId:);
  methods[76].selector = @selector(getLayoutDirectionWithASIWidget:);
  methods[77].selector = @selector(setTextAlignmentWithASIWidget:withId:);
  methods[78].selector = @selector(setTextDirectionWithASIWidget:withId:);
  methods[79].selector = @selector(getTextAlignmentWithASIWidget:);
  methods[80].selector = @selector(getTextDirectionWithASIWidget:);
  methods[81].selector = @selector(isRTLLayoutDirectionWithASIWidget:);
  methods[82].selector = @selector(drawableStateChangedWithASIWidget:);
  methods[83].selector = @selector(getColorWithId:);
  methods[84].selector = @selector(setDrawableBoundsWithASIWidget:withInt:withInt:withInt:withInt:);
  methods[85].selector = @selector(redrawDrawablesWithASIWidget:);
  methods[86].selector = @selector(setMinHeightWithASIWidget:withId:);
  methods[87].selector = @selector(setMinWidthWithASIWidget:withId:);
  methods[88].selector = @selector(getMinHeightWithASIWidget:);
  methods[89].selector = @selector(getMinWidthWithASIWidget:);
  methods[90].selector = @selector(getVisibilityWithASIWidget:);
  methods[91].selector = @selector(setLongClickableWithASIWidget:withId:);
  methods[92].selector = @selector(getLongClickableWithASIWidget:);
  methods[93].selector = @selector(setDuplicateParentStateWithASIWidget:withId:);
  methods[94].selector = @selector(getDuplicateParentStateWithASIWidget:);
  methods[95].selector = @selector(getClickableWithASIWidget:);
  methods[96].selector = @selector(requestLayoutWithASIWidget:);
  methods[97].selector = @selector(invalidateWithASIWidget:);
  methods[98].selector = @selector(getClipDataWithADView_DragEvent:);
  methods[99].selector = @selector(getDrawableWithADColorStateList:);
  methods[100].selector = @selector(setElevationWithASIWidget:withId:);
  methods[101].selector = @selector(getValueWithNSString:withOrgXmlSaxAttributes:);
  methods[102].selector = @selector(setBottomWithASIWidget:withId:);
  methods[103].selector = @selector(setTopWithASIWidget:withId:);
  methods[104].selector = @selector(setRightWithASIWidget:withId:);
  methods[105].selector = @selector(setLeftWithASIWidget:withId:);
  methods[106].selector = @selector(getBottomWithASIWidget:);
  methods[107].selector = @selector(getTopWithASIWidget:);
  methods[108].selector = @selector(getRightWithASIWidget:);
  methods[109].selector = @selector(getLeftWithASIWidget:);
  methods[110].selector = @selector(drawOverlayWithASIWidget:withJavaUtilList:);
  methods[111].selector = @selector(setAnimatorXmlWithASIWidget:withId:);
  methods[112].selector = @selector(getInterpolatorWithASIWidget:withId:);
  methods[113].selector = @selector(addEventInfoWithJavaUtilMap:withADMenuItem:);
  methods[114].selector = @selector(setBackgroundColorWithId:withId:);
  methods[115].selector = @selector(getBackgroundColorWithId:);
  methods[116].selector = @selector(setIsHiddenWithId:withId:);
  methods[117].selector = @selector(getIsHiddenWithId:);
  methods[118].selector = @selector(setAlphaWithId:withId:);
  methods[119].selector = @selector(getAlphaWithId:);
  methods[120].selector = @selector(setIsOpaqueWithId:withId:);
  methods[121].selector = @selector(getIsOpaqueWithId:);
  methods[122].selector = @selector(setTintColorWithId:withId:);
  methods[123].selector = @selector(getTintColorWithId:);
  methods[124].selector = @selector(setClipsToBoundsWithId:withId:);
  methods[125].selector = @selector(getClipsToBoundsWithId:);
  methods[126].selector = @selector(setClearsContextBeforeDrawingWithId:withId:);
  methods[127].selector = @selector(getClearsContextBeforeDrawingWithId:);
  methods[128].selector = @selector(setIsUserInteractionEnabledWithId:withId:);
  methods[129].selector = @selector(getIsUserInteractionEnabledWithId:);
  methods[130].selector = @selector(setIsMultipleTouchEnabledWithId:withId:);
  methods[131].selector = @selector(getIsMultipleTouchEnabledWithId:);
  methods[132].selector = @selector(setIsExclusiveTouchWithId:withId:);
  methods[133].selector = @selector(getIsExclusiveTouchWithId:);
  methods[134].selector = @selector(setPreservesSuperviewLayoutMarginsWithId:withId:);
  methods[135].selector = @selector(getPreservesSuperviewLayoutMarginsWithId:);
  methods[136].selector = @selector(setInsetsLayoutMarginsFromSafeAreaWithId:withId:);
  methods[137].selector = @selector(getInsetsLayoutMarginsFromSafeAreaWithId:);
  methods[138].selector = @selector(setAutoresizesSubviewsWithId:withId:);
  methods[139].selector = @selector(getAutoresizesSubviewsWithId:);
  methods[140].selector = @selector(setTranslatesAutoresizingMaskIntoConstraintsWithId:withId:);
  methods[141].selector = @selector(getTranslatesAutoresizingMaskIntoConstraintsWithId:);
  methods[142].selector = @selector(setContentScaleFactorWithId:withId:);
  methods[143].selector = @selector(getContentScaleFactorWithId:);
  methods[144].selector = @selector(getIsFocusedWithId:);
  methods[145].selector = @selector(setRestorationIdentifierWithId:withId:);
  methods[146].selector = @selector(getRestorationIdentifierWithId:);
  methods[147].selector = @selector(setTagWithId:withId:);
  methods[148].selector = @selector(getTagWithId:);
  methods[149].selector = @selector(setAccessibilityIgnoresInvertColorsWithId:withId:);
  methods[150].selector = @selector(getAccessibilityIgnoresInvertColorsWithId:);
  methods[151].selector = @selector(setLargeContentImageWithId:withId:);
  methods[152].selector = @selector(getLargeContentImageWithId:);
  methods[153].selector = @selector(setLargeContentTitleWithId:withId:);
  methods[154].selector = @selector(getLargeContentTitleWithId:);
  methods[155].selector = @selector(setScalesLargeContentImageWithId:withId:);
  methods[156].selector = @selector(getScalesLargeContentImageWithId:);
  methods[157].selector = @selector(setShowsLargeContentViewerWithId:withId:);
  methods[158].selector = @selector(getShowsLargeContentViewerWithId:);
  methods[159].selector = @selector(setIsAccessibilityElementWithId:withId:);
  methods[160].selector = @selector(getIsAccessibilityElementWithId:);
  methods[161].selector = @selector(setAccessibilityLabelWithId:withId:);
  methods[162].selector = @selector(getAccessibilityLabelWithId:);
  methods[163].selector = @selector(setAccessibilityHintWithId:withId:);
  methods[164].selector = @selector(getAccessibilityHintWithId:);
  methods[165].selector = @selector(setAccessibilityValueWithId:withId:);
  methods[166].selector = @selector(getAccessibilityValueWithId:);
  methods[167].selector = @selector(setAccessibilityTraitsWithId:withId:);
  methods[168].selector = @selector(getAccessibilityTraitsWithId:);
  methods[169].selector = @selector(nativeMakeFrameWithId:withInt:withInt:withInt:withInt:withInt:);
  methods[170].selector = @selector(updateBoundsWithId:withInt:withInt:withInt:withInt:);
  methods[171].selector = @selector(getFirstChildOrSelfWithId:);
  methods[172].selector = @selector(nativeMakeFrameForHorizontalScrollViewWithId:withInt:withInt:withInt:withInt:withInt:);
  methods[173].selector = @selector(nativeMakeFrameWithId:withInt:withInt:withInt:withInt:);
  methods[174].selector = @selector(isRTLLayoutWithASIWidget:);
  methods[175].selector = @selector(isRTLLayout);
  methods[176].selector = @selector(setBgOnControlWithASIWidget:withId:withId:);
  methods[177].selector = @selector(setBackgroundWithASIWidget:withId:withId:);
  methods[178].selector = @selector(updateWidthAndHeightWithASIWidget:withADStateListDrawable:withId:withNSString:withNSString:);
  methods[179].selector = @selector(setBgDrawabeOnViewWithInt:withInt:withADView:);
  methods[180].selector = @selector(isColorWithId:);
  methods[181].selector = @selector(isResizableImageWithId:);
  methods[182].selector = @selector(isImageWithId:);
  methods[183].selector = @selector(getImageWidthWithId:);
  methods[184].selector = @selector(getImageHeightWithId:);
  methods[185].selector = @selector(clearBgColorWithId:withId:);
  methods[186].selector = @selector(nativeSetBgColorWithId:withId:);
  methods[187].selector = @selector(setOnClickWithASIWidget:withId:withId:);
  methods[188].selector = @selector(setOnClickWithASIWidget:withNSString:withId:withADView_OnClickListener:);
  methods[189].selector = @selector(registerCommandConveterWithASIWidget:);
  methods[190].selector = @selector(isNativeRtlSupported);
  methods[191].selector = @selector(getParentWithASIWidget:);
  methods[192].selector = @selector(setBackgroundTintModeWithASIWidget:withId:);
  methods[193].selector = @selector(setBackgroundTintWithASIWidget:withId:);
  methods[194].selector = @selector(setForegroundTintModeWithASIWidget:withId:);
  methods[195].selector = @selector(setForegroundTintWithASIWidget:withId:);
  methods[196].selector = @selector(setForegroundWithASIWidget:withId:withId:);
  methods[197].selector = @selector(setFgOnControlWithASIWidget:withId:withId:);
  methods[198].selector = @selector(setVisibilityWithASIWidget:withId:withId:);
  methods[199].selector = @selector(nativeSetVisibilityWithId:withBoolean:);
  methods[200].selector = @selector(getClickableWithId:);
  methods[201].selector = @selector(nativeGetClickableWithId:);
  methods[202].selector = @selector(setClickableWithASIWidget:withId:withId:);
  methods[203].selector = @selector(nativeSetClickableWithId:withBoolean:);
  methods[204].selector = @selector(setOnLongClickWithASIWidget:withId:withId:);
  methods[205].selector = @selector(setOnLongClickWithASIWidget:withId:withADView_OnLongClickListener:);
  methods[206].selector = @selector(setTranslationXWithASIWidget:withId:);
  methods[207].selector = @selector(relayoutWithASIWidget:);
  methods[208].selector = @selector(setTranslationYWithASIWidget:withId:);
  methods[209].selector = @selector(setTranslationZWithASIWidget:withId:);
  methods[210].selector = @selector(setTransformPivotYWithASIWidget:withId:);
  methods[211].selector = @selector(setTransformPivotXWithASIWidget:withId:);
  methods[212].selector = @selector(setScaleYWithASIWidget:withId:);
  methods[213].selector = @selector(setScaleXWithASIWidget:withId:);
  methods[214].selector = @selector(setRotationYWithASIWidget:withId:);
  methods[215].selector = @selector(setRotationXWithASIWidget:withId:);
  methods[216].selector = @selector(setRotationWithASIWidget:withId:);
  methods[217].selector = @selector(getTranslationXWithASIWidget:);
  methods[218].selector = @selector(getTransformPivotYWithASIWidget:);
  methods[219].selector = @selector(getTransformPivotXWithASIWidget:);
  methods[220].selector = @selector(getScaleYWithASIWidget:);
  methods[221].selector = @selector(getScaleXWithASIWidget:);
  methods[222].selector = @selector(getRotationYWithASIWidget:);
  methods[223].selector = @selector(getRotationXWithASIWidget:);
  methods[224].selector = @selector(getRotationWithASIWidget:);
  methods[225].selector = @selector(getTranslationZWithASIWidget:);
  methods[226].selector = @selector(getTranslationYWithASIWidget:);
  methods[227].selector = @selector(getForegroundTintWithASIWidget:);
  methods[228].selector = @selector(getForegroundTintModeWithASIWidget:);
  methods[229].selector = @selector(getBackgroundTintModeWithASIWidget:);
  methods[230].selector = @selector(getBackgroundTintWithASIWidget:);
  methods[231].selector = @selector(requestLayoutWithASIWidget:withId:);
  methods[232].selector = @selector(invalidateWithASIWidget:withId:);
  methods[233].selector = @selector(nativeRequestLayoutWithId:);
  methods[234].selector = @selector(nativeInvalidateWithId:);
  methods[235].selector = @selector(setKeepScreenOnWithId:withId:);
  methods[236].selector = @selector(getKeepScreenOnWithId:);
  methods[237].selector = @selector(isMirrorSupported);
  methods[238].selector = @selector(setOnTouchWithASIWidget:withId:withId:);
  methods[239].selector = @selector(startDragWithASIWidget:withNSString:);
  methods[240].selector = @selector(setOnDragWithASIWidget:withId:withId:);
  methods[241].selector = @selector(setAsDragSourceWithASIWidget:withId:withId:);
  methods[242].selector = @selector(getForegroundWithASIWidget:);
  methods[243].selector = @selector(getBackgroundWithASIWidget:);
  methods[244].selector = @selector(setOnKeyWithASIWidget:withId:);
  methods[245].selector = @selector(setLayerCornerRadiusWithId:withId:);
  methods[246].selector = @selector(nativeSetLayerCornerRadiusWithId:withFloat:);
  methods[247].selector = @selector(setLayerBorderColorWithId:withId:);
  methods[248].selector = @selector(nativeLayerBorderColorWithId:withId:);
  methods[249].selector = @selector(setLayerBorderWidthWithId:withId:);
  methods[250].selector = @selector(nativeLayerBorderWidthWithId:withFloat:);
  methods[251].selector = @selector(setLayerMasksToBoundsWithId:withId:);
  methods[252].selector = @selector(nativeLayerBMasksToBoundsWithId:withBoolean:);
  methods[253].selector = @selector(nativeBringToFrontWithJavaUtilList:);
  methods[254].selector = @selector(nativeBringToFrontWithId:);
  methods[255].selector = @selector(setNativeIdWithASIWidget:withNSString:);
  methods[256].selector = @selector(getLocationXOnScreenWithId:);
  methods[257].selector = @selector(getLocationYOnScreenWithId:);
  methods[258].selector = @selector(setOutsideTouchableWithASIWidget:withNSString:withId:withADView:);
  methods[259].selector = @selector(nativeMeasureWidthWithId:);
  methods[260].selector = @selector(nativeMeasureHeightWithId:withInt:);
  methods[261].selector = @selector(setOnSwipeListenerWithASIWidget:withASSwipeHelper_SwipeListener:);
  methods[262].selector = @selector(addPanListenerWithASIWidget:withId:withASViewImpl_PanCallBack:);
  methods[263].selector = @selector(addPanListenerWithASIWidget:withId:withId:withASViewImpl_PanCallBack:);
  methods[264].selector = @selector(getXWithId:);
  methods[265].selector = @selector(getYWithId:);
  methods[266].selector = @selector(updateBoundsXWithId:withInt:);
  methods[267].selector = @selector(translateWithAnimationWithId:withInt:withInt:withInt:withASViewImpl_AnimationCallBack:);
  methods[268].selector = @selector(setOutlineSpotShadowColorWithASIWidget:withId:);
  methods[269].selector = @selector(setOutlineAmbientShadowColorWithASIWidget:withId:);
  methods[270].selector = @selector(setShadowColorWithId:withId:);
  methods[271].selector = @selector(setCornerRadiusWithASIWidget:withId:withId:);
  methods[272].selector = @selector(setCornerRadiusOnViewWithId:withFloat:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "register", "LNSString;", "setAttribute", "LASIWidget;LASWidgetAttribute;LNSString;LNSObject;LASILifeCycleDecorator;", "LASIWidget;LASSimpleWrapableView;LASWidgetAttribute;LNSString;LNSObject;LASILifeCycleDecorator;", "LASIWidget;LNSObject;LASWidgetAttribute;LNSString;LNSObject;LASILifeCycleDecorator;", "getAttribute", "LASIWidget;LASWidgetAttribute;LASILifeCycleDecorator;", "LASIWidget;LNSObject;LASWidgetAttribute;LASILifeCycleDecorator;", "checkIosVersion", "setPadding", "LNSObject;LADView;", "setPaddingLeft", "setPaddingRight", "setPaddingTop", "setPaddingBottom", "getPaddingTop", "LASIWidget;LADView;", "getPaddingBottom", "getPaddingLeft", "getPaddingRight", "setPaddingHorizontal", "setPaddingVertical", "setId", "LASIWidget;LNSString;LNSObject;LADView;", "getModelSyncEvents", "LASIWidget;", "setModelSyncEvents", "setModelParam", "setModelPojoToUi", "setModelUiToPojo", "notifyDataSetChanged", "LASIWidget;LNSObject;", "updateModelData", "LASIWidget;LNSObject;LNSObject;", "getModelUiToPojo", "getModelPojoToUi", "getModelParam", "setModelPojoToUiParams", "refreshUiFromModel", "LASIWidget;LNSObject;Z", "setModelUiToPojoEventIds", "setZIndex", "setMaxHeight", "setMaxWidth", "getMaxWidth", "getMaxHeight", "setSelected", "getSelected", "setInvalidateOnFrameChange", "setBackgroundRepeat", "setForegroundRepeat", "addEventInfo", "LJavaUtilMap;LADMotionEvent;", "(Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;Lr/android/view/MotionEvent;)V", "LJavaUtilMap;LADKeyEvent;", "(Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;Lr/android/view/KeyEvent;)V", "LJavaUtilMap;LADView_DragEvent;", "(Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;Lr/android/view/View$DragEvent;)V", "LJavaUtilMap;LADChronometer;LASIFragment;", "(Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;Lr/android/widget/Chronometer;Lcom/ashera/core/IFragment;)V", "LJavaUtilMap;LJavaUtilList;LASIFragment;", "(Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;Ljava/util/List<Ljava/lang/Integer;>;Lcom/ashera/core/IFragment;)V", "validateForm", "getValidateFormResult", "setValidation", "getForms", "(Lcom/ashera/widget/IWidget;)Ljava/util/List<Lcom/ashera/validations/Form;>;", "setType", "LASIWidget;LNSString;LNSObject;", "setPattern", "setMax", "setMin", "setMaxlength", "setMinlength", "setRequired", "addValidator", "LASIWidget;LNSString;[LNSString;", "setCustomErrorMessageKeys", "setCustomErrorMessageValues", "setValidationErrorDisplay", "setErrorStyle", "LASIWidget;LADView;LNSObject;", "setStyle", "setMessageOnLabel", "LASIWidget;LNSString;", "state", "LASIWidget;I", "setState", "LASIWidget;ILNSObject;", "stateYes", "stateNo", "setAnimatorListener", "LASIWidget;LADAnimator_AnimatorListener;", "endAnimator", "startAnimator", "setLayoutDirection", "getLayoutDirection", "setTextAlignment", "setTextDirection", "getTextAlignment", "getTextDirection", "isRTLLayoutDirection", "drawableStateChanged", "getColor", "LNSObject;", "setDrawableBounds", "LASIWidget;IIII", "redrawDrawables", "setMinHeight", "setMinWidth", "getMinHeight", "getMinWidth", "getVisibility", "setLongClickable", "getLongClickable", "setDuplicateParentState", "getDuplicateParentState", "getClickable", "requestLayout", "invalidate", "getClipData", "LADView_DragEvent;", "getDrawable", "LADColorStateList;", "setElevation", "getValue", "LNSString;LOrgXmlSaxAttributes;", "setBottom", "setTop", "setRight", "setLeft", "getBottom", "getTop", "getRight", "getLeft", "drawOverlay", "LASIWidget;LJavaUtilList;", "(Lcom/ashera/widget/IWidget;Ljava/util/List<Lcom/ashera/widget/IWidget;>;)Ljava/util/List<Lcom/ashera/widget/IWidget;>;", "setAnimatorXml", "getInterpolator", "LJavaUtilMap;LADMenuItem;", "(Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;Lr/android/view/MenuItem;)V", "setBackgroundColor", "LNSObject;LNSObject;", "getBackgroundColor", "setIsHidden", "getIsHidden", "setAlpha", "getAlpha", "setIsOpaque", "getIsOpaque", "setTintColor", "getTintColor", "setClipsToBounds", "getClipsToBounds", "setClearsContextBeforeDrawing", "getClearsContextBeforeDrawing", "setIsUserInteractionEnabled", "getIsUserInteractionEnabled", "setIsMultipleTouchEnabled", "getIsMultipleTouchEnabled", "setIsExclusiveTouch", "getIsExclusiveTouch", "setPreservesSuperviewLayoutMargins", "getPreservesSuperviewLayoutMargins", "setInsetsLayoutMarginsFromSafeArea", "getInsetsLayoutMarginsFromSafeArea", "setAutoresizesSubviews", "getAutoresizesSubviews", "setTranslatesAutoresizingMaskIntoConstraints", "getTranslatesAutoresizingMaskIntoConstraints", "setContentScaleFactor", "getContentScaleFactor", "getIsFocused", "setRestorationIdentifier", "getRestorationIdentifier", "setTag", "getTag", "setAccessibilityIgnoresInvertColors", "getAccessibilityIgnoresInvertColors", "setLargeContentImage", "getLargeContentImage", "setLargeContentTitle", "getLargeContentTitle", "setScalesLargeContentImage", "getScalesLargeContentImage", "setShowsLargeContentViewer", "getShowsLargeContentViewer", "setIsAccessibilityElement", "getIsAccessibilityElement", "setAccessibilityLabel", "getAccessibilityLabel", "setAccessibilityHint", "getAccessibilityHint", "setAccessibilityValue", "getAccessibilityValue", "setAccessibilityTraits", "getAccessibilityTraits", "nativeMakeFrame", "LNSObject;IIIII", "updateBounds", "LNSObject;IIII", "getFirstChildOrSelf", "nativeMakeFrameForHorizontalScrollView", "isRTLLayout", "setBgOnControl", "setBackground", "updateWidthAndHeight", "LASIWidget;LADStateListDrawable;LNSObject;LNSString;LNSString;", "setBgDrawabeOnView", "IILADView;", "isColor", "isResizableImage", "isImage", "getImageWidth", "getImageHeight", "clearBgColor", "nativeSetBgColor", "setOnClick", "LASIWidget;LNSString;LNSObject;LADView_OnClickListener;", "registerCommandConveter", "getParent", "setBackgroundTintMode", "setBackgroundTint", "setForegroundTintMode", "setForegroundTint", "setForeground", "setFgOnControl", "setVisibility", "nativeSetVisibility", "LNSObject;Z", "nativeGetClickable", "setClickable", "nativeSetClickable", "setOnLongClick", "LASIWidget;LNSObject;LADView_OnLongClickListener;", "setTranslationX", "relayout", "setTranslationY", "setTranslationZ", "setTransformPivotY", "setTransformPivotX", "setScaleY", "setScaleX", "setRotationY", "setRotationX", "setRotation", "getTranslationX", "getTransformPivotY", "getTransformPivotX", "getScaleY", "getScaleX", "getRotationY", "getRotationX", "getRotation", "getTranslationZ", "getTranslationY", "getForegroundTint", "getForegroundTintMode", "getBackgroundTintMode", "getBackgroundTint", "nativeRequestLayout", "nativeInvalidate", "setKeepScreenOn", "getKeepScreenOn", "setOnTouch", "startDrag", "setOnDrag", "setAsDragSource", "getForeground", "getBackground", "setOnKey", "setLayerCornerRadius", "nativeSetLayerCornerRadius", "LNSObject;F", "setLayerBorderColor", "nativeLayerBorderColor", "setLayerBorderWidth", "nativeLayerBorderWidth", "setLayerMasksToBounds", "nativeLayerBMasksToBounds", "nativeBringToFront", "LJavaUtilList;", "(Ljava/util/List<Lcom/ashera/widget/IWidget;>;)V", "setNativeId", "getLocationXOnScreen", "getLocationYOnScreen", "setOutsideTouchable", "nativeMeasureWidth", "nativeMeasureHeight", "LNSObject;I", "setOnSwipeListener", "LASIWidget;LASSwipeHelper_SwipeListener;", "addPanListener", "LASIWidget;LNSObject;LASViewImpl_PanCallBack;", "LASIWidget;LNSObject;LNSObject;LASViewImpl_PanCallBack;", "getX", "getY", "updateBoundsX", "translateWithAnimation", "LNSObject;IIILASViewImpl_AnimationCallBack;", "setOutlineSpotShadowColor", "setOutlineAmbientShadowColor", "setShadowColor", "setCornerRadius", "setCornerRadiusOnView", "LASViewImpl_IosAccessibilityTraits;LASViewImpl_Vtype;LASViewImpl_ValidationErrorDisplay;LASViewImpl_BackgroundRepeat;LASViewImpl_BackgroundTintMode;LASViewImpl_ForegroundRepeat;LASViewImpl_ForegroundTintMode;LASViewImpl_Visibility;LASViewImpl_LayoutDirection;LASViewImpl_TextDirection;LASViewImpl_TextAlignment;LASViewImpl_AddRemoveCallBack;LASViewImpl_PanCallBack;LASViewImpl_AnimationCallBack;LASViewImpl_AnimationContentHandler;LASViewImpl_CustomProperty;LASViewImpl_AnimatorListener;LASViewImpl_OnClickListener;LASViewImpl_OnTouchListener;LASViewImpl_OnLongClickListener;LASViewImpl_OnDragListener;LASViewImpl_OnKeyListener;LASViewImpl_SwipeListener;LASViewImpl_UIControlEventTouchDelegate;LASViewImpl_UILongTapGestureRecognizerDelegate;LASViewImpl_UITapGestureRecognizerDelegate;LASViewImpl_UIDragInteractionDelegate;LASViewImpl_UIDropInteractionDelegate;LASViewImpl_UISwipeGestureRecognizerDelegate;LASViewImpl_PanGestureRecognizer;LASViewImpl_AnimationUtils;" };
  static const J2ObjcClassInfo _ASViewImpl = { "ViewImpl", "com.ashera.layout", ptrTable, methods, NULL, 7, 0x1, 273, 0, -1, 307, -1, -1, -1 };
  return &_ASViewImpl;
}

@end

void ASViewImpl_init(ASViewImpl *self) {
  NSObject_init(self);
}

ASViewImpl *new_ASViewImpl_init() {
  J2OBJC_NEW_IMPL(ASViewImpl, init)
}

ASViewImpl *create_ASViewImpl_init() {
  J2OBJC_CREATE_IMPL(ASViewImpl, init)
}

void ASViewImpl_register__WithNSString_(NSString *localName) {
  ASViewImpl_initialize();
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosBackgroundColor"])) withTypeWithNSString:@"color"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosIsHidden"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosAlpha"])) withTypeWithNSString:@"float"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosIsOpaque"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosTintColor"])) withTypeWithNSString:@"color"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosClipsToBounds"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosClearsContextBeforeDrawing"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosIsUserInteractionEnabled"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosIsMultipleTouchEnabled"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosIsExclusiveTouch"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosPreservesSuperviewLayoutMargins"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosInsetsLayoutMarginsFromSafeArea"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosAutoresizesSubviews"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosTranslatesAutoresizingMaskIntoConstraints"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosContentScaleFactor"])) withTypeWithNSString:@"float"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosIsFocused"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosRestorationIdentifier"])) withTypeWithNSString:@"resourcestring"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosTag"])) withTypeWithNSString:@"int"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosAccessibilityIgnoresInvertColors"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosLargeContentImage"])) withTypeWithNSString:@"image"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosLargeContentTitle"])) withTypeWithNSString:@"resourcestring"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosScalesLargeContentImage"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosShowsLargeContentViewer"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosIsAccessibilityElement"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"focusable"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosAccessibilityLabel"])) withTypeWithNSString:@"resourcestring"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosAccessibilityHint"])) withTypeWithNSString:@"resourcestring"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"contentDescription"])) withTypeWithNSString:@"resourcestring"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosAccessibilityValue"])) withTypeWithNSString:@"resourcestring"]);
  ASConverterFactory_register__WithNSString_withASIConverter_(@"View.iosAccessibilityTraits", new_ASViewImpl_IosAccessibilityTraits_init());
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosAccessibilityTraits"])) withTypeWithNSString:@"View.iosAccessibilityTraits"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"selected"])) withTypeWithNSString:@"boolean"])) withOrderWithInt:10]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"style"])) withTypeWithNSString:@"string"])) withStylePriorityWithJavaLangInteger:JavaLangInteger_valueOfWithInt_(0)]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"errorStyle"])) withTypeWithNSString:@"string"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"validateForm"])) withTypeWithNSString:@"string"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"validation"])) withTypeWithNSString:@"array"])) withArrayTypeWithNSString:@"string"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"v_required"])) withTypeWithNSString:@"resourcestring"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"v_minlength"])) withTypeWithNSString:@"string"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"v_maxlength"])) withTypeWithNSString:@"string"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"v_min"])) withTypeWithNSString:@"string"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"v_max"])) withTypeWithNSString:@"string"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"v_pattern"])) withTypeWithNSString:@"resourcestring"]);
  ASConverterFactory_register__WithNSString_withASIConverter_(@"View.vtype", new_ASViewImpl_Vtype_init());
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"v_type"])) withTypeWithNSString:@"View.vtype"]);
  ASConverterFactory_register__WithNSString_withASIConverter_(@"View.validationErrorDisplay", new_ASViewImpl_ValidationErrorDisplay_init());
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"validationErrorDisplayType"])) withTypeWithNSString:@"View.validationErrorDisplay"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"customErrorMessageValues"])) withTypeWithNSString:@"array"])) withArrayTypeWithNSString:@"resourcestring"])) withOrderWithInt:-1]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"customErrorMessageKeys"])) withTypeWithNSString:@"array"])) withArrayTypeWithNSString:@"resourcestring"])) withOrderWithInt:-1]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"invalidateOnFrameChange"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"outlineAmbientShadowColor"])) withTypeWithNSString:@"color"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"outlineSpotShadowColor"])) withTypeWithNSString:@"color"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"cornerRadius"])) withTypeWithNSString:@"dimensionfloat"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"animatorXml"])) withTypeWithNSString:@"string"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"startAnimator"])) withTypeWithNSString:@"nil"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"endAnimator"])) withTypeWithNSString:@"nil"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"onAnimationStart"])) withTypeWithNSString:@"string"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"onAnimationEnd"])) withTypeWithNSString:@"string"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"onAnimationCancel"])) withTypeWithNSString:@"string"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"onAnimationRepeat"])) withTypeWithNSString:@"string"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"left"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"right"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"top"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"bottom"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"id"])) withTypeWithNSString:@"id"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"modelSyncEvents"])) withTypeWithNSString:@"string"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"modelParam"])) withTypeWithNSString:@"string"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"modelPojoToUi"])) withTypeWithNSString:@"string"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"modelUiToPojo"])) withTypeWithNSString:@"string"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"modelPojoToUiParams"])) withTypeWithNSString:@"string"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"refreshUiFromModel"])) withTypeWithNSString:@"string"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"modelUiToPojoEventIds"])) withTypeWithNSString:@"string"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"updateModelData"])) withTypeWithNSString:@"object"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"notifyDataSetChanged"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"background"])) withTypeWithNSString:@"drawable"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT_N_INVALIDATE]);
  ASConverterFactory_register__WithNSString_withASIConverter_(@"View.backgroundRepeat", new_ASViewImpl_BackgroundRepeat_init());
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"backgroundRepeat"])) withTypeWithNSString:@"View.backgroundRepeat"])) withOrderWithInt:-10])) withUiFlagWithInt:ASIWidget_UPDATE_UI_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"onClick"])) withTypeWithNSString:@"string"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"onTouch"])) withTypeWithNSString:@"string"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"minWidth"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"minHeight"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"attributeUnderTest"])) withTypeWithNSString:@"string"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"backgroundTint"])) withTypeWithNSString:@"colorstate"])) withOrderWithInt:-10])) withUiFlagWithInt:ASIWidget_UPDATE_UI_INVALIDATE]);
  ASConverterFactory_register__WithNSString_withASIConverter_(@"View.backgroundTintMode", new_ASViewImpl_BackgroundTintMode_init());
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"backgroundTintMode"])) withTypeWithNSString:@"View.backgroundTintMode"])) withOrderWithInt:-10])) withUiFlagWithInt:ASIWidget_UPDATE_UI_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"foreground"])) withTypeWithNSString:@"drawable"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT_N_INVALIDATE]);
  ASConverterFactory_register__WithNSString_withASIConverter_(@"View.foregroundRepeat", new_ASViewImpl_ForegroundRepeat_init());
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"foregroundRepeat"])) withTypeWithNSString:@"View.foregroundRepeat"])) withOrderWithInt:-10])) withUiFlagWithInt:ASIWidget_UPDATE_UI_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"foregroundTint"])) withTypeWithNSString:@"colorstate"])) withOrderWithInt:-10])) withUiFlagWithInt:ASIWidget_UPDATE_UI_INVALIDATE]);
  ASConverterFactory_register__WithNSString_withASIConverter_(@"View.foregroundTintMode", new_ASViewImpl_ForegroundTintMode_init());
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"foregroundTintMode"])) withTypeWithNSString:@"View.foregroundTintMode"])) withOrderWithInt:-10])) withUiFlagWithInt:ASIWidget_UPDATE_UI_INVALIDATE]);
  ASConverterFactory_register__WithNSString_withASIConverter_(@"View.visibility", new_ASViewImpl_Visibility_init());
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"visibility"])) withTypeWithNSString:@"View.visibility"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT_N_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"alpha"])) withTypeWithNSString:@"float"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"onLongClick"])) withTypeWithNSString:@"string"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"longClickable"])) withTypeWithNSString:@"boolean"])) withOrderWithInt:1]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"clickable"])) withTypeWithNSString:@"boolean"])) withOrderWithInt:1]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"translationX"])) withTypeWithNSString:@"dimensionfloat"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT_N_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"translationY"])) withTypeWithNSString:@"dimensionfloat"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT_N_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"translationZ"])) withTypeWithNSString:@"dimensionfloat"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT_N_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"rotation"])) withTypeWithNSString:@"float"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT_N_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"rotationX"])) withTypeWithNSString:@"float"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT_N_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"rotationY"])) withTypeWithNSString:@"float"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT_N_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"scaleX"])) withTypeWithNSString:@"float"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT_N_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"scaleY"])) withTypeWithNSString:@"float"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT_N_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"transformPivotX"])) withTypeWithNSString:@"dimensionfloat"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT_N_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"transformPivotY"])) withTypeWithNSString:@"dimensionfloat"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT_N_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"invalidate"])) withTypeWithNSString:@"nil"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"requestLayout"])) withTypeWithNSString:@"nil"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"keepScreenOn"])) withTypeWithNSString:@"boolean"]);
  ASConverterFactory_register__WithNSString_withASIConverter_(@"View.layoutDirection", new_ASViewImpl_LayoutDirection_init());
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layoutDirection"])) withTypeWithNSString:@"View.layoutDirection"])) beforeChildAdd]);
  ASConverterFactory_register__WithNSString_withASIConverter_(@"View.textDirection", new_ASViewImpl_TextDirection_init());
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"textDirection"])) withTypeWithNSString:@"View.textDirection"])) withOrderWithInt:100]);
  ASConverterFactory_register__WithNSString_withASIConverter_(@"View.textAlignment", new_ASViewImpl_TextAlignment_init());
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"textAlignment"])) withTypeWithNSString:@"View.textAlignment"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"onDrag"])) withTypeWithNSString:@"string"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"asDragSource"])) withTypeWithNSString:@"string"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"enabled"])) withTypeWithNSString:@"boolean"])) withOrderWithInt:-10]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"duplicateParentState"])) withTypeWithNSString:@"boolean"])) beforeChildAdd]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"foregroundGravity"])) withTypeWithNSString:@"gravity"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT_N_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"onKey"])) withTypeWithNSString:@"string"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosLayerBorderWidth"])) withTypeWithNSString:@"dimensionfloat"])) withSimpleWrapableViewStrategyWithInt:ASIWidget_APPLY_TO_VIEW_HOLDER]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosLayerBorderColor"])) withTypeWithNSString:@"color"])) withSimpleWrapableViewStrategyWithInt:ASIWidget_APPLY_TO_VIEW_HOLDER]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosLayerCornerRadius"])) withTypeWithNSString:@"dimensionfloat"])) withSimpleWrapableViewStrategyWithInt:ASIWidget_APPLY_TO_VIEW_HOLDER]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosLayerMasksToBounds"])) withTypeWithNSString:@"boolean"])) withSimpleWrapableViewStrategyWithInt:ASIWidget_APPLY_TO_VIEW_HOLDER]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"zIndex"])) withTypeWithNSString:@"int"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"elevation"])) withTypeWithNSString:@"dimensionfloat"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"maxWidth"])) withTypeWithNSString:@"dimension"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"maxHeight"])) withTypeWithNSString:@"dimension"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"onSwiped"])) withTypeWithNSString:@"string"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"outsideTouchable"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerConstructorAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"formGroupId"])) withTypeWithNSString:@"string"]);
  ASWidgetFactory_registerConstructorAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"enableFeatures"])) withTypeWithNSString:@"string"]);
  id<JavaUtilList> attributables = ASWidgetFactory_getAttributablesWithNSStringArray_([IOSObjectArray newArrayWithObjects:(id[]){ @"View", localName } count:2 type:NSString_class_()]);
  if (attributables != nil) {
    for (id<ASIAttributable> __strong attributable in attributables) {
      [((id<ASIAttributable>) nil_chk(attributable)) loadAttributesWithNSString:localName];
    }
  }
}

void ASViewImpl_setAttributeWithASIWidget_withASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(id<ASIWidget> w, ASWidgetAttribute *key, NSString *strValue, id objValue, id<ASILifeCycleDecorator> decorator) {
  ASViewImpl_initialize();
  id nativeWidget = [((id<ASIWidget>) nil_chk(w)) invokeMethodWithNSString:@"nativeWidgetFor" withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ [((ASWidgetAttribute *) nil_chk(key)) getAttributeName] } count:1 type:NSObject_class_()]];
  if (nativeWidget == nil) {
    nativeWidget = [w asNativeWidget];
  }
  ASViewImpl_setAttributeWithASIWidget_withId_withASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(w, nativeWidget, key, strValue, objValue, decorator);
}

void ASViewImpl_setAttributeWithASIWidget_withASSimpleWrapableView_withASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(id<ASIWidget> w, ASSimpleWrapableView *wrapperView, ASWidgetAttribute *key, NSString *strValue, id objValue, id<ASILifeCycleDecorator> decorator) {
  ASViewImpl_initialize();
  if ([((ASSimpleWrapableView *) nil_chk(wrapperView)) isViewWrapped] && [((ASWidgetAttribute *) nil_chk(key)) getSimpleWrapableViewStrategy] != 0) {
    if (([((ASWidgetAttribute *) nil_chk(key)) getSimpleWrapableViewStrategy] & ASIWidget_APPLY_TO_VIEW_WRAPPER) != 0) {
      ASViewImpl_setAttributeWithASIWidget_withId_withASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(w, [wrapperView getWrappedView], key, strValue, objValue, decorator);
    }
    if (([key getSimpleWrapableViewStrategy] & ASIWidget_APPLY_TO_VIEW_HOLDER) != 0) {
      ASViewImpl_setAttributeWithASIWidget_withId_withASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(w, [wrapperView getWrapperViewHolder], key, strValue, objValue, decorator);
    }
    if ((([key getSimpleWrapableViewStrategy] & ASIWidget_APPLY_TO_FOREGROUND) != 0) && [wrapperView getForeground] != nil) {
      ASViewImpl_setAttributeWithASIWidget_withId_withASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(w, [wrapperView getForeground], key, strValue, objValue, decorator);
    }
  }
  else {
    ASViewImpl_setAttributeWithASIWidget_withId_withASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(w, [((id<ASIWidget>) nil_chk(w)) asNativeWidget], key, strValue, objValue, decorator);
  }
}

void ASViewImpl_setAttributeWithASIWidget_withId_withASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(id<ASIWidget> w, id nativeWidget, ASWidgetAttribute *key, NSString *strValue, id objValue, id<ASILifeCycleDecorator> decorator) {
  ASViewImpl_initialize();
  ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]);
  {
    id<JavaUtilList> attributables;
    switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"iosBackgroundColor", @"iosIsHidden", @"iosAlpha", @"iosIsOpaque", @"iosTintColor", @"iosClipsToBounds", @"iosClearsContextBeforeDrawing", @"iosIsUserInteractionEnabled", @"iosIsMultipleTouchEnabled", @"iosIsExclusiveTouch", @"iosPreservesSuperviewLayoutMargins", @"iosInsetsLayoutMarginsFromSafeArea", @"iosAutoresizesSubviews", @"iosTranslatesAutoresizingMaskIntoConstraints", @"iosContentScaleFactor", @"iosRestorationIdentifier", @"iosTag", @"iosAccessibilityIgnoresInvertColors", @"iosLargeContentImage", @"iosLargeContentTitle", @"iosScalesLargeContentImage", @"iosShowsLargeContentViewer", @"focusable", @"iosIsAccessibilityElement", @"iosAccessibilityLabel", @"contentDescription", @"iosAccessibilityHint", @"iosAccessibilityValue", @"iosAccessibilityTraits", @"selected", @"style", @"errorStyle", @"validateForm", @"validation", @"v_required", @"v_minlength", @"v_maxlength", @"v_min", @"v_max", @"v_pattern", @"v_type", @"validationErrorDisplayType", @"customErrorMessageValues", @"customErrorMessageKeys", @"invalidateOnFrameChange", @"outlineAmbientShadowColor", @"outlineSpotShadowColor", @"cornerRadius", @"animatorXml", @"startAnimator", @"endAnimator", @"onAnimationStart", @"onAnimationEnd", @"onAnimationCancel", @"onAnimationRepeat", @"left", @"right", @"top", @"bottom", @"id", @"modelSyncEvents", @"modelParam", @"modelPojoToUi", @"modelUiToPojo", @"modelPojoToUiParams", @"refreshUiFromModel", @"modelUiToPojoEventIds", @"updateModelData", @"notifyDataSetChanged", @"background", @"backgroundRepeat", @"onClick", @"onTouch", @"minWidth", @"minHeight", @"attributeUnderTest", @"backgroundTint", @"backgroundTintMode", @"foreground", @"foregroundRepeat", @"foregroundTint", @"foregroundTintMode", @"visibility", @"alpha", @"onLongClick", @"longClickable", @"clickable", @"translationX", @"translationY", @"translationZ", @"rotation", @"rotationX", @"rotationY", @"scaleX", @"scaleY", @"transformPivotX", @"transformPivotY", @"invalidate", @"requestLayout", @"keepScreenOn", @"layoutDirection", @"textDirection", @"textAlignment", @"onDrag", @"asDragSource", @"enabled", @"duplicateParentState", @"foregroundGravity", @"onKey", @"iosLayerBorderWidth", @"iosLayerBorderColor", @"iosLayerCornerRadius", @"iosLayerMasksToBounds", @"zIndex", @"elevation", @"maxWidth", @"maxHeight", @"onSwiped", @"outsideTouchable" }, 119)) {
      case 0:
      {
        ASViewImpl_setBackgroundColorWithId_withId_(nativeWidget, objValue);
      }
      break;
      case 1:
      {
        ASViewImpl_setIsHiddenWithId_withId_(nativeWidget, objValue);
      }
      break;
      case 2:
      {
        ASViewImpl_setAlphaWithId_withId_(nativeWidget, objValue);
      }
      break;
      case 3:
      {
        ASViewImpl_setIsOpaqueWithId_withId_(nativeWidget, objValue);
      }
      break;
      case 4:
      {
        ASViewImpl_setTintColorWithId_withId_(nativeWidget, objValue);
      }
      break;
      case 5:
      {
        ASViewImpl_setClipsToBoundsWithId_withId_(nativeWidget, objValue);
      }
      break;
      case 6:
      {
        ASViewImpl_setClearsContextBeforeDrawingWithId_withId_(nativeWidget, objValue);
      }
      break;
      case 7:
      {
        ASViewImpl_setIsUserInteractionEnabledWithId_withId_(nativeWidget, objValue);
      }
      break;
      case 8:
      {
        ASViewImpl_setIsMultipleTouchEnabledWithId_withId_(nativeWidget, objValue);
      }
      break;
      case 9:
      {
        ASViewImpl_setIsExclusiveTouchWithId_withId_(nativeWidget, objValue);
      }
      break;
      case 10:
      {
        ASViewImpl_setPreservesSuperviewLayoutMarginsWithId_withId_(nativeWidget, objValue);
      }
      break;
      case 11:
      {
        ASViewImpl_setInsetsLayoutMarginsFromSafeAreaWithId_withId_(nativeWidget, objValue);
      }
      break;
      case 12:
      {
        ASViewImpl_setAutoresizesSubviewsWithId_withId_(nativeWidget, objValue);
      }
      break;
      case 13:
      {
        ASViewImpl_setTranslatesAutoresizingMaskIntoConstraintsWithId_withId_(nativeWidget, objValue);
      }
      break;
      case 14:
      {
        ASViewImpl_setContentScaleFactorWithId_withId_(nativeWidget, objValue);
      }
      break;
      case 15:
      {
        ASViewImpl_setRestorationIdentifierWithId_withId_(nativeWidget, objValue);
      }
      break;
      case 16:
      {
        ASViewImpl_setTagWithId_withId_(nativeWidget, objValue);
      }
      break;
      case 17:
      {
        ASViewImpl_setAccessibilityIgnoresInvertColorsWithId_withId_(nativeWidget, objValue);
      }
      break;
      case 18:
      {
        if (ASViewImpl_checkIosVersionWithNSString_(@"13.0")) {
          ASViewImpl_setLargeContentImageWithId_withId_(nativeWidget, objValue);
        }
      }
      break;
      case 19:
      {
        if (ASViewImpl_checkIosVersionWithNSString_(@"13.0")) {
          ASViewImpl_setLargeContentTitleWithId_withId_(nativeWidget, objValue);
        }
      }
      break;
      case 20:
      {
        if (ASViewImpl_checkIosVersionWithNSString_(@"13.0")) {
          ASViewImpl_setScalesLargeContentImageWithId_withId_(nativeWidget, objValue);
        }
      }
      break;
      case 21:
      {
        if (ASViewImpl_checkIosVersionWithNSString_(@"13.0")) {
          ASViewImpl_setShowsLargeContentViewerWithId_withId_(nativeWidget, objValue);
        }
      }
      break;
      case 22:
      case 23:
      {
        ASViewImpl_setIsAccessibilityElementWithId_withId_(nativeWidget, objValue);
      }
      break;
      case 24:
      {
        ASViewImpl_setAccessibilityLabelWithId_withId_(nativeWidget, objValue);
      }
      break;
      case 25:
      case 26:
      {
        ASViewImpl_setAccessibilityHintWithId_withId_(nativeWidget, objValue);
      }
      break;
      case 27:
      {
        ASViewImpl_setAccessibilityValueWithId_withId_(nativeWidget, objValue);
      }
      break;
      case 28:
      {
        ASViewImpl_setAccessibilityTraitsWithId_withId_(nativeWidget, objValue);
      }
      break;
      case 29:
      {
        ASViewImpl_setSelectedWithId_withADView_(objValue, view);
      }
      break;
      case 30:
      {
        ASViewImpl_setStyleWithASIWidget_withADView_withId_(w, view, objValue);
      }
      break;
      case 31:
      {
        ASViewImpl_setErrorStyleWithASIWidget_withADView_withId_(w, view, objValue);
      }
      break;
      case 32:
      {
        ASViewImpl_validateFormWithASIWidget_withId_(w, objValue);
      }
      break;
      case 33:
      {
        ASViewImpl_setValidationWithASIWidget_withId_(w, objValue);
      }
      break;
      case 34:
      {
        ASViewImpl_setRequiredWithASIWidget_withId_(w, objValue);
      }
      break;
      case 35:
      {
        ASViewImpl_setMinlengthWithASIWidget_withId_(w, objValue);
      }
      break;
      case 36:
      {
        ASViewImpl_setMaxlengthWithASIWidget_withId_(w, objValue);
      }
      break;
      case 37:
      {
        ASViewImpl_setMinWithASIWidget_withId_(w, objValue);
      }
      break;
      case 38:
      {
        ASViewImpl_setMaxWithASIWidget_withId_(w, objValue);
      }
      break;
      case 39:
      {
        ASViewImpl_setPatternWithASIWidget_withId_(w, objValue);
      }
      break;
      case 40:
      {
        ASViewImpl_setTypeWithASIWidget_withNSString_withId_(w, strValue, objValue);
      }
      break;
      case 41:
      {
        ASViewImpl_setValidationErrorDisplayWithASIWidget_withNSString_withId_(w, strValue, objValue);
      }
      break;
      case 42:
      {
        ASViewImpl_setCustomErrorMessageValuesWithASIWidget_withId_(w, objValue);
      }
      break;
      case 43:
      {
        ASViewImpl_setCustomErrorMessageKeysWithASIWidget_withId_(w, objValue);
      }
      break;
      case 44:
      {
        ASViewImpl_setInvalidateOnFrameChangeWithASIWidget_withId_(w, objValue);
      }
      break;
      case 45:
      {
        ASViewImpl_setOutlineAmbientShadowColorWithASIWidget_withId_(w, objValue);
      }
      break;
      case 46:
      {
        ASViewImpl_setOutlineSpotShadowColorWithASIWidget_withId_(w, objValue);
      }
      break;
      case 47:
      {
        ASViewImpl_setCornerRadiusWithASIWidget_withId_withId_(w, nativeWidget, objValue);
      }
      break;
      case 48:
      {
        ASViewImpl_setAnimatorXmlWithASIWidget_withId_(w, objValue);
      }
      break;
      case 49:
      {
        ASViewImpl_startAnimatorWithASIWidget_withId_(w, objValue);
      }
      break;
      case 50:
      {
        ASViewImpl_endAnimatorWithASIWidget_withId_(w, objValue);
      }
      break;
      case 51:
      {
        if ([objValue isKindOfClass:[NSString class]]) {
          ASViewImpl_setAnimatorListenerWithASIWidget_withADAnimator_AnimatorListener_(w, new_ASViewImpl_AnimatorListener_initWithASIWidget_withNSString_withNSString_(w, strValue, @"onAnimationStart"));
        }
        else {
          ASViewImpl_setAnimatorListenerWithASIWidget_withADAnimator_AnimatorListener_(w, (id<ADAnimator_AnimatorListener>) cast_check(objValue, ADAnimator_AnimatorListener_class_()));
        }
      }
      break;
      case 52:
      {
        if ([objValue isKindOfClass:[NSString class]]) {
          ASViewImpl_setAnimatorListenerWithASIWidget_withADAnimator_AnimatorListener_(w, new_ASViewImpl_AnimatorListener_initWithASIWidget_withNSString_withNSString_(w, strValue, @"onAnimationEnd"));
        }
        else {
          ASViewImpl_setAnimatorListenerWithASIWidget_withADAnimator_AnimatorListener_(w, (id<ADAnimator_AnimatorListener>) cast_check(objValue, ADAnimator_AnimatorListener_class_()));
        }
      }
      break;
      case 53:
      {
        if ([objValue isKindOfClass:[NSString class]]) {
          ASViewImpl_setAnimatorListenerWithASIWidget_withADAnimator_AnimatorListener_(w, new_ASViewImpl_AnimatorListener_initWithASIWidget_withNSString_withNSString_(w, strValue, @"onAnimationCancel"));
        }
        else {
          ASViewImpl_setAnimatorListenerWithASIWidget_withADAnimator_AnimatorListener_(w, (id<ADAnimator_AnimatorListener>) cast_check(objValue, ADAnimator_AnimatorListener_class_()));
        }
      }
      break;
      case 54:
      {
        if ([objValue isKindOfClass:[NSString class]]) {
          ASViewImpl_setAnimatorListenerWithASIWidget_withADAnimator_AnimatorListener_(w, new_ASViewImpl_AnimatorListener_initWithASIWidget_withNSString_withNSString_(w, strValue, @"onAnimationRepeat"));
        }
        else {
          ASViewImpl_setAnimatorListenerWithASIWidget_withADAnimator_AnimatorListener_(w, (id<ADAnimator_AnimatorListener>) cast_check(objValue, ADAnimator_AnimatorListener_class_()));
        }
      }
      break;
      case 55:
      {
        ASViewImpl_setLeftWithASIWidget_withId_(w, objValue);
      }
      break;
      case 56:
      {
        ASViewImpl_setRightWithASIWidget_withId_(w, objValue);
      }
      break;
      case 57:
      {
        ASViewImpl_setTopWithASIWidget_withId_(w, objValue);
      }
      break;
      case 58:
      {
        ASViewImpl_setBottomWithASIWidget_withId_(w, objValue);
      }
      break;
      case 59:
      {
        ASViewImpl_setIdWithASIWidget_withNSString_withId_withADView_(w, strValue, objValue, view);
      }
      break;
      case 60:
      {
        ASViewImpl_setModelSyncEventsWithASIWidget_withNSString_withId_withADView_(w, strValue, objValue, view);
      }
      break;
      case 61:
      {
        ASViewImpl_setModelParamWithASIWidget_withNSString_withId_withADView_(w, strValue, objValue, view);
      }
      break;
      case 62:
      {
        ASViewImpl_setModelPojoToUiWithASIWidget_withNSString_withId_withADView_(w, strValue, objValue, view);
      }
      break;
      case 63:
      {
        ASViewImpl_setModelUiToPojoWithASIWidget_withNSString_withId_withADView_(w, strValue, objValue, view);
      }
      break;
      case 64:
      {
        ASViewImpl_setModelPojoToUiParamsWithASIWidget_withId_(w, objValue);
      }
      break;
      case 65:
      {
        ASViewImpl_refreshUiFromModelWithASIWidget_withId_(w, objValue);
      }
      break;
      case 66:
      {
        ASViewImpl_setModelUiToPojoEventIdsWithASIWidget_withId_(w, objValue);
      }
      break;
      case 67:
      {
        if ([JavaUtilMap_class_() isInstance:objValue]) {
          id<JavaUtilMap> data = ((id<JavaUtilMap>) cast_check(objValue, JavaUtilMap_class_()));
          id expression = [w quickConvertWithId:[((id<JavaUtilMap>) nil_chk(data)) getWithId:@"expression"] withNSString:@"string"];
          id payload = [w quickConvertWithId:[data getWithId:@"payload"] withNSString:@"object"];
          ASViewImpl_updateModelDataWithASIWidget_withId_withId_(w, expression, payload);
        }
        if ([JavaUtilList_class_() isInstance:objValue]) {
          id<JavaUtilList> list = (id<JavaUtilList>) cast_check(objValue, JavaUtilList_class_());
          for (id __strong object in nil_chk(list)) {
            id<JavaUtilMap> data = ASPluginInvoker_getMapWithId_(object);
            id expression = [w quickConvertWithId:[((id<JavaUtilMap>) nil_chk(data)) getWithId:@"expression"] withNSString:@"string"];
            id payload = [w quickConvertWithId:[data getWithId:@"payload"] withNSString:@"object"];
            ASViewImpl_updateModelDataWithASIWidget_withId_withId_(w, expression, payload);
          }
        }
      }
      break;
      case 68:
      {
        ASViewImpl_notifyDataSetChangedWithASIWidget_withId_(w, objValue);
      }
      break;
      case 69:
      {
        ASViewImpl_setBackgroundWithASIWidget_withId_withId_(w, nativeWidget, objValue);
      }
      break;
      case 70:
      {
        ASViewImpl_setBackgroundRepeatWithASIWidget_withNSString_withId_withADView_(w, strValue, objValue, view);
      }
      break;
      case 71:
      {
        ASViewImpl_setOnClickWithASIWidget_withId_withId_(w, nativeWidget, objValue);
      }
      break;
      case 72:
      {
        ASViewImpl_setOnTouchWithASIWidget_withId_withId_(w, nativeWidget, objValue);
      }
      break;
      case 73:
      {
        ASViewImpl_setMinWidthWithASIWidget_withId_(w, objValue);
      }
      break;
      case 74:
      {
        ASViewImpl_setMinHeightWithASIWidget_withId_(w, objValue);
      }
      break;
      case 75:
      {
      }
      break;
      case 76:
      {
        ASViewImpl_setBackgroundTintWithASIWidget_withId_(w, objValue);
      }
      break;
      case 77:
      {
        ASViewImpl_setBackgroundTintModeWithASIWidget_withId_(w, objValue);
      }
      break;
      case 78:
      {
        ASViewImpl_setForegroundWithASIWidget_withId_withId_(w, nativeWidget, objValue);
      }
      break;
      case 79:
      {
        ASViewImpl_setForegroundRepeatWithASIWidget_withNSString_withId_withADView_(w, strValue, objValue, view);
      }
      break;
      case 80:
      {
        ASViewImpl_setForegroundTintWithASIWidget_withId_(w, objValue);
      }
      break;
      case 81:
      {
        ASViewImpl_setForegroundTintModeWithASIWidget_withId_(w, objValue);
      }
      break;
      case 82:
      {
        ASViewImpl_setVisibilityWithASIWidget_withId_withId_(w, nativeWidget, objValue);
      }
      break;
      case 83:
      {
        ASViewImpl_setAlphaWithId_withId_(nativeWidget, objValue);
      }
      break;
      case 84:
      {
        ASViewImpl_setOnLongClickWithASIWidget_withId_withId_(w, nativeWidget, objValue);
      }
      break;
      case 85:
      {
        ASViewImpl_setLongClickableWithASIWidget_withId_(w, objValue);
      }
      break;
      case 86:
      {
        ASViewImpl_setClickableWithASIWidget_withId_withId_(w, nativeWidget, objValue);
      }
      break;
      case 87:
      {
        ASViewImpl_setTranslationXWithASIWidget_withId_(w, objValue);
      }
      break;
      case 88:
      {
        ASViewImpl_setTranslationYWithASIWidget_withId_(w, objValue);
      }
      break;
      case 89:
      {
        ASViewImpl_setTranslationZWithASIWidget_withId_(w, objValue);
      }
      break;
      case 90:
      {
        ASViewImpl_setRotationWithASIWidget_withId_(w, objValue);
      }
      break;
      case 91:
      {
        ASViewImpl_setRotationXWithASIWidget_withId_(w, objValue);
      }
      break;
      case 92:
      {
        ASViewImpl_setRotationYWithASIWidget_withId_(w, objValue);
      }
      break;
      case 93:
      {
        ASViewImpl_setScaleXWithASIWidget_withId_(w, objValue);
      }
      break;
      case 94:
      {
        ASViewImpl_setScaleYWithASIWidget_withId_(w, objValue);
      }
      break;
      case 95:
      {
        ASViewImpl_setTransformPivotXWithASIWidget_withId_(w, objValue);
      }
      break;
      case 96:
      {
        ASViewImpl_setTransformPivotYWithASIWidget_withId_(w, objValue);
      }
      break;
      case 97:
      {
        ASViewImpl_invalidateWithASIWidget_(w);
      }
      break;
      case 98:
      {
        ASViewImpl_requestLayoutWithASIWidget_(w);
      }
      break;
      case 99:
      {
        ASViewImpl_setKeepScreenOnWithId_withId_(w, objValue);
      }
      break;
      case 100:
      {
        ASViewImpl_setLayoutDirectionWithASIWidget_withId_(w, objValue);
      }
      break;
      case 101:
      {
        ASViewImpl_setTextDirectionWithASIWidget_withId_(w, objValue);
      }
      break;
      case 102:
      {
        ASViewImpl_setTextAlignmentWithASIWidget_withId_(w, objValue);
      }
      break;
      case 103:
      {
        ASViewImpl_setOnDragWithASIWidget_withId_withId_(w, nativeWidget, objValue);
      }
      break;
      case 104:
      {
        ASViewImpl_setAsDragSourceWithASIWidget_withId_withId_(w, nativeWidget, objValue);
      }
      break;
      case 105:
      {
        [((ADView *) nil_chk(view)) setEnabledWithBoolean:[((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]))) booleanValue]];
      }
      break;
      case 106:
      {
        [((ADView *) nil_chk(view)) setDuplicateParentStateEnabledWithBoolean:[((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]))) booleanValue]];
      }
      break;
      case 107:
      {
        [((ADView *) nil_chk(view)) setForegroundGravityWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
      }
      break;
      case 108:
      {
        ASViewImpl_setOnKeyWithASIWidget_withId_(w, objValue);
      }
      break;
      case 109:
      {
        ASViewImpl_setLayerBorderWidthWithId_withId_(nativeWidget, objValue);
      }
      break;
      case 110:
      {
        ASViewImpl_setLayerBorderColorWithId_withId_(nativeWidget, objValue);
      }
      break;
      case 111:
      {
        ASViewImpl_setLayerCornerRadiusWithId_withId_(nativeWidget, objValue);
      }
      break;
      case 112:
      {
        ASViewImpl_setLayerMasksToBoundsWithId_withId_(nativeWidget, objValue);
      }
      break;
      case 113:
      {
        ASViewImpl_setZIndexWithASIWidget_withId_(w, objValue);
      }
      break;
      case 114:
      {
        ASViewImpl_setElevationWithASIWidget_withId_(w, objValue);
      }
      break;
      case 115:
      {
        ASViewImpl_setMaxWidthWithASIWidget_withId_(w, objValue);
      }
      break;
      case 116:
      {
        ASViewImpl_setMaxHeightWithASIWidget_withId_(w, objValue);
      }
      break;
      case 117:
      {
        if ([objValue isKindOfClass:[NSString class]]) {
          ASViewImpl_setOnSwipeListenerWithASIWidget_withASSwipeHelper_SwipeListener_(w, new_ASViewImpl_SwipeListener_initWithASIWidget_withNSString_withNSString_(w, strValue, @"onSwiped"));
        }
        else {
          ASViewImpl_setOnSwipeListenerWithASIWidget_withASSwipeHelper_SwipeListener_(w, (id<ASSwipeHelper_SwipeListener>) cast_check(objValue, ASSwipeHelper_SwipeListener_class_()));
        }
      }
      break;
      case 118:
      {
        ASViewImpl_setOutsideTouchableWithASIWidget_withNSString_withId_withADView_(w, strValue, objValue, view);
      }
      break;
      default:
      attributables = ASWidgetFactory_getAttributablesWithNSStringArray_([IOSObjectArray newArrayWithObjects:(id[]){ @"View", [w getLocalName] } count:2 type:NSString_class_()]);
      if (attributables != nil) {
        for (id<ASIAttributable> __strong attributable in attributables) {
          [((id<ASIAttributable>) nil_chk([((id<ASIAttributable>) nil_chk(attributable)) newInstanceWithASIWidget:w])) setAttributeWithASWidgetAttribute:key withNSString:strValue withId:objValue withASILifeCycleDecorator:decorator];
        }
      }
      break;
    }
  }
}

id ASViewImpl_getAttributeWithASIWidget_withASWidgetAttribute_withASILifeCycleDecorator_(id<ASIWidget> w, ASWidgetAttribute *key, id<ASILifeCycleDecorator> decorator) {
  ASViewImpl_initialize();
  return ASViewImpl_getAttributeWithASIWidget_withId_withASWidgetAttribute_withASILifeCycleDecorator_(w, [((id<ASIWidget>) nil_chk(w)) asNativeWidget], key, decorator);
}

id ASViewImpl_getAttributeWithASIWidget_withId_withASWidgetAttribute_withASILifeCycleDecorator_(id<ASIWidget> w, id nativeWidget, ASWidgetAttribute *key, id<ASILifeCycleDecorator> decorator) {
  ASViewImpl_initialize();
  ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]);
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"iosBackgroundColor", @"iosIsHidden", @"iosAlpha", @"iosIsOpaque", @"iosTintColor", @"iosClipsToBounds", @"iosClearsContextBeforeDrawing", @"iosIsUserInteractionEnabled", @"iosIsMultipleTouchEnabled", @"iosIsExclusiveTouch", @"iosPreservesSuperviewLayoutMargins", @"iosInsetsLayoutMarginsFromSafeArea", @"iosAutoresizesSubviews", @"iosTranslatesAutoresizingMaskIntoConstraints", @"iosContentScaleFactor", @"iosIsFocused", @"iosRestorationIdentifier", @"iosTag", @"iosAccessibilityIgnoresInvertColors", @"iosLargeContentImage", @"iosLargeContentTitle", @"iosScalesLargeContentImage", @"iosShowsLargeContentViewer", @"focusable", @"iosIsAccessibilityElement", @"iosAccessibilityLabel", @"contentDescription", @"iosAccessibilityHint", @"iosAccessibilityValue", @"iosAccessibilityTraits", @"selected", @"validateForm", @"left", @"right", @"top", @"bottom", @"id", @"modelSyncEvents", @"modelParam", @"modelPojoToUi", @"modelUiToPojo", @"background", @"minWidth", @"minHeight", @"backgroundTint", @"backgroundTintMode", @"foreground", @"foregroundTint", @"foregroundTintMode", @"visibility", @"alpha", @"longClickable", @"clickable", @"translationX", @"translationY", @"translationZ", @"rotation", @"rotationX", @"rotationY", @"scaleX", @"scaleY", @"transformPivotX", @"transformPivotY", @"keepScreenOn", @"layoutDirection", @"textDirection", @"textAlignment", @"enabled", @"duplicateParentState", @"foregroundGravity", @"maxWidth", @"maxHeight" }, 72)) {
    case 0:
    {
      return ASViewImpl_getBackgroundColorWithId_(nativeWidget);
    }
    case 1:
    {
      return ASViewImpl_getIsHiddenWithId_(nativeWidget);
    }
    case 2:
    {
      return ASViewImpl_getAlphaWithId_(nativeWidget);
    }
    case 3:
    {
      return ASViewImpl_getIsOpaqueWithId_(nativeWidget);
    }
    case 4:
    {
      return ASViewImpl_getTintColorWithId_(nativeWidget);
    }
    case 5:
    {
      return ASViewImpl_getClipsToBoundsWithId_(nativeWidget);
    }
    case 6:
    {
      return ASViewImpl_getClearsContextBeforeDrawingWithId_(nativeWidget);
    }
    case 7:
    {
      return ASViewImpl_getIsUserInteractionEnabledWithId_(nativeWidget);
    }
    case 8:
    {
      return ASViewImpl_getIsMultipleTouchEnabledWithId_(nativeWidget);
    }
    case 9:
    {
      return ASViewImpl_getIsExclusiveTouchWithId_(nativeWidget);
    }
    case 10:
    {
      return ASViewImpl_getPreservesSuperviewLayoutMarginsWithId_(nativeWidget);
    }
    case 11:
    {
      return ASViewImpl_getInsetsLayoutMarginsFromSafeAreaWithId_(nativeWidget);
    }
    case 12:
    {
      return ASViewImpl_getAutoresizesSubviewsWithId_(nativeWidget);
    }
    case 13:
    {
      return ASViewImpl_getTranslatesAutoresizingMaskIntoConstraintsWithId_(nativeWidget);
    }
    case 14:
    {
      return ASViewImpl_getContentScaleFactorWithId_(nativeWidget);
    }
    case 15:
    {
      return ASViewImpl_getIsFocusedWithId_(nativeWidget);
    }
    case 16:
    {
      return ASViewImpl_getRestorationIdentifierWithId_(nativeWidget);
    }
    case 17:
    {
      return ASViewImpl_getTagWithId_(nativeWidget);
    }
    case 18:
    {
      return ASViewImpl_getAccessibilityIgnoresInvertColorsWithId_(nativeWidget);
    }
    case 19:
    {
      if (ASViewImpl_checkIosVersionWithNSString_(@"13.0")) {
        return ASViewImpl_getLargeContentImageWithId_(nativeWidget);
      }
      break;
    }
    case 20:
    {
      if (ASViewImpl_checkIosVersionWithNSString_(@"13.0")) {
        return ASViewImpl_getLargeContentTitleWithId_(nativeWidget);
      }
      break;
    }
    case 21:
    {
      if (ASViewImpl_checkIosVersionWithNSString_(@"13.0")) {
        return ASViewImpl_getScalesLargeContentImageWithId_(nativeWidget);
      }
      break;
    }
    case 22:
    {
      if (ASViewImpl_checkIosVersionWithNSString_(@"13.0")) {
        return ASViewImpl_getShowsLargeContentViewerWithId_(nativeWidget);
      }
      break;
    }
    case 23:
    case 24:
    {
      return ASViewImpl_getIsAccessibilityElementWithId_(nativeWidget);
    }
    case 25:
    {
      return ASViewImpl_getAccessibilityLabelWithId_(nativeWidget);
    }
    case 26:
    case 27:
    {
      return ASViewImpl_getAccessibilityHintWithId_(nativeWidget);
    }
    case 28:
    {
      return ASViewImpl_getAccessibilityValueWithId_(nativeWidget);
    }
    case 29:
    {
      return ASViewImpl_getAccessibilityTraitsWithId_(nativeWidget);
    }
    case 30:
    {
      return ASViewImpl_getSelectedWithASIWidget_withADView_(w, view);
    }
    case 31:
    {
      return ASViewImpl_getValidateFormResultWithASIWidget_(w);
    }
    case 32:
    {
      return ASViewImpl_getLeftWithASIWidget_(w);
    }
    case 33:
    {
      return ASViewImpl_getRightWithASIWidget_(w);
    }
    case 34:
    {
      return ASViewImpl_getTopWithASIWidget_(w);
    }
    case 35:
    {
      return ASViewImpl_getBottomWithASIWidget_(w);
    }
    case 36:
    {
      return JavaLangInteger_valueOfWithInt_([((ADView *) nil_chk(view)) getId]);
    }
    case 37:
    {
      return ASViewImpl_getModelSyncEventsWithASIWidget_(w);
    }
    case 38:
    {
      return ASViewImpl_getModelParamWithASIWidget_(w);
    }
    case 39:
    {
      return ASViewImpl_getModelPojoToUiWithASIWidget_(w);
    }
    case 40:
    {
      return ASViewImpl_getModelUiToPojoWithASIWidget_(w);
    }
    case 41:
    {
      return ASViewImpl_getBackgroundWithASIWidget_(w);
    }
    case 42:
    {
      return ASViewImpl_getMinWidthWithASIWidget_(w);
    }
    case 43:
    {
      return ASViewImpl_getMinHeightWithASIWidget_(w);
    }
    case 44:
    {
      return ASViewImpl_getBackgroundTintWithASIWidget_(w);
    }
    case 45:
    {
      return ASViewImpl_getBackgroundTintModeWithASIWidget_(w);
    }
    case 46:
    {
      return ASViewImpl_getForegroundWithASIWidget_(w);
    }
    case 47:
    {
      return ASViewImpl_getForegroundTintWithASIWidget_(w);
    }
    case 48:
    {
      return ASViewImpl_getForegroundTintModeWithASIWidget_(w);
    }
    case 49:
    {
      return ASViewImpl_getVisibilityWithASIWidget_(w);
    }
    case 50:
    {
      return ASViewImpl_getAlphaWithId_(nativeWidget);
    }
    case 51:
    {
      return ASViewImpl_getLongClickableWithASIWidget_(w);
    }
    case 52:
    {
      return ASViewImpl_getClickableWithId_(nativeWidget);
    }
    case 53:
    {
      return ASViewImpl_getTranslationXWithASIWidget_(w);
    }
    case 54:
    {
      return ASViewImpl_getTranslationYWithASIWidget_(w);
    }
    case 55:
    {
      return ASViewImpl_getTranslationZWithASIWidget_(w);
    }
    case 56:
    {
      return ASViewImpl_getRotationWithASIWidget_(w);
    }
    case 57:
    {
      return ASViewImpl_getRotationXWithASIWidget_(w);
    }
    case 58:
    {
      return ASViewImpl_getRotationYWithASIWidget_(w);
    }
    case 59:
    {
      return ASViewImpl_getScaleXWithASIWidget_(w);
    }
    case 60:
    {
      return ASViewImpl_getScaleYWithASIWidget_(w);
    }
    case 61:
    {
      return ASViewImpl_getTransformPivotXWithASIWidget_(w);
    }
    case 62:
    {
      return ASViewImpl_getTransformPivotYWithASIWidget_(w);
    }
    case 63:
    {
      return ASViewImpl_getKeepScreenOnWithId_(w);
    }
    case 64:
    {
      return ASViewImpl_getLayoutDirectionWithASIWidget_(w);
    }
    case 65:
    {
      return ASViewImpl_getTextDirectionWithASIWidget_(w);
    }
    case 66:
    {
      return ASViewImpl_getTextAlignmentWithASIWidget_(w);
    }
    case 67:
    {
      return JavaLangBoolean_valueOfWithBoolean_([((ADView *) nil_chk(view)) isEnabled]);
    }
    case 68:
    {
      return JavaLangBoolean_valueOfWithBoolean_([((ADView *) nil_chk(view)) isDuplicateParentStateEnabled]);
    }
    case 69:
    {
      return JavaLangInteger_valueOfWithInt_([((ADView *) nil_chk(view)) getForegroundGravity]);
    }
    case 70:
    {
      return ASViewImpl_getMaxWidthWithASIWidget_(w);
    }
    case 71:
    {
      return ASViewImpl_getMaxHeightWithASIWidget_(w);
    }
  }
  id<JavaUtilList> attributables = ASWidgetFactory_getAttributablesWithNSStringArray_([IOSObjectArray newArrayWithObjects:(id[]){ @"View", [w getLocalName] } count:2 type:NSString_class_()]);
  if (attributables != nil) {
    for (id<ASIAttributable> __strong attributable in attributables) {
      id value = [((id<ASIAttributable>) nil_chk([((id<ASIAttributable>) nil_chk(attributable)) newInstanceWithASIWidget:w])) getAttributeWithASWidgetAttribute:key withASILifeCycleDecorator:decorator];
      if (value != nil) {
        return value;
      }
    }
  }
  return nil;
}

bool ASViewImpl_checkIosVersionWithNSString_(NSString *v) {
  ASViewImpl_initialize();
  return ([[[UIDevice currentDevice] systemVersion] compare:v options:NSNumericSearch] == NSOrderedDescending);
}

void ASViewImpl_setPaddingWithId_withADView_(id objValue, ADView *view) {
  ASViewImpl_initialize();
  int32_t value = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
  ADXViewCompat_setPaddingRelativeWithADView_withInt_withInt_withInt_withInt_(view, value, value, value, value);
}

void ASViewImpl_setPaddingLeftWithId_withADView_(id objValue, ADView *view) {
  ASViewImpl_initialize();
  int32_t value = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
  ADXViewCompat_setPaddingRelativeWithADView_withInt_withInt_withInt_withInt_(view, value, [((ADView *) nil_chk(view)) getPaddingTop], ADXViewCompat_getPaddingEndWithADView_(view), [view getPaddingBottom]);
}

void ASViewImpl_setPaddingRightWithId_withADView_(id objValue, ADView *view) {
  ASViewImpl_initialize();
  int32_t value = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
  ADXViewCompat_setPaddingRelativeWithADView_withInt_withInt_withInt_withInt_(view, ADXViewCompat_getPaddingStartWithADView_(view), [((ADView *) nil_chk(view)) getPaddingTop], value, [view getPaddingBottom]);
}

void ASViewImpl_setPaddingTopWithId_withADView_(id objValue, ADView *view) {
  ASViewImpl_initialize();
  int32_t value = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
  ADXViewCompat_setPaddingRelativeWithADView_withInt_withInt_withInt_withInt_(view, ADXViewCompat_getPaddingStartWithADView_(view), value, ADXViewCompat_getPaddingEndWithADView_(view), [((ADView *) nil_chk(view)) getPaddingBottom]);
}

void ASViewImpl_setPaddingBottomWithId_withADView_(id objValue, ADView *view) {
  ASViewImpl_initialize();
  int32_t value = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
  ADXViewCompat_setPaddingRelativeWithADView_withInt_withInt_withInt_withInt_(view, ADXViewCompat_getPaddingStartWithADView_(view), [((ADView *) nil_chk(view)) getPaddingTop], ADXViewCompat_getPaddingEndWithADView_(view), value);
}

id ASViewImpl_getPaddingTopWithASIWidget_withADView_(id<ASIWidget> w, ADView *view) {
  ASViewImpl_initialize();
  return JavaLangInteger_valueOfWithInt_([((ADView *) nil_chk(view)) getPaddingTop]);
}

id ASViewImpl_getPaddingBottomWithASIWidget_withADView_(id<ASIWidget> w, ADView *view) {
  ASViewImpl_initialize();
  return JavaLangInteger_valueOfWithInt_([((ADView *) nil_chk(view)) getPaddingBottom]);
}

id ASViewImpl_getPaddingLeftWithASIWidget_withADView_(id<ASIWidget> w, ADView *view) {
  ASViewImpl_initialize();
  return JavaLangInteger_valueOfWithInt_(ADXViewCompat_getPaddingStartWithADView_(view));
}

id ASViewImpl_getPaddingRightWithASIWidget_withADView_(id<ASIWidget> w, ADView *view) {
  ASViewImpl_initialize();
  return JavaLangInteger_valueOfWithInt_(ADXViewCompat_getPaddingEndWithADView_(view));
}

void ASViewImpl_setPaddingHorizontalWithId_withADView_(id objValue, ADView *view) {
  ASViewImpl_initialize();
  int32_t value = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
  ADXViewCompat_setPaddingRelativeWithADView_withInt_withInt_withInt_withInt_(view, value, [((ADView *) nil_chk(view)) getPaddingTop], value, [view getPaddingBottom]);
}

void ASViewImpl_setPaddingVerticalWithId_withADView_(id objValue, ADView *view) {
  ASViewImpl_initialize();
  int32_t value = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
  ADXViewCompat_setPaddingRelativeWithADView_withInt_withInt_withInt_withInt_(view, ADXViewCompat_getPaddingStartWithADView_(view), value, ADXViewCompat_getPaddingEndWithADView_(view), value);
}

void ASViewImpl_setIdWithASIWidget_withNSString_withId_withADView_(id<ASIWidget> w, NSString *strValue, id objValue, ADView *view) {
  ASViewImpl_initialize();
  [((ADView *) nil_chk(view)) setIdWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
  [((id<ASIWidget>) nil_chk(w)) setIdWithNSString:strValue];
  ASViewImpl_setNativeIdWithASIWidget_withNSString_(w, strValue);
}

id ASViewImpl_getModelSyncEventsWithASIWidget_(id<ASIWidget> w) {
  ASViewImpl_initialize();
  return [((id<ASIWidget>) nil_chk(w)) getModelSyncEvents];
}

void ASViewImpl_setModelSyncEventsWithASIWidget_withNSString_withId_withADView_(id<ASIWidget> w, NSString *strValue, id objValue, ADView *view) {
  ASViewImpl_initialize();
  [((id<ASIWidget>) nil_chk(w)) setModelSyncEventsWithNSString:(NSString *) cast_chk(objValue, [NSString class])];
}

void ASViewImpl_setModelParamWithASIWidget_withNSString_withId_withADView_(id<ASIWidget> w, NSString *strValue, id objValue, ADView *view) {
  ASViewImpl_initialize();
  [((id<ASIWidget>) nil_chk(w)) setModelParamWithNSString:(NSString *) cast_chk(objValue, [NSString class])];
}

void ASViewImpl_setModelPojoToUiWithASIWidget_withNSString_withId_withADView_(id<ASIWidget> w, NSString *strValue, id objValue, ADView *view) {
  ASViewImpl_initialize();
  [((id<ASIWidget>) nil_chk(w)) setModelPojoToUiWithNSString:(NSString *) cast_chk(objValue, [NSString class])];
}

void ASViewImpl_setModelUiToPojoWithASIWidget_withNSString_withId_withADView_(id<ASIWidget> w, NSString *strValue, id objValue, ADView *view) {
  ASViewImpl_initialize();
  [((id<ASIWidget>) nil_chk(w)) setModelUiToPojoWithNSString:(NSString *) cast_chk(objValue, [NSString class])];
}

void ASViewImpl_notifyDataSetChangedWithASIWidget_withId_(id<ASIWidget> w, id objValue) {
  ASViewImpl_initialize();
  if ([((JavaLangBoolean *) nil_chk(ASPluginInvoker_getBooleanWithId_(objValue))) booleanValue]) {
    [((id<ASIWidget>) nil_chk(w)) notifyDataSetChanged];
  }
}

void ASViewImpl_updateModelDataWithASIWidget_withId_withId_(id<ASIWidget> w, id expression, id payload) {
  ASViewImpl_initialize();
  [((id<ASIWidget>) nil_chk(w)) updateModelDataWithNSString:(NSString *) cast_chk(expression, [NSString class]) withId:payload];
}

id ASViewImpl_getModelUiToPojoWithASIWidget_(id<ASIWidget> w) {
  ASViewImpl_initialize();
  return [((id<ASIWidget>) nil_chk(w)) getModelUiToPojo];
}

id ASViewImpl_getModelPojoToUiWithASIWidget_(id<ASIWidget> w) {
  ASViewImpl_initialize();
  return [((id<ASIWidget>) nil_chk(w)) getModelPojoToUi];
}

id ASViewImpl_getModelParamWithASIWidget_(id<ASIWidget> w) {
  ASViewImpl_initialize();
  return [((id<ASIWidget>) nil_chk(w)) getModelParam];
}

void ASViewImpl_setModelPojoToUiParamsWithASIWidget_withId_(id<ASIWidget> w, id objValue) {
  ASViewImpl_initialize();
  [((id<ASIWidget>) nil_chk(w)) setModelPojoToUiParamsWithNSString:(NSString *) cast_chk(objValue, [NSString class])];
}

void ASViewImpl_refreshUiFromModelWithASIWidget_withId_(id<ASIWidget> w, id objValue) {
  ASViewImpl_initialize();
  ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w, objValue, false);
}

void ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(id<ASIWidget> w, id objValue, bool remeasure) {
  ASViewImpl_initialize();
  if ([((id<ASIWidget>) nil_chk(w)) isInitialised] && objValue != nil) {
    IOSObjectArray *ids = [((NSString *) cast_chk(objValue, [NSString class])) java_split:@","];
    {
      IOSObjectArray *a__ = ids;
      NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      NSString * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        NSString *id_ = RETAIN_AND_AUTORELEASE(*b__++);
        if ([id_ java_contains:@"#"]) {
          NSString *componentId = [id_ java_substring:0 endIndex:[id_ java_lastIndexOfString:@"#"]];
          NSString *myId = [id_ java_substring:[id_ java_lastIndexOfString:@"#"] + 1];
          id_ = JreStrcat("$$$", componentId, @"#@+id/", myId);
        }
        else {
          id_ = JreStrcat("$$", @"@+id/", id_);
        }
        id<ASIWidget> widget = [w findNearestViewWithNSString:id_];
        if (widget != nil) {
          [widget applyModelToWidget];
        }
      }
    }
    if (remeasure) {
      [((id<ASIFragment>) nil_chk([w getFragment])) remeasure];
    }
  }
}

void ASViewImpl_setModelUiToPojoEventIdsWithASIWidget_withId_(id<ASIWidget> w, id objValue) {
  ASViewImpl_initialize();
  [((id<ASIWidget>) nil_chk(w)) setModelUiToPojoEventIdsWithNSString:(NSString *) cast_chk(objValue, [NSString class])];
}

void ASViewImpl_setZIndexWithASIWidget_withId_(id<ASIWidget> w, id objValue) {
  ASViewImpl_initialize();
  [((id<ASIWidget>) nil_chk(w)) setZIndexWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
  id<ASHasWidgets> parent = [w getParent];
  if (parent != nil) {
    id<JavaUtilList> widgets = [parent getWidgets];
    JavaUtilCollections_sortWithJavaUtilList_withJavaUtilComparator_(widgets, new_ASViewImpl_1_init());
    ASViewImpl_nativeBringToFrontWithJavaUtilList_(widgets);
  }
}

void ASViewImpl_setMaxHeightWithASIWidget_withId_(id<ASIWidget> w, id objValue) {
  ASViewImpl_initialize();
  id view = [((id<ASIWidget>) nil_chk(w)) asWidget];
  if ([ASIMaxDimension_class_() isInstance:view]) {
    [((id<ASIMaxDimension>) nil_chk(((id<ASIMaxDimension>) cast_check(view, ASIMaxDimension_class_())))) setMaxHeightWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
  }
}

void ASViewImpl_setMaxWidthWithASIWidget_withId_(id<ASIWidget> w, id objValue) {
  ASViewImpl_initialize();
  id view = [((id<ASIWidget>) nil_chk(w)) asWidget];
  if ([ASIMaxDimension_class_() isInstance:view]) {
    [((id<ASIMaxDimension>) nil_chk(((id<ASIMaxDimension>) cast_check(view, ASIMaxDimension_class_())))) setMaxWidthWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
  }
}

id ASViewImpl_getMaxWidthWithASIWidget_(id<ASIWidget> w) {
  ASViewImpl_initialize();
  id view = [((id<ASIWidget>) nil_chk(w)) asWidget];
  if ([ASIMaxDimension_class_() isInstance:view]) {
    return JavaLangInteger_valueOfWithInt_([((id<ASIMaxDimension>) nil_chk(((id<ASIMaxDimension>) cast_check(view, ASIMaxDimension_class_())))) getMaxWidth]);
  }
  return nil;
}

id ASViewImpl_getMaxHeightWithASIWidget_(id<ASIWidget> w) {
  ASViewImpl_initialize();
  id view = [((id<ASIWidget>) nil_chk(w)) asWidget];
  if ([ASIMaxDimension_class_() isInstance:view]) {
    return JavaLangInteger_valueOfWithInt_([((id<ASIMaxDimension>) nil_chk(((id<ASIMaxDimension>) cast_check(view, ASIMaxDimension_class_())))) getMaxHeight]);
  }
  return nil;
}

void ASViewImpl_setSelectedWithId_withADView_(id objValue, ADView *view) {
  ASViewImpl_initialize();
  [((ADView *) nil_chk(view)) setSelectedWithBoolean:[((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk((objValue), [JavaLangBoolean class]))) booleanValue]];
}

id ASViewImpl_getSelectedWithASIWidget_withADView_(id<ASIWidget> w, ADView *view) {
  ASViewImpl_initialize();
  return JavaLangBoolean_valueOfWithBoolean_([((ADView *) nil_chk(view)) isSelected]);
}

void ASViewImpl_setInvalidateOnFrameChangeWithASIWidget_withId_(id<ASIWidget> w, id objValue) {
  ASViewImpl_initialize();
  [((id<ASIWidget>) nil_chk(w)) setInvalidateOnFrameChangeWithBoolean:[((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]))) booleanValue]];
}

void ASViewImpl_setBackgroundRepeatWithASIWidget_withNSString_withId_withADView_(id<ASIWidget> w, NSString *strValue, id objValue, ADView *view) {
  ASViewImpl_initialize();
  [((id<ASIWidget>) nil_chk(w)) applyAttributeCommandWithNSString:@"background" withNSString:@"imageRepeat" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"backgroundRepeat" } count:1 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ strValue } count:1 type:NSObject_class_()]];
}

void ASViewImpl_setForegroundRepeatWithASIWidget_withNSString_withId_withADView_(id<ASIWidget> w, NSString *strValue, id objValue, ADView *view) {
  ASViewImpl_initialize();
  [((id<ASIWidget>) nil_chk(w)) applyAttributeCommandWithNSString:@"foreground" withNSString:@"imageRepeat" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"foregroundRepeat" } count:1 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ strValue } count:1 type:NSObject_class_()]];
}

void ASViewImpl_addEventInfoWithJavaUtilMap_withADMotionEvent_(id<JavaUtilMap> obj, ADMotionEvent *event) {
  ASViewImpl_initialize();
  id<JavaUtilMap> eventInfo = ASPluginInvoker_getJSONCompatMap();
  (void) [((id<JavaUtilMap>) nil_chk(eventInfo)) putWithId:@"action" withId:JavaLangInteger_valueOfWithInt_([((ADMotionEvent *) nil_chk(event)) getAction])];
  (void) [eventInfo putWithId:@"rawX" withId:JavaLangInteger_valueOfWithInt_([event getRawX])];
  (void) [eventInfo putWithId:@"rawY" withId:JavaLangInteger_valueOfWithInt_([event getRawY])];
  (void) [eventInfo putWithId:@"x" withId:JavaLangInteger_valueOfWithInt_([event getX])];
  (void) [eventInfo putWithId:@"y" withId:JavaLangInteger_valueOfWithInt_([event getY])];
  (void) [((id<JavaUtilMap>) nil_chk(obj)) putWithId:@"eventInfo" withId:ASPluginInvoker_getNativeMapWithJavaUtilMap_(eventInfo)];
}

void ASViewImpl_addEventInfoWithJavaUtilMap_withADKeyEvent_(id<JavaUtilMap> obj, ADKeyEvent *event) {
  ASViewImpl_initialize();
  id<JavaUtilMap> eventInfo = ASPluginInvoker_getJSONCompatMap();
  if (event != nil) {
    (void) [((id<JavaUtilMap>) nil_chk(eventInfo)) putWithId:@"action" withId:JavaLangInteger_valueOfWithInt_([event getAction])];
    (void) [eventInfo putWithId:@"keyCode" withId:JavaLangInteger_valueOfWithInt_([event getKeyCode])];
  }
  (void) [((id<JavaUtilMap>) nil_chk(obj)) putWithId:@"eventInfo" withId:ASPluginInvoker_getNativeMapWithJavaUtilMap_(eventInfo)];
}

void ASViewImpl_addEventInfoWithJavaUtilMap_withADView_DragEvent_(id<JavaUtilMap> obj, ADView_DragEvent *event) {
  ASViewImpl_initialize();
  id<JavaUtilMap> eventInfo = ASPluginInvoker_getJSONCompatMap();
  (void) [((id<JavaUtilMap>) nil_chk(eventInfo)) putWithId:@"action" withId:JavaLangInteger_valueOfWithInt_([((ADView_DragEvent *) nil_chk(event)) getAction])];
  (void) [eventInfo putWithId:@"x" withId:JavaLangInteger_valueOfWithInt_([event getX])];
  (void) [eventInfo putWithId:@"y" withId:JavaLangInteger_valueOfWithInt_([event getY])];
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(eventInfo, @"clipData", ASViewImpl_getClipDataWithADView_DragEvent_(event));
  (void) [((id<JavaUtilMap>) nil_chk(obj)) putWithId:@"eventInfo" withId:ASPluginInvoker_getNativeMapWithJavaUtilMap_(eventInfo)];
}

void ASViewImpl_addEventInfoWithJavaUtilMap_withADChronometer_withASIFragment_(id<JavaUtilMap> obj, ADChronometer *chronometer, id<ASIFragment> fragment) {
  ASViewImpl_initialize();
  (void) [((id<JavaUtilMap>) nil_chk(obj)) putWithId:@"text" withId:[((ADChronometer *) nil_chk(chronometer)) getText]];
}

void ASViewImpl_addEventInfoWithJavaUtilMap_withJavaUtilList_withASIFragment_(id<JavaUtilMap> obj, id<JavaUtilList> checkedIds, id<ASIFragment> fragment) {
  ASViewImpl_initialize();
  id<JavaUtilList> ids = new_JavaUtilArrayList_init();
  for (JavaLangInteger *boxed__ in nil_chk(checkedIds)) {
    int32_t id_ = [((JavaLangInteger *) nil_chk(boxed__)) intValue];
    [ids addWithId:[((id<ASIWidget>) nil_chk([((id<ASIFragment>) nil_chk(fragment)) getRootWidget])) quickConvertBackWithId:JavaLangInteger_valueOfWithInt_(id_) withNSString:@"id"]];
  }
  (void) [((id<JavaUtilMap>) nil_chk(obj)) putWithId:@"checkedIds" withId:ASPluginInvoker_getJSONSafeObjWithId_(ids)];
}

void ASViewImpl_validateFormWithASIWidget_withId_(id<ASIWidget> w, id objValue) {
  ASViewImpl_initialize();
  NSString *formGroupId = (NSString *) cast_chk(objValue, [NSString class]);
  ASForm *form = (ASForm *) cast_chk([((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w)) getFragment])) getFromTempCacheWithNSString:formGroupId], [ASForm class]);
  if (form != nil) {
    [((id<ASIFragment>) nil_chk([w getFragment])) disableRemeasure];
    [((id<ASIFragment>) nil_chk([w getFragment])) storeInTempCacheWithNSString:@"formvalidationResult" withId:JavaLangBoolean_valueOfWithBoolean_([form isValid])];
    [((id<ASIFragment>) nil_chk([w getFragment])) enableRemeasure];
  }
}

id ASViewImpl_getValidateFormResultWithASIWidget_(id<ASIWidget> w) {
  ASViewImpl_initialize();
  id result = [((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w)) getFragment])) getFromTempCacheWithNSString:@"formvalidationResult"];
  return result;
}

void ASViewImpl_setValidationWithASIWidget_withId_(id<ASIWidget> w, id objValue) {
  ASViewImpl_initialize();
  id<JavaUtilList> forms = ASViewImpl_getFormsWithASIWidget_(w);
  if (forms != nil) {
    for (ASForm * __strong form in forms) {
      id<JavaUtilList> validations = (id<JavaUtilList>) cast_check(objValue, JavaUtilList_class_());
      for (NSString * __strong validation in nil_chk(validations)) {
        if ([ASFormElement_class_() isInstance:w]) {
          id<ASFormElement> formElement = (id<ASFormElement>) cast_check(w, ASFormElement_class_());
          ASField *field = ASField_using__WithASFormElement_withInt_(formElement, ASField_DEFAULT_ORDER);
          IOSObjectArray *params = nil;
          int32_t startIndex = [((NSString *) nil_chk(validation)) java_indexOfString:@"("];
          int32_t endIndex = [validation java_indexOfString:@")"];
          if (startIndex != -1 && endIndex != -1) {
            params = [((NSString *) nil_chk([validation java_substring:startIndex + 1 endIndex:endIndex])) java_split:@"\\-"];
            validation = [validation java_substring:0 endIndex:startIndex];
          }
          id<ASValidation> validator = ASValidatorFactory_getWithNSString_(validation);
          id<ASValidation> newInstance = [((id<ASValidation>) nil_chk(validator)) newInstanceWithNSStringArray:params];
          NSString *customMessage = [((id<ASFormElement>) nil_chk(formElement)) getCustomMessageWithNSString:validation];
          if (customMessage != nil) {
            [((id<ASValidation>) nil_chk(newInstance)) setErrorMessageWithNSString:customMessage];
          }
          (void) [((ASField *) nil_chk(field)) addValidatorWithASValidation:newInstance];
          [((ASForm *) nil_chk(form)) addFieldWithASField:field];
        }
      }
    }
  }
}

id<JavaUtilList> ASViewImpl_getFormsWithASIWidget_(id<ASIWidget> w) {
  ASViewImpl_initialize();
  if ([ASFormElement_class_() isInstance:w]) {
    id<JavaUtilList> forms = new_JavaUtilArrayList_init();
    NSString *formGroupIdStr = [((id<ASFormElement>) nil_chk(((id<ASFormElement>) cast_check(w, ASFormElement_class_())))) getFormGroupId];
    if (formGroupIdStr == nil) {
      @throw new_JavaLangRuntimeException_initWithNSString_(@"Specify a formGroupId for the widget");
    }
    IOSObjectArray *formGroupIds = ASStringUtils_splitWithNSString_withNSString_(formGroupIdStr, @",");
    {
      IOSObjectArray *a__ = formGroupIds;
      NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      NSString * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        NSString *formGroupId = RETAIN_AND_AUTORELEASE(*b__++);
        ASForm *form = (ASForm *) cast_chk([((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w)) getFragment])) getFromTempCacheWithNSString:formGroupId], [ASForm class]);
        if (form == nil) {
          form = new_ASForm_init();
          [((id<ASIFragment>) nil_chk([w getFragment])) storeInTempCacheWithNSString:formGroupId withId:form];
        }
        [forms addWithId:form];
      }
    }
    return forms;
  }
  return nil;
}

void ASViewImpl_setTypeWithASIWidget_withNSString_withId_(id<ASIWidget> w, NSString *value, id objValue) {
  ASViewImpl_initialize();
  switch (JreIndexOfStr(value, (id[]){ @"email", @"tel", @"url", @"date", @"time" }, 5)) {
    case 0:
    ASViewImpl_addValidatorWithASIWidget_withNSString_withNSStringArray_(w, @"email", [IOSObjectArray newArrayWithObjects:(id[]){  } count:0 type:NSString_class_()]);
    break;
    case 1:
    ASViewImpl_addValidatorWithASIWidget_withNSString_withNSStringArray_(w, @"mobilenumber", [IOSObjectArray newArrayWithObjects:(id[]){  } count:0 type:NSString_class_()]);
    break;
    case 2:
    ASViewImpl_addValidatorWithASIWidget_withNSString_withNSStringArray_(w, @"url", [IOSObjectArray newArrayWithObjects:(id[]){  } count:0 type:NSString_class_()]);
    break;
    case 3:
    ASViewImpl_addValidatorWithASIWidget_withNSString_withNSStringArray_(w, @"date", [IOSObjectArray newArrayWithObjects:(id[]){ @"dd/MM/yyyy" } count:1 type:NSString_class_()]);
    break;
    case 4:
    ASViewImpl_addValidatorWithASIWidget_withNSString_withNSStringArray_(w, @"time", [IOSObjectArray newArrayWithObjects:(id[]){  } count:0 type:NSString_class_()]);
    break;
    default:
    break;
  }
}

void ASViewImpl_setPatternWithASIWidget_withId_(id<ASIWidget> w, id objValue) {
  ASViewImpl_initialize();
  ASViewImpl_addValidatorWithASIWidget_withNSString_withNSStringArray_(w, @"pattern", [IOSObjectArray newArrayWithObjects:(id[]){ (NSString *) cast_chk(objValue, [NSString class]) } count:1 type:NSString_class_()]);
}

void ASViewImpl_setMaxWithASIWidget_withId_(id<ASIWidget> w, id objValue) {
  ASViewImpl_initialize();
  ASViewImpl_addValidatorWithASIWidget_withNSString_withNSStringArray_(w, @"maxvalue", [IOSObjectArray newArrayWithObjects:(id[]){ (NSString *) cast_chk(objValue, [NSString class]) } count:1 type:NSString_class_()]);
}

void ASViewImpl_setMinWithASIWidget_withId_(id<ASIWidget> w, id objValue) {
  ASViewImpl_initialize();
  ASViewImpl_addValidatorWithASIWidget_withNSString_withNSStringArray_(w, @"minvalue", [IOSObjectArray newArrayWithObjects:(id[]){ (NSString *) cast_chk(objValue, [NSString class]) } count:1 type:NSString_class_()]);
}

void ASViewImpl_setMaxlengthWithASIWidget_withId_(id<ASIWidget> w, id objValue) {
  ASViewImpl_initialize();
  ASViewImpl_addValidatorWithASIWidget_withNSString_withNSStringArray_(w, @"maxlength", [IOSObjectArray newArrayWithObjects:(id[]){ (NSString *) cast_chk(objValue, [NSString class]) } count:1 type:NSString_class_()]);
}

void ASViewImpl_setMinlengthWithASIWidget_withId_(id<ASIWidget> w, id objValue) {
  ASViewImpl_initialize();
  ASViewImpl_addValidatorWithASIWidget_withNSString_withNSStringArray_(w, @"minlength", [IOSObjectArray newArrayWithObjects:(id[]){ (NSString *) cast_chk(objValue, [NSString class]) } count:1 type:NSString_class_()]);
}

void ASViewImpl_setRequiredWithASIWidget_withId_(id<ASIWidget> w, id objValue) {
  ASViewImpl_initialize();
  ASViewImpl_addValidatorWithASIWidget_withNSString_withNSStringArray_(w, @"required", nil);
}

void ASViewImpl_addValidatorWithASIWidget_withNSString_withNSStringArray_(id<ASIWidget> w, NSString *validationName, IOSObjectArray *params) {
  ASViewImpl_initialize();
  if ([ASFormElement_class_() isInstance:w]) {
    id<JavaUtilList> forms = ASViewImpl_getFormsWithASIWidget_(w);
    if (forms != nil) {
      for (ASForm * __strong form in forms) {
        id<ASFormElement> formElement = (id<ASFormElement>) cast_check(w, ASFormElement_class_());
        ASField *field = ASField_using__WithASFormElement_withInt_(formElement, ASField_DEFAULT_ORDER);
        id<ASValidation> validator = ASValidatorFactory_getWithNSString_(validationName);
        NSString *customMessage = [((id<ASFormElement>) nil_chk(formElement)) getCustomMessageWithNSString:validationName];
        id<ASValidation> newInstance = [((id<ASValidation>) nil_chk(validator)) newInstanceWithNSStringArray:params];
        if (customMessage != nil) {
          [((id<ASValidation>) nil_chk(newInstance)) setErrorMessageWithNSString:customMessage];
        }
        (void) [((ASField *) nil_chk(field)) addValidatorWithASValidation:newInstance];
        [((ASForm *) nil_chk(form)) addFieldWithASField:field];
      }
    }
  }
}

void ASViewImpl_setCustomErrorMessageKeysWithASIWidget_withId_(id<ASIWidget> w, id objValue) {
  ASViewImpl_initialize();
  if ([ASFormElement_class_() isInstance:w]) {
    id<ASFormElement> formElement = (id<ASFormElement>) cast_check(w, ASFormElement_class_());
    [((id<ASFormElement>) nil_chk(formElement)) setCustomErrorMessageKeysWithJavaUtilList:(id<JavaUtilList>) cast_check(objValue, JavaUtilList_class_())];
  }
}

void ASViewImpl_setCustomErrorMessageValuesWithASIWidget_withId_(id<ASIWidget> w, id objValue) {
  ASViewImpl_initialize();
  if ([ASFormElement_class_() isInstance:w]) {
    id<ASFormElement> formElement = (id<ASFormElement>) cast_check(w, ASFormElement_class_());
    [((id<ASFormElement>) nil_chk(formElement)) setCustomErrorMessageValuesWithJavaUtilList:(id<JavaUtilList>) cast_check(objValue, JavaUtilList_class_())];
  }
}

void ASViewImpl_setValidationErrorDisplayWithASIWidget_withNSString_withId_(id<ASIWidget> w, NSString *strValue, id objValue) {
  ASViewImpl_initialize();
  if ([ASFormElement_class_() isInstance:w]) {
    id<ASFormElement> formElement = (id<ASFormElement>) cast_check(w, ASFormElement_class_());
    [((id<ASFormElement>) nil_chk(formElement)) setValidationErrorDisplayTypeWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
  }
}

void ASViewImpl_setErrorStyleWithASIWidget_withADView_withId_(id<ASIWidget> w, ADView *view, id objValue) {
  ASViewImpl_initialize();
  if ([ASFormElement_class_() isInstance:w]) {
    id<ASFormElement> formElement = (id<ASFormElement>) cast_check(w, ASFormElement_class_());
    [((id<ASFormElement>) nil_chk(formElement)) setErrorStyleWithNSString:(NSString *) cast_chk(objValue, [NSString class])];
  }
}

void ASViewImpl_setStyleWithASIWidget_withADView_withId_(id<ASIWidget> w, ADView *view, id objValue) {
  ASViewImpl_initialize();
  if ([ASFormElement_class_() isInstance:w]) {
    id<ASFormElement> formElement = (id<ASFormElement>) cast_check(w, ASFormElement_class_());
    [((id<ASFormElement>) nil_chk(formElement)) setNormalStyleWithNSString:(NSString *) cast_chk(objValue, [NSString class])];
  }
  ASViewImpl_setStyleWithASIWidget_withId_(w, objValue);
}

void ASViewImpl_setStyleWithASIWidget_withId_(id<ASIWidget> w, id objValue) {
  ASViewImpl_initialize();
  if ([((id<ASIWidget>) nil_chk(w)) isInitialised]) {
    CSSCssDataHolder *pageData = (CSSCssDataHolder *) cast_chk([((id<ASIFragment>) nil_chk([w getFragment])) getStyleSheet], [CSSCssDataHolder class]);
    NSString *style = (NSString *) cast_chk(objValue, [NSString class]);
    if (style != nil) {
      style = [style java_replaceFirst:@"@style/" withReplacement:@""];
      id<JavaUtilList> attributes = [((CSSCssDataHolder *) nil_chk(pageData)) getStyleWithNSString:JreStrcat("C$", '.', style)];
      if (attributes != nil) {
        JavaUtilHashMap *attributeMap = new_JavaUtilHashMap_init();
        for (CSSCssTree_Attribute * __strong attribute in attributes) {
          NSString *key = ((CSSCssTree_Attribute *) nil_chk(attribute))->key_;
          if (![attributeMap containsKeyWithId:key]) {
            (void) [attributeMap putWithId:key withId:new_JavaUtilArrayList_init()];
          }
          ASWidgetAttributeValue *widgetAttributeValue = new_ASWidgetAttributeValue_initWithNSString_withNSString_withNSString_withNSString_withNSString_withNSString_(attribute->value_, attribute->orientation_, attribute->minWidth_, attribute->minHeight_, attribute->maxWidth_, attribute->maxHeight_);
          [((id<JavaUtilList>) nil_chk([attributeMap getWithId:key])) addWithId:widgetAttributeValue];
        }
        for (NSString * __strong key in nil_chk([attributeMap keySet])) {
          ASWidgetAttribute *attribute = [w getAttributeWithASHasWidgets:[w getParent] withNSString:[w getLocalName] withNSString:key];
          if (attribute != nil) {
            [((ASBaseWidget *) cast_chk(w, [ASBaseWidget class])) updateWidgetMapWithASWidgetAttribute:attribute withJavaUtilList:[attributeMap getWithId:key]];
            if (![attribute isForChild]) {
              NSString *attributeValue = [w getAttributeValueWithNSString:key];
              [((ASBaseWidget *) cast_chk(w, [ASBaseWidget class])) applyStyleToWidgetWithASWidgetAttribute:attribute withId:attributeValue];
            }
            else {
              [((ASBaseHasWidgets *) nil_chk(((ASBaseHasWidgets *) cast_chk([w getParent], [ASBaseHasWidgets class])))) setChildAttributeWithASIWidget:w withASWidgetAttribute:attribute];
            }
          }
        }
      }
    }
  }
}

void ASViewImpl_setMessageOnLabelWithASIWidget_withNSString_(id<ASIWidget> w, NSString *message) {
  ASViewImpl_initialize();
  NSString *id_ = [((id<ASIWidget>) nil_chk(w)) getId];
  if (id_ != nil) {
    id<ASIWidget> errorLabel = [w findNearestViewWithNSString:JreStrcat("$$", id_, @"Error")];
    if ([ASValidationErrorLabel_class_() isInstance:errorLabel]) {
      [((id<ASValidationErrorLabel>) nil_chk(((id<ASValidationErrorLabel>) cast_check(errorLabel, ASValidationErrorLabel_class_())))) setErrorMessageWithNSString:message];
    }
  }
}

void ASViewImpl_stateWithASIWidget_withInt_(id<ASIWidget> w, int32_t i) {
  ASViewImpl_initialize();
  NSString *attributeName = (NSString *) cast_chk([((id<ASIWidget>) nil_chk(w)) getUserDataWithNSString:JreStrcat("$I", @"state", i)], [NSString class]);
  id val = [w getUserDataWithNSString:JreStrcat("$I", @"val", i)];
  [w setAttributeWithNSString:attributeName withId:val withBoolean:false];
}

void ASViewImpl_setStateWithASIWidget_withInt_withId_(id<ASIWidget> w, int32_t i, id value) {
  ASViewImpl_initialize();
  NSString *attributeName = (NSString *) cast_chk([((id<ASIWidget>) nil_chk(w)) getUserDataWithNSString:JreStrcat("$I", @"state", i)], [NSString class]);
  NSString *attributeConverter = (NSString *) cast_chk([w getUserDataWithNSString:JreStrcat("$I", @"stateConverter", i)], [NSString class]);
  NSString *stringFormatter = (NSString *) cast_chk([w getUserDataWithNSString:JreStrcat("$I", @"stateStringFormat", i)], [NSString class]);
  if (attributeConverter != nil && stringFormatter != nil) {
    value = NSString_java_formatWithNSString_withNSObjectArray_(stringFormatter, [IOSObjectArray newArrayWithObjects:(id[]){ [nil_chk(value) description] } count:1 type:NSObject_class_()]);
    value = [w quickConvertWithId:value withNSString:attributeConverter];
  }
  [w setAttributeWithNSString:attributeName withId:value withBoolean:true];
}

void ASViewImpl_stateYesWithASIWidget_(id<ASIWidget> w) {
  ASViewImpl_initialize();
  NSString *attributeName = (NSString *) cast_chk([((id<ASIWidget>) nil_chk(w)) getUserDataWithNSString:@"stateYes"], [NSString class]);
  switch (JreIndexOfStr(attributeName, (id[]){ @"show" }, 1)) {
    case 0:
    [w setAttributeWithNSString:@"visibility" withId:@"visible" withBoolean:false];
    break;
    default:
    [w setAttributeWithNSString:attributeName withId:JavaLangBoolean_valueOfWithBoolean_(true) withBoolean:true];
    break;
  }
}

void ASViewImpl_stateNoWithASIWidget_(id<ASIWidget> w) {
  ASViewImpl_initialize();
  NSString *attributeName = (NSString *) cast_chk([((id<ASIWidget>) nil_chk(w)) getUserDataWithNSString:@"stateNo"], [NSString class]);
  switch (JreIndexOfStr(attributeName, (id[]){ @"hide" }, 1)) {
    case 0:
    [w setAttributeWithNSString:@"visibility" withId:@"gone" withBoolean:false];
    break;
    default:
    [w setAttributeWithNSString:attributeName withId:JavaLangBoolean_valueOfWithBoolean_(false) withBoolean:true];
    break;
  }
}

void ASViewImpl_setAnimatorListenerWithASIWidget_withADAnimator_AnimatorListener_(id<ASIWidget> w, id<ADAnimator_AnimatorListener> animatorListener) {
  ASViewImpl_initialize();
  ADAnimator *animator = (ADAnimator *) cast_chk([((id<ASIWidget>) nil_chk(w)) getAnimator], [ADAnimator class]);
  if (animator != nil) {
    [animator addListenerWithADAnimator_AnimatorListener:animatorListener];
  }
}

void ASViewImpl_endAnimatorWithASIWidget_withId_(id<ASIWidget> w, id objValue) {
  ASViewImpl_initialize();
  ADAnimator *animator = (ADAnimator *) cast_chk([((id<ASIWidget>) nil_chk(w)) getAnimator], [ADAnimator class]);
  if (animator != nil) {
    [animator end];
  }
}

void ASViewImpl_startAnimatorWithASIWidget_withId_(id<ASIWidget> w, id objValue) {
  ASViewImpl_initialize();
  ADAnimator *animator = (ADAnimator *) cast_chk([((id<ASIWidget>) nil_chk(w)) getAnimator], [ADAnimator class]);
  if (animator != nil) {
    if ([animator isRunning]) {
      ASViewImpl_endAnimatorWithASIWidget_withId_(w, objValue);
    }
    ADView *view = (ADView *) cast_chk([w asWidget], [ADView class]);
    [((ADView *) nil_chk(view)) postWithJavaLangRunnable:new_ASViewImpl_$Lambda$1_initWithADAnimator_(animator)];
  }
}

void ASViewImpl_setLayoutDirectionWithASIWidget_withId_(id<ASIWidget> w, id objValue) {
  ASViewImpl_initialize();
  ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]);
  int32_t value = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
  if (ASViewImpl_isMirrorSupported() && ASViewImpl_isRTLLayout()) {
    if (value == ADView_LAYOUT_DIRECTION_RTL) {
      value = ADView_LAYOUT_DIRECTION_LTR;
    }
    else {
      value = ADView_LAYOUT_DIRECTION_RTL;
    }
  }
  [((ADView *) nil_chk(view)) setLayoutDirectionWithInt:value];
}

id ASViewImpl_getLayoutDirectionWithASIWidget_(id<ASIWidget> w) {
  ASViewImpl_initialize();
  ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]);
  return JavaLangInteger_valueOfWithInt_([((ADView *) nil_chk(view)) getLayoutDirection]);
}

void ASViewImpl_setTextAlignmentWithASIWidget_withId_(id<ASIWidget> w, id objValue) {
  ASViewImpl_initialize();
  ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]);
  [((ADView *) nil_chk(view)) setTextAlignmentWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
}

void ASViewImpl_setTextDirectionWithASIWidget_withId_(id<ASIWidget> w, id objValue) {
  ASViewImpl_initialize();
  ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]);
  [((ADView *) nil_chk(view)) setTextDirectionWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
}

id ASViewImpl_getTextAlignmentWithASIWidget_(id<ASIWidget> w) {
  ASViewImpl_initialize();
  ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]);
  return JavaLangInteger_valueOfWithInt_([((ADView *) nil_chk(view)) getTextAlignment]);
}

id ASViewImpl_getTextDirectionWithASIWidget_(id<ASIWidget> w) {
  ASViewImpl_initialize();
  ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]);
  return JavaLangInteger_valueOfWithInt_([((ADView *) nil_chk(view)) getTextDirection]);
}

bool ASViewImpl_isRTLLayoutDirectionWithASIWidget_(id<ASIWidget> widget) {
  ASViewImpl_initialize();
  ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(widget)) asWidget], [ADView class]);
  return [((ADView *) nil_chk(view)) isLayoutRtl];
}

void ASViewImpl_drawableStateChangedWithASIWidget_(id<ASIWidget> w) {
  ASViewImpl_initialize();
  [((id<ASIWidget>) nil_chk(w)) storeInTempCacheWithNSString:@"stateChange" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  [w drawableStateChanged];
  ADView *view = (ADView *) cast_chk([w asWidget], [ADView class]);
  ADDrawable *background = [((ADView *) nil_chk(view)) getBackground];
  if (background != nil && [background isStateful] && [background setStateWithIntArray:[view getDrawableState]]) {
    [w setAttributeWithNSString:@"background" withId:background withBoolean:true];
  }
  ADDrawable *foreground = [view getForeground];
  if (foreground != nil && [foreground isStateful] && [foreground setStateWithIntArray:[view getDrawableState]]) {
    [w setAttributeWithNSString:@"foreground" withId:foreground withBoolean:true];
  }
  if ([view getBackgroundTintList] != nil && [((ADColorStateList *) nil_chk([view getBackgroundTintList])) isStateful]) {
    ASViewImpl_setBackgroundTintWithASIWidget_withId_(w, [view getBackgroundTintList]);
    [w invalidate];
  }
  if ([view getForegroundTintList] != nil && [((ADColorStateList *) nil_chk([view getForegroundTintList])) isStateful]) {
    ASViewImpl_setForegroundTintWithASIWidget_withId_(w, [view getForegroundTintList]);
    [w invalidate];
  }
  [w storeInTempCacheWithNSString:@"stateChange" withId:nil];
}

id ASViewImpl_getColorWithId_(id objValue) {
  ASViewImpl_initialize();
  if (ASViewImpl_isColorWithId_(objValue)) {
    return objValue;
  }
  if ([objValue isKindOfClass:[JavaLangInteger class]]) {
    return ASPluginInvoker_getColorWithNSString_(ADColor_formatColorWithInt_([((JavaLangInteger *) nil_chk((JavaLangInteger *) objValue)) intValue]));
  }
  @throw new_JavaLangRuntimeException_initWithNSString_(JreStrcat("$@", @"unknown color :", objValue));
}

void ASViewImpl_setDrawableBoundsWithASIWidget_withInt_withInt_withInt_withInt_(id<ASIWidget> widget, int32_t l, int32_t t, int32_t r, int32_t b) {
  ASViewImpl_initialize();
  [((id<ASIWidget>) nil_chk(widget)) setDrawableBoundsWithInt:l withInt:t withInt:r withInt:b];
  ADView *view = (ADView *) cast_chk([widget asWidget], [ADView class]);
  if ([((ADView *) nil_chk(view)) getBackground] != nil) {
    [((ADDrawable *) nil_chk([view getBackground])) setBoundsWithInt:l withInt:t withInt:r withInt:b];
  }
  if ([view getForeground] != nil) {
    [((ADDrawable *) nil_chk([view getForeground])) setBoundsWithInt:l withInt:t withInt:r withInt:b];
  }
}

void ASViewImpl_redrawDrawablesWithASIWidget_(id<ASIWidget> w) {
  ASViewImpl_initialize();
  ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]);
  ADDrawable *background = [((ADView *) nil_chk(view)) getBackground];
  if (background != nil && [background isRedraw]) {
    ASViewImpl_setBackgroundWithASIWidget_withId_withId_(w, [w asNativeWidget], background);
    [background setRedrawWithBoolean:false];
  }
  ADDrawable *foreground = [view getForeground];
  if (foreground != nil && [foreground isRedraw]) {
    ASViewImpl_setForegroundWithASIWidget_withId_withId_(w, [w asNativeWidget], background);
    [foreground setRedrawWithBoolean:false];
  }
}

void ASViewImpl_setMinHeightWithASIWidget_withId_(id<ASIWidget> w, id objValue) {
  ASViewImpl_initialize();
  [((ADView *) nil_chk(((ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class])))) setMinimumHeightWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
}

void ASViewImpl_setMinWidthWithASIWidget_withId_(id<ASIWidget> w, id objValue) {
  ASViewImpl_initialize();
  [((ADView *) nil_chk(((ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class])))) setMinimumWidthWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
}

id ASViewImpl_getMinHeightWithASIWidget_(id<ASIWidget> w) {
  ASViewImpl_initialize();
  ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]);
  return JavaLangInteger_valueOfWithInt_([((ADView *) nil_chk(view)) getMinimumHeight]);
}

id ASViewImpl_getMinWidthWithASIWidget_(id<ASIWidget> w) {
  ASViewImpl_initialize();
  ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]);
  return JavaLangInteger_valueOfWithInt_([((ADView *) nil_chk(view)) getMinimumWidth]);
}

id ASViewImpl_getVisibilityWithASIWidget_(id<ASIWidget> w) {
  ASViewImpl_initialize();
  ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]);
  return JavaLangInteger_valueOfWithInt_([((ADView *) nil_chk(view)) getVisibility]);
}

void ASViewImpl_setLongClickableWithASIWidget_withId_(id<ASIWidget> w, id objValue) {
  ASViewImpl_initialize();
  ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]);
  [((ADView *) nil_chk(view)) setLongClickableWithBoolean:[((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]))) booleanValue]];
}

id ASViewImpl_getLongClickableWithASIWidget_(id<ASIWidget> w) {
  ASViewImpl_initialize();
  ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]);
  return JavaLangBoolean_valueOfWithBoolean_([((ADView *) nil_chk(view)) isLongClickable]);
}

void ASViewImpl_setDuplicateParentStateWithASIWidget_withId_(id<ASIWidget> w, id objValue) {
  ASViewImpl_initialize();
  ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]);
  [((ADView *) nil_chk(view)) setDuplicateParentStateEnabledWithBoolean:[((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]))) booleanValue]];
}

id ASViewImpl_getDuplicateParentStateWithASIWidget_(id<ASIWidget> w) {
  ASViewImpl_initialize();
  ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]);
  return JavaLangBoolean_valueOfWithBoolean_([((ADView *) nil_chk(view)) isDuplicateParentStateEnabled]);
}

id ASViewImpl_getClickableWithASIWidget_(id<ASIWidget> w) {
  ASViewImpl_initialize();
  ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]);
  return JavaLangBoolean_valueOfWithBoolean_([((ADView *) nil_chk(view)) isClickable]);
}

void ASViewImpl_requestLayoutWithASIWidget_(id<ASIWidget> w) {
  ASViewImpl_initialize();
  if ([((id<ASIWidget>) nil_chk(w)) isInitialised]) {
    [w requestLayout];
  }
}

void ASViewImpl_invalidateWithASIWidget_(id<ASIWidget> w) {
  ASViewImpl_initialize();
  if ([((id<ASIWidget>) nil_chk(w)) isInitialised]) {
    [w invalidate];
  }
}

id ASViewImpl_getClipDataWithADView_DragEvent_(ADView_DragEvent *event) {
  ASViewImpl_initialize();
  return [((ADView_DragEvent *) nil_chk(event)) getClipData];
}

ADDrawable *ASViewImpl_getDrawableWithADColorStateList_(ADColorStateList *colorStateList) {
  ASViewImpl_initialize();
  IOSObjectArray *states = [((ADColorStateList *) nil_chk(colorStateList)) getStates];
  IOSIntArray *colors = [colorStateList getColors];
  ADStateListDrawable *stateListDrawable = new_ADStateListDrawable_init();
  for (int32_t i = 0; i < ((IOSObjectArray *) nil_chk(states))->size_; i++) {
    IOSIntArray *state = IOSObjectArray_Get(states, i);
    ADDrawable *drawable = new_ADColorDrawable_init();
    [drawable setDrawableWithId:ASViewImpl_getColorWithId_(JavaLangInteger_valueOfWithInt_(IOSIntArray_Get(nil_chk(colors), i)))];
    [stateListDrawable addStateWithIntArray:state withADDrawable:drawable];
  }
  return stateListDrawable;
}

void ASViewImpl_setElevationWithASIWidget_withId_(id<ASIWidget> w, id objValue) {
  ASViewImpl_initialize();
  ASViewImpl_setZIndexWithASIWidget_withId_(w, JavaLangInteger_valueOfWithInt_([((JavaLangFloat *) nil_chk(((JavaLangFloat *) cast_chk(objValue, [JavaLangFloat class])))) intValue]));
}

NSString *ASViewImpl_getValueWithNSString_withOrgXmlSaxAttributes_(NSString *key, id<OrgXmlSaxAttributes> attributes) {
  ASViewImpl_initialize();
  NSString *os = [((NSString *) nil_chk(ASPluginInvoker_getOS())) lowercaseString];
  if ([((id<OrgXmlSaxAttributes>) nil_chk(attributes)) getValueWithNSString:JreStrcat("$C$", key, '-', os)] != nil) {
    return [attributes getValueWithNSString:JreStrcat("$C$", key, '-', os)];
  }
  return [attributes getValueWithNSString:key];
}

void ASViewImpl_setBottomWithASIWidget_withId_(id<ASIWidget> w, id objValue) {
  ASViewImpl_initialize();
  id uiView = [((id<ASIWidget>) nil_chk(w)) asNativeWidget];
  ADView *view = (ADView *) cast_chk([w asWidget], [ADView class]);
  int32_t value = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
  [((ADView *) nil_chk(view)) setBottomWithInt:value];
  int32_t top = value - [view getMeasuredHeight];
  int32_t x = ASViewImpl_getXWithId_(uiView);
  ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_(uiView, x, top, x + [view getMeasuredWidth], value);
}

void ASViewImpl_setTopWithASIWidget_withId_(id<ASIWidget> w, id objValue) {
  ASViewImpl_initialize();
  id uiView = [((id<ASIWidget>) nil_chk(w)) asNativeWidget];
  ADView *view = (ADView *) cast_chk([w asWidget], [ADView class]);
  int32_t value = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
  [((ADView *) nil_chk(view)) setTopWithInt:value];
  int32_t x = ASViewImpl_getXWithId_(uiView);
  ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_(uiView, x, value, x + [view getMeasuredWidth], value + [view getMeasuredHeight]);
}

void ASViewImpl_setRightWithASIWidget_withId_(id<ASIWidget> w, id objValue) {
  ASViewImpl_initialize();
  id uiView = [((id<ASIWidget>) nil_chk(w)) asNativeWidget];
  ADView *view = (ADView *) cast_chk([w asWidget], [ADView class]);
  int32_t value = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
  [((ADView *) nil_chk(view)) setRightWithInt:value];
  int32_t y = ASViewImpl_getYWithId_(uiView);
  ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_(uiView, value - [view getMeasuredWidth], y, value, y + [view getMeasuredHeight]);
}

void ASViewImpl_setLeftWithASIWidget_withId_(id<ASIWidget> w, id objValue) {
  ASViewImpl_initialize();
  id uiView = [((id<ASIWidget>) nil_chk(w)) asNativeWidget];
  ADView *view = (ADView *) cast_chk([w asWidget], [ADView class]);
  int32_t value = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
  [((ADView *) nil_chk(view)) setLeftWithInt:value];
  int32_t y = ASViewImpl_getYWithId_(uiView);
  ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_(uiView, value, y, value + [view getMeasuredWidth], y + [view getMeasuredHeight]);
}

id ASViewImpl_getBottomWithASIWidget_(id<ASIWidget> w) {
  ASViewImpl_initialize();
  ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]);
  return JavaLangInteger_valueOfWithInt_([((ADView *) nil_chk(view)) getBottom]);
}

id ASViewImpl_getTopWithASIWidget_(id<ASIWidget> w) {
  ASViewImpl_initialize();
  ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]);
  return JavaLangInteger_valueOfWithInt_([((ADView *) nil_chk(view)) getTop]);
}

id ASViewImpl_getRightWithASIWidget_(id<ASIWidget> w) {
  ASViewImpl_initialize();
  ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]);
  return JavaLangInteger_valueOfWithInt_([((ADView *) nil_chk(view)) getRight]);
}

id ASViewImpl_getLeftWithASIWidget_(id<ASIWidget> w) {
  ASViewImpl_initialize();
  ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]);
  return JavaLangInteger_valueOfWithInt_([((ADView *) nil_chk(view)) getLeft]);
}

id<JavaUtilList> ASViewImpl_drawOverlayWithASIWidget_withJavaUtilList_(id<ASIWidget> overlayWrapper, id<JavaUtilList> overlays) {
  ASViewImpl_initialize();
  ADViewOverlay *overlay = [((ADView *) nil_chk(((ADView *) cast_chk([((id<ASIWidget>) nil_chk(overlayWrapper)) asWidget], [ADView class])))) getOverlay];
  id<JavaUtilList> drawables = [((ADViewOverlay *) nil_chk(overlay)) getDrawables];
  if (drawables != nil) {
    [overlayWrapper setAttributeWithNSString:@"swtRedraw" withId:JavaLangBoolean_valueOfWithBoolean_(false) withBoolean:true];
    if (overlays == nil) {
      overlays = new_JavaUtilArrayList_init();
    }
    else {
      for (int32_t i = [overlays size] - 1; i >= 0; i--) {
        [((id<ASHasWidgets>) nil_chk([overlayWrapper getParent])) removeWithASIWidget:[overlays getWithInt:i]];
      }
      [overlays clear];
    }
    id<JavaUtilMap> attrs = new_JavaUtilHashMap_init();
    for (ADDrawable * __strong drawable in drawables) {
      if ([((ADDrawable *) nil_chk(drawable)) getSimulatedWidgetLocalName] != nil && [drawable getSimulatedWidgetGroupName] != nil) {
        id<ASIWidget> w = ASWidgetFactory_createWidgetWithNSString_withNSString_withASHasWidgets_withBoolean_([drawable getSimulatedWidgetLocalName], [drawable getSimulatedWidgetGroupName], [overlayWrapper getParent], false);
        IOSObjectArray *simulatedWidgetAttrs = [drawable getSimulatedWidgetAttrs];
        if (simulatedWidgetAttrs != nil) {
          for (int32_t i = 0; i < simulatedWidgetAttrs->size_; i++) {
            NSString *attrName = IOSObjectArray_Get(simulatedWidgetAttrs, i);
            id value = [drawable getAttributeWithNSString:attrName];
            [((id<ASIWidget>) nil_chk(w)) setAttributeWithNSString:attrName withId:value withBoolean:!([value isKindOfClass:[NSString class]])];
          }
        }
        [drawable setMeasureTextHelperWithADDrawable_MeasureTextHelper:new_ASViewImpl_2_initWithASIWidget_(w)];
        ADRect *bounds = [drawable getBounds];
        ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]);
        [((ADView *) nil_chk(view)) setLeftWithInt:((ADRect *) nil_chk(bounds))->left_];
        [view setRightWithInt:bounds->right_];
        [view setTopWithInt:bounds->top_];
        [view setBottomWithInt:bounds->bottom_];
        [view measureWithInt:0 withInt:0];
        [view relayout];
        [view setOverlayWithBoolean:true];
        [overlays addWithId:w];
      }
      IOSObjectArray *viewAttrs = [drawable getViewAttrs];
      if (viewAttrs != nil) {
        for (int32_t i = 0; i < viewAttrs->size_; i++) {
          NSString *attrName = IOSObjectArray_Get(viewAttrs, i);
          (void) [drawable getBounds];
          id value = [drawable getAttributeWithNSString:attrName];
          if ([JavaUtilList_class_() isInstance:value]) {
            id<JavaUtilList> values = [attrs getWithId:attrName];
            if (values == nil) {
              (void) [attrs putWithId:attrName withId:new_JavaUtilArrayList_init()];
            }
            [((id<JavaUtilList>) nil_chk([attrs getWithId:attrName])) addAllWithJavaUtilCollection:(id<JavaUtilList>) cast_check(value, JavaUtilList_class_())];
          }
          else {
            [overlayWrapper setAttributeWithNSString:attrName withId:value withBoolean:!([value isKindOfClass:[NSString class]])];
          }
        }
      }
      for (NSString * __strong key in nil_chk([attrs keySet])) {
        [overlayWrapper setAttributeWithNSString:key withId:[attrs getWithId:key] withBoolean:true];
      }
    }
    [overlayWrapper setAttributeWithNSString:@"swtRedraw" withId:JavaLangBoolean_valueOfWithBoolean_(true) withBoolean:true];
  }
  return overlays;
}

void ASViewImpl_setAnimatorXmlWithASIWidget_withId_(id<ASIWidget> w, id objValue) {
  ASViewImpl_initialize();
  NSString *value = (NSString *) cast_chk(objValue, [NSString class]);
  if ([((NSString *) nil_chk(value)) java_hasPrefix:@"@animator/"]) {
    NSString *html = [((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w)) getFragment])) getInlineResourceWithNSString:value];
    if (html == nil) {
      html = ASPluginInvoker_getFileAssetWithNSString_withASIFragment_(JreStrcat("$$", [(value) java_replace:@"@" withSequence:@""], @".xml"), [w getFragment]);
    }
    ASViewImpl_AnimationContentHandler *handler = new_ASViewImpl_AnimationContentHandler_initWithASIWidget_(w);
    ASHtmlParser_parseWithOrgXmlSaxContentHandler_withNSString_(handler, html);
    ADAnimator *animator = [handler getAnimatorSet];
    [((ADAnimator *) nil_chk(animator)) setTargetWithId:(ADView *) cast_chk([w asWidget], [ADView class])];
    [((id<ASIFragment>) nil_chk([w getFragment])) addDisposableWithId:animator];
    [w setAnimatorWithId:animator];
  }
}

id<ADInterpolator> ASViewImpl_getInterpolatorWithASIWidget_withId_(id<ASIWidget> w, id objValue) {
  ASViewImpl_initialize();
  NSString *value = (NSString *) cast_chk(objValue, [NSString class]);
  NSString *html = [((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w)) getFragment])) getInlineResourceWithNSString:value];
  if (html == nil) {
    html = ASPluginInvoker_getFileAssetWithNSString_withASIFragment_(JreStrcat("$$", [((NSString *) nil_chk((value))) java_replace:@"@" withSequence:@""], @".xml"), [w getFragment]);
  }
  ASViewImpl_AnimationContentHandler *handler = new_ASViewImpl_AnimationContentHandler_initWithASIWidget_(w);
  ASHtmlParser_parseWithOrgXmlSaxContentHandler_withNSString_(handler, html);
  return handler->timeInterpolator_;
}

void ASViewImpl_addEventInfoWithJavaUtilMap_withADMenuItem_(id<JavaUtilMap> obj, id<ADMenuItem> item) {
  ASViewImpl_initialize();
  (void) [((id<JavaUtilMap>) nil_chk(obj)) putWithId:@"itemId" withId:ASIdGenerator_getNameWithInt_([((id<ADMenuItem>) nil_chk(item)) getItemId])];
  if ([item getActionView] != nil && [((ADView *) nil_chk([item getActionView])) getTag] != nil) {
    (void) [obj putWithId:@"actionLayoutId" withId:[((ADView *) nil_chk([item getActionView])) getTag]];
  }
}

void ASViewImpl_setBackgroundColorWithId_withId_(id nativeWidget, id value) {
  ASViewImpl_initialize();
  ((UIView*) nativeWidget).backgroundColor = (UIColor*) value;
}

id ASViewImpl_getBackgroundColorWithId_(id uiView) {
  ASViewImpl_initialize();
  return ((UIView*) uiView).backgroundColor;
}

void ASViewImpl_setIsHiddenWithId_withId_(id nativeWidget, id value) {
  ASViewImpl_initialize();
  ((UIView*) nativeWidget).hidden = [(JavaLangBoolean*) value booleanValue];
}

id ASViewImpl_getIsHiddenWithId_(id uiView) {
  ASViewImpl_initialize();
  return [JavaLangBoolean valueOfWithBoolean :((UIView*) uiView).hidden];
}

void ASViewImpl_setAlphaWithId_withId_(id nativeWidget, id value) {
  ASViewImpl_initialize();
  ((UIView*) nativeWidget).alpha = [(JavaLangFloat*) value floatValue];
}

id ASViewImpl_getAlphaWithId_(id uiView) {
  ASViewImpl_initialize();
  return [JavaLangFloat valueOfWithFloat :((UIView*) uiView).alpha];
}

void ASViewImpl_setIsOpaqueWithId_withId_(id nativeWidget, id value) {
  ASViewImpl_initialize();
  ((UIView*) nativeWidget).opaque = [(JavaLangBoolean*) value booleanValue];
}

id ASViewImpl_getIsOpaqueWithId_(id uiView) {
  ASViewImpl_initialize();
  return [JavaLangBoolean valueOfWithBoolean :((UIView*) uiView).opaque];
}

void ASViewImpl_setTintColorWithId_withId_(id nativeWidget, id value) {
  ASViewImpl_initialize();
  ((UIView*) nativeWidget).tintColor = (UIColor*) value;
}

id ASViewImpl_getTintColorWithId_(id uiView) {
  ASViewImpl_initialize();
  return ((UIView*) uiView).tintColor;
}

void ASViewImpl_setClipsToBoundsWithId_withId_(id nativeWidget, id value) {
  ASViewImpl_initialize();
  ((UIView*) nativeWidget).clipsToBounds = [(JavaLangBoolean*) value booleanValue];
}

id ASViewImpl_getClipsToBoundsWithId_(id uiView) {
  ASViewImpl_initialize();
  return [JavaLangBoolean valueOfWithBoolean :((UIView*) uiView).clipsToBounds];
}

void ASViewImpl_setClearsContextBeforeDrawingWithId_withId_(id nativeWidget, id value) {
  ASViewImpl_initialize();
  ((UIView*) nativeWidget).clearsContextBeforeDrawing = [(JavaLangBoolean*) value booleanValue];
}

id ASViewImpl_getClearsContextBeforeDrawingWithId_(id uiView) {
  ASViewImpl_initialize();
  return [JavaLangBoolean valueOfWithBoolean :((UIView*) uiView).clearsContextBeforeDrawing];
}

void ASViewImpl_setIsUserInteractionEnabledWithId_withId_(id nativeWidget, id value) {
  ASViewImpl_initialize();
  ((UIView*) nativeWidget).userInteractionEnabled = [(JavaLangBoolean*) value booleanValue];
}

id ASViewImpl_getIsUserInteractionEnabledWithId_(id uiView) {
  ASViewImpl_initialize();
  return [JavaLangBoolean valueOfWithBoolean :((UIView*) uiView).userInteractionEnabled];
}

void ASViewImpl_setIsMultipleTouchEnabledWithId_withId_(id nativeWidget, id value) {
  ASViewImpl_initialize();
  ((UIView*) nativeWidget).multipleTouchEnabled = [(JavaLangBoolean*) value booleanValue];
}

id ASViewImpl_getIsMultipleTouchEnabledWithId_(id uiView) {
  ASViewImpl_initialize();
  return [JavaLangBoolean valueOfWithBoolean :((UIView*) uiView).multipleTouchEnabled];
}

void ASViewImpl_setIsExclusiveTouchWithId_withId_(id nativeWidget, id value) {
  ASViewImpl_initialize();
  ((UIView*) nativeWidget).exclusiveTouch = [(JavaLangBoolean*) value booleanValue];
}

id ASViewImpl_getIsExclusiveTouchWithId_(id uiView) {
  ASViewImpl_initialize();
  return [JavaLangBoolean valueOfWithBoolean :((UIView*) uiView).exclusiveTouch];
}

void ASViewImpl_setPreservesSuperviewLayoutMarginsWithId_withId_(id nativeWidget, id value) {
  ASViewImpl_initialize();
  ((UIView*) nativeWidget).preservesSuperviewLayoutMargins = [(JavaLangBoolean*) value booleanValue];
}

id ASViewImpl_getPreservesSuperviewLayoutMarginsWithId_(id uiView) {
  ASViewImpl_initialize();
  return [JavaLangBoolean valueOfWithBoolean :((UIView*) uiView).preservesSuperviewLayoutMargins];
}

void ASViewImpl_setInsetsLayoutMarginsFromSafeAreaWithId_withId_(id nativeWidget, id value) {
  ASViewImpl_initialize();
  ((UIView*) nativeWidget).insetsLayoutMarginsFromSafeArea = [(JavaLangBoolean*) value booleanValue];
}

id ASViewImpl_getInsetsLayoutMarginsFromSafeAreaWithId_(id uiView) {
  ASViewImpl_initialize();
  return [JavaLangBoolean valueOfWithBoolean :((UIView*) uiView).insetsLayoutMarginsFromSafeArea];
}

void ASViewImpl_setAutoresizesSubviewsWithId_withId_(id nativeWidget, id value) {
  ASViewImpl_initialize();
  ((UIView*) nativeWidget).autoresizesSubviews = [(JavaLangBoolean*) value booleanValue];
}

id ASViewImpl_getAutoresizesSubviewsWithId_(id uiView) {
  ASViewImpl_initialize();
  return [JavaLangBoolean valueOfWithBoolean :((UIView*) uiView).autoresizesSubviews];
}

void ASViewImpl_setTranslatesAutoresizingMaskIntoConstraintsWithId_withId_(id nativeWidget, id value) {
  ASViewImpl_initialize();
  ((UIView*) nativeWidget).translatesAutoresizingMaskIntoConstraints = [(JavaLangBoolean*) value booleanValue];
}

id ASViewImpl_getTranslatesAutoresizingMaskIntoConstraintsWithId_(id uiView) {
  ASViewImpl_initialize();
  return [JavaLangBoolean valueOfWithBoolean :((UIView*) uiView).translatesAutoresizingMaskIntoConstraints];
}

void ASViewImpl_setContentScaleFactorWithId_withId_(id nativeWidget, id value) {
  ASViewImpl_initialize();
  ((UIView*) nativeWidget).contentScaleFactor = [(JavaLangFloat*) value floatValue];
}

id ASViewImpl_getContentScaleFactorWithId_(id uiView) {
  ASViewImpl_initialize();
  return [JavaLangFloat valueOfWithFloat :((UIView*) uiView).contentScaleFactor];
}

id ASViewImpl_getIsFocusedWithId_(id uiView) {
  ASViewImpl_initialize();
  return [JavaLangBoolean valueOfWithBoolean :((UIView*) uiView).focused];
}

void ASViewImpl_setRestorationIdentifierWithId_withId_(id nativeWidget, id value) {
  ASViewImpl_initialize();
  ((UIView*) nativeWidget).restorationIdentifier = (NSString*) value;
}

id ASViewImpl_getRestorationIdentifierWithId_(id uiView) {
  ASViewImpl_initialize();
  return ((UIView*) uiView).restorationIdentifier;
}

void ASViewImpl_setTagWithId_withId_(id nativeWidget, id value) {
  ASViewImpl_initialize();
  ((UIView*) nativeWidget).tag = [(JavaLangInteger*) value intValue];
}

id ASViewImpl_getTagWithId_(id uiView) {
  ASViewImpl_initialize();
  return [JavaLangInteger valueOfWithInt :((UIView*) uiView).tag];
}

void ASViewImpl_setAccessibilityIgnoresInvertColorsWithId_withId_(id nativeWidget, id value) {
  ASViewImpl_initialize();
  ((UIView*) nativeWidget).accessibilityIgnoresInvertColors = [(JavaLangBoolean*) value booleanValue];
}

id ASViewImpl_getAccessibilityIgnoresInvertColorsWithId_(id uiView) {
  ASViewImpl_initialize();
  return [JavaLangBoolean valueOfWithBoolean :((UIView*) uiView).accessibilityIgnoresInvertColors];
}

void ASViewImpl_setLargeContentImageWithId_withId_(id nativeWidget, id value) {
  ASViewImpl_initialize();
  ((UIView*) nativeWidget).largeContentImage = (UIImage*) value;
}

id ASViewImpl_getLargeContentImageWithId_(id uiView) {
  ASViewImpl_initialize();
  return ((UIView*) uiView).largeContentImage;
}

void ASViewImpl_setLargeContentTitleWithId_withId_(id nativeWidget, id value) {
  ASViewImpl_initialize();
  ((UIView*) nativeWidget).largeContentTitle = (NSString*) value;
}

id ASViewImpl_getLargeContentTitleWithId_(id uiView) {
  ASViewImpl_initialize();
  return ((UIView*) uiView).largeContentTitle;
}

void ASViewImpl_setScalesLargeContentImageWithId_withId_(id nativeWidget, id value) {
  ASViewImpl_initialize();
  ((UIView*) nativeWidget).scalesLargeContentImage = [(JavaLangBoolean*) value booleanValue];
}

id ASViewImpl_getScalesLargeContentImageWithId_(id uiView) {
  ASViewImpl_initialize();
  return [JavaLangBoolean valueOfWithBoolean :((UIView*) uiView).scalesLargeContentImage];
}

void ASViewImpl_setShowsLargeContentViewerWithId_withId_(id nativeWidget, id value) {
  ASViewImpl_initialize();
  ((UIView*) nativeWidget).showsLargeContentViewer = [(JavaLangBoolean*) value booleanValue];
}

id ASViewImpl_getShowsLargeContentViewerWithId_(id uiView) {
  ASViewImpl_initialize();
  return [JavaLangBoolean valueOfWithBoolean :((UIView*) uiView).showsLargeContentViewer];
}

void ASViewImpl_setIsAccessibilityElementWithId_withId_(id nativeWidget, id value) {
  ASViewImpl_initialize();
  ((UIView*) nativeWidget).isAccessibilityElement = [(JavaLangBoolean*) value booleanValue];
}

id ASViewImpl_getIsAccessibilityElementWithId_(id uiView) {
  ASViewImpl_initialize();
  return [JavaLangBoolean valueOfWithBoolean :((UIView*) uiView).isAccessibilityElement];
}

void ASViewImpl_setAccessibilityLabelWithId_withId_(id nativeWidget, id value) {
  ASViewImpl_initialize();
  ((UIView*) nativeWidget).accessibilityLabel = (NSString*) value;
}

id ASViewImpl_getAccessibilityLabelWithId_(id uiView) {
  ASViewImpl_initialize();
  return ((UIView*) uiView).accessibilityLabel;
}

void ASViewImpl_setAccessibilityHintWithId_withId_(id nativeWidget, id value) {
  ASViewImpl_initialize();
  ((UIView*) nativeWidget).accessibilityHint = (NSString*) value;
}

id ASViewImpl_getAccessibilityHintWithId_(id uiView) {
  ASViewImpl_initialize();
  return ((UIView*) uiView).accessibilityHint;
}

void ASViewImpl_setAccessibilityValueWithId_withId_(id nativeWidget, id value) {
  ASViewImpl_initialize();
  ((UIView*) nativeWidget).accessibilityValue = (NSString*) value;
}

id ASViewImpl_getAccessibilityValueWithId_(id uiView) {
  ASViewImpl_initialize();
  return ((UIView*) uiView).accessibilityValue;
}

void ASViewImpl_setAccessibilityTraitsWithId_withId_(id nativeWidget, id value) {
  ASViewImpl_initialize();
  ((UIView*) nativeWidget).accessibilityTraits = [(JavaLangInteger*) value intValue];
}

id ASViewImpl_getAccessibilityTraitsWithId_(id uiView) {
  ASViewImpl_initialize();
  return [JavaLangInteger valueOfWithInt :((UIView*) uiView).accessibilityTraits];
}

void ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_withInt_(id uiView, int32_t l, int32_t t, int32_t r, int32_t b, int32_t height) {
  ASViewImpl_initialize();
  [((UIView*) uiView) setFrame:CGRectMake(l, t, r-l, b-t)];
  ((UIScrollView*) uiView).contentSize = CGSizeMake(r-l, height);
}

void ASViewImpl_updateBoundsWithId_withInt_withInt_withInt_withInt_(id objview, int32_t x, int32_t y, int32_t width, int32_t height) {
  ASViewImpl_initialize();
  UIView* uiview = ((UIView*) objview);
  uiview.frame = CGRectMake(x, y, width, height);
}

id ASViewImpl_getFirstChildOrSelfWithId_(id objview) {
  ASViewImpl_initialize();
  UIView* uiview = ((UIView*) objview);
  return uiview.subviews.count > 0 ? uiview.subviews[0] : uiview;
}

void ASViewImpl_nativeMakeFrameForHorizontalScrollViewWithId_withInt_withInt_withInt_withInt_withInt_(id uiView, int32_t l, int32_t t, int32_t r, int32_t b, int32_t width) {
  ASViewImpl_initialize();
  [((UIView*) uiView) setFrame:CGRectMake(l, t, r-l, b-t)];
  ((UIScrollView*) uiView).contentSize = CGSizeMake(width, b-t);
}

void ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_(id uiView, int32_t l, int32_t t, int32_t r, int32_t b) {
  ASViewImpl_initialize();
  if ([uiView isKindOfClass:[UIViewController class]]) {
    [((UIViewController*) uiView).view setFrame:CGRectMake(l, t, r-l, b-t)];
  } else {
    [((UIView*) uiView) setFrame:CGRectMake(l, t, r-l, b-t)];
  }
}

bool ASViewImpl_isRTLLayoutWithASIWidget_(id<ASIWidget> widget) {
  ASViewImpl_initialize();
  return ASViewImpl_isRTLLayout();
}

bool ASViewImpl_isRTLLayout() {
  ASViewImpl_initialize();
  return [UIApplication sharedApplication].userInterfaceLayoutDirection == UIUserInterfaceLayoutDirectionRightToLeft;
}

void ASViewImpl_setBgOnControlWithASIWidget_withId_withId_(id<ASIWidget> w, id uiview, id objValue) {
  ASViewImpl_initialize();
  if ([objValue isKindOfClass:[ADColorStateList class]]) {
    objValue = JavaLangInteger_valueOfWithInt_([((ADColorStateList *) nil_chk(((ADColorStateList *) objValue))) getColorForStateWithIntArray:[((ADView *) nil_chk(((ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class])))) getDrawableState] withInt:ADColor_TRANSPARENT]);
  }
  if (ASViewImpl_isColorWithId_(objValue) || [objValue isKindOfClass:[JavaLangInteger class]]) {
    if ([objValue isKindOfClass:[JavaLangInteger class]]) {
      objValue = ASViewImpl_getColorWithId_(objValue);
    }
    ASViewImpl_nativeSetBgColorWithId_withId_(uiview, objValue);
  }
  else {
    ASViewImpl_clearBgColorWithId_withId_(uiview, objValue);
  }
  if (ASViewImpl_isImageWithId_(objValue)) {
    [((id<ASIWidget>) nil_chk(w)) applyAttributeCommandWithNSString:@"background" withNSString:@"drawImage" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){  } count:0 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithLength:0 type:NSObject_class_()]];
  }
  else {
    [((id<ASIWidget>) nil_chk(w)) applyAttributeCommandWithNSString:@"background" withNSString:@"drawImage" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){  } count:0 type:NSString_class_()] withBoolean:false withNSObjectArray:[IOSObjectArray newArrayWithLength:0 type:NSObject_class_()]];
  }
  if ([w isInitialised]) {
    [w invalidate];
  }
}

void ASViewImpl_setBackgroundWithASIWidget_withId_withId_(id<ASIWidget> w, id nativeView, id objValue) {
  ASViewImpl_initialize();
  if ([objValue isKindOfClass:[ADDrawable class]]) {
    ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]);
    ADDrawable *drawable = (ADDrawable *) objValue;
    [((ADView *) nil_chk(view)) setBackgroundWithADDrawable:drawable];
    objValue = [((ADDrawable *) nil_chk(drawable)) getDrawable];
  }
  if (ASViewImpl_isResizableImageWithId_(objValue)) {
    ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]);
    ADDrawable *drawable = [((ADView *) nil_chk(view)) getBackground];
    if (drawable == nil) {
      drawable = new_ADDrawable_init();
    }
    [drawable setMinimumWidthWithInt:ASViewImpl_getImageWidthWithId_(objValue)];
    [drawable setMinimumHeightWithInt:ASViewImpl_getImageHeightWithId_(objValue)];
    [view setBackgroundWithADDrawable:drawable];
  }
  ASViewImpl_setBgOnControlWithASIWidget_withId_withId_(w, nativeView, objValue);
}

void ASViewImpl_updateWidthAndHeightWithASIWidget_withADStateListDrawable_withId_withNSString_withNSString_(id<ASIWidget> w, ADStateListDrawable *background, id value, NSString *type, NSString *conveterType) {
  ASViewImpl_initialize();
  if (ASViewImpl_isImageWithId_(value)) {
    [((ADStateListDrawable *) nil_chk(background)) setMinimumWidthWithInt:ASViewImpl_getImageWidthWithId_(value)];
    [background setMinimumHeightWithInt:ASViewImpl_getImageHeightWithId_(value)];
    [((id<ASIWidget>) nil_chk(w)) applyAttributeCommandWithNSString:type withNSString:conveterType withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){  } count:0 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithLength:0 type:NSObject_class_()]];
  }
}

void ASViewImpl_setBgDrawabeOnViewWithInt_withInt_withADView_(int32_t width, int32_t height, ADView *view) {
  ASViewImpl_initialize();
  ADDrawable *background = [((ADView *) nil_chk(view)) getBackground];
  if (background == nil) {
    background = new_ADDrawable_init();
  }
  [background setMinimumWidthWithInt:width];
  [background setMinimumHeightWithInt:height];
  [view setBackgroundWithADDrawable:background];
}

bool ASViewImpl_isColorWithId_(id value) {
  ASViewImpl_initialize();
  return[value isKindOfClass:[UIColor class]];
}

bool ASViewImpl_isResizableImageWithId_(id obj) {
  ASViewImpl_initialize();
  return (obj != nil && [((NSString *) nil_chk([[obj java_getClass] getName])) isEqual:@"_UIResizableImage"]);
}

bool ASViewImpl_isImageWithId_(id value) {
  ASViewImpl_initialize();
  return[value isKindOfClass:[UIImage class]];
}

int32_t ASViewImpl_getImageWidthWithId_(id value) {
  ASViewImpl_initialize();
  UIImage* image = ((UIImage*) value);
  return image.size.width;
}

int32_t ASViewImpl_getImageHeightWithId_(id value) {
  ASViewImpl_initialize();
  UIImage* image = ((UIImage*) value);
  return image.size.height;
}

void ASViewImpl_clearBgColorWithId_withId_(id view, id value) {
  ASViewImpl_initialize();
  ((UIView *) view).backgroundColor = [UIColor clearColor];
}

void ASViewImpl_nativeSetBgColorWithId_withId_(id view, id value) {
  ASViewImpl_initialize();
  ((UIView *) view).backgroundColor = value;
}

void ASViewImpl_setOnClickWithASIWidget_withId_withId_(id<ASIWidget> w, id nativeView, id objValue) {
  ASViewImpl_initialize();
  id<ADView_OnClickListener> onClickListener;
  if ([objValue isKindOfClass:[NSString class]]) {
    onClickListener = new_ASViewImpl_OnClickListener_initWithASIWidget_withNSString_(w, (NSString *) objValue);
  }
  else {
    onClickListener = (id<ADView_OnClickListener>) cast_check(objValue, ADView_OnClickListener_class_());
  }
  if (onClickListener != nil) {
    ASViewImpl_setOnClickWithASIWidget_withNSString_withId_withADView_OnClickListener_(w, @"default", nativeView, onClickListener);
  }
}

void ASViewImpl_setOnClickWithASIWidget_withNSString_withId_withADView_OnClickListener_(id<ASIWidget> w, NSString *id_, id nativeView, id<ADView_OnClickListener> onClickListener) {
  ASViewImpl_initialize();
  ASViewImpl_UITapGestureRecognizerDelegate *delegate = new_ASViewImpl_UITapGestureRecognizerDelegate_initWithASIWidget_withADView_OnClickListener_(w, onClickListener);
  [delegate nativeAddClickListenerWithNSString:id_ withId:nativeView];
}

void ASViewImpl_registerCommandConveterWithASIWidget_(id<ASIWidget> widget) {
  ASViewImpl_initialize();
  [((id<ASIWidget>) nil_chk(widget)) registerForAttributeCommandChainWithPhaseWithNSString:@"predraw" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"background" } count:1 type:NSString_class_()]];
  [widget registerForAttributeCommandChainWithPhaseWithNSString:@"postdraw" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"foreground" } count:1 type:NSString_class_()]];
  IOSObjectArray *tranformAttrs = [IOSObjectArray newArrayWithObjects:(id[]){ @"translationX", @"translationY", @"translationZ", @"scaleX", @"scaleY", @"rotation", @"rotationX", @"rotationY", @"transformPivotX", @"transformPivotY" } count:10 type:NSString_class_()];
  [widget registerForAttributeCommandChainWithPhaseWithNSString:@"preframe" withNSStringArray:tranformAttrs];
  [widget registerForAttributeCommandChainWithPhaseWithNSString:@"postframe" withNSStringArray:tranformAttrs];
}

bool ASViewImpl_isNativeRtlSupported() {
  ASViewImpl_initialize();
  return false;
}

id ASViewImpl_getParentWithASIWidget_(id<ASIWidget> widget) {
  ASViewImpl_initialize();
  id parent = [((id<ASHasWidgets>) nil_chk([((id<ASHasWidgets>) nil_chk([((id<ASIWidget>) nil_chk(widget)) getParent])) getCompositeLeafWithASIWidget:widget])) asNativeWidget];
  return parent;
}

void ASViewImpl_setBackgroundTintModeWithASIWidget_withId_(id<ASIWidget> w, id objValue) {
  ASViewImpl_initialize();
  [((id<ASIWidget>) nil_chk(w)) applyAttributeCommandWithNSString:@"background" withNSString:@"cgTintColor" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"backgroundTintMode" } count:1 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTintMode", objValue } count:2 type:NSObject_class_()]];
}

void ASViewImpl_setBackgroundTintWithASIWidget_withId_(id<ASIWidget> w, id objValue) {
  ASViewImpl_initialize();
  ADColorStateList *colorStateList = (ADColorStateList *) cast_chk(objValue, [ADColorStateList class]);
  ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]);
  [((ADView *) nil_chk(view)) setBackgroundTintListWithADColorStateList:colorStateList];
  [w applyAttributeCommandWithNSString:@"background" withNSString:@"cgTintColor" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"backgroundTint" } count:1 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTint", objValue } count:2 type:NSObject_class_()]];
}

void ASViewImpl_setForegroundTintModeWithASIWidget_withId_(id<ASIWidget> w, id objValue) {
  ASViewImpl_initialize();
  [((id<ASIWidget>) nil_chk(w)) applyAttributeCommandWithNSString:@"foreground" withNSString:@"cgTintColor" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"foregroundTintMode" } count:1 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTintMode", objValue } count:2 type:NSObject_class_()]];
}

void ASViewImpl_setForegroundTintWithASIWidget_withId_(id<ASIWidget> w, id objValue) {
  ASViewImpl_initialize();
  ADColorStateList *colorStateList = (ADColorStateList *) cast_chk(objValue, [ADColorStateList class]);
  ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]);
  [((ADView *) nil_chk(view)) setForegroundTintListWithADColorStateList:colorStateList];
  [w applyAttributeCommandWithNSString:@"foreground" withNSString:@"cgTintColor" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"foregroundTint" } count:1 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTint", objValue } count:2 type:NSObject_class_()]];
}

void ASViewImpl_setForegroundWithASIWidget_withId_withId_(id<ASIWidget> w, id nativeWidget, id objValue) {
  ASViewImpl_initialize();
  [((id<ASIWidget>) nil_chk(w)) addForegroundIfNeeded];
  if ([objValue isKindOfClass:[ADDrawable class]]) {
    ADDrawable *drawable = (ADDrawable *) objValue;
    [((ADView *) nil_chk(((ADView *) cast_chk([w asWidget], [ADView class])))) setForegroundWithADDrawable:drawable];
    objValue = [((ADDrawable *) nil_chk(drawable)) getDrawable];
  }
  ASViewImpl_setFgOnControlWithASIWidget_withId_withId_(w, nativeWidget, objValue);
}

void ASViewImpl_setFgOnControlWithASIWidget_withId_withId_(id<ASIWidget> w, id nativeWidget, id objValue) {
  ASViewImpl_initialize();
  if (ASViewImpl_isImageWithId_(objValue) || ASViewImpl_isColorWithId_(objValue)) {
    [((id<ASIWidget>) nil_chk(w)) applyAttributeCommandWithNSString:@"foreground" withNSString:@"drawImageOrColor" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){  } count:0 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithLength:0 type:NSObject_class_()]];
  }
  else {
    [((id<ASIWidget>) nil_chk(w)) applyAttributeCommandWithNSString:@"foreground" withNSString:@"drawImageOrColor" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){  } count:0 type:NSString_class_()] withBoolean:false withNSObjectArray:[IOSObjectArray newArrayWithLength:0 type:NSObject_class_()]];
  }
}

void ASViewImpl_setVisibilityWithASIWidget_withId_withId_(id<ASIWidget> w, id nativeWidget, id objValue) {
  ASViewImpl_initialize();
  ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]);
  [((ADView *) nil_chk(view)) setVisibilityWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
}

void ASViewImpl_nativeSetVisibilityWithId_withBoolean_(id view, bool hidden) {
  ASViewImpl_initialize();
  [((UIView *) view) setHidden:  hidden];
}

id ASViewImpl_getClickableWithId_(id nativeWidget) {
  ASViewImpl_initialize();
  return JavaLangBoolean_valueOfWithBoolean_(ASViewImpl_nativeGetClickableWithId_(nativeWidget));
}

bool ASViewImpl_nativeGetClickableWithId_(id view) {
  ASViewImpl_initialize();
  return ((UIView *) view).userInteractionEnabled;
}

void ASViewImpl_setClickableWithASIWidget_withId_withId_(id<ASIWidget> w, id nativeWidget, id objValue) {
  ASViewImpl_initialize();
  ASViewImpl_nativeSetClickableWithId_withBoolean_(nativeWidget, [((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]))) booleanValue]);
  ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]);
  [((ADView *) nil_chk(view)) setClickableWithBoolean:[((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]))) booleanValue]];
}

void ASViewImpl_nativeSetClickableWithId_withBoolean_(id view, bool clickable) {
  ASViewImpl_initialize();
  ((UIView *) view).userInteractionEnabled = clickable;
}

void ASViewImpl_setOnLongClickWithASIWidget_withId_withId_(id<ASIWidget> w, id nativeView, id objValue) {
  ASViewImpl_initialize();
  id<ADView_OnLongClickListener> listener;
  if ([objValue isKindOfClass:[NSString class]]) {
    listener = new_ASViewImpl_OnLongClickListener_initWithASIWidget_withNSString_(w, (NSString *) objValue);
  }
  else {
    listener = (id<ADView_OnLongClickListener>) cast_check(objValue, ADView_OnLongClickListener_class_());
  }
  ASViewImpl_setOnLongClickWithASIWidget_withId_withADView_OnLongClickListener_(w, nativeView, listener);
}

void ASViewImpl_setOnLongClickWithASIWidget_withId_withADView_OnLongClickListener_(id<ASIWidget> w, id nativeView, id<ADView_OnLongClickListener> listener) {
  ASViewImpl_initialize();
  ASViewImpl_setLongClickableWithASIWidget_withId_(w, JavaLangBoolean_valueOfWithBoolean_(true));
  ASViewImpl_UILongTapGestureRecognizerDelegate *delegate = new_ASViewImpl_UILongTapGestureRecognizerDelegate_initWithASIWidget_withADView_OnLongClickListener_(w, listener);
  [delegate nativeAddLongClickListenerWithId:nativeView];
}

void ASViewImpl_setTranslationXWithASIWidget_withId_(id<ASIWidget> w, id objValue) {
  ASViewImpl_initialize();
  [((id<ASIWidget>) nil_chk(w)) applyAttributeCommandWithNSString:@"translationX" withNSString:@"transform" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){  } count:0 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"translationX", objValue } count:2 type:NSObject_class_()]];
  ASViewImpl_relayoutWithASIWidget_(w);
}

void ASViewImpl_relayoutWithASIWidget_(id<ASIWidget> w) {
  ASViewImpl_initialize();
  if ([((id<ASIWidget>) nil_chk(w)) isInitialised]) {
    [((ADView *) nil_chk(((ADView *) cast_chk([w asWidget], [ADView class])))) relayout];
  }
}

void ASViewImpl_setTranslationYWithASIWidget_withId_(id<ASIWidget> w, id objValue) {
  ASViewImpl_initialize();
  [((id<ASIWidget>) nil_chk(w)) applyAttributeCommandWithNSString:@"translationY" withNSString:@"transform" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){  } count:0 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"translationY", objValue } count:2 type:NSObject_class_()]];
  ASViewImpl_relayoutWithASIWidget_(w);
}

void ASViewImpl_setTranslationZWithASIWidget_withId_(id<ASIWidget> w, id objValue) {
  ASViewImpl_initialize();
  [((id<ASIWidget>) nil_chk(w)) applyAttributeCommandWithNSString:@"translationZ" withNSString:@"transform" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){  } count:0 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"translationZ", objValue } count:2 type:NSObject_class_()]];
  ASViewImpl_relayoutWithASIWidget_(w);
}

void ASViewImpl_setTransformPivotYWithASIWidget_withId_(id<ASIWidget> w, id objValue) {
  ASViewImpl_initialize();
  [((id<ASIWidget>) nil_chk(w)) applyAttributeCommandWithNSString:@"transformPivotY" withNSString:@"transform" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){  } count:0 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"transformPivotY", objValue } count:2 type:NSObject_class_()]];
  ASViewImpl_relayoutWithASIWidget_(w);
}

void ASViewImpl_setTransformPivotXWithASIWidget_withId_(id<ASIWidget> w, id objValue) {
  ASViewImpl_initialize();
  [((id<ASIWidget>) nil_chk(w)) applyAttributeCommandWithNSString:@"transformPivotX" withNSString:@"transform" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){  } count:0 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"transformPivotX", objValue } count:2 type:NSObject_class_()]];
  ASViewImpl_relayoutWithASIWidget_(w);
}

void ASViewImpl_setScaleYWithASIWidget_withId_(id<ASIWidget> w, id objValue) {
  ASViewImpl_initialize();
  [((id<ASIWidget>) nil_chk(w)) applyAttributeCommandWithNSString:@"scaleY" withNSString:@"transform" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){  } count:0 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"scaleY", objValue } count:2 type:NSObject_class_()]];
  ASViewImpl_relayoutWithASIWidget_(w);
}

void ASViewImpl_setScaleXWithASIWidget_withId_(id<ASIWidget> w, id objValue) {
  ASViewImpl_initialize();
  [((id<ASIWidget>) nil_chk(w)) applyAttributeCommandWithNSString:@"scaleX" withNSString:@"transform" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){  } count:0 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"scaleX", objValue } count:2 type:NSObject_class_()]];
  ASViewImpl_relayoutWithASIWidget_(w);
}

void ASViewImpl_setRotationYWithASIWidget_withId_(id<ASIWidget> w, id objValue) {
  ASViewImpl_initialize();
  [((id<ASIWidget>) nil_chk(w)) applyAttributeCommandWithNSString:@"rotationY" withNSString:@"transform" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){  } count:0 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"rotationY", objValue } count:2 type:NSObject_class_()]];
  ASViewImpl_relayoutWithASIWidget_(w);
}

void ASViewImpl_setRotationXWithASIWidget_withId_(id<ASIWidget> w, id objValue) {
  ASViewImpl_initialize();
  [((id<ASIWidget>) nil_chk(w)) applyAttributeCommandWithNSString:@"rotationX" withNSString:@"transform" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){  } count:0 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"rotationX", objValue } count:2 type:NSObject_class_()]];
  ASViewImpl_relayoutWithASIWidget_(w);
}

void ASViewImpl_setRotationWithASIWidget_withId_(id<ASIWidget> w, id objValue) {
  ASViewImpl_initialize();
  [((id<ASIWidget>) nil_chk(w)) applyAttributeCommandWithNSString:@"rotation" withNSString:@"transform" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){  } count:0 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"rotation", objValue } count:2 type:NSObject_class_()]];
  ASViewImpl_relayoutWithASIWidget_(w);
}

id ASViewImpl_getTranslationXWithASIWidget_(id<ASIWidget> w) {
  ASViewImpl_initialize();
  return [((id<ASIWidget>) nil_chk(w)) getAttributeCommandValueWithNSString:@"translationX" withNSString:@"transform" withNSString:@"translationX"];
}

id ASViewImpl_getTransformPivotYWithASIWidget_(id<ASIWidget> w) {
  ASViewImpl_initialize();
  return [((id<ASIWidget>) nil_chk(w)) getAttributeCommandValueWithNSString:@"transformPivotY" withNSString:@"transform" withNSString:@"transformPivotY"];
}

id ASViewImpl_getTransformPivotXWithASIWidget_(id<ASIWidget> w) {
  ASViewImpl_initialize();
  return [((id<ASIWidget>) nil_chk(w)) getAttributeCommandValueWithNSString:@"transformPivotX" withNSString:@"transform" withNSString:@"transformPivotX"];
}

id ASViewImpl_getScaleYWithASIWidget_(id<ASIWidget> w) {
  ASViewImpl_initialize();
  return [((id<ASIWidget>) nil_chk(w)) getAttributeCommandValueWithNSString:@"scaleY" withNSString:@"transform" withNSString:@"scaleY"];
}

id ASViewImpl_getScaleXWithASIWidget_(id<ASIWidget> w) {
  ASViewImpl_initialize();
  return [((id<ASIWidget>) nil_chk(w)) getAttributeCommandValueWithNSString:@"scaleX" withNSString:@"transform" withNSString:@"scaleX"];
}

id ASViewImpl_getRotationYWithASIWidget_(id<ASIWidget> w) {
  ASViewImpl_initialize();
  return [((id<ASIWidget>) nil_chk(w)) getAttributeCommandValueWithNSString:@"rotationY" withNSString:@"transform" withNSString:@"rotationY"];
}

id ASViewImpl_getRotationXWithASIWidget_(id<ASIWidget> w) {
  ASViewImpl_initialize();
  return [((id<ASIWidget>) nil_chk(w)) getAttributeCommandValueWithNSString:@"rotationX" withNSString:@"transform" withNSString:@"rotationX"];
}

id ASViewImpl_getRotationWithASIWidget_(id<ASIWidget> w) {
  ASViewImpl_initialize();
  return [((id<ASIWidget>) nil_chk(w)) getAttributeCommandValueWithNSString:@"rotation" withNSString:@"transform" withNSString:@"rotation"];
}

id ASViewImpl_getTranslationZWithASIWidget_(id<ASIWidget> w) {
  ASViewImpl_initialize();
  return [((id<ASIWidget>) nil_chk(w)) getAttributeCommandValueWithNSString:@"translationZ" withNSString:@"transform" withNSString:@"translationZ"];
}

id ASViewImpl_getTranslationYWithASIWidget_(id<ASIWidget> w) {
  ASViewImpl_initialize();
  return [((id<ASIWidget>) nil_chk(w)) getAttributeCommandValueWithNSString:@"translationY" withNSString:@"transform" withNSString:@"translationY"];
}

id ASViewImpl_getForegroundTintWithASIWidget_(id<ASIWidget> w) {
  ASViewImpl_initialize();
  return [((ADView *) nil_chk(((ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class])))) getForegroundTintList];
}

id ASViewImpl_getForegroundTintModeWithASIWidget_(id<ASIWidget> w) {
  ASViewImpl_initialize();
  return [((id<ASIWidget>) nil_chk(w)) getAttributeCommandValueWithNSString:@"foreground" withNSString:@"cgTintColor" withNSString:@"drawableTintMode"];
}

id ASViewImpl_getBackgroundTintModeWithASIWidget_(id<ASIWidget> w) {
  ASViewImpl_initialize();
  return [((id<ASIWidget>) nil_chk(w)) getAttributeCommandValueWithNSString:@"background" withNSString:@"cgTintColor" withNSString:@"drawableTintMode"];
}

id ASViewImpl_getBackgroundTintWithASIWidget_(id<ASIWidget> w) {
  ASViewImpl_initialize();
  return [((ADView *) nil_chk(((ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class])))) getBackgroundTintList];
}

void ASViewImpl_requestLayoutWithASIWidget_withId_(id<ASIWidget> w, id nativeView) {
  ASViewImpl_initialize();
  ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]);
  [((ADView *) nil_chk(view)) requestLayout];
  ASViewImpl_nativeRequestLayoutWithId_(nativeView);
}

void ASViewImpl_invalidateWithASIWidget_withId_(id<ASIWidget> w, id nativeView) {
  ASViewImpl_initialize();
  ASViewImpl_nativeInvalidateWithId_(nativeView);
}

void ASViewImpl_nativeRequestLayoutWithId_(id view) {
  ASViewImpl_initialize();
  [((UIView *) view) setNeedsLayout];
}

void ASViewImpl_nativeInvalidateWithId_(id view) {
  ASViewImpl_initialize();
  [((UIView *) view) setNeedsDisplay];
}

void ASViewImpl_setKeepScreenOnWithId_withId_(id nativeWidget, id value) {
  ASViewImpl_initialize();
  [UIApplication sharedApplication].idleTimerDisabled = [(JavaLangBoolean*) value booleanValue];
}

id ASViewImpl_getKeepScreenOnWithId_(id uiView) {
  ASViewImpl_initialize();
  return [JavaLangBoolean valueOfWithBoolean :[UIApplication sharedApplication].idleTimerDisabled];
}

bool ASViewImpl_isMirrorSupported() {
  ASViewImpl_initialize();
  return false;
}

void ASViewImpl_setOnTouchWithASIWidget_withId_withId_(id<ASIWidget> w, id nativeView, id objValue) {
  ASViewImpl_initialize();
  [((id<ASIWidget>) nil_chk(w)) storeUserDataWithNSString:@"touchEvent" withId:objValue];
  id<ADView_OnTouchListener> onTouchListener;
  if ([objValue isKindOfClass:[NSString class]]) {
    onTouchListener = new_ASViewImpl_OnTouchListener_initWithASIWidget_withNSString_(w, (NSString *) objValue);
  }
  else {
    onTouchListener = (id<ADView_OnTouchListener>) cast_check(objValue, ADView_OnTouchListener_class_());
  }
  ASViewImpl_UIControlEventTouchDelegate *delegate = new_ASViewImpl_UIControlEventTouchDelegate_initWithASIWidget_withADView_OnTouchListener_(w, onTouchListener);
  [delegate nativeAddOnTouchListenerWithId:nativeView];
}

void ASViewImpl_startDragWithASIWidget_withNSString_(id<ASIWidget> w, NSString *eventData) {
  ASViewImpl_initialize();
}

void ASViewImpl_setOnDragWithASIWidget_withId_withId_(id<ASIWidget> w, id nativeView, id objValue) {
  ASViewImpl_initialize();
  id<ADView_OnDragListener> onDragListener;
  if ([objValue isKindOfClass:[NSString class]]) {
    onDragListener = new_ASViewImpl_OnDragListener_initWithASIWidget_withNSString_(w, (NSString *) objValue);
  }
  else {
    onDragListener = (id<ADView_OnDragListener>) cast_check(objValue, ADView_OnDragListener_class_());
  }
  [((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w)) getFragment])) addListenerWithASIWidget:w withId:onDragListener];
  ASViewImpl_UIDropInteractionDelegate *dragDropInteractionDelegate = new_ASViewImpl_UIDropInteractionDelegate_initWithASIWidget_withADView_OnDragListener_(w, onDragListener);
  [dragDropInteractionDelegate nativeAddDropInteractionWithId:nativeView];
}

void ASViewImpl_setAsDragSourceWithASIWidget_withId_withId_(id<ASIWidget> w, id nativeWidget, id objValue) {
  ASViewImpl_initialize();
  ASViewImpl_UIDragInteractionDelegate *dragDropInteractionDelegate = new_ASViewImpl_UIDragInteractionDelegate_initWithASIWidget_withNSString_(w, (NSString *) cast_chk(objValue, [NSString class]));
  [dragDropInteractionDelegate nativeAddDragInteractionWithId:nativeWidget];
}

id ASViewImpl_getForegroundWithASIWidget_(id<ASIWidget> w) {
  ASViewImpl_initialize();
  id value = nil;
  ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]);
  if ([((ADView *) nil_chk(view)) getForeground] != nil) {
    if ([[view getForeground] isKindOfClass:[ADStateListDrawable class]]) {
      return [view getForeground];
    }
    if ([[view getForeground] isKindOfClass:[ADDrawable class]]) {
      return [((ADDrawable *) nil_chk([view getForeground])) getDrawable];
    }
  }
  return value;
}

id ASViewImpl_getBackgroundWithASIWidget_(id<ASIWidget> w) {
  ASViewImpl_initialize();
  id value = nil;
  ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]);
  if ([((ADView *) nil_chk(view)) getBackground] != nil) {
    if ([[view getBackground] isKindOfClass:[ADStateListDrawable class]]) {
      return [view getBackground];
    }
    if ([[view getBackground] isKindOfClass:[ADDrawable class]]) {
      return [((ADDrawable *) nil_chk([view getBackground])) getDrawable];
    }
  }
  return value;
}

void ASViewImpl_setOnKeyWithASIWidget_withId_(id<ASIWidget> w, id objValue) {
  ASViewImpl_initialize();
  id<ADView_OnKeyListener> onKeyListener;
  if ([objValue isKindOfClass:[NSString class]]) {
    onKeyListener = new_ASViewImpl_OnKeyListener_initWithASIWidget_withNSString_(w, (NSString *) objValue);
  }
  else {
    onKeyListener = (id<ADView_OnKeyListener>) cast_check(objValue, ADView_OnKeyListener_class_());
  }
  ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]);
  [((ADView *) nil_chk(view)) setOnKeyListenerWithADView_OnKeyListener:onKeyListener];
}

void ASViewImpl_setLayerCornerRadiusWithId_withId_(id nativeWidget, id objValue) {
  ASViewImpl_initialize();
  ASViewImpl_nativeSetLayerCornerRadiusWithId_withFloat_(nativeWidget, [((JavaLangFloat *) nil_chk((JavaLangFloat *) cast_chk(objValue, [JavaLangFloat class]))) floatValue]);
}

void ASViewImpl_nativeSetLayerCornerRadiusWithId_withFloat_(id nativeWidget, float value) {
  ASViewImpl_initialize();
  UIView* view = ((UIView*)nativeWidget);
  view.layer.cornerRadius = value;
}

void ASViewImpl_setLayerBorderColorWithId_withId_(id nativeWidget, id objValue) {
  ASViewImpl_initialize();
  ASViewImpl_nativeLayerBorderColorWithId_withId_(nativeWidget, objValue);
}

void ASViewImpl_nativeLayerBorderColorWithId_withId_(id nativeWidget, id value) {
  ASViewImpl_initialize();
  UIView* view = ((UIView*)nativeWidget);
  view.layer.borderColor = ((UIColor*) value).CGColor;
}

void ASViewImpl_setLayerBorderWidthWithId_withId_(id nativeWidget, id objValue) {
  ASViewImpl_initialize();
  ASViewImpl_nativeLayerBorderWidthWithId_withFloat_(nativeWidget, [((JavaLangFloat *) nil_chk((JavaLangFloat *) cast_chk(objValue, [JavaLangFloat class]))) floatValue]);
}

void ASViewImpl_nativeLayerBorderWidthWithId_withFloat_(id nativeWidget, float value) {
  ASViewImpl_initialize();
  UIView* view = ((UIView*)nativeWidget);
  view.layer.borderWidth = value;
}

void ASViewImpl_setLayerMasksToBoundsWithId_withId_(id nativeWidget, id objValue) {
  ASViewImpl_initialize();
  ASViewImpl_nativeLayerBMasksToBoundsWithId_withBoolean_(nativeWidget, [((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]))) booleanValue]);
}

void ASViewImpl_nativeLayerBMasksToBoundsWithId_withBoolean_(id nativeWidget, bool value) {
  ASViewImpl_initialize();
  UIView* view = ((UIView*)nativeWidget);
  view.layer.masksToBounds = value;
}

void ASViewImpl_nativeBringToFrontWithJavaUtilList_(id<JavaUtilList> widgets) {
  ASViewImpl_initialize();
  for (id<ASIWidget> __strong w in nil_chk(widgets)) {
    ASViewImpl_nativeBringToFrontWithId_([((id<ASIWidget>) nil_chk(w)) asNativeWidget]);
  }
}

void ASViewImpl_nativeBringToFrontWithId_(id nativeWidget) {
  ASViewImpl_initialize();
  UIView* view = ((UIView*)nativeWidget);
  [view.superview bringSubviewToFront:view];
}

void ASViewImpl_setNativeIdWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) {
  ASViewImpl_initialize();
}

int32_t ASViewImpl_getLocationXOnScreenWithId_(id nativeWidget) {
  ASViewImpl_initialize();
  UIView* view = ((UIView*)nativeWidget);
  CGPoint point = [view.superview convertPoint:view.frame.origin toView:nil];
  return point.x;
}

int32_t ASViewImpl_getLocationYOnScreenWithId_(id nativeWidget) {
  ASViewImpl_initialize();
  UIView* view = ((UIView*)nativeWidget);
  CGPoint point = [view.superview convertPoint:view.frame.origin toView:nil];
  return point.y;
}

void ASViewImpl_setOutsideTouchableWithASIWidget_withNSString_withId_withADView_(id<ASIWidget> w, NSString *strValue, id objValue, ADView *view) {
  ASViewImpl_initialize();
  if ([((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]))) booleanValue]) {
    [((id<ASIWidget>) nil_chk(w)) storeInTempCacheWithNSString:@"outsideTouchable" withId:@"true"];
  }
  else {
    [((id<ASIWidget>) nil_chk(w)) storeInTempCacheWithNSString:@"outsideTouchable" withId:@"false"];
  }
}

int32_t ASViewImpl_nativeMeasureWidthWithId_(id uiView) {
  ASViewImpl_initialize();
  CGSize maximumLabelSize = CGSizeMake(CGFLOAT_MAX,CGFLOAT_MAX);
  CGSize requiredSize = [((UIView*)uiView) sizeThatFits:maximumLabelSize];
  return ceil(requiredSize.width);
}

int32_t ASViewImpl_nativeMeasureHeightWithId_withInt_(id uiView, int32_t width) {
  ASViewImpl_initialize();
  CGSize maximumLabelSize = CGSizeMake(width,CGFLOAT_MAX);
  CGSize requiredSize = [((UIView*)uiView) sizeThatFits:maximumLabelSize];
  return ceil(requiredSize.height);
}

void ASViewImpl_setOnSwipeListenerWithASIWidget_withASSwipeHelper_SwipeListener_(id<ASIWidget> w, id<ASSwipeHelper_SwipeListener> swipeListener) {
  ASViewImpl_initialize();
  ASViewImpl_UISwipeGestureRecognizerDelegate *delegate = new_ASViewImpl_UISwipeGestureRecognizerDelegate_initWithASIWidget_withASSwipeHelper_SwipeListener_(w, swipeListener);
  [delegate nativeAddSwipeListenerWithNSString:@"default" withId:[((id<ASIWidget>) nil_chk(w)) asNativeWidget]];
}

void ASViewImpl_addPanListenerWithASIWidget_withId_withASViewImpl_PanCallBack_(id<ASIWidget> widget, id uiView, id<ASViewImpl_PanCallBack> callback) {
  ASViewImpl_initialize();
  ASViewImpl_PanGestureRecognizer_addUIPanGestureRecognizer(new_ASViewImpl_PanGestureRecognizer_initWithASIWidget_withId_withId_withASViewImpl_PanCallBack_(widget, uiView, uiView, callback));
}

void ASViewImpl_addPanListenerWithASIWidget_withId_withId_withASViewImpl_PanCallBack_(id<ASIWidget> widget, id uiView, id uiLocationView, id<ASViewImpl_PanCallBack> callback) {
  ASViewImpl_initialize();
  ASViewImpl_PanGestureRecognizer_addUIPanGestureRecognizer(new_ASViewImpl_PanGestureRecognizer_initWithASIWidget_withId_withId_withASViewImpl_PanCallBack_(widget, uiView, uiLocationView, callback));
}

int32_t ASViewImpl_getXWithId_(id objview) {
  ASViewImpl_initialize();
  UIView* uiview = ((UIView*) objview);
  return uiview.frame.origin.x;
}

int32_t ASViewImpl_getYWithId_(id objview) {
  ASViewImpl_initialize();
  UIView* uiview = ((UIView*) objview);
  return uiview.frame.origin.y;
}

void ASViewImpl_updateBoundsXWithId_withInt_(id objview, int32_t x) {
  ASViewImpl_initialize();
  UIView* uiview = ((UIView*) objview);
  CGRect frame = uiview.frame;
  frame.origin.x = x;
  uiview.frame = frame;
}

void ASViewImpl_translateWithAnimationWithId_withInt_withInt_withInt_withASViewImpl_AnimationCallBack_(id objview, int32_t x, int32_t y, int32_t animationDurationInMs, id<ASViewImpl_AnimationCallBack> callBack) {
  ASViewImpl_initialize();
  ASViewImpl_AnimationUtils_nativeAnimateWithInt_withInt_withInt_(new_ASViewImpl_AnimationUtils_initWithId_withASViewImpl_AnimationCallBack_(objview, callBack), x, y, animationDurationInMs);
}

void ASViewImpl_setOutlineSpotShadowColorWithASIWidget_withId_(id<ASIWidget> w, id objValue) {
  ASViewImpl_initialize();
  ASViewImpl_setShadowColorWithId_withId_([((id<ASIWidget>) nil_chk(w)) asNativeWidget], objValue);
}

void ASViewImpl_setOutlineAmbientShadowColorWithASIWidget_withId_(id<ASIWidget> w, id objValue) {
  ASViewImpl_initialize();
  ASViewImpl_setShadowColorWithId_withId_([((id<ASIWidget>) nil_chk(w)) asNativeWidget], objValue);
}

void ASViewImpl_setShadowColorWithId_withId_(id view, id color) {
  ASViewImpl_initialize();
  ((UIView*)view).layer.shadowColor = ((UIColor*)color).CGColor;
}

void ASViewImpl_setCornerRadiusWithASIWidget_withId_withId_(id<ASIWidget> w, id nativeWidget, id objValue) {
  ASViewImpl_initialize();
  float radius = [((NSNumber *) nil_chk(((NSNumber *) cast_chk(objValue, [NSNumber class])))) floatValue];
  ASViewImpl_setCornerRadiusOnViewWithId_withFloat_(nativeWidget, radius);
}

void ASViewImpl_setCornerRadiusOnViewWithId_withFloat_(id view, float radius) {
  ASViewImpl_initialize();
  ((UIView*)view).layer.cornerRadius = radius;
  ((UIView*)view).clipsToBounds = YES;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASViewImpl)

J2OBJC_NAME_MAPPING(ASViewImpl, "com.ashera.layout", "AS")

@implementation ASViewImpl_IosAccessibilityTraits

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASViewImpl_IosAccessibilityTraits_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilMap>)getMapping {
  return mapping_;
}

- (JavaLangInteger *)getDefault {
  return JavaLangInteger_valueOfWithInt_(0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMapping);
  methods[2].selector = @selector(getDefault);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapping_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "LASViewImpl;" };
  static const J2ObjcClassInfo _ASViewImpl_IosAccessibilityTraits = { "IosAccessibilityTraits", "com.ashera.layout", ptrTable, methods, fields, 7, 0x18, 3, 1, 2, -1, -1, -1, -1 };
  return &_ASViewImpl_IosAccessibilityTraits;
}

@end

void ASViewImpl_IosAccessibilityTraits_init(ASViewImpl_IosAccessibilityTraits *self) {
  ASAbstractEnumToIntConverter_init(self);
  self->mapping_ = new_JavaUtilHashMap_init();
  {
    (void) [self->mapping_ putWithId:@"uiaccessibilitytraitadjustable" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIAccessibilityTraitAdjustable))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"uiaccessibilitytraitallowsdirectinteraction" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIAccessibilityTraitAllowsDirectInteraction))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"uiaccessibilitytraitbutton" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIAccessibilityTraitButton))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"uiaccessibilitytraitcausespageturn" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIAccessibilityTraitCausesPageTurn))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"uiaccessibilitytraitheader" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIAccessibilityTraitHeader))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"uiaccessibilitytraitimage" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIAccessibilityTraitImage))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"uiaccessibilitytraitkeyboardkey" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIAccessibilityTraitKeyboardKey))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"uiaccessibilitytraitlink" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIAccessibilityTraitLink))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"uiaccessibilitytraitnone" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIAccessibilityTraitNone))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"uiaccessibilitytraitnotenabled" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIAccessibilityTraitNotEnabled))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"uiaccessibilitytraitplayssound" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIAccessibilityTraitPlaysSound))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"uiaccessibilitytraitsearchfield" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIAccessibilityTraitSearchField))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"uiaccessibilitytraitselected" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIAccessibilityTraitSelected))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"uiaccessibilitytraitstartsmediasession" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIAccessibilityTraitStartsMediaSession))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"uiaccessibilitytraitstatictext" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIAccessibilityTraitStaticText))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"uiaccessibilitytraitsummaryelement" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIAccessibilityTraitSummaryElement))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"uiaccessibilitytraittabbar" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIAccessibilityTraitTabBar))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"uiaccessibilitytraitupdatesfrequently" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIAccessibilityTraitUpdatesFrequently))];
  }
}

ASViewImpl_IosAccessibilityTraits *new_ASViewImpl_IosAccessibilityTraits_init() {
  J2OBJC_NEW_IMPL(ASViewImpl_IosAccessibilityTraits, init)
}

ASViewImpl_IosAccessibilityTraits *create_ASViewImpl_IosAccessibilityTraits_init() {
  J2OBJC_CREATE_IMPL(ASViewImpl_IosAccessibilityTraits, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASViewImpl_IosAccessibilityTraits)

@implementation ASViewImpl_Vtype

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASViewImpl_Vtype_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilMap>)getMapping {
  return mapping_;
}

- (JavaLangInteger *)getDefault {
  return JavaLangInteger_valueOfWithInt_(0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMapping);
  methods[2].selector = @selector(getDefault);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapping_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "LASViewImpl;" };
  static const J2ObjcClassInfo _ASViewImpl_Vtype = { "Vtype", "com.ashera.layout", ptrTable, methods, fields, 7, 0x18, 3, 1, 2, -1, -1, -1, -1 };
  return &_ASViewImpl_Vtype;
}

@end

void ASViewImpl_Vtype_init(ASViewImpl_Vtype *self) {
  ASAbstractEnumToIntConverter_init(self);
  self->mapping_ = new_JavaUtilHashMap_init();
  {
    (void) [self->mapping_ putWithId:@"email" withId:JavaLangInteger_valueOfWithInt_((int32_t) 0x1)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"time" withId:JavaLangInteger_valueOfWithInt_((int32_t) 0x2)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"date" withId:JavaLangInteger_valueOfWithInt_((int32_t) 0x3)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"url" withId:JavaLangInteger_valueOfWithInt_((int32_t) 0x4)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"tel" withId:JavaLangInteger_valueOfWithInt_((int32_t) 0x5)];
  }
}

ASViewImpl_Vtype *new_ASViewImpl_Vtype_init() {
  J2OBJC_NEW_IMPL(ASViewImpl_Vtype, init)
}

ASViewImpl_Vtype *create_ASViewImpl_Vtype_init() {
  J2OBJC_CREATE_IMPL(ASViewImpl_Vtype, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASViewImpl_Vtype)

@implementation ASViewImpl_ValidationErrorDisplay

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASViewImpl_ValidationErrorDisplay_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilMap>)getMapping {
  return mapping_;
}

- (JavaLangInteger *)getDefault {
  return JavaLangInteger_valueOfWithInt_(0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMapping);
  methods[2].selector = @selector(getDefault);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapping_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "LASViewImpl;" };
  static const J2ObjcClassInfo _ASViewImpl_ValidationErrorDisplay = { "ValidationErrorDisplay", "com.ashera.layout", ptrTable, methods, fields, 7, 0x18, 3, 1, 2, -1, -1, -1, -1 };
  return &_ASViewImpl_ValidationErrorDisplay;
}

@end

void ASViewImpl_ValidationErrorDisplay_init(ASViewImpl_ValidationErrorDisplay *self) {
  ASAbstractBitFlagConverter_init(self);
  self->mapping_ = new_JavaUtilHashMap_init();
  {
    (void) [self->mapping_ putWithId:@"popup" withId:JavaLangInteger_valueOfWithInt_((int32_t) 0x1)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"label" withId:JavaLangInteger_valueOfWithInt_((int32_t) 0x2)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"style" withId:JavaLangInteger_valueOfWithInt_((int32_t) 0x4)];
  }
}

ASViewImpl_ValidationErrorDisplay *new_ASViewImpl_ValidationErrorDisplay_init() {
  J2OBJC_NEW_IMPL(ASViewImpl_ValidationErrorDisplay, init)
}

ASViewImpl_ValidationErrorDisplay *create_ASViewImpl_ValidationErrorDisplay_init() {
  J2OBJC_CREATE_IMPL(ASViewImpl_ValidationErrorDisplay, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASViewImpl_ValidationErrorDisplay)

@implementation ASViewImpl_BackgroundRepeat

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASViewImpl_BackgroundRepeat_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilMap>)getMapping {
  return mapping_;
}

- (JavaLangInteger *)getDefault {
  return JavaLangInteger_valueOfWithInt_(0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMapping);
  methods[2].selector = @selector(getDefault);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapping_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "LASViewImpl;" };
  static const J2ObjcClassInfo _ASViewImpl_BackgroundRepeat = { "BackgroundRepeat", "com.ashera.layout", ptrTable, methods, fields, 7, 0x18, 3, 1, 2, -1, -1, -1, -1 };
  return &_ASViewImpl_BackgroundRepeat;
}

@end

void ASViewImpl_BackgroundRepeat_init(ASViewImpl_BackgroundRepeat *self) {
  ASAbstractEnumToIntConverter_init(self);
  self->mapping_ = new_JavaUtilHashMap_init();
  {
    (void) [self->mapping_ putWithId:@"no-repeat" withId:JavaLangInteger_valueOfWithInt_((int32_t) 0x0)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"repeat" withId:JavaLangInteger_valueOfWithInt_((int32_t) 0x1)];
  }
}

ASViewImpl_BackgroundRepeat *new_ASViewImpl_BackgroundRepeat_init() {
  J2OBJC_NEW_IMPL(ASViewImpl_BackgroundRepeat, init)
}

ASViewImpl_BackgroundRepeat *create_ASViewImpl_BackgroundRepeat_init() {
  J2OBJC_CREATE_IMPL(ASViewImpl_BackgroundRepeat, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASViewImpl_BackgroundRepeat)

@implementation ASViewImpl_BackgroundTintMode

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASViewImpl_BackgroundTintMode_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilMap>)getMapping {
  return mapping_;
}

- (JavaLangInteger *)getDefault {
  return JavaLangInteger_valueOfWithInt_(0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMapping);
  methods[2].selector = @selector(getDefault);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapping_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "LASViewImpl;" };
  static const J2ObjcClassInfo _ASViewImpl_BackgroundTintMode = { "BackgroundTintMode", "com.ashera.layout", ptrTable, methods, fields, 7, 0x18, 3, 1, 2, -1, -1, -1, -1 };
  return &_ASViewImpl_BackgroundTintMode;
}

@end

void ASViewImpl_BackgroundTintMode_init(ASViewImpl_BackgroundTintMode *self) {
  ASAbstractEnumToIntConverter_init(self);
  self->mapping_ = new_JavaUtilHashMap_init();
  {
    (void) [self->mapping_ putWithId:@"add" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, kCGBlendModeOverlay))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"multiply" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, kCGBlendModeMultiply))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"screen" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, kCGBlendModeScreen))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"src_atop" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, kCGBlendModeSourceAtop))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"src_in" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, kCGBlendModeSourceIn))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"src_over" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, kCGBlendModeNormal))];
  }
}

ASViewImpl_BackgroundTintMode *new_ASViewImpl_BackgroundTintMode_init() {
  J2OBJC_NEW_IMPL(ASViewImpl_BackgroundTintMode, init)
}

ASViewImpl_BackgroundTintMode *create_ASViewImpl_BackgroundTintMode_init() {
  J2OBJC_CREATE_IMPL(ASViewImpl_BackgroundTintMode, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASViewImpl_BackgroundTintMode)

@implementation ASViewImpl_ForegroundRepeat

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASViewImpl_ForegroundRepeat_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilMap>)getMapping {
  return mapping_;
}

- (JavaLangInteger *)getDefault {
  return JavaLangInteger_valueOfWithInt_(0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMapping);
  methods[2].selector = @selector(getDefault);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapping_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "LASViewImpl;" };
  static const J2ObjcClassInfo _ASViewImpl_ForegroundRepeat = { "ForegroundRepeat", "com.ashera.layout", ptrTable, methods, fields, 7, 0x18, 3, 1, 2, -1, -1, -1, -1 };
  return &_ASViewImpl_ForegroundRepeat;
}

@end

void ASViewImpl_ForegroundRepeat_init(ASViewImpl_ForegroundRepeat *self) {
  ASAbstractEnumToIntConverter_init(self);
  self->mapping_ = new_JavaUtilHashMap_init();
  {
    (void) [self->mapping_ putWithId:@"no-repeat" withId:JavaLangInteger_valueOfWithInt_((int32_t) 0x0)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"repeat" withId:JavaLangInteger_valueOfWithInt_((int32_t) 0x1)];
  }
}

ASViewImpl_ForegroundRepeat *new_ASViewImpl_ForegroundRepeat_init() {
  J2OBJC_NEW_IMPL(ASViewImpl_ForegroundRepeat, init)
}

ASViewImpl_ForegroundRepeat *create_ASViewImpl_ForegroundRepeat_init() {
  J2OBJC_CREATE_IMPL(ASViewImpl_ForegroundRepeat, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASViewImpl_ForegroundRepeat)

@implementation ASViewImpl_ForegroundTintMode

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASViewImpl_ForegroundTintMode_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilMap>)getMapping {
  return mapping_;
}

- (JavaLangInteger *)getDefault {
  return JavaLangInteger_valueOfWithInt_(0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMapping);
  methods[2].selector = @selector(getDefault);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapping_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "LASViewImpl;" };
  static const J2ObjcClassInfo _ASViewImpl_ForegroundTintMode = { "ForegroundTintMode", "com.ashera.layout", ptrTable, methods, fields, 7, 0x18, 3, 1, 2, -1, -1, -1, -1 };
  return &_ASViewImpl_ForegroundTintMode;
}

@end

void ASViewImpl_ForegroundTintMode_init(ASViewImpl_ForegroundTintMode *self) {
  ASAbstractEnumToIntConverter_init(self);
  self->mapping_ = new_JavaUtilHashMap_init();
  {
    (void) [self->mapping_ putWithId:@"add" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, kCGBlendModeOverlay))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"multiply" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, kCGBlendModeMultiply))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"screen" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, kCGBlendModeScreen))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"src_atop" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, kCGBlendModeSourceAtop))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"src_in" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, kCGBlendModeSourceIn))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"src_over" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, kCGBlendModeNormal))];
  }
}

ASViewImpl_ForegroundTintMode *new_ASViewImpl_ForegroundTintMode_init() {
  J2OBJC_NEW_IMPL(ASViewImpl_ForegroundTintMode, init)
}

ASViewImpl_ForegroundTintMode *create_ASViewImpl_ForegroundTintMode_init() {
  J2OBJC_CREATE_IMPL(ASViewImpl_ForegroundTintMode, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASViewImpl_ForegroundTintMode)

@implementation ASViewImpl_Visibility

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASViewImpl_Visibility_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilMap>)getMapping {
  return mapping_;
}

- (JavaLangInteger *)getDefault {
  return JavaLangInteger_valueOfWithInt_(0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMapping);
  methods[2].selector = @selector(getDefault);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapping_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "LASViewImpl;" };
  static const J2ObjcClassInfo _ASViewImpl_Visibility = { "Visibility", "com.ashera.layout", ptrTable, methods, fields, 7, 0x18, 3, 1, 2, -1, -1, -1, -1 };
  return &_ASViewImpl_Visibility;
}

@end

void ASViewImpl_Visibility_init(ASViewImpl_Visibility *self) {
  ASAbstractEnumToIntConverter_init(self);
  self->mapping_ = new_JavaUtilHashMap_init();
  {
    (void) [self->mapping_ putWithId:@"gone" withId:JavaLangInteger_valueOfWithInt_((int32_t) 0x8)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"invisible" withId:JavaLangInteger_valueOfWithInt_((int32_t) 0x4)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"visible" withId:JavaLangInteger_valueOfWithInt_((int32_t) 0x0)];
  }
}

ASViewImpl_Visibility *new_ASViewImpl_Visibility_init() {
  J2OBJC_NEW_IMPL(ASViewImpl_Visibility, init)
}

ASViewImpl_Visibility *create_ASViewImpl_Visibility_init() {
  J2OBJC_CREATE_IMPL(ASViewImpl_Visibility, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASViewImpl_Visibility)

@implementation ASViewImpl_LayoutDirection

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASViewImpl_LayoutDirection_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilMap>)getMapping {
  return mapping_;
}

- (JavaLangInteger *)getDefault {
  return JavaLangInteger_valueOfWithInt_(0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMapping);
  methods[2].selector = @selector(getDefault);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapping_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "LASViewImpl;" };
  static const J2ObjcClassInfo _ASViewImpl_LayoutDirection = { "LayoutDirection", "com.ashera.layout", ptrTable, methods, fields, 7, 0x18, 3, 1, 2, -1, -1, -1, -1 };
  return &_ASViewImpl_LayoutDirection;
}

@end

void ASViewImpl_LayoutDirection_init(ASViewImpl_LayoutDirection *self) {
  ASAbstractEnumToIntConverter_init(self);
  self->mapping_ = new_JavaUtilHashMap_init();
  {
    (void) [self->mapping_ putWithId:@"inherit" withId:JavaLangInteger_valueOfWithInt_((int32_t) 0x2)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"locale" withId:JavaLangInteger_valueOfWithInt_((int32_t) 0x3)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"ltr" withId:JavaLangInteger_valueOfWithInt_((int32_t) 0x0)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"rtl" withId:JavaLangInteger_valueOfWithInt_((int32_t) 0x1)];
  }
}

ASViewImpl_LayoutDirection *new_ASViewImpl_LayoutDirection_init() {
  J2OBJC_NEW_IMPL(ASViewImpl_LayoutDirection, init)
}

ASViewImpl_LayoutDirection *create_ASViewImpl_LayoutDirection_init() {
  J2OBJC_CREATE_IMPL(ASViewImpl_LayoutDirection, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASViewImpl_LayoutDirection)

@implementation ASViewImpl_TextDirection

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASViewImpl_TextDirection_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilMap>)getMapping {
  return mapping_;
}

- (JavaLangInteger *)getDefault {
  return JavaLangInteger_valueOfWithInt_(0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMapping);
  methods[2].selector = @selector(getDefault);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapping_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "LASViewImpl;" };
  static const J2ObjcClassInfo _ASViewImpl_TextDirection = { "TextDirection", "com.ashera.layout", ptrTable, methods, fields, 7, 0x18, 3, 1, 2, -1, -1, -1, -1 };
  return &_ASViewImpl_TextDirection;
}

@end

void ASViewImpl_TextDirection_init(ASViewImpl_TextDirection *self) {
  ASAbstractEnumToIntConverter_init(self);
  self->mapping_ = new_JavaUtilHashMap_init();
  {
    (void) [self->mapping_ putWithId:@"anyRtl" withId:JavaLangInteger_valueOfWithInt_((int32_t) 0x2)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"firstStrong" withId:JavaLangInteger_valueOfWithInt_((int32_t) 0x1)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"firstStrongLtr" withId:JavaLangInteger_valueOfWithInt_((int32_t) 0x6)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"firstStrongRtl" withId:JavaLangInteger_valueOfWithInt_((int32_t) 0x7)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"inherit" withId:JavaLangInteger_valueOfWithInt_((int32_t) 0x0)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"locale" withId:JavaLangInteger_valueOfWithInt_((int32_t) 0x5)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"ltr" withId:JavaLangInteger_valueOfWithInt_((int32_t) 0x3)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"rtl" withId:JavaLangInteger_valueOfWithInt_((int32_t) 0x4)];
  }
}

ASViewImpl_TextDirection *new_ASViewImpl_TextDirection_init() {
  J2OBJC_NEW_IMPL(ASViewImpl_TextDirection, init)
}

ASViewImpl_TextDirection *create_ASViewImpl_TextDirection_init() {
  J2OBJC_CREATE_IMPL(ASViewImpl_TextDirection, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASViewImpl_TextDirection)

@implementation ASViewImpl_TextAlignment

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASViewImpl_TextAlignment_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilMap>)getMapping {
  return mapping_;
}

- (JavaLangInteger *)getDefault {
  return JavaLangInteger_valueOfWithInt_(0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMapping);
  methods[2].selector = @selector(getDefault);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapping_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "LASViewImpl;" };
  static const J2ObjcClassInfo _ASViewImpl_TextAlignment = { "TextAlignment", "com.ashera.layout", ptrTable, methods, fields, 7, 0x18, 3, 1, 2, -1, -1, -1, -1 };
  return &_ASViewImpl_TextAlignment;
}

@end

void ASViewImpl_TextAlignment_init(ASViewImpl_TextAlignment *self) {
  ASAbstractEnumToIntConverter_init(self);
  self->mapping_ = new_JavaUtilHashMap_init();
  {
    (void) [self->mapping_ putWithId:@"center" withId:JavaLangInteger_valueOfWithInt_((int32_t) 0x4)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"gravity" withId:JavaLangInteger_valueOfWithInt_((int32_t) 0x1)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"inherit" withId:JavaLangInteger_valueOfWithInt_((int32_t) 0x0)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"textEnd" withId:JavaLangInteger_valueOfWithInt_((int32_t) 0x3)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"textStart" withId:JavaLangInteger_valueOfWithInt_((int32_t) 0x2)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"viewEnd" withId:JavaLangInteger_valueOfWithInt_((int32_t) 0x6)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"viewStart" withId:JavaLangInteger_valueOfWithInt_((int32_t) 0x5)];
  }
}

ASViewImpl_TextAlignment *new_ASViewImpl_TextAlignment_init() {
  J2OBJC_NEW_IMPL(ASViewImpl_TextAlignment, init)
}

ASViewImpl_TextAlignment *create_ASViewImpl_TextAlignment_init() {
  J2OBJC_CREATE_IMPL(ASViewImpl_TextAlignment, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASViewImpl_TextAlignment)

@implementation ASViewImpl_1

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASViewImpl_1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (int32_t)compareWithId:(id<ASIWidget>)arg0
                  withId:(id<ASIWidget>)arg1 {
  return [((id<ASIWidget>) nil_chk(arg0)) getZIndex] - [((id<ASIWidget>) nil_chk(arg1)) getZIndex];
}

- (id<JavaUtilComparator>)reversed {
  return JavaUtilComparator_reversed(self);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilComparator:(id<JavaUtilComparator>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilComparator_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0
                                             withJavaUtilComparator:(id<JavaUtilComparator>)arg1 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_withJavaUtilComparator_(self, arg0, arg1);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingIntWithJavaUtilFunctionToIntFunction:(id<JavaUtilFunctionToIntFunction>)arg0 {
  return JavaUtilComparator_thenComparingIntWithJavaUtilFunctionToIntFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingLongWithJavaUtilFunctionToLongFunction:(id<JavaUtilFunctionToLongFunction>)arg0 {
  return JavaUtilComparator_thenComparingLongWithJavaUtilFunctionToLongFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingDoubleWithJavaUtilFunctionToDoubleFunction:(id<JavaUtilFunctionToDoubleFunction>)arg0 {
  return JavaUtilComparator_thenComparingDoubleWithJavaUtilFunctionToDoubleFunction_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(compareWithId:withId:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "compare", "LASIWidget;LASIWidget;", "LASViewImpl;", "setZIndexWithASIWidget:withId:", "Ljava/lang/Object;Ljava/util/Comparator<Lcom/ashera/widget/IWidget;>;" };
  static const J2ObjcClassInfo _ASViewImpl_1 = { "", "com.ashera.layout", ptrTable, methods, NULL, 7, 0x8000, 2, 0, 2, -1, 3, 4, -1 };
  return &_ASViewImpl_1;
}

@end

void ASViewImpl_1_init(ASViewImpl_1 *self) {
  NSObject_init(self);
}

ASViewImpl_1 *new_ASViewImpl_1_init() {
  J2OBJC_NEW_IMPL(ASViewImpl_1, init)
}

ASViewImpl_1 *create_ASViewImpl_1_init() {
  J2OBJC_CREATE_IMPL(ASViewImpl_1, init)
}

@implementation ASViewImpl_AddRemoveCallBack

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x401, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 2, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(addListenerWithId:);
  methods[1].selector = @selector(removeListenerWithId:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "addListener", "LNSObject;", "removeListener", "LASViewImpl;" };
  static const J2ObjcClassInfo _ASViewImpl_AddRemoveCallBack = { "AddRemoveCallBack", "com.ashera.layout", ptrTable, methods, NULL, 7, 0x608, 2, 0, 3, -1, -1, -1, -1 };
  return &_ASViewImpl_AddRemoveCallBack;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(ASViewImpl_AddRemoveCallBack)

@implementation ASViewImpl_PanCallBack

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x401, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 2, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 3, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(handlePanStartWithASIWidget:withId:withInt:withInt:);
  methods[1].selector = @selector(handlePanDragWithASIWidget:withId:withInt:withInt:);
  methods[2].selector = @selector(handlePanEndWithASIWidget:withId:withInt:withInt:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "handlePanStart", "LASIWidget;LNSObject;II", "handlePanDrag", "handlePanEnd", "LASViewImpl;" };
  static const J2ObjcClassInfo _ASViewImpl_PanCallBack = { "PanCallBack", "com.ashera.layout", ptrTable, methods, NULL, 7, 0x609, 3, 0, 4, -1, -1, -1, -1 };
  return &_ASViewImpl_PanCallBack;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(ASViewImpl_PanCallBack)

@implementation ASViewImpl_AnimationCallBack

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x401, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(animatingWithInt:withInt:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "animating", "II", "LASViewImpl;" };
  static const J2ObjcClassInfo _ASViewImpl_AnimationCallBack = { "AnimationCallBack", "com.ashera.layout", ptrTable, methods, NULL, 7, 0x609, 1, 0, 2, -1, -1, -1, -1 };
  return &_ASViewImpl_AnimationCallBack;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(ASViewImpl_AnimationCallBack)

@implementation ASViewImpl_2

- (instancetype)initWithASIWidget:(id<ASIWidget>)capture$0 {
  ASViewImpl_2_initWithASIWidget_(self, capture$0);
  return self;
}

- (float)getTextWidth {
  ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(val$w_)) asWidget], [ADView class]);
  [((ADView *) nil_chk(view)) measureWithInt:0 withInt:0];
  return [view getMeasuredWidth];
}

- (float)getTextHeight {
  ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(val$w_)) asWidget], [ADView class]);
  [((ADView *) nil_chk(view)) measureWithInt:0 withInt:0];
  return [view getMeasuredHeight];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASIWidget:);
  methods[1].selector = @selector(getTextWidth);
  methods[2].selector = @selector(getTextHeight);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$w_", "LASIWidget;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASIWidget;", "LASViewImpl;", "drawOverlayWithASIWidget:withJavaUtilList:" };
  static const J2ObjcClassInfo _ASViewImpl_2 = { "", "com.ashera.layout", ptrTable, methods, fields, 7, 0x8000, 3, 1, 1, -1, 2, -1, -1 };
  return &_ASViewImpl_2;
}

@end

void ASViewImpl_2_initWithASIWidget_(ASViewImpl_2 *self, id<ASIWidget> capture$0) {
  self->val$w_ = capture$0;
  NSObject_init(self);
}

ASViewImpl_2 *new_ASViewImpl_2_initWithASIWidget_(id<ASIWidget> capture$0) {
  J2OBJC_NEW_IMPL(ASViewImpl_2, initWithASIWidget_, capture$0)
}

ASViewImpl_2 *create_ASViewImpl_2_initWithASIWidget_(id<ASIWidget> capture$0) {
  J2OBJC_CREATE_IMPL(ASViewImpl_2, initWithASIWidget_, capture$0)
}

@implementation ASViewImpl_AnimationContentHandler

- (void)setFactorWithASIWidget:(id<ASIWidget>)w
                  withNSString:(NSString *)value {
  ASViewImpl_AnimationContentHandler_setFactorWithASIWidget_withNSString_(self, w, value);
}

- (void)setTensionWithASIWidget:(id<ASIWidget>)w
                   withNSString:(NSString *)value {
  ASViewImpl_AnimationContentHandler_setTensionWithASIWidget_withNSString_(self, w, value);
}

- (void)setExtraTensionWithASIWidget:(id<ASIWidget>)w
                        withNSString:(NSString *)value {
  ASViewImpl_AnimationContentHandler_setExtraTensionWithASIWidget_withNSString_(self, w, value);
}

- (void)setCyclesWithASIWidget:(id<ASIWidget>)w
                  withNSString:(NSString *)value {
  ASViewImpl_AnimationContentHandler_setCyclesWithASIWidget_withNSString_(self, w, value);
}

- (ADAnimatorSet *)getAnimatorSet {
  return animatorSet_;
}

- (instancetype)initWithASIWidget:(id<ASIWidget>)w {
  ASViewImpl_AnimationContentHandler_initWithASIWidget_(self, w);
  return self;
}

- (void)startElementWithNSString:(NSString *)uri
                    withNSString:(NSString *)localName
                    withNSString:(NSString *)qName
         withOrgXmlSaxAttributes:(id<OrgXmlSaxAttributes>)atts {
  switch (JreIndexOfStr(localName, (id[]){ @"set", @"objectAnimator", @"accelerateInterpolator", @"decelerateInterpolator", @"cycleInterpolator", @"anticipateInterpolator", @"overshootInterpolator", @"anticipateOvershootInterpolator" }, 8)) {
    case 0:
    {
      ADAnimatorSet *animatorSet = new_ADAnimatorSet_init();
      if (self->animatorSet_ == nil) {
        self->animatorSet_ = animatorSet;
      }
      ASViewImpl_AnimationContentHandler_parseAnimatorSetWithASIWidget_withADAnimatorSet_withOrgXmlSaxAttributes_(self, w_, animatorSet, atts);
      (void) [((JavaUtilStack *) nil_chk(animatorSets_)) pushWithId:animatorSet];
      (void) [((JavaUtilStack *) nil_chk(childAnimators_)) pushWithId:new_JavaUtilArrayList_init()];
      (void) [((JavaUtilStack *) nil_chk(sequenceOrderings_)) pushWithId:JavaLangInteger_valueOfWithInt_(self->sequenceOrdering_)];
    }
    break;
    case 1:
    {
      JavaUtilArrayList *childAnims = [((JavaUtilStack *) nil_chk(childAnimators_)) peek];
      ADObjectAnimator *objectAnimator = new_ADObjectAnimator_init();
      ASViewImpl_AnimationContentHandler_parseAnimatorWithASIWidget_withADValueAnimator_withOrgXmlSaxAttributes_(self, w_, objectAnimator, atts);
      if (valueType_ == ASViewImpl_AnimationContentHandler_VALUE_TYPE_UNDEFINED) {
        valueType_ = ASViewImpl_AnimationContentHandler_inferValueTypeFromValuesWithASIWidget_withNSString_withNSString_(w_, valueFrom_, valueTo_);
      }
      ADPropertyValuesHolder *pvh = ASViewImpl_AnimationContentHandler_getPVHWithASIWidget_withInt_withNSString_withNSString_withNSString_(w_, valueType_, valueFrom_, valueTo_, @"");
      if (pvh != nil) {
        [objectAnimator setValuesWithADPropertyValuesHolderArray:[IOSObjectArray newArrayWithObjects:(id[]){ pvh } count:1 type:ADPropertyValuesHolder_class_()]];
      }
      ASViewImpl_AnimationContentHandler_parsePropertyAnimatorWithASIWidget_withADObjectAnimator_withOrgXmlSaxAttributes_(self, w_, objectAnimator, atts);
      if (pathData_ != nil) {
        ASViewImpl_AnimationContentHandler_setUpPathWithADObjectAnimator_(self, objectAnimator);
      }
      [((JavaUtilArrayList *) nil_chk(childAnims)) addWithId:objectAnimator];
    }
    break;
    case 2:
    {
      ASViewImpl_AnimationContentHandler_parseAccelerateInterpolatorWithASIWidget_withOrgXmlSaxAttributes_(self, w_, atts);
      timeInterpolator_ = new_ADAccelerateInterpolator_initWithFloat_(arg0_);
    }
    break;
    case 3:
    {
      ASViewImpl_AnimationContentHandler_parseDecelerateInterpolatorWithASIWidget_withOrgXmlSaxAttributes_(self, w_, atts);
      timeInterpolator_ = new_ADDecelerateInterpolator_initWithFloat_(arg0_);
    }
    break;
    case 4:
    {
      ASViewImpl_AnimationContentHandler_parseCycleInterpolatorWithASIWidget_withOrgXmlSaxAttributes_(self, w_, atts);
      timeInterpolator_ = new_ADCycleInterpolator_initWithFloat_(arg0_);
    }
    break;
    case 5:
    {
      ASViewImpl_AnimationContentHandler_parseAnticipateInterpolatorWithASIWidget_withOrgXmlSaxAttributes_(self, w_, atts);
      timeInterpolator_ = new_ADAnticipateInterpolator_initWithFloat_(arg0_);
    }
    break;
    case 6:
    {
      ASViewImpl_AnimationContentHandler_parseOvershootInterpolatorWithASIWidget_withOrgXmlSaxAttributes_(self, w_, atts);
      timeInterpolator_ = new_ADOvershootInterpolator_initWithFloat_(arg0_);
    }
    break;
    case 7:
    {
      ASViewImpl_AnimationContentHandler_parseAnticipateOvershootInterpolatorWithASIWidget_withOrgXmlSaxAttributes_(self, w_, atts);
      if (arg1_ != 0) {
        timeInterpolator_ = new_ADAnticipateOvershootInterpolator_initWithFloat_(arg0_ * arg1_);
      }
      else {
        timeInterpolator_ = new_ADAnticipateOvershootInterpolator_initWithFloat_(arg0_);
      }
    }
    break;
  }
}

- (void)setUpPathWithADObjectAnimator:(ADObjectAnimator *)objectAnimator {
  ASViewImpl_AnimationContentHandler_setUpPathWithADObjectAnimator_(self, objectAnimator);
}

- (void)endElementWithNSString:(NSString *)uri
                  withNSString:(NSString *)localName
                  withNSString:(NSString *)qName {
  switch (JreIndexOfStr(localName, (id[]){ @"set", @"anticipateOvershootInterpolator", @"overshootInterpolator", @"anticipateInterpolator", @"cycleInterpolator", @"decelerateInterpolator", @"accelerateInterpolator" }, 7)) {
    case 0:
    {
      JavaUtilArrayList *childAnims = [((JavaUtilStack *) nil_chk(childAnimators_)) pop];
      ADAnimatorSet *animatorSet = [((JavaUtilStack *) nil_chk(animatorSets_)) pop];
      int32_t sequenceOrdering = [((JavaLangInteger *) nil_chk([((JavaUtilStack *) nil_chk(sequenceOrderings_)) pop])) intValue];
      if (animatorSet != nil && childAnims != nil) {
        IOSObjectArray *animsArray = [IOSObjectArray newArrayWithLength:[childAnims size] type:ADAnimator_class_()];
        int32_t index = 0;
        for (ADAnimator * __strong a in childAnims) {
          (void) IOSObjectArray_Set(animsArray, index++, a);
        }
        if (sequenceOrdering == ASViewImpl_AnimationContentHandler_TOGETHER) {
          [animatorSet playTogetherWithADAnimatorArray:animsArray];
        }
        else {
          [animatorSet playSequentiallyWithADAnimatorArray:animsArray];
        }
      }
    }
    break;
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    {
      arg0_ = 0;
      arg1_ = 0;
    }
    break;
  }
}

- (void)charactersWithCharArray:(IOSCharArray *)ch
                        withInt:(int32_t)start
                        withInt:(int32_t)length {
}

- (void)setStartOffsetWithASIWidget:(id<ASIWidget>)w
                withADValueAnimator:(ADValueAnimator *)animator
                       withNSString:(NSString *)value {
  ASViewImpl_AnimationContentHandler_setStartOffsetWithASIWidget_withADValueAnimator_withNSString_(self, w, animator, value);
}

- (void)setValueTypeWithASIWidget:(id<ASIWidget>)w
              withADValueAnimator:(ADValueAnimator *)animator
                     withNSString:(NSString *)value {
  ASViewImpl_AnimationContentHandler_setValueTypeWithASIWidget_withADValueAnimator_withNSString_(self, w, animator, value);
}

- (void)setValueToWithASIWidget:(id<ASIWidget>)w
            withADValueAnimator:(ADValueAnimator *)animator
                   withNSString:(NSString *)value {
  ASViewImpl_AnimationContentHandler_setValueToWithASIWidget_withADValueAnimator_withNSString_(self, w, animator, value);
}

- (void)setValueFromWithASIWidget:(id<ASIWidget>)w
              withADValueAnimator:(ADValueAnimator *)animator
                     withNSString:(NSString *)value {
  ASViewImpl_AnimationContentHandler_setValueFromWithASIWidget_withADValueAnimator_withNSString_(self, w, animator, value);
}

- (void)setInterpolatorWithASIWidget:(id<ASIWidget>)w
                 withADValueAnimator:(ADValueAnimator *)animator
                        withNSString:(NSString *)value {
  ASViewImpl_AnimationContentHandler_setInterpolatorWithASIWidget_withADValueAnimator_withNSString_(self, w, animator, value);
}

- (void)setPathDataWithASIWidget:(id<ASIWidget>)w
            withADObjectAnimator:(ADObjectAnimator *)animator
                    withNSString:(NSString *)value {
  ASViewImpl_AnimationContentHandler_setPathDataWithASIWidget_withADObjectAnimator_withNSString_(self, w, animator, value);
}

- (void)setPropertyYNameWithASIWidget:(id<ASIWidget>)w
                 withADObjectAnimator:(ADObjectAnimator *)animator
                         withNSString:(NSString *)value {
  ASViewImpl_AnimationContentHandler_setPropertyYNameWithASIWidget_withADObjectAnimator_withNSString_(self, w, animator, value);
}

- (void)setPropertyXNameWithASIWidget:(id<ASIWidget>)w
                 withADObjectAnimator:(ADObjectAnimator *)animator
                         withNSString:(NSString *)value {
  ASViewImpl_AnimationContentHandler_setPropertyXNameWithASIWidget_withADObjectAnimator_withNSString_(self, w, animator, value);
}

- (void)setOrderingWithASIWidget:(id<ASIWidget>)w
               withADAnimatorSet:(ADAnimatorSet *)animatorSet
                    withNSString:(NSString *)value {
  ASViewImpl_AnimationContentHandler_setOrderingWithASIWidget_withADAnimatorSet_withNSString_(self, w, animatorSet, value);
}

+ (int32_t)inferValueTypeFromValuesWithASIWidget:(id<ASIWidget>)w
                                    withNSString:(NSString *)valueFromId
                                    withNSString:(NSString *)valueToId {
  return ASViewImpl_AnimationContentHandler_inferValueTypeFromValuesWithASIWidget_withNSString_withNSString_(w, valueFromId, valueToId);
}

+ (ADPropertyValuesHolder *)getPVHWithASIWidget:(id<ASIWidget>)w
                                        withInt:(int32_t)valueType
                                   withNSString:(NSString *)valueFromId
                                   withNSString:(NSString *)valueToId
                                   withNSString:(NSString *)propertyName {
  return ASViewImpl_AnimationContentHandler_getPVHWithASIWidget_withInt_withNSString_withNSString_withNSString_(w, valueType, valueFromId, valueToId, propertyName);
}

+ (bool)isColorWithNSString:(NSString *)val {
  return ASViewImpl_AnimationContentHandler_isColorWithNSString_(val);
}

+ (bool)isDimenWithNSString:(NSString *)val {
  return ASViewImpl_AnimationContentHandler_isDimenWithNSString_(val);
}

- (void)parseAnimatorWithASIWidget:(id<ASIWidget>)w
               withADValueAnimator:(ADValueAnimator *)animator
           withOrgXmlSaxAttributes:(id<OrgXmlSaxAttributes>)atts {
  ASViewImpl_AnimationContentHandler_parseAnimatorWithASIWidget_withADValueAnimator_withOrgXmlSaxAttributes_(self, w, animator, atts);
}

- (void)setDurationWithASIWidget:(id<ASIWidget>)w
             withADValueAnimator:(ADValueAnimator *)animator
                    withNSString:(NSString *)strValue {
  ASViewImpl_AnimationContentHandler_setDurationWithASIWidget_withADValueAnimator_withNSString_(self, w, animator, strValue);
}

- (int32_t)getRepeatCountWithNSString:(NSString *)value
                        withASIWidget:(id<ASIWidget>)w {
  return ASViewImpl_AnimationContentHandler_getRepeatCountWithNSString_withASIWidget_(self, value, w);
}

- (void)setRepeatCountWithASIWidget:(id<ASIWidget>)w
                withADValueAnimator:(ADValueAnimator *)animator
                       withNSString:(NSString *)strValue {
  ASViewImpl_AnimationContentHandler_setRepeatCountWithASIWidget_withADValueAnimator_withNSString_(self, w, animator, strValue);
}

- (int32_t)getRepeatModeWithNSString:(NSString *)value {
  return ASViewImpl_AnimationContentHandler_getRepeatModeWithNSString_(self, value);
}

- (void)setRepeatModeWithASIWidget:(id<ASIWidget>)w
               withADValueAnimator:(ADValueAnimator *)animator
                      withNSString:(NSString *)strValue {
  ASViewImpl_AnimationContentHandler_setRepeatModeWithASIWidget_withADValueAnimator_withNSString_(self, w, animator, strValue);
}

- (int32_t)getValueTypeWithNSString:(NSString *)value {
  return ASViewImpl_AnimationContentHandler_getValueTypeWithNSString_(self, value);
}

- (void)parsePropertyAnimatorWithASIWidget:(id<ASIWidget>)w
                      withADObjectAnimator:(ADObjectAnimator *)animator
                   withOrgXmlSaxAttributes:(id<OrgXmlSaxAttributes>)atts {
  ASViewImpl_AnimationContentHandler_parsePropertyAnimatorWithASIWidget_withADObjectAnimator_withOrgXmlSaxAttributes_(self, w, animator, atts);
}

- (void)setPropertyNameWithASIWidget:(id<ASIWidget>)w
                withADObjectAnimator:(ADObjectAnimator *)animator
                        withNSString:(NSString *)strValue {
  ASViewImpl_AnimationContentHandler_setPropertyNameWithASIWidget_withADObjectAnimator_withNSString_(self, w, animator, strValue);
}

- (void)parseAnimatorSetWithASIWidget:(id<ASIWidget>)w
                    withADAnimatorSet:(ADAnimatorSet *)animatorSet
              withOrgXmlSaxAttributes:(id<OrgXmlSaxAttributes>)atts {
  ASViewImpl_AnimationContentHandler_parseAnimatorSetWithASIWidget_withADAnimatorSet_withOrgXmlSaxAttributes_(self, w, animatorSet, atts);
}

- (int32_t)getOrderingWithNSString:(NSString *)value {
  return ASViewImpl_AnimationContentHandler_getOrderingWithNSString_(self, value);
}

- (void)parseAccelerateInterpolatorWithASIWidget:(id<ASIWidget>)w
                         withOrgXmlSaxAttributes:(id<OrgXmlSaxAttributes>)atts {
  ASViewImpl_AnimationContentHandler_parseAccelerateInterpolatorWithASIWidget_withOrgXmlSaxAttributes_(self, w, atts);
}

- (void)parseDecelerateInterpolatorWithASIWidget:(id<ASIWidget>)w
                         withOrgXmlSaxAttributes:(id<OrgXmlSaxAttributes>)atts {
  ASViewImpl_AnimationContentHandler_parseDecelerateInterpolatorWithASIWidget_withOrgXmlSaxAttributes_(self, w, atts);
}

- (void)parseCycleInterpolatorWithASIWidget:(id<ASIWidget>)w
                    withOrgXmlSaxAttributes:(id<OrgXmlSaxAttributes>)atts {
  ASViewImpl_AnimationContentHandler_parseCycleInterpolatorWithASIWidget_withOrgXmlSaxAttributes_(self, w, atts);
}

- (void)parseAnticipateInterpolatorWithASIWidget:(id<ASIWidget>)w
                         withOrgXmlSaxAttributes:(id<OrgXmlSaxAttributes>)atts {
  ASViewImpl_AnimationContentHandler_parseAnticipateInterpolatorWithASIWidget_withOrgXmlSaxAttributes_(self, w, atts);
}

- (void)parseOvershootInterpolatorWithASIWidget:(id<ASIWidget>)w
                        withOrgXmlSaxAttributes:(id<OrgXmlSaxAttributes>)atts {
  ASViewImpl_AnimationContentHandler_parseOvershootInterpolatorWithASIWidget_withOrgXmlSaxAttributes_(self, w, atts);
}

- (void)parseAnticipateOvershootInterpolatorWithASIWidget:(id<ASIWidget>)w
                                  withOrgXmlSaxAttributes:(id<OrgXmlSaxAttributes>)atts {
  ASViewImpl_AnimationContentHandler_parseAnticipateOvershootInterpolatorWithASIWidget_withOrgXmlSaxAttributes_(self, w, atts);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x2, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 2, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 3, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 4, 1, -1, -1, -1, -1 },
    { NULL, "LADAnimatorSet;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, 8, -1, -1, -1 },
    { NULL, "V", 0x2, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 12, 8, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 14, 8, -1, -1, -1 },
    { NULL, "V", 0x2, 15, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 17, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 18, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 19, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 20, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 21, 22, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 23, 22, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 24, 22, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 25, 26, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 27, 28, -1, -1, -1, -1 },
    { NULL, "LADPropertyValuesHolder;", 0xa, 29, 30, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 31, 32, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 33, 32, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 34, 35, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 36, 16, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 37, 38, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 39, 16, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 40, 32, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 41, 16, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 42, 32, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 43, 44, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 45, 22, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 46, 47, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 48, 32, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 49, 50, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 51, 50, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 52, 50, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 53, 50, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 54, 50, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 55, 50, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(setFactorWithASIWidget:withNSString:);
  methods[1].selector = @selector(setTensionWithASIWidget:withNSString:);
  methods[2].selector = @selector(setExtraTensionWithASIWidget:withNSString:);
  methods[3].selector = @selector(setCyclesWithASIWidget:withNSString:);
  methods[4].selector = @selector(getAnimatorSet);
  methods[5].selector = @selector(initWithASIWidget:);
  methods[6].selector = @selector(startElementWithNSString:withNSString:withNSString:withOrgXmlSaxAttributes:);
  methods[7].selector = @selector(setUpPathWithADObjectAnimator:);
  methods[8].selector = @selector(endElementWithNSString:withNSString:withNSString:);
  methods[9].selector = @selector(charactersWithCharArray:withInt:withInt:);
  methods[10].selector = @selector(setStartOffsetWithASIWidget:withADValueAnimator:withNSString:);
  methods[11].selector = @selector(setValueTypeWithASIWidget:withADValueAnimator:withNSString:);
  methods[12].selector = @selector(setValueToWithASIWidget:withADValueAnimator:withNSString:);
  methods[13].selector = @selector(setValueFromWithASIWidget:withADValueAnimator:withNSString:);
  methods[14].selector = @selector(setInterpolatorWithASIWidget:withADValueAnimator:withNSString:);
  methods[15].selector = @selector(setPathDataWithASIWidget:withADObjectAnimator:withNSString:);
  methods[16].selector = @selector(setPropertyYNameWithASIWidget:withADObjectAnimator:withNSString:);
  methods[17].selector = @selector(setPropertyXNameWithASIWidget:withADObjectAnimator:withNSString:);
  methods[18].selector = @selector(setOrderingWithASIWidget:withADAnimatorSet:withNSString:);
  methods[19].selector = @selector(inferValueTypeFromValuesWithASIWidget:withNSString:withNSString:);
  methods[20].selector = @selector(getPVHWithASIWidget:withInt:withNSString:withNSString:withNSString:);
  methods[21].selector = @selector(isColorWithNSString:);
  methods[22].selector = @selector(isDimenWithNSString:);
  methods[23].selector = @selector(parseAnimatorWithASIWidget:withADValueAnimator:withOrgXmlSaxAttributes:);
  methods[24].selector = @selector(setDurationWithASIWidget:withADValueAnimator:withNSString:);
  methods[25].selector = @selector(getRepeatCountWithNSString:withASIWidget:);
  methods[26].selector = @selector(setRepeatCountWithASIWidget:withADValueAnimator:withNSString:);
  methods[27].selector = @selector(getRepeatModeWithNSString:);
  methods[28].selector = @selector(setRepeatModeWithASIWidget:withADValueAnimator:withNSString:);
  methods[29].selector = @selector(getValueTypeWithNSString:);
  methods[30].selector = @selector(parsePropertyAnimatorWithASIWidget:withADObjectAnimator:withOrgXmlSaxAttributes:);
  methods[31].selector = @selector(setPropertyNameWithASIWidget:withADObjectAnimator:withNSString:);
  methods[32].selector = @selector(parseAnimatorSetWithASIWidget:withADAnimatorSet:withOrgXmlSaxAttributes:);
  methods[33].selector = @selector(getOrderingWithNSString:);
  methods[34].selector = @selector(parseAccelerateInterpolatorWithASIWidget:withOrgXmlSaxAttributes:);
  methods[35].selector = @selector(parseDecelerateInterpolatorWithASIWidget:withOrgXmlSaxAttributes:);
  methods[36].selector = @selector(parseCycleInterpolatorWithASIWidget:withOrgXmlSaxAttributes:);
  methods[37].selector = @selector(parseAnticipateInterpolatorWithASIWidget:withOrgXmlSaxAttributes:);
  methods[38].selector = @selector(parseOvershootInterpolatorWithASIWidget:withOrgXmlSaxAttributes:);
  methods[39].selector = @selector(parseAnticipateOvershootInterpolatorWithASIWidget:withOrgXmlSaxAttributes:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "VALUE_TYPE_FLOAT", "I", .constantValue.asInt = ASViewImpl_AnimationContentHandler_VALUE_TYPE_FLOAT, 0x1a, -1, -1, -1, -1 },
    { "VALUE_TYPE_INT", "I", .constantValue.asInt = ASViewImpl_AnimationContentHandler_VALUE_TYPE_INT, 0x1a, -1, -1, -1, -1 },
    { "VALUE_TYPE_PATH", "I", .constantValue.asInt = ASViewImpl_AnimationContentHandler_VALUE_TYPE_PATH, 0x1a, -1, -1, -1, -1 },
    { "VALUE_TYPE_COLOR", "I", .constantValue.asInt = ASViewImpl_AnimationContentHandler_VALUE_TYPE_COLOR, 0x1a, -1, -1, -1, -1 },
    { "VALUE_TYPE_UNDEFINED", "I", .constantValue.asInt = ASViewImpl_AnimationContentHandler_VALUE_TYPE_UNDEFINED, 0x1a, -1, -1, -1, -1 },
    { "valueType_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "TOGETHER", "I", .constantValue.asInt = ASViewImpl_AnimationContentHandler_TOGETHER, 0x1a, -1, -1, -1, -1 },
    { "SEQUENTIALLY", "I", .constantValue.asInt = ASViewImpl_AnimationContentHandler_SEQUENTIALLY, 0x1a, -1, -1, -1, -1 },
    { "valueTo_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "valueFrom_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "sequenceOrderings_", "LJavaUtilStack;", .constantValue.asLong = 0, 0x2, -1, -1, 56, -1 },
    { "sequenceOrdering_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "w_", "LASIWidget;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "childAnimators_", "LJavaUtilStack;", .constantValue.asLong = 0, 0x2, -1, -1, 57, -1 },
    { "animatorSets_", "LJavaUtilStack;", .constantValue.asLong = 0, 0x2, -1, -1, 58, -1 },
    { "animatorSet_", "LADAnimatorSet;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "arg0_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "arg1_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "extraTension_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "cycles_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "timeInterpolator_", "LADInterpolator;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "pathData_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "propertyYName_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "propertyXName_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setFactor", "LASIWidget;LNSString;", "setTension", "setExtraTension", "setCycles", "LASIWidget;", "startElement", "LNSString;LNSString;LNSString;LOrgXmlSaxAttributes;", "LOrgXmlSaxSAXException;", "setUpPath", "LADObjectAnimator;", "endElement", "LNSString;LNSString;LNSString;", "characters", "[CII", "setStartOffset", "LASIWidget;LADValueAnimator;LNSString;", "setValueType", "setValueTo", "setValueFrom", "setInterpolator", "setPathData", "LASIWidget;LADObjectAnimator;LNSString;", "setPropertyYName", "setPropertyXName", "setOrdering", "LASIWidget;LADAnimatorSet;LNSString;", "inferValueTypeFromValues", "LASIWidget;LNSString;LNSString;", "getPVH", "LASIWidget;ILNSString;LNSString;LNSString;", "isColor", "LNSString;", "isDimen", "parseAnimator", "LASIWidget;LADValueAnimator;LOrgXmlSaxAttributes;", "setDuration", "getRepeatCount", "LNSString;LASIWidget;", "setRepeatCount", "getRepeatMode", "setRepeatMode", "getValueType", "parsePropertyAnimator", "LASIWidget;LADObjectAnimator;LOrgXmlSaxAttributes;", "setPropertyName", "parseAnimatorSet", "LASIWidget;LADAnimatorSet;LOrgXmlSaxAttributes;", "getOrdering", "parseAccelerateInterpolator", "LASIWidget;LOrgXmlSaxAttributes;", "parseDecelerateInterpolator", "parseCycleInterpolator", "parseAnticipateInterpolator", "parseOvershootInterpolator", "parseAnticipateOvershootInterpolator", "Ljava/util/Stack<Ljava/lang/Integer;>;", "Ljava/util/Stack<Ljava/util/ArrayList<Lr/android/animation/Animator;>;>;", "Ljava/util/Stack<Lr/android/animation/AnimatorSet;>;", "LASViewImpl;", "LASViewImpl_AnimationContentHandler_CustomTypeConverterX;LASViewImpl_AnimationContentHandler_CustomTypeConverterY;" };
  static const J2ObjcClassInfo _ASViewImpl_AnimationContentHandler = { "AnimationContentHandler", "com.ashera.layout", ptrTable, methods, fields, 7, 0xa, 40, 24, 59, 60, -1, -1, -1 };
  return &_ASViewImpl_AnimationContentHandler;
}

@end

void ASViewImpl_AnimationContentHandler_setFactorWithASIWidget_withNSString_(ASViewImpl_AnimationContentHandler *self, id<ASIWidget> w, NSString *value) {
  self->arg0_ = [((JavaLangFloat *) nil_chk((JavaLangFloat *) cast_chk([((id<ASIWidget>) nil_chk(w)) quickConvertWithId:value withNSString:@"float"], [JavaLangFloat class]))) floatValue];
}

void ASViewImpl_AnimationContentHandler_setTensionWithASIWidget_withNSString_(ASViewImpl_AnimationContentHandler *self, id<ASIWidget> w, NSString *value) {
  self->arg0_ = [((JavaLangFloat *) nil_chk((JavaLangFloat *) cast_chk([((id<ASIWidget>) nil_chk(w)) quickConvertWithId:value withNSString:@"float"], [JavaLangFloat class]))) floatValue];
}

void ASViewImpl_AnimationContentHandler_setExtraTensionWithASIWidget_withNSString_(ASViewImpl_AnimationContentHandler *self, id<ASIWidget> w, NSString *value) {
  self->arg1_ = [((JavaLangFloat *) nil_chk((JavaLangFloat *) cast_chk([((id<ASIWidget>) nil_chk(w)) quickConvertWithId:value withNSString:@"float"], [JavaLangFloat class]))) floatValue];
}

void ASViewImpl_AnimationContentHandler_setCyclesWithASIWidget_withNSString_(ASViewImpl_AnimationContentHandler *self, id<ASIWidget> w, NSString *value) {
  self->arg0_ = [((JavaLangFloat *) nil_chk((JavaLangFloat *) cast_chk([((id<ASIWidget>) nil_chk(w)) quickConvertWithId:value withNSString:@"float"], [JavaLangFloat class]))) floatValue];
}

void ASViewImpl_AnimationContentHandler_initWithASIWidget_(ASViewImpl_AnimationContentHandler *self, id<ASIWidget> w) {
  ASContentHandlerAdapter_init(self);
  self->valueType_ = ASViewImpl_AnimationContentHandler_VALUE_TYPE_UNDEFINED;
  self->sequenceOrderings_ = new_JavaUtilStack_init();
  self->childAnimators_ = new_JavaUtilStack_init();
  self->animatorSets_ = new_JavaUtilStack_init();
  self->w_ = w;
}

ASViewImpl_AnimationContentHandler *new_ASViewImpl_AnimationContentHandler_initWithASIWidget_(id<ASIWidget> w) {
  J2OBJC_NEW_IMPL(ASViewImpl_AnimationContentHandler, initWithASIWidget_, w)
}

ASViewImpl_AnimationContentHandler *create_ASViewImpl_AnimationContentHandler_initWithASIWidget_(id<ASIWidget> w) {
  J2OBJC_CREATE_IMPL(ASViewImpl_AnimationContentHandler, initWithASIWidget_, w)
}

void ASViewImpl_AnimationContentHandler_setUpPathWithADObjectAnimator_(ASViewImpl_AnimationContentHandler *self, ADObjectAnimator *objectAnimator) {
  if (self->valueType_ == ASViewImpl_AnimationContentHandler_VALUE_TYPE_PATH || self->valueType_ == ASViewImpl_AnimationContentHandler_VALUE_TYPE_UNDEFINED) {
    self->valueType_ = ASViewImpl_AnimationContentHandler_VALUE_TYPE_FLOAT;
  }
  if (self->propertyXName_ == nil && self->propertyYName_ == nil) {
    @throw new_JavaLangRuntimeException_initWithNSString_(@" propertyXName or propertyYName is needed for PathData");
  }
  else {
    ADPath *path = ADPath_createPathFromPathDataWithNSString_(self->pathData_);
    ADPropertyValuesHolder *x = nil;
    ADPropertyValuesHolder *y = nil;
    if (self->propertyXName_ != nil) {
      x = ADPropertyValuesHolder_ofObjectWithADProperty_withADTypeConverter_withADPath_(new_ASViewImpl_CustomProperty_initWithIOSClass_withNSString_([nil_chk([((id<ASIWidget>) nil_chk(self->w_)) asWidget]) java_getClass], self->propertyXName_), new_ASViewImpl_AnimationContentHandler_CustomTypeConverterX_initWithASViewImpl_AnimationContentHandler_withIOSClass_withIOSClass_(self, ADPointF_class_(), JavaLangFloat_class_()), path);
    }
    if (self->propertyYName_ != nil) {
      y = ADPropertyValuesHolder_ofObjectWithADProperty_withADTypeConverter_withADPath_(new_ASViewImpl_CustomProperty_initWithIOSClass_withNSString_([nil_chk([((id<ASIWidget>) nil_chk(self->w_)) asWidget]) java_getClass], self->propertyYName_), new_ASViewImpl_AnimationContentHandler_CustomTypeConverterY_initWithASViewImpl_AnimationContentHandler_withIOSClass_withIOSClass_(self, ADPointF_class_(), JavaLangFloat_class_()), path);
    }
    if (x == nil) {
      [((ADObjectAnimator *) nil_chk(objectAnimator)) setValuesWithADPropertyValuesHolderArray:[IOSObjectArray newArrayWithObjects:(id[]){ y } count:1 type:ADPropertyValuesHolder_class_()]];
    }
    else if (y == nil) {
      [((ADObjectAnimator *) nil_chk(objectAnimator)) setValuesWithADPropertyValuesHolderArray:[IOSObjectArray newArrayWithObjects:(id[]){ x } count:1 type:ADPropertyValuesHolder_class_()]];
    }
    else {
      [((ADObjectAnimator *) nil_chk(objectAnimator)) setValuesWithADPropertyValuesHolderArray:[IOSObjectArray newArrayWithObjects:(id[]){ x, y } count:2 type:ADPropertyValuesHolder_class_()]];
    }
  }
}

void ASViewImpl_AnimationContentHandler_setStartOffsetWithASIWidget_withADValueAnimator_withNSString_(ASViewImpl_AnimationContentHandler *self, id<ASIWidget> w, ADValueAnimator *animator, NSString *value) {
  [((ADValueAnimator *) nil_chk(animator)) setStartDelayWithLong:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([((id<ASIWidget>) nil_chk(w)) quickConvertWithId:value withNSString:@"int"], [JavaLangInteger class]))) intValue]];
}

void ASViewImpl_AnimationContentHandler_setValueTypeWithASIWidget_withADValueAnimator_withNSString_(ASViewImpl_AnimationContentHandler *self, id<ASIWidget> w, ADValueAnimator *animator, NSString *value) {
  self->valueType_ = ASViewImpl_AnimationContentHandler_getValueTypeWithNSString_(self, value);
}

void ASViewImpl_AnimationContentHandler_setValueToWithASIWidget_withADValueAnimator_withNSString_(ASViewImpl_AnimationContentHandler *self, id<ASIWidget> w, ADValueAnimator *animator, NSString *value) {
  self->valueTo_ = value;
}

void ASViewImpl_AnimationContentHandler_setValueFromWithASIWidget_withADValueAnimator_withNSString_(ASViewImpl_AnimationContentHandler *self, id<ASIWidget> w, ADValueAnimator *animator, NSString *value) {
  self->valueFrom_ = value;
}

void ASViewImpl_AnimationContentHandler_setInterpolatorWithASIWidget_withADValueAnimator_withNSString_(ASViewImpl_AnimationContentHandler *self, id<ASIWidget> w, ADValueAnimator *animator, NSString *value) {
  NSString *html = [((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w)) getFragment])) getInlineResourceWithNSString:value];
  if (html == nil) {
    html = ASPluginInvoker_getFileAssetWithNSString_withASIFragment_(JreStrcat("$$", [((NSString *) nil_chk((value))) java_replace:@"@" withSequence:@""], @".xml"), [w getFragment]);
  }
  self->timeInterpolator_ = nil;
  ASHtmlParser_parseWithOrgXmlSaxContentHandler_withNSString_(self, html);
  [((ADValueAnimator *) nil_chk(animator)) setInterpolatorWithADTimeInterpolator:self->timeInterpolator_];
}

void ASViewImpl_AnimationContentHandler_setPathDataWithASIWidget_withADObjectAnimator_withNSString_(ASViewImpl_AnimationContentHandler *self, id<ASIWidget> w, ADObjectAnimator *animator, NSString *value) {
  self->pathData_ = value;
}

void ASViewImpl_AnimationContentHandler_setPropertyYNameWithASIWidget_withADObjectAnimator_withNSString_(ASViewImpl_AnimationContentHandler *self, id<ASIWidget> w, ADObjectAnimator *animator, NSString *value) {
  self->propertyYName_ = value;
}

void ASViewImpl_AnimationContentHandler_setPropertyXNameWithASIWidget_withADObjectAnimator_withNSString_(ASViewImpl_AnimationContentHandler *self, id<ASIWidget> w, ADObjectAnimator *animator, NSString *value) {
  self->propertyXName_ = value;
}

void ASViewImpl_AnimationContentHandler_setOrderingWithASIWidget_withADAnimatorSet_withNSString_(ASViewImpl_AnimationContentHandler *self, id<ASIWidget> w, ADAnimatorSet *animatorSet, NSString *value) {
  self->sequenceOrdering_ = ASViewImpl_AnimationContentHandler_getOrderingWithNSString_(self, value);
}

int32_t ASViewImpl_AnimationContentHandler_inferValueTypeFromValuesWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *valueFromId, NSString *valueToId) {
  ASViewImpl_AnimationContentHandler_initialize();
  bool hasFrom = (valueFromId != nil);
  bool hasTo = (valueToId != nil);
  int32_t valueType;
  if ((hasFrom && ASViewImpl_AnimationContentHandler_isColorWithNSString_(valueFromId)) || (hasTo && ASViewImpl_AnimationContentHandler_isColorWithNSString_(valueToId))) {
    valueType = ASViewImpl_AnimationContentHandler_VALUE_TYPE_COLOR;
  }
  else {
    valueType = ASViewImpl_AnimationContentHandler_VALUE_TYPE_FLOAT;
  }
  return valueType;
}

ADPropertyValuesHolder *ASViewImpl_AnimationContentHandler_getPVHWithASIWidget_withInt_withNSString_withNSString_withNSString_(id<ASIWidget> w, int32_t valueType, NSString *valueFromId, NSString *valueToId, NSString *propertyName) {
  ASViewImpl_AnimationContentHandler_initialize();
  bool hasFrom = (valueFromId != nil);
  bool hasTo = (valueToId != nil);
  if (valueType == ASViewImpl_AnimationContentHandler_VALUE_TYPE_UNDEFINED) {
    if ((hasFrom && ASViewImpl_AnimationContentHandler_isColorWithNSString_(valueFromId)) || (hasTo && ASViewImpl_AnimationContentHandler_isColorWithNSString_(valueToId))) {
      valueType = ASViewImpl_AnimationContentHandler_VALUE_TYPE_COLOR;
    }
    else {
      valueType = ASViewImpl_AnimationContentHandler_VALUE_TYPE_FLOAT;
    }
  }
  bool getFloats = valueType == ASViewImpl_AnimationContentHandler_VALUE_TYPE_FLOAT;
  ADPropertyValuesHolder *returnValue = nil;
  if (valueType == ASViewImpl_AnimationContentHandler_VALUE_TYPE_PATH) {
  }
  else {
    id<ADTypeEvaluator> evaluator = nil;
    if (valueType == ASViewImpl_AnimationContentHandler_VALUE_TYPE_COLOR) {
      evaluator = new_ADArgbEvaluator_init();
    }
    if (getFloats) {
      float valueFrom;
      float valueTo;
      if (hasFrom) {
        if (ASViewImpl_AnimationContentHandler_isDimenWithNSString_(valueFromId)) {
          valueFrom = [((JavaLangFloat *) nil_chk((JavaLangFloat *) cast_chk([((id<ASIWidget>) nil_chk(w)) quickConvertWithId:valueFromId withNSString:@"dimensionfloat"], [JavaLangFloat class]))) floatValue];
        }
        else {
          valueFrom = [((JavaLangFloat *) nil_chk((JavaLangFloat *) cast_chk([((id<ASIWidget>) nil_chk(w)) quickConvertWithId:valueFromId withNSString:@"float"], [JavaLangFloat class]))) floatValue];
        }
        if (hasTo) {
          if (ASViewImpl_AnimationContentHandler_isDimenWithNSString_(valueToId)) {
            valueTo = [((JavaLangFloat *) nil_chk((JavaLangFloat *) cast_chk([w quickConvertWithId:valueToId withNSString:@"dimensionfloat"], [JavaLangFloat class]))) floatValue];
          }
          else {
            valueTo = [((JavaLangFloat *) nil_chk((JavaLangFloat *) cast_chk([w quickConvertWithId:valueToId withNSString:@"float"], [JavaLangFloat class]))) floatValue];
          }
          returnValue = ADPropertyValuesHolder_ofFloatWithNSString_withFloatArray_(propertyName, [IOSFloatArray newArrayWithFloats:(float[]){ valueFrom, valueTo } count:2]);
        }
        else {
          returnValue = ADPropertyValuesHolder_ofFloatWithNSString_withFloatArray_(propertyName, [IOSFloatArray newArrayWithFloats:(float[]){ valueFrom } count:1]);
        }
      }
      else {
        if (ASViewImpl_AnimationContentHandler_isDimenWithNSString_(valueToId)) {
          valueTo = [((JavaLangFloat *) nil_chk((JavaLangFloat *) cast_chk([((id<ASIWidget>) nil_chk(w)) quickConvertWithId:valueToId withNSString:@"dimensionfloat"], [JavaLangFloat class]))) floatValue];
        }
        else {
          valueTo = [((JavaLangFloat *) nil_chk((JavaLangFloat *) cast_chk([((id<ASIWidget>) nil_chk(w)) quickConvertWithId:valueToId withNSString:@"float"], [JavaLangFloat class]))) floatValue];
        }
        returnValue = ADPropertyValuesHolder_ofFloatWithNSString_withFloatArray_(propertyName, [IOSFloatArray newArrayWithFloats:(float[]){ valueTo } count:1]);
      }
    }
    else {
      int32_t valueFrom;
      int32_t valueTo;
      if (hasFrom) {
        if (ASViewImpl_AnimationContentHandler_isDimenWithNSString_(valueFromId)) {
          valueFrom = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([((id<ASIWidget>) nil_chk(w)) quickConvertWithId:valueFromId withNSString:@"dimension"], [JavaLangInteger class]))) intValue];
        }
        else if (ASViewImpl_AnimationContentHandler_isColorWithNSString_(valueFromId)) {
          valueFrom = ADColor_parseColorWithNSString_(valueFromId);
        }
        else {
          valueFrom = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([((id<ASIWidget>) nil_chk(w)) quickConvertWithId:valueFromId withNSString:@"int"], [JavaLangInteger class]))) intValue];
        }
        if (hasTo) {
          if (ASViewImpl_AnimationContentHandler_isDimenWithNSString_(valueToId)) {
            valueTo = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([((id<ASIWidget>) nil_chk(w)) quickConvertWithId:valueToId withNSString:@"dimension"], [JavaLangInteger class]))) intValue];
          }
          else if (ASViewImpl_AnimationContentHandler_isColorWithNSString_(valueToId)) {
            valueTo = ADColor_parseColorWithNSString_(valueToId);
          }
          else {
            valueTo = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([((id<ASIWidget>) nil_chk(w)) quickConvertWithId:valueToId withNSString:@"int"], [JavaLangInteger class]))) intValue];
          }
          returnValue = ADPropertyValuesHolder_ofIntWithNSString_withIntArray_(propertyName, [IOSIntArray newArrayWithInts:(int32_t[]){ valueFrom, valueTo } count:2]);
        }
        else {
          returnValue = ADPropertyValuesHolder_ofIntWithNSString_withIntArray_(propertyName, [IOSIntArray newArrayWithInts:(int32_t[]){ valueFrom } count:1]);
        }
      }
      else {
        if (hasTo) {
          if (ASViewImpl_AnimationContentHandler_isDimenWithNSString_(valueToId)) {
            valueTo = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([((id<ASIWidget>) nil_chk(w)) quickConvertWithId:valueToId withNSString:@"dimension"], [JavaLangInteger class]))) intValue];
          }
          else if (ASViewImpl_AnimationContentHandler_isColorWithNSString_(valueToId)) {
            valueTo = ADColor_parseColorWithNSString_(valueToId);
          }
          else {
            valueTo = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([((id<ASIWidget>) nil_chk(w)) quickConvertWithId:valueToId withNSString:@"int"], [JavaLangInteger class]))) intValue];
          }
          returnValue = ADPropertyValuesHolder_ofIntWithNSString_withIntArray_(propertyName, [IOSIntArray newArrayWithInts:(int32_t[]){ valueTo } count:1]);
        }
      }
    }
    if (returnValue != nil && evaluator != nil) {
      [returnValue setEvaluatorWithADTypeEvaluator:evaluator];
    }
  }
  return returnValue;
}

bool ASViewImpl_AnimationContentHandler_isColorWithNSString_(NSString *val) {
  ASViewImpl_AnimationContentHandler_initialize();
  return [((NSString *) nil_chk(val)) java_hasPrefix:@"#"] || [val java_hasPrefix:@"@color/"];
}

bool ASViewImpl_AnimationContentHandler_isDimenWithNSString_(NSString *val) {
  ASViewImpl_AnimationContentHandler_initialize();
  return [((NSString *) nil_chk(val)) java_hasSuffix:@"dp"] || [val java_hasSuffix:@"sp"];
}

void ASViewImpl_AnimationContentHandler_parseAnimatorWithASIWidget_withADValueAnimator_withOrgXmlSaxAttributes_(ASViewImpl_AnimationContentHandler *self, id<ASIWidget> w, ADValueAnimator *animator, id<OrgXmlSaxAttributes> atts) {
  for (int32_t i = 0; i < [((id<OrgXmlSaxAttributes>) nil_chk(atts)) getLength]; i++) {
    NSString *name = [atts getLocalNameWithInt:i];
    NSString *value = ASViewImpl_getValueWithNSString_withOrgXmlSaxAttributes_(name, atts);
    switch (JreIndexOfStr([atts getLocalNameWithInt:i], (id[]){ @"interpolator", @"duration", @"startOffset", @"repeatCount", @"repeatMode", @"valueFrom", @"valueTo", @"valueType" }, 8)) {
      case 0:
      ASViewImpl_AnimationContentHandler_setInterpolatorWithASIWidget_withADValueAnimator_withNSString_(self, w, animator, value);
      break;
      case 1:
      ASViewImpl_AnimationContentHandler_setDurationWithASIWidget_withADValueAnimator_withNSString_(self, w, animator, value);
      break;
      case 2:
      ASViewImpl_AnimationContentHandler_setStartOffsetWithASIWidget_withADValueAnimator_withNSString_(self, w, animator, value);
      break;
      case 3:
      ASViewImpl_AnimationContentHandler_setRepeatCountWithASIWidget_withADValueAnimator_withNSString_(self, w, animator, value);
      break;
      case 4:
      ASViewImpl_AnimationContentHandler_setRepeatModeWithASIWidget_withADValueAnimator_withNSString_(self, w, animator, value);
      break;
      case 5:
      ASViewImpl_AnimationContentHandler_setValueFromWithASIWidget_withADValueAnimator_withNSString_(self, w, animator, value);
      break;
      case 6:
      ASViewImpl_AnimationContentHandler_setValueToWithASIWidget_withADValueAnimator_withNSString_(self, w, animator, value);
      break;
      case 7:
      ASViewImpl_AnimationContentHandler_setValueTypeWithASIWidget_withADValueAnimator_withNSString_(self, w, animator, value);
      break;
    }
  }
}

void ASViewImpl_AnimationContentHandler_setDurationWithASIWidget_withADValueAnimator_withNSString_(ASViewImpl_AnimationContentHandler *self, id<ASIWidget> w, ADValueAnimator *animator, NSString *strValue) {
  (void) [((ADValueAnimator *) nil_chk(animator)) setDurationWithLong:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"int"], [JavaLangInteger class]))) intValue]];
}

int32_t ASViewImpl_AnimationContentHandler_getRepeatCountWithNSString_withASIWidget_(ASViewImpl_AnimationContentHandler *self, NSString *value, id<ASIWidget> w) {
  switch (JreIndexOfStr(value, (id[]){ @"infinite" }, 1)) {
    case 0:
    return -1;
    default:
    break;
  }
  return [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([((id<ASIWidget>) nil_chk(w)) quickConvertWithId:value withNSString:@"int"], [JavaLangInteger class]))) intValue];
}

void ASViewImpl_AnimationContentHandler_setRepeatCountWithASIWidget_withADValueAnimator_withNSString_(ASViewImpl_AnimationContentHandler *self, id<ASIWidget> w, ADValueAnimator *animator, NSString *strValue) {
  [((ADValueAnimator *) nil_chk(animator)) setRepeatCountWithInt:ASViewImpl_AnimationContentHandler_getRepeatCountWithNSString_withASIWidget_(self, strValue, w)];
}

int32_t ASViewImpl_AnimationContentHandler_getRepeatModeWithNSString_(ASViewImpl_AnimationContentHandler *self, NSString *value) {
  switch (JreIndexOfStr(value, (id[]){ @"restart", @"reverse" }, 2)) {
    case 0:
    return 1;
    case 1:
    return 2;
    default:
    break;
  }
  return 0;
}

void ASViewImpl_AnimationContentHandler_setRepeatModeWithASIWidget_withADValueAnimator_withNSString_(ASViewImpl_AnimationContentHandler *self, id<ASIWidget> w, ADValueAnimator *animator, NSString *strValue) {
  [((ADValueAnimator *) nil_chk(animator)) setRepeatModeWithInt:ASViewImpl_AnimationContentHandler_getRepeatModeWithNSString_(self, strValue)];
}

int32_t ASViewImpl_AnimationContentHandler_getValueTypeWithNSString_(ASViewImpl_AnimationContentHandler *self, NSString *value) {
  switch (JreIndexOfStr(value, (id[]){ @"floatType", @"intType", @"pathType", @"colorType" }, 4)) {
    case 0:
    return 0;
    case 1:
    return 1;
    case 2:
    return 2;
    case 3:
    return 3;
    default:
    break;
  }
  return 0;
}

void ASViewImpl_AnimationContentHandler_parsePropertyAnimatorWithASIWidget_withADObjectAnimator_withOrgXmlSaxAttributes_(ASViewImpl_AnimationContentHandler *self, id<ASIWidget> w, ADObjectAnimator *animator, id<OrgXmlSaxAttributes> atts) {
  for (int32_t i = 0; i < [((id<OrgXmlSaxAttributes>) nil_chk(atts)) getLength]; i++) {
    NSString *name = [atts getLocalNameWithInt:i];
    NSString *value = ASViewImpl_getValueWithNSString_withOrgXmlSaxAttributes_(name, atts);
    switch (JreIndexOfStr([atts getLocalNameWithInt:i], (id[]){ @"propertyName", @"propertyXName", @"propertyYName", @"pathData" }, 4)) {
      case 0:
      ASViewImpl_AnimationContentHandler_setPropertyNameWithASIWidget_withADObjectAnimator_withNSString_(self, w, animator, value);
      break;
      case 1:
      ASViewImpl_AnimationContentHandler_setPropertyXNameWithASIWidget_withADObjectAnimator_withNSString_(self, w, animator, value);
      break;
      case 2:
      ASViewImpl_AnimationContentHandler_setPropertyYNameWithASIWidget_withADObjectAnimator_withNSString_(self, w, animator, value);
      break;
      case 3:
      ASViewImpl_AnimationContentHandler_setPathDataWithASIWidget_withADObjectAnimator_withNSString_(self, w, animator, value);
      break;
    }
  }
}

void ASViewImpl_AnimationContentHandler_setPropertyNameWithASIWidget_withADObjectAnimator_withNSString_(ASViewImpl_AnimationContentHandler *self, id<ASIWidget> w, ADObjectAnimator *animator, NSString *strValue) {
  [((ADObjectAnimator *) nil_chk(animator)) setPropertyNameWithNSString:(NSString *) cast_chk([((id<ASIWidget>) nil_chk(w)) quickConvertWithId:strValue withNSString:@"resourcestring"], [NSString class])];
}

void ASViewImpl_AnimationContentHandler_parseAnimatorSetWithASIWidget_withADAnimatorSet_withOrgXmlSaxAttributes_(ASViewImpl_AnimationContentHandler *self, id<ASIWidget> w, ADAnimatorSet *animatorSet, id<OrgXmlSaxAttributes> atts) {
  for (int32_t i = 0; i < [((id<OrgXmlSaxAttributes>) nil_chk(atts)) getLength]; i++) {
    NSString *name = [atts getLocalNameWithInt:i];
    NSString *value = ASViewImpl_getValueWithNSString_withOrgXmlSaxAttributes_(name, atts);
    switch (JreIndexOfStr([atts getLocalNameWithInt:i], (id[]){ @"ordering" }, 1)) {
      case 0:
      ASViewImpl_AnimationContentHandler_setOrderingWithASIWidget_withADAnimatorSet_withNSString_(self, w, animatorSet, value);
      break;
    }
  }
}

int32_t ASViewImpl_AnimationContentHandler_getOrderingWithNSString_(ASViewImpl_AnimationContentHandler *self, NSString *value) {
  switch (JreIndexOfStr(value, (id[]){ @"together", @"sequentially" }, 2)) {
    case 0:
    return 0;
    case 1:
    return 1;
    default:
    break;
  }
  return 0;
}

void ASViewImpl_AnimationContentHandler_parseAccelerateInterpolatorWithASIWidget_withOrgXmlSaxAttributes_(ASViewImpl_AnimationContentHandler *self, id<ASIWidget> w, id<OrgXmlSaxAttributes> atts) {
  for (int32_t i = 0; i < [((id<OrgXmlSaxAttributes>) nil_chk(atts)) getLength]; i++) {
    NSString *name = [atts getLocalNameWithInt:i];
    NSString *value = ASViewImpl_getValueWithNSString_withOrgXmlSaxAttributes_(name, atts);
    switch (JreIndexOfStr([atts getLocalNameWithInt:i], (id[]){ @"factor" }, 1)) {
      case 0:
      ASViewImpl_AnimationContentHandler_setFactorWithASIWidget_withNSString_(self, w, value);
      break;
    }
  }
}

void ASViewImpl_AnimationContentHandler_parseDecelerateInterpolatorWithASIWidget_withOrgXmlSaxAttributes_(ASViewImpl_AnimationContentHandler *self, id<ASIWidget> w, id<OrgXmlSaxAttributes> atts) {
  for (int32_t i = 0; i < [((id<OrgXmlSaxAttributes>) nil_chk(atts)) getLength]; i++) {
    NSString *name = [atts getLocalNameWithInt:i];
    NSString *value = ASViewImpl_getValueWithNSString_withOrgXmlSaxAttributes_(name, atts);
    switch (JreIndexOfStr([atts getLocalNameWithInt:i], (id[]){ @"factor" }, 1)) {
      case 0:
      ASViewImpl_AnimationContentHandler_setFactorWithASIWidget_withNSString_(self, w, value);
      break;
    }
  }
}

void ASViewImpl_AnimationContentHandler_parseCycleInterpolatorWithASIWidget_withOrgXmlSaxAttributes_(ASViewImpl_AnimationContentHandler *self, id<ASIWidget> w, id<OrgXmlSaxAttributes> atts) {
  for (int32_t i = 0; i < [((id<OrgXmlSaxAttributes>) nil_chk(atts)) getLength]; i++) {
    NSString *name = [atts getLocalNameWithInt:i];
    NSString *value = ASViewImpl_getValueWithNSString_withOrgXmlSaxAttributes_(name, atts);
    switch (JreIndexOfStr([atts getLocalNameWithInt:i], (id[]){ @"cycles" }, 1)) {
      case 0:
      ASViewImpl_AnimationContentHandler_setCyclesWithASIWidget_withNSString_(self, w, value);
      break;
    }
  }
}

void ASViewImpl_AnimationContentHandler_parseAnticipateInterpolatorWithASIWidget_withOrgXmlSaxAttributes_(ASViewImpl_AnimationContentHandler *self, id<ASIWidget> w, id<OrgXmlSaxAttributes> atts) {
  for (int32_t i = 0; i < [((id<OrgXmlSaxAttributes>) nil_chk(atts)) getLength]; i++) {
    NSString *name = [atts getLocalNameWithInt:i];
    NSString *value = ASViewImpl_getValueWithNSString_withOrgXmlSaxAttributes_(name, atts);
    switch (JreIndexOfStr([atts getLocalNameWithInt:i], (id[]){ @"tension" }, 1)) {
      case 0:
      ASViewImpl_AnimationContentHandler_setTensionWithASIWidget_withNSString_(self, w, value);
      break;
    }
  }
}

void ASViewImpl_AnimationContentHandler_parseOvershootInterpolatorWithASIWidget_withOrgXmlSaxAttributes_(ASViewImpl_AnimationContentHandler *self, id<ASIWidget> w, id<OrgXmlSaxAttributes> atts) {
  for (int32_t i = 0; i < [((id<OrgXmlSaxAttributes>) nil_chk(atts)) getLength]; i++) {
    NSString *name = [atts getLocalNameWithInt:i];
    NSString *value = ASViewImpl_getValueWithNSString_withOrgXmlSaxAttributes_(name, atts);
    switch (JreIndexOfStr([atts getLocalNameWithInt:i], (id[]){ @"tension" }, 1)) {
      case 0:
      ASViewImpl_AnimationContentHandler_setTensionWithASIWidget_withNSString_(self, w, value);
      break;
    }
  }
}

void ASViewImpl_AnimationContentHandler_parseAnticipateOvershootInterpolatorWithASIWidget_withOrgXmlSaxAttributes_(ASViewImpl_AnimationContentHandler *self, id<ASIWidget> w, id<OrgXmlSaxAttributes> atts) {
  for (int32_t i = 0; i < [((id<OrgXmlSaxAttributes>) nil_chk(atts)) getLength]; i++) {
    NSString *name = [atts getLocalNameWithInt:i];
    NSString *value = ASViewImpl_getValueWithNSString_withOrgXmlSaxAttributes_(name, atts);
    switch (JreIndexOfStr([atts getLocalNameWithInt:i], (id[]){ @"tension", @"extraTension" }, 2)) {
      case 0:
      ASViewImpl_AnimationContentHandler_setTensionWithASIWidget_withNSString_(self, w, value);
      break;
      case 1:
      ASViewImpl_AnimationContentHandler_setExtraTensionWithASIWidget_withNSString_(self, w, value);
      break;
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASViewImpl_AnimationContentHandler)

@implementation ASViewImpl_AnimationContentHandler_CustomTypeConverterX

- (instancetype)initWithASViewImpl_AnimationContentHandler:(ASViewImpl_AnimationContentHandler *)outer$
                                              withIOSClass:(IOSClass *)fromClass
                                              withIOSClass:(IOSClass *)toClass {
  ASViewImpl_AnimationContentHandler_CustomTypeConverterX_initWithASViewImpl_AnimationContentHandler_withIOSClass_withIOSClass_(self, outer$, fromClass, toClass);
  return self;
}

- (JavaLangFloat *)convertWithId:(ADPointF *)value {
  return JavaLangFloat_valueOfWithFloat_(((ADPointF *) nil_chk(value))->x_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, 1, -1, -1 },
    { NULL, "LJavaLangFloat;", 0x1, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASViewImpl_AnimationContentHandler:withIOSClass:withIOSClass:);
  methods[1].selector = @selector(convertWithId:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LASViewImpl_AnimationContentHandler;LIOSClass;LIOSClass;", "(Ljava/lang/Class<Lr/android/graphics/PointF;>;Ljava/lang/Class<Ljava/lang/Float;>;)V", "convert", "LADPointF;", "LASViewImpl_AnimationContentHandler;", "Lr/android/animation/TypeConverter<Lr/android/graphics/PointF;Ljava/lang/Float;>;" };
  static const J2ObjcClassInfo _ASViewImpl_AnimationContentHandler_CustomTypeConverterX = { "CustomTypeConverterX", "com.ashera.layout", ptrTable, methods, NULL, 7, 0x12, 2, 0, 4, -1, -1, 5, -1 };
  return &_ASViewImpl_AnimationContentHandler_CustomTypeConverterX;
}

@end

void ASViewImpl_AnimationContentHandler_CustomTypeConverterX_initWithASViewImpl_AnimationContentHandler_withIOSClass_withIOSClass_(ASViewImpl_AnimationContentHandler_CustomTypeConverterX *self, ASViewImpl_AnimationContentHandler *outer$, IOSClass *fromClass, IOSClass *toClass) {
  ADTypeConverter_initWithIOSClass_withIOSClass_(self, fromClass, toClass);
}

ASViewImpl_AnimationContentHandler_CustomTypeConverterX *new_ASViewImpl_AnimationContentHandler_CustomTypeConverterX_initWithASViewImpl_AnimationContentHandler_withIOSClass_withIOSClass_(ASViewImpl_AnimationContentHandler *outer$, IOSClass *fromClass, IOSClass *toClass) {
  J2OBJC_NEW_IMPL(ASViewImpl_AnimationContentHandler_CustomTypeConverterX, initWithASViewImpl_AnimationContentHandler_withIOSClass_withIOSClass_, outer$, fromClass, toClass)
}

ASViewImpl_AnimationContentHandler_CustomTypeConverterX *create_ASViewImpl_AnimationContentHandler_CustomTypeConverterX_initWithASViewImpl_AnimationContentHandler_withIOSClass_withIOSClass_(ASViewImpl_AnimationContentHandler *outer$, IOSClass *fromClass, IOSClass *toClass) {
  J2OBJC_CREATE_IMPL(ASViewImpl_AnimationContentHandler_CustomTypeConverterX, initWithASViewImpl_AnimationContentHandler_withIOSClass_withIOSClass_, outer$, fromClass, toClass)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASViewImpl_AnimationContentHandler_CustomTypeConverterX)

@implementation ASViewImpl_AnimationContentHandler_CustomTypeConverterY

- (instancetype)initWithASViewImpl_AnimationContentHandler:(ASViewImpl_AnimationContentHandler *)outer$
                                              withIOSClass:(IOSClass *)fromClass
                                              withIOSClass:(IOSClass *)toClass {
  ASViewImpl_AnimationContentHandler_CustomTypeConverterY_initWithASViewImpl_AnimationContentHandler_withIOSClass_withIOSClass_(self, outer$, fromClass, toClass);
  return self;
}

- (JavaLangFloat *)convertWithId:(ADPointF *)value {
  return JavaLangFloat_valueOfWithFloat_(((ADPointF *) nil_chk(value))->y_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, 1, -1, -1 },
    { NULL, "LJavaLangFloat;", 0x1, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASViewImpl_AnimationContentHandler:withIOSClass:withIOSClass:);
  methods[1].selector = @selector(convertWithId:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LASViewImpl_AnimationContentHandler;LIOSClass;LIOSClass;", "(Ljava/lang/Class<Lr/android/graphics/PointF;>;Ljava/lang/Class<Ljava/lang/Float;>;)V", "convert", "LADPointF;", "LASViewImpl_AnimationContentHandler;", "Lr/android/animation/TypeConverter<Lr/android/graphics/PointF;Ljava/lang/Float;>;" };
  static const J2ObjcClassInfo _ASViewImpl_AnimationContentHandler_CustomTypeConverterY = { "CustomTypeConverterY", "com.ashera.layout", ptrTable, methods, NULL, 7, 0x12, 2, 0, 4, -1, -1, 5, -1 };
  return &_ASViewImpl_AnimationContentHandler_CustomTypeConverterY;
}

@end

void ASViewImpl_AnimationContentHandler_CustomTypeConverterY_initWithASViewImpl_AnimationContentHandler_withIOSClass_withIOSClass_(ASViewImpl_AnimationContentHandler_CustomTypeConverterY *self, ASViewImpl_AnimationContentHandler *outer$, IOSClass *fromClass, IOSClass *toClass) {
  ADTypeConverter_initWithIOSClass_withIOSClass_(self, fromClass, toClass);
}

ASViewImpl_AnimationContentHandler_CustomTypeConverterY *new_ASViewImpl_AnimationContentHandler_CustomTypeConverterY_initWithASViewImpl_AnimationContentHandler_withIOSClass_withIOSClass_(ASViewImpl_AnimationContentHandler *outer$, IOSClass *fromClass, IOSClass *toClass) {
  J2OBJC_NEW_IMPL(ASViewImpl_AnimationContentHandler_CustomTypeConverterY, initWithASViewImpl_AnimationContentHandler_withIOSClass_withIOSClass_, outer$, fromClass, toClass)
}

ASViewImpl_AnimationContentHandler_CustomTypeConverterY *create_ASViewImpl_AnimationContentHandler_CustomTypeConverterY_initWithASViewImpl_AnimationContentHandler_withIOSClass_withIOSClass_(ASViewImpl_AnimationContentHandler *outer$, IOSClass *fromClass, IOSClass *toClass) {
  J2OBJC_CREATE_IMPL(ASViewImpl_AnimationContentHandler_CustomTypeConverterY, initWithASViewImpl_AnimationContentHandler_withIOSClass_withIOSClass_, outer$, fromClass, toClass)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASViewImpl_AnimationContentHandler_CustomTypeConverterY)

@implementation ASViewImpl_CustomProperty

- (instancetype)initWithIOSClass:(IOSClass *)type
                    withNSString:(NSString *)name {
  ASViewImpl_CustomProperty_initWithIOSClass_withNSString_(self, type, name);
  return self;
}

- (id)getWithId:(id)object {
  return nil;
}

- (void)setWithId:(id)object
           withId:(id)value {
  if ([object isKindOfClass:[ADView class]]) {
    [((ADView *) nil_chk(((ADView *) object))) setMyAttributeWithNSString:name_ withId:value];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 2, 3, -1, 4, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithIOSClass:withNSString:);
  methods[1].selector = @selector(getWithId:);
  methods[2].selector = @selector(setWithId:withId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "name_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIOSClass;LNSString;", "(Ljava/lang/Class<Ljava/lang/Object;>;Ljava/lang/String;)V", "get", "LNSObject;", "(Ljava/lang/Object;)TV;", "set", "LNSObject;LNSObject;", "LASViewImpl;", "<T:Ljava/lang/Object;V:Ljava/lang/Object;>Lr/android/util/Property<Ljava/lang/Object;Ljava/lang/Object;>;" };
  static const J2ObjcClassInfo _ASViewImpl_CustomProperty = { "CustomProperty", "com.ashera.layout", ptrTable, methods, fields, 7, 0xa, 3, 1, 7, -1, -1, 8, -1 };
  return &_ASViewImpl_CustomProperty;
}

@end

void ASViewImpl_CustomProperty_initWithIOSClass_withNSString_(ASViewImpl_CustomProperty *self, IOSClass *type, NSString *name) {
  ADProperty_initWithIOSClass_withNSString_(self, type, name);
  self->name_ = name;
}

ASViewImpl_CustomProperty *new_ASViewImpl_CustomProperty_initWithIOSClass_withNSString_(IOSClass *type, NSString *name) {
  J2OBJC_NEW_IMPL(ASViewImpl_CustomProperty, initWithIOSClass_withNSString_, type, name)
}

ASViewImpl_CustomProperty *create_ASViewImpl_CustomProperty_initWithIOSClass_withNSString_(IOSClass *type, NSString *name) {
  J2OBJC_CREATE_IMPL(ASViewImpl_CustomProperty, initWithIOSClass_withNSString_, type, name)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASViewImpl_CustomProperty)

@implementation ASViewImpl_AnimatorListener

- (NSString *)getAction {
  return action_;
}

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue {
  ASViewImpl_AnimatorListener_initWithASIWidget_withNSString_(self, w, strValue);
  return self;
}

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue
                     withNSString:(NSString *)action {
  ASViewImpl_AnimatorListener_initWithASIWidget_withNSString_withNSString_(self, w, strValue, action);
  return self;
}

- (void)onAnimationStartWithADAnimator:(ADAnimator *)animation {
  if (action_ == nil || [action_ isEqual:@"onAnimationStart"]) {
    [((id<ASIWidget>) nil_chk(w_)) syncModelFromUiToPojoWithNSString:@"onAnimationStart"];
    id<JavaUtilMap> obj = [self getOnAnimationStartEventObjWithADAnimator:animation];
    NSString *commandName = (NSString *) cast_chk([((id<JavaUtilMap>) nil_chk(obj)) getWithId:ASEventExpressionParser_KEY_COMMAND_NAME], [NSString class]);
    NSString *commandType = (NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_COMMAND_TYPE], [NSString class]);
    switch (JreIndexOfStr(commandType, (id[]){ @"+" }, 1)) {
      case 0:
      if (ASEventCommandFactory_hasCommandWithNSString_(commandName)) {
        (void) [((id<ASEventCommand>) nil_chk(ASEventCommandFactory_getCommandWithNSString_(commandName))) executeCommandWithASIWidget:w_ withJavaUtilMap:obj withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ animation } count:1 type:NSObject_class_()]];
      }
      break;
      default:
      break;
    }
    if ([obj containsKeyWithId:@"refreshUiFromModel"]) {
      id widgets = [obj removeWithId:@"refreshUiFromModel"];
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, widgets, true);
    }
    if ([((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds] != nil) {
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, [((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds], true);
    }
    if (strValue_ != nil && ![strValue_ isEmpty] && ![((NSString *) nil_chk([((NSString *) nil_chk(strValue_)) java_trim])) java_hasPrefix:@"+"]) {
      id<ASIActivity> activity = [((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getRootActivity];
      if (activity != nil) {
        [activity sendEventMessageWithJavaUtilMap:obj];
      }
    }
  }
  return;
}

- (id<JavaUtilMap>)getOnAnimationStartEventObjWithADAnimator:(ADAnimator *)animation {
  id<JavaUtilMap> obj = ASPluginInvoker_getJSONCompatMap();
  (void) [((id<JavaUtilMap>) nil_chk(obj)) putWithId:@"action" withId:@"action"];
  (void) [obj putWithId:@"eventType" withId:@"animationstart"];
  (void) [obj putWithId:@"fragmentId" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getFragmentId]];
  (void) [obj putWithId:@"actionUrl" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getActionUrl]];
  (void) [obj putWithId:@"namespace" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getNamespace]];
  if ([((id<ASIWidget>) nil_chk(w_)) getComponentId] != nil) {
    (void) [obj putWithId:@"componentId" withId:[((id<ASIWidget>) nil_chk(w_)) getComponentId]];
  }
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"id", [((id<ASIWidget>) nil_chk(w_)) getId]);
  (void) ASEventExpressionParser_parseEventExpressionWithNSString_withJavaUtilMap_(strValue_, obj);
  [((id<ASIWidget>) nil_chk(w_)) updateModelToEventMapWithJavaUtilMap:obj withNSString:@"onAnimationStart" withNSString:(NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_EVENT_ARGS], [NSString class])];
  return obj;
}

- (void)onAnimationEndWithADAnimator:(ADAnimator *)animation {
  if (action_ == nil || [action_ isEqual:@"onAnimationEnd"]) {
    [((id<ASIWidget>) nil_chk(w_)) syncModelFromUiToPojoWithNSString:@"onAnimationEnd"];
    id<JavaUtilMap> obj = [self getOnAnimationEndEventObjWithADAnimator:animation];
    NSString *commandName = (NSString *) cast_chk([((id<JavaUtilMap>) nil_chk(obj)) getWithId:ASEventExpressionParser_KEY_COMMAND_NAME], [NSString class]);
    NSString *commandType = (NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_COMMAND_TYPE], [NSString class]);
    switch (JreIndexOfStr(commandType, (id[]){ @"+" }, 1)) {
      case 0:
      if (ASEventCommandFactory_hasCommandWithNSString_(commandName)) {
        (void) [((id<ASEventCommand>) nil_chk(ASEventCommandFactory_getCommandWithNSString_(commandName))) executeCommandWithASIWidget:w_ withJavaUtilMap:obj withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ animation } count:1 type:NSObject_class_()]];
      }
      break;
      default:
      break;
    }
    if ([obj containsKeyWithId:@"refreshUiFromModel"]) {
      id widgets = [obj removeWithId:@"refreshUiFromModel"];
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, widgets, true);
    }
    if ([((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds] != nil) {
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, [((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds], true);
    }
    if (strValue_ != nil && ![strValue_ isEmpty] && ![((NSString *) nil_chk([((NSString *) nil_chk(strValue_)) java_trim])) java_hasPrefix:@"+"]) {
      id<ASIActivity> activity = [((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getRootActivity];
      if (activity != nil) {
        [activity sendEventMessageWithJavaUtilMap:obj];
      }
    }
  }
  return;
}

- (id<JavaUtilMap>)getOnAnimationEndEventObjWithADAnimator:(ADAnimator *)animation {
  id<JavaUtilMap> obj = ASPluginInvoker_getJSONCompatMap();
  (void) [((id<JavaUtilMap>) nil_chk(obj)) putWithId:@"action" withId:@"action"];
  (void) [obj putWithId:@"eventType" withId:@"animationend"];
  (void) [obj putWithId:@"fragmentId" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getFragmentId]];
  (void) [obj putWithId:@"actionUrl" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getActionUrl]];
  (void) [obj putWithId:@"namespace" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getNamespace]];
  if ([((id<ASIWidget>) nil_chk(w_)) getComponentId] != nil) {
    (void) [obj putWithId:@"componentId" withId:[((id<ASIWidget>) nil_chk(w_)) getComponentId]];
  }
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"id", [((id<ASIWidget>) nil_chk(w_)) getId]);
  (void) ASEventExpressionParser_parseEventExpressionWithNSString_withJavaUtilMap_(strValue_, obj);
  [((id<ASIWidget>) nil_chk(w_)) updateModelToEventMapWithJavaUtilMap:obj withNSString:@"onAnimationEnd" withNSString:(NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_EVENT_ARGS], [NSString class])];
  return obj;
}

- (void)onAnimationCancelWithADAnimator:(ADAnimator *)animation {
  if (action_ == nil || [action_ isEqual:@"onAnimationCancel"]) {
    [((id<ASIWidget>) nil_chk(w_)) syncModelFromUiToPojoWithNSString:@"onAnimationCancel"];
    id<JavaUtilMap> obj = [self getOnAnimationCancelEventObjWithADAnimator:animation];
    NSString *commandName = (NSString *) cast_chk([((id<JavaUtilMap>) nil_chk(obj)) getWithId:ASEventExpressionParser_KEY_COMMAND_NAME], [NSString class]);
    NSString *commandType = (NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_COMMAND_TYPE], [NSString class]);
    switch (JreIndexOfStr(commandType, (id[]){ @"+" }, 1)) {
      case 0:
      if (ASEventCommandFactory_hasCommandWithNSString_(commandName)) {
        (void) [((id<ASEventCommand>) nil_chk(ASEventCommandFactory_getCommandWithNSString_(commandName))) executeCommandWithASIWidget:w_ withJavaUtilMap:obj withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ animation } count:1 type:NSObject_class_()]];
      }
      break;
      default:
      break;
    }
    if ([obj containsKeyWithId:@"refreshUiFromModel"]) {
      id widgets = [obj removeWithId:@"refreshUiFromModel"];
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, widgets, true);
    }
    if ([((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds] != nil) {
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, [((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds], true);
    }
    if (strValue_ != nil && ![strValue_ isEmpty] && ![((NSString *) nil_chk([((NSString *) nil_chk(strValue_)) java_trim])) java_hasPrefix:@"+"]) {
      id<ASIActivity> activity = [((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getRootActivity];
      if (activity != nil) {
        [activity sendEventMessageWithJavaUtilMap:obj];
      }
    }
  }
  return;
}

- (id<JavaUtilMap>)getOnAnimationCancelEventObjWithADAnimator:(ADAnimator *)animation {
  id<JavaUtilMap> obj = ASPluginInvoker_getJSONCompatMap();
  (void) [((id<JavaUtilMap>) nil_chk(obj)) putWithId:@"action" withId:@"action"];
  (void) [obj putWithId:@"eventType" withId:@"animationcancel"];
  (void) [obj putWithId:@"fragmentId" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getFragmentId]];
  (void) [obj putWithId:@"actionUrl" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getActionUrl]];
  (void) [obj putWithId:@"namespace" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getNamespace]];
  if ([((id<ASIWidget>) nil_chk(w_)) getComponentId] != nil) {
    (void) [obj putWithId:@"componentId" withId:[((id<ASIWidget>) nil_chk(w_)) getComponentId]];
  }
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"id", [((id<ASIWidget>) nil_chk(w_)) getId]);
  (void) ASEventExpressionParser_parseEventExpressionWithNSString_withJavaUtilMap_(strValue_, obj);
  [((id<ASIWidget>) nil_chk(w_)) updateModelToEventMapWithJavaUtilMap:obj withNSString:@"onAnimationCancel" withNSString:(NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_EVENT_ARGS], [NSString class])];
  return obj;
}

- (void)onAnimationRepeatWithADAnimator:(ADAnimator *)animation {
  if (action_ == nil || [action_ isEqual:@"onAnimationRepeat"]) {
    [((id<ASIWidget>) nil_chk(w_)) syncModelFromUiToPojoWithNSString:@"onAnimationRepeat"];
    id<JavaUtilMap> obj = [self getOnAnimationRepeatEventObjWithADAnimator:animation];
    NSString *commandName = (NSString *) cast_chk([((id<JavaUtilMap>) nil_chk(obj)) getWithId:ASEventExpressionParser_KEY_COMMAND_NAME], [NSString class]);
    NSString *commandType = (NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_COMMAND_TYPE], [NSString class]);
    switch (JreIndexOfStr(commandType, (id[]){ @"+" }, 1)) {
      case 0:
      if (ASEventCommandFactory_hasCommandWithNSString_(commandName)) {
        (void) [((id<ASEventCommand>) nil_chk(ASEventCommandFactory_getCommandWithNSString_(commandName))) executeCommandWithASIWidget:w_ withJavaUtilMap:obj withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ animation } count:1 type:NSObject_class_()]];
      }
      break;
      default:
      break;
    }
    if ([obj containsKeyWithId:@"refreshUiFromModel"]) {
      id widgets = [obj removeWithId:@"refreshUiFromModel"];
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, widgets, true);
    }
    if ([((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds] != nil) {
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, [((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds], true);
    }
    if (strValue_ != nil && ![strValue_ isEmpty] && ![((NSString *) nil_chk([((NSString *) nil_chk(strValue_)) java_trim])) java_hasPrefix:@"+"]) {
      id<ASIActivity> activity = [((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getRootActivity];
      if (activity != nil) {
        [activity sendEventMessageWithJavaUtilMap:obj];
      }
    }
  }
  return;
}

- (id<JavaUtilMap>)getOnAnimationRepeatEventObjWithADAnimator:(ADAnimator *)animation {
  id<JavaUtilMap> obj = ASPluginInvoker_getJSONCompatMap();
  (void) [((id<JavaUtilMap>) nil_chk(obj)) putWithId:@"action" withId:@"action"];
  (void) [obj putWithId:@"eventType" withId:@"animationrepeat"];
  (void) [obj putWithId:@"fragmentId" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getFragmentId]];
  (void) [obj putWithId:@"actionUrl" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getActionUrl]];
  (void) [obj putWithId:@"namespace" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getNamespace]];
  if ([((id<ASIWidget>) nil_chk(w_)) getComponentId] != nil) {
    (void) [obj putWithId:@"componentId" withId:[((id<ASIWidget>) nil_chk(w_)) getComponentId]];
  }
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"id", [((id<ASIWidget>) nil_chk(w_)) getId]);
  (void) ASEventExpressionParser_parseEventExpressionWithNSString_withJavaUtilMap_(strValue_, obj);
  [((id<ASIWidget>) nil_chk(w_)) updateModelToEventMapWithJavaUtilMap:obj withNSString:@"onAnimationRepeat" withNSString:(NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_EVENT_ARGS], [NSString class])];
  return obj;
}

- (void)onAnimationStartWithADAnimator:(ADAnimator *)arg0
                           withBoolean:(bool)arg1 {
  ADAnimator_AnimatorListener_onAnimationStartWithADAnimator_withBoolean_(self, arg0, arg1);
}

- (void)onAnimationEndWithADAnimator:(ADAnimator *)arg0
                         withBoolean:(bool)arg1 {
  ADAnimator_AnimatorListener_onAnimationEndWithADAnimator_withBoolean_(self, arg0, arg1);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, 4, 3, -1, 5, -1, -1 },
    { NULL, "V", 0x1, 6, 3, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, 7, 3, -1, 5, -1, -1 },
    { NULL, "V", 0x1, 8, 3, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, 9, 3, -1, 5, -1, -1 },
    { NULL, "V", 0x1, 10, 3, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, 11, 3, -1, 5, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getAction);
  methods[1].selector = @selector(initWithASIWidget:withNSString:);
  methods[2].selector = @selector(initWithASIWidget:withNSString:withNSString:);
  methods[3].selector = @selector(onAnimationStartWithADAnimator:);
  methods[4].selector = @selector(getOnAnimationStartEventObjWithADAnimator:);
  methods[5].selector = @selector(onAnimationEndWithADAnimator:);
  methods[6].selector = @selector(getOnAnimationEndEventObjWithADAnimator:);
  methods[7].selector = @selector(onAnimationCancelWithADAnimator:);
  methods[8].selector = @selector(getOnAnimationCancelEventObjWithADAnimator:);
  methods[9].selector = @selector(onAnimationRepeatWithADAnimator:);
  methods[10].selector = @selector(getOnAnimationRepeatEventObjWithADAnimator:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "w_", "LASIWidget;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "view_", "LADView;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "strValue_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "action_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASIWidget;LNSString;", "LASIWidget;LNSString;LNSString;", "onAnimationStart", "LADAnimator;", "getOnAnimationStartEventObj", "(Lr/android/animation/Animator;)Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", "onAnimationEnd", "getOnAnimationEndEventObj", "onAnimationCancel", "getOnAnimationCancelEventObj", "onAnimationRepeat", "getOnAnimationRepeatEventObj", "LASViewImpl;" };
  static const J2ObjcClassInfo _ASViewImpl_AnimatorListener = { "AnimatorListener", "com.ashera.layout", ptrTable, methods, fields, 7, 0xa, 11, 4, 12, -1, -1, -1, -1 };
  return &_ASViewImpl_AnimatorListener;
}

@end

void ASViewImpl_AnimatorListener_initWithASIWidget_withNSString_(ASViewImpl_AnimatorListener *self, id<ASIWidget> w, NSString *strValue) {
  NSObject_init(self);
  self->w_ = w;
  self->strValue_ = strValue;
}

ASViewImpl_AnimatorListener *new_ASViewImpl_AnimatorListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) {
  J2OBJC_NEW_IMPL(ASViewImpl_AnimatorListener, initWithASIWidget_withNSString_, w, strValue)
}

ASViewImpl_AnimatorListener *create_ASViewImpl_AnimatorListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) {
  J2OBJC_CREATE_IMPL(ASViewImpl_AnimatorListener, initWithASIWidget_withNSString_, w, strValue)
}

void ASViewImpl_AnimatorListener_initWithASIWidget_withNSString_withNSString_(ASViewImpl_AnimatorListener *self, id<ASIWidget> w, NSString *strValue, NSString *action) {
  NSObject_init(self);
  self->w_ = w;
  self->strValue_ = strValue;
  self->action_ = action;
}

ASViewImpl_AnimatorListener *new_ASViewImpl_AnimatorListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) {
  J2OBJC_NEW_IMPL(ASViewImpl_AnimatorListener, initWithASIWidget_withNSString_withNSString_, w, strValue, action)
}

ASViewImpl_AnimatorListener *create_ASViewImpl_AnimatorListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) {
  J2OBJC_CREATE_IMPL(ASViewImpl_AnimatorListener, initWithASIWidget_withNSString_withNSString_, w, strValue, action)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASViewImpl_AnimatorListener)

@implementation ASViewImpl_OnClickListener

- (NSString *)getAction {
  return action_;
}

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue {
  ASViewImpl_OnClickListener_initWithASIWidget_withNSString_(self, w, strValue);
  return self;
}

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue
                     withNSString:(NSString *)action {
  ASViewImpl_OnClickListener_initWithASIWidget_withNSString_withNSString_(self, w, strValue, action);
  return self;
}

- (void)onClickWithADView:(ADView *)v {
  if (action_ == nil || [action_ isEqual:@"onClick"]) {
    [((id<ASIWidget>) nil_chk(w_)) syncModelFromUiToPojoWithNSString:@"onClick"];
    id<JavaUtilMap> obj = [self getOnClickEventObjWithADView:v];
    NSString *commandName = (NSString *) cast_chk([((id<JavaUtilMap>) nil_chk(obj)) getWithId:ASEventExpressionParser_KEY_COMMAND_NAME], [NSString class]);
    NSString *commandType = (NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_COMMAND_TYPE], [NSString class]);
    switch (JreIndexOfStr(commandType, (id[]){ @"+" }, 1)) {
      case 0:
      if (ASEventCommandFactory_hasCommandWithNSString_(commandName)) {
        (void) [((id<ASEventCommand>) nil_chk(ASEventCommandFactory_getCommandWithNSString_(commandName))) executeCommandWithASIWidget:w_ withJavaUtilMap:obj withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ v } count:1 type:NSObject_class_()]];
      }
      break;
      default:
      break;
    }
    if ([obj containsKeyWithId:@"refreshUiFromModel"]) {
      id widgets = [obj removeWithId:@"refreshUiFromModel"];
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, widgets, true);
    }
    if ([((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds] != nil) {
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, [((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds], true);
    }
    if (strValue_ != nil && ![strValue_ isEmpty] && ![((NSString *) nil_chk([((NSString *) nil_chk(strValue_)) java_trim])) java_hasPrefix:@"+"]) {
      id<ASIActivity> activity = [((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getRootActivity];
      if (activity != nil) {
        [activity sendEventMessageWithJavaUtilMap:obj];
      }
    }
  }
  return;
}

- (id<JavaUtilMap>)getOnClickEventObjWithADView:(ADView *)v {
  id<JavaUtilMap> obj = ASPluginInvoker_getJSONCompatMap();
  (void) [((id<JavaUtilMap>) nil_chk(obj)) putWithId:@"action" withId:@"action"];
  (void) [obj putWithId:@"eventType" withId:@"click"];
  (void) [obj putWithId:@"fragmentId" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getFragmentId]];
  (void) [obj putWithId:@"actionUrl" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getActionUrl]];
  (void) [obj putWithId:@"namespace" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getNamespace]];
  if ([((id<ASIWidget>) nil_chk(w_)) getComponentId] != nil) {
    (void) [obj putWithId:@"componentId" withId:[((id<ASIWidget>) nil_chk(w_)) getComponentId]];
  }
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"id", [((id<ASIWidget>) nil_chk(w_)) getId]);
  (void) ASEventExpressionParser_parseEventExpressionWithNSString_withJavaUtilMap_(strValue_, obj);
  [((id<ASIWidget>) nil_chk(w_)) updateModelToEventMapWithJavaUtilMap:obj withNSString:@"onClick" withNSString:(NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_EVENT_ARGS], [NSString class])];
  return obj;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, 4, 3, -1, 5, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getAction);
  methods[1].selector = @selector(initWithASIWidget:withNSString:);
  methods[2].selector = @selector(initWithASIWidget:withNSString:withNSString:);
  methods[3].selector = @selector(onClickWithADView:);
  methods[4].selector = @selector(getOnClickEventObjWithADView:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "w_", "LASIWidget;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "view_", "LADView;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "strValue_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "action_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASIWidget;LNSString;", "LASIWidget;LNSString;LNSString;", "onClick", "LADView;", "getOnClickEventObj", "(Lr/android/view/View;)Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", "LASViewImpl;" };
  static const J2ObjcClassInfo _ASViewImpl_OnClickListener = { "OnClickListener", "com.ashera.layout", ptrTable, methods, fields, 7, 0xa, 5, 4, 6, -1, -1, -1, -1 };
  return &_ASViewImpl_OnClickListener;
}

@end

void ASViewImpl_OnClickListener_initWithASIWidget_withNSString_(ASViewImpl_OnClickListener *self, id<ASIWidget> w, NSString *strValue) {
  NSObject_init(self);
  self->w_ = w;
  self->strValue_ = strValue;
}

ASViewImpl_OnClickListener *new_ASViewImpl_OnClickListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) {
  J2OBJC_NEW_IMPL(ASViewImpl_OnClickListener, initWithASIWidget_withNSString_, w, strValue)
}

ASViewImpl_OnClickListener *create_ASViewImpl_OnClickListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) {
  J2OBJC_CREATE_IMPL(ASViewImpl_OnClickListener, initWithASIWidget_withNSString_, w, strValue)
}

void ASViewImpl_OnClickListener_initWithASIWidget_withNSString_withNSString_(ASViewImpl_OnClickListener *self, id<ASIWidget> w, NSString *strValue, NSString *action) {
  NSObject_init(self);
  self->w_ = w;
  self->strValue_ = strValue;
  self->action_ = action;
}

ASViewImpl_OnClickListener *new_ASViewImpl_OnClickListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) {
  J2OBJC_NEW_IMPL(ASViewImpl_OnClickListener, initWithASIWidget_withNSString_withNSString_, w, strValue, action)
}

ASViewImpl_OnClickListener *create_ASViewImpl_OnClickListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) {
  J2OBJC_CREATE_IMPL(ASViewImpl_OnClickListener, initWithASIWidget_withNSString_withNSString_, w, strValue, action)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASViewImpl_OnClickListener)

@implementation ASViewImpl_OnTouchListener

- (NSString *)getAction {
  return action_;
}

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue {
  ASViewImpl_OnTouchListener_initWithASIWidget_withNSString_(self, w, strValue);
  return self;
}

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue
                     withNSString:(NSString *)action {
  ASViewImpl_OnTouchListener_initWithASIWidget_withNSString_withNSString_(self, w, strValue, action);
  return self;
}

- (bool)onTouchWithADView:(ADView *)v
        withADMotionEvent:(ADMotionEvent *)event {
  bool result = true;
  if (action_ == nil || [action_ isEqual:@"onTouch"]) {
    [((id<ASIWidget>) nil_chk(w_)) syncModelFromUiToPojoWithNSString:@"onTouch"];
    id<JavaUtilMap> obj = [self getOnTouchEventObjWithADView:v withADMotionEvent:event];
    NSString *commandName = (NSString *) cast_chk([((id<JavaUtilMap>) nil_chk(obj)) getWithId:ASEventExpressionParser_KEY_COMMAND_NAME], [NSString class]);
    NSString *commandType = (NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_COMMAND_TYPE], [NSString class]);
    switch (JreIndexOfStr(commandType, (id[]){ @"+" }, 1)) {
      case 0:
      if (ASEventCommandFactory_hasCommandWithNSString_(commandName)) {
        id commandResult = [((id<ASEventCommand>) nil_chk(ASEventCommandFactory_getCommandWithNSString_(commandName))) executeCommandWithASIWidget:w_ withJavaUtilMap:obj withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ v, event } count:2 type:NSObject_class_()]];
        if (commandResult != nil) {
          result = [(JavaLangBoolean *) cast_chk(commandResult, [JavaLangBoolean class]) booleanValue];
        }
      }
      break;
      default:
      break;
    }
    if ([obj containsKeyWithId:@"refreshUiFromModel"]) {
      id widgets = [obj removeWithId:@"refreshUiFromModel"];
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, widgets, true);
    }
    if ([((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds] != nil) {
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, [((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds], true);
    }
    if (strValue_ != nil && ![strValue_ isEmpty] && ![((NSString *) nil_chk([((NSString *) nil_chk(strValue_)) java_trim])) java_hasPrefix:@"+"]) {
      id<ASIActivity> activity = [((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getRootActivity];
      if (activity != nil) {
        [activity sendEventMessageWithJavaUtilMap:obj];
      }
    }
  }
  return result;
}

- (id<JavaUtilMap>)getOnTouchEventObjWithADView:(ADView *)v
                              withADMotionEvent:(ADMotionEvent *)event {
  id<JavaUtilMap> obj = ASPluginInvoker_getJSONCompatMap();
  (void) [((id<JavaUtilMap>) nil_chk(obj)) putWithId:@"action" withId:@"action"];
  (void) [obj putWithId:@"eventType" withId:@"touch"];
  (void) [obj putWithId:@"fragmentId" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getFragmentId]];
  (void) [obj putWithId:@"actionUrl" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getActionUrl]];
  (void) [obj putWithId:@"namespace" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getNamespace]];
  if ([((id<ASIWidget>) nil_chk(w_)) getComponentId] != nil) {
    (void) [obj putWithId:@"componentId" withId:[((id<ASIWidget>) nil_chk(w_)) getComponentId]];
  }
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"id", [((id<ASIWidget>) nil_chk(w_)) getId]);
  ASViewImpl_addEventInfoWithJavaUtilMap_withADMotionEvent_(obj, event);
  (void) ASEventExpressionParser_parseEventExpressionWithNSString_withJavaUtilMap_(strValue_, obj);
  [((id<ASIWidget>) nil_chk(w_)) updateModelToEventMapWithJavaUtilMap:obj withNSString:@"onTouch" withNSString:(NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_EVENT_ARGS], [NSString class])];
  return obj;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, 4, 3, -1, 5, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getAction);
  methods[1].selector = @selector(initWithASIWidget:withNSString:);
  methods[2].selector = @selector(initWithASIWidget:withNSString:withNSString:);
  methods[3].selector = @selector(onTouchWithADView:withADMotionEvent:);
  methods[4].selector = @selector(getOnTouchEventObjWithADView:withADMotionEvent:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "w_", "LASIWidget;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "view_", "LADView;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "strValue_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "action_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASIWidget;LNSString;", "LASIWidget;LNSString;LNSString;", "onTouch", "LADView;LADMotionEvent;", "getOnTouchEventObj", "(Lr/android/view/View;Lr/android/view/MotionEvent;)Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", "LASViewImpl;" };
  static const J2ObjcClassInfo _ASViewImpl_OnTouchListener = { "OnTouchListener", "com.ashera.layout", ptrTable, methods, fields, 7, 0xa, 5, 4, 6, -1, -1, -1, -1 };
  return &_ASViewImpl_OnTouchListener;
}

@end

void ASViewImpl_OnTouchListener_initWithASIWidget_withNSString_(ASViewImpl_OnTouchListener *self, id<ASIWidget> w, NSString *strValue) {
  NSObject_init(self);
  self->w_ = w;
  self->strValue_ = strValue;
}

ASViewImpl_OnTouchListener *new_ASViewImpl_OnTouchListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) {
  J2OBJC_NEW_IMPL(ASViewImpl_OnTouchListener, initWithASIWidget_withNSString_, w, strValue)
}

ASViewImpl_OnTouchListener *create_ASViewImpl_OnTouchListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) {
  J2OBJC_CREATE_IMPL(ASViewImpl_OnTouchListener, initWithASIWidget_withNSString_, w, strValue)
}

void ASViewImpl_OnTouchListener_initWithASIWidget_withNSString_withNSString_(ASViewImpl_OnTouchListener *self, id<ASIWidget> w, NSString *strValue, NSString *action) {
  NSObject_init(self);
  self->w_ = w;
  self->strValue_ = strValue;
  self->action_ = action;
}

ASViewImpl_OnTouchListener *new_ASViewImpl_OnTouchListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) {
  J2OBJC_NEW_IMPL(ASViewImpl_OnTouchListener, initWithASIWidget_withNSString_withNSString_, w, strValue, action)
}

ASViewImpl_OnTouchListener *create_ASViewImpl_OnTouchListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) {
  J2OBJC_CREATE_IMPL(ASViewImpl_OnTouchListener, initWithASIWidget_withNSString_withNSString_, w, strValue, action)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASViewImpl_OnTouchListener)

@implementation ASViewImpl_OnLongClickListener

- (NSString *)getAction {
  return action_;
}

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue {
  ASViewImpl_OnLongClickListener_initWithASIWidget_withNSString_(self, w, strValue);
  return self;
}

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue
                     withNSString:(NSString *)action {
  ASViewImpl_OnLongClickListener_initWithASIWidget_withNSString_withNSString_(self, w, strValue, action);
  return self;
}

- (bool)onLongClickWithADView:(ADView *)v {
  bool result = true;
  if (action_ == nil || [action_ isEqual:@"onLongClick"]) {
    [((id<ASIWidget>) nil_chk(w_)) syncModelFromUiToPojoWithNSString:@"onLongClick"];
    id<JavaUtilMap> obj = [self getOnLongClickEventObjWithADView:v];
    NSString *commandName = (NSString *) cast_chk([((id<JavaUtilMap>) nil_chk(obj)) getWithId:ASEventExpressionParser_KEY_COMMAND_NAME], [NSString class]);
    NSString *commandType = (NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_COMMAND_TYPE], [NSString class]);
    switch (JreIndexOfStr(commandType, (id[]){ @"+" }, 1)) {
      case 0:
      if (ASEventCommandFactory_hasCommandWithNSString_(commandName)) {
        id commandResult = [((id<ASEventCommand>) nil_chk(ASEventCommandFactory_getCommandWithNSString_(commandName))) executeCommandWithASIWidget:w_ withJavaUtilMap:obj withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ v } count:1 type:NSObject_class_()]];
        if (commandResult != nil) {
          result = [(JavaLangBoolean *) cast_chk(commandResult, [JavaLangBoolean class]) booleanValue];
        }
      }
      break;
      default:
      break;
    }
    if ([obj containsKeyWithId:@"refreshUiFromModel"]) {
      id widgets = [obj removeWithId:@"refreshUiFromModel"];
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, widgets, true);
    }
    if ([((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds] != nil) {
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, [((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds], true);
    }
    if (strValue_ != nil && ![strValue_ isEmpty] && ![((NSString *) nil_chk([((NSString *) nil_chk(strValue_)) java_trim])) java_hasPrefix:@"+"]) {
      id<ASIActivity> activity = [((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getRootActivity];
      if (activity != nil) {
        [activity sendEventMessageWithJavaUtilMap:obj];
      }
    }
  }
  return result;
}

- (id<JavaUtilMap>)getOnLongClickEventObjWithADView:(ADView *)v {
  id<JavaUtilMap> obj = ASPluginInvoker_getJSONCompatMap();
  (void) [((id<JavaUtilMap>) nil_chk(obj)) putWithId:@"action" withId:@"action"];
  (void) [obj putWithId:@"eventType" withId:@"longclick"];
  (void) [obj putWithId:@"fragmentId" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getFragmentId]];
  (void) [obj putWithId:@"actionUrl" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getActionUrl]];
  (void) [obj putWithId:@"namespace" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getNamespace]];
  if ([((id<ASIWidget>) nil_chk(w_)) getComponentId] != nil) {
    (void) [obj putWithId:@"componentId" withId:[((id<ASIWidget>) nil_chk(w_)) getComponentId]];
  }
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"id", [((id<ASIWidget>) nil_chk(w_)) getId]);
  (void) ASEventExpressionParser_parseEventExpressionWithNSString_withJavaUtilMap_(strValue_, obj);
  [((id<ASIWidget>) nil_chk(w_)) updateModelToEventMapWithJavaUtilMap:obj withNSString:@"onLongClick" withNSString:(NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_EVENT_ARGS], [NSString class])];
  return obj;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, 4, 3, -1, 5, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getAction);
  methods[1].selector = @selector(initWithASIWidget:withNSString:);
  methods[2].selector = @selector(initWithASIWidget:withNSString:withNSString:);
  methods[3].selector = @selector(onLongClickWithADView:);
  methods[4].selector = @selector(getOnLongClickEventObjWithADView:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "w_", "LASIWidget;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "view_", "LADView;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "strValue_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "action_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASIWidget;LNSString;", "LASIWidget;LNSString;LNSString;", "onLongClick", "LADView;", "getOnLongClickEventObj", "(Lr/android/view/View;)Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", "LASViewImpl;" };
  static const J2ObjcClassInfo _ASViewImpl_OnLongClickListener = { "OnLongClickListener", "com.ashera.layout", ptrTable, methods, fields, 7, 0xa, 5, 4, 6, -1, -1, -1, -1 };
  return &_ASViewImpl_OnLongClickListener;
}

@end

void ASViewImpl_OnLongClickListener_initWithASIWidget_withNSString_(ASViewImpl_OnLongClickListener *self, id<ASIWidget> w, NSString *strValue) {
  NSObject_init(self);
  self->w_ = w;
  self->strValue_ = strValue;
}

ASViewImpl_OnLongClickListener *new_ASViewImpl_OnLongClickListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) {
  J2OBJC_NEW_IMPL(ASViewImpl_OnLongClickListener, initWithASIWidget_withNSString_, w, strValue)
}

ASViewImpl_OnLongClickListener *create_ASViewImpl_OnLongClickListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) {
  J2OBJC_CREATE_IMPL(ASViewImpl_OnLongClickListener, initWithASIWidget_withNSString_, w, strValue)
}

void ASViewImpl_OnLongClickListener_initWithASIWidget_withNSString_withNSString_(ASViewImpl_OnLongClickListener *self, id<ASIWidget> w, NSString *strValue, NSString *action) {
  NSObject_init(self);
  self->w_ = w;
  self->strValue_ = strValue;
  self->action_ = action;
}

ASViewImpl_OnLongClickListener *new_ASViewImpl_OnLongClickListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) {
  J2OBJC_NEW_IMPL(ASViewImpl_OnLongClickListener, initWithASIWidget_withNSString_withNSString_, w, strValue, action)
}

ASViewImpl_OnLongClickListener *create_ASViewImpl_OnLongClickListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) {
  J2OBJC_CREATE_IMPL(ASViewImpl_OnLongClickListener, initWithASIWidget_withNSString_withNSString_, w, strValue, action)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASViewImpl_OnLongClickListener)

@implementation ASViewImpl_OnDragListener

- (NSString *)getAction {
  return action_;
}

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue {
  ASViewImpl_OnDragListener_initWithASIWidget_withNSString_(self, w, strValue);
  return self;
}

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue
                     withNSString:(NSString *)action {
  ASViewImpl_OnDragListener_initWithASIWidget_withNSString_withNSString_(self, w, strValue, action);
  return self;
}

- (bool)onDragWithADView:(ADView *)v
    withADView_DragEvent:(ADView_DragEvent *)event {
  bool result = true;
  if (action_ == nil || [action_ isEqual:@"onDrag"]) {
    [((id<ASIWidget>) nil_chk(w_)) syncModelFromUiToPojoWithNSString:@"onDrag"];
    id<JavaUtilMap> obj = [self getOnDragEventObjWithADView:v withADView_DragEvent:event];
    NSString *commandName = (NSString *) cast_chk([((id<JavaUtilMap>) nil_chk(obj)) getWithId:ASEventExpressionParser_KEY_COMMAND_NAME], [NSString class]);
    NSString *commandType = (NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_COMMAND_TYPE], [NSString class]);
    switch (JreIndexOfStr(commandType, (id[]){ @"+" }, 1)) {
      case 0:
      if (ASEventCommandFactory_hasCommandWithNSString_(commandName)) {
        id commandResult = [((id<ASEventCommand>) nil_chk(ASEventCommandFactory_getCommandWithNSString_(commandName))) executeCommandWithASIWidget:w_ withJavaUtilMap:obj withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ v, event } count:2 type:NSObject_class_()]];
        if (commandResult != nil) {
          result = [(JavaLangBoolean *) cast_chk(commandResult, [JavaLangBoolean class]) booleanValue];
        }
      }
      break;
      default:
      break;
    }
    if ([obj containsKeyWithId:@"refreshUiFromModel"]) {
      id widgets = [obj removeWithId:@"refreshUiFromModel"];
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, widgets, true);
    }
    if ([((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds] != nil) {
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, [((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds], true);
    }
    if (strValue_ != nil && ![strValue_ isEmpty] && ![((NSString *) nil_chk([((NSString *) nil_chk(strValue_)) java_trim])) java_hasPrefix:@"+"]) {
      id<ASIActivity> activity = [((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getRootActivity];
      if (activity != nil) {
        [activity sendEventMessageWithJavaUtilMap:obj];
      }
    }
  }
  return result;
}

- (id<JavaUtilMap>)getOnDragEventObjWithADView:(ADView *)v
                          withADView_DragEvent:(ADView_DragEvent *)event {
  id<JavaUtilMap> obj = ASPluginInvoker_getJSONCompatMap();
  (void) [((id<JavaUtilMap>) nil_chk(obj)) putWithId:@"action" withId:@"action"];
  (void) [obj putWithId:@"eventType" withId:@"drag"];
  (void) [obj putWithId:@"fragmentId" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getFragmentId]];
  (void) [obj putWithId:@"actionUrl" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getActionUrl]];
  (void) [obj putWithId:@"namespace" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getNamespace]];
  if ([((id<ASIWidget>) nil_chk(w_)) getComponentId] != nil) {
    (void) [obj putWithId:@"componentId" withId:[((id<ASIWidget>) nil_chk(w_)) getComponentId]];
  }
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"id", [((id<ASIWidget>) nil_chk(w_)) getId]);
  ASViewImpl_addEventInfoWithJavaUtilMap_withADView_DragEvent_(obj, event);
  (void) ASEventExpressionParser_parseEventExpressionWithNSString_withJavaUtilMap_(strValue_, obj);
  [((id<ASIWidget>) nil_chk(w_)) updateModelToEventMapWithJavaUtilMap:obj withNSString:@"onDrag" withNSString:(NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_EVENT_ARGS], [NSString class])];
  return obj;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, 4, 3, -1, 5, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getAction);
  methods[1].selector = @selector(initWithASIWidget:withNSString:);
  methods[2].selector = @selector(initWithASIWidget:withNSString:withNSString:);
  methods[3].selector = @selector(onDragWithADView:withADView_DragEvent:);
  methods[4].selector = @selector(getOnDragEventObjWithADView:withADView_DragEvent:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "w_", "LASIWidget;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "view_", "LADView;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "strValue_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "action_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASIWidget;LNSString;", "LASIWidget;LNSString;LNSString;", "onDrag", "LADView;LADView_DragEvent;", "getOnDragEventObj", "(Lr/android/view/View;Lr/android/view/View$DragEvent;)Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", "LASViewImpl;" };
  static const J2ObjcClassInfo _ASViewImpl_OnDragListener = { "OnDragListener", "com.ashera.layout", ptrTable, methods, fields, 7, 0xa, 5, 4, 6, -1, -1, -1, -1 };
  return &_ASViewImpl_OnDragListener;
}

@end

void ASViewImpl_OnDragListener_initWithASIWidget_withNSString_(ASViewImpl_OnDragListener *self, id<ASIWidget> w, NSString *strValue) {
  NSObject_init(self);
  self->w_ = w;
  self->strValue_ = strValue;
}

ASViewImpl_OnDragListener *new_ASViewImpl_OnDragListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) {
  J2OBJC_NEW_IMPL(ASViewImpl_OnDragListener, initWithASIWidget_withNSString_, w, strValue)
}

ASViewImpl_OnDragListener *create_ASViewImpl_OnDragListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) {
  J2OBJC_CREATE_IMPL(ASViewImpl_OnDragListener, initWithASIWidget_withNSString_, w, strValue)
}

void ASViewImpl_OnDragListener_initWithASIWidget_withNSString_withNSString_(ASViewImpl_OnDragListener *self, id<ASIWidget> w, NSString *strValue, NSString *action) {
  NSObject_init(self);
  self->w_ = w;
  self->strValue_ = strValue;
  self->action_ = action;
}

ASViewImpl_OnDragListener *new_ASViewImpl_OnDragListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) {
  J2OBJC_NEW_IMPL(ASViewImpl_OnDragListener, initWithASIWidget_withNSString_withNSString_, w, strValue, action)
}

ASViewImpl_OnDragListener *create_ASViewImpl_OnDragListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) {
  J2OBJC_CREATE_IMPL(ASViewImpl_OnDragListener, initWithASIWidget_withNSString_withNSString_, w, strValue, action)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASViewImpl_OnDragListener)

@implementation ASViewImpl_OnKeyListener

- (NSString *)getAction {
  return action_;
}

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue {
  ASViewImpl_OnKeyListener_initWithASIWidget_withNSString_(self, w, strValue);
  return self;
}

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue
                     withNSString:(NSString *)action {
  ASViewImpl_OnKeyListener_initWithASIWidget_withNSString_withNSString_(self, w, strValue, action);
  return self;
}

- (bool)onKeyWithADView:(ADView *)v
                withInt:(int32_t)keyCode
         withADKeyEvent:(ADKeyEvent *)event {
  bool result = true;
  if (action_ == nil || [action_ isEqual:@"onKey"]) {
    [((id<ASIWidget>) nil_chk(w_)) syncModelFromUiToPojoWithNSString:@"onKey"];
    id<JavaUtilMap> obj = [self getOnKeyEventObjWithADView:v withInt:keyCode withADKeyEvent:event];
    NSString *commandName = (NSString *) cast_chk([((id<JavaUtilMap>) nil_chk(obj)) getWithId:ASEventExpressionParser_KEY_COMMAND_NAME], [NSString class]);
    NSString *commandType = (NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_COMMAND_TYPE], [NSString class]);
    switch (JreIndexOfStr(commandType, (id[]){ @"+" }, 1)) {
      case 0:
      if (ASEventCommandFactory_hasCommandWithNSString_(commandName)) {
        id commandResult = [((id<ASEventCommand>) nil_chk(ASEventCommandFactory_getCommandWithNSString_(commandName))) executeCommandWithASIWidget:w_ withJavaUtilMap:obj withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ v, JavaLangInteger_valueOfWithInt_(keyCode), event } count:3 type:NSObject_class_()]];
        if (commandResult != nil) {
          result = [(JavaLangBoolean *) cast_chk(commandResult, [JavaLangBoolean class]) booleanValue];
        }
      }
      break;
      default:
      break;
    }
    if ([obj containsKeyWithId:@"refreshUiFromModel"]) {
      id widgets = [obj removeWithId:@"refreshUiFromModel"];
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, widgets, true);
    }
    if ([((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds] != nil) {
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, [((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds], true);
    }
    if (strValue_ != nil && ![strValue_ isEmpty] && ![((NSString *) nil_chk([((NSString *) nil_chk(strValue_)) java_trim])) java_hasPrefix:@"+"]) {
      id<ASIActivity> activity = [((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getRootActivity];
      if (activity != nil) {
        [activity sendEventMessageWithJavaUtilMap:obj];
      }
    }
  }
  return result;
}

- (id<JavaUtilMap>)getOnKeyEventObjWithADView:(ADView *)v
                                      withInt:(int32_t)keyCode
                               withADKeyEvent:(ADKeyEvent *)event {
  id<JavaUtilMap> obj = ASPluginInvoker_getJSONCompatMap();
  (void) [((id<JavaUtilMap>) nil_chk(obj)) putWithId:@"action" withId:@"action"];
  (void) [obj putWithId:@"eventType" withId:@"key"];
  (void) [obj putWithId:@"fragmentId" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getFragmentId]];
  (void) [obj putWithId:@"actionUrl" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getActionUrl]];
  (void) [obj putWithId:@"namespace" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getNamespace]];
  if ([((id<ASIWidget>) nil_chk(w_)) getComponentId] != nil) {
    (void) [obj putWithId:@"componentId" withId:[((id<ASIWidget>) nil_chk(w_)) getComponentId]];
  }
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"id", [((id<ASIWidget>) nil_chk(w_)) getId]);
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"keyCode", JavaLangInteger_valueOfWithInt_(keyCode));
  ASViewImpl_addEventInfoWithJavaUtilMap_withADKeyEvent_(obj, event);
  (void) ASEventExpressionParser_parseEventExpressionWithNSString_withJavaUtilMap_(strValue_, obj);
  [((id<ASIWidget>) nil_chk(w_)) updateModelToEventMapWithJavaUtilMap:obj withNSString:@"onKey" withNSString:(NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_EVENT_ARGS], [NSString class])];
  return obj;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, 4, 3, -1, 5, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getAction);
  methods[1].selector = @selector(initWithASIWidget:withNSString:);
  methods[2].selector = @selector(initWithASIWidget:withNSString:withNSString:);
  methods[3].selector = @selector(onKeyWithADView:withInt:withADKeyEvent:);
  methods[4].selector = @selector(getOnKeyEventObjWithADView:withInt:withADKeyEvent:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "w_", "LASIWidget;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "view_", "LADView;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "strValue_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "action_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASIWidget;LNSString;", "LASIWidget;LNSString;LNSString;", "onKey", "LADView;ILADKeyEvent;", "getOnKeyEventObj", "(Lr/android/view/View;ILr/android/view/KeyEvent;)Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", "LASViewImpl;" };
  static const J2ObjcClassInfo _ASViewImpl_OnKeyListener = { "OnKeyListener", "com.ashera.layout", ptrTable, methods, fields, 7, 0xa, 5, 4, 6, -1, -1, -1, -1 };
  return &_ASViewImpl_OnKeyListener;
}

@end

void ASViewImpl_OnKeyListener_initWithASIWidget_withNSString_(ASViewImpl_OnKeyListener *self, id<ASIWidget> w, NSString *strValue) {
  NSObject_init(self);
  self->w_ = w;
  self->strValue_ = strValue;
}

ASViewImpl_OnKeyListener *new_ASViewImpl_OnKeyListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) {
  J2OBJC_NEW_IMPL(ASViewImpl_OnKeyListener, initWithASIWidget_withNSString_, w, strValue)
}

ASViewImpl_OnKeyListener *create_ASViewImpl_OnKeyListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) {
  J2OBJC_CREATE_IMPL(ASViewImpl_OnKeyListener, initWithASIWidget_withNSString_, w, strValue)
}

void ASViewImpl_OnKeyListener_initWithASIWidget_withNSString_withNSString_(ASViewImpl_OnKeyListener *self, id<ASIWidget> w, NSString *strValue, NSString *action) {
  NSObject_init(self);
  self->w_ = w;
  self->strValue_ = strValue;
  self->action_ = action;
}

ASViewImpl_OnKeyListener *new_ASViewImpl_OnKeyListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) {
  J2OBJC_NEW_IMPL(ASViewImpl_OnKeyListener, initWithASIWidget_withNSString_withNSString_, w, strValue, action)
}

ASViewImpl_OnKeyListener *create_ASViewImpl_OnKeyListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) {
  J2OBJC_CREATE_IMPL(ASViewImpl_OnKeyListener, initWithASIWidget_withNSString_withNSString_, w, strValue, action)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASViewImpl_OnKeyListener)

@implementation ASViewImpl_SwipeListener

- (NSString *)getAction {
  return action_;
}

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue {
  ASViewImpl_SwipeListener_initWithASIWidget_withNSString_(self, w, strValue);
  return self;
}

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue
                     withNSString:(NSString *)action {
  ASViewImpl_SwipeListener_initWithASIWidget_withNSString_withNSString_(self, w, strValue, action);
  return self;
}

- (bool)onSwipedWithNSString:(NSString *)direction {
  bool result = true;
  if (action_ == nil || [action_ isEqual:@"onSwiped"]) {
    [((id<ASIWidget>) nil_chk(w_)) syncModelFromUiToPojoWithNSString:@"onSwiped"];
    id<JavaUtilMap> obj = [self getOnSwipedEventObjWithNSString:direction];
    NSString *commandName = (NSString *) cast_chk([((id<JavaUtilMap>) nil_chk(obj)) getWithId:ASEventExpressionParser_KEY_COMMAND_NAME], [NSString class]);
    NSString *commandType = (NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_COMMAND_TYPE], [NSString class]);
    switch (JreIndexOfStr(commandType, (id[]){ @"+" }, 1)) {
      case 0:
      if (ASEventCommandFactory_hasCommandWithNSString_(commandName)) {
        id commandResult = [((id<ASEventCommand>) nil_chk(ASEventCommandFactory_getCommandWithNSString_(commandName))) executeCommandWithASIWidget:w_ withJavaUtilMap:obj withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ direction } count:1 type:NSObject_class_()]];
        if (commandResult != nil) {
          result = [(JavaLangBoolean *) cast_chk(commandResult, [JavaLangBoolean class]) booleanValue];
        }
      }
      break;
      default:
      break;
    }
    if ([obj containsKeyWithId:@"refreshUiFromModel"]) {
      id widgets = [obj removeWithId:@"refreshUiFromModel"];
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, widgets, true);
    }
    if ([((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds] != nil) {
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, [((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds], true);
    }
    if (strValue_ != nil && ![strValue_ isEmpty] && ![((NSString *) nil_chk([((NSString *) nil_chk(strValue_)) java_trim])) java_hasPrefix:@"+"]) {
      id<ASIActivity> activity = [((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getRootActivity];
      if (activity != nil) {
        [activity sendEventMessageWithJavaUtilMap:obj];
      }
    }
  }
  return result;
}

- (id<JavaUtilMap>)getOnSwipedEventObjWithNSString:(NSString *)direction {
  id<JavaUtilMap> obj = ASPluginInvoker_getJSONCompatMap();
  (void) [((id<JavaUtilMap>) nil_chk(obj)) putWithId:@"action" withId:@"action"];
  (void) [obj putWithId:@"eventType" withId:@"swiped"];
  (void) [obj putWithId:@"fragmentId" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getFragmentId]];
  (void) [obj putWithId:@"actionUrl" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getActionUrl]];
  (void) [obj putWithId:@"namespace" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getNamespace]];
  if ([((id<ASIWidget>) nil_chk(w_)) getComponentId] != nil) {
    (void) [obj putWithId:@"componentId" withId:[((id<ASIWidget>) nil_chk(w_)) getComponentId]];
  }
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"id", [((id<ASIWidget>) nil_chk(w_)) getId]);
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"direction", direction);
  (void) ASEventExpressionParser_parseEventExpressionWithNSString_withJavaUtilMap_(strValue_, obj);
  [((id<ASIWidget>) nil_chk(w_)) updateModelToEventMapWithJavaUtilMap:obj withNSString:@"onSwiped" withNSString:(NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_EVENT_ARGS], [NSString class])];
  return obj;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, 4, 3, -1, 5, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getAction);
  methods[1].selector = @selector(initWithASIWidget:withNSString:);
  methods[2].selector = @selector(initWithASIWidget:withNSString:withNSString:);
  methods[3].selector = @selector(onSwipedWithNSString:);
  methods[4].selector = @selector(getOnSwipedEventObjWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "w_", "LASIWidget;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "view_", "LADView;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "strValue_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "action_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASIWidget;LNSString;", "LASIWidget;LNSString;LNSString;", "onSwiped", "LNSString;", "getOnSwipedEventObj", "(Ljava/lang/String;)Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", "LASViewImpl;" };
  static const J2ObjcClassInfo _ASViewImpl_SwipeListener = { "SwipeListener", "com.ashera.layout", ptrTable, methods, fields, 7, 0xa, 5, 4, 6, -1, -1, -1, -1 };
  return &_ASViewImpl_SwipeListener;
}

@end

void ASViewImpl_SwipeListener_initWithASIWidget_withNSString_(ASViewImpl_SwipeListener *self, id<ASIWidget> w, NSString *strValue) {
  NSObject_init(self);
  self->w_ = w;
  self->strValue_ = strValue;
}

ASViewImpl_SwipeListener *new_ASViewImpl_SwipeListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) {
  J2OBJC_NEW_IMPL(ASViewImpl_SwipeListener, initWithASIWidget_withNSString_, w, strValue)
}

ASViewImpl_SwipeListener *create_ASViewImpl_SwipeListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) {
  J2OBJC_CREATE_IMPL(ASViewImpl_SwipeListener, initWithASIWidget_withNSString_, w, strValue)
}

void ASViewImpl_SwipeListener_initWithASIWidget_withNSString_withNSString_(ASViewImpl_SwipeListener *self, id<ASIWidget> w, NSString *strValue, NSString *action) {
  NSObject_init(self);
  self->w_ = w;
  self->strValue_ = strValue;
  self->action_ = action;
}

ASViewImpl_SwipeListener *new_ASViewImpl_SwipeListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) {
  J2OBJC_NEW_IMPL(ASViewImpl_SwipeListener, initWithASIWidget_withNSString_withNSString_, w, strValue, action)
}

ASViewImpl_SwipeListener *create_ASViewImpl_SwipeListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) {
  J2OBJC_CREATE_IMPL(ASViewImpl_SwipeListener, initWithASIWidget_withNSString_withNSString_, w, strValue, action)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASViewImpl_SwipeListener)

@implementation ASViewImpl_UIControlEventTouchDelegate

- (instancetype)initWithASIWidget:(id<ASIWidget>)widget
       withADView_OnTouchListener:(id<ADView_OnTouchListener>)listener {
  ASViewImpl_UIControlEventTouchDelegate_initWithASIWidget_withADView_OnTouchListener_(self, widget, listener);
  return self;
}

- (void)onTouchDownWithInt:(int32_t)x
                   withInt:(int32_t)y
                   withInt:(int32_t)rawX
                   withInt:(int32_t)rawY {
  [self sendEventWithInt:x withInt:y withInt:rawX withInt:rawY withInt:ADMotionEvent_ACTION_DOWN];
}

- (void)onTouchUpWithInt:(int32_t)x
                 withInt:(int32_t)y
                 withInt:(int32_t)rawX
                 withInt:(int32_t)rawY {
  [self sendEventWithInt:x withInt:y withInt:rawX withInt:rawY withInt:ADMotionEvent_ACTION_UP];
}

- (void)onTouchMoveWithInt:(int32_t)x
                   withInt:(int32_t)y
                   withInt:(int32_t)rawX
                   withInt:(int32_t)rawY {
  [self sendEventWithInt:x withInt:y withInt:rawX withInt:rawY withInt:ADMotionEvent_ACTION_MOVE];
}

- (void)onTouchCancelWithInt:(int32_t)x
                     withInt:(int32_t)y
                     withInt:(int32_t)rawX
                     withInt:(int32_t)rawY {
  [self sendEventWithInt:x withInt:y withInt:rawX withInt:rawY withInt:ADMotionEvent_ACTION_CANCEL];
}

- (void)onTouchOutsideWithInt:(int32_t)x
                      withInt:(int32_t)y
                      withInt:(int32_t)rawX
                      withInt:(int32_t)rawY {
  [self sendEventWithInt:x withInt:y withInt:rawX withInt:rawY withInt:ADMotionEvent_ACTION_OUTSIDE];
}

- (void)sendEventWithInt:(int32_t)x
                 withInt:(int32_t)y
                 withInt:(int32_t)rawX
                 withInt:(int32_t)rawY
                 withInt:(int32_t)action {
  ADMotionEvent *motionEvent = new_ADMotionEvent_init();
  [motionEvent setActionWithInt:action];
  [motionEvent setXWithInt:x];
  [motionEvent setYWithInt:y];
  [motionEvent setRawXWithInt:rawX];
  [motionEvent setRawYWithInt:rawY];
  [((id<ADView_OnTouchListener>) nil_chk(listener_)) onTouchWithADView:(ADView *) cast_chk([((id<ASIWidget>) nil_chk(widget_)) asWidget], [ADView class]) withADMotionEvent:motionEvent];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$I", @"action ", action)];
}

- (void)nativeAddOnTouchListenerWithId:(id)nativeWidget {
  UIView* view = ((UIView*)nativeWidget);
  view.userInteractionEnabled = YES;
  if ([nativeWidget isKindOfClass:[UIControl class]]) {
    UIControl* control = ((UIControl*)nativeWidget);
    [control removeTarget:nil action:NULL forControlEvents:UIControlEventAllEvents];
    [control addTarget:self action:@selector(touchDown:withEvent:) forControlEvents:UIControlEventTouchDown];
    [control addTarget:self action:@selector(touchUpInside:withEvent:) forControlEvents:UIControlEventTouchUpInside];
    [control addTarget:self action:@selector(touchMove:withEvent:) forControlEvents:UIControlEventTouchDragInside];
    [control addTarget:self action:@selector(touchMove:withEvent:) forControlEvents:UIControlEventTouchDragOutside];
    [control addTarget:self action:@selector(touchUpOutside:withEvent:) forControlEvents:UIControlEventTouchUpOutside];
    [control addTarget:self action:@selector(touchCancel:withEvent:) forControlEvents:UIControlEventTouchCancel];
    
  }
}

- (void)__javaClone:(ASViewImpl_UIControlEventTouchDelegate *)original {
  [super __javaClone:original];
  JreRelease(widget_);
}

- (void)touchDown:(id)sender withEvent:(UIEvent *) event{
  UITouch* touchEvent = [event.allTouches allObjects][0];
  CGPoint pointInView = [touchEvent locationInView:sender];
  CGPoint pointInWindow = [touchEvent locationInView:((UIControl*)sender).window];
  [self onTouchDownWithInt:pointInView.x withInt:pointInView.y withInt:pointInWindow.x withInt:pointInWindow.y];
}
- (void)touchUpInside:(id)sender withEvent:(UIEvent *) event{
  UITouch* touchEvent = [event.allTouches allObjects][0];
  CGPoint pointInView = [touchEvent locationInView:sender];
  CGPoint pointInWindow = [touchEvent locationInView:((UIControl*)sender).window];
  [self onTouchUpWithInt:pointInView.x withInt:pointInView.y withInt:pointInWindow.x withInt:pointInWindow.y];
}
- (void)touchMove:(id)sender withEvent:(UIEvent *) event{
  UITouch* touchEvent = [event.allTouches allObjects][0];
  CGPoint pointInView = [touchEvent locationInView:sender];
  CGPoint pointInWindow = [touchEvent locationInView:((UIControl*)sender).window];
  [self onTouchMoveWithInt:pointInView.x withInt:pointInView.y withInt:pointInWindow.x withInt:pointInWindow.y];
}
- (void)touchUpOutside:(id)sender withEvent:(UIEvent *) event{
  UITouch* touchEvent = [event.allTouches allObjects][0];
  CGPoint pointInView = [touchEvent locationInView:sender];
  CGPoint pointInWindow = [touchEvent locationInView:((UIControl*)sender).window];
  [self onTouchOutsideWithInt:pointInView.x withInt:pointInView.y withInt:pointInWindow.x withInt:pointInWindow.y];
}
- (void)touchCancel:(id)sender withEvent:(UIEvent *) event{
  UITouch* touchEvent = [event.allTouches allObjects][0];
  CGPoint pointInView = [touchEvent locationInView:sender];
  CGPoint pointInWindow = [touchEvent locationInView:((UIControl*)sender).window];
  [self onTouchCancelWithInt:pointInView.x withInt:pointInView.y withInt:pointInWindow.x withInt:pointInWindow.y];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 9, 10, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASIWidget:withADView_OnTouchListener:);
  methods[1].selector = @selector(onTouchDownWithInt:withInt:withInt:withInt:);
  methods[2].selector = @selector(onTouchUpWithInt:withInt:withInt:withInt:);
  methods[3].selector = @selector(onTouchMoveWithInt:withInt:withInt:withInt:);
  methods[4].selector = @selector(onTouchCancelWithInt:withInt:withInt:withInt:);
  methods[5].selector = @selector(onTouchOutsideWithInt:withInt:withInt:withInt:);
  methods[6].selector = @selector(sendEventWithInt:withInt:withInt:withInt:withInt:);
  methods[7].selector = @selector(nativeAddOnTouchListenerWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "widget_", "LASIWidget;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "listener_", "LADView_OnTouchListener;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASIWidget;LADView_OnTouchListener;", "onTouchDown", "IIII", "onTouchUp", "onTouchMove", "onTouchCancel", "onTouchOutside", "sendEvent", "IIIII", "nativeAddOnTouchListener", "LNSObject;", "LASViewImpl;" };
  static const J2ObjcClassInfo _ASViewImpl_UIControlEventTouchDelegate = { "UIControlEventTouchDelegate", "com.ashera.layout", ptrTable, methods, fields, 7, 0x8, 8, 2, 11, -1, -1, -1, -1 };
  return &_ASViewImpl_UIControlEventTouchDelegate;
}

@end

void ASViewImpl_UIControlEventTouchDelegate_initWithASIWidget_withADView_OnTouchListener_(ASViewImpl_UIControlEventTouchDelegate *self, id<ASIWidget> widget, id<ADView_OnTouchListener> listener) {
  NSObject_init(self);
  [((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(widget)) getFragment])) addListenerWithASIWidget:widget withId:self];
  self->widget_ = widget;
  self->listener_ = listener;
}

ASViewImpl_UIControlEventTouchDelegate *new_ASViewImpl_UIControlEventTouchDelegate_initWithASIWidget_withADView_OnTouchListener_(id<ASIWidget> widget, id<ADView_OnTouchListener> listener) {
  J2OBJC_NEW_IMPL(ASViewImpl_UIControlEventTouchDelegate, initWithASIWidget_withADView_OnTouchListener_, widget, listener)
}

ASViewImpl_UIControlEventTouchDelegate *create_ASViewImpl_UIControlEventTouchDelegate_initWithASIWidget_withADView_OnTouchListener_(id<ASIWidget> widget, id<ADView_OnTouchListener> listener) {
  J2OBJC_CREATE_IMPL(ASViewImpl_UIControlEventTouchDelegate, initWithASIWidget_withADView_OnTouchListener_, widget, listener)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASViewImpl_UIControlEventTouchDelegate)

@implementation ASViewImpl_UILongTapGestureRecognizerDelegate

- (instancetype)initWithASIWidget:(id<ASIWidget>)widget
   withADView_OnLongClickListener:(id<ADView_OnLongClickListener>)listener {
  ASViewImpl_UILongTapGestureRecognizerDelegate_initWithASIWidget_withADView_OnLongClickListener_(self, widget, listener);
  return self;
}

- (void)nativeAddLongClickListenerWithId:(id)nativeWidget {
  UIView* view = ((UIView*)nativeWidget);
  ASUILongTapGestureRecognizer *gestureRecognizer = [[ASUILongTapGestureRecognizer alloc] initWithTarget:self action:@selector(longPressDetected:)];
  view.userInteractionEnabled = YES;
  
  for (UIGestureRecognizer* interaction in view.gestureRecognizers) {
    if ([interaction isKindOfClass:[ASUILongTapGestureRecognizer class]]) {
      [view removeGestureRecognizer:interaction];
    }
  }
  [view addGestureRecognizer:gestureRecognizer];
}

- (void)onLongClick {
  [((id<ADView_OnLongClickListener>) nil_chk(listener_)) onLongClickWithADView:(ADView *) cast_chk([((id<ASIWidget>) nil_chk(widget_)) asWidget], [ADView class])];
}

- (void)__javaClone:(ASViewImpl_UILongTapGestureRecognizerDelegate *)original {
  [super __javaClone:original];
  JreRelease(widget_);
}

- (void)longPressDetected:(ASUILongTapGestureRecognizer *)tapRecognizer {
  ADView* adView = (ADView*)[widget_ asWidget];
  if ([adView isLongClickable]) {
    if (tapRecognizer.state == UIGestureRecognizerStateEnded) {
      [self onLongClick];
    }
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASIWidget:withADView_OnLongClickListener:);
  methods[1].selector = @selector(nativeAddLongClickListenerWithId:);
  methods[2].selector = @selector(onLongClick);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "widget_", "LASIWidget;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "listener_", "LADView_OnLongClickListener;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASIWidget;LADView_OnLongClickListener;", "nativeAddLongClickListener", "LNSObject;", "LASViewImpl;" };
  static const J2ObjcClassInfo _ASViewImpl_UILongTapGestureRecognizerDelegate = { "UILongTapGestureRecognizerDelegate", "com.ashera.layout", ptrTable, methods, fields, 7, 0x8, 3, 2, 3, -1, -1, -1, -1 };
  return &_ASViewImpl_UILongTapGestureRecognizerDelegate;
}

@end

void ASViewImpl_UILongTapGestureRecognizerDelegate_initWithASIWidget_withADView_OnLongClickListener_(ASViewImpl_UILongTapGestureRecognizerDelegate *self, id<ASIWidget> widget, id<ADView_OnLongClickListener> listener) {
  NSObject_init(self);
  [((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(widget)) getFragment])) addListenerWithASIWidget:widget withId:self];
  self->widget_ = widget;
  self->listener_ = listener;
}

ASViewImpl_UILongTapGestureRecognizerDelegate *new_ASViewImpl_UILongTapGestureRecognizerDelegate_initWithASIWidget_withADView_OnLongClickListener_(id<ASIWidget> widget, id<ADView_OnLongClickListener> listener) {
  J2OBJC_NEW_IMPL(ASViewImpl_UILongTapGestureRecognizerDelegate, initWithASIWidget_withADView_OnLongClickListener_, widget, listener)
}

ASViewImpl_UILongTapGestureRecognizerDelegate *create_ASViewImpl_UILongTapGestureRecognizerDelegate_initWithASIWidget_withADView_OnLongClickListener_(id<ASIWidget> widget, id<ADView_OnLongClickListener> listener) {
  J2OBJC_CREATE_IMPL(ASViewImpl_UILongTapGestureRecognizerDelegate, initWithASIWidget_withADView_OnLongClickListener_, widget, listener)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASViewImpl_UILongTapGestureRecognizerDelegate)

@implementation ASViewImpl_UITapGestureRecognizerDelegate

- (instancetype)initWithASIWidget:(id<ASIWidget>)widget
       withADView_OnClickListener:(id<ADView_OnClickListener>)listener {
  ASViewImpl_UITapGestureRecognizerDelegate_initWithASIWidget_withADView_OnClickListener_(self, widget, listener);
  return self;
}

- (void)nativeAddClickListenerWithNSString:(NSString *)id_
                                    withId:(id)nativeWidget {
  UIView* view = ((UIView*)nativeWidget);
  ASUITapGestureRecognizer *gestureRecognizer = [[ASUITapGestureRecognizer alloc] initWithTarget:self action:@selector(tapDetected:)];
  view.userInteractionEnabled = YES;
  gestureRecognizer.numberOfTapsRequired = 1;
  gestureRecognizer.id = id_;
  
  for (UIGestureRecognizer* interaction in view.gestureRecognizers) {
    if ([interaction isKindOfClass:[ASUITapGestureRecognizer class]] && [id_ isEqualToString:((ASUITapGestureRecognizer*)interaction).id]) {
      [view removeGestureRecognizer:interaction];
    }
  }
  [view addGestureRecognizer:gestureRecognizer];
}

- (void)click {
  [((id<ADView_OnClickListener>) nil_chk(listener_)) onClickWithADView:(ADView *) cast_chk([((id<ASIWidget>) nil_chk(widget_)) asWidget], [ADView class])];
}

- (void)__javaClone:(ASViewImpl_UITapGestureRecognizerDelegate *)original {
  [super __javaClone:original];
  JreRelease(widget_);
}

- (void)tapDetected:(ASUITapGestureRecognizer *)tapRecognizer {
  if (tapRecognizer.state == UIGestureRecognizerStateEnded) {
    [self click];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASIWidget:withADView_OnClickListener:);
  methods[1].selector = @selector(nativeAddClickListenerWithNSString:withId:);
  methods[2].selector = @selector(click);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "widget_", "LASIWidget;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "listener_", "LADView_OnClickListener;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASIWidget;LADView_OnClickListener;", "nativeAddClickListener", "LNSString;LNSObject;", "LASViewImpl;" };
  static const J2ObjcClassInfo _ASViewImpl_UITapGestureRecognizerDelegate = { "UITapGestureRecognizerDelegate", "com.ashera.layout", ptrTable, methods, fields, 7, 0x8, 3, 2, 3, -1, -1, -1, -1 };
  return &_ASViewImpl_UITapGestureRecognizerDelegate;
}

@end

void ASViewImpl_UITapGestureRecognizerDelegate_initWithASIWidget_withADView_OnClickListener_(ASViewImpl_UITapGestureRecognizerDelegate *self, id<ASIWidget> widget, id<ADView_OnClickListener> listener) {
  NSObject_init(self);
  [((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(widget)) getFragment])) addListenerWithASIWidget:widget withId:self];
  self->widget_ = widget;
  self->listener_ = listener;
}

ASViewImpl_UITapGestureRecognizerDelegate *new_ASViewImpl_UITapGestureRecognizerDelegate_initWithASIWidget_withADView_OnClickListener_(id<ASIWidget> widget, id<ADView_OnClickListener> listener) {
  J2OBJC_NEW_IMPL(ASViewImpl_UITapGestureRecognizerDelegate, initWithASIWidget_withADView_OnClickListener_, widget, listener)
}

ASViewImpl_UITapGestureRecognizerDelegate *create_ASViewImpl_UITapGestureRecognizerDelegate_initWithASIWidget_withADView_OnClickListener_(id<ASIWidget> widget, id<ADView_OnClickListener> listener) {
  J2OBJC_CREATE_IMPL(ASViewImpl_UITapGestureRecognizerDelegate, initWithASIWidget_withADView_OnClickListener_, widget, listener)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASViewImpl_UITapGestureRecognizerDelegate)

@implementation ASViewImpl_UIDragInteractionDelegate

- (instancetype)initWithASIWidget:(id<ASIWidget>)widget
                     withNSString:(NSString *)eventArgs {
  ASViewImpl_UIDragInteractionDelegate_initWithASIWidget_withNSString_(self, widget, eventArgs);
  return self;
}

- (id)getEventObjWithASIWidget:(id<ASIWidget>)w {
  return ASViewImpl_UIDragInteractionDelegate_getEventObjWithASIWidget_(self, w);
}

- (void)sendStartEventWithInt:(int32_t)x
                      withInt:(int32_t)y {
  ASViewImpl_UIDragInteractionDelegate_sendEventWithInt_withInt_withInt_withBoolean_(self, x, y, ADView_DragEvent_ACTION_DRAG_STARTED, true);
}

- (void)sendEndEventWithInt:(int32_t)x
                    withInt:(int32_t)y {
  ASViewImpl_UIDragInteractionDelegate_sendEventWithInt_withInt_withInt_withBoolean_(self, x, y, ADView_DragEvent_ACTION_DRAG_ENDED, false);
}

- (void)sendEventWithInt:(int32_t)x
                 withInt:(int32_t)y
                 withInt:(int32_t)action
             withBoolean:(bool)dragCanAccept {
  ASViewImpl_UIDragInteractionDelegate_sendEventWithInt_withInt_withInt_withBoolean_(self, x, y, action, dragCanAccept);
}

- (void)nativeAddDragInteractionWithId:(id)nativeWidget {
  UIDragInteraction* dragInteraction = [[UIDragInteraction alloc] initWithDelegate:self];
  dragInteraction.enabled = TRUE;
  UIView* view = ((UIView*)nativeWidget);
  for (id<UIInteraction> interaction in view.interactions) {
    if ([interaction isKindOfClass:[UIDragInteraction class]]) {
      [view removeInteraction:interaction];
    }
  }
  [view addInteraction:dragInteraction];
}

- (nonnull NSArray<UIDragItem *> *)dragInteraction:(nonnull UIDragInteraction *)interaction itemsForBeginningSession:(nonnull id<UIDragSession>)session {
  id<INativeWidget> view = (id<INativeWidget>)interaction.view;
  UIDragItem* dragItem = [[UIDragItem alloc] initWithItemProvider:  [[NSItemProvider alloc] initWithObject: [self getEventObjWithASIWidget:[view getWidget]]]];
  CGPoint point = [session locationInView:interaction.view];
  [self sendStartEventWithInt: point.x withInt: point.y];
  return [NSArray arrayWithObject:dragItem];
}

- (void)dragInteraction:(UIDragInteraction *)interaction session:(id<UIDragSession>)session didEndWithOperation:(UIDropOperation)operation {
  CGPoint point = [session locationInView:interaction.view];
  [self sendEndEventWithInt: point.x withInt: point.y];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 8, 9, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASIWidget:withNSString:);
  methods[1].selector = @selector(getEventObjWithASIWidget:);
  methods[2].selector = @selector(sendStartEventWithInt:withInt:);
  methods[3].selector = @selector(sendEndEventWithInt:withInt:);
  methods[4].selector = @selector(sendEventWithInt:withInt:withInt:withBoolean:);
  methods[5].selector = @selector(nativeAddDragInteractionWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "widget_", "LASIWidget;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "eventArgs_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASIWidget;LNSString;", "getEventObj", "LASIWidget;", "sendStartEvent", "II", "sendEndEvent", "sendEvent", "IIIZ", "nativeAddDragInteraction", "LNSObject;", "LASViewImpl;" };
  static const J2ObjcClassInfo _ASViewImpl_UIDragInteractionDelegate = { "UIDragInteractionDelegate", "com.ashera.layout", ptrTable, methods, fields, 7, 0x8, 6, 2, 10, -1, -1, -1, -1 };
  return &_ASViewImpl_UIDragInteractionDelegate;
}

@end

void ASViewImpl_UIDragInteractionDelegate_initWithASIWidget_withNSString_(ASViewImpl_UIDragInteractionDelegate *self, id<ASIWidget> widget, NSString *eventArgs) {
  NSObject_init(self);
  [((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(widget)) getFragment])) addListenerWithASIWidget:widget withId:self];
  self->widget_ = widget;
  self->eventArgs_ = eventArgs;
}

ASViewImpl_UIDragInteractionDelegate *new_ASViewImpl_UIDragInteractionDelegate_initWithASIWidget_withNSString_(id<ASIWidget> widget, NSString *eventArgs) {
  J2OBJC_NEW_IMPL(ASViewImpl_UIDragInteractionDelegate, initWithASIWidget_withNSString_, widget, eventArgs)
}

ASViewImpl_UIDragInteractionDelegate *create_ASViewImpl_UIDragInteractionDelegate_initWithASIWidget_withNSString_(id<ASIWidget> widget, NSString *eventArgs) {
  J2OBJC_CREATE_IMPL(ASViewImpl_UIDragInteractionDelegate, initWithASIWidget_withNSString_, widget, eventArgs)
}

id ASViewImpl_UIDragInteractionDelegate_getEventObjWithASIWidget_(ASViewImpl_UIDragInteractionDelegate *self, id<ASIWidget> w) {
  id<JavaUtilMap> eventData = ASPluginInvoker_getJSONCompatMap();
  [((id<ASIWidget>) nil_chk(w)) updateModelToEventMapWithJavaUtilMap:eventData withNSString:@"" withNSString:self->eventArgs_];
  return ASPluginInvoker_marshalWithId_(eventData);
}

void ASViewImpl_UIDragInteractionDelegate_sendEventWithInt_withInt_withInt_withBoolean_(ASViewImpl_UIDragInteractionDelegate *self, int32_t x, int32_t y, int32_t action, bool dragCanAccept) {
  id<JavaUtilList> listeners = [((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(self->widget_)) getFragment])) getListenerWithIOSClass:ASViewImpl_OnDragListener_class_()];
  if (listeners != nil) {
    for (ASViewImpl_OnDragListener * __strong listener in listeners) {
      ADView_DragEvent *dragEvent = new_ADView_DragEvent_init();
      [dragEvent setXWithInt:x];
      [dragEvent setYWithInt:y];
      [dragEvent setActionWithInt:action];
      ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(((ASViewImpl_OnDragListener *) nil_chk(listener))->w_)) asWidget], [ADView class]);
      [((ADView *) nil_chk(view)) setDragCanAcceptWithBoolean:dragCanAccept];
      [listener onDragWithADView:(ADView *) cast_chk([((id<ASIWidget>) nil_chk(self->widget_)) asWidget], [ADView class]) withADView_DragEvent:dragEvent];
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASViewImpl_UIDragInteractionDelegate)

@implementation ASViewImpl_UIDropInteractionDelegate

- (instancetype)initWithASIWidget:(id<ASIWidget>)widget
        withADView_OnDragListener:(id<ADView_OnDragListener>)onDragListener {
  ASViewImpl_UIDropInteractionDelegate_initWithASIWidget_withADView_OnDragListener_(self, widget, onDragListener);
  return self;
}

- (void)dragEnterWithInt:(int32_t)x
                 withInt:(int32_t)y {
  ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(widget_)) asWidget], [ADView class]);
  [((ADView *) nil_chk(view)) setDragHoveredWithBoolean:true];
  [self sendEventWithInt:x withInt:y withNSString:nil withInt:ADView_DragEvent_ACTION_DRAG_ENTERED];
}

- (void)dragLeaveWithInt:(int32_t)x
                 withInt:(int32_t)y {
  ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(widget_)) asWidget], [ADView class]);
  [((ADView *) nil_chk(view)) setDragHoveredWithBoolean:false];
  [self sendEventWithInt:x withInt:y withNSString:nil withInt:ADView_DragEvent_ACTION_DRAG_ENDED];
}

- (void)dragOverWithInt:(int32_t)x
                withInt:(int32_t)y {
  [self sendEventWithInt:x withInt:y withNSString:nil withInt:ADView_DragEvent_ACTION_DRAG_LOCATION];
}

- (void)dropWithInt:(int32_t)x
            withInt:(int32_t)y
       withNSString:(NSString *)data {
  [self sendEventWithInt:x withInt:y withNSString:data withInt:ADView_DragEvent_ACTION_DROP];
}

- (void)sendEventWithInt:(int32_t)x
                 withInt:(int32_t)y
            withNSString:(NSString *)data
                 withInt:(int32_t)action {
  ADView_DragEvent *dragEvent = new_ADView_DragEvent_init();
  [dragEvent setActionWithInt:action];
  [dragEvent setXWithInt:x];
  [dragEvent setYWithInt:y];
  [dragEvent setClipDataWithNSString:data];
  [((id<ADView_OnDragListener>) nil_chk(listener_)) onDragWithADView:(ADView *) cast_chk([((id<ASIWidget>) nil_chk(widget_)) asWidget], [ADView class]) withADView_DragEvent:dragEvent];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$I", @"action ", action)];
}

- (void)nativeAddDropInteractionWithId:(id)nativeWidget {
  UIDropInteraction* dropInteraction = [[UIDropInteraction alloc] initWithDelegate:self];
  UIView* view = ((UIView*)nativeWidget);
  for (id<UIInteraction> interaction in view.interactions) {
    if ([interaction isKindOfClass:[UIDropInteraction class]]) {
      [view removeInteraction:interaction];
    }
  }
  [view addInteraction:dropInteraction];
}

- (void)__javaClone:(ASViewImpl_UIDropInteractionDelegate *)original {
  [super __javaClone:original];
  JreRelease(widget_);
}

- (void)dropInteraction:(UIDropInteraction *)interaction performDrop:(id<UIDropSession>)session {
  CGPoint point = [session locationInView:interaction.view];
  if ([session canLoadObjectsOfClass:[NSString class]]) {
    [session loadObjectsOfClass:[NSString class] completion:^(NSArray<__kindof id<NSItemProviderReading>> * _Nonnull objects) {
      [self dropWithInt: point.x withInt: point.y withNSString:objects.firstObject];
    }];
  }
}

- (void)dropInteraction:(UIDropInteraction *)interaction sessionDidEnter:(id<UIDropSession>)session {
  CGPoint point = [session locationInView:interaction.view];
  [self dragEnterWithInt: point.x withInt: point.y];
}

- (void)dropInteraction:(UIDropInteraction *)interaction sessionDidExit:(id<UIDropSession>)session {
  CGPoint point = [session locationInView:interaction.view];
  [self dragLeaveWithInt: point.x withInt: point.y];
}

- (BOOL)dropInteraction:(UIDropInteraction *)interaction canHandleSession:(id<UIDropSession>)session {
  return TRUE;
}

- (UIDropProposal *)dropInteraction:(UIDropInteraction *)interaction sessionDidUpdate:(id<UIDropSession>)session {
  CGPoint point = [session locationInView:interaction.view];
  [self dragOverWithInt: point.x withInt: point.y];
  return [[UIDropProposal alloc] initWithDropOperation:UIDropOperationCopy];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 9, 10, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASIWidget:withADView_OnDragListener:);
  methods[1].selector = @selector(dragEnterWithInt:withInt:);
  methods[2].selector = @selector(dragLeaveWithInt:withInt:);
  methods[3].selector = @selector(dragOverWithInt:withInt:);
  methods[4].selector = @selector(dropWithInt:withInt:withNSString:);
  methods[5].selector = @selector(sendEventWithInt:withInt:withNSString:withInt:);
  methods[6].selector = @selector(nativeAddDropInteractionWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "widget_", "LASIWidget;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "listener_", "LADView_OnDragListener;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASIWidget;LADView_OnDragListener;", "dragEnter", "II", "dragLeave", "dragOver", "drop", "IILNSString;", "sendEvent", "IILNSString;I", "nativeAddDropInteraction", "LNSObject;", "LASViewImpl;" };
  static const J2ObjcClassInfo _ASViewImpl_UIDropInteractionDelegate = { "UIDropInteractionDelegate", "com.ashera.layout", ptrTable, methods, fields, 7, 0x8, 7, 2, 11, -1, -1, -1, -1 };
  return &_ASViewImpl_UIDropInteractionDelegate;
}

@end

void ASViewImpl_UIDropInteractionDelegate_initWithASIWidget_withADView_OnDragListener_(ASViewImpl_UIDropInteractionDelegate *self, id<ASIWidget> widget, id<ADView_OnDragListener> onDragListener) {
  NSObject_init(self);
  [((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(widget)) getFragment])) addListenerWithASIWidget:widget withId:self];
  self->widget_ = widget;
  self->listener_ = onDragListener;
}

ASViewImpl_UIDropInteractionDelegate *new_ASViewImpl_UIDropInteractionDelegate_initWithASIWidget_withADView_OnDragListener_(id<ASIWidget> widget, id<ADView_OnDragListener> onDragListener) {
  J2OBJC_NEW_IMPL(ASViewImpl_UIDropInteractionDelegate, initWithASIWidget_withADView_OnDragListener_, widget, onDragListener)
}

ASViewImpl_UIDropInteractionDelegate *create_ASViewImpl_UIDropInteractionDelegate_initWithASIWidget_withADView_OnDragListener_(id<ASIWidget> widget, id<ADView_OnDragListener> onDragListener) {
  J2OBJC_CREATE_IMPL(ASViewImpl_UIDropInteractionDelegate, initWithASIWidget_withADView_OnDragListener_, widget, onDragListener)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASViewImpl_UIDropInteractionDelegate)

@implementation ASViewImpl_UISwipeGestureRecognizerDelegate

- (instancetype)initWithASIWidget:(id<ASIWidget>)widget
  withASSwipeHelper_SwipeListener:(id<ASSwipeHelper_SwipeListener>)listener {
  ASViewImpl_UISwipeGestureRecognizerDelegate_initWithASIWidget_withASSwipeHelper_SwipeListener_(self, widget, listener);
  return self;
}

- (void)nativeAddSwipeListenerWithNSString:(NSString *)id_
                                    withId:(id)nativeWidget {
  UIView* view = ((UIView*)nativeWidget);
  view.userInteractionEnabled = YES;
  
  ASUISwipeGestureRecognizer *leftSwipeGestureRecognizer = [[ASUISwipeGestureRecognizer alloc] initWithTarget:self action:@selector(swipedLeft:)];
  leftSwipeGestureRecognizer.direction = UISwipeGestureRecognizerDirectionLeft;
  leftSwipeGestureRecognizer.id = id_;
  
  ASUISwipeGestureRecognizer *rightSwipeGestureRecognizer = [[ASUISwipeGestureRecognizer alloc] initWithTarget:self action:@selector(swipedRight:)];
  rightSwipeGestureRecognizer.direction = UISwipeGestureRecognizerDirectionRight;
  rightSwipeGestureRecognizer.id = id_;
  
  ASUISwipeGestureRecognizer *topSwipeGestureRecognizer = [[ASUISwipeGestureRecognizer alloc] initWithTarget:self action:@selector(swipedTop:)];
  topSwipeGestureRecognizer.direction = UISwipeGestureRecognizerDirectionUp;
  topSwipeGestureRecognizer.id = id_;
  
  ASUISwipeGestureRecognizer *bottomSwipeGestureRecognizer = [[ASUISwipeGestureRecognizer alloc] initWithTarget:self action:@selector(swipedLeft:)];
  bottomSwipeGestureRecognizer.direction = UISwipeGestureRecognizerDirectionDown;
  bottomSwipeGestureRecognizer.id = id_;
  
  for (UIGestureRecognizer* interaction in view.gestureRecognizers) {
    if ([interaction isKindOfClass:[ASUISwipeGestureRecognizer class]] && [id_ isEqualToString:((ASUISwipeGestureRecognizer*)interaction).id]) {
      [view removeGestureRecognizer:interaction];
    }
  }
  [view addGestureRecognizer:leftSwipeGestureRecognizer];
  [view addGestureRecognizer:rightSwipeGestureRecognizer];
  [view addGestureRecognizer:topSwipeGestureRecognizer];
  [view addGestureRecognizer:bottomSwipeGestureRecognizer];
}

- (void)swipeWithNSString:(NSString *)direction {
  [((id<ASSwipeHelper_SwipeListener>) nil_chk(listener_)) onSwipedWithNSString:direction];
}

- (void)__javaClone:(ASViewImpl_UISwipeGestureRecognizerDelegate *)original {
  [super __javaClone:original];
  JreRelease(widget_);
}

- (void)swipedLeft:(ASUISwipeGestureRecognizer *)tapRecognizer {
  [self swipeWithNSString: @"left"];
}
- (void)swipedRight:(ASUISwipeGestureRecognizer *)tapRecognizer {
  [self swipeWithNSString: @"right"];
}
- (void)swipedTop:(ASUISwipeGestureRecognizer *)tapRecognizer {
  [self swipeWithNSString: @"top"];
}
- (void)swipedBottom:(ASUISwipeGestureRecognizer *)tapRecognizer {
  [self swipeWithNSString: @"bottom"];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASIWidget:withASSwipeHelper_SwipeListener:);
  methods[1].selector = @selector(nativeAddSwipeListenerWithNSString:withId:);
  methods[2].selector = @selector(swipeWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "widget_", "LASIWidget;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "listener_", "LASSwipeHelper_SwipeListener;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASIWidget;LASSwipeHelper_SwipeListener;", "nativeAddSwipeListener", "LNSString;LNSObject;", "swipe", "LNSString;", "LASViewImpl;" };
  static const J2ObjcClassInfo _ASViewImpl_UISwipeGestureRecognizerDelegate = { "UISwipeGestureRecognizerDelegate", "com.ashera.layout", ptrTable, methods, fields, 7, 0x8, 3, 2, 5, -1, -1, -1, -1 };
  return &_ASViewImpl_UISwipeGestureRecognizerDelegate;
}

@end

void ASViewImpl_UISwipeGestureRecognizerDelegate_initWithASIWidget_withASSwipeHelper_SwipeListener_(ASViewImpl_UISwipeGestureRecognizerDelegate *self, id<ASIWidget> widget, id<ASSwipeHelper_SwipeListener> listener) {
  NSObject_init(self);
  [((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(widget)) getFragment])) addListenerWithASIWidget:widget withId:self];
  self->widget_ = widget;
  self->listener_ = listener;
}

ASViewImpl_UISwipeGestureRecognizerDelegate *new_ASViewImpl_UISwipeGestureRecognizerDelegate_initWithASIWidget_withASSwipeHelper_SwipeListener_(id<ASIWidget> widget, id<ASSwipeHelper_SwipeListener> listener) {
  J2OBJC_NEW_IMPL(ASViewImpl_UISwipeGestureRecognizerDelegate, initWithASIWidget_withASSwipeHelper_SwipeListener_, widget, listener)
}

ASViewImpl_UISwipeGestureRecognizerDelegate *create_ASViewImpl_UISwipeGestureRecognizerDelegate_initWithASIWidget_withASSwipeHelper_SwipeListener_(id<ASIWidget> widget, id<ASSwipeHelper_SwipeListener> listener) {
  J2OBJC_CREATE_IMPL(ASViewImpl_UISwipeGestureRecognizerDelegate, initWithASIWidget_withASSwipeHelper_SwipeListener_, widget, listener)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASViewImpl_UISwipeGestureRecognizerDelegate)

@implementation ASViewImpl_PanGestureRecognizer

- (instancetype)initWithASIWidget:(id<ASIWidget>)widget
                           withId:(id)uiView
                           withId:(id)uiLocationView
       withASViewImpl_PanCallBack:(id<ASViewImpl_PanCallBack>)callback {
  ASViewImpl_PanGestureRecognizer_initWithASIWidget_withId_withId_withASViewImpl_PanCallBack_(self, widget, uiView, uiLocationView, callback);
  return self;
}

- (void)addUIPanGestureRecognizer {
  ASViewImpl_PanGestureRecognizer_addUIPanGestureRecognizer(self);
}

- (void)__javaClone:(ASViewImpl_PanGestureRecognizer *)original {
  [super __javaClone:original];
  JreRelease(widget_);
}

-(void)move:(UIPanGestureRecognizer*)tapRecognizer {
  int x = [tapRecognizer locationInView:self->uiLocationView_].x;
  int y = [tapRecognizer locationInView:self->uiLocationView_].y;
  if (tapRecognizer.state == UIGestureRecognizerStateBegan) {
    [self->callback_ handlePanStartWithASIWidget:self->widget_ withId: self->uiView_ withInt: x withInt: y];
  } else if (tapRecognizer.state == UIGestureRecognizerStateEnded || tapRecognizer.state == UIGestureRecognizerStateCancelled) {
    [self->callback_ handlePanEndWithASIWidget:self->widget_ withId: self->uiView_ withInt: x withInt: y];
  } else {
    [self->callback_ handlePanDragWithASIWidget:self->widget_ withId: self->uiView_ withInt: x withInt: y];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x102, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASIWidget:withId:withId:withASViewImpl_PanCallBack:);
  methods[1].selector = @selector(addUIPanGestureRecognizer);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "widget_", "LASIWidget;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "uiView_", "LNSObject;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "uiLocationView_", "LNSObject;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "callback_", "LASViewImpl_PanCallBack;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASIWidget;LNSObject;LNSObject;LASViewImpl_PanCallBack;", "LASViewImpl;" };
  static const J2ObjcClassInfo _ASViewImpl_PanGestureRecognizer = { "PanGestureRecognizer", "com.ashera.layout", ptrTable, methods, fields, 7, 0x8, 2, 4, 1, -1, -1, -1, -1 };
  return &_ASViewImpl_PanGestureRecognizer;
}

@end

void ASViewImpl_PanGestureRecognizer_initWithASIWidget_withId_withId_withASViewImpl_PanCallBack_(ASViewImpl_PanGestureRecognizer *self, id<ASIWidget> widget, id uiView, id uiLocationView, id<ASViewImpl_PanCallBack> callback) {
  NSObject_init(self);
  [((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(widget)) getFragment])) addListenerWithASIWidget:widget withId:self];
  self->widget_ = widget;
  self->uiView_ = uiView;
  self->uiLocationView_ = uiLocationView;
  self->callback_ = callback;
}

ASViewImpl_PanGestureRecognizer *new_ASViewImpl_PanGestureRecognizer_initWithASIWidget_withId_withId_withASViewImpl_PanCallBack_(id<ASIWidget> widget, id uiView, id uiLocationView, id<ASViewImpl_PanCallBack> callback) {
  J2OBJC_NEW_IMPL(ASViewImpl_PanGestureRecognizer, initWithASIWidget_withId_withId_withASViewImpl_PanCallBack_, widget, uiView, uiLocationView, callback)
}

ASViewImpl_PanGestureRecognizer *create_ASViewImpl_PanGestureRecognizer_initWithASIWidget_withId_withId_withASViewImpl_PanCallBack_(id<ASIWidget> widget, id uiView, id uiLocationView, id<ASViewImpl_PanCallBack> callback) {
  J2OBJC_CREATE_IMPL(ASViewImpl_PanGestureRecognizer, initWithASIWidget_withId_withId_withASViewImpl_PanCallBack_, widget, uiView, uiLocationView, callback)
}

void ASViewImpl_PanGestureRecognizer_addUIPanGestureRecognizer(ASViewImpl_PanGestureRecognizer *self) {
  UIView* uiview = ((UIView*) self->uiView_);
  uiview.userInteractionEnabled = YES;
  UIPanGestureRecognizer *panRecognizer = [[UIPanGestureRecognizer alloc] initWithTarget:self action:@selector(move:)];
  [panRecognizer setMinimumNumberOfTouches:1];
  [panRecognizer setMaximumNumberOfTouches:1];
  [uiview addGestureRecognizer:panRecognizer];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASViewImpl_PanGestureRecognizer)

@implementation ASViewImpl_AnimationUtils

- (instancetype)initWithId:(id)objview
withASViewImpl_AnimationCallBack:(id<ASViewImpl_AnimationCallBack>)callBack {
  ASViewImpl_AnimationUtils_initWithId_withASViewImpl_AnimationCallBack_(self, objview, callBack);
  return self;
}

- (void)nativeAnimateWithInt:(int32_t)x
                     withInt:(int32_t)y
                     withInt:(int32_t)animationDurationInMs {
  ASViewImpl_AnimationUtils_nativeAnimateWithInt_withInt_withInt_(self, x, y, animationDurationInMs);
}

-(void)animationDidUpdate {
  UIView* uiview = (UIView*)self->objview_;
  CALayer* calayer =  ((CALayer*)uiview.layer.presentationLayer);
  [self->callBack_ animatingWithInt: calayer.frame.origin.x withInt: calayer.frame.origin.y];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithId:withASViewImpl_AnimationCallBack:);
  methods[1].selector = @selector(nativeAnimateWithInt:withInt:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "objview_", "LNSObject;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "callBack_", "LASViewImpl_AnimationCallBack;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSObject;LASViewImpl_AnimationCallBack;", "nativeAnimate", "III", "LASViewImpl;" };
  static const J2ObjcClassInfo _ASViewImpl_AnimationUtils = { "AnimationUtils", "com.ashera.layout", ptrTable, methods, fields, 7, 0x8, 2, 2, 3, -1, -1, -1, -1 };
  return &_ASViewImpl_AnimationUtils;
}

@end

void ASViewImpl_AnimationUtils_initWithId_withASViewImpl_AnimationCallBack_(ASViewImpl_AnimationUtils *self, id objview, id<ASViewImpl_AnimationCallBack> callBack) {
  NSObject_init(self);
  self->objview_ = objview;
  self->callBack_ = callBack;
}

ASViewImpl_AnimationUtils *new_ASViewImpl_AnimationUtils_initWithId_withASViewImpl_AnimationCallBack_(id objview, id<ASViewImpl_AnimationCallBack> callBack) {
  J2OBJC_NEW_IMPL(ASViewImpl_AnimationUtils, initWithId_withASViewImpl_AnimationCallBack_, objview, callBack)
}

ASViewImpl_AnimationUtils *create_ASViewImpl_AnimationUtils_initWithId_withASViewImpl_AnimationCallBack_(id objview, id<ASViewImpl_AnimationCallBack> callBack) {
  J2OBJC_CREATE_IMPL(ASViewImpl_AnimationUtils, initWithId_withASViewImpl_AnimationCallBack_, objview, callBack)
}

void ASViewImpl_AnimationUtils_nativeAnimateWithInt_withInt_withInt_(ASViewImpl_AnimationUtils *self, int32_t x, int32_t y, int32_t animationDurationInMs) {
  UIView* uiview = ((UIView*) self->objview_);
  CADisplayLink *displayLink = [CADisplayLink displayLinkWithTarget:self selector:@selector(animationDidUpdate)];
  displayLink.frameInterval = 1;
  [displayLink addToRunLoop:[NSRunLoop currentRunLoop] forMode:NSDefaultRunLoopMode];
  
  [UIView animateWithDuration:(animationDurationInMs/(float)1000) animations:^{
    CGRect frame = uiview.frame;
    frame.origin.x = x;
    frame.origin.y = y;
    uiview.frame = frame;
  }completion:^(BOOL finished) {
    [displayLink invalidate];
  }];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASViewImpl_AnimationUtils)

@implementation ASViewImpl_$Lambda$1

- (void)run {
  [((ADAnimator *) nil_chk(val$animator_)) start];
}

@end

void ASViewImpl_$Lambda$1_initWithADAnimator_(ASViewImpl_$Lambda$1 *self, ADAnimator *capture$0) {
  self->val$animator_ = capture$0;
  NSObject_init(self);
}

ASViewImpl_$Lambda$1 *new_ASViewImpl_$Lambda$1_initWithADAnimator_(ADAnimator *capture$0) {
  J2OBJC_NEW_IMPL(ASViewImpl_$Lambda$1, initWithADAnimator_, capture$0)
}

ASViewImpl_$Lambda$1 *create_ASViewImpl_$Lambda$1_initWithADAnimator_(ADAnimator *capture$0) {
  J2OBJC_CREATE_IMPL(ASViewImpl_$Lambda$1, initWithADAnimator_, capture$0)
}
