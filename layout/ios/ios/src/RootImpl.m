//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-ios-widgets\ios_widget_library\src\main\java\com\ashera\layout\RootImpl.java
//

#define J2OBJC_IMPORTED_BY_JAVA_IMPLEMENTATION 1




#include "AbstractBitFlagConverter.h"
#include "BaseHasWidgets.h"
#include "ConverterFactory.h"
#include "Event.h"
#include "EventBus.h"
#include "EventBusHandler.h"
#include "HasWidgets.h"
#include "IConverter.h"
#include "IFragment.h"
#include "ILifeCycleDecorator.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "IWidget.h"
#include "IWidgetLifeCycleListener.h"
#include "J2ObjC_source.h"
#include "LayoutTransition.h"
#include "MeasureEvent.h"
#include "OnLayoutEvent.h"
#include "PluginInvoker.h"
#include "Rect.h"
#include "RelativeLayout.h"
#include "RootImpl.h"
#include "View.h"
#include "ViewGroup.h"
#include "ViewGroupImpl.h"
#include "ViewImpl.h"
#include "WidgetAttribute.h"
#include "WidgetFactory.h"
#include "java/lang/Boolean.h"
#include "java/lang/Integer.h"
#include "java/lang/Runnable.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/Collection.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"

#include <UIKit/UIKit.h>
#include "ASUIView.h"
#include "HasLifeCycleDecorators.h"


@class NSString;


#pragma clang diagnostic error "-Wreturn-type"
#pragma clang diagnostic ignored "-Wswitch"


#pragma clang diagnostic ignored "-Wprotocol"

@interface ASRootImpl () {
 @public
  id uiView_;
  ADRelativeLayout *relativeLayout_;
  JavaUtilHashMap *ruleMapper_;
}

- (void)addDellocHandler;

- (void)setWidgetOnNativeClass;

- (void)nativeRemoveViewWithASIWidget:(id<ASIWidget>)widget;

- (void)createLayoutParamsWithADView:(ADView *)view;

- (ADRelativeLayout_LayoutParams *)getLayoutParamsWithADView:(ADView *)view;

- (void)addRuleWithADRelativeLayout_LayoutParams:(ADRelativeLayout_LayoutParams *)layoutParams
                                         withInt:(int32_t)rule
                                          withId:(id)objValue;

- (void)addRemoveRuleWithADRelativeLayout_LayoutParams:(ADRelativeLayout_LayoutParams *)layoutParams
                                               withInt:(int32_t)rule
                                                withId:(id)objValue;

- (void)removeRuleWithADRelativeLayout_LayoutParams:(ADRelativeLayout_LayoutParams *)layoutParams
                                            withInt:(int32_t)rule;

- (id)getRuleWithADRelativeLayout_LayoutParams:(ADRelativeLayout_LayoutParams *)layoutParams
                                       withInt:(int32_t)rule;

- (id)getBoolRuleWithADRelativeLayout_LayoutParams:(ADRelativeLayout_LayoutParams *)layoutParams
                                           withInt:(int32_t)rule;

- (int32_t)getInferredRuleWithInt:(int32_t)rule;

- (void)removeAllRulesWithADRelativeLayout_LayoutParams:(ADRelativeLayout_LayoutParams *)layoutParams;

- (id<JavaUtilMap>)invertMapWithJavaUtilMap:(id<JavaUtilMap>)map;

- (void)removeRuleWithADRelativeLayout_LayoutParams:(ADRelativeLayout_LayoutParams *)layoutParams
                                             withId:(id)objValue;

- (void)nativeCreateWithJavaUtilMap:(id<JavaUtilMap>)params;

- (void)setupForInsets;

@end

J2OBJC_FIELD_SETTER(ASRootImpl, uiView_, id)
J2OBJC_FIELD_SETTER(ASRootImpl, relativeLayout_, ADRelativeLayout *)
J2OBJC_FIELD_SETTER(ASRootImpl, ruleMapper_, JavaUtilHashMap *)

inline NSString *ASRootImpl_get_DELLOC_EVENT(void);
static NSString *ASRootImpl_DELLOC_EVENT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ASRootImpl, DELLOC_EVENT, NSString *)

__attribute__((unused)) static void ASRootImpl_addDellocHandler(ASRootImpl *self);

__attribute__((unused)) static void ASRootImpl_setWidgetOnNativeClass(ASRootImpl *self);

__attribute__((unused)) static void ASRootImpl_nativeRemoveViewWithASIWidget_(ASRootImpl *self, id<ASIWidget> widget);

__attribute__((unused)) static void ASRootImpl_createLayoutParamsWithADView_(ASRootImpl *self, ADView *view);

__attribute__((unused)) static ADRelativeLayout_LayoutParams *ASRootImpl_getLayoutParamsWithADView_(ASRootImpl *self, ADView *view);

__attribute__((unused)) static void ASRootImpl_addRuleWithADRelativeLayout_LayoutParams_withInt_withId_(ASRootImpl *self, ADRelativeLayout_LayoutParams *layoutParams, int32_t rule, id objValue);

__attribute__((unused)) static void ASRootImpl_addRemoveRuleWithADRelativeLayout_LayoutParams_withInt_withId_(ASRootImpl *self, ADRelativeLayout_LayoutParams *layoutParams, int32_t rule, id objValue);

__attribute__((unused)) static void ASRootImpl_removeRuleWithADRelativeLayout_LayoutParams_withInt_(ASRootImpl *self, ADRelativeLayout_LayoutParams *layoutParams, int32_t rule);

__attribute__((unused)) static id ASRootImpl_getRuleWithADRelativeLayout_LayoutParams_withInt_(ASRootImpl *self, ADRelativeLayout_LayoutParams *layoutParams, int32_t rule);

__attribute__((unused)) static id ASRootImpl_getBoolRuleWithADRelativeLayout_LayoutParams_withInt_(ASRootImpl *self, ADRelativeLayout_LayoutParams *layoutParams, int32_t rule);

__attribute__((unused)) static int32_t ASRootImpl_getInferredRuleWithInt_(ASRootImpl *self, int32_t rule);

__attribute__((unused)) static void ASRootImpl_removeAllRulesWithADRelativeLayout_LayoutParams_(ASRootImpl *self, ADRelativeLayout_LayoutParams *layoutParams);

__attribute__((unused)) static id<JavaUtilMap> ASRootImpl_invertMapWithJavaUtilMap_(ASRootImpl *self, id<JavaUtilMap> map);

__attribute__((unused)) static void ASRootImpl_removeRuleWithADRelativeLayout_LayoutParams_withId_(ASRootImpl *self, ADRelativeLayout_LayoutParams *layoutParams, id objValue);

__attribute__((unused)) static void ASRootImpl_nativeCreateWithJavaUtilMap_(ASRootImpl *self, id<JavaUtilMap> params);

__attribute__((unused)) static void ASRootImpl_setupForInsets(ASRootImpl *self);

@interface ASRootImpl_DallocHandler () {
 @public
  WEAK_ ASRootImpl *this$0_;
}

@end

@interface ASRootImpl_RemoveRule () {
 @public
  id<JavaUtilMap> mapping_;
}

@end

J2OBJC_FIELD_SETTER(ASRootImpl_RemoveRule, mapping_, id<JavaUtilMap>)

@interface ASRootImpl_RootExt () {
 @public
  WEAK_ ASRootImpl *this$0_;
  ASMeasureEvent *measureFinished_;
  ASOnLayoutEvent *onLayoutEvent_;
  id<JavaUtilList> overlays_;
  int32_t mMaxWidth_;
  int32_t mMaxHeight_;
  id<JavaUtilMap> templates_;
}

@end

J2OBJC_FIELD_SETTER(ASRootImpl_RootExt, measureFinished_, ASMeasureEvent *)
J2OBJC_FIELD_SETTER(ASRootImpl_RootExt, onLayoutEvent_, ASOnLayoutEvent *)
J2OBJC_FIELD_SETTER(ASRootImpl_RootExt, overlays_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(ASRootImpl_RootExt, templates_, id<JavaUtilMap>)

@interface ASRootImpl_$Lambda$1 : NSObject < JavaLangRunnable > {
 @public
  id<ASIWidget> val$widget_;
}

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(ASRootImpl_$Lambda$1)

__attribute__((unused)) static void ASRootImpl_$Lambda$1_initWithASIWidget_(ASRootImpl_$Lambda$1 *self, id<ASIWidget> capture$0);

__attribute__((unused)) static ASRootImpl_$Lambda$1 *new_ASRootImpl_$Lambda$1_initWithASIWidget_(id<ASIWidget> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASRootImpl_$Lambda$1 *create_ASRootImpl_$Lambda$1_initWithASIWidget_(id<ASIWidget> capture$0);


J2OBJC_INITIALIZED_DEFN(ASRootImpl)

NSString *ASRootImpl_LOCAL_NAME = @"layout";
NSString *ASRootImpl_GROUP_NAME = @"layout";

@implementation ASRootImpl

@synthesize uiView = uiView_;

- (void)addDellocHandler {
  ASRootImpl_addDellocHandler(self);
}

- (void)loadAttributesWithNSString:(NSString *)localName {
  ASViewGroupImpl_register__WithNSString_(localName);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"gravity"])) withTypeWithNSString:@"gravity"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"ignoreGravity"])) withTypeWithNSString:@"id"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_above"])) withTypeWithNSString:@"id"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_alignBaseline"])) withTypeWithNSString:@"id"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_alignBottom"])) withTypeWithNSString:@"id"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_alignEnd"])) withTypeWithNSString:@"id"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_alignLeft"])) withTypeWithNSString:@"id"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_alignParentBottom"])) withTypeWithNSString:@"boolean"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_alignParentEnd"])) withTypeWithNSString:@"boolean"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_alignParentLeft"])) withTypeWithNSString:@"boolean"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_alignParentRight"])) withTypeWithNSString:@"boolean"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_alignParentStart"])) withTypeWithNSString:@"boolean"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_alignParentTop"])) withTypeWithNSString:@"boolean"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_alignRight"])) withTypeWithNSString:@"id"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_alignStart"])) withTypeWithNSString:@"id"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_alignTop"])) withTypeWithNSString:@"id"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_below"])) withTypeWithNSString:@"id"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_centerHorizontal"])) withTypeWithNSString:@"boolean"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_centerInParent"])) withTypeWithNSString:@"boolean"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_centerVertical"])) withTypeWithNSString:@"boolean"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_toEndOf"])) withTypeWithNSString:@"id"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_toLeftOf"])) withTypeWithNSString:@"id"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_toRightOf"])) withTypeWithNSString:@"id"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_toStartOf"])) withTypeWithNSString:@"id"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_alignWithParentIfMissing"])) withTypeWithNSString:@"boolean"])) forChild]);
  ASConverterFactory_register__WithNSString_withASIConverter_(@"layout.removeRule", new_ASRootImpl_RemoveRule_init());
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_removeRule"])) withTypeWithNSString:@"layout.removeRule"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_removeAllRules"])) withTypeWithNSString:@"boolean"])) forChild]);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASRootImpl_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithNSString:(NSString *)localname {
  ASRootImpl_initWithNSString_(self, localname);
  return self;
}

- (instancetype)initWithNSString:(NSString *)groupName
                    withNSString:(NSString *)localname {
  ASRootImpl_initWithNSString_withNSString_(self, groupName, localname);
  return self;
}

- (id<ASIWidget>)newInstance {
  return new_ASRootImpl_initWithNSString_withNSString_(groupName_, localName_);
}

- (void)createWithASIFragment:(id<ASIFragment>)fragment
              withJavaUtilMap:(id<JavaUtilMap>)params {
  [super createWithASIFragment:fragment withJavaUtilMap:params];
  relativeLayout_ = new_ASRootImpl_RootExt_initWithASRootImpl_(self);
  ASRootImpl_nativeCreateWithJavaUtilMap_(self, params);
  ASRootImpl_addDellocHandler(self);
  if (ASViewImpl_isRTLLayoutWithASIWidget_(self)) {
    ASViewImpl_setLayoutDirectionWithASIWidget_withId_(self, JavaLangInteger_valueOfWithInt_(ADView_LAYOUT_DIRECTION_RTL));
  }
  else {
    ASViewImpl_setLayoutDirectionWithASIWidget_withId_(self, JavaLangInteger_valueOfWithInt_(ADView_LAYOUT_DIRECTION_LTR));
  }
  ASViewGroupImpl_registerCommandConveterWithASIWidget_(self);
  ASRootImpl_setWidgetOnNativeClass(self);
}

- (void)setWidgetOnNativeClass {
  ASRootImpl_setWidgetOnNativeClass(self);
}

- (id)asWidget {
  return relativeLayout_;
}

- (bool)removeWithASIWidget:(id<ASIWidget>)w {
  bool remove = [super removeWithASIWidget:w];
  [((ADRelativeLayout *) nil_chk(relativeLayout_)) removeViewWithADView:(ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class])];
  ASRootImpl_nativeRemoveViewWithASIWidget_(self, w);
  return remove;
}

- (bool)removeWithInt:(int32_t)index {
  id<ASIWidget> widget = [((id<JavaUtilList>) nil_chk(widgets_)) getWithInt:index];
  bool remove = [super removeWithInt:index];
  if (index + 1 <= [((ADRelativeLayout *) nil_chk(relativeLayout_)) getChildCount]) {
    [((ADRelativeLayout *) nil_chk(relativeLayout_)) removeViewAtWithInt:index];
    ASRootImpl_nativeRemoveViewWithASIWidget_(self, widget);
  }
  return remove;
}

- (void)nativeRemoveViewWithASIWidget:(id<ASIWidget>)widget {
  ASRootImpl_nativeRemoveViewWithASIWidget_(self, widget);
}

- (void)addWithASIWidget:(id<ASIWidget>)w
                 withInt:(int32_t)index {
  if (index != -2) {
    ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]);
    ASRootImpl_createLayoutParamsWithADView_(self, view);
    if (index == -1) {
      [((ADRelativeLayout *) nil_chk(relativeLayout_)) addViewWithADView:view];
    }
    else {
      [((ADRelativeLayout *) nil_chk(relativeLayout_)) addViewWithADView:view withInt:index];
    }
  }
  ASViewGroupImpl_nativeAddViewWithId_withId_([self asNativeWidget], [((id<ASIWidget>) nil_chk(w)) asNativeWidget]);
  [super addWithASIWidget:w withInt:index];
}

- (void)createLayoutParamsWithADView:(ADView *)view {
  ASRootImpl_createLayoutParamsWithADView_(self, view);
}

- (ADRelativeLayout_LayoutParams *)getLayoutParamsWithADView:(ADView *)view {
  return ASRootImpl_getLayoutParamsWithADView_(self, view);
}

- (void)setChildAttributeWithASIWidget:(id<ASIWidget>)w
                 withASWidgetAttribute:(ASWidgetAttribute *)key
                          withNSString:(NSString *)strValue
                                withId:(id)objValue {
  ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]);
  ADRelativeLayout_LayoutParams *layoutParams = ASRootImpl_getLayoutParamsWithADView_(self, view);
  ASViewGroupImpl_setChildAttributeWithASIWidget_withASWidgetAttribute_withId_withId_(w, key, objValue, layoutParams);
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"layout_width", @"layout_height", @"layout_above", @"layout_alignBaseline", @"layout_alignBottom", @"layout_alignEnd", @"layout_alignLeft", @"layout_alignParentBottom", @"layout_alignParentEnd", @"layout_alignParentLeft", @"layout_alignParentRight", @"layout_alignParentStart", @"layout_alignParentTop", @"layout_alignRight", @"layout_alignStart", @"layout_alignTop", @"layout_below", @"layout_centerHorizontal", @"layout_centerInParent", @"layout_centerVertical", @"layout_toEndOf", @"layout_toLeftOf", @"layout_toRightOf", @"layout_toStartOf", @"layout_alignWithParentIfMissing", @"layout_removeRule", @"layout_removeAllRules" }, 27)) {
    case 0:
    ((ADRelativeLayout_LayoutParams *) nil_chk(layoutParams))->width_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
    break;
    case 1:
    ((ADRelativeLayout_LayoutParams *) nil_chk(layoutParams))->height_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
    break;
    case 2:
    {
      ASRootImpl_addRuleWithADRelativeLayout_LayoutParams_withInt_withId_(self, layoutParams, ADRelativeLayout_ABOVE, objValue);
    }
    break;
    case 3:
    {
      ASRootImpl_addRuleWithADRelativeLayout_LayoutParams_withInt_withId_(self, layoutParams, ADRelativeLayout_ALIGN_BASELINE, objValue);
    }
    break;
    case 4:
    {
      ASRootImpl_addRuleWithADRelativeLayout_LayoutParams_withInt_withId_(self, layoutParams, ADRelativeLayout_ALIGN_BOTTOM, objValue);
    }
    break;
    case 5:
    {
      ASRootImpl_addRuleWithADRelativeLayout_LayoutParams_withInt_withId_(self, layoutParams, ADRelativeLayout_ALIGN_END, objValue);
    }
    break;
    case 6:
    {
      ASRootImpl_addRuleWithADRelativeLayout_LayoutParams_withInt_withId_(self, layoutParams, ADRelativeLayout_ALIGN_LEFT, objValue);
    }
    break;
    case 7:
    {
      ASRootImpl_addRemoveRuleWithADRelativeLayout_LayoutParams_withInt_withId_(self, layoutParams, ADRelativeLayout_ALIGN_PARENT_BOTTOM, objValue);
    }
    break;
    case 8:
    {
      ASRootImpl_addRemoveRuleWithADRelativeLayout_LayoutParams_withInt_withId_(self, layoutParams, ADRelativeLayout_ALIGN_PARENT_END, objValue);
    }
    break;
    case 9:
    {
      ASRootImpl_addRemoveRuleWithADRelativeLayout_LayoutParams_withInt_withId_(self, layoutParams, ADRelativeLayout_ALIGN_PARENT_LEFT, objValue);
    }
    break;
    case 10:
    {
      ASRootImpl_addRemoveRuleWithADRelativeLayout_LayoutParams_withInt_withId_(self, layoutParams, ADRelativeLayout_ALIGN_PARENT_RIGHT, objValue);
    }
    break;
    case 11:
    {
      ASRootImpl_addRemoveRuleWithADRelativeLayout_LayoutParams_withInt_withId_(self, layoutParams, ADRelativeLayout_ALIGN_PARENT_START, objValue);
    }
    break;
    case 12:
    {
      ASRootImpl_addRemoveRuleWithADRelativeLayout_LayoutParams_withInt_withId_(self, layoutParams, ADRelativeLayout_ALIGN_PARENT_TOP, objValue);
    }
    break;
    case 13:
    {
      ASRootImpl_addRuleWithADRelativeLayout_LayoutParams_withInt_withId_(self, layoutParams, ADRelativeLayout_ALIGN_RIGHT, objValue);
    }
    break;
    case 14:
    {
      ASRootImpl_addRuleWithADRelativeLayout_LayoutParams_withInt_withId_(self, layoutParams, ADRelativeLayout_ALIGN_START, objValue);
    }
    break;
    case 15:
    {
      ASRootImpl_addRuleWithADRelativeLayout_LayoutParams_withInt_withId_(self, layoutParams, ADRelativeLayout_ALIGN_TOP, objValue);
    }
    break;
    case 16:
    {
      ASRootImpl_addRuleWithADRelativeLayout_LayoutParams_withInt_withId_(self, layoutParams, ADRelativeLayout_BELOW, objValue);
    }
    break;
    case 17:
    {
      ASRootImpl_addRemoveRuleWithADRelativeLayout_LayoutParams_withInt_withId_(self, layoutParams, ADRelativeLayout_CENTER_HORIZONTAL, objValue);
    }
    break;
    case 18:
    {
      ASRootImpl_addRemoveRuleWithADRelativeLayout_LayoutParams_withInt_withId_(self, layoutParams, ADRelativeLayout_CENTER_IN_PARENT, objValue);
    }
    break;
    case 19:
    {
      ASRootImpl_addRemoveRuleWithADRelativeLayout_LayoutParams_withInt_withId_(self, layoutParams, ADRelativeLayout_CENTER_VERTICAL, objValue);
    }
    break;
    case 20:
    {
      ASRootImpl_addRuleWithADRelativeLayout_LayoutParams_withInt_withId_(self, layoutParams, ADRelativeLayout_END_OF, objValue);
    }
    break;
    case 21:
    {
      ASRootImpl_addRuleWithADRelativeLayout_LayoutParams_withInt_withId_(self, layoutParams, ADRelativeLayout_LEFT_OF, objValue);
    }
    break;
    case 22:
    {
      ASRootImpl_addRuleWithADRelativeLayout_LayoutParams_withInt_withId_(self, layoutParams, ADRelativeLayout_RIGHT_OF, objValue);
    }
    break;
    case 23:
    {
      ASRootImpl_addRuleWithADRelativeLayout_LayoutParams_withInt_withId_(self, layoutParams, ADRelativeLayout_START_OF, objValue);
    }
    break;
    case 24:
    {
      ((ADRelativeLayout_LayoutParams *) nil_chk(layoutParams))->alignWithParent_ = [((JavaLangBoolean *) nil_chk(((JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class])))) booleanValue];
    }
    break;
    case 25:
    {
      ASRootImpl_removeRuleWithADRelativeLayout_LayoutParams_withId_(self, layoutParams, objValue);
    }
    break;
    case 26:
    {
      ASRootImpl_removeAllRulesWithADRelativeLayout_LayoutParams_(self, layoutParams);
    }
    break;
    default:
    break;
  }
  [((ADView *) nil_chk(view)) setLayoutParamsWithADViewGroup_LayoutParams:layoutParams];
}

- (id)getChildAttributeWithASIWidget:(id<ASIWidget>)w
               withASWidgetAttribute:(ASWidgetAttribute *)key {
  id attributeValue = ASViewGroupImpl_getChildAttributeWithASIWidget_withASWidgetAttribute_(w, key);
  if (attributeValue != nil) {
    return attributeValue;
  }
  ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]);
  ADRelativeLayout_LayoutParams *layoutParams = ASRootImpl_getLayoutParamsWithADView_(self, view);
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"layout_width", @"layout_height", @"layout_above", @"layout_alignBaseline", @"layout_alignBottom", @"layout_alignEnd", @"layout_alignLeft", @"layout_alignParentBottom", @"layout_alignParentEnd", @"layout_alignParentLeft", @"layout_alignParentRight", @"layout_alignParentStart", @"layout_alignParentTop", @"layout_alignRight", @"layout_alignStart", @"layout_alignTop", @"layout_below", @"layout_centerHorizontal", @"layout_centerInParent", @"layout_centerVertical", @"layout_toEndOf", @"layout_toLeftOf", @"layout_toRightOf", @"layout_toStartOf", @"layout_alignWithParentIfMissing" }, 25)) {
    case 0:
    return JavaLangInteger_valueOfWithInt_(((ADRelativeLayout_LayoutParams *) nil_chk(layoutParams))->width_);
    case 1:
    return JavaLangInteger_valueOfWithInt_(((ADRelativeLayout_LayoutParams *) nil_chk(layoutParams))->height_);
    case 2:
    {
      return ASRootImpl_getRuleWithADRelativeLayout_LayoutParams_withInt_(self, layoutParams, ADRelativeLayout_ABOVE);
    }
    case 3:
    {
      return ASRootImpl_getRuleWithADRelativeLayout_LayoutParams_withInt_(self, layoutParams, ADRelativeLayout_ALIGN_BASELINE);
    }
    case 4:
    {
      return ASRootImpl_getRuleWithADRelativeLayout_LayoutParams_withInt_(self, layoutParams, ADRelativeLayout_ALIGN_BOTTOM);
    }
    case 5:
    {
      return ASRootImpl_getRuleWithADRelativeLayout_LayoutParams_withInt_(self, layoutParams, ADRelativeLayout_ALIGN_END);
    }
    case 6:
    {
      return ASRootImpl_getRuleWithADRelativeLayout_LayoutParams_withInt_(self, layoutParams, ADRelativeLayout_ALIGN_LEFT);
    }
    case 7:
    {
      return ASRootImpl_getBoolRuleWithADRelativeLayout_LayoutParams_withInt_(self, layoutParams, ADRelativeLayout_ALIGN_PARENT_BOTTOM);
    }
    case 8:
    {
      return ASRootImpl_getBoolRuleWithADRelativeLayout_LayoutParams_withInt_(self, layoutParams, ADRelativeLayout_ALIGN_PARENT_END);
    }
    case 9:
    {
      return ASRootImpl_getBoolRuleWithADRelativeLayout_LayoutParams_withInt_(self, layoutParams, ADRelativeLayout_ALIGN_PARENT_LEFT);
    }
    case 10:
    {
      return ASRootImpl_getBoolRuleWithADRelativeLayout_LayoutParams_withInt_(self, layoutParams, ADRelativeLayout_ALIGN_PARENT_RIGHT);
    }
    case 11:
    {
      return ASRootImpl_getBoolRuleWithADRelativeLayout_LayoutParams_withInt_(self, layoutParams, ADRelativeLayout_ALIGN_PARENT_START);
    }
    case 12:
    {
      return ASRootImpl_getBoolRuleWithADRelativeLayout_LayoutParams_withInt_(self, layoutParams, ADRelativeLayout_ALIGN_PARENT_TOP);
    }
    case 13:
    {
      return ASRootImpl_getRuleWithADRelativeLayout_LayoutParams_withInt_(self, layoutParams, ADRelativeLayout_ALIGN_RIGHT);
    }
    case 14:
    {
      return ASRootImpl_getRuleWithADRelativeLayout_LayoutParams_withInt_(self, layoutParams, ADRelativeLayout_ALIGN_START);
    }
    case 15:
    {
      return ASRootImpl_getRuleWithADRelativeLayout_LayoutParams_withInt_(self, layoutParams, ADRelativeLayout_ALIGN_TOP);
    }
    case 16:
    {
      return ASRootImpl_getRuleWithADRelativeLayout_LayoutParams_withInt_(self, layoutParams, ADRelativeLayout_BELOW);
    }
    case 17:
    {
      return ASRootImpl_getBoolRuleWithADRelativeLayout_LayoutParams_withInt_(self, layoutParams, ADRelativeLayout_CENTER_HORIZONTAL);
    }
    case 18:
    {
      return ASRootImpl_getBoolRuleWithADRelativeLayout_LayoutParams_withInt_(self, layoutParams, ADRelativeLayout_CENTER_IN_PARENT);
    }
    case 19:
    {
      return ASRootImpl_getBoolRuleWithADRelativeLayout_LayoutParams_withInt_(self, layoutParams, ADRelativeLayout_CENTER_VERTICAL);
    }
    case 20:
    {
      return ASRootImpl_getRuleWithADRelativeLayout_LayoutParams_withInt_(self, layoutParams, ADRelativeLayout_END_OF);
    }
    case 21:
    {
      return ASRootImpl_getRuleWithADRelativeLayout_LayoutParams_withInt_(self, layoutParams, ADRelativeLayout_LEFT_OF);
    }
    case 22:
    {
      return ASRootImpl_getRuleWithADRelativeLayout_LayoutParams_withInt_(self, layoutParams, ADRelativeLayout_RIGHT_OF);
    }
    case 23:
    {
      return ASRootImpl_getRuleWithADRelativeLayout_LayoutParams_withInt_(self, layoutParams, ADRelativeLayout_START_OF);
    }
    case 24:
    {
      return JavaLangBoolean_valueOfWithBoolean_(((ADRelativeLayout_LayoutParams *) nil_chk(layoutParams))->alignWithParent_);
    }
  }
  return nil;
}

- (IOSClass *)getViewClass {
  return ASRootImpl_RootExt_class_();
}

- (void)setAttributeWithASWidgetAttribute:(ASWidgetAttribute *)key
                             withNSString:(NSString *)strValue
                                   withId:(id)objValue
                withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  ASViewGroupImpl_setAttributeWithASIWidget_withASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(self, key, strValue, objValue, decorator);
  id nativeWidget = [self asNativeWidget];
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"gravity", @"ignoreGravity" }, 2)) {
    case 0:
    {
      [((ADRelativeLayout *) nil_chk(relativeLayout_)) setGravityWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
    }
    break;
    case 1:
    {
      [((ADRelativeLayout *) nil_chk(relativeLayout_)) setIgnoreGravityWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
    }
    break;
    default:
    break;
  }
}

- (id)getAttributeWithASWidgetAttribute:(ASWidgetAttribute *)key
              withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  id attributeValue = ASViewGroupImpl_getAttributeWithASIWidget_withASWidgetAttribute_withASILifeCycleDecorator_(self, key, decorator);
  if (attributeValue != nil) {
    return attributeValue;
  }
  id nativeWidget = [self asNativeWidget];
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"gravity" }, 1)) {
    case 0:
    {
      return JavaLangInteger_valueOfWithInt_([((ADRelativeLayout *) nil_chk(relativeLayout_)) getGravity]);
    }
  }
  return nil;
}

- (id)asNativeWidget {
  return uiView_;
}

- (bool)checkIosVersionWithNSString:(NSString *)v {
  return ([[[UIDevice currentDevice] systemVersion] compare:v options:NSNumericSearch] == NSOrderedDescending);
}

- (void)requestLayout {
  if ([self isInitialised]) {
    ASViewImpl_requestLayoutWithASIWidget_withId_(self, [self asNativeWidget]);
  }
}

- (void)invalidate {
  if ([self isInitialised]) {
    ASViewImpl_invalidateWithASIWidget_withId_(self, [self asNativeWidget]);
  }
}

- (void)addRuleWithADRelativeLayout_LayoutParams:(ADRelativeLayout_LayoutParams *)layoutParams
                                         withInt:(int32_t)rule
                                          withId:(id)objValue {
  ASRootImpl_addRuleWithADRelativeLayout_LayoutParams_withInt_withId_(self, layoutParams, rule, objValue);
}

- (void)addRemoveRuleWithADRelativeLayout_LayoutParams:(ADRelativeLayout_LayoutParams *)layoutParams
                                               withInt:(int32_t)rule
                                                withId:(id)objValue {
  ASRootImpl_addRemoveRuleWithADRelativeLayout_LayoutParams_withInt_withId_(self, layoutParams, rule, objValue);
}

- (void)removeRuleWithADRelativeLayout_LayoutParams:(ADRelativeLayout_LayoutParams *)layoutParams
                                            withInt:(int32_t)rule {
  ASRootImpl_removeRuleWithADRelativeLayout_LayoutParams_withInt_(self, layoutParams, rule);
}

- (id)getRuleWithADRelativeLayout_LayoutParams:(ADRelativeLayout_LayoutParams *)layoutParams
                                       withInt:(int32_t)rule {
  return ASRootImpl_getRuleWithADRelativeLayout_LayoutParams_withInt_(self, layoutParams, rule);
}

- (id)getBoolRuleWithADRelativeLayout_LayoutParams:(ADRelativeLayout_LayoutParams *)layoutParams
                                           withInt:(int32_t)rule {
  return ASRootImpl_getBoolRuleWithADRelativeLayout_LayoutParams_withInt_(self, layoutParams, rule);
}

- (int32_t)getInferredRuleWithInt:(int32_t)rule {
  return ASRootImpl_getInferredRuleWithInt_(self, rule);
}

- (void)removeAllRulesWithADRelativeLayout_LayoutParams:(ADRelativeLayout_LayoutParams *)layoutParams {
  ASRootImpl_removeAllRulesWithADRelativeLayout_LayoutParams_(self, layoutParams);
}

- (id<JavaUtilMap>)invertMapWithJavaUtilMap:(id<JavaUtilMap>)map {
  return ASRootImpl_invertMapWithJavaUtilMap_(self, map);
}

- (void)removeRuleWithADRelativeLayout_LayoutParams:(ADRelativeLayout_LayoutParams *)layoutParams
                                             withId:(id)objValue {
  ASRootImpl_removeRuleWithADRelativeLayout_LayoutParams_withId_(self, layoutParams, objValue);
}

- (void)measure {
  int32_t width = ASPluginInvoker_getScreenWidth();
  int32_t height = ASPluginInvoker_getScreenHeight();
  [self measureWithInt:0 withInt:0 withInt:width withInt:height];
}

- (void)measureWithInt:(int32_t)x
               withInt:(int32_t)y
               withInt:(int32_t)width
               withInt:(int32_t)height {
  int32_t wmeasureSpec = ADView_MeasureSpec_EXACTLY;
  int32_t hmeasureSpec = ADView_MeasureSpec_EXACTLY;
  if (height == -2) {
    hmeasureSpec = ADView_MeasureSpec_UNSPECIFIED;
  }
  if (width == -2) {
    wmeasureSpec = ADView_MeasureSpec_UNSPECIFIED;
  }
  [((ADRelativeLayout *) nil_chk(relativeLayout_)) measureWithInt:ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_(width, wmeasureSpec) withInt:ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_(height, hmeasureSpec)];
  if (height == -2) {
    height = [((ADRelativeLayout *) nil_chk(relativeLayout_)) getMeasuredHeight];
  }
  if (width == -2) {
    width = [((ADRelativeLayout *) nil_chk(relativeLayout_)) getMeasuredWidth];
  }
  [((ADRelativeLayout *) nil_chk(relativeLayout_)) layoutWithInt:x withInt:y withInt:x + width withInt:y + height];
}

- (void)displayErrorIndicator {
  id<ASIWidget> widget = [self findWidgetByIdWithNSString:@"@+id/errorBanner"];
  if (widget != nil) {
    [widget setVisibleWithBoolean:true];
  }
  else {
    id<ASIWidget> button = ASWidgetFactory_createWidgetWithNSString_withNSString_withASHasWidgets_withBoolean_(@"TextView", @"TextView", self, false);
    [((id<ASIWidget>) nil_chk(button)) setIdWithNSString:@"@+id/errorBanner"];
    [button setAttributeWithNSString:@"style" withId:@"@style/error_banner" withBoolean:false];
    [button setAttributeWithNSString:@"onClick" withId:@"onError(data = . from fatalErrors->view)" withBoolean:false];
  }
}

- (void)setIdWithNSString:(NSString *)id_ {
  if (id_ != nil && ![id_ isEqual:@""]) {
    [super setIdWithNSString:id_];
    [((ADRelativeLayout *) nil_chk(relativeLayout_)) setIdWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([self quickConvertWithId:id_ withNSString:@"id"], [JavaLangInteger class]))) intValue]];
  }
}

- (void)setVisibleWithBoolean:(bool)b {
  [((ADView *) nil_chk(((ADView *) cast_chk([self asWidget], [ADView class])))) setVisibilityWithInt:b ? ADView_VISIBLE : ADView_GONE];
}

- (void)createViewWithJavaUtilMap:(id<JavaUtilMap>)params {
  ASUIView* uiView = [ASUIView new];
  uiView.backgroundColor = [UIColor clearColor];
  uiView_ = uiView;
}

- (void)nativeCreateWithJavaUtilMap:(id<JavaUtilMap>)params {
  ASRootImpl_nativeCreateWithJavaUtilMap_(self, params);
}

- (void)setupForInsets {
  ASRootImpl_setupForInsets(self);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "LASIWidget;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, 5, -1, -1 },
    { NULL, "V", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 6, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 9, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 12, 13, -1, -1, -1, -1 },
    { NULL, "LADRelativeLayout_LayoutParams;", 0x2, 14, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 16, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 17, 18, -1, -1, -1, -1 },
    { NULL, "LIOSClass;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 20, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 21, 22, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x101, 23, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 24, 25, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 26, 25, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 27, 28, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, 29, 28, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, 30, 28, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 31, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 32, 33, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x2, 34, 35, -1, 36, -1, -1 },
    { NULL, "V", 0x2, 27, 37, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 38, 39, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 40, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 41, 42, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 43, 35, -1, 44, -1, -1 },
    { NULL, "V", 0x2, 45, 35, -1, 44, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(addDellocHandler);
  methods[1].selector = @selector(loadAttributesWithNSString:);
  methods[2].selector = @selector(init);
  methods[3].selector = @selector(initWithNSString:);
  methods[4].selector = @selector(initWithNSString:withNSString:);
  methods[5].selector = @selector(newInstance);
  methods[6].selector = @selector(createWithASIFragment:withJavaUtilMap:);
  methods[7].selector = @selector(setWidgetOnNativeClass);
  methods[8].selector = @selector(asWidget);
  methods[9].selector = @selector(removeWithASIWidget:);
  methods[10].selector = @selector(removeWithInt:);
  methods[11].selector = @selector(nativeRemoveViewWithASIWidget:);
  methods[12].selector = @selector(addWithASIWidget:withInt:);
  methods[13].selector = @selector(createLayoutParamsWithADView:);
  methods[14].selector = @selector(getLayoutParamsWithADView:);
  methods[15].selector = @selector(setChildAttributeWithASIWidget:withASWidgetAttribute:withNSString:withId:);
  methods[16].selector = @selector(getChildAttributeWithASIWidget:withASWidgetAttribute:);
  methods[17].selector = @selector(getViewClass);
  methods[18].selector = @selector(setAttributeWithASWidgetAttribute:withNSString:withId:withASILifeCycleDecorator:);
  methods[19].selector = @selector(getAttributeWithASWidgetAttribute:withASILifeCycleDecorator:);
  methods[20].selector = @selector(asNativeWidget);
  methods[21].selector = @selector(checkIosVersionWithNSString:);
  methods[22].selector = @selector(requestLayout);
  methods[23].selector = @selector(invalidate);
  methods[24].selector = @selector(addRuleWithADRelativeLayout_LayoutParams:withInt:withId:);
  methods[25].selector = @selector(addRemoveRuleWithADRelativeLayout_LayoutParams:withInt:withId:);
  methods[26].selector = @selector(removeRuleWithADRelativeLayout_LayoutParams:withInt:);
  methods[27].selector = @selector(getRuleWithADRelativeLayout_LayoutParams:withInt:);
  methods[28].selector = @selector(getBoolRuleWithADRelativeLayout_LayoutParams:withInt:);
  methods[29].selector = @selector(getInferredRuleWithInt:);
  methods[30].selector = @selector(removeAllRulesWithADRelativeLayout_LayoutParams:);
  methods[31].selector = @selector(invertMapWithJavaUtilMap:);
  methods[32].selector = @selector(removeRuleWithADRelativeLayout_LayoutParams:withId:);
  methods[33].selector = @selector(measure);
  methods[34].selector = @selector(measureWithInt:withInt:withInt:withInt:);
  methods[35].selector = @selector(displayErrorIndicator);
  methods[36].selector = @selector(setIdWithNSString:);
  methods[37].selector = @selector(setVisibleWithBoolean:);
  methods[38].selector = @selector(createViewWithJavaUtilMap:);
  methods[39].selector = @selector(nativeCreateWithJavaUtilMap:);
  methods[40].selector = @selector(setupForInsets);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "uiView_", "LNSObject;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "LOCAL_NAME", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 46, -1, -1 },
    { "GROUP_NAME", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 47, -1, -1 },
    { "relativeLayout_", "LADRelativeLayout;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "DELLOC_EVENT", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 48, -1, -1 },
    { "ruleMapper_", "LJavaUtilHashMap;", .constantValue.asLong = 0, 0x2, -1, -1, 49, -1 },
  };
  static const void *ptrTable[] = { "loadAttributes", "LNSString;", "LNSString;LNSString;", "create", "LASIFragment;LJavaUtilMap;", "(Lcom/ashera/core/IFragment;Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;)V", "remove", "LASIWidget;", "I", "nativeRemoveView", "add", "LASIWidget;I", "createLayoutParams", "LADView;", "getLayoutParams", "setChildAttribute", "LASIWidget;LASWidgetAttribute;LNSString;LNSObject;", "getChildAttribute", "LASIWidget;LASWidgetAttribute;", "setAttribute", "LASWidgetAttribute;LNSString;LNSObject;LASILifeCycleDecorator;", "getAttribute", "LASWidgetAttribute;LASILifeCycleDecorator;", "checkIosVersion", "addRule", "LADRelativeLayout_LayoutParams;ILNSObject;", "addRemoveRule", "removeRule", "LADRelativeLayout_LayoutParams;I", "getRule", "getBoolRule", "getInferredRule", "removeAllRules", "LADRelativeLayout_LayoutParams;", "invertMap", "LJavaUtilMap;", "<A:Ljava/lang/Object;B:Ljava/lang/Object;>(Ljava/util/Map<TA;TB;>;)Ljava/util/Map<TB;TA;>;", "LADRelativeLayout_LayoutParams;LNSObject;", "measure", "IIII", "setId", "setVisible", "Z", "createView", "(Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;)V", "nativeCreate", &ASRootImpl_LOCAL_NAME, &ASRootImpl_GROUP_NAME, &ASRootImpl_DELLOC_EVENT, "Ljava/util/HashMap<Ljava/lang/String;Ljava/lang/Integer;>;", "LASRootImpl_DallocHandler;LASRootImpl_RemoveRule;LASRootImpl_RootExt;" };
  static const J2ObjcClassInfo _ASRootImpl = { "RootImpl", "com.ashera.layout", ptrTable, methods, fields, 7, 0x1, 41, 6, -1, 50, -1, -1, -1 };
  return &_ASRootImpl;
}

+ (void)initialize {
  if (self == [ASRootImpl class]) {
    ASRootImpl_DELLOC_EVENT = [((ASEvent_StandardEvents *) nil_chk(JreLoadEnum(ASEvent_StandardEvents, dealloc))) description];
    J2OBJC_SET_INITIALIZED(ASRootImpl)
  }
}

@end

void ASRootImpl_addDellocHandler(ASRootImpl *self) {
  [((ASEventBus *) nil_chk([((id<ASIFragment>) nil_chk(self->fragment_)) getEventBus])) onWithNSString:ASRootImpl_DELLOC_EVENT withASEventBusHandlerArray:[IOSObjectArray newArrayWithObjects:(id[]){ create_ASRootImpl_DallocHandler_initWithASRootImpl_withNSString_(self, ASRootImpl_DELLOC_EVENT) } count:1 type:ASEventBusHandler_class_()]];
}

void ASRootImpl_init(ASRootImpl *self) {
  ASBaseHasWidgets_initWithNSString_withNSString_(self, ASRootImpl_GROUP_NAME, ASRootImpl_LOCAL_NAME);
  self->ruleMapper_ = new_JavaUtilHashMap_init();
  {
    (void) [self->ruleMapper_ putWithId:@"layout_above" withId:JavaLangInteger_valueOfWithInt_(ADRelativeLayout_ABOVE)];
    (void) [((JavaUtilHashMap *) nil_chk(self->ruleMapper_)) putWithId:@"layout_alignBaseline" withId:JavaLangInteger_valueOfWithInt_(ADRelativeLayout_ALIGN_BASELINE)];
    (void) [((JavaUtilHashMap *) nil_chk(self->ruleMapper_)) putWithId:@"layout_alignBottom" withId:JavaLangInteger_valueOfWithInt_(ADRelativeLayout_ALIGN_BOTTOM)];
    (void) [((JavaUtilHashMap *) nil_chk(self->ruleMapper_)) putWithId:@"layout_alignEnd" withId:JavaLangInteger_valueOfWithInt_(ADRelativeLayout_ALIGN_END)];
    (void) [((JavaUtilHashMap *) nil_chk(self->ruleMapper_)) putWithId:@"layout_alignLeft" withId:JavaLangInteger_valueOfWithInt_(ADRelativeLayout_ALIGN_LEFT)];
    (void) [((JavaUtilHashMap *) nil_chk(self->ruleMapper_)) putWithId:@"layout_alignParentBottom" withId:JavaLangInteger_valueOfWithInt_(ADRelativeLayout_ALIGN_PARENT_BOTTOM)];
    (void) [((JavaUtilHashMap *) nil_chk(self->ruleMapper_)) putWithId:@"layout_alignParentEnd" withId:JavaLangInteger_valueOfWithInt_(ADRelativeLayout_ALIGN_PARENT_END)];
    (void) [((JavaUtilHashMap *) nil_chk(self->ruleMapper_)) putWithId:@"layout_alignParentLeft" withId:JavaLangInteger_valueOfWithInt_(ADRelativeLayout_ALIGN_PARENT_LEFT)];
    (void) [((JavaUtilHashMap *) nil_chk(self->ruleMapper_)) putWithId:@"layout_alignParentRight" withId:JavaLangInteger_valueOfWithInt_(ADRelativeLayout_ALIGN_PARENT_RIGHT)];
    (void) [((JavaUtilHashMap *) nil_chk(self->ruleMapper_)) putWithId:@"layout_alignParentStart" withId:JavaLangInteger_valueOfWithInt_(ADRelativeLayout_ALIGN_PARENT_START)];
    (void) [((JavaUtilHashMap *) nil_chk(self->ruleMapper_)) putWithId:@"layout_alignParentTop" withId:JavaLangInteger_valueOfWithInt_(ADRelativeLayout_ALIGN_PARENT_TOP)];
    (void) [((JavaUtilHashMap *) nil_chk(self->ruleMapper_)) putWithId:@"layout_alignRight" withId:JavaLangInteger_valueOfWithInt_(ADRelativeLayout_ALIGN_RIGHT)];
    (void) [((JavaUtilHashMap *) nil_chk(self->ruleMapper_)) putWithId:@"layout_alignStart" withId:JavaLangInteger_valueOfWithInt_(ADRelativeLayout_ALIGN_START)];
    (void) [((JavaUtilHashMap *) nil_chk(self->ruleMapper_)) putWithId:@"layout_alignTop" withId:JavaLangInteger_valueOfWithInt_(ADRelativeLayout_ALIGN_TOP)];
    (void) [((JavaUtilHashMap *) nil_chk(self->ruleMapper_)) putWithId:@"layout_below" withId:JavaLangInteger_valueOfWithInt_(ADRelativeLayout_BELOW)];
    (void) [((JavaUtilHashMap *) nil_chk(self->ruleMapper_)) putWithId:@"layout_centerHorizontal" withId:JavaLangInteger_valueOfWithInt_(ADRelativeLayout_CENTER_HORIZONTAL)];
    (void) [((JavaUtilHashMap *) nil_chk(self->ruleMapper_)) putWithId:@"layout_centerVertical" withId:JavaLangInteger_valueOfWithInt_(ADRelativeLayout_CENTER_VERTICAL)];
    (void) [((JavaUtilHashMap *) nil_chk(self->ruleMapper_)) putWithId:@"layout_centerInParent" withId:JavaLangInteger_valueOfWithInt_(ADRelativeLayout_CENTER_IN_PARENT)];
    (void) [((JavaUtilHashMap *) nil_chk(self->ruleMapper_)) putWithId:@"layout_toEndOf" withId:JavaLangInteger_valueOfWithInt_(ADRelativeLayout_END_OF)];
    (void) [((JavaUtilHashMap *) nil_chk(self->ruleMapper_)) putWithId:@"layout_toLeftOf" withId:JavaLangInteger_valueOfWithInt_(ADRelativeLayout_LEFT_OF)];
    (void) [((JavaUtilHashMap *) nil_chk(self->ruleMapper_)) putWithId:@"layout_toRightOf" withId:JavaLangInteger_valueOfWithInt_(ADRelativeLayout_RIGHT_OF)];
    (void) [((JavaUtilHashMap *) nil_chk(self->ruleMapper_)) putWithId:@"layout_toStartOf" withId:JavaLangInteger_valueOfWithInt_(ADRelativeLayout_START_OF)];
  }
}

ASRootImpl *new_ASRootImpl_init() {
  J2OBJC_NEW_IMPL(ASRootImpl, init)
}

ASRootImpl *create_ASRootImpl_init() {
  J2OBJC_CREATE_IMPL(ASRootImpl, init)
}

void ASRootImpl_initWithNSString_(ASRootImpl *self, NSString *localname) {
  ASBaseHasWidgets_initWithNSString_withNSString_(self, ASRootImpl_GROUP_NAME, localname);
  self->ruleMapper_ = new_JavaUtilHashMap_init();
  {
    (void) [self->ruleMapper_ putWithId:@"layout_above" withId:JavaLangInteger_valueOfWithInt_(ADRelativeLayout_ABOVE)];
    (void) [((JavaUtilHashMap *) nil_chk(self->ruleMapper_)) putWithId:@"layout_alignBaseline" withId:JavaLangInteger_valueOfWithInt_(ADRelativeLayout_ALIGN_BASELINE)];
    (void) [((JavaUtilHashMap *) nil_chk(self->ruleMapper_)) putWithId:@"layout_alignBottom" withId:JavaLangInteger_valueOfWithInt_(ADRelativeLayout_ALIGN_BOTTOM)];
    (void) [((JavaUtilHashMap *) nil_chk(self->ruleMapper_)) putWithId:@"layout_alignEnd" withId:JavaLangInteger_valueOfWithInt_(ADRelativeLayout_ALIGN_END)];
    (void) [((JavaUtilHashMap *) nil_chk(self->ruleMapper_)) putWithId:@"layout_alignLeft" withId:JavaLangInteger_valueOfWithInt_(ADRelativeLayout_ALIGN_LEFT)];
    (void) [((JavaUtilHashMap *) nil_chk(self->ruleMapper_)) putWithId:@"layout_alignParentBottom" withId:JavaLangInteger_valueOfWithInt_(ADRelativeLayout_ALIGN_PARENT_BOTTOM)];
    (void) [((JavaUtilHashMap *) nil_chk(self->ruleMapper_)) putWithId:@"layout_alignParentEnd" withId:JavaLangInteger_valueOfWithInt_(ADRelativeLayout_ALIGN_PARENT_END)];
    (void) [((JavaUtilHashMap *) nil_chk(self->ruleMapper_)) putWithId:@"layout_alignParentLeft" withId:JavaLangInteger_valueOfWithInt_(ADRelativeLayout_ALIGN_PARENT_LEFT)];
    (void) [((JavaUtilHashMap *) nil_chk(self->ruleMapper_)) putWithId:@"layout_alignParentRight" withId:JavaLangInteger_valueOfWithInt_(ADRelativeLayout_ALIGN_PARENT_RIGHT)];
    (void) [((JavaUtilHashMap *) nil_chk(self->ruleMapper_)) putWithId:@"layout_alignParentStart" withId:JavaLangInteger_valueOfWithInt_(ADRelativeLayout_ALIGN_PARENT_START)];
    (void) [((JavaUtilHashMap *) nil_chk(self->ruleMapper_)) putWithId:@"layout_alignParentTop" withId:JavaLangInteger_valueOfWithInt_(ADRelativeLayout_ALIGN_PARENT_TOP)];
    (void) [((JavaUtilHashMap *) nil_chk(self->ruleMapper_)) putWithId:@"layout_alignRight" withId:JavaLangInteger_valueOfWithInt_(ADRelativeLayout_ALIGN_RIGHT)];
    (void) [((JavaUtilHashMap *) nil_chk(self->ruleMapper_)) putWithId:@"layout_alignStart" withId:JavaLangInteger_valueOfWithInt_(ADRelativeLayout_ALIGN_START)];
    (void) [((JavaUtilHashMap *) nil_chk(self->ruleMapper_)) putWithId:@"layout_alignTop" withId:JavaLangInteger_valueOfWithInt_(ADRelativeLayout_ALIGN_TOP)];
    (void) [((JavaUtilHashMap *) nil_chk(self->ruleMapper_)) putWithId:@"layout_below" withId:JavaLangInteger_valueOfWithInt_(ADRelativeLayout_BELOW)];
    (void) [((JavaUtilHashMap *) nil_chk(self->ruleMapper_)) putWithId:@"layout_centerHorizontal" withId:JavaLangInteger_valueOfWithInt_(ADRelativeLayout_CENTER_HORIZONTAL)];
    (void) [((JavaUtilHashMap *) nil_chk(self->ruleMapper_)) putWithId:@"layout_centerVertical" withId:JavaLangInteger_valueOfWithInt_(ADRelativeLayout_CENTER_VERTICAL)];
    (void) [((JavaUtilHashMap *) nil_chk(self->ruleMapper_)) putWithId:@"layout_centerInParent" withId:JavaLangInteger_valueOfWithInt_(ADRelativeLayout_CENTER_IN_PARENT)];
    (void) [((JavaUtilHashMap *) nil_chk(self->ruleMapper_)) putWithId:@"layout_toEndOf" withId:JavaLangInteger_valueOfWithInt_(ADRelativeLayout_END_OF)];
    (void) [((JavaUtilHashMap *) nil_chk(self->ruleMapper_)) putWithId:@"layout_toLeftOf" withId:JavaLangInteger_valueOfWithInt_(ADRelativeLayout_LEFT_OF)];
    (void) [((JavaUtilHashMap *) nil_chk(self->ruleMapper_)) putWithId:@"layout_toRightOf" withId:JavaLangInteger_valueOfWithInt_(ADRelativeLayout_RIGHT_OF)];
    (void) [((JavaUtilHashMap *) nil_chk(self->ruleMapper_)) putWithId:@"layout_toStartOf" withId:JavaLangInteger_valueOfWithInt_(ADRelativeLayout_START_OF)];
  }
}

ASRootImpl *new_ASRootImpl_initWithNSString_(NSString *localname) {
  J2OBJC_NEW_IMPL(ASRootImpl, initWithNSString_, localname)
}

ASRootImpl *create_ASRootImpl_initWithNSString_(NSString *localname) {
  J2OBJC_CREATE_IMPL(ASRootImpl, initWithNSString_, localname)
}

void ASRootImpl_initWithNSString_withNSString_(ASRootImpl *self, NSString *groupName, NSString *localname) {
  ASBaseHasWidgets_initWithNSString_withNSString_(self, groupName, localname);
  self->ruleMapper_ = new_JavaUtilHashMap_init();
  {
    (void) [self->ruleMapper_ putWithId:@"layout_above" withId:JavaLangInteger_valueOfWithInt_(ADRelativeLayout_ABOVE)];
    (void) [((JavaUtilHashMap *) nil_chk(self->ruleMapper_)) putWithId:@"layout_alignBaseline" withId:JavaLangInteger_valueOfWithInt_(ADRelativeLayout_ALIGN_BASELINE)];
    (void) [((JavaUtilHashMap *) nil_chk(self->ruleMapper_)) putWithId:@"layout_alignBottom" withId:JavaLangInteger_valueOfWithInt_(ADRelativeLayout_ALIGN_BOTTOM)];
    (void) [((JavaUtilHashMap *) nil_chk(self->ruleMapper_)) putWithId:@"layout_alignEnd" withId:JavaLangInteger_valueOfWithInt_(ADRelativeLayout_ALIGN_END)];
    (void) [((JavaUtilHashMap *) nil_chk(self->ruleMapper_)) putWithId:@"layout_alignLeft" withId:JavaLangInteger_valueOfWithInt_(ADRelativeLayout_ALIGN_LEFT)];
    (void) [((JavaUtilHashMap *) nil_chk(self->ruleMapper_)) putWithId:@"layout_alignParentBottom" withId:JavaLangInteger_valueOfWithInt_(ADRelativeLayout_ALIGN_PARENT_BOTTOM)];
    (void) [((JavaUtilHashMap *) nil_chk(self->ruleMapper_)) putWithId:@"layout_alignParentEnd" withId:JavaLangInteger_valueOfWithInt_(ADRelativeLayout_ALIGN_PARENT_END)];
    (void) [((JavaUtilHashMap *) nil_chk(self->ruleMapper_)) putWithId:@"layout_alignParentLeft" withId:JavaLangInteger_valueOfWithInt_(ADRelativeLayout_ALIGN_PARENT_LEFT)];
    (void) [((JavaUtilHashMap *) nil_chk(self->ruleMapper_)) putWithId:@"layout_alignParentRight" withId:JavaLangInteger_valueOfWithInt_(ADRelativeLayout_ALIGN_PARENT_RIGHT)];
    (void) [((JavaUtilHashMap *) nil_chk(self->ruleMapper_)) putWithId:@"layout_alignParentStart" withId:JavaLangInteger_valueOfWithInt_(ADRelativeLayout_ALIGN_PARENT_START)];
    (void) [((JavaUtilHashMap *) nil_chk(self->ruleMapper_)) putWithId:@"layout_alignParentTop" withId:JavaLangInteger_valueOfWithInt_(ADRelativeLayout_ALIGN_PARENT_TOP)];
    (void) [((JavaUtilHashMap *) nil_chk(self->ruleMapper_)) putWithId:@"layout_alignRight" withId:JavaLangInteger_valueOfWithInt_(ADRelativeLayout_ALIGN_RIGHT)];
    (void) [((JavaUtilHashMap *) nil_chk(self->ruleMapper_)) putWithId:@"layout_alignStart" withId:JavaLangInteger_valueOfWithInt_(ADRelativeLayout_ALIGN_START)];
    (void) [((JavaUtilHashMap *) nil_chk(self->ruleMapper_)) putWithId:@"layout_alignTop" withId:JavaLangInteger_valueOfWithInt_(ADRelativeLayout_ALIGN_TOP)];
    (void) [((JavaUtilHashMap *) nil_chk(self->ruleMapper_)) putWithId:@"layout_below" withId:JavaLangInteger_valueOfWithInt_(ADRelativeLayout_BELOW)];
    (void) [((JavaUtilHashMap *) nil_chk(self->ruleMapper_)) putWithId:@"layout_centerHorizontal" withId:JavaLangInteger_valueOfWithInt_(ADRelativeLayout_CENTER_HORIZONTAL)];
    (void) [((JavaUtilHashMap *) nil_chk(self->ruleMapper_)) putWithId:@"layout_centerVertical" withId:JavaLangInteger_valueOfWithInt_(ADRelativeLayout_CENTER_VERTICAL)];
    (void) [((JavaUtilHashMap *) nil_chk(self->ruleMapper_)) putWithId:@"layout_centerInParent" withId:JavaLangInteger_valueOfWithInt_(ADRelativeLayout_CENTER_IN_PARENT)];
    (void) [((JavaUtilHashMap *) nil_chk(self->ruleMapper_)) putWithId:@"layout_toEndOf" withId:JavaLangInteger_valueOfWithInt_(ADRelativeLayout_END_OF)];
    (void) [((JavaUtilHashMap *) nil_chk(self->ruleMapper_)) putWithId:@"layout_toLeftOf" withId:JavaLangInteger_valueOfWithInt_(ADRelativeLayout_LEFT_OF)];
    (void) [((JavaUtilHashMap *) nil_chk(self->ruleMapper_)) putWithId:@"layout_toRightOf" withId:JavaLangInteger_valueOfWithInt_(ADRelativeLayout_RIGHT_OF)];
    (void) [((JavaUtilHashMap *) nil_chk(self->ruleMapper_)) putWithId:@"layout_toStartOf" withId:JavaLangInteger_valueOfWithInt_(ADRelativeLayout_START_OF)];
  }
}

ASRootImpl *new_ASRootImpl_initWithNSString_withNSString_(NSString *groupName, NSString *localname) {
  J2OBJC_NEW_IMPL(ASRootImpl, initWithNSString_withNSString_, groupName, localname)
}

ASRootImpl *create_ASRootImpl_initWithNSString_withNSString_(NSString *groupName, NSString *localname) {
  J2OBJC_CREATE_IMPL(ASRootImpl, initWithNSString_withNSString_, groupName, localname)
}

void ASRootImpl_setWidgetOnNativeClass(ASRootImpl *self) {
  ((ASUIView*) [self asNativeWidget]).widget = self;
}

void ASRootImpl_nativeRemoveViewWithASIWidget_(ASRootImpl *self, id<ASIWidget> widget) {
  ADLayoutTransition *layoutTransition = [((ADRelativeLayout *) nil_chk(self->relativeLayout_)) getLayoutTransition];
  if (layoutTransition != nil && ([layoutTransition isTransitionTypeEnabledWithInt:ADLayoutTransition_CHANGE_DISAPPEARING] || [layoutTransition isTransitionTypeEnabledWithInt:ADLayoutTransition_DISAPPEARING])) {
    [self addToBufferedRunnablesWithJavaLangRunnable:new_ASRootImpl_$Lambda$1_initWithASIWidget_(widget)];
  }
  else {
    ASViewGroupImpl_nativeRemoveViewWithASIWidget_(widget);
  }
}

void ASRootImpl_createLayoutParamsWithADView_(ASRootImpl *self, ADView *view) {
  ADRelativeLayout_LayoutParams *layoutParams = (ADRelativeLayout_LayoutParams *) cast_chk([((ADView *) nil_chk(view)) getLayoutParams], [ADRelativeLayout_LayoutParams class]);
  layoutParams = (ADRelativeLayout_LayoutParams *) cast_chk([view getLayoutParams], [ADRelativeLayout_LayoutParams class]);
  if (layoutParams == nil) {
    layoutParams = new_ADRelativeLayout_LayoutParams_initWithInt_withInt_(-2, -2);
    [view setLayoutParamsWithADViewGroup_LayoutParams:layoutParams];
  }
  else {
    layoutParams->height_ = -2;
    layoutParams->width_ = -2;
  }
}

ADRelativeLayout_LayoutParams *ASRootImpl_getLayoutParamsWithADView_(ASRootImpl *self, ADView *view) {
  return (ADRelativeLayout_LayoutParams *) cast_chk([((ADView *) nil_chk(view)) getLayoutParams], [ADRelativeLayout_LayoutParams class]);
}

void ASRootImpl_addRuleWithADRelativeLayout_LayoutParams_withInt_withId_(ASRootImpl *self, ADRelativeLayout_LayoutParams *layoutParams, int32_t rule, id objValue) {
  [((ADRelativeLayout_LayoutParams *) nil_chk(layoutParams)) addRuleWithInt:rule withInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
}

void ASRootImpl_addRemoveRuleWithADRelativeLayout_LayoutParams_withInt_withId_(ASRootImpl *self, ADRelativeLayout_LayoutParams *layoutParams, int32_t rule, id objValue) {
  if ([((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]))) booleanValue]) {
    [((ADRelativeLayout_LayoutParams *) nil_chk(layoutParams)) addRuleWithInt:rule];
  }
  else {
    ASRootImpl_removeRuleWithADRelativeLayout_LayoutParams_withInt_(self, layoutParams, rule);
    rule = ASRootImpl_getInferredRuleWithInt_(self, rule);
    ASRootImpl_removeRuleWithADRelativeLayout_LayoutParams_withInt_(self, layoutParams, rule);
  }
}

void ASRootImpl_removeRuleWithADRelativeLayout_LayoutParams_withInt_(ASRootImpl *self, ADRelativeLayout_LayoutParams *layoutParams, int32_t rule) {
  {
    [((ADRelativeLayout_LayoutParams *) nil_chk(layoutParams)) removeRuleWithInt:rule];
  }
}

id ASRootImpl_getRuleWithADRelativeLayout_LayoutParams_withInt_(ASRootImpl *self, ADRelativeLayout_LayoutParams *layoutParams, int32_t rule) {
  {
    rule = ASRootImpl_getInferredRuleWithInt_(self, rule);
    return JavaLangInteger_valueOfWithInt_([((ADRelativeLayout_LayoutParams *) nil_chk(layoutParams)) getRuleWithInt:rule]);
  }
}

id ASRootImpl_getBoolRuleWithADRelativeLayout_LayoutParams_withInt_(ASRootImpl *self, ADRelativeLayout_LayoutParams *layoutParams, int32_t rule) {
  {
    rule = ASRootImpl_getInferredRuleWithInt_(self, rule);
    return JavaLangBoolean_valueOfWithBoolean_([((ADRelativeLayout_LayoutParams *) nil_chk(layoutParams)) getRuleWithInt:rule] != 0);
  }
}

int32_t ASRootImpl_getInferredRuleWithInt_(ASRootImpl *self, int32_t rule) {
  if (rule == ADRelativeLayout_ALIGN_PARENT_END) {
    rule = ASViewImpl_isRTLLayoutDirectionWithASIWidget_(self) ? ADRelativeLayout_ALIGN_PARENT_LEFT : ADRelativeLayout_ALIGN_PARENT_RIGHT;
  }
  if (rule == ADRelativeLayout_ALIGN_PARENT_START) {
    rule = ASViewImpl_isRTLLayoutDirectionWithASIWidget_(self) ? ADRelativeLayout_ALIGN_PARENT_RIGHT : ADRelativeLayout_ALIGN_PARENT_LEFT;
  }
  if (rule == ADRelativeLayout_END_OF) {
    rule = ASViewImpl_isRTLLayoutDirectionWithASIWidget_(self) ? ADRelativeLayout_LEFT_OF : ADRelativeLayout_RIGHT_OF;
  }
  if (rule == ADRelativeLayout_START_OF) {
    rule = ASViewImpl_isRTLLayoutDirectionWithASIWidget_(self) ? ADRelativeLayout_RIGHT_OF : ADRelativeLayout_LEFT_OF;
  }
  if (rule == ADRelativeLayout_ALIGN_END) {
    rule = ASViewImpl_isRTLLayoutDirectionWithASIWidget_(self) ? ADRelativeLayout_ALIGN_LEFT : ADRelativeLayout_ALIGN_RIGHT;
  }
  if (rule == ADRelativeLayout_ALIGN_START) {
    rule = ASViewImpl_isRTLLayoutDirectionWithASIWidget_(self) ? ADRelativeLayout_ALIGN_RIGHT : ADRelativeLayout_ALIGN_LEFT;
  }
  return rule;
}

void ASRootImpl_removeAllRulesWithADRelativeLayout_LayoutParams_(ASRootImpl *self, ADRelativeLayout_LayoutParams *layoutParams) {
  ASRootImpl_RemoveRule *removeRule = (ASRootImpl_RemoveRule *) cast_chk(ASConverterFactory_getWithNSString_(@"RelativeLayout.removeRule"), [ASRootImpl_RemoveRule class]);
  id<JavaUtilCollection> keys = [((id<JavaUtilMap>) nil_chk(((ASRootImpl_RemoveRule *) nil_chk(removeRule))->mapping_)) keySet];
  for (NSString * __strong key in nil_chk(keys)) {
    int32_t rule = [((JavaLangInteger *) nil_chk([((JavaUtilHashMap *) nil_chk(self->ruleMapper_)) getWithId:key])) intValue];
    ASRootImpl_removeRuleWithADRelativeLayout_LayoutParams_withInt_(self, layoutParams, rule);
    rule = ASRootImpl_getInferredRuleWithInt_(self, rule);
    ASRootImpl_removeRuleWithADRelativeLayout_LayoutParams_withInt_(self, layoutParams, rule);
  }
}

id<JavaUtilMap> ASRootImpl_invertMapWithJavaUtilMap_(ASRootImpl *self, id<JavaUtilMap> map) {
  id<JavaUtilMap> reverseMap = new_JavaUtilHashMap_init();
  for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([((id<JavaUtilMap>) nil_chk(map)) entrySet])) {
    (void) [reverseMap putWithId:[((id<JavaUtilMap_Entry>) nil_chk(entry_)) getValue] withId:[entry_ getKey]];
  }
  return reverseMap;
}

void ASRootImpl_removeRuleWithADRelativeLayout_LayoutParams_withId_(ASRootImpl *self, ADRelativeLayout_LayoutParams *layoutParams, id objValue) {
  ASRootImpl_RemoveRule *removeRule = (ASRootImpl_RemoveRule *) cast_chk(ASConverterFactory_getWithNSString_(@"RelativeLayout.removeRule"), [ASRootImpl_RemoveRule class]);
  int32_t rule = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
  id<JavaUtilMap> reverseMap = ASRootImpl_invertMapWithJavaUtilMap_(self, ((ASRootImpl_RemoveRule *) nil_chk(removeRule))->mapping_);
  id<JavaUtilCollection> flags = [removeRule getReverseMappingFlags];
  for (JavaLangInteger *boxed__ in nil_chk(flags)) {
    int32_t flag = [((JavaLangInteger *) nil_chk(boxed__)) intValue];
    if ((rule & flag) != 0) {
      int32_t finalRule = [((JavaLangInteger *) nil_chk([((JavaUtilHashMap *) nil_chk(self->ruleMapper_)) getWithId:[((id<JavaUtilMap>) nil_chk(reverseMap)) getWithId:JavaLangInteger_valueOfWithInt_(flag)]])) intValue];
      ASRootImpl_removeRuleWithADRelativeLayout_LayoutParams_withInt_(self, layoutParams, finalRule);
      finalRule = ASRootImpl_getInferredRuleWithInt_(self, finalRule);
      ASRootImpl_removeRuleWithADRelativeLayout_LayoutParams_withInt_(self, layoutParams, finalRule);
    }
  }
}

void ASRootImpl_nativeCreateWithJavaUtilMap_(ASRootImpl *self, id<JavaUtilMap> params) {
  [self createViewWithJavaUtilMap:params];
  [((id<ASIFragment>) nil_chk(self->fragment_)) setRootWidgetWithASIWidget:self];
  [((ADRelativeLayout *) nil_chk(self->relativeLayout_)) initAttachInfo];
}

void ASRootImpl_setupForInsets(ASRootImpl *self) {
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASRootImpl)

J2OBJC_NAME_MAPPING(ASRootImpl, "com.ashera.layout", "AS")

@implementation ASRootImpl_DallocHandler

- (instancetype)initWithASRootImpl:(ASRootImpl *)outer$
                      withNSString:(NSString *)type {
  ASRootImpl_DallocHandler_initWithASRootImpl_withNSString_(self, outer$, type);
  return self;
}

- (void)doPerformWithId:(id)payload {
  [((ADRelativeLayout *) nil_chk(this$0_->relativeLayout_)) release__];
}

- (void)__javaClone:(ASRootImpl_DallocHandler *)original {
  [super __javaClone:original];
  JreRelease(this$0_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASRootImpl:withNSString:);
  methods[1].selector = @selector(doPerformWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASRootImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASRootImpl;LNSString;", "doPerform", "LNSObject;", "LASRootImpl;" };
  static const J2ObjcClassInfo _ASRootImpl_DallocHandler = { "DallocHandler", "com.ashera.layout", ptrTable, methods, fields, 7, 0x0, 2, 1, 3, -1, -1, -1, -1 };
  return &_ASRootImpl_DallocHandler;
}

@end

void ASRootImpl_DallocHandler_initWithASRootImpl_withNSString_(ASRootImpl_DallocHandler *self, ASRootImpl *outer$, NSString *type) {
  self->this$0_ = outer$;
  ASEventBusHandler_initWithNSString_(self, type);
}

ASRootImpl_DallocHandler *new_ASRootImpl_DallocHandler_initWithASRootImpl_withNSString_(ASRootImpl *outer$, NSString *type) {
  J2OBJC_NEW_IMPL(ASRootImpl_DallocHandler, initWithASRootImpl_withNSString_, outer$, type)
}

ASRootImpl_DallocHandler *create_ASRootImpl_DallocHandler_initWithASRootImpl_withNSString_(ASRootImpl *outer$, NSString *type) {
  J2OBJC_CREATE_IMPL(ASRootImpl_DallocHandler, initWithASRootImpl_withNSString_, outer$, type)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASRootImpl_DallocHandler)

@implementation ASRootImpl_RemoveRule

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASRootImpl_RemoveRule_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilMap>)getMapping {
  return mapping_;
}

- (JavaLangInteger *)getDefault {
  return JavaLangInteger_valueOfWithInt_(0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMapping);
  methods[2].selector = @selector(getDefault);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapping_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "LASRootImpl;" };
  static const J2ObjcClassInfo _ASRootImpl_RemoveRule = { "RemoveRule", "com.ashera.layout", ptrTable, methods, fields, 7, 0x18, 3, 1, 2, -1, -1, -1, -1 };
  return &_ASRootImpl_RemoveRule;
}

@end

void ASRootImpl_RemoveRule_init(ASRootImpl_RemoveRule *self) {
  ASAbstractBitFlagConverter_init(self);
  self->mapping_ = new_JavaUtilHashMap_init();
  {
    (void) [self->mapping_ putWithId:@"layout_above" withId:JavaLangInteger_valueOfWithInt_(-(int32_t) 0x1)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"layout_alignBaseline" withId:JavaLangInteger_valueOfWithInt_(-(int32_t) 0x2)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"layout_alignBottom" withId:JavaLangInteger_valueOfWithInt_(-(int32_t) 0x4)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"layout_alignEnd" withId:JavaLangInteger_valueOfWithInt_(-(int32_t) 0x8)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"layout_alignLeft" withId:JavaLangInteger_valueOfWithInt_(-(int32_t) 0x16)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"layout_alignParentBottom" withId:JavaLangInteger_valueOfWithInt_(-(int32_t) 0x32)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"layout_alignParentEnd" withId:JavaLangInteger_valueOfWithInt_(-(int32_t) 0x64)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"layout_alignParentLeft" withId:JavaLangInteger_valueOfWithInt_(-(int32_t) 0x128)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"layout_alignParentRight" withId:JavaLangInteger_valueOfWithInt_(-(int32_t) 0x256)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"layout_alignParentStart" withId:JavaLangInteger_valueOfWithInt_(-(int32_t) 0x1024)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"layout_alignParentTop" withId:JavaLangInteger_valueOfWithInt_((int32_t) 0x0)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"layout_alignRight" withId:JavaLangInteger_valueOfWithInt_((int32_t) 0x1)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"layout_alignStart" withId:JavaLangInteger_valueOfWithInt_((int32_t) 0x2)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"layout_alignTop" withId:JavaLangInteger_valueOfWithInt_((int32_t) 0x4)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"layout_below" withId:JavaLangInteger_valueOfWithInt_((int32_t) 0x8)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"layout_centerHorizontal" withId:JavaLangInteger_valueOfWithInt_((int32_t) 0x16)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"layout_centerInParent" withId:JavaLangInteger_valueOfWithInt_((int32_t) 0x32)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"layout_centerVertical" withId:JavaLangInteger_valueOfWithInt_((int32_t) 0x64)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"layout_toEndOf" withId:JavaLangInteger_valueOfWithInt_((int32_t) 0x128)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"layout_toLeftOf" withId:JavaLangInteger_valueOfWithInt_((int32_t) 0x256)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"layout_toRightOf" withId:JavaLangInteger_valueOfWithInt_((int32_t) 0x1024)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"layout_toStartOf" withId:JavaLangInteger_valueOfWithInt_((int32_t) 0x2048)];
  }
}

ASRootImpl_RemoveRule *new_ASRootImpl_RemoveRule_init() {
  J2OBJC_NEW_IMPL(ASRootImpl_RemoveRule, init)
}

ASRootImpl_RemoveRule *create_ASRootImpl_RemoveRule_init() {
  J2OBJC_CREATE_IMPL(ASRootImpl_RemoveRule, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASRootImpl_RemoveRule)

@implementation ASRootImpl_RootExt

- (id<ASIWidget>)getWidget {
  return this$0_;
}

- (void)setMaxWidthWithInt:(int32_t)width {
  mMaxWidth_ = width;
}

- (void)setMaxHeightWithInt:(int32_t)height {
  mMaxHeight_ = height;
}

- (int32_t)getMaxWidth {
  return mMaxWidth_;
}

- (int32_t)getMaxHeight {
  return mMaxHeight_;
}

- (instancetype)initWithASRootImpl:(ASRootImpl *)outer$ {
  ASRootImpl_RootExt_initWithASRootImpl_(self, outer$);
  return self;
}

- (void)onMeasureWithInt:(int32_t)widthMeasureSpec
                 withInt:(int32_t)heightMeasureSpec {
  if (mMaxWidth_ > 0) {
    widthMeasureSpec = ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_(mMaxWidth_, ADView_MeasureSpec_AT_MOST);
  }
  if (mMaxHeight_ > 0) {
    heightMeasureSpec = ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_(mMaxHeight_, ADView_MeasureSpec_AT_MOST);
  }
  [super onMeasureWithInt:widthMeasureSpec withInt:heightMeasureSpec];
  id<ASIWidgetLifeCycleListener> listener = [this$0_ getListener];
  if (listener != nil) {
    [((ASMeasureEvent *) nil_chk(measureFinished_)) setWidthWithInt:[self getMeasuredWidth]];
    [((ASMeasureEvent *) nil_chk(measureFinished_)) setHeightWithInt:[self getMeasuredHeight]];
    [listener eventOccurredWithASIWidgetLifeCycleListener_EventId:JreLoadEnum(ASIWidgetLifeCycleListener_EventId, measureFinished) withASWidgetEvent:measureFinished_];
  }
}

- (void)onLayoutWithBoolean:(bool)changed
                    withInt:(int32_t)l
                    withInt:(int32_t)t
                    withInt:(int32_t)r
                    withInt:(int32_t)b {
  [super onLayoutWithBoolean:changed withInt:l withInt:t withInt:r withInt:b];
  ASViewImpl_setDrawableBoundsWithASIWidget_withInt_withInt_withInt_withInt_(this$0_, l, t, r, b);
  if (![self isOverlay]) {
    ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_([this$0_ asNativeWidget], l, t, r, b);
  }
  [this$0_ replayBufferedEvents];
  ASViewImpl_redrawDrawablesWithASIWidget_(this$0_);
  overlays_ = ASViewImpl_drawOverlayWithASIWidget_withJavaUtilList_(this$0_, overlays_);
  id<ASIWidgetLifeCycleListener> listener = [this$0_ getListener];
  if (listener != nil) {
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setBWithInt:b];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setLWithInt:l];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setRWithInt:r];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setTWithInt:t];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setChangedWithBoolean:changed];
    [listener eventOccurredWithASIWidgetLifeCycleListener_EventId:JreLoadEnum(ASIWidgetLifeCycleListener_EventId, onLayout) withASWidgetEvent:onLayoutEvent_];
  }
  if ([this$0_ isInvalidateOnFrameChange] && [this$0_ isInitialised]) {
    [this$0_ invalidate];
  }
}

- (void)executeWithNSString:(NSString *)method
          withNSObjectArray:(IOSObjectArray *)canvas {
}

- (void)updateMeasuredDimensionWithInt:(int32_t)width
                               withInt:(int32_t)height {
  [self setMeasuredDimensionWithInt:width withInt:height];
}

- (id<ASILifeCycleDecorator>)newInstanceWithASIWidget:(id<ASIWidget>)widget {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)setAttributeWithASWidgetAttribute:(ASWidgetAttribute *)widgetAttribute
                             withNSString:(NSString *)strValue
                                   withId:(id)objValue {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (id<JavaUtilList>)getMethods {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)initialized {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (id)getAttributeWithASWidgetAttribute:(ASWidgetAttribute *)widgetAttribute {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)drawableStateChanged {
  [super drawableStateChanged];
  if (![this$0_ isWidgetDisposed]) {
    ASViewImpl_drawableStateChangedWithASIWidget_(this$0_);
  }
}

- (ADView *)inflateViewWithNSString:(NSString *)layout {
  if (templates_ == nil) {
    templates_ = new_JavaUtilHashMap_init();
  }
  id<ASIWidget> template_ = [templates_ getWithId:layout];
  if (template_ == nil) {
    template_ = (id<ASIWidget>) cast_check([this$0_ quickConvertWithId:layout withNSString:@"template"], ASIWidget_class_());
    (void) [((id<JavaUtilMap>) nil_chk(templates_)) putWithId:layout withId:template_];
  }
  id<ASIWidget> widget = [((id<ASIWidget>) nil_chk(template_)) loadLazyWidgetsWithASHasWidgets:this$0_];
  return (ADView *) cast_chk([((id<ASIWidget>) nil_chk(widget)) asWidget], [ADView class]);
}

- (void)remeasure {
  if ([this$0_ getFragment] != nil) {
    [((id<ASIFragment>) nil_chk([this$0_ getFragment])) remeasure];
  }
}

- (void)removeFromParent {
  [((id<ASHasWidgets>) nil_chk([this$0_ getParent])) removeWithASIWidget:this$0_];
}

- (void)getLocationOnScreenWithIntArray:(IOSIntArray *)appScreenLocation {
  *IOSIntArray_GetRef(nil_chk(appScreenLocation), 0) = ASViewImpl_getLocationXOnScreenWithId_([this$0_ asNativeWidget]);
  *IOSIntArray_GetRef(appScreenLocation, 1) = ASViewImpl_getLocationYOnScreenWithId_([this$0_ asNativeWidget]);
}

- (void)getWindowVisibleDisplayFrameWithADRect:(ADRect *)displayFrame {
  ((ADRect *) nil_chk(displayFrame))->left_ = ASViewImpl_getLocationXOnScreenWithId_([this$0_ asNativeWidget]);
  displayFrame->top_ = ASViewImpl_getLocationYOnScreenWithId_([this$0_ asNativeWidget]);
  displayFrame->right_ = displayFrame->left_ + [self getWidth];
  displayFrame->bottom_ = displayFrame->top_ + [self getHeight];
}

- (void)offsetTopAndBottomWithInt:(int32_t)offset {
  [super offsetTopAndBottomWithInt:offset];
  ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_([this$0_ asNativeWidget], [self getLeft], [self getTop], [self getRight], [self getBottom]);
}

- (void)offsetLeftAndRightWithInt:(int32_t)offset {
  [super offsetLeftAndRightWithInt:offset];
  ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_([this$0_ asNativeWidget], [self getLeft], [self getTop], [self getRight], [self getBottom]);
}

- (void)setMyAttributeWithNSString:(NSString *)name
                            withId:(id)value {
  if ([((NSString *) nil_chk(name)) isEqual:@"state0"]) {
    [self setState0WithId:value];
    return;
  }
  if ([name isEqual:@"state1"]) {
    [self setState1WithId:value];
    return;
  }
  if ([name isEqual:@"state2"]) {
    [self setState2WithId:value];
    return;
  }
  if ([name isEqual:@"state3"]) {
    [self setState3WithId:value];
    return;
  }
  if ([name isEqual:@"state4"]) {
    [self setState4WithId:value];
    return;
  }
  [this$0_ setAttributeWithNSString:name withId:value withBoolean:!([value isKindOfClass:[NSString class]])];
}

- (void)setVisibilityWithInt:(int32_t)visibility {
  [super setVisibilityWithInt:visibility];
  ASViewImpl_nativeSetVisibilityWithId_withBoolean_([this$0_ asNativeWidget], visibility != ADView_VISIBLE);
}

- (void)setState0WithId:(id)value {
  ASViewImpl_setStateWithASIWidget_withInt_withId_(this$0_, 0, value);
}

- (void)setState1WithId:(id)value {
  ASViewImpl_setStateWithASIWidget_withInt_withId_(this$0_, 1, value);
}

- (void)setState2WithId:(id)value {
  ASViewImpl_setStateWithASIWidget_withInt_withId_(this$0_, 2, value);
}

- (void)setState3WithId:(id)value {
  ASViewImpl_setStateWithASIWidget_withInt_withId_(this$0_, 3, value);
}

- (void)setState4WithId:(id)value {
  ASViewImpl_setStateWithASIWidget_withInt_withId_(this$0_, 4, value);
}

- (void)state0 {
  ASViewImpl_stateWithASIWidget_withInt_(this$0_, 0);
}

- (void)state1 {
  ASViewImpl_stateWithASIWidget_withInt_(this$0_, 1);
}

- (void)state2 {
  ASViewImpl_stateWithASIWidget_withInt_(this$0_, 2);
}

- (void)state3 {
  ASViewImpl_stateWithASIWidget_withInt_(this$0_, 3);
}

- (void)state4 {
  ASViewImpl_stateWithASIWidget_withInt_(this$0_, 4);
}

- (void)stateYes {
  ASViewImpl_stateYesWithASIWidget_(this$0_);
}

- (void)stateNo {
  ASViewImpl_stateNoWithASIWidget_(this$0_);
}

- (void)endViewTransitionWithADView:(ADView *)view {
  [super endViewTransitionWithADView:view];
  [this$0_ runBufferedRunnables];
}

- (void)__javaClone:(ASRootImpl_RootExt *)original {
  [super __javaClone:original];
  JreRelease(this$0_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LASIWidget;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x81, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 5, -1, -1, -1, -1 },
    { NULL, "LASILifeCycleDecorator;", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 15, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 16, 17, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADView;", 0x1, 18, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 21, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 22, 23, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 24, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 25, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 26, 27, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 28, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 29, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 31, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 32, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 33, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 34, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 35, 36, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getWidget);
  methods[1].selector = @selector(setMaxWidthWithInt:);
  methods[2].selector = @selector(setMaxHeightWithInt:);
  methods[3].selector = @selector(getMaxWidth);
  methods[4].selector = @selector(getMaxHeight);
  methods[5].selector = @selector(initWithASRootImpl:);
  methods[6].selector = @selector(onMeasureWithInt:withInt:);
  methods[7].selector = @selector(onLayoutWithBoolean:withInt:withInt:withInt:withInt:);
  methods[8].selector = @selector(executeWithNSString:withNSObjectArray:);
  methods[9].selector = @selector(updateMeasuredDimensionWithInt:withInt:);
  methods[10].selector = @selector(newInstanceWithASIWidget:);
  methods[11].selector = @selector(setAttributeWithASWidgetAttribute:withNSString:withId:);
  methods[12].selector = @selector(getMethods);
  methods[13].selector = @selector(initialized);
  methods[14].selector = @selector(getAttributeWithASWidgetAttribute:);
  methods[15].selector = @selector(drawableStateChanged);
  methods[16].selector = @selector(inflateViewWithNSString:);
  methods[17].selector = @selector(remeasure);
  methods[18].selector = @selector(removeFromParent);
  methods[19].selector = @selector(getLocationOnScreenWithIntArray:);
  methods[20].selector = @selector(getWindowVisibleDisplayFrameWithADRect:);
  methods[21].selector = @selector(offsetTopAndBottomWithInt:);
  methods[22].selector = @selector(offsetLeftAndRightWithInt:);
  methods[23].selector = @selector(setMyAttributeWithNSString:withId:);
  methods[24].selector = @selector(setVisibilityWithInt:);
  methods[25].selector = @selector(setState0WithId:);
  methods[26].selector = @selector(setState1WithId:);
  methods[27].selector = @selector(setState2WithId:);
  methods[28].selector = @selector(setState3WithId:);
  methods[29].selector = @selector(setState4WithId:);
  methods[30].selector = @selector(state0);
  methods[31].selector = @selector(state1);
  methods[32].selector = @selector(state2);
  methods[33].selector = @selector(state3);
  methods[34].selector = @selector(state4);
  methods[35].selector = @selector(stateYes);
  methods[36].selector = @selector(stateNo);
  methods[37].selector = @selector(endViewTransitionWithADView:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASRootImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "measureFinished_", "LASMeasureEvent;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "onLayoutEvent_", "LASOnLayoutEvent;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "overlays_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 37, -1 },
    { "mMaxWidth_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mMaxHeight_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "templates_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 38, -1 },
  };
  static const void *ptrTable[] = { "setMaxWidth", "I", "setMaxHeight", "LASRootImpl;", "onMeasure", "II", "onLayout", "ZIIII", "execute", "LNSString;[LNSObject;", "updateMeasuredDimension", "newInstance", "LASIWidget;", "setAttribute", "LASWidgetAttribute;LNSString;LNSObject;", "()Ljava/util/List<Ljava/lang/String;>;", "getAttribute", "LASWidgetAttribute;", "inflateView", "LNSString;", "getLocationOnScreen", "[I", "getWindowVisibleDisplayFrame", "LADRect;", "offsetTopAndBottom", "offsetLeftAndRight", "setMyAttribute", "LNSString;LNSObject;", "setVisibility", "setState0", "LNSObject;", "setState1", "setState2", "setState3", "setState4", "endViewTransition", "LADView;", "Ljava/util/List<Lcom/ashera/widget/IWidget;>;", "Ljava/util/Map<Ljava/lang/String;Lcom/ashera/widget/IWidget;>;" };
  static const J2ObjcClassInfo _ASRootImpl_RootExt = { "RootExt", "com.ashera.layout", ptrTable, methods, fields, 7, 0x1, 38, 7, 3, -1, -1, -1, -1 };
  return &_ASRootImpl_RootExt;
}

@end

void ASRootImpl_RootExt_initWithASRootImpl_(ASRootImpl_RootExt *self, ASRootImpl *outer$) {
  self->this$0_ = outer$;
  ADRelativeLayout_init(self);
  self->measureFinished_ = new_ASMeasureEvent_init();
  self->onLayoutEvent_ = new_ASOnLayoutEvent_init();
  self->mMaxWidth_ = -1;
  self->mMaxHeight_ = -1;
}

ASRootImpl_RootExt *new_ASRootImpl_RootExt_initWithASRootImpl_(ASRootImpl *outer$) {
  J2OBJC_NEW_IMPL(ASRootImpl_RootExt, initWithASRootImpl_, outer$)
}

ASRootImpl_RootExt *create_ASRootImpl_RootExt_initWithASRootImpl_(ASRootImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASRootImpl_RootExt, initWithASRootImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASRootImpl_RootExt)

@implementation ASRootImpl_$Lambda$1

- (void)run {
  ASViewGroupImpl_nativeRemoveViewWithASIWidget_(val$widget_);
}

@end

void ASRootImpl_$Lambda$1_initWithASIWidget_(ASRootImpl_$Lambda$1 *self, id<ASIWidget> capture$0) {
  self->val$widget_ = capture$0;
  NSObject_init(self);
}

ASRootImpl_$Lambda$1 *new_ASRootImpl_$Lambda$1_initWithASIWidget_(id<ASIWidget> capture$0) {
  J2OBJC_NEW_IMPL(ASRootImpl_$Lambda$1, initWithASIWidget_, capture$0)
}

ASRootImpl_$Lambda$1 *create_ASRootImpl_$Lambda$1_initWithASIWidget_(id<ASIWidget> capture$0) {
  J2OBJC_CREATE_IMPL(ASRootImpl_$Lambda$1, initWithASIWidget_, capture$0)
}
