//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-ios-widgets\ios_widget_library\src\main\java\com\ashera\layout\WebViewImpl.java
//

#include "BaseWidget.h"
#include "EventCommand.h"
#include "EventCommandFactory.h"
#include "EventExpressionParser.h"
#include "HasWidgets.h"
#include "IActivity.h"
#include "IAttributable.h"
#include "IFragment.h"
#include "ILifeCycleDecorator.h"
#include "IListener.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "IWidget.h"
#include "IWidgetLifeCycleListener.h"
#include "J2ObjC_source.h"
#include "MeasureEvent.h"
#include "OnLayoutEvent.h"
#include "PluginInvoker.h"
#include "Rect.h"
#include "View.h"
#include "ViewImpl.h"
#include "WebView.h"
#include "WebViewImpl.h"
#include "WidgetAttribute.h"
#include "WidgetFactory.h"
#include "java/lang/Boolean.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"

#include "java/lang/Integer.h"
#include "java/lang/Float.h"
#include "java/lang/Boolean.h"
#include <UIKit/UIKit.h>
#include "HasLifeCycleDecorators.h"

#include "ASWKWebView.h"
#include "signal_recovery.h"

@class ASWebViewImpl_WebViewErrorListener;
@class ASWebViewImpl_WebViewLoadedListener;
@class ASWebViewImpl_WebViewLoadingListener;
@protocol JavaUtilList;
@protocol JavaUtilMap;


#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface ASWebViewImpl () {
 @public
  id<ASWebViewImpl_Loader_WebViewLoadingListener> webviewLoadingListener_;
  id<ASWebViewImpl_Loader_WebViewLoadedListener> webviewLoadedListener_;
  id<ASWebViewImpl_Loader_WebViewErrorListener> webviewErrorListener_;
  jboolean pageFinished_;
  ASWebViewImpl_WebViewCommandBuilder *builder_;
  ASWebViewImpl_WebViewBean *bean_;
}

- (void)setWidgetOnNativeClass;

- (void)setWebViewLoadedListenerWithASWebViewImpl_WebViewLoadedListener:(ASWebViewImpl_WebViewLoadedListener *)webviewLoadedListener;

- (void)setWebViewErrorListenerWithASWebViewImpl_WebViewErrorListener:(ASWebViewImpl_WebViewErrorListener *)webviewErrorListener;

- (void)setWebViewLoadingListenerWithASWebViewImpl_WebViewLoadingListener:(ASWebViewImpl_WebViewLoadingListener *)webviewLoadingListener;

- (void)onPageFinishedWithADView:(ADView *)view;

- (void)onPageStartedWithADView:(ADView *)view;

- (void)onReceivedErrorWithADView:(ADView *)view
                     withNSString:(NSString *)error;

- (void)loadUrlWithId:(id)objValue;

@end

J2OBJC_FIELD_SETTER(ASWebViewImpl, webviewLoadingListener_, id<ASWebViewImpl_Loader_WebViewLoadingListener>)
J2OBJC_FIELD_SETTER(ASWebViewImpl, webviewLoadedListener_, id<ASWebViewImpl_Loader_WebViewLoadedListener>)
J2OBJC_FIELD_SETTER(ASWebViewImpl, webviewErrorListener_, id<ASWebViewImpl_Loader_WebViewErrorListener>)
J2OBJC_FIELD_SETTER(ASWebViewImpl, builder_, ASWebViewImpl_WebViewCommandBuilder *)
J2OBJC_FIELD_SETTER(ASWebViewImpl, bean_, ASWebViewImpl_WebViewBean *)

__attribute__((unused)) static void ASWebViewImpl_setWidgetOnNativeClass(ASWebViewImpl *self);

__attribute__((unused)) static void ASWebViewImpl_setWebViewLoadedListenerWithASWebViewImpl_WebViewLoadedListener_(ASWebViewImpl *self, ASWebViewImpl_WebViewLoadedListener *webviewLoadedListener);

__attribute__((unused)) static void ASWebViewImpl_setWebViewErrorListenerWithASWebViewImpl_WebViewErrorListener_(ASWebViewImpl *self, ASWebViewImpl_WebViewErrorListener *webviewErrorListener);

__attribute__((unused)) static void ASWebViewImpl_setWebViewLoadingListenerWithASWebViewImpl_WebViewLoadingListener_(ASWebViewImpl *self, ASWebViewImpl_WebViewLoadingListener *webviewLoadingListener);

__attribute__((unused)) static void ASWebViewImpl_onPageFinishedWithADView_(ASWebViewImpl *self, ADView *view);

__attribute__((unused)) static void ASWebViewImpl_onPageStartedWithADView_(ASWebViewImpl *self, ADView *view);

__attribute__((unused)) static void ASWebViewImpl_onReceivedErrorWithADView_withNSString_(ASWebViewImpl *self, ADView *view, NSString *error);

__attribute__((unused)) static void ASWebViewImpl_loadUrlWithId_(ASWebViewImpl *self, id objValue);

@interface ASWebViewImpl_WebViewExt () {
 @public
  __unsafe_unretained ASWebViewImpl *this$0_;
  ASMeasureEvent *measureFinished_;
  ASOnLayoutEvent *onLayoutEvent_;
  id<JavaUtilList> overlays_;
  jint mMaxWidth_;
  jint mMaxHeight_;
  id<JavaUtilMap> templates_;
}

@end

J2OBJC_FIELD_SETTER(ASWebViewImpl_WebViewExt, measureFinished_, ASMeasureEvent *)
J2OBJC_FIELD_SETTER(ASWebViewImpl_WebViewExt, onLayoutEvent_, ASOnLayoutEvent *)
J2OBJC_FIELD_SETTER(ASWebViewImpl_WebViewExt, overlays_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(ASWebViewImpl_WebViewExt, templates_, id<JavaUtilMap>)

@interface ASWebViewImpl_Loader_WebViewLoadingListener : NSObject

@end

@interface ASWebViewImpl_Loader_WebViewLoadedListener : NSObject

@end

@interface ASWebViewImpl_Loader_WebViewErrorListener : NSObject

@end

@interface ASWebViewImpl_WebViewLoadingListener : NSObject < ASWebViewImpl_Loader_WebViewLoadingListener, ASIListener > {
 @public
  id<ASIWidget> w_;
  ADView *view_;
  NSString *strValue_;
  NSString *action_;
}

- (NSString *)getAction;

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue;

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue
                     withNSString:(NSString *)action;

- (void)onPageStartedWithADView:(ADView *)view;

- (id<JavaUtilMap>)getOnPageStartedEventObjWithADView:(ADView *)view;

@end

J2OBJC_EMPTY_STATIC_INIT(ASWebViewImpl_WebViewLoadingListener)

J2OBJC_FIELD_SETTER(ASWebViewImpl_WebViewLoadingListener, w_, id<ASIWidget>)
J2OBJC_FIELD_SETTER(ASWebViewImpl_WebViewLoadingListener, view_, ADView *)
J2OBJC_FIELD_SETTER(ASWebViewImpl_WebViewLoadingListener, strValue_, NSString *)
J2OBJC_FIELD_SETTER(ASWebViewImpl_WebViewLoadingListener, action_, NSString *)

__attribute__((unused)) static void ASWebViewImpl_WebViewLoadingListener_initWithASIWidget_withNSString_(ASWebViewImpl_WebViewLoadingListener *self, id<ASIWidget> w, NSString *strValue);

__attribute__((unused)) static ASWebViewImpl_WebViewLoadingListener *new_ASWebViewImpl_WebViewLoadingListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASWebViewImpl_WebViewLoadingListener *create_ASWebViewImpl_WebViewLoadingListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue);

__attribute__((unused)) static void ASWebViewImpl_WebViewLoadingListener_initWithASIWidget_withNSString_withNSString_(ASWebViewImpl_WebViewLoadingListener *self, id<ASIWidget> w, NSString *strValue, NSString *action);

__attribute__((unused)) static ASWebViewImpl_WebViewLoadingListener *new_ASWebViewImpl_WebViewLoadingListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASWebViewImpl_WebViewLoadingListener *create_ASWebViewImpl_WebViewLoadingListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action);

J2OBJC_TYPE_LITERAL_HEADER(ASWebViewImpl_WebViewLoadingListener)

@interface ASWebViewImpl_WebViewLoadedListener : NSObject < ASWebViewImpl_Loader_WebViewLoadedListener, ASIListener > {
 @public
  id<ASIWidget> w_;
  ADView *view_;
  NSString *strValue_;
  NSString *action_;
}

- (NSString *)getAction;

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue;

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue
                     withNSString:(NSString *)action;

- (void)onPageFinishedWithADView:(ADView *)view;

- (id<JavaUtilMap>)getOnPageFinishedEventObjWithADView:(ADView *)view;

@end

J2OBJC_EMPTY_STATIC_INIT(ASWebViewImpl_WebViewLoadedListener)

J2OBJC_FIELD_SETTER(ASWebViewImpl_WebViewLoadedListener, w_, id<ASIWidget>)
J2OBJC_FIELD_SETTER(ASWebViewImpl_WebViewLoadedListener, view_, ADView *)
J2OBJC_FIELD_SETTER(ASWebViewImpl_WebViewLoadedListener, strValue_, NSString *)
J2OBJC_FIELD_SETTER(ASWebViewImpl_WebViewLoadedListener, action_, NSString *)

__attribute__((unused)) static void ASWebViewImpl_WebViewLoadedListener_initWithASIWidget_withNSString_(ASWebViewImpl_WebViewLoadedListener *self, id<ASIWidget> w, NSString *strValue);

__attribute__((unused)) static ASWebViewImpl_WebViewLoadedListener *new_ASWebViewImpl_WebViewLoadedListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASWebViewImpl_WebViewLoadedListener *create_ASWebViewImpl_WebViewLoadedListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue);

__attribute__((unused)) static void ASWebViewImpl_WebViewLoadedListener_initWithASIWidget_withNSString_withNSString_(ASWebViewImpl_WebViewLoadedListener *self, id<ASIWidget> w, NSString *strValue, NSString *action);

__attribute__((unused)) static ASWebViewImpl_WebViewLoadedListener *new_ASWebViewImpl_WebViewLoadedListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASWebViewImpl_WebViewLoadedListener *create_ASWebViewImpl_WebViewLoadedListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action);

J2OBJC_TYPE_LITERAL_HEADER(ASWebViewImpl_WebViewLoadedListener)

@interface ASWebViewImpl_WebViewErrorListener : NSObject < ASWebViewImpl_Loader_WebViewErrorListener, ASIListener > {
 @public
  id<ASIWidget> w_;
  ADView *view_;
  NSString *strValue_;
  NSString *action_;
}

- (NSString *)getAction;

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue;

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue
                     withNSString:(NSString *)action;

- (void)onReceivedErrorWithADView:(ADView *)view
                     withNSString:(NSString *)error;

- (id<JavaUtilMap>)getOnReceivedErrorEventObjWithADView:(ADView *)view
                                           withNSString:(NSString *)error;

@end

J2OBJC_EMPTY_STATIC_INIT(ASWebViewImpl_WebViewErrorListener)

J2OBJC_FIELD_SETTER(ASWebViewImpl_WebViewErrorListener, w_, id<ASIWidget>)
J2OBJC_FIELD_SETTER(ASWebViewImpl_WebViewErrorListener, view_, ADView *)
J2OBJC_FIELD_SETTER(ASWebViewImpl_WebViewErrorListener, strValue_, NSString *)
J2OBJC_FIELD_SETTER(ASWebViewImpl_WebViewErrorListener, action_, NSString *)

__attribute__((unused)) static void ASWebViewImpl_WebViewErrorListener_initWithASIWidget_withNSString_(ASWebViewImpl_WebViewErrorListener *self, id<ASIWidget> w, NSString *strValue);

__attribute__((unused)) static ASWebViewImpl_WebViewErrorListener *new_ASWebViewImpl_WebViewErrorListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASWebViewImpl_WebViewErrorListener *create_ASWebViewImpl_WebViewErrorListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue);

__attribute__((unused)) static void ASWebViewImpl_WebViewErrorListener_initWithASIWidget_withNSString_withNSString_(ASWebViewImpl_WebViewErrorListener *self, id<ASIWidget> w, NSString *strValue, NSString *action);

__attribute__((unused)) static ASWebViewImpl_WebViewErrorListener *new_ASWebViewImpl_WebViewErrorListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASWebViewImpl_WebViewErrorListener *create_ASWebViewImpl_WebViewErrorListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action);

J2OBJC_TYPE_LITERAL_HEADER(ASWebViewImpl_WebViewErrorListener)

@interface ASWebViewImpl_WebViewCommandBuilder () {
 @public
  ASWebViewImpl *this$0_;
}

@end

@interface ASWebViewImpl_WebViewBean () {
 @public
  ASWebViewImpl *this$0_;
}

@end

NSString *ASWebViewImpl_LOCAL_NAME = @"WebView";
NSString *ASWebViewImpl_GROUP_NAME = @"WebView";

@implementation ASWebViewImpl

@synthesize uiView = uiView_;

- (void)loadAttributesWithNSString:(NSString *)attributeName {
  ASViewImpl_register__WithNSString_(attributeName);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"onPageStarted"])) withTypeWithNSString:@"string"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"onPageFinished"])) withTypeWithNSString:@"string"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"onReceivedError"])) withTypeWithNSString:@"string"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"loadUrl"])) withTypeWithNSString:@"resourcestring"]);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASWebViewImpl_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithNSString:(NSString *)localname {
  ASWebViewImpl_initWithNSString_(self, localname);
  return self;
}

- (instancetype)initWithNSString:(NSString *)groupName
                    withNSString:(NSString *)localname {
  ASWebViewImpl_initWithNSString_withNSString_(self, groupName, localname);
  return self;
}

- (IOSClass *)getViewClass {
  return ASWebViewImpl_WebViewExt_class_();
}

- (id<ASIWidget>)newInstance {
  return new_ASWebViewImpl_initWithNSString_withNSString_(groupName_, localName_);
}

- (void)createWithASIFragment:(id<ASIFragment>)fragment
              withJavaUtilMap:(id<JavaUtilMap>)params {
  [super createWithASIFragment:fragment withJavaUtilMap:params];
  measurableView_ = new_ASWebViewImpl_WebViewExt_initWithASWebViewImpl_(self);
  [self nativeCreateWithJavaUtilMap:params];
  ASViewImpl_registerCommandConveterWithASIWidget_(self);
  ASWebViewImpl_setWidgetOnNativeClass(self);
}

- (void)setWidgetOnNativeClass {
  ASWebViewImpl_setWidgetOnNativeClass(self);
}

- (void)setAttributeWithASWidgetAttribute:(ASWidgetAttribute *)key
                             withNSString:(NSString *)strValue
                                   withId:(id)objValue
                withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  id nativeWidget = [self asNativeWidget];
  ASViewImpl_setAttributeWithASIWidget_withASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(self, key, strValue, objValue, decorator);
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"onPageStarted", @"onPageFinished", @"onReceivedError", @"loadUrl" }, 4)) {
    case 0:
    {
      ASWebViewImpl_setWebViewLoadingListenerWithASWebViewImpl_WebViewLoadingListener_(self, new_ASWebViewImpl_WebViewLoadingListener_initWithASIWidget_withNSString_withNSString_(self, strValue, @"onPageStarted"));
    }
    break;
    case 1:
    {
      ASWebViewImpl_setWebViewLoadedListenerWithASWebViewImpl_WebViewLoadedListener_(self, new_ASWebViewImpl_WebViewLoadedListener_initWithASIWidget_withNSString_withNSString_(self, strValue, @"onPageFinished"));
    }
    break;
    case 2:
    {
      ASWebViewImpl_setWebViewErrorListenerWithASWebViewImpl_WebViewErrorListener_(self, new_ASWebViewImpl_WebViewErrorListener_initWithASIWidget_withNSString_withNSString_(self, strValue, @"onReceivedError"));
    }
    break;
    case 3:
    {
      ASWebViewImpl_loadUrlWithId_(self, objValue);
    }
    break;
    default:
    break;
  }
}

- (id)getAttributeWithASWidgetAttribute:(ASWidgetAttribute *)key
              withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  id nativeWidget = [self asNativeWidget];
  id attributeValue = ASViewImpl_getAttributeWithASIWidget_withId_withASWidgetAttribute_withASILifeCycleDecorator_(self, nativeWidget, key, decorator);
  if (attributeValue != nil) {
    return attributeValue;
  }
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){  }, 0)) {
  }
  return nil;
}

- (id)asWidget {
  return measurableView_;
}

- (void)setWebViewLoadedListenerWithASWebViewImpl_WebViewLoadedListener:(ASWebViewImpl_WebViewLoadedListener *)webviewLoadedListener {
  ASWebViewImpl_setWebViewLoadedListenerWithASWebViewImpl_WebViewLoadedListener_(self, webviewLoadedListener);
}

- (void)setWebViewErrorListenerWithASWebViewImpl_WebViewErrorListener:(ASWebViewImpl_WebViewErrorListener *)webviewErrorListener {
  ASWebViewImpl_setWebViewErrorListenerWithASWebViewImpl_WebViewErrorListener_(self, webviewErrorListener);
}

- (void)setWebViewLoadingListenerWithASWebViewImpl_WebViewLoadingListener:(ASWebViewImpl_WebViewLoadingListener *)webviewLoadingListener {
  ASWebViewImpl_setWebViewLoadingListenerWithASWebViewImpl_WebViewLoadingListener_(self, webviewLoadingListener);
}

- (void)onPageFinishedWithADView:(ADView *)view {
  ASWebViewImpl_onPageFinishedWithADView_(self, view);
}

- (void)onPageStartedWithADView:(ADView *)view {
  ASWebViewImpl_onPageStartedWithADView_(self, view);
}

- (void)onReceivedErrorWithADView:(ADView *)view
                     withNSString:(NSString *)error {
  ASWebViewImpl_onReceivedErrorWithADView_withNSString_(self, view, error);
}

- (id)asNativeWidget {
  return uiView_;
}

- (jboolean)checkIosVersionWithNSString:(NSString *)v {
  return ([[[UIDevice currentDevice] systemVersion] compare:v options:NSNumericSearch] == NSOrderedDescending);
}

- (void)setIdWithNSString:(NSString *)id_ {
  if (id_ != nil && ![id_ isEqual:@""]) {
    [super setIdWithNSString:id_];
    [((ADWebView *) nil_chk(measurableView_)) setIdWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([self quickConvertWithId:id_ withNSString:@"id"], [JavaLangInteger class]))) intValue]];
  }
}

- (void)setVisibleWithBoolean:(jboolean)b {
  [((ADView *) nil_chk(((ADView *) cast_chk([self asWidget], [ADView class])))) setVisibilityWithInt:b ? ADView_VISIBLE : ADView_GONE];
}

- (void)requestLayout {
  if ([self isInitialised]) {
    ASViewImpl_requestLayoutWithASIWidget_withId_(self, [self asNativeWidget]);
  }
}

- (void)invalidate {
  if ([self isInitialised]) {
    ASViewImpl_invalidateWithASIWidget_withId_(self, [self asNativeWidget]);
  }
}

- (id)getPluginWithNSString:(NSString *)plugin {
  return [((id<ASIAttributable>) nil_chk(ASWidgetFactory_getAttributableWithNSString_(plugin))) newInstanceWithASIWidget:self];
}

- (ASWebViewImpl_WebViewBean *)getBean {
  if (bean_ == nil) {
    bean_ = new_ASWebViewImpl_WebViewBean_initWithASWebViewImpl_(self);
  }
  return bean_;
}

- (ASWebViewImpl_WebViewCommandBuilder *)getBuilder {
  if (builder_ == nil) {
    builder_ = new_ASWebViewImpl_WebViewCommandBuilder_initWithASWebViewImpl_(self);
  }
  return builder_;
}

- (void)webView:(WKWebView *)webView didFinishNavigation:(WKNavigation *)navigation {
  signal_catch_init();
  signal_try(1) {
    [self onPageFinishedWithADView: measurableView_];
  }
  signal_catch(1) {
    // do nothing
  }
  signal_end(1)
}

- (void)webView:(WKWebView *)webView didFailProvisionalNavigation:(WKNavigation *)navigation withError:(NSError *)error {
  [self onReceivedErrorWithADView:measurableView_ withNSString:[error localizedDescription]];
  [self onPageFinishedWithADView: measurableView_];
}
- (void)webView:(WKWebView *)webView didStartProvisionalNavigation:(WKNavigation *)navigation {
  [self onPageStartedWithADView: measurableView_];
}

- (void)nativeCreateWithJavaUtilMap:(id<JavaUtilMap>)params {
  ASWKWebView* uiView = [ASWKWebView new];
  uiView.navigationDelegate = self;
  uiView.backgroundColor = [UIColor clearColor];
  uiView_ = uiView;
}

- (void)loadUrlWithId:(id)objValue {
  ASWebViewImpl_loadUrlWithId_(self, objValue);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "LIOSClass;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASIWidget;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, 5, -1, -1 },
    { NULL, "V", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 12, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 14, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 16, 17, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 18, 17, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 19, 20, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x101, 21, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 22, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 23, 24, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 25, 1, -1, -1, -1, -1 },
    { NULL, "LASWebViewImpl_WebViewBean;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASWebViewImpl_WebViewCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 26, 27, -1, 28, -1, -1 },
    { NULL, "V", 0x102, 29, 30, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(loadAttributesWithNSString:);
  methods[1].selector = @selector(init);
  methods[2].selector = @selector(initWithNSString:);
  methods[3].selector = @selector(initWithNSString:withNSString:);
  methods[4].selector = @selector(getViewClass);
  methods[5].selector = @selector(newInstance);
  methods[6].selector = @selector(createWithASIFragment:withJavaUtilMap:);
  methods[7].selector = @selector(setWidgetOnNativeClass);
  methods[8].selector = @selector(setAttributeWithASWidgetAttribute:withNSString:withId:withASILifeCycleDecorator:);
  methods[9].selector = @selector(getAttributeWithASWidgetAttribute:withASILifeCycleDecorator:);
  methods[10].selector = @selector(asWidget);
  methods[11].selector = @selector(setWebViewLoadedListenerWithASWebViewImpl_WebViewLoadedListener:);
  methods[12].selector = @selector(setWebViewErrorListenerWithASWebViewImpl_WebViewErrorListener:);
  methods[13].selector = @selector(setWebViewLoadingListenerWithASWebViewImpl_WebViewLoadingListener:);
  methods[14].selector = @selector(onPageFinishedWithADView:);
  methods[15].selector = @selector(onPageStartedWithADView:);
  methods[16].selector = @selector(onReceivedErrorWithADView:withNSString:);
  methods[17].selector = @selector(asNativeWidget);
  methods[18].selector = @selector(checkIosVersionWithNSString:);
  methods[19].selector = @selector(setIdWithNSString:);
  methods[20].selector = @selector(setVisibleWithBoolean:);
  methods[21].selector = @selector(requestLayout);
  methods[22].selector = @selector(invalidate);
  methods[23].selector = @selector(getPluginWithNSString:);
  methods[24].selector = @selector(getBean);
  methods[25].selector = @selector(getBuilder);
  methods[26].selector = @selector(nativeCreateWithJavaUtilMap:);
  methods[27].selector = @selector(loadUrlWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "LOCAL_NAME", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 31, -1, -1 },
    { "GROUP_NAME", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 32, -1, -1 },
    { "uiView_", "LNSObject;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "measurableView_", "LADWebView;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "webviewLoadingListener_", "LASWebViewImpl_Loader_WebViewLoadingListener;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "webviewLoadedListener_", "LASWebViewImpl_Loader_WebViewLoadedListener;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "webviewErrorListener_", "LASWebViewImpl_Loader_WebViewErrorListener;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "pageFinished_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "builder_", "LASWebViewImpl_WebViewCommandBuilder;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "bean_", "LASWebViewImpl_WebViewBean;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "loadAttributes", "LNSString;", "LNSString;LNSString;", "create", "LASIFragment;LJavaUtilMap;", "(Lcom/ashera/core/IFragment;Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;)V", "setAttribute", "LASWidgetAttribute;LNSString;LNSObject;LASILifeCycleDecorator;", "getAttribute", "LASWidgetAttribute;LASILifeCycleDecorator;", "setWebViewLoadedListener", "LASWebViewImpl_WebViewLoadedListener;", "setWebViewErrorListener", "LASWebViewImpl_WebViewErrorListener;", "setWebViewLoadingListener", "LASWebViewImpl_WebViewLoadingListener;", "onPageFinished", "LADView;", "onPageStarted", "onReceivedError", "LADView;LNSString;", "checkIosVersion", "setId", "setVisible", "Z", "getPlugin", "nativeCreate", "LJavaUtilMap;", "(Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;)V", "loadUrl", "LNSObject;", &ASWebViewImpl_LOCAL_NAME, &ASWebViewImpl_GROUP_NAME, "LASWebViewImpl_WebViewExt;LASWebViewImpl_Loader;LASWebViewImpl_WebViewLoadingListener;LASWebViewImpl_WebViewLoadedListener;LASWebViewImpl_WebViewErrorListener;LASWebViewImpl_WebViewCommandBuilder;LASWebViewImpl_WebViewBean;" };
  static const J2ObjcClassInfo _ASWebViewImpl = { "WebViewImpl", "com.ashera.layout", ptrTable, methods, fields, 7, 0x1, 28, 10, -1, 33, -1, -1, -1 };
  return &_ASWebViewImpl;
}

@end

void ASWebViewImpl_init(ASWebViewImpl *self) {
  ASBaseWidget_initWithNSString_withNSString_(self, ASWebViewImpl_GROUP_NAME, ASWebViewImpl_LOCAL_NAME);
  self->pageFinished_ = false;
}

ASWebViewImpl *new_ASWebViewImpl_init() {
  J2OBJC_NEW_IMPL(ASWebViewImpl, init)
}

ASWebViewImpl *create_ASWebViewImpl_init() {
  J2OBJC_CREATE_IMPL(ASWebViewImpl, init)
}

void ASWebViewImpl_initWithNSString_(ASWebViewImpl *self, NSString *localname) {
  ASBaseWidget_initWithNSString_withNSString_(self, ASWebViewImpl_GROUP_NAME, localname);
  self->pageFinished_ = false;
}

ASWebViewImpl *new_ASWebViewImpl_initWithNSString_(NSString *localname) {
  J2OBJC_NEW_IMPL(ASWebViewImpl, initWithNSString_, localname)
}

ASWebViewImpl *create_ASWebViewImpl_initWithNSString_(NSString *localname) {
  J2OBJC_CREATE_IMPL(ASWebViewImpl, initWithNSString_, localname)
}

void ASWebViewImpl_initWithNSString_withNSString_(ASWebViewImpl *self, NSString *groupName, NSString *localname) {
  ASBaseWidget_initWithNSString_withNSString_(self, groupName, localname);
  self->pageFinished_ = false;
}

ASWebViewImpl *new_ASWebViewImpl_initWithNSString_withNSString_(NSString *groupName, NSString *localname) {
  J2OBJC_NEW_IMPL(ASWebViewImpl, initWithNSString_withNSString_, groupName, localname)
}

ASWebViewImpl *create_ASWebViewImpl_initWithNSString_withNSString_(NSString *groupName, NSString *localname) {
  J2OBJC_CREATE_IMPL(ASWebViewImpl, initWithNSString_withNSString_, groupName, localname)
}

void ASWebViewImpl_setWidgetOnNativeClass(ASWebViewImpl *self) {
  ((ASWKWebView*) self.uiView).widget = self;
}

void ASWebViewImpl_setWebViewLoadedListenerWithASWebViewImpl_WebViewLoadedListener_(ASWebViewImpl *self, ASWebViewImpl_WebViewLoadedListener *webviewLoadedListener) {
  self->webviewLoadedListener_ = webviewLoadedListener;
}

void ASWebViewImpl_setWebViewErrorListenerWithASWebViewImpl_WebViewErrorListener_(ASWebViewImpl *self, ASWebViewImpl_WebViewErrorListener *webviewErrorListener) {
  self->webviewErrorListener_ = webviewErrorListener;
}

void ASWebViewImpl_setWebViewLoadingListenerWithASWebViewImpl_WebViewLoadingListener_(ASWebViewImpl *self, ASWebViewImpl_WebViewLoadingListener *webviewLoadingListener) {
  self->webviewLoadingListener_ = webviewLoadingListener;
}

void ASWebViewImpl_onPageFinishedWithADView_(ASWebViewImpl *self, ADView *view) {
  if (!self->pageFinished_ && self->webviewLoadedListener_ != nil) {
    self->pageFinished_ = true;
    @try {
      [self->webviewLoadedListener_ onPageFinishedWithADView:view];
    }
    @catch (JavaLangException *e) {
    }
  }
}

void ASWebViewImpl_onPageStartedWithADView_(ASWebViewImpl *self, ADView *view) {
  if (self->webviewLoadingListener_ != nil) {
    [self->webviewLoadingListener_ onPageStartedWithADView:view];
  }
}

void ASWebViewImpl_onReceivedErrorWithADView_withNSString_(ASWebViewImpl *self, ADView *view, NSString *error) {
  if (self->webviewErrorListener_ != nil) {
    [self->webviewErrorListener_ onReceivedErrorWithADView:view withNSString:error];
  }
}

void ASWebViewImpl_loadUrlWithId_(ASWebViewImpl *self, id objValue) {
  NSURLRequest *request = [NSURLRequest requestWithURL:[NSURL URLWithString:(NSString*) objValue]];
  [((ASWKWebView*)self->uiView_) loadRequest: request];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASWebViewImpl)

@implementation ASWebViewImpl_WebViewExt

- (id<ASIWidget>)getWidget {
  return this$0_;
}

- (void)setMaxWidthWithInt:(jint)width {
  mMaxWidth_ = width;
}

- (void)setMaxHeightWithInt:(jint)height {
  mMaxHeight_ = height;
}

- (jint)getMaxWidth {
  return mMaxWidth_;
}

- (jint)getMaxHeight {
  return mMaxHeight_;
}

- (instancetype)initWithASWebViewImpl:(ASWebViewImpl *)outer$ {
  ASWebViewImpl_WebViewExt_initWithASWebViewImpl_(self, outer$);
  return self;
}

- (void)onMeasureWithInt:(jint)widthMeasureSpec
                 withInt:(jint)heightMeasureSpec {
  if (mMaxWidth_ > 0) {
    widthMeasureSpec = ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_(mMaxWidth_, ADView_MeasureSpec_AT_MOST);
  }
  if (mMaxHeight_ > 0) {
    heightMeasureSpec = ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_(mMaxHeight_, ADView_MeasureSpec_AT_MOST);
  }
  [super onMeasureWithInt:widthMeasureSpec withInt:heightMeasureSpec];
  id<ASIWidgetLifeCycleListener> listener = [this$0_ getListener];
  if (listener != nil) {
    [((ASMeasureEvent *) nil_chk(measureFinished_)) setWidthWithInt:[self getMeasuredWidth]];
    [((ASMeasureEvent *) nil_chk(measureFinished_)) setHeightWithInt:[self getMeasuredHeight]];
    [listener eventOccurredWithASIWidgetLifeCycleListener_EventId:JreLoadEnum(ASIWidgetLifeCycleListener_EventId, measureFinished) withASWidgetEvent:measureFinished_];
  }
}

- (void)onLayoutWithBoolean:(jboolean)changed
                    withInt:(jint)l
                    withInt:(jint)t
                    withInt:(jint)r
                    withInt:(jint)b {
  [super onLayoutWithBoolean:changed withInt:l withInt:t withInt:r withInt:b];
  ASViewImpl_setDrawableBoundsWithASIWidget_withInt_withInt_withInt_withInt_(this$0_, l, t, r, b);
  if (![self isOverlay]) {
    ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_([this$0_ asNativeWidget], l, t, r, b);
  }
  [this$0_ replayBufferedEvents];
  ASViewImpl_redrawDrawablesWithASIWidget_(this$0_);
  overlays_ = ASViewImpl_drawOverlayWithASIWidget_withJavaUtilList_(this$0_, overlays_);
  id<ASIWidgetLifeCycleListener> listener = [this$0_ getListener];
  if (listener != nil) {
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setBWithInt:b];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setLWithInt:l];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setRWithInt:r];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setTWithInt:t];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setChangedWithBoolean:changed];
    [listener eventOccurredWithASIWidgetLifeCycleListener_EventId:JreLoadEnum(ASIWidgetLifeCycleListener_EventId, onLayout) withASWidgetEvent:onLayoutEvent_];
  }
  if ([this$0_ isInvalidateOnFrameChange] && [this$0_ isInitialised]) {
    [this$0_ invalidate];
  }
}

- (void)executeWithNSString:(NSString *)method
          withNSObjectArray:(IOSObjectArray *)canvas {
}

- (void)updateMeasuredDimensionWithInt:(jint)width
                               withInt:(jint)height {
  [self setMeasuredDimensionWithInt:width withInt:height];
}

- (id<ASILifeCycleDecorator>)newInstanceWithASIWidget:(id<ASIWidget>)widget {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)setAttributeWithASWidgetAttribute:(ASWidgetAttribute *)widgetAttribute
                             withNSString:(NSString *)strValue
                                   withId:(id)objValue {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (id<JavaUtilList>)getMethods {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)initialized {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (id)getAttributeWithASWidgetAttribute:(ASWidgetAttribute *)widgetAttribute {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)drawableStateChanged {
  [super drawableStateChanged];
  if (![this$0_ isWidgetDisposed]) {
    ASViewImpl_drawableStateChangedWithASIWidget_(this$0_);
  }
}

- (ADView *)inflateViewWithNSString:(NSString *)layout {
  if (templates_ == nil) {
    templates_ = new_JavaUtilHashMap_init();
  }
  id<ASIWidget> template_ = [templates_ getWithId:layout];
  if (template_ == nil) {
    template_ = (id<ASIWidget>) cast_check([this$0_ quickConvertWithId:layout withNSString:@"template"], ASIWidget_class_());
    (void) [((id<JavaUtilMap>) nil_chk(templates_)) putWithId:layout withId:template_];
  }
  id<ASIWidget> widget = [((id<ASIWidget>) nil_chk(template_)) loadLazyWidgetsWithASHasWidgets:[this$0_ getParent]];
  return (ADView *) cast_chk([((id<ASIWidget>) nil_chk(widget)) asWidget], [ADView class]);
}

- (void)remeasure {
  if ([this$0_ getFragment] != nil) {
    [((id<ASIFragment>) nil_chk([this$0_ getFragment])) remeasure];
  }
}

- (void)removeFromParent {
  [((id<ASHasWidgets>) nil_chk([this$0_ getParent])) removeWithASIWidget:this$0_];
}

- (void)getLocationOnScreenWithIntArray:(IOSIntArray *)appScreenLocation {
  *IOSIntArray_GetRef(nil_chk(appScreenLocation), 0) = ASViewImpl_getLocationXOnScreenWithId_([this$0_ asNativeWidget]);
  *IOSIntArray_GetRef(appScreenLocation, 1) = ASViewImpl_getLocationYOnScreenWithId_([this$0_ asNativeWidget]);
}

- (void)getWindowVisibleDisplayFrameWithADRect:(ADRect *)displayFrame {
  ((ADRect *) nil_chk(displayFrame))->left_ = ASViewImpl_getLocationXOnScreenWithId_([this$0_ asNativeWidget]);
  displayFrame->top_ = ASViewImpl_getLocationYOnScreenWithId_([this$0_ asNativeWidget]);
  displayFrame->right_ = displayFrame->left_ + [self getWidth];
  displayFrame->bottom_ = displayFrame->top_ + [self getHeight];
}

- (void)offsetTopAndBottomWithInt:(jint)offset {
  [super offsetTopAndBottomWithInt:offset];
  ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_([this$0_ asNativeWidget], [self getLeft], [self getTop], [self getRight], [self getBottom]);
}

- (void)offsetLeftAndRightWithInt:(jint)offset {
  [super offsetLeftAndRightWithInt:offset];
  ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_([this$0_ asNativeWidget], [self getLeft], [self getTop], [self getRight], [self getBottom]);
}

- (void)setMyAttributeWithNSString:(NSString *)name
                            withId:(id)value {
  if ([((NSString *) nil_chk(name)) isEqual:@"state0"]) {
    [self setState0WithId:value];
    return;
  }
  if ([name isEqual:@"state1"]) {
    [self setState1WithId:value];
    return;
  }
  if ([name isEqual:@"state2"]) {
    [self setState2WithId:value];
    return;
  }
  if ([name isEqual:@"state3"]) {
    [self setState3WithId:value];
    return;
  }
  if ([name isEqual:@"state4"]) {
    [self setState4WithId:value];
    return;
  }
  [this$0_ setAttributeWithNSString:name withId:value withBoolean:!([value isKindOfClass:[NSString class]])];
}

- (void)setVisibilityWithInt:(jint)visibility {
  [super setVisibilityWithInt:visibility];
  ASViewImpl_nativeSetVisibilityWithId_withBoolean_([this$0_ asNativeWidget], visibility != ADView_VISIBLE);
}

- (void)setState0WithId:(id)value {
  ASViewImpl_setStateWithASIWidget_withInt_withId_(this$0_, 0, value);
}

- (void)setState1WithId:(id)value {
  ASViewImpl_setStateWithASIWidget_withInt_withId_(this$0_, 1, value);
}

- (void)setState2WithId:(id)value {
  ASViewImpl_setStateWithASIWidget_withInt_withId_(this$0_, 2, value);
}

- (void)setState3WithId:(id)value {
  ASViewImpl_setStateWithASIWidget_withInt_withId_(this$0_, 3, value);
}

- (void)setState4WithId:(id)value {
  ASViewImpl_setStateWithASIWidget_withInt_withId_(this$0_, 4, value);
}

- (void)state0 {
  ASViewImpl_stateWithASIWidget_withInt_(this$0_, 0);
}

- (void)state1 {
  ASViewImpl_stateWithASIWidget_withInt_(this$0_, 1);
}

- (void)state2 {
  ASViewImpl_stateWithASIWidget_withInt_(this$0_, 2);
}

- (void)state3 {
  ASViewImpl_stateWithASIWidget_withInt_(this$0_, 3);
}

- (void)state4 {
  ASViewImpl_stateWithASIWidget_withInt_(this$0_, 4);
}

- (void)stateYes {
  ASViewImpl_stateYesWithASIWidget_(this$0_);
}

- (void)stateNo {
  ASViewImpl_stateNoWithASIWidget_(this$0_);
}

- (void)__javaClone:(ASWebViewImpl_WebViewExt *)original {
  [super __javaClone:original];
  JreRelease(this$0_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LASIWidget;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x81, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 5, -1, -1, -1, -1 },
    { NULL, "LASILifeCycleDecorator;", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 15, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 16, 17, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADView;", 0x1, 18, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 21, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 22, 23, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 24, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 25, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 26, 27, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 28, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 29, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 31, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 32, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 33, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 34, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getWidget);
  methods[1].selector = @selector(setMaxWidthWithInt:);
  methods[2].selector = @selector(setMaxHeightWithInt:);
  methods[3].selector = @selector(getMaxWidth);
  methods[4].selector = @selector(getMaxHeight);
  methods[5].selector = @selector(initWithASWebViewImpl:);
  methods[6].selector = @selector(onMeasureWithInt:withInt:);
  methods[7].selector = @selector(onLayoutWithBoolean:withInt:withInt:withInt:withInt:);
  methods[8].selector = @selector(executeWithNSString:withNSObjectArray:);
  methods[9].selector = @selector(updateMeasuredDimensionWithInt:withInt:);
  methods[10].selector = @selector(newInstanceWithASIWidget:);
  methods[11].selector = @selector(setAttributeWithASWidgetAttribute:withNSString:withId:);
  methods[12].selector = @selector(getMethods);
  methods[13].selector = @selector(initialized);
  methods[14].selector = @selector(getAttributeWithASWidgetAttribute:);
  methods[15].selector = @selector(drawableStateChanged);
  methods[16].selector = @selector(inflateViewWithNSString:);
  methods[17].selector = @selector(remeasure);
  methods[18].selector = @selector(removeFromParent);
  methods[19].selector = @selector(getLocationOnScreenWithIntArray:);
  methods[20].selector = @selector(getWindowVisibleDisplayFrameWithADRect:);
  methods[21].selector = @selector(offsetTopAndBottomWithInt:);
  methods[22].selector = @selector(offsetLeftAndRightWithInt:);
  methods[23].selector = @selector(setMyAttributeWithNSString:withId:);
  methods[24].selector = @selector(setVisibilityWithInt:);
  methods[25].selector = @selector(setState0WithId:);
  methods[26].selector = @selector(setState1WithId:);
  methods[27].selector = @selector(setState2WithId:);
  methods[28].selector = @selector(setState3WithId:);
  methods[29].selector = @selector(setState4WithId:);
  methods[30].selector = @selector(state0);
  methods[31].selector = @selector(state1);
  methods[32].selector = @selector(state2);
  methods[33].selector = @selector(state3);
  methods[34].selector = @selector(state4);
  methods[35].selector = @selector(stateYes);
  methods[36].selector = @selector(stateNo);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASWebViewImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "measureFinished_", "LASMeasureEvent;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "onLayoutEvent_", "LASOnLayoutEvent;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "overlays_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 35, -1 },
    { "mMaxWidth_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mMaxHeight_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "templates_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 36, -1 },
  };
  static const void *ptrTable[] = { "setMaxWidth", "I", "setMaxHeight", "LASWebViewImpl;", "onMeasure", "II", "onLayout", "ZIIII", "execute", "LNSString;[LNSObject;", "updateMeasuredDimension", "newInstance", "LASIWidget;", "setAttribute", "LASWidgetAttribute;LNSString;LNSObject;", "()Ljava/util/List<Ljava/lang/String;>;", "getAttribute", "LASWidgetAttribute;", "inflateView", "LNSString;", "getLocationOnScreen", "[I", "getWindowVisibleDisplayFrame", "LADRect;", "offsetTopAndBottom", "offsetLeftAndRight", "setMyAttribute", "LNSString;LNSObject;", "setVisibility", "setState0", "LNSObject;", "setState1", "setState2", "setState3", "setState4", "Ljava/util/List<Lcom/ashera/widget/IWidget;>;", "Ljava/util/Map<Ljava/lang/String;Lcom/ashera/widget/IWidget;>;" };
  static const J2ObjcClassInfo _ASWebViewImpl_WebViewExt = { "WebViewExt", "com.ashera.layout", ptrTable, methods, fields, 7, 0x1, 37, 7, 3, -1, -1, -1, -1 };
  return &_ASWebViewImpl_WebViewExt;
}

@end

void ASWebViewImpl_WebViewExt_initWithASWebViewImpl_(ASWebViewImpl_WebViewExt *self, ASWebViewImpl *outer$) {
  self->this$0_ = outer$;
  ADWebView_init(self);
  self->measureFinished_ = new_ASMeasureEvent_init();
  self->onLayoutEvent_ = new_ASOnLayoutEvent_init();
  self->mMaxWidth_ = -1;
  self->mMaxHeight_ = -1;
}

ASWebViewImpl_WebViewExt *new_ASWebViewImpl_WebViewExt_initWithASWebViewImpl_(ASWebViewImpl *outer$) {
  J2OBJC_NEW_IMPL(ASWebViewImpl_WebViewExt, initWithASWebViewImpl_, outer$)
}

ASWebViewImpl_WebViewExt *create_ASWebViewImpl_WebViewExt_initWithASWebViewImpl_(ASWebViewImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASWebViewImpl_WebViewExt, initWithASWebViewImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASWebViewImpl_WebViewExt)

@implementation ASWebViewImpl_Loader

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASWebViewImpl_Loader_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LASWebViewImpl;", "LASWebViewImpl_Loader_WebViewLoadingListener;LASWebViewImpl_Loader_WebViewLoadedListener;LASWebViewImpl_Loader_WebViewErrorListener;" };
  static const J2ObjcClassInfo _ASWebViewImpl_Loader = { "Loader", "com.ashera.layout", ptrTable, methods, NULL, 7, 0x8, 1, 0, 0, 1, -1, -1, -1 };
  return &_ASWebViewImpl_Loader;
}

@end

void ASWebViewImpl_Loader_init(ASWebViewImpl_Loader *self) {
  NSObject_init(self);
}

ASWebViewImpl_Loader *new_ASWebViewImpl_Loader_init() {
  J2OBJC_NEW_IMPL(ASWebViewImpl_Loader, init)
}

ASWebViewImpl_Loader *create_ASWebViewImpl_Loader_init() {
  J2OBJC_CREATE_IMPL(ASWebViewImpl_Loader, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASWebViewImpl_Loader)

@implementation ASWebViewImpl_Loader_WebViewLoadingListener

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x401, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(onPageStartedWithADView:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "onPageStarted", "LADView;", "LASWebViewImpl_Loader;" };
  static const J2ObjcClassInfo _ASWebViewImpl_Loader_WebViewLoadingListener = { "WebViewLoadingListener", "com.ashera.layout", ptrTable, methods, NULL, 7, 0x608, 1, 0, 2, -1, -1, -1, -1 };
  return &_ASWebViewImpl_Loader_WebViewLoadingListener;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(ASWebViewImpl_Loader_WebViewLoadingListener)

@implementation ASWebViewImpl_Loader_WebViewLoadedListener

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x401, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(onPageFinishedWithADView:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "onPageFinished", "LADView;", "LASWebViewImpl_Loader;" };
  static const J2ObjcClassInfo _ASWebViewImpl_Loader_WebViewLoadedListener = { "WebViewLoadedListener", "com.ashera.layout", ptrTable, methods, NULL, 7, 0x608, 1, 0, 2, -1, -1, -1, -1 };
  return &_ASWebViewImpl_Loader_WebViewLoadedListener;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(ASWebViewImpl_Loader_WebViewLoadedListener)

@implementation ASWebViewImpl_Loader_WebViewErrorListener

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x401, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(onReceivedErrorWithADView:withNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "onReceivedError", "LADView;LNSString;", "LASWebViewImpl_Loader;" };
  static const J2ObjcClassInfo _ASWebViewImpl_Loader_WebViewErrorListener = { "WebViewErrorListener", "com.ashera.layout", ptrTable, methods, NULL, 7, 0x608, 1, 0, 2, -1, -1, -1, -1 };
  return &_ASWebViewImpl_Loader_WebViewErrorListener;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(ASWebViewImpl_Loader_WebViewErrorListener)

@implementation ASWebViewImpl_WebViewLoadingListener

- (NSString *)getAction {
  return action_;
}

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue {
  ASWebViewImpl_WebViewLoadingListener_initWithASIWidget_withNSString_(self, w, strValue);
  return self;
}

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue
                     withNSString:(NSString *)action {
  ASWebViewImpl_WebViewLoadingListener_initWithASIWidget_withNSString_withNSString_(self, w, strValue, action);
  return self;
}

- (void)onPageStartedWithADView:(ADView *)view {
  if (action_ == nil || [action_ isEqual:@"onPageStarted"]) {
    [((id<ASIWidget>) nil_chk(w_)) syncModelFromUiToPojoWithNSString:@"onPageStarted"];
    id<JavaUtilMap> obj = [self getOnPageStartedEventObjWithADView:view];
    NSString *commandName = (NSString *) cast_chk([((id<JavaUtilMap>) nil_chk(obj)) getWithId:ASEventExpressionParser_KEY_COMMAND_NAME], [NSString class]);
    NSString *commandType = (NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_COMMAND_TYPE], [NSString class]);
    switch (JreIndexOfStr(commandType, (id[]){ @"+" }, 1)) {
      case 0:
      if (ASEventCommandFactory_hasCommandWithNSString_(commandName)) {
        (void) [((id<ASEventCommand>) nil_chk(ASEventCommandFactory_getCommandWithNSString_(commandName))) executeCommandWithASIWidget:w_ withJavaUtilMap:obj withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ view } count:1 type:NSObject_class_()]];
      }
      break;
      default:
      break;
    }
    if ([obj containsKeyWithId:@"refreshUiFromModel"]) {
      id widgets = [obj removeWithId:@"refreshUiFromModel"];
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, widgets, true);
    }
    if ([((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds] != nil) {
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, [((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds], true);
    }
    if (strValue_ != nil && ![strValue_ java_isEmpty] && ![((NSString *) nil_chk([((NSString *) nil_chk(strValue_)) java_trim])) java_hasPrefix:@"+"]) {
      id<ASIActivity> activity = [((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getRootActivity];
      if (activity != nil) {
        [activity sendEventMessageWithJavaUtilMap:obj];
      }
    }
  }
  return;
}

- (id<JavaUtilMap>)getOnPageStartedEventObjWithADView:(ADView *)view {
  id<JavaUtilMap> obj = ASPluginInvoker_getJSONCompatMap();
  (void) [((id<JavaUtilMap>) nil_chk(obj)) putWithId:@"action" withId:@"action"];
  (void) [obj putWithId:@"eventType" withId:@"pagestarted"];
  (void) [obj putWithId:@"fragmentId" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getFragmentId]];
  (void) [obj putWithId:@"actionUrl" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getActionUrl]];
  if ([((id<ASIWidget>) nil_chk(w_)) getComponentId] != nil) {
    (void) [obj putWithId:@"componentId" withId:[((id<ASIWidget>) nil_chk(w_)) getComponentId]];
  }
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"id", [((id<ASIWidget>) nil_chk(w_)) getId]);
  (void) ASEventExpressionParser_parseEventExpressionWithNSString_withJavaUtilMap_(strValue_, obj);
  [((id<ASIWidget>) nil_chk(w_)) updateModelToEventMapWithJavaUtilMap:obj withNSString:@"onPageStarted" withNSString:(NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_EVENT_ARGS], [NSString class])];
  return obj;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, 4, 3, -1, 5, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getAction);
  methods[1].selector = @selector(initWithASIWidget:withNSString:);
  methods[2].selector = @selector(initWithASIWidget:withNSString:withNSString:);
  methods[3].selector = @selector(onPageStartedWithADView:);
  methods[4].selector = @selector(getOnPageStartedEventObjWithADView:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "w_", "LASIWidget;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "view_", "LADView;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "strValue_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "action_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASIWidget;LNSString;", "LASIWidget;LNSString;LNSString;", "onPageStarted", "LADView;", "getOnPageStartedEventObj", "(Lr/android/view/View;)Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", "LASWebViewImpl;" };
  static const J2ObjcClassInfo _ASWebViewImpl_WebViewLoadingListener = { "WebViewLoadingListener", "com.ashera.layout", ptrTable, methods, fields, 7, 0xa, 5, 4, 6, -1, -1, -1, -1 };
  return &_ASWebViewImpl_WebViewLoadingListener;
}

@end

void ASWebViewImpl_WebViewLoadingListener_initWithASIWidget_withNSString_(ASWebViewImpl_WebViewLoadingListener *self, id<ASIWidget> w, NSString *strValue) {
  NSObject_init(self);
  self->w_ = w;
  self->strValue_ = strValue;
}

ASWebViewImpl_WebViewLoadingListener *new_ASWebViewImpl_WebViewLoadingListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) {
  J2OBJC_NEW_IMPL(ASWebViewImpl_WebViewLoadingListener, initWithASIWidget_withNSString_, w, strValue)
}

ASWebViewImpl_WebViewLoadingListener *create_ASWebViewImpl_WebViewLoadingListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) {
  J2OBJC_CREATE_IMPL(ASWebViewImpl_WebViewLoadingListener, initWithASIWidget_withNSString_, w, strValue)
}

void ASWebViewImpl_WebViewLoadingListener_initWithASIWidget_withNSString_withNSString_(ASWebViewImpl_WebViewLoadingListener *self, id<ASIWidget> w, NSString *strValue, NSString *action) {
  NSObject_init(self);
  self->w_ = w;
  self->strValue_ = strValue;
  self->action_ = action;
}

ASWebViewImpl_WebViewLoadingListener *new_ASWebViewImpl_WebViewLoadingListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) {
  J2OBJC_NEW_IMPL(ASWebViewImpl_WebViewLoadingListener, initWithASIWidget_withNSString_withNSString_, w, strValue, action)
}

ASWebViewImpl_WebViewLoadingListener *create_ASWebViewImpl_WebViewLoadingListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) {
  J2OBJC_CREATE_IMPL(ASWebViewImpl_WebViewLoadingListener, initWithASIWidget_withNSString_withNSString_, w, strValue, action)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASWebViewImpl_WebViewLoadingListener)

@implementation ASWebViewImpl_WebViewLoadedListener

- (NSString *)getAction {
  return action_;
}

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue {
  ASWebViewImpl_WebViewLoadedListener_initWithASIWidget_withNSString_(self, w, strValue);
  return self;
}

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue
                     withNSString:(NSString *)action {
  ASWebViewImpl_WebViewLoadedListener_initWithASIWidget_withNSString_withNSString_(self, w, strValue, action);
  return self;
}

- (void)onPageFinishedWithADView:(ADView *)view {
  if (action_ == nil || [action_ isEqual:@"onPageFinished"]) {
    [((id<ASIWidget>) nil_chk(w_)) syncModelFromUiToPojoWithNSString:@"onPageFinished"];
    id<JavaUtilMap> obj = [self getOnPageFinishedEventObjWithADView:view];
    NSString *commandName = (NSString *) cast_chk([((id<JavaUtilMap>) nil_chk(obj)) getWithId:ASEventExpressionParser_KEY_COMMAND_NAME], [NSString class]);
    NSString *commandType = (NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_COMMAND_TYPE], [NSString class]);
    switch (JreIndexOfStr(commandType, (id[]){ @"+" }, 1)) {
      case 0:
      if (ASEventCommandFactory_hasCommandWithNSString_(commandName)) {
        (void) [((id<ASEventCommand>) nil_chk(ASEventCommandFactory_getCommandWithNSString_(commandName))) executeCommandWithASIWidget:w_ withJavaUtilMap:obj withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ view } count:1 type:NSObject_class_()]];
      }
      break;
      default:
      break;
    }
    if ([obj containsKeyWithId:@"refreshUiFromModel"]) {
      id widgets = [obj removeWithId:@"refreshUiFromModel"];
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, widgets, true);
    }
    if ([((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds] != nil) {
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, [((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds], true);
    }
    if (strValue_ != nil && ![strValue_ java_isEmpty] && ![((NSString *) nil_chk([((NSString *) nil_chk(strValue_)) java_trim])) java_hasPrefix:@"+"]) {
      id<ASIActivity> activity = [((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getRootActivity];
      if (activity != nil) {
        [activity sendEventMessageWithJavaUtilMap:obj];
      }
    }
  }
  return;
}

- (id<JavaUtilMap>)getOnPageFinishedEventObjWithADView:(ADView *)view {
  id<JavaUtilMap> obj = ASPluginInvoker_getJSONCompatMap();
  (void) [((id<JavaUtilMap>) nil_chk(obj)) putWithId:@"action" withId:@"action"];
  (void) [obj putWithId:@"eventType" withId:@"pagefinished"];
  (void) [obj putWithId:@"fragmentId" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getFragmentId]];
  (void) [obj putWithId:@"actionUrl" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getActionUrl]];
  if ([((id<ASIWidget>) nil_chk(w_)) getComponentId] != nil) {
    (void) [obj putWithId:@"componentId" withId:[((id<ASIWidget>) nil_chk(w_)) getComponentId]];
  }
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"id", [((id<ASIWidget>) nil_chk(w_)) getId]);
  (void) ASEventExpressionParser_parseEventExpressionWithNSString_withJavaUtilMap_(strValue_, obj);
  [((id<ASIWidget>) nil_chk(w_)) updateModelToEventMapWithJavaUtilMap:obj withNSString:@"onPageFinished" withNSString:(NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_EVENT_ARGS], [NSString class])];
  return obj;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, 4, 3, -1, 5, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getAction);
  methods[1].selector = @selector(initWithASIWidget:withNSString:);
  methods[2].selector = @selector(initWithASIWidget:withNSString:withNSString:);
  methods[3].selector = @selector(onPageFinishedWithADView:);
  methods[4].selector = @selector(getOnPageFinishedEventObjWithADView:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "w_", "LASIWidget;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "view_", "LADView;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "strValue_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "action_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASIWidget;LNSString;", "LASIWidget;LNSString;LNSString;", "onPageFinished", "LADView;", "getOnPageFinishedEventObj", "(Lr/android/view/View;)Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", "LASWebViewImpl;" };
  static const J2ObjcClassInfo _ASWebViewImpl_WebViewLoadedListener = { "WebViewLoadedListener", "com.ashera.layout", ptrTable, methods, fields, 7, 0xa, 5, 4, 6, -1, -1, -1, -1 };
  return &_ASWebViewImpl_WebViewLoadedListener;
}

@end

void ASWebViewImpl_WebViewLoadedListener_initWithASIWidget_withNSString_(ASWebViewImpl_WebViewLoadedListener *self, id<ASIWidget> w, NSString *strValue) {
  NSObject_init(self);
  self->w_ = w;
  self->strValue_ = strValue;
}

ASWebViewImpl_WebViewLoadedListener *new_ASWebViewImpl_WebViewLoadedListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) {
  J2OBJC_NEW_IMPL(ASWebViewImpl_WebViewLoadedListener, initWithASIWidget_withNSString_, w, strValue)
}

ASWebViewImpl_WebViewLoadedListener *create_ASWebViewImpl_WebViewLoadedListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) {
  J2OBJC_CREATE_IMPL(ASWebViewImpl_WebViewLoadedListener, initWithASIWidget_withNSString_, w, strValue)
}

void ASWebViewImpl_WebViewLoadedListener_initWithASIWidget_withNSString_withNSString_(ASWebViewImpl_WebViewLoadedListener *self, id<ASIWidget> w, NSString *strValue, NSString *action) {
  NSObject_init(self);
  self->w_ = w;
  self->strValue_ = strValue;
  self->action_ = action;
}

ASWebViewImpl_WebViewLoadedListener *new_ASWebViewImpl_WebViewLoadedListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) {
  J2OBJC_NEW_IMPL(ASWebViewImpl_WebViewLoadedListener, initWithASIWidget_withNSString_withNSString_, w, strValue, action)
}

ASWebViewImpl_WebViewLoadedListener *create_ASWebViewImpl_WebViewLoadedListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) {
  J2OBJC_CREATE_IMPL(ASWebViewImpl_WebViewLoadedListener, initWithASIWidget_withNSString_withNSString_, w, strValue, action)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASWebViewImpl_WebViewLoadedListener)

@implementation ASWebViewImpl_WebViewErrorListener

- (NSString *)getAction {
  return action_;
}

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue {
  ASWebViewImpl_WebViewErrorListener_initWithASIWidget_withNSString_(self, w, strValue);
  return self;
}

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue
                     withNSString:(NSString *)action {
  ASWebViewImpl_WebViewErrorListener_initWithASIWidget_withNSString_withNSString_(self, w, strValue, action);
  return self;
}

- (void)onReceivedErrorWithADView:(ADView *)view
                     withNSString:(NSString *)error {
  if (action_ == nil || [action_ isEqual:@"onReceivedError"]) {
    [((id<ASIWidget>) nil_chk(w_)) syncModelFromUiToPojoWithNSString:@"onReceivedError"];
    id<JavaUtilMap> obj = [self getOnReceivedErrorEventObjWithADView:view withNSString:error];
    NSString *commandName = (NSString *) cast_chk([((id<JavaUtilMap>) nil_chk(obj)) getWithId:ASEventExpressionParser_KEY_COMMAND_NAME], [NSString class]);
    NSString *commandType = (NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_COMMAND_TYPE], [NSString class]);
    switch (JreIndexOfStr(commandType, (id[]){ @"+" }, 1)) {
      case 0:
      if (ASEventCommandFactory_hasCommandWithNSString_(commandName)) {
        (void) [((id<ASEventCommand>) nil_chk(ASEventCommandFactory_getCommandWithNSString_(commandName))) executeCommandWithASIWidget:w_ withJavaUtilMap:obj withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ view, error } count:2 type:NSObject_class_()]];
      }
      break;
      default:
      break;
    }
    if ([obj containsKeyWithId:@"refreshUiFromModel"]) {
      id widgets = [obj removeWithId:@"refreshUiFromModel"];
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, widgets, true);
    }
    if ([((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds] != nil) {
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, [((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds], true);
    }
    if (strValue_ != nil && ![strValue_ java_isEmpty] && ![((NSString *) nil_chk([((NSString *) nil_chk(strValue_)) java_trim])) java_hasPrefix:@"+"]) {
      id<ASIActivity> activity = [((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getRootActivity];
      if (activity != nil) {
        [activity sendEventMessageWithJavaUtilMap:obj];
      }
    }
  }
  return;
}

- (id<JavaUtilMap>)getOnReceivedErrorEventObjWithADView:(ADView *)view
                                           withNSString:(NSString *)error {
  id<JavaUtilMap> obj = ASPluginInvoker_getJSONCompatMap();
  (void) [((id<JavaUtilMap>) nil_chk(obj)) putWithId:@"action" withId:@"action"];
  (void) [obj putWithId:@"eventType" withId:@"receivederror"];
  (void) [obj putWithId:@"fragmentId" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getFragmentId]];
  (void) [obj putWithId:@"actionUrl" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getActionUrl]];
  if ([((id<ASIWidget>) nil_chk(w_)) getComponentId] != nil) {
    (void) [obj putWithId:@"componentId" withId:[((id<ASIWidget>) nil_chk(w_)) getComponentId]];
  }
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"id", [((id<ASIWidget>) nil_chk(w_)) getId]);
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"error", error);
  (void) ASEventExpressionParser_parseEventExpressionWithNSString_withJavaUtilMap_(strValue_, obj);
  [((id<ASIWidget>) nil_chk(w_)) updateModelToEventMapWithJavaUtilMap:obj withNSString:@"onReceivedError" withNSString:(NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_EVENT_ARGS], [NSString class])];
  return obj;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, 4, 3, -1, 5, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getAction);
  methods[1].selector = @selector(initWithASIWidget:withNSString:);
  methods[2].selector = @selector(initWithASIWidget:withNSString:withNSString:);
  methods[3].selector = @selector(onReceivedErrorWithADView:withNSString:);
  methods[4].selector = @selector(getOnReceivedErrorEventObjWithADView:withNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "w_", "LASIWidget;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "view_", "LADView;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "strValue_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "action_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASIWidget;LNSString;", "LASIWidget;LNSString;LNSString;", "onReceivedError", "LADView;LNSString;", "getOnReceivedErrorEventObj", "(Lr/android/view/View;Ljava/lang/String;)Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", "LASWebViewImpl;" };
  static const J2ObjcClassInfo _ASWebViewImpl_WebViewErrorListener = { "WebViewErrorListener", "com.ashera.layout", ptrTable, methods, fields, 7, 0xa, 5, 4, 6, -1, -1, -1, -1 };
  return &_ASWebViewImpl_WebViewErrorListener;
}

@end

void ASWebViewImpl_WebViewErrorListener_initWithASIWidget_withNSString_(ASWebViewImpl_WebViewErrorListener *self, id<ASIWidget> w, NSString *strValue) {
  NSObject_init(self);
  self->w_ = w;
  self->strValue_ = strValue;
}

ASWebViewImpl_WebViewErrorListener *new_ASWebViewImpl_WebViewErrorListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) {
  J2OBJC_NEW_IMPL(ASWebViewImpl_WebViewErrorListener, initWithASIWidget_withNSString_, w, strValue)
}

ASWebViewImpl_WebViewErrorListener *create_ASWebViewImpl_WebViewErrorListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) {
  J2OBJC_CREATE_IMPL(ASWebViewImpl_WebViewErrorListener, initWithASIWidget_withNSString_, w, strValue)
}

void ASWebViewImpl_WebViewErrorListener_initWithASIWidget_withNSString_withNSString_(ASWebViewImpl_WebViewErrorListener *self, id<ASIWidget> w, NSString *strValue, NSString *action) {
  NSObject_init(self);
  self->w_ = w;
  self->strValue_ = strValue;
  self->action_ = action;
}

ASWebViewImpl_WebViewErrorListener *new_ASWebViewImpl_WebViewErrorListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) {
  J2OBJC_NEW_IMPL(ASWebViewImpl_WebViewErrorListener, initWithASIWidget_withNSString_withNSString_, w, strValue, action)
}

ASWebViewImpl_WebViewErrorListener *create_ASWebViewImpl_WebViewErrorListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) {
  J2OBJC_CREATE_IMPL(ASWebViewImpl_WebViewErrorListener, initWithASIWidget_withNSString_withNSString_, w, strValue, action)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASWebViewImpl_WebViewErrorListener)

@implementation ASWebViewImpl_WebViewCommandBuilder

- (instancetype)initWithASWebViewImpl:(ASWebViewImpl *)outer$ {
  ASWebViewImpl_WebViewCommandBuilder_initWithASWebViewImpl_(self, outer$);
  return self;
}

- (ASWebViewImpl_WebViewCommandBuilder *)executeWithBoolean:(jboolean)setter {
  if (setter) {
    [this$0_ executeCommandWithJavaUtilMap:command_ withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_SETTER_METHOD];
    [((id<ASIFragment>) nil_chk([this$0_ getFragment])) remeasure];
  }
  [this$0_ executeCommandWithJavaUtilMap:command_ withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_GETTER_METHOD];
  return self;
}

- (ASWebViewImpl_WebViewCommandBuilder *)setOnPageStartedWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"onPageStarted"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASWebViewImpl_WebViewCommandBuilder *)setOnPageFinishedWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"onPageFinished"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASWebViewImpl_WebViewCommandBuilder *)setOnReceivedErrorWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"onReceivedError"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASWebViewImpl_WebViewCommandBuilder *)loadUrlWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"loadUrl"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LASWebViewImpl_WebViewCommandBuilder;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LASWebViewImpl_WebViewCommandBuilder;", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LASWebViewImpl_WebViewCommandBuilder;", 0x1, 5, 4, -1, -1, -1, -1 },
    { NULL, "LASWebViewImpl_WebViewCommandBuilder;", 0x1, 6, 4, -1, -1, -1, -1 },
    { NULL, "LASWebViewImpl_WebViewCommandBuilder;", 0x1, 7, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASWebViewImpl:);
  methods[1].selector = @selector(executeWithBoolean:);
  methods[2].selector = @selector(setOnPageStartedWithNSString:);
  methods[3].selector = @selector(setOnPageFinishedWithNSString:);
  methods[4].selector = @selector(setOnReceivedErrorWithNSString:);
  methods[5].selector = @selector(loadUrlWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASWebViewImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASWebViewImpl;", "execute", "Z", "setOnPageStarted", "LNSString;", "setOnPageFinished", "setOnReceivedError", "loadUrl", "Lcom/ashera/layout/ViewImpl$ViewCommandBuilder<Lcom/ashera/layout/WebViewImpl$WebViewCommandBuilder;>;" };
  static const J2ObjcClassInfo _ASWebViewImpl_WebViewCommandBuilder = { "WebViewCommandBuilder", "com.ashera.layout", ptrTable, methods, fields, 7, 0x1, 6, 1, 0, -1, -1, 8, -1 };
  return &_ASWebViewImpl_WebViewCommandBuilder;
}

@end

void ASWebViewImpl_WebViewCommandBuilder_initWithASWebViewImpl_(ASWebViewImpl_WebViewCommandBuilder *self, ASWebViewImpl *outer$) {
  self->this$0_ = outer$;
  ASViewImpl_ViewCommandBuilder_init(self);
}

ASWebViewImpl_WebViewCommandBuilder *new_ASWebViewImpl_WebViewCommandBuilder_initWithASWebViewImpl_(ASWebViewImpl *outer$) {
  J2OBJC_NEW_IMPL(ASWebViewImpl_WebViewCommandBuilder, initWithASWebViewImpl_, outer$)
}

ASWebViewImpl_WebViewCommandBuilder *create_ASWebViewImpl_WebViewCommandBuilder_initWithASWebViewImpl_(ASWebViewImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASWebViewImpl_WebViewCommandBuilder, initWithASWebViewImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASWebViewImpl_WebViewCommandBuilder)

@implementation ASWebViewImpl_WebViewBean

- (instancetype)initWithASWebViewImpl:(ASWebViewImpl *)outer$ {
  ASWebViewImpl_WebViewBean_initWithASWebViewImpl_(self, outer$);
  return self;
}

- (void)setOnPageStartedWithNSString:(NSString *)value {
  (void) [((ASWebViewImpl_WebViewCommandBuilder *) nil_chk([((ASWebViewImpl_WebViewCommandBuilder *) nil_chk([((ASWebViewImpl_WebViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setOnPageStartedWithNSString:value])) executeWithBoolean:true];
}

- (void)setOnPageFinishedWithNSString:(NSString *)value {
  (void) [((ASWebViewImpl_WebViewCommandBuilder *) nil_chk([((ASWebViewImpl_WebViewCommandBuilder *) nil_chk([((ASWebViewImpl_WebViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setOnPageFinishedWithNSString:value])) executeWithBoolean:true];
}

- (void)setOnReceivedErrorWithNSString:(NSString *)value {
  (void) [((ASWebViewImpl_WebViewCommandBuilder *) nil_chk([((ASWebViewImpl_WebViewCommandBuilder *) nil_chk([((ASWebViewImpl_WebViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setOnReceivedErrorWithNSString:value])) executeWithBoolean:true];
}

- (void)loadUrlWithNSString:(NSString *)value {
  (void) [((ASWebViewImpl_WebViewCommandBuilder *) nil_chk([((ASWebViewImpl_WebViewCommandBuilder *) nil_chk([((ASWebViewImpl_WebViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) loadUrlWithNSString:value])) executeWithBoolean:true];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASWebViewImpl:);
  methods[1].selector = @selector(setOnPageStartedWithNSString:);
  methods[2].selector = @selector(setOnPageFinishedWithNSString:);
  methods[3].selector = @selector(setOnReceivedErrorWithNSString:);
  methods[4].selector = @selector(loadUrlWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASWebViewImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASWebViewImpl;", "setOnPageStarted", "LNSString;", "setOnPageFinished", "setOnReceivedError", "loadUrl" };
  static const J2ObjcClassInfo _ASWebViewImpl_WebViewBean = { "WebViewBean", "com.ashera.layout", ptrTable, methods, fields, 7, 0x1, 5, 1, 0, -1, -1, -1, -1 };
  return &_ASWebViewImpl_WebViewBean;
}

@end

void ASWebViewImpl_WebViewBean_initWithASWebViewImpl_(ASWebViewImpl_WebViewBean *self, ASWebViewImpl *outer$) {
  self->this$0_ = outer$;
  ASViewImpl_ViewBean_initWithASIWidget_(self, outer$);
}

ASWebViewImpl_WebViewBean *new_ASWebViewImpl_WebViewBean_initWithASWebViewImpl_(ASWebViewImpl *outer$) {
  J2OBJC_NEW_IMPL(ASWebViewImpl_WebViewBean, initWithASWebViewImpl_, outer$)
}

ASWebViewImpl_WebViewBean *create_ASWebViewImpl_WebViewBean_initWithASWebViewImpl_(ASWebViewImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASWebViewImpl_WebViewBean, initWithASWebViewImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASWebViewImpl_WebViewBean)
