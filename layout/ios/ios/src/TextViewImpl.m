//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-ios-widgets\ios_widget_library\src\main\java\com\ashera\layout\TextViewImpl.java
//

#define J2OBJC_IMPORTED_BY_JAVA_IMPLEMENTATION 1




#include "AbstractBitFlagConverter.h"
#include "AbstractEnumToIntConverter.h"
#include "AttributeCommand.h"
#include "AttributedString.h"
#include "BaseMeasurableView.h"
#include "BaseWidget.h"
#include "Color.h"
#include "ColorStateList.h"
#include "CommonConverters.h"
#include "ConverterFactory.h"
#include "Drawable.h"
#include "Event.h"
#include "EventBus.h"
#include "EventBusHandler.h"
#include "FontDescriptor.h"
#include "FontMetricsDescriptor.h"
#include "GravityConverter.h"
#include "HasWidgets.h"
#include "Html.h"
#include "IActivity.h"
#include "IConverter.h"
#include "IFragment.h"
#include "ILifeCycleDecorator.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "IWidget.h"
#include "IWidgetLifeCycleListener.h"
#include "J2ObjC_source.h"
#include "Layout.h"
#include "LayoutNativeVars.h"
#include "MarqueeCommandConverter.h"
#include "MeasureEvent.h"
#include "OnLayoutEvent.h"
#include "PluginInvoker.h"
#include "Rect.h"
#include "TextDirectionHeuristic.h"
#include "TextView.h"
#include "TextViewImpl.h"
#include "View.h"
#include "ViewImpl.h"
#include "WidgetAttribute.h"
#include "WidgetFactory.h"
#include "java/lang/Boolean.h"
#include "java/lang/Character.h"
#include "java/lang/Double.h"
#include "java/lang/Float.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/Runnable.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Locale.h"
#include "java/util/Map.h"

#include "java/lang/Integer.h"
#include "java/lang/Float.h"
#include "java/lang/Boolean.h"
#include <UIKit/UIKit.h>
#include "HasLifeCycleDecorators.h"

#include "ASUILabel.h"


@class ASTextViewImpl_DellocHandler;
@class ASTextViewImpl_MarqueeTask;
@class NSString;


#pragma clang diagnostic error "-Wreturn-type"
#pragma clang diagnostic ignored "-Wswitch"


#pragma clang diagnostic ignored "-Wprotocol"

@interface ASTextViewImpl () {
 @public
  ASTextViewImpl_PostMeasureHandler *postMeasureHandler_;
  NSString *POST_MEASURE_EVENT_;
  bool html_;
  bool escapeHtml_;
  id<JavaUtilMap> htmlConfig_;
  id<JavaUtilMap> fontDescriptors_;
  ASTextViewImpl_MarqueeTask *marqueeTask_;
  int32_t marqueeRepeatLimit_;
  ASMarqueeCommandConverter *marqueeCommandConverter_;
  int32_t autoSizeMin_;
  int32_t autoSizeMax_;
  int32_t autoSizeGranular_;
  NSString *ellipsize_;
  ADColorStateList *drawableTint_;
  id timer_;
  bool isDisposed_;
  ASTextViewImpl_DellocHandler *dellocHandler_;
}

- (void)setWidgetOnNativeClass;

- (void)setGravityWithId:(id)objValue;

- (void)updateTextAlignment;

- (id)getGravity;

- (void)setDrawableIconSizeWithId:(id)objValue;

- (id)getMinHeight;

- (id)getMinWidth;

- (void)setEmsWithId:(id)objValue;

- (void)setMinEmsWithId:(id)objValue;

- (void)setMaxEmsWithId:(id)objValue;

- (void)setWidthWithId:(id)objValue;

- (void)setHeightWithId:(id)objValue;

- (void)setMaxLinesWithId:(id)objValue;

- (void)setLinesWithId:(id)objValue;

- (void)setMinLinesWithId:(id)objValue;

- (void)setMaxHeightWithId:(id)objValue;

- (void)setMaxWidthWithId:(id)objValue;

- (void)setMinHeightWithId:(id)objValue;

- (void)setMinWidthWithId:(id)objValue;

- (id)getWidth;

- (int32_t)getHeight;

- (int32_t)getAutoSizeTextTypeWithADTextView:(ADTextView *)measurableView;

- (void)setAutoSizeTextTypeInternalWithInt:(int32_t)autoTextType;

- (void)setAutoSizePresetSizesWithId:(id)objValue;

- (void)addAutoResizeListener;

- (void)removeResizeListener;

- (void)setMaxLengthWithId:(id)objValue;

- (void)setMyTextWithId:(id)objValue;

- (void)setTextAllCapsWithId:(id)objValue;

- (void)initHtmlWithJavaUtilMap:(id<JavaUtilMap>)params OBJC_METHOD_FAMILY_NONE;

- (void)setTypeFaceWithId:(id)objValue
             withNSString:(NSString *)strValue;

- (void)setFontFamilyWithId:(id)objValue
               withNSString:(NSString *)strValue;

- (void)setTextStyleWithId:(id)objValue;

- (int32_t)calcNumberOfWhiteSpaces;

- (void)cancelTimer;

- (void)startTimer;

- (id)getMarqueeRepeatLimit;

- (void)setMarqueeRepeatLimitWithId:(id)objValue;

- (void)startOrStopMarqueeWithId:(id)objValue;

- (int32_t)getLabelWidth;

- (bool)isLabelMeasured;

- (void)setPasswordWithId:(id)objValue;

- (void)setFirstBaselineToTopHeightWithId:(id)objValue;

- (bool)getIncludeFontPadding;

- (id)getFirstBaselineToTopHeight;

- (void)setLastBaselineToBottomHeightWithId:(id)objValue;

- (id)getLastBaselineToBottomHeight;

- (void)setAutoSizeStepGranularityWithId:(id)objValue;

- (void)setAutoMinTextSizeWithId:(id)objValue;

- (void)setAutoMaxTextSizeWithId:(id)objValue;

- (void)setAutoSizeTextTypeWithId:(id)objValue;

- (id)getAutoSizeStepGranularity;

- (id)getAutoMinTextSize;

- (id)getAutoMaxTextSize;

- (id)getAutoSizeTextType;

- (void)setTextFormatWithId:(id)objValue;

- (void)createLabelWithJavaUtilMap:(id<JavaUtilMap>)params
                    withADTextView:(ADTextView *)measurableView;

- (void)nativeCreateWithJavaUtilMap:(id<JavaUtilMap>)params;

- (void)handleHtmlTextWithNSString:(NSString *)text;

- (void)nativeSetTextWithNSString:(NSString *)text;

- (void)nativeSetHtmlTextWithId:(id)text;

- (id)getMyText;

- (id)getPaddingTop;

- (id)getPaddingEnd;

- (id)getPaddingStart;

- (id)getPaddingLeft;

- (id)getPaddingRight;

- (id)getPaddingBottom;

- (void)setPaddingVerticalWithId:(id)objValue;

- (void)setPaddingHorizontalWithId:(id)objValue;

- (void)setPaddingEndWithId:(id)objValue;

- (void)setPaddingStartWithId:(id)objValue;

- (id)getTextSize;

- (void)setMyTextSizeWithId:(id)objValue;

- (void)nativeSetTextSizeWithInt:(int32_t)value;

- (void)setVerticalAligmentCenter;

- (void)setVerticalAligmentBottom;

- (void)setVerticalAligmentTop;

- (void)setHorizontalAligmentCenter;

- (void)setHorizontalAligmentRight;

- (void)setHorizontalAligmentRightInternal;

- (void)setHorizontalAligmentLeft;

- (void)setHorizontalAligmentLeftInternal;

- (int32_t)getTextAlignment;

- (void)nativeSetVerticalAligmentBottom;

- (void)nativeSetVerticalAligmentTop;

- (void)nativeSetVerticalAligmentCenter;

- (void)addMinMaxListener;

- (int32_t)getLineHeight;

- (int32_t)getBorderWidth;

- (id)getEllipsize;

- (void)setEllipsizeWithId:(id)objValue
              withNSString:(NSString *)strValue;

- (JavaLangInteger *)nativeGetLinBreakMode;

- (void)nativeSetLineBreakModeWithInt:(int32_t)lineBreakMode;

- (void)setJustificationModeWithId:(id)objValue
                      withNSString:(NSString *)strValue;

- (void)nativeSetTextAligmentWithInt:(int32_t)textAlignment;

- (id)getJustificationMode;

- (JavaLangInteger *)nativeGetTextAligment;

- (void)setShadowDyWithJavaLangFloat:(JavaLangFloat *)objValue
                        withNSString:(NSString *)strValue;

- (void)setShadowDxWithJavaLangFloat:(JavaLangFloat *)objValue
                        withNSString:(NSString *)strValue;

- (id)getShadowDy;

- (id)getShadowDx;

- (void)setSingleLineWithId:(id)objValue;

- (id)getSingleLine;

- (void)setEnabledWithId:(id)objValue;

- (int32_t)nativeGetFontSize;

- (int32_t)nativeGetFontStyle;

- (void)nativeSetCustomFontWithInt:(int32_t)height
              withASFontDescriptor:(ASFontDescriptor *)fontDescriptor;

- (void)nativeSetFontStyleWithInt:(int32_t)style;

- (void)setDrawablePaddingWithId:(id)objValue;

- (void)setDrawableBottomWithId:(id)objValue;

- (void)setDrawableTopWithId:(id)objValue;

- (void)setDrawableRightWithNSString:(NSString *)originalAttr
                              withId:(id)objValue;

- (void)setDrawableRightInternalWithNSString:(NSString *)originalAttr
                                      withId:(id)objValue;

- (void)setDrawableLeftWithNSString:(NSString *)originalAttr
                             withId:(id)objValue;

- (void)setDrawableLeftInternalWithNSString:(NSString *)originalAttr
                                     withId:(id)objValue;

- (int32_t)getImageHeightWithId:(id)objValue;

- (int32_t)getImageWidthWithId:(id)objValue;

- (id)getDrawablePadding;

- (void)setDrawableTintModeWithId:(id)value;

- (void)setDrawableTintWithId:(id)objValue;

- (void)setScrollHorizontallyWithId:(id)objValue;

- (bool)canMarquee;

- (void)cancelNativeTimer;

- (bool)isDisposed;

- (void)addDeallocHandler;

- (void)schedule;

- (void)executeOnMainThreadWithJavaLangRunnable:(id<JavaLangRunnable>)runnable;

- (void)setTextColorWithId:(id)objValue;

- (id)getTextColorState;

- (void)drawableStateChangeWithNSString:(NSString *)type
                         withADDrawable:(ADDrawable *)dr;

- (void)setHintColorWithInt:(int32_t)currentHintTextColor;

- (void)syncPlaceholderLabel;

- (int32_t)nativeGetBaseLine;

- (id)getFont;

- (void)setTextColorLinkWithADColorStateList:(ADColorStateList *)linkTextColors;

@end

J2OBJC_FIELD_SETTER(ASTextViewImpl, postMeasureHandler_, ASTextViewImpl_PostMeasureHandler *)
J2OBJC_FIELD_SETTER(ASTextViewImpl, POST_MEASURE_EVENT_, NSString *)
J2OBJC_FIELD_SETTER(ASTextViewImpl, htmlConfig_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(ASTextViewImpl, fontDescriptors_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(ASTextViewImpl, marqueeTask_, ASTextViewImpl_MarqueeTask *)
J2OBJC_FIELD_SETTER(ASTextViewImpl, marqueeCommandConverter_, ASMarqueeCommandConverter *)
J2OBJC_FIELD_SETTER(ASTextViewImpl, ellipsize_, NSString *)
J2OBJC_FIELD_SETTER(ASTextViewImpl, drawableTint_, ADColorStateList *)
J2OBJC_FIELD_SETTER(ASTextViewImpl, timer_, id)
J2OBJC_FIELD_SETTER(ASTextViewImpl, dellocHandler_, ASTextViewImpl_DellocHandler *)

inline int32_t ASTextViewImpl_get_TEXT_ALIGN_CENTER(void);
#define ASTextViewImpl_TEXT_ALIGN_CENTER 2
J2OBJC_STATIC_FIELD_CONSTANT(ASTextViewImpl, TEXT_ALIGN_CENTER, int32_t)

inline int32_t ASTextViewImpl_get_TEXT_ALIGN_LEFT(void);
#define ASTextViewImpl_TEXT_ALIGN_LEFT 0
J2OBJC_STATIC_FIELD_CONSTANT(ASTextViewImpl, TEXT_ALIGN_LEFT, int32_t)

inline int32_t ASTextViewImpl_get_TEXT_ALIGN_RIGHT(void);
#define ASTextViewImpl_TEXT_ALIGN_RIGHT 1
J2OBJC_STATIC_FIELD_CONSTANT(ASTextViewImpl, TEXT_ALIGN_RIGHT, int32_t)

inline int32_t ASTextViewImpl_get_ITALIC_FONT_TRAIT(void);
inline int32_t ASTextViewImpl_set_ITALIC_FONT_TRAIT(int32_t value);
inline int32_t *ASTextViewImpl_getRef_ITALIC_FONT_TRAIT(void);
static int32_t ASTextViewImpl_ITALIC_FONT_TRAIT;
J2OBJC_STATIC_FIELD_PRIMITIVE(ASTextViewImpl, ITALIC_FONT_TRAIT, int32_t)

inline int32_t ASTextViewImpl_get_BOLD_FONT_TRAIT(void);
inline int32_t ASTextViewImpl_set_BOLD_FONT_TRAIT(int32_t value);
inline int32_t *ASTextViewImpl_getRef_BOLD_FONT_TRAIT(void);
static int32_t ASTextViewImpl_BOLD_FONT_TRAIT;
J2OBJC_STATIC_FIELD_PRIMITIVE(ASTextViewImpl, BOLD_FONT_TRAIT, int32_t)

inline int32_t ASTextViewImpl_get_NORMAL_FONT_TRAIT(void);
#define ASTextViewImpl_NORMAL_FONT_TRAIT 0
J2OBJC_STATIC_FIELD_CONSTANT(ASTextViewImpl, NORMAL_FONT_TRAIT, int32_t)

__attribute__((unused)) static void ASTextViewImpl_setWidgetOnNativeClass(ASTextViewImpl *self);

__attribute__((unused)) static void ASTextViewImpl_setGravityWithId_(ASTextViewImpl *self, id objValue);

__attribute__((unused)) static void ASTextViewImpl_updateTextAlignment(ASTextViewImpl *self);

__attribute__((unused)) static id ASTextViewImpl_getGravity(ASTextViewImpl *self);

__attribute__((unused)) static void ASTextViewImpl_setDrawableIconSizeWithId_(ASTextViewImpl *self, id objValue);

__attribute__((unused)) static id ASTextViewImpl_getMinHeight(ASTextViewImpl *self);

__attribute__((unused)) static id ASTextViewImpl_getMinWidth(ASTextViewImpl *self);

__attribute__((unused)) static void ASTextViewImpl_setEmsWithId_(ASTextViewImpl *self, id objValue);

__attribute__((unused)) static void ASTextViewImpl_setMinEmsWithId_(ASTextViewImpl *self, id objValue);

__attribute__((unused)) static void ASTextViewImpl_setMaxEmsWithId_(ASTextViewImpl *self, id objValue);

__attribute__((unused)) static void ASTextViewImpl_setWidthWithId_(ASTextViewImpl *self, id objValue);

__attribute__((unused)) static void ASTextViewImpl_setHeightWithId_(ASTextViewImpl *self, id objValue);

__attribute__((unused)) static void ASTextViewImpl_setMaxLinesWithId_(ASTextViewImpl *self, id objValue);

__attribute__((unused)) static void ASTextViewImpl_setLinesWithId_(ASTextViewImpl *self, id objValue);

__attribute__((unused)) static void ASTextViewImpl_setMinLinesWithId_(ASTextViewImpl *self, id objValue);

__attribute__((unused)) static void ASTextViewImpl_setMaxHeightWithId_(ASTextViewImpl *self, id objValue);

__attribute__((unused)) static void ASTextViewImpl_setMaxWidthWithId_(ASTextViewImpl *self, id objValue);

__attribute__((unused)) static void ASTextViewImpl_setMinHeightWithId_(ASTextViewImpl *self, id objValue);

__attribute__((unused)) static void ASTextViewImpl_setMinWidthWithId_(ASTextViewImpl *self, id objValue);

__attribute__((unused)) static id ASTextViewImpl_getWidth(ASTextViewImpl *self);

__attribute__((unused)) static int32_t ASTextViewImpl_getHeight(ASTextViewImpl *self);

__attribute__((unused)) static int32_t ASTextViewImpl_getAutoSizeTextTypeWithADTextView_(ASTextViewImpl *self, ADTextView *measurableView);

__attribute__((unused)) static void ASTextViewImpl_setAutoSizeTextTypeInternalWithInt_(ASTextViewImpl *self, int32_t autoTextType);

__attribute__((unused)) static void ASTextViewImpl_setAutoSizePresetSizesWithId_(ASTextViewImpl *self, id objValue);

__attribute__((unused)) static void ASTextViewImpl_addAutoResizeListener(ASTextViewImpl *self);

__attribute__((unused)) static void ASTextViewImpl_removeResizeListener(ASTextViewImpl *self);

__attribute__((unused)) static void ASTextViewImpl_setMaxLengthWithId_(ASTextViewImpl *self, id objValue);

__attribute__((unused)) static void ASTextViewImpl_setMyTextWithId_(ASTextViewImpl *self, id objValue);

__attribute__((unused)) static void ASTextViewImpl_setTextAllCapsWithId_(ASTextViewImpl *self, id objValue);

__attribute__((unused)) static void ASTextViewImpl_initHtmlWithJavaUtilMap_(ASTextViewImpl *self, id<JavaUtilMap> params);

__attribute__((unused)) static void ASTextViewImpl_setTypeFaceWithId_withNSString_(ASTextViewImpl *self, id objValue, NSString *strValue);

__attribute__((unused)) static void ASTextViewImpl_setFontFamilyWithId_withNSString_(ASTextViewImpl *self, id objValue, NSString *strValue);

__attribute__((unused)) static void ASTextViewImpl_setTextStyleWithId_(ASTextViewImpl *self, id objValue);

__attribute__((unused)) static int32_t ASTextViewImpl_calcNumberOfWhiteSpaces(ASTextViewImpl *self);

__attribute__((unused)) static void ASTextViewImpl_cancelTimer(ASTextViewImpl *self);

__attribute__((unused)) static void ASTextViewImpl_startTimer(ASTextViewImpl *self);

__attribute__((unused)) static id ASTextViewImpl_getMarqueeRepeatLimit(ASTextViewImpl *self);

__attribute__((unused)) static void ASTextViewImpl_setMarqueeRepeatLimitWithId_(ASTextViewImpl *self, id objValue);

__attribute__((unused)) static void ASTextViewImpl_startOrStopMarqueeWithId_(ASTextViewImpl *self, id objValue);

__attribute__((unused)) static int32_t ASTextViewImpl_getLabelWidth(ASTextViewImpl *self);

__attribute__((unused)) static bool ASTextViewImpl_isLabelMeasured(ASTextViewImpl *self);

__attribute__((unused)) static void ASTextViewImpl_setPasswordWithId_(ASTextViewImpl *self, id objValue);

__attribute__((unused)) static void ASTextViewImpl_setFirstBaselineToTopHeightWithId_(ASTextViewImpl *self, id objValue);

__attribute__((unused)) static bool ASTextViewImpl_getIncludeFontPadding(ASTextViewImpl *self);

__attribute__((unused)) static id ASTextViewImpl_getFirstBaselineToTopHeight(ASTextViewImpl *self);

__attribute__((unused)) static void ASTextViewImpl_setLastBaselineToBottomHeightWithId_(ASTextViewImpl *self, id objValue);

__attribute__((unused)) static id ASTextViewImpl_getLastBaselineToBottomHeight(ASTextViewImpl *self);

__attribute__((unused)) static void ASTextViewImpl_setAutoSizeStepGranularityWithId_(ASTextViewImpl *self, id objValue);

__attribute__((unused)) static void ASTextViewImpl_setAutoMinTextSizeWithId_(ASTextViewImpl *self, id objValue);

__attribute__((unused)) static void ASTextViewImpl_setAutoMaxTextSizeWithId_(ASTextViewImpl *self, id objValue);

__attribute__((unused)) static void ASTextViewImpl_setAutoSizeTextTypeWithId_(ASTextViewImpl *self, id objValue);

__attribute__((unused)) static id ASTextViewImpl_getAutoSizeStepGranularity(ASTextViewImpl *self);

__attribute__((unused)) static id ASTextViewImpl_getAutoMinTextSize(ASTextViewImpl *self);

__attribute__((unused)) static id ASTextViewImpl_getAutoMaxTextSize(ASTextViewImpl *self);

__attribute__((unused)) static id ASTextViewImpl_getAutoSizeTextType(ASTextViewImpl *self);

__attribute__((unused)) static void ASTextViewImpl_setTextFormatWithId_(ASTextViewImpl *self, id objValue);

__attribute__((unused)) static void ASTextViewImpl_createLabelWithJavaUtilMap_withADTextView_(ASTextViewImpl *self, id<JavaUtilMap> params, ADTextView *measurableView);

__attribute__((unused)) static void ASTextViewImpl_nativeCreateWithJavaUtilMap_(ASTextViewImpl *self, id<JavaUtilMap> params);

__attribute__((unused)) static void ASTextViewImpl_handleHtmlTextWithNSString_(ASTextViewImpl *self, NSString *text);

__attribute__((unused)) static void ASTextViewImpl_nativeSetTextWithNSString_(ASTextViewImpl *self, NSString *text);

__attribute__((unused)) static void ASTextViewImpl_nativeSetHtmlTextWithId_(ASTextViewImpl *self, id text);

__attribute__((unused)) static id ASTextViewImpl_getMyText(ASTextViewImpl *self);

__attribute__((unused)) static id ASTextViewImpl_getPaddingTop(ASTextViewImpl *self);

__attribute__((unused)) static id ASTextViewImpl_getPaddingEnd(ASTextViewImpl *self);

__attribute__((unused)) static id ASTextViewImpl_getPaddingStart(ASTextViewImpl *self);

__attribute__((unused)) static id ASTextViewImpl_getPaddingLeft(ASTextViewImpl *self);

__attribute__((unused)) static id ASTextViewImpl_getPaddingRight(ASTextViewImpl *self);

__attribute__((unused)) static id ASTextViewImpl_getPaddingBottom(ASTextViewImpl *self);

__attribute__((unused)) static void ASTextViewImpl_setPaddingVerticalWithId_(ASTextViewImpl *self, id objValue);

__attribute__((unused)) static void ASTextViewImpl_setPaddingHorizontalWithId_(ASTextViewImpl *self, id objValue);

__attribute__((unused)) static void ASTextViewImpl_setPaddingEndWithId_(ASTextViewImpl *self, id objValue);

__attribute__((unused)) static void ASTextViewImpl_setPaddingStartWithId_(ASTextViewImpl *self, id objValue);

__attribute__((unused)) static id ASTextViewImpl_getTextSize(ASTextViewImpl *self);

__attribute__((unused)) static void ASTextViewImpl_setMyTextSizeWithId_(ASTextViewImpl *self, id objValue);

__attribute__((unused)) static void ASTextViewImpl_nativeSetTextSizeWithInt_(ASTextViewImpl *self, int32_t value);

__attribute__((unused)) static void ASTextViewImpl_setVerticalAligmentCenter(ASTextViewImpl *self);

__attribute__((unused)) static void ASTextViewImpl_setVerticalAligmentBottom(ASTextViewImpl *self);

__attribute__((unused)) static void ASTextViewImpl_setVerticalAligmentTop(ASTextViewImpl *self);

__attribute__((unused)) static void ASTextViewImpl_setHorizontalAligmentCenter(ASTextViewImpl *self);

__attribute__((unused)) static void ASTextViewImpl_setHorizontalAligmentRight(ASTextViewImpl *self);

__attribute__((unused)) static void ASTextViewImpl_setHorizontalAligmentRightInternal(ASTextViewImpl *self);

__attribute__((unused)) static void ASTextViewImpl_setHorizontalAligmentLeft(ASTextViewImpl *self);

__attribute__((unused)) static void ASTextViewImpl_setHorizontalAligmentLeftInternal(ASTextViewImpl *self);

__attribute__((unused)) static int32_t ASTextViewImpl_getTextAlignment(ASTextViewImpl *self);

__attribute__((unused)) static void ASTextViewImpl_nativeSetVerticalAligmentBottom(ASTextViewImpl *self);

__attribute__((unused)) static void ASTextViewImpl_nativeSetVerticalAligmentTop(ASTextViewImpl *self);

__attribute__((unused)) static void ASTextViewImpl_nativeSetVerticalAligmentCenter(ASTextViewImpl *self);

__attribute__((unused)) static void ASTextViewImpl_addMinMaxListener(ASTextViewImpl *self);

__attribute__((unused)) static int32_t ASTextViewImpl_getLineHeight(ASTextViewImpl *self);

__attribute__((unused)) static int32_t ASTextViewImpl_getBorderWidth(ASTextViewImpl *self);

__attribute__((unused)) static id ASTextViewImpl_getEllipsize(ASTextViewImpl *self);

__attribute__((unused)) static void ASTextViewImpl_setEllipsizeWithId_withNSString_(ASTextViewImpl *self, id objValue, NSString *strValue);

__attribute__((unused)) static JavaLangInteger *ASTextViewImpl_nativeGetLinBreakMode(ASTextViewImpl *self);

__attribute__((unused)) static void ASTextViewImpl_nativeSetLineBreakModeWithInt_(ASTextViewImpl *self, int32_t lineBreakMode);

__attribute__((unused)) static void ASTextViewImpl_setJustificationModeWithId_withNSString_(ASTextViewImpl *self, id objValue, NSString *strValue);

__attribute__((unused)) static void ASTextViewImpl_nativeSetTextAligmentWithInt_(ASTextViewImpl *self, int32_t textAlignment);

__attribute__((unused)) static id ASTextViewImpl_getJustificationMode(ASTextViewImpl *self);

__attribute__((unused)) static JavaLangInteger *ASTextViewImpl_nativeGetTextAligment(ASTextViewImpl *self);

__attribute__((unused)) static void ASTextViewImpl_setShadowDyWithJavaLangFloat_withNSString_(ASTextViewImpl *self, JavaLangFloat *objValue, NSString *strValue);

__attribute__((unused)) static void ASTextViewImpl_setShadowDxWithJavaLangFloat_withNSString_(ASTextViewImpl *self, JavaLangFloat *objValue, NSString *strValue);

__attribute__((unused)) static id ASTextViewImpl_getShadowDy(ASTextViewImpl *self);

__attribute__((unused)) static id ASTextViewImpl_getShadowDx(ASTextViewImpl *self);

__attribute__((unused)) static void ASTextViewImpl_setSingleLineWithId_(ASTextViewImpl *self, id objValue);

__attribute__((unused)) static id ASTextViewImpl_getSingleLine(ASTextViewImpl *self);

__attribute__((unused)) static void ASTextViewImpl_setEnabledWithId_(ASTextViewImpl *self, id objValue);

__attribute__((unused)) static int32_t ASTextViewImpl_nativeGetFontSize(ASTextViewImpl *self);

__attribute__((unused)) static int32_t ASTextViewImpl_nativeGetFontStyle(ASTextViewImpl *self);

__attribute__((unused)) static void ASTextViewImpl_nativeSetCustomFontWithInt_withASFontDescriptor_(ASTextViewImpl *self, int32_t height, ASFontDescriptor *fontDescriptor);

__attribute__((unused)) static void ASTextViewImpl_nativeSetFontStyleWithInt_(ASTextViewImpl *self, int32_t style);

__attribute__((unused)) static void ASTextViewImpl_setDrawablePaddingWithId_(ASTextViewImpl *self, id objValue);

__attribute__((unused)) static void ASTextViewImpl_setDrawableBottomWithId_(ASTextViewImpl *self, id objValue);

__attribute__((unused)) static void ASTextViewImpl_setDrawableTopWithId_(ASTextViewImpl *self, id objValue);

__attribute__((unused)) static void ASTextViewImpl_setDrawableRightWithNSString_withId_(ASTextViewImpl *self, NSString *originalAttr, id objValue);

__attribute__((unused)) static void ASTextViewImpl_setDrawableRightInternalWithNSString_withId_(ASTextViewImpl *self, NSString *originalAttr, id objValue);

__attribute__((unused)) static void ASTextViewImpl_setDrawableLeftWithNSString_withId_(ASTextViewImpl *self, NSString *originalAttr, id objValue);

__attribute__((unused)) static void ASTextViewImpl_setDrawableLeftInternalWithNSString_withId_(ASTextViewImpl *self, NSString *originalAttr, id objValue);

__attribute__((unused)) static int32_t ASTextViewImpl_getImageHeightWithId_(ASTextViewImpl *self, id objValue);

__attribute__((unused)) static int32_t ASTextViewImpl_getImageWidthWithId_(ASTextViewImpl *self, id objValue);

__attribute__((unused)) static id ASTextViewImpl_getDrawablePadding(ASTextViewImpl *self);

__attribute__((unused)) static void ASTextViewImpl_setDrawableTintModeWithId_(ASTextViewImpl *self, id value);

__attribute__((unused)) static void ASTextViewImpl_setDrawableTintWithId_(ASTextViewImpl *self, id objValue);

__attribute__((unused)) static void ASTextViewImpl_setScrollHorizontallyWithId_(ASTextViewImpl *self, id objValue);

__attribute__((unused)) static bool ASTextViewImpl_canMarquee(ASTextViewImpl *self);

__attribute__((unused)) static void ASTextViewImpl_cancelNativeTimer(ASTextViewImpl *self);

__attribute__((unused)) static bool ASTextViewImpl_isDisposed(ASTextViewImpl *self);

__attribute__((unused)) static void ASTextViewImpl_addDeallocHandler(ASTextViewImpl *self);

__attribute__((unused)) static void ASTextViewImpl_schedule(ASTextViewImpl *self);

__attribute__((unused)) static void ASTextViewImpl_executeOnMainThreadWithJavaLangRunnable_(ASTextViewImpl *self, id<JavaLangRunnable> runnable);

__attribute__((unused)) static void ASTextViewImpl_setTextColorWithId_(ASTextViewImpl *self, id objValue);

__attribute__((unused)) static id ASTextViewImpl_getTextColorState(ASTextViewImpl *self);

__attribute__((unused)) static void ASTextViewImpl_drawableStateChangeWithNSString_withADDrawable_(ASTextViewImpl *self, NSString *type, ADDrawable *dr);

__attribute__((unused)) static void ASTextViewImpl_setHintColorWithInt_(ASTextViewImpl *self, int32_t currentHintTextColor);

__attribute__((unused)) static void ASTextViewImpl_syncPlaceholderLabel(ASTextViewImpl *self);

__attribute__((unused)) static int32_t ASTextViewImpl_nativeGetBaseLine(ASTextViewImpl *self);

__attribute__((unused)) static id ASTextViewImpl_getFont(ASTextViewImpl *self);

__attribute__((unused)) static void ASTextViewImpl_setTextColorLinkWithADColorStateList_(ASTextViewImpl *self, ADColorStateList *linkTextColors);

@interface ASTextViewImpl_AutoSizeTextType () {
 @public
  id<JavaUtilMap> mapping_;
}

@end

J2OBJC_FIELD_SETTER(ASTextViewImpl_AutoSizeTextType, mapping_, id<JavaUtilMap>)

@interface ASTextViewImpl_Ellipsize () {
 @public
  id<JavaUtilMap> mapping_;
}

@end

J2OBJC_FIELD_SETTER(ASTextViewImpl_Ellipsize, mapping_, id<JavaUtilMap>)

@interface ASTextViewImpl_MarqueeRepeatLimit () {
 @public
  id<JavaUtilMap> mapping_;
}

@end

J2OBJC_FIELD_SETTER(ASTextViewImpl_MarqueeRepeatLimit, mapping_, id<JavaUtilMap>)

@interface ASTextViewImpl_JustificationMode () {
 @public
  id<JavaUtilMap> mapping_;
}

@end

J2OBJC_FIELD_SETTER(ASTextViewImpl_JustificationMode, mapping_, id<JavaUtilMap>)

@interface ASTextViewImpl_Font () {
 @public
  id<JavaUtilMap> mapping_;
}

@end

J2OBJC_FIELD_SETTER(ASTextViewImpl_Font, mapping_, id<JavaUtilMap>)

@interface ASTextViewImpl_TextStyle () {
 @public
  id<JavaUtilMap> mapping_;
}

@end

J2OBJC_FIELD_SETTER(ASTextViewImpl_TextStyle, mapping_, id<JavaUtilMap>)

@interface ASTextViewImpl_DrawableTintMode () {
 @public
  id<JavaUtilMap> mapping_;
}

@end

J2OBJC_FIELD_SETTER(ASTextViewImpl_DrawableTintMode, mapping_, id<JavaUtilMap>)

@interface ASTextViewImpl_TextViewExt () {
 @public
  WEAK_ ASTextViewImpl *this$0_;
  ASMeasureEvent *measureFinished_;
  ASOnLayoutEvent *onLayoutEvent_;
  id<JavaUtilList> overlays_;
  id<JavaUtilMap> templates_;
}

@end

J2OBJC_FIELD_SETTER(ASTextViewImpl_TextViewExt, measureFinished_, ASMeasureEvent *)
J2OBJC_FIELD_SETTER(ASTextViewImpl_TextViewExt, onLayoutEvent_, ASOnLayoutEvent *)
J2OBJC_FIELD_SETTER(ASTextViewImpl_TextViewExt, overlays_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(ASTextViewImpl_TextViewExt, templates_, id<JavaUtilMap>)

@interface ASTextViewImpl_PostMeasureHandler () {
 @public
  WEAK_ ASTextViewImpl *this$0_;
  bool onlyOnce_;
}

@end

@interface ASTextViewImpl_MarqueeTask : NSObject < JavaLangRunnable > {
 @public
  WEAK_ ASTextViewImpl *this$0_;
  int32_t slideLength_;
  int32_t cycles_;
  bool cancel_;
  NSString *direction_;
}

- (instancetype)initWithASTextViewImpl:(ASTextViewImpl *)outer$
                          withNSString:(NSString *)direction;

- (void)cancel;

- (void)restart;

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(ASTextViewImpl_MarqueeTask)

J2OBJC_FIELD_SETTER(ASTextViewImpl_MarqueeTask, direction_, NSString *)

__attribute__((unused)) static void ASTextViewImpl_MarqueeTask_initWithASTextViewImpl_withNSString_(ASTextViewImpl_MarqueeTask *self, ASTextViewImpl *outer$, NSString *direction);

__attribute__((unused)) static ASTextViewImpl_MarqueeTask *new_ASTextViewImpl_MarqueeTask_initWithASTextViewImpl_withNSString_(ASTextViewImpl *outer$, NSString *direction) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASTextViewImpl_MarqueeTask *create_ASTextViewImpl_MarqueeTask_initWithASTextViewImpl_withNSString_(ASTextViewImpl *outer$, NSString *direction);

J2OBJC_TYPE_LITERAL_HEADER(ASTextViewImpl_MarqueeTask)


@interface ASTextViewImpl_MarqueeTask_$Lambda$1 : NSObject < JavaLangRunnable > {
 @public
  ASTextViewImpl_MarqueeTask *this$0_;
  int32_t val$numberOfBlankSpaces_;
}

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(ASTextViewImpl_MarqueeTask_$Lambda$1)

__attribute__((unused)) static void ASTextViewImpl_MarqueeTask_$Lambda$1_initWithASTextViewImpl_MarqueeTask_withInt_(ASTextViewImpl_MarqueeTask_$Lambda$1 *self, ASTextViewImpl_MarqueeTask *outer$, int32_t capture$0);

__attribute__((unused)) static ASTextViewImpl_MarqueeTask_$Lambda$1 *new_ASTextViewImpl_MarqueeTask_$Lambda$1_initWithASTextViewImpl_MarqueeTask_withInt_(ASTextViewImpl_MarqueeTask *outer$, int32_t capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASTextViewImpl_MarqueeTask_$Lambda$1 *create_ASTextViewImpl_MarqueeTask_$Lambda$1_initWithASTextViewImpl_MarqueeTask_withInt_(ASTextViewImpl_MarqueeTask *outer$, int32_t capture$0);


@interface ASTextViewImpl_DellocHandler : ASEventBusHandler {
 @public
  WEAK_ ASTextViewImpl *this$0_;
}

- (instancetype)initWithASTextViewImpl:(ASTextViewImpl *)outer$
                          withNSString:(NSString *)type;

- (void)doPerformWithId:(id)payload;

@end

J2OBJC_EMPTY_STATIC_INIT(ASTextViewImpl_DellocHandler)

__attribute__((unused)) static void ASTextViewImpl_DellocHandler_initWithASTextViewImpl_withNSString_(ASTextViewImpl_DellocHandler *self, ASTextViewImpl *outer$, NSString *type);

__attribute__((unused)) static ASTextViewImpl_DellocHandler *new_ASTextViewImpl_DellocHandler_initWithASTextViewImpl_withNSString_(ASTextViewImpl *outer$, NSString *type) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASTextViewImpl_DellocHandler *create_ASTextViewImpl_DellocHandler_initWithASTextViewImpl_withNSString_(ASTextViewImpl *outer$, NSString *type);

J2OBJC_TYPE_LITERAL_HEADER(ASTextViewImpl_DellocHandler)


J2OBJC_INITIALIZED_DEFN(ASTextViewImpl)

NSString *ASTextViewImpl_LOCAL_NAME = @"TextView";
NSString *ASTextViewImpl_GROUP_NAME = @"TextView";

@implementation ASTextViewImpl

@synthesize uiView = uiView_;

- (void)loadAttributesWithNSString:(NSString *)attributeName {
  ASViewImpl_register__WithNSString_(attributeName);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosText"])) withTypeWithNSString:@"resourcestring"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosTextColor"])) withTypeWithNSString:@"color"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosIsEnabled"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"enabled"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosAdjustsFontSizeToFitWidth"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosAllowsDefaultTighteningForTruncation"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosMinimumScaleFactor"])) withTypeWithNSString:@"float"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosNumberOfLines"])) withTypeWithNSString:@"int"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosHighlightedTextColor"])) withTypeWithNSString:@"color"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"textColorHighlight"])) withTypeWithNSString:@"color"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosIsHighlighted"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosShadowColor"])) withTypeWithNSString:@"color"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"shadowColor"])) withTypeWithNSString:@"color"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosPreferredMaxLayoutWidth"])) withTypeWithNSString:@"float"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosIsUserInteractionEnabled"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"text"])) withTypeWithNSString:@"resourcestring"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"gravity"])) withTypeWithNSString:@"gravity"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"textSize"])) withTypeWithNSString:@"dimensionsp"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"padding"])) withTypeWithNSString:@"dimension"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"paddingBottom"])) withTypeWithNSString:@"dimension"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"paddingRight"])) withTypeWithNSString:@"dimension"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"paddingLeft"])) withTypeWithNSString:@"dimension"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"paddingStart"])) withTypeWithNSString:@"dimension"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"paddingEnd"])) withTypeWithNSString:@"dimension"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"paddingTop"])) withTypeWithNSString:@"dimension"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"paddingHorizontal"])) withTypeWithNSString:@"dimension"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"paddingVertical"])) withTypeWithNSString:@"dimension"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_INVALIDATE]);
  ASConverterFactory_register__WithNSString_withASIConverter_(@"TextView.autoSizeTextType", new_ASTextViewImpl_AutoSizeTextType_init());
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"autoSizeTextType"])) withTypeWithNSString:@"TextView.autoSizeTextType"])) withOrderWithInt:1]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"autoSizeMaxTextSize"])) withTypeWithNSString:@"dimensionsppxint"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"autoSizeMinTextSize"])) withTypeWithNSString:@"dimensionsppxint"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"autoSizeStepGranularity"])) withTypeWithNSString:@"dimensionsppxint"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"autoSizePresetSizes"])) withTypeWithNSString:@"array"])) withArrayTypeWithNSString:@"dimensionsppxint"])) withArrayListToFinalTypeWithNSString:@"listtointarray"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"minLines"])) withTypeWithNSString:@"int"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"lines"])) withTypeWithNSString:@"int"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"maxLines"])) withTypeWithNSString:@"int"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"minWidth"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"minHeight"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"maxWidth"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"maxHeight"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"height"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"width"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"maxEms"])) withTypeWithNSString:@"int"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"minEms"])) withTypeWithNSString:@"int"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"ems"])) withTypeWithNSString:@"int"]);
  ASConverterFactory_register__WithNSString_withASIConverter_(@"TextView.ellipsize", new_ASTextViewImpl_Ellipsize_init());
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"ellipsize"])) withTypeWithNSString:@"TextView.ellipsize"])) withOrderWithInt:100]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"startOrStopMarquee"])) withTypeWithNSString:@"boolean"])) withOrderWithInt:100]);
  ASConverterFactory_register__WithNSString_withASIConverter_(@"TextView.marqueeRepeatLimit", new_ASTextViewImpl_MarqueeRepeatLimit_init());
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"marqueeRepeatLimit"])) withTypeWithNSString:@"TextView.marqueeRepeatLimit"])) withOrderWithInt:100]);
  ASConverterFactory_register__WithNSString_withASIConverter_(@"TextView.justificationMode", new_ASTextViewImpl_JustificationMode_init());
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"justificationMode"])) withTypeWithNSString:@"TextView.justificationMode"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"shadowDx"])) withTypeWithNSString:@"float"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"shadowDy"])) withTypeWithNSString:@"float"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"singleLine"])) withTypeWithNSString:@"boolean"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"editable"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"textAllCaps"])) withTypeWithNSString:@"boolean"])) withOrderWithInt:-1])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"maxLength"])) withTypeWithNSString:@"int"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"password"])) withTypeWithNSString:@"boolean"])) withOrderWithInt:-1]);
  ASConverterFactory_register__WithNSString_withASIConverter_(@"TextView.font", new_ASTextViewImpl_Font_init());
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"typeface"])) withTypeWithNSString:@"TextView.font"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASConverterFactory_register__WithNSString_withASIConverter_(@"TextView.textStyle", new_ASTextViewImpl_TextStyle_init());
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"textStyle"])) withTypeWithNSString:@"TextView.textStyle"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"fontFamily"])) withTypeWithNSString:@"font"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"drawableStart"])) withTypeWithNSString:@"drawable"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT_N_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"drawableEnd"])) withTypeWithNSString:@"drawable"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT_N_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"drawableTop"])) withTypeWithNSString:@"drawable"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT_N_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"drawableBottom"])) withTypeWithNSString:@"drawable"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT_N_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"drawablePadding"])) withTypeWithNSString:@"dimension"])) withOrderWithInt:1])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"drawableTint"])) withTypeWithNSString:@"colorstate"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_INVALIDATE]);
  ASConverterFactory_register__WithNSString_withASIConverter_(@"TextView.drawableTintMode", new_ASTextViewImpl_DrawableTintMode_init());
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"drawableTintMode"])) withTypeWithNSString:@"TextView.drawableTintMode"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"scrollHorizontally"])) withTypeWithNSString:@"boolean"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"firstBaselineToTopHeight"])) withTypeWithNSString:@"dimension"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"lastBaselineToBottomHeight"])) withTypeWithNSString:@"dimension"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"textColor"])) withTypeWithNSString:@"colorstate"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"textFormat"])) withTypeWithNSString:@"resourcestring"])) withOrderWithInt:-1]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"textAppearance"])) withTypeWithNSString:@"string"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT])) withStylePriorityWithJavaLangInteger:JavaLangInteger_valueOfWithInt_(1)]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"drawableIconSize"])) withTypeWithNSString:@"dimension"])) withOrderWithInt:-1])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerConstructorAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"html"])) withTypeWithNSString:@"boolean"]);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASTextViewImpl_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithNSString:(NSString *)localname {
  ASTextViewImpl_initWithNSString_(self, localname);
  return self;
}

- (instancetype)initWithNSString:(NSString *)groupName
                    withNSString:(NSString *)localname {
  ASTextViewImpl_initWithNSString_withNSString_(self, groupName, localname);
  return self;
}

- (IOSClass *)getViewClass {
  return ASTextViewImpl_TextViewExt_class_();
}

- (id<ASIWidget>)newInstance {
  return new_ASTextViewImpl_initWithNSString_withNSString_(groupName_, localName_);
}

- (void)createWithASIFragment:(id<ASIFragment>)fragment
              withJavaUtilMap:(id<JavaUtilMap>)params {
  [super createWithASIFragment:fragment withJavaUtilMap:params];
  measurableView_ = new_ASTextViewImpl_TextViewExt_initWithASTextViewImpl_(self);
  ASTextViewImpl_nativeCreateWithJavaUtilMap_(self, params);
  ASViewImpl_registerCommandConveterWithASIWidget_(self);
  ASTextViewImpl_setWidgetOnNativeClass(self);
}

- (void)setWidgetOnNativeClass {
  ASTextViewImpl_setWidgetOnNativeClass(self);
}

- (void)setAttributeWithASWidgetAttribute:(ASWidgetAttribute *)key
                             withNSString:(NSString *)strValue
                                   withId:(id)objValue
                withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  id nativeWidget = [self asNativeWidget];
  ASViewImpl_setAttributeWithASIWidget_withASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(self, key, strValue, objValue, decorator);
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"iosText", @"iosTextColor", @"enabled", @"iosIsEnabled", @"iosAdjustsFontSizeToFitWidth", @"iosAllowsDefaultTighteningForTruncation", @"iosMinimumScaleFactor", @"iosNumberOfLines", @"textColorHighlight", @"iosHighlightedTextColor", @"iosIsHighlighted", @"shadowColor", @"iosShadowColor", @"iosPreferredMaxLayoutWidth", @"iosIsUserInteractionEnabled", @"text", @"gravity", @"textSize", @"padding", @"paddingBottom", @"paddingRight", @"paddingLeft", @"paddingStart", @"paddingEnd", @"paddingTop", @"paddingHorizontal", @"paddingVertical", @"autoSizeTextType", @"autoSizeMaxTextSize", @"autoSizeMinTextSize", @"autoSizeStepGranularity", @"autoSizePresetSizes", @"minLines", @"lines", @"maxLines", @"minWidth", @"minHeight", @"maxWidth", @"maxHeight", @"height", @"width", @"maxEms", @"minEms", @"ems", @"ellipsize", @"startOrStopMarquee", @"marqueeRepeatLimit", @"justificationMode", @"shadowDx", @"shadowDy", @"singleLine", @"editable", @"textAllCaps", @"maxLength", @"password", @"typeface", @"textStyle", @"fontFamily", @"drawableStart", @"drawableEnd", @"drawableTop", @"drawableBottom", @"drawablePadding", @"drawableTint", @"drawableTintMode", @"scrollHorizontally", @"firstBaselineToTopHeight", @"lastBaselineToBottomHeight", @"textColor", @"textFormat", @"textAppearance", @"drawableIconSize" }, 72)) {
    case 0:
    {
      [self setTextWithId:nativeWidget withId:objValue];
    }
    break;
    case 1:
    {
      [self setTextColorWithId:nativeWidget withId:objValue];
    }
    break;
    case 2:
    case 3:
    {
      [self setIsEnabledWithId:nativeWidget withId:objValue];
    }
    break;
    case 4:
    {
      [self setAdjustsFontSizeToFitWidthWithId:nativeWidget withId:objValue];
    }
    break;
    case 5:
    {
      [self setAllowsDefaultTighteningForTruncationWithId:nativeWidget withId:objValue];
    }
    break;
    case 6:
    {
      [self setMinimumScaleFactorWithId:nativeWidget withId:objValue];
    }
    break;
    case 7:
    {
      [self setNumberOfLinesWithId:nativeWidget withId:objValue];
    }
    break;
    case 8:
    case 9:
    {
      [self setHighlightedTextColorWithId:nativeWidget withId:objValue];
    }
    break;
    case 10:
    {
      [self setIsHighlightedWithId:nativeWidget withId:objValue];
    }
    break;
    case 11:
    case 12:
    {
      [self setShadowColorWithId:nativeWidget withId:objValue];
    }
    break;
    case 13:
    {
      [self setPreferredMaxLayoutWidthWithId:nativeWidget withId:objValue];
    }
    break;
    case 14:
    {
      [self setIsUserInteractionEnabledWithId:nativeWidget withId:objValue];
    }
    break;
    case 15:
    {
      ASTextViewImpl_setMyTextWithId_(self, objValue);
    }
    break;
    case 16:
    {
      ASTextViewImpl_setGravityWithId_(self, objValue);
    }
    break;
    case 17:
    {
      ASTextViewImpl_setMyTextSizeWithId_(self, objValue);
    }
    break;
    case 18:
    {
      [self setPaddingWithId:objValue];
    }
    break;
    case 19:
    {
      [self setPaddingBottomWithId:objValue];
    }
    break;
    case 20:
    {
      [self setPaddingRightWithId:objValue];
    }
    break;
    case 21:
    {
      [self setPaddingLeftWithId:objValue];
    }
    break;
    case 22:
    {
      ASTextViewImpl_setPaddingStartWithId_(self, objValue);
    }
    break;
    case 23:
    {
      ASTextViewImpl_setPaddingEndWithId_(self, objValue);
    }
    break;
    case 24:
    {
      [self setPaddingTopWithId:objValue];
    }
    break;
    case 25:
    {
      ASTextViewImpl_setPaddingHorizontalWithId_(self, objValue);
    }
    break;
    case 26:
    {
      ASTextViewImpl_setPaddingVerticalWithId_(self, objValue);
    }
    break;
    case 27:
    {
      ASTextViewImpl_setAutoSizeTextTypeWithId_(self, objValue);
    }
    break;
    case 28:
    {
      ASTextViewImpl_setAutoMaxTextSizeWithId_(self, objValue);
    }
    break;
    case 29:
    {
      ASTextViewImpl_setAutoMinTextSizeWithId_(self, objValue);
    }
    break;
    case 30:
    {
      ASTextViewImpl_setAutoSizeStepGranularityWithId_(self, objValue);
    }
    break;
    case 31:
    {
      ASTextViewImpl_setAutoSizePresetSizesWithId_(self, objValue);
    }
    break;
    case 32:
    {
      ASTextViewImpl_setMinLinesWithId_(self, objValue);
    }
    break;
    case 33:
    {
      ASTextViewImpl_setLinesWithId_(self, objValue);
    }
    break;
    case 34:
    {
      ASTextViewImpl_setMaxLinesWithId_(self, objValue);
    }
    break;
    case 35:
    {
      ASTextViewImpl_setMinWidthWithId_(self, objValue);
    }
    break;
    case 36:
    {
      ASTextViewImpl_setMinHeightWithId_(self, objValue);
    }
    break;
    case 37:
    {
      ASTextViewImpl_setMaxWidthWithId_(self, objValue);
    }
    break;
    case 38:
    {
      ASTextViewImpl_setMaxHeightWithId_(self, objValue);
    }
    break;
    case 39:
    {
      ASTextViewImpl_setHeightWithId_(self, objValue);
    }
    break;
    case 40:
    {
      ASTextViewImpl_setWidthWithId_(self, objValue);
    }
    break;
    case 41:
    {
      ASTextViewImpl_setMaxEmsWithId_(self, objValue);
    }
    break;
    case 42:
    {
      ASTextViewImpl_setMinEmsWithId_(self, objValue);
    }
    break;
    case 43:
    {
      ASTextViewImpl_setEmsWithId_(self, objValue);
    }
    break;
    case 44:
    {
      ASTextViewImpl_setEllipsizeWithId_withNSString_(self, objValue, strValue);
    }
    break;
    case 45:
    {
      ASTextViewImpl_startOrStopMarqueeWithId_(self, objValue);
    }
    break;
    case 46:
    {
      ASTextViewImpl_setMarqueeRepeatLimitWithId_(self, objValue);
    }
    break;
    case 47:
    {
      ASTextViewImpl_setJustificationModeWithId_withNSString_(self, objValue, strValue);
    }
    break;
    case 48:
    {
      ASTextViewImpl_setShadowDxWithJavaLangFloat_withNSString_(self, (JavaLangFloat *) cast_chk(objValue, [JavaLangFloat class]), strValue);
    }
    break;
    case 49:
    {
      ASTextViewImpl_setShadowDyWithJavaLangFloat_withNSString_(self, (JavaLangFloat *) cast_chk(objValue, [JavaLangFloat class]), strValue);
    }
    break;
    case 50:
    {
      ASTextViewImpl_setSingleLineWithId_(self, objValue);
    }
    break;
    case 51:
    {
      ASTextViewImpl_setEnabledWithId_(self, objValue);
    }
    break;
    case 52:
    {
      ASTextViewImpl_setTextAllCapsWithId_(self, objValue);
    }
    break;
    case 53:
    {
      ASTextViewImpl_setMaxLengthWithId_(self, objValue);
    }
    break;
    case 54:
    {
      ASTextViewImpl_setPasswordWithId_(self, objValue);
    }
    break;
    case 55:
    {
      ASTextViewImpl_setTypeFaceWithId_withNSString_(self, objValue, strValue);
    }
    break;
    case 56:
    {
      ASTextViewImpl_setTextStyleWithId_(self, objValue);
    }
    break;
    case 57:
    {
      ASTextViewImpl_setFontFamilyWithId_withNSString_(self, objValue, strValue);
    }
    break;
    case 58:
    {
      ASTextViewImpl_setDrawableLeftWithNSString_withId_(self, @"drawableStart", objValue);
    }
    break;
    case 59:
    {
      ASTextViewImpl_setDrawableRightWithNSString_withId_(self, @"drawableEnd", objValue);
    }
    break;
    case 60:
    {
      ASTextViewImpl_setDrawableTopWithId_(self, objValue);
    }
    break;
    case 61:
    {
      ASTextViewImpl_setDrawableBottomWithId_(self, objValue);
    }
    break;
    case 62:
    {
      ASTextViewImpl_setDrawablePaddingWithId_(self, objValue);
    }
    break;
    case 63:
    {
      ASTextViewImpl_setDrawableTintWithId_(self, objValue);
    }
    break;
    case 64:
    {
      ASTextViewImpl_setDrawableTintModeWithId_(self, objValue);
    }
    break;
    case 65:
    {
      ASTextViewImpl_setScrollHorizontallyWithId_(self, objValue);
    }
    break;
    case 66:
    {
      ASTextViewImpl_setFirstBaselineToTopHeightWithId_(self, objValue);
    }
    break;
    case 67:
    {
      ASTextViewImpl_setLastBaselineToBottomHeightWithId_(self, objValue);
    }
    break;
    case 68:
    {
      ASTextViewImpl_setTextColorWithId_(self, objValue);
    }
    break;
    case 69:
    {
      ASTextViewImpl_setTextFormatWithId_(self, objValue);
    }
    break;
    case 70:
    {
      ASViewImpl_setStyleWithASIWidget_withId_(self, objValue);
    }
    break;
    case 71:
    {
      ASTextViewImpl_setDrawableIconSizeWithId_(self, objValue);
    }
    break;
    default:
    break;
  }
}

- (id)getAttributeWithASWidgetAttribute:(ASWidgetAttribute *)key
              withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  id nativeWidget = [self asNativeWidget];
  id attributeValue = ASViewImpl_getAttributeWithASIWidget_withId_withASWidgetAttribute_withASILifeCycleDecorator_(self, nativeWidget, key, decorator);
  if (attributeValue != nil) {
    return attributeValue;
  }
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"iosText", @"iosTextColor", @"enabled", @"iosIsEnabled", @"iosAdjustsFontSizeToFitWidth", @"iosAllowsDefaultTighteningForTruncation", @"iosMinimumScaleFactor", @"iosNumberOfLines", @"textColorHighlight", @"iosHighlightedTextColor", @"iosIsHighlighted", @"shadowColor", @"iosShadowColor", @"iosPreferredMaxLayoutWidth", @"iosIsUserInteractionEnabled", @"text", @"gravity", @"textSize", @"paddingBottom", @"paddingRight", @"paddingLeft", @"paddingStart", @"paddingEnd", @"paddingTop", @"autoSizeTextType", @"autoSizeMaxTextSize", @"autoSizeMinTextSize", @"autoSizeStepGranularity", @"minLines", @"maxLines", @"minWidth", @"minHeight", @"maxWidth", @"maxHeight", @"height", @"width", @"maxEms", @"minEms", @"ellipsize", @"marqueeRepeatLimit", @"justificationMode", @"shadowDx", @"shadowDy", @"drawablePadding", @"firstBaselineToTopHeight", @"lastBaselineToBottomHeight", @"textColor" }, 47)) {
    case 0:
    {
      return [self getText];
    }
    case 1:
    {
      return [self getTextColor];
    }
    case 2:
    case 3:
    {
      return [self getIsEnabled];
    }
    case 4:
    {
      return [self getAdjustsFontSizeToFitWidth];
    }
    case 5:
    {
      return [self getAllowsDefaultTighteningForTruncation];
    }
    case 6:
    {
      return [self getMinimumScaleFactor];
    }
    case 7:
    {
      return [self getNumberOfLines];
    }
    case 8:
    case 9:
    {
      return [self getHighlightedTextColor];
    }
    case 10:
    {
      return [self getIsHighlighted];
    }
    case 11:
    case 12:
    {
      return [self getShadowColor];
    }
    case 13:
    {
      return [self getPreferredMaxLayoutWidth];
    }
    case 14:
    {
      return [self getIsUserInteractionEnabled];
    }
    case 15:
    {
      return ASTextViewImpl_getMyText(self);
    }
    case 16:
    {
      return ASTextViewImpl_getGravity(self);
    }
    case 17:
    {
      return ASTextViewImpl_getTextSize(self);
    }
    case 18:
    {
      return ASTextViewImpl_getPaddingBottom(self);
    }
    case 19:
    {
      return ASTextViewImpl_getPaddingRight(self);
    }
    case 20:
    {
      return ASTextViewImpl_getPaddingLeft(self);
    }
    case 21:
    {
      return ASTextViewImpl_getPaddingStart(self);
    }
    case 22:
    {
      return ASTextViewImpl_getPaddingEnd(self);
    }
    case 23:
    {
      return ASTextViewImpl_getPaddingTop(self);
    }
    case 24:
    {
      return ASTextViewImpl_getAutoSizeTextType(self);
    }
    case 25:
    {
      return ASTextViewImpl_getAutoMaxTextSize(self);
    }
    case 26:
    {
      return ASTextViewImpl_getAutoMinTextSize(self);
    }
    case 27:
    {
      return ASTextViewImpl_getAutoSizeStepGranularity(self);
    }
    case 28:
    {
      return JavaLangInteger_valueOfWithInt_([self getMinLines]);
    }
    case 29:
    {
      return JavaLangInteger_valueOfWithInt_([self getMaxLines]);
    }
    case 30:
    {
      return ASTextViewImpl_getMinWidth(self);
    }
    case 31:
    {
      return ASTextViewImpl_getMinHeight(self);
    }
    case 32:
    {
      return JavaLangInteger_valueOfWithInt_([self getMaxWidth]);
    }
    case 33:
    {
      return JavaLangInteger_valueOfWithInt_([self getMaxHeight]);
    }
    case 34:
    {
      return JavaLangInteger_valueOfWithInt_(ASTextViewImpl_getHeight(self));
    }
    case 35:
    {
      return ASTextViewImpl_getWidth(self);
    }
    case 36:
    {
      return JavaLangInteger_valueOfWithInt_([self getMaxEms]);
    }
    case 37:
    {
      return JavaLangInteger_valueOfWithInt_([self getMinEms]);
    }
    case 38:
    {
      return ASTextViewImpl_getEllipsize(self);
    }
    case 39:
    {
      return ASTextViewImpl_getMarqueeRepeatLimit(self);
    }
    case 40:
    {
      return ASTextViewImpl_getJustificationMode(self);
    }
    case 41:
    {
      return ASTextViewImpl_getShadowDx(self);
    }
    case 42:
    {
      return ASTextViewImpl_getShadowDy(self);
    }
    case 43:
    {
      return ASTextViewImpl_getDrawablePadding(self);
    }
    case 44:
    {
      return ASTextViewImpl_getFirstBaselineToTopHeight(self);
    }
    case 45:
    {
      return ASTextViewImpl_getLastBaselineToBottomHeight(self);
    }
    case 46:
    {
      return ASTextViewImpl_getTextColorState(self);
    }
  }
  return nil;
}

- (id)asWidget {
  return measurableView_;
}

- (void)setGravityWithId:(id)objValue {
  ASTextViewImpl_setGravityWithId_(self, objValue);
}

- (void)updateTextAlignment {
  ASTextViewImpl_updateTextAlignment(self);
}

- (id)getGravity {
  return ASTextViewImpl_getGravity(self);
}

- (void)onRtlPropertiesChangedWithInt:(int32_t)layoutDirection {
  if ([((ADTextView *) nil_chk(measurableView_)) getRawTextAlignment] != 0 || [((ADTextView *) nil_chk(measurableView_)) getRawLayoutDirection] != 0) {
    ASTextViewImpl_updateTextAlignment(self);
  }
}

- (void)setDrawableIconSizeWithId:(id)objValue {
  ASTextViewImpl_setDrawableIconSizeWithId_(self, objValue);
}

- (id)getMinHeight {
  return ASTextViewImpl_getMinHeight(self);
}

- (id)getMinWidth {
  return ASTextViewImpl_getMinWidth(self);
}

- (void)setEmsWithId:(id)objValue {
  ASTextViewImpl_setEmsWithId_(self, objValue);
}

- (int32_t)getMaxEms {
  return [((ADTextView *) nil_chk(measurableView_)) getMaxEms];
}

- (int32_t)getMinEms {
  return [((ADTextView *) nil_chk(measurableView_)) getMinEms];
}

- (void)setMinEmsWithId:(id)objValue {
  ASTextViewImpl_setMinEmsWithId_(self, objValue);
}

- (int32_t)getMinLines {
  return [((ADTextView *) nil_chk(measurableView_)) getMinLines];
}

- (int32_t)getMaxLines {
  return [((ADTextView *) nil_chk(measurableView_)) getMaxLines];
}

- (void)setMaxEmsWithId:(id)objValue {
  ASTextViewImpl_setMaxEmsWithId_(self, objValue);
}

- (void)setWidthWithId:(id)objValue {
  ASTextViewImpl_setWidthWithId_(self, objValue);
}

- (void)setHeightWithId:(id)objValue {
  ASTextViewImpl_setHeightWithId_(self, objValue);
}

- (void)setMaxLinesWithId:(id)objValue {
  ASTextViewImpl_setMaxLinesWithId_(self, objValue);
}

- (void)setLinesWithId:(id)objValue {
  ASTextViewImpl_setLinesWithId_(self, objValue);
}

- (void)setMinLinesWithId:(id)objValue {
  ASTextViewImpl_setMinLinesWithId_(self, objValue);
}

- (void)setMaxHeightWithId:(id)objValue {
  ASTextViewImpl_setMaxHeightWithId_(self, objValue);
}

- (void)setMaxWidthWithId:(id)objValue {
  ASTextViewImpl_setMaxWidthWithId_(self, objValue);
}

- (int32_t)getMaxWidth {
  return [((ADTextView *) nil_chk(measurableView_)) getMaxWidth];
}

- (int32_t)getMaxHeight {
  return [((ADTextView *) nil_chk(measurableView_)) getMaxHeight];
}

- (void)setMinHeightWithId:(id)objValue {
  ASTextViewImpl_setMinHeightWithId_(self, objValue);
}

- (void)setMinWidthWithId:(id)objValue {
  ASTextViewImpl_setMinWidthWithId_(self, objValue);
}

- (id)getWidth {
  return ASTextViewImpl_getWidth(self);
}

- (int32_t)getHeight {
  return ASTextViewImpl_getHeight(self);
}

- (int32_t)getAutoSizeTextTypeWithADTextView:(ADTextView *)measurableView {
  return ASTextViewImpl_getAutoSizeTextTypeWithADTextView_(self, measurableView);
}

- (void)setAutoSizeTextTypeInternalWithInt:(int32_t)autoTextType {
  ASTextViewImpl_setAutoSizeTextTypeInternalWithInt_(self, autoTextType);
}

- (void)setAutoSizePresetSizesWithId:(id)objValue {
  ASTextViewImpl_setAutoSizePresetSizesWithId_(self, objValue);
}

- (void)addAutoResizeListener {
  ASTextViewImpl_addAutoResizeListener(self);
}

- (void)removeResizeListener {
  ASTextViewImpl_removeResizeListener(self);
}

- (void)setMaxLengthWithId:(id)objValue {
  ASTextViewImpl_setMaxLengthWithId_(self, objValue);
}

- (void)setMyTextWithId:(id)objValue {
  ASTextViewImpl_setMyTextWithId_(self, objValue);
}

- (void)setTextAllCapsWithId:(id)objValue {
  ASTextViewImpl_setTextAllCapsWithId_(self, objValue);
}

- (void)initHtmlWithJavaUtilMap:(id<JavaUtilMap>)params {
  ASTextViewImpl_initHtmlWithJavaUtilMap_(self, params);
}

- (void)setTypeFaceWithId:(id)objValue
             withNSString:(NSString *)strValue {
  ASTextViewImpl_setTypeFaceWithId_withNSString_(self, objValue, strValue);
}

- (void)setFontFamilyWithId:(id)objValue
               withNSString:(NSString *)strValue {
  ASTextViewImpl_setFontFamilyWithId_withNSString_(self, objValue, strValue);
}

- (void)setTextStyleWithId:(id)objValue {
  ASTextViewImpl_setTextStyleWithId_(self, objValue);
}

- (int32_t)calcNumberOfWhiteSpaces {
  return ASTextViewImpl_calcNumberOfWhiteSpaces(self);
}

- (void)cancelTimer {
  ASTextViewImpl_cancelTimer(self);
}

- (void)startTimer {
  ASTextViewImpl_startTimer(self);
}

- (id)getMarqueeRepeatLimit {
  return ASTextViewImpl_getMarqueeRepeatLimit(self);
}

- (void)setMarqueeRepeatLimitWithId:(id)objValue {
  ASTextViewImpl_setMarqueeRepeatLimitWithId_(self, objValue);
}

- (void)startOrStopMarqueeWithId:(id)objValue {
  ASTextViewImpl_startOrStopMarqueeWithId_(self, objValue);
}

- (int32_t)getLabelWidth {
  return ASTextViewImpl_getLabelWidth(self);
}

- (bool)isLabelMeasured {
  return ASTextViewImpl_isLabelMeasured(self);
}

- (void)setPasswordWithId:(id)objValue {
  ASTextViewImpl_setPasswordWithId_(self, objValue);
}

- (void)setFirstBaselineToTopHeightWithId:(id)objValue {
  ASTextViewImpl_setFirstBaselineToTopHeightWithId_(self, objValue);
}

- (bool)getIncludeFontPadding {
  return ASTextViewImpl_getIncludeFontPadding(self);
}

- (id)getFirstBaselineToTopHeight {
  return ASTextViewImpl_getFirstBaselineToTopHeight(self);
}

- (void)setLastBaselineToBottomHeightWithId:(id)objValue {
  ASTextViewImpl_setLastBaselineToBottomHeightWithId_(self, objValue);
}

- (id)getLastBaselineToBottomHeight {
  return ASTextViewImpl_getLastBaselineToBottomHeight(self);
}

- (void)setAutoSizeStepGranularityWithId:(id)objValue {
  ASTextViewImpl_setAutoSizeStepGranularityWithId_(self, objValue);
}

- (void)setAutoMinTextSizeWithId:(id)objValue {
  ASTextViewImpl_setAutoMinTextSizeWithId_(self, objValue);
}

- (void)setAutoMaxTextSizeWithId:(id)objValue {
  ASTextViewImpl_setAutoMaxTextSizeWithId_(self, objValue);
}

- (void)setAutoSizeTextTypeWithId:(id)objValue {
  ASTextViewImpl_setAutoSizeTextTypeWithId_(self, objValue);
}

- (id)getAutoSizeStepGranularity {
  return ASTextViewImpl_getAutoSizeStepGranularity(self);
}

- (id)getAutoMinTextSize {
  return ASTextViewImpl_getAutoMinTextSize(self);
}

- (id)getAutoMaxTextSize {
  return ASTextViewImpl_getAutoMaxTextSize(self);
}

- (id)getAutoSizeTextType {
  return ASTextViewImpl_getAutoSizeTextType(self);
}

- (void)setErrorMessageWithNSString:(NSString *)message {
  [self setAttributeWithNSString:@"text" withId:message withBoolean:false];
  [self setAttributeWithNSString:@"visibility" withId:message == nil || [message isEmpty] ? @"gone" : @"visible" withBoolean:false];
}

- (void)setTextFormatWithId:(id)objValue {
  ASTextViewImpl_setTextFormatWithId_(self, objValue);
}

- (void)setTextWithId:(id)nativeWidget
               withId:(id)value {
  ((ASUILabel*) nativeWidget).text = (NSString*) value;
}

- (id)getText {
  return ((ASUILabel*) uiView_).text;
}

- (void)setTextColorWithId:(id)nativeWidget
                    withId:(id)value {
  ((ASUILabel*) nativeWidget).textColor = (UIColor*) value;
}

- (id)getTextColor {
  return ((ASUILabel*) uiView_).textColor;
}

- (void)setIsEnabledWithId:(id)nativeWidget
                    withId:(id)value {
  ((ASUILabel*) nativeWidget).enabled = [(JavaLangBoolean*) value booleanValue];
}

- (id)getIsEnabled {
  return [JavaLangBoolean valueOfWithBoolean :((ASUILabel*) uiView_).enabled];
}

- (void)setAdjustsFontSizeToFitWidthWithId:(id)nativeWidget
                                    withId:(id)value {
  ((ASUILabel*) nativeWidget).adjustsFontSizeToFitWidth = [(JavaLangBoolean*) value booleanValue];
}

- (id)getAdjustsFontSizeToFitWidth {
  return [JavaLangBoolean valueOfWithBoolean :((ASUILabel*) uiView_).adjustsFontSizeToFitWidth];
}

- (void)setAllowsDefaultTighteningForTruncationWithId:(id)nativeWidget
                                               withId:(id)value {
  ((ASUILabel*) nativeWidget).allowsDefaultTighteningForTruncation = [(JavaLangBoolean*) value booleanValue];
}

- (id)getAllowsDefaultTighteningForTruncation {
  return [JavaLangBoolean valueOfWithBoolean :((ASUILabel*) uiView_).allowsDefaultTighteningForTruncation];
}

- (void)setMinimumScaleFactorWithId:(id)nativeWidget
                             withId:(id)value {
  ((ASUILabel*) nativeWidget).minimumScaleFactor = [(JavaLangFloat*) value floatValue];
}

- (id)getMinimumScaleFactor {
  return [JavaLangFloat valueOfWithFloat :((ASUILabel*) uiView_).minimumScaleFactor];
}

- (void)setNumberOfLinesWithId:(id)nativeWidget
                        withId:(id)value {
  ((ASUILabel*) nativeWidget).numberOfLines = [(JavaLangInteger*) value intValue];
}

- (id)getNumberOfLines {
  return [JavaLangInteger valueOfWithInt :((ASUILabel*) uiView_).numberOfLines];
}

- (void)setHighlightedTextColorWithId:(id)nativeWidget
                               withId:(id)value {
  ((ASUILabel*) nativeWidget).highlightedTextColor = (UIColor*) value;
}

- (id)getHighlightedTextColor {
  return ((ASUILabel*) uiView_).highlightedTextColor;
}

- (void)setIsHighlightedWithId:(id)nativeWidget
                        withId:(id)value {
  ((ASUILabel*) nativeWidget).highlighted = [(JavaLangBoolean*) value booleanValue];
}

- (id)getIsHighlighted {
  return [JavaLangBoolean valueOfWithBoolean :((ASUILabel*) uiView_).highlighted];
}

- (void)setShadowColorWithId:(id)nativeWidget
                      withId:(id)value {
  ((ASUILabel*) nativeWidget).shadowColor = (UIColor*) value;
}

- (id)getShadowColor {
  return ((ASUILabel*) uiView_).shadowColor;
}

- (void)setPreferredMaxLayoutWidthWithId:(id)nativeWidget
                                  withId:(id)value {
  ((ASUILabel*) nativeWidget).preferredMaxLayoutWidth = [(JavaLangFloat*) value floatValue];
}

- (id)getPreferredMaxLayoutWidth {
  return [JavaLangFloat valueOfWithFloat :((ASUILabel*) uiView_).preferredMaxLayoutWidth];
}

- (void)setIsUserInteractionEnabledWithId:(id)nativeWidget
                                   withId:(id)value {
  ((ASUILabel*) nativeWidget).userInteractionEnabled = [(JavaLangBoolean*) value booleanValue];
}

- (id)getIsUserInteractionEnabled {
  return [JavaLangBoolean valueOfWithBoolean :((ASUILabel*) uiView_).userInteractionEnabled];
}

- (id)asNativeWidget {
  return uiView_;
}

- (bool)checkIosVersionWithNSString:(NSString *)v {
  return ([[[UIDevice currentDevice] systemVersion] compare:v options:NSNumericSearch] == NSOrderedDescending);
}

- (void)setIdWithNSString:(NSString *)id_ {
  if (id_ != nil && ![id_ isEqual:@""]) {
    [super setIdWithNSString:id_];
    [((ADTextView *) nil_chk(measurableView_)) setIdWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([self quickConvertWithId:id_ withNSString:@"id"], [JavaLangInteger class]))) intValue]];
  }
}

- (void)setVisibleWithBoolean:(bool)b {
  [((ADView *) nil_chk(((ADView *) cast_chk([self asWidget], [ADView class])))) setVisibilityWithInt:b ? ADView_VISIBLE : ADView_GONE];
}

- (void)requestLayout {
  if ([self isInitialised]) {
    ASViewImpl_requestLayoutWithASIWidget_withId_(self, [self asNativeWidget]);
  }
}

- (void)invalidate {
  if ([self isInitialised]) {
    ASViewImpl_invalidateWithASIWidget_withId_(self, [self asNativeWidget]);
  }
}

- (void)createLabelWithJavaUtilMap:(id<JavaUtilMap>)params
                    withADTextView:(ADTextView *)measurableView {
  ASTextViewImpl_createLabelWithJavaUtilMap_withADTextView_(self, params, measurableView);
}

- (void)nativeCreateWithJavaUtilMap:(id<JavaUtilMap>)params {
  ASTextViewImpl_nativeCreateWithJavaUtilMap_(self, params);
}

- (void)handleHtmlTextWithNSString:(NSString *)text {
  ASTextViewImpl_handleHtmlTextWithNSString_(self, text);
}

- (void)nativeSetTextWithNSString:(NSString *)text {
  ASTextViewImpl_nativeSetTextWithNSString_(self, text);
}

- (void)nativeSetHtmlTextWithId:(id)text {
  ASTextViewImpl_nativeSetHtmlTextWithId_(self, text);
}

- (id)getMyText {
  return ASTextViewImpl_getMyText(self);
}

- (void)setPaddingWithId:(id)objValue {
  int32_t value = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
  ADView *view = (ADView *) cast_chk([self asWidget], [ADView class]);
  ASViewImpl_setPaddingWithId_withADView_(JavaLangInteger_valueOfWithInt_(value), view);
}

- (void)setPaddingBottomWithId:(id)objValue {
  int32_t value = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
  ADView *view = (ADView *) cast_chk([self asWidget], [ADView class]);
  ASViewImpl_setPaddingBottomWithId_withADView_(JavaLangInteger_valueOfWithInt_(value), view);
}

- (void)setPaddingTopWithId:(id)objValue {
  int32_t value = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
  ADView *view = (ADView *) cast_chk([self asWidget], [ADView class]);
  ASViewImpl_setPaddingTopWithId_withADView_(JavaLangInteger_valueOfWithInt_(value), view);
}

- (void)setPaddingLeftWithId:(id)objValue {
  int32_t value = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
  ADView *view = (ADView *) cast_chk([self asWidget], [ADView class]);
  ASViewImpl_setPaddingLeftWithId_withADView_(JavaLangInteger_valueOfWithInt_(value), view);
}

- (void)setPaddingRightWithId:(id)objValue {
  int32_t value = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
  ADView *view = (ADView *) cast_chk([self asWidget], [ADView class]);
  ASViewImpl_setPaddingRightWithId_withADView_(JavaLangInteger_valueOfWithInt_(value), view);
}

- (id)getPaddingTop {
  return ASTextViewImpl_getPaddingTop(self);
}

- (id)getPaddingEnd {
  return ASTextViewImpl_getPaddingEnd(self);
}

- (id)getPaddingStart {
  return ASTextViewImpl_getPaddingStart(self);
}

- (id)getPaddingLeft {
  return ASTextViewImpl_getPaddingLeft(self);
}

- (id)getPaddingRight {
  return ASTextViewImpl_getPaddingRight(self);
}

- (id)getPaddingBottom {
  return ASTextViewImpl_getPaddingBottom(self);
}

- (void)setPaddingVerticalWithId:(id)objValue {
  ASTextViewImpl_setPaddingVerticalWithId_(self, objValue);
}

- (void)setPaddingHorizontalWithId:(id)objValue {
  ASTextViewImpl_setPaddingHorizontalWithId_(self, objValue);
}

- (void)setPaddingEndWithId:(id)objValue {
  ASTextViewImpl_setPaddingEndWithId_(self, objValue);
}

- (void)setPaddingStartWithId:(id)objValue {
  ASTextViewImpl_setPaddingStartWithId_(self, objValue);
}

- (id)getTextSize {
  return ASTextViewImpl_getTextSize(self);
}

- (void)setMyTextSizeWithId:(id)objValue {
  ASTextViewImpl_setMyTextSizeWithId_(self, objValue);
}

- (void)nativeSetTextSizeWithInt:(int32_t)value {
  ASTextViewImpl_nativeSetTextSizeWithInt_(self, value);
}

- (void)setVerticalAligmentCenter {
  ASTextViewImpl_setVerticalAligmentCenter(self);
}

- (void)setVerticalAligmentBottom {
  ASTextViewImpl_setVerticalAligmentBottom(self);
}

- (void)setVerticalAligmentTop {
  ASTextViewImpl_setVerticalAligmentTop(self);
}

- (void)setHorizontalAligmentCenter {
  ASTextViewImpl_setHorizontalAligmentCenter(self);
}

- (void)setHorizontalAligmentRight {
  ASTextViewImpl_setHorizontalAligmentRight(self);
}

- (void)setHorizontalAligmentRightInternal {
  ASTextViewImpl_setHorizontalAligmentRightInternal(self);
}

- (void)setHorizontalAligmentLeft {
  ASTextViewImpl_setHorizontalAligmentLeft(self);
}

- (void)setHorizontalAligmentLeftInternal {
  ASTextViewImpl_setHorizontalAligmentLeftInternal(self);
}

- (int32_t)getTextAlignment {
  return ASTextViewImpl_getTextAlignment(self);
}

- (void)nativeSetVerticalAligmentBottom {
  ASTextViewImpl_nativeSetVerticalAligmentBottom(self);
}

- (void)nativeSetVerticalAligmentTop {
  ASTextViewImpl_nativeSetVerticalAligmentTop(self);
}

- (void)nativeSetVerticalAligmentCenter {
  ASTextViewImpl_nativeSetVerticalAligmentCenter(self);
}

- (void)addMinMaxListener {
  ASTextViewImpl_addMinMaxListener(self);
}

- (int32_t)getBorderPadding {
  return 0;
}

- (int32_t)getLineHeightPadding {
  return 0;
}

- (int32_t)getLineHeight {
  return ASTextViewImpl_getLineHeight(self);
}

- (int32_t)getBorderWidth {
  return ASTextViewImpl_getBorderWidth(self);
}

- (id)getEllipsize {
  return ASTextViewImpl_getEllipsize(self);
}

- (void)setEllipsizeWithId:(id)objValue
              withNSString:(NSString *)strValue {
  ASTextViewImpl_setEllipsizeWithId_withNSString_(self, objValue, strValue);
}

- (JavaLangInteger *)nativeGetLinBreakMode {
  return ASTextViewImpl_nativeGetLinBreakMode(self);
}

- (void)nativeSetLineBreakModeWithInt:(int32_t)lineBreakMode {
  ASTextViewImpl_nativeSetLineBreakModeWithInt_(self, lineBreakMode);
}

- (void)setJustificationModeWithId:(id)objValue
                      withNSString:(NSString *)strValue {
  ASTextViewImpl_setJustificationModeWithId_withNSString_(self, objValue, strValue);
}

- (void)nativeSetTextAligmentWithInt:(int32_t)textAlignment {
  ASTextViewImpl_nativeSetTextAligmentWithInt_(self, textAlignment);
}

- (id)getJustificationMode {
  return ASTextViewImpl_getJustificationMode(self);
}

- (JavaLangInteger *)nativeGetTextAligment {
  return ASTextViewImpl_nativeGetTextAligment(self);
}

- (void)setShadowDyWithJavaLangFloat:(JavaLangFloat *)objValue
                        withNSString:(NSString *)strValue {
  ASTextViewImpl_setShadowDyWithJavaLangFloat_withNSString_(self, objValue, strValue);
}

- (void)setShadowDxWithJavaLangFloat:(JavaLangFloat *)objValue
                        withNSString:(NSString *)strValue {
  ASTextViewImpl_setShadowDxWithJavaLangFloat_withNSString_(self, objValue, strValue);
}

- (id)getShadowDy {
  return ASTextViewImpl_getShadowDy(self);
}

- (id)getShadowDx {
  return ASTextViewImpl_getShadowDx(self);
}

- (void)setSingleLineWithId:(id)objValue {
  ASTextViewImpl_setSingleLineWithId_(self, objValue);
}

- (id)getSingleLine {
  return ASTextViewImpl_getSingleLine(self);
}

- (void)setEnabledWithId:(id)objValue {
  ASTextViewImpl_setEnabledWithId_(self, objValue);
}

+ (NSString *)toUpperCaseWithNSString:(NSString *)text {
  return ASTextViewImpl_toUpperCaseWithNSString_(text);
}

- (int32_t)nativeGetFontSize {
  return ASTextViewImpl_nativeGetFontSize(self);
}

- (int32_t)nativeGetFontStyle {
  return ASTextViewImpl_nativeGetFontStyle(self);
}

- (void)nativeSetCustomFontWithInt:(int32_t)height
              withASFontDescriptor:(ASFontDescriptor *)fontDescriptor {
  ASTextViewImpl_nativeSetCustomFontWithInt_withASFontDescriptor_(self, height, fontDescriptor);
}

- (void)nativeSetFontStyleWithInt:(int32_t)style {
  ASTextViewImpl_nativeSetFontStyleWithInt_(self, style);
}

- (void)setDrawablePaddingWithId:(id)objValue {
  ASTextViewImpl_setDrawablePaddingWithId_(self, objValue);
}

- (void)setDrawableBottomWithId:(id)objValue {
  ASTextViewImpl_setDrawableBottomWithId_(self, objValue);
}

- (void)setDrawableTopWithId:(id)objValue {
  ASTextViewImpl_setDrawableTopWithId_(self, objValue);
}

- (void)setDrawableRightWithNSString:(NSString *)originalAttr
                              withId:(id)objValue {
  ASTextViewImpl_setDrawableRightWithNSString_withId_(self, originalAttr, objValue);
}

- (void)setDrawableRightInternalWithNSString:(NSString *)originalAttr
                                      withId:(id)objValue {
  ASTextViewImpl_setDrawableRightInternalWithNSString_withId_(self, originalAttr, objValue);
}

- (void)setDrawableLeftWithNSString:(NSString *)originalAttr
                             withId:(id)objValue {
  ASTextViewImpl_setDrawableLeftWithNSString_withId_(self, originalAttr, objValue);
}

- (void)setDrawableLeftInternalWithNSString:(NSString *)originalAttr
                                     withId:(id)objValue {
  ASTextViewImpl_setDrawableLeftInternalWithNSString_withId_(self, originalAttr, objValue);
}

- (int32_t)getImageHeightWithId:(id)objValue {
  return ASTextViewImpl_getImageHeightWithId_(self, objValue);
}

- (int32_t)getImageWidthWithId:(id)objValue {
  return ASTextViewImpl_getImageWidthWithId_(self, objValue);
}

- (id)getDrawablePadding {
  return ASTextViewImpl_getDrawablePadding(self);
}

- (void)setDrawableTintModeWithId:(id)value {
  ASTextViewImpl_setDrawableTintModeWithId_(self, value);
}

- (void)setDrawableTintWithId:(id)objValue {
  ASTextViewImpl_setDrawableTintWithId_(self, objValue);
}

- (void)updatePadding {
}

- (void)setScrollHorizontallyWithId:(id)objValue {
  ASTextViewImpl_setScrollHorizontallyWithId_(self, objValue);
}

- (bool)canMarquee {
  return ASTextViewImpl_canMarquee(self);
}

- (void)cancelNativeTimer {
  ASTextViewImpl_cancelNativeTimer(self);
}

- (bool)isDisposed {
  return ASTextViewImpl_isDisposed(self);
}

- (void)addDeallocHandler {
  ASTextViewImpl_addDeallocHandler(self);
}

- (void)schedule {
  ASTextViewImpl_schedule(self);
}

- (void)onTick:(NSTimer *)timer {
  [self executeOnMainThreadWithJavaLangRunnable:self->marqueeTask_];
}

- (void)executeOnMainThreadWithJavaLangRunnable:(id<JavaLangRunnable>)runnable {
  ASTextViewImpl_executeOnMainThreadWithJavaLangRunnable_(self, runnable);
}

- (void)setTextColorWithId:(id)objValue {
  ASTextViewImpl_setTextColorWithId_(self, objValue);
}

- (id)getTextColorState {
  return ASTextViewImpl_getTextColorState(self);
}

- (void)drawableStateChanged {
  [super drawableStateChanged];
  ASTextViewImpl_drawableStateChangeWithNSString_withADDrawable_(self, @"bottom", [((ADTextView *) nil_chk(measurableView_)) getBottomDrawable]);
  ASTextViewImpl_drawableStateChangeWithNSString_withADDrawable_(self, @"left", [((ADTextView *) nil_chk(measurableView_)) getLeftDrawable]);
  ASTextViewImpl_drawableStateChangeWithNSString_withADDrawable_(self, @"right", [((ADTextView *) nil_chk(measurableView_)) getRightDrawable]);
  ASTextViewImpl_drawableStateChangeWithNSString_withADDrawable_(self, @"top", [((ADTextView *) nil_chk(measurableView_)) getTopDrawable]);
  if ([((ADTextView *) nil_chk(measurableView_)) getTextColors] != nil && [((ADColorStateList *) nil_chk([((ADTextView *) nil_chk(measurableView_)) getTextColors])) isStateful]) {
    ASTextViewImpl_setTextColorWithId_(self, JavaLangInteger_valueOfWithInt_([((ADTextView *) nil_chk(measurableView_)) getCurrentTextColor]));
  }
  if ([((ADTextView *) nil_chk(measurableView_)) getHintTextColors] != nil && [((ADColorStateList *) nil_chk([((ADTextView *) nil_chk(measurableView_)) getHintTextColors])) isStateful]) {
    ASTextViewImpl_setHintColorWithInt_(self, [((ADTextView *) nil_chk(measurableView_)) getCurrentHintTextColor]);
    ASTextViewImpl_syncPlaceholderLabel(self);
  }
  if (drawableTint_ != nil && [drawableTint_ isStateful]) {
    ASTextViewImpl_setDrawableTintWithId_(self, drawableTint_);
    [self invalidate];
  }
  if ([((ADTextView *) nil_chk(measurableView_)) getLinkTextColors] != nil && [((ADColorStateList *) nil_chk([((ADTextView *) nil_chk(measurableView_)) getLinkTextColors])) isStateful]) {
    ASTextViewImpl_setTextColorLinkWithADColorStateList_(self, [((ADTextView *) nil_chk(measurableView_)) getLinkTextColors]);
  }
}

- (void)drawableStateChangeWithNSString:(NSString *)type
                         withADDrawable:(ADDrawable *)dr {
  ASTextViewImpl_drawableStateChangeWithNSString_withADDrawable_(self, type, dr);
}

- (void)setHintColorWithInt:(int32_t)currentHintTextColor {
  ASTextViewImpl_setHintColorWithInt_(self, currentHintTextColor);
}

- (void)syncPlaceholderLabel {
  ASTextViewImpl_syncPlaceholderLabel(self);
}

- (int32_t)getBaseLine {
  return ASTextViewImpl_nativeGetBaseLine(self) + [((ADTextView *) nil_chk(measurableView_)) getPaddingTop];
}

- (int32_t)nativeGetBaseLine {
  return ASTextViewImpl_nativeGetBaseLine(self);
}

- (id)getFont {
  return ASTextViewImpl_getFont(self);
}

- (void)setTextColorLinkWithADColorStateList:(ADColorStateList *)linkTextColors {
  ASTextViewImpl_setTextColorLinkWithADColorStateList_(self, linkTextColors);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "LIOSClass;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASIWidget;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, 5, -1, -1 },
    { NULL, "V", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 14, 11, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 15, 11, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 16, 11, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 17, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 18, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 19, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 20, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 21, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 22, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 23, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 24, 11, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 25, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 26, 11, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 27, 28, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 29, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 30, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 31, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 32, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 33, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 34, 35, -1, 36, -1, -1 },
    { NULL, "V", 0x2, 37, 38, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 39, 38, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 40, 11, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 41, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 42, 11, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 43, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 44, 11, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 45, 11, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 46, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 47, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 48, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 49, 11, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 50, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 51, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 52, 53, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x101, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 54, 53, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x101, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 55, 53, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x101, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 56, 53, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x101, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 57, 53, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x101, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 58, 53, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x101, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 59, 53, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x101, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 60, 53, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x101, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 61, 53, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x101, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 62, 53, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x101, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 63, 53, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x101, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 64, 53, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x101, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x101, 65, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 66, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 67, 68, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 69, 70, -1, 71, -1, -1 },
    { NULL, "V", 0x2, 72, 35, -1, 36, -1, -1 },
    { NULL, "V", 0x2, 73, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 74, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 75, 11, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 76, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 77, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 78, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 79, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 80, 11, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 81, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 82, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 83, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 84, 11, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 85, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 86, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 87, 38, -1, -1, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 88, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 89, 38, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 90, 13, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 91, 92, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 93, 92, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 94, 11, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 95, 11, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 96, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 97, 98, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 99, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 100, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 101, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 102, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 103, 104, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 105, 104, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 106, 104, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 107, 104, -1, -1, -1, -1 },
    { NULL, "I", 0x102, 108, 11, -1, -1, -1, -1 },
    { NULL, "I", 0x102, 109, 11, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 110, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 111, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 112, 11, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 113, 114, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 54, 11, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 115, 116, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 117, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 118, 119, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(loadAttributesWithNSString:);
  methods[1].selector = @selector(init);
  methods[2].selector = @selector(initWithNSString:);
  methods[3].selector = @selector(initWithNSString:withNSString:);
  methods[4].selector = @selector(getViewClass);
  methods[5].selector = @selector(newInstance);
  methods[6].selector = @selector(createWithASIFragment:withJavaUtilMap:);
  methods[7].selector = @selector(setWidgetOnNativeClass);
  methods[8].selector = @selector(setAttributeWithASWidgetAttribute:withNSString:withId:withASILifeCycleDecorator:);
  methods[9].selector = @selector(getAttributeWithASWidgetAttribute:withASILifeCycleDecorator:);
  methods[10].selector = @selector(asWidget);
  methods[11].selector = @selector(setGravityWithId:);
  methods[12].selector = @selector(updateTextAlignment);
  methods[13].selector = @selector(getGravity);
  methods[14].selector = @selector(onRtlPropertiesChangedWithInt:);
  methods[15].selector = @selector(setDrawableIconSizeWithId:);
  methods[16].selector = @selector(getMinHeight);
  methods[17].selector = @selector(getMinWidth);
  methods[18].selector = @selector(setEmsWithId:);
  methods[19].selector = @selector(getMaxEms);
  methods[20].selector = @selector(getMinEms);
  methods[21].selector = @selector(setMinEmsWithId:);
  methods[22].selector = @selector(getMinLines);
  methods[23].selector = @selector(getMaxLines);
  methods[24].selector = @selector(setMaxEmsWithId:);
  methods[25].selector = @selector(setWidthWithId:);
  methods[26].selector = @selector(setHeightWithId:);
  methods[27].selector = @selector(setMaxLinesWithId:);
  methods[28].selector = @selector(setLinesWithId:);
  methods[29].selector = @selector(setMinLinesWithId:);
  methods[30].selector = @selector(setMaxHeightWithId:);
  methods[31].selector = @selector(setMaxWidthWithId:);
  methods[32].selector = @selector(getMaxWidth);
  methods[33].selector = @selector(getMaxHeight);
  methods[34].selector = @selector(setMinHeightWithId:);
  methods[35].selector = @selector(setMinWidthWithId:);
  methods[36].selector = @selector(getWidth);
  methods[37].selector = @selector(getHeight);
  methods[38].selector = @selector(getAutoSizeTextTypeWithADTextView:);
  methods[39].selector = @selector(setAutoSizeTextTypeInternalWithInt:);
  methods[40].selector = @selector(setAutoSizePresetSizesWithId:);
  methods[41].selector = @selector(addAutoResizeListener);
  methods[42].selector = @selector(removeResizeListener);
  methods[43].selector = @selector(setMaxLengthWithId:);
  methods[44].selector = @selector(setMyTextWithId:);
  methods[45].selector = @selector(setTextAllCapsWithId:);
  methods[46].selector = @selector(initHtmlWithJavaUtilMap:);
  methods[47].selector = @selector(setTypeFaceWithId:withNSString:);
  methods[48].selector = @selector(setFontFamilyWithId:withNSString:);
  methods[49].selector = @selector(setTextStyleWithId:);
  methods[50].selector = @selector(calcNumberOfWhiteSpaces);
  methods[51].selector = @selector(cancelTimer);
  methods[52].selector = @selector(startTimer);
  methods[53].selector = @selector(getMarqueeRepeatLimit);
  methods[54].selector = @selector(setMarqueeRepeatLimitWithId:);
  methods[55].selector = @selector(startOrStopMarqueeWithId:);
  methods[56].selector = @selector(getLabelWidth);
  methods[57].selector = @selector(isLabelMeasured);
  methods[58].selector = @selector(setPasswordWithId:);
  methods[59].selector = @selector(setFirstBaselineToTopHeightWithId:);
  methods[60].selector = @selector(getIncludeFontPadding);
  methods[61].selector = @selector(getFirstBaselineToTopHeight);
  methods[62].selector = @selector(setLastBaselineToBottomHeightWithId:);
  methods[63].selector = @selector(getLastBaselineToBottomHeight);
  methods[64].selector = @selector(setAutoSizeStepGranularityWithId:);
  methods[65].selector = @selector(setAutoMinTextSizeWithId:);
  methods[66].selector = @selector(setAutoMaxTextSizeWithId:);
  methods[67].selector = @selector(setAutoSizeTextTypeWithId:);
  methods[68].selector = @selector(getAutoSizeStepGranularity);
  methods[69].selector = @selector(getAutoMinTextSize);
  methods[70].selector = @selector(getAutoMaxTextSize);
  methods[71].selector = @selector(getAutoSizeTextType);
  methods[72].selector = @selector(setErrorMessageWithNSString:);
  methods[73].selector = @selector(setTextFormatWithId:);
  methods[74].selector = @selector(setTextWithId:withId:);
  methods[75].selector = @selector(getText);
  methods[76].selector = @selector(setTextColorWithId:withId:);
  methods[77].selector = @selector(getTextColor);
  methods[78].selector = @selector(setIsEnabledWithId:withId:);
  methods[79].selector = @selector(getIsEnabled);
  methods[80].selector = @selector(setAdjustsFontSizeToFitWidthWithId:withId:);
  methods[81].selector = @selector(getAdjustsFontSizeToFitWidth);
  methods[82].selector = @selector(setAllowsDefaultTighteningForTruncationWithId:withId:);
  methods[83].selector = @selector(getAllowsDefaultTighteningForTruncation);
  methods[84].selector = @selector(setMinimumScaleFactorWithId:withId:);
  methods[85].selector = @selector(getMinimumScaleFactor);
  methods[86].selector = @selector(setNumberOfLinesWithId:withId:);
  methods[87].selector = @selector(getNumberOfLines);
  methods[88].selector = @selector(setHighlightedTextColorWithId:withId:);
  methods[89].selector = @selector(getHighlightedTextColor);
  methods[90].selector = @selector(setIsHighlightedWithId:withId:);
  methods[91].selector = @selector(getIsHighlighted);
  methods[92].selector = @selector(setShadowColorWithId:withId:);
  methods[93].selector = @selector(getShadowColor);
  methods[94].selector = @selector(setPreferredMaxLayoutWidthWithId:withId:);
  methods[95].selector = @selector(getPreferredMaxLayoutWidth);
  methods[96].selector = @selector(setIsUserInteractionEnabledWithId:withId:);
  methods[97].selector = @selector(getIsUserInteractionEnabled);
  methods[98].selector = @selector(asNativeWidget);
  methods[99].selector = @selector(checkIosVersionWithNSString:);
  methods[100].selector = @selector(setIdWithNSString:);
  methods[101].selector = @selector(setVisibleWithBoolean:);
  methods[102].selector = @selector(requestLayout);
  methods[103].selector = @selector(invalidate);
  methods[104].selector = @selector(createLabelWithJavaUtilMap:withADTextView:);
  methods[105].selector = @selector(nativeCreateWithJavaUtilMap:);
  methods[106].selector = @selector(handleHtmlTextWithNSString:);
  methods[107].selector = @selector(nativeSetTextWithNSString:);
  methods[108].selector = @selector(nativeSetHtmlTextWithId:);
  methods[109].selector = @selector(getMyText);
  methods[110].selector = @selector(setPaddingWithId:);
  methods[111].selector = @selector(setPaddingBottomWithId:);
  methods[112].selector = @selector(setPaddingTopWithId:);
  methods[113].selector = @selector(setPaddingLeftWithId:);
  methods[114].selector = @selector(setPaddingRightWithId:);
  methods[115].selector = @selector(getPaddingTop);
  methods[116].selector = @selector(getPaddingEnd);
  methods[117].selector = @selector(getPaddingStart);
  methods[118].selector = @selector(getPaddingLeft);
  methods[119].selector = @selector(getPaddingRight);
  methods[120].selector = @selector(getPaddingBottom);
  methods[121].selector = @selector(setPaddingVerticalWithId:);
  methods[122].selector = @selector(setPaddingHorizontalWithId:);
  methods[123].selector = @selector(setPaddingEndWithId:);
  methods[124].selector = @selector(setPaddingStartWithId:);
  methods[125].selector = @selector(getTextSize);
  methods[126].selector = @selector(setMyTextSizeWithId:);
  methods[127].selector = @selector(nativeSetTextSizeWithInt:);
  methods[128].selector = @selector(setVerticalAligmentCenter);
  methods[129].selector = @selector(setVerticalAligmentBottom);
  methods[130].selector = @selector(setVerticalAligmentTop);
  methods[131].selector = @selector(setHorizontalAligmentCenter);
  methods[132].selector = @selector(setHorizontalAligmentRight);
  methods[133].selector = @selector(setHorizontalAligmentRightInternal);
  methods[134].selector = @selector(setHorizontalAligmentLeft);
  methods[135].selector = @selector(setHorizontalAligmentLeftInternal);
  methods[136].selector = @selector(getTextAlignment);
  methods[137].selector = @selector(nativeSetVerticalAligmentBottom);
  methods[138].selector = @selector(nativeSetVerticalAligmentTop);
  methods[139].selector = @selector(nativeSetVerticalAligmentCenter);
  methods[140].selector = @selector(addMinMaxListener);
  methods[141].selector = @selector(getBorderPadding);
  methods[142].selector = @selector(getLineHeightPadding);
  methods[143].selector = @selector(getLineHeight);
  methods[144].selector = @selector(getBorderWidth);
  methods[145].selector = @selector(getEllipsize);
  methods[146].selector = @selector(setEllipsizeWithId:withNSString:);
  methods[147].selector = @selector(nativeGetLinBreakMode);
  methods[148].selector = @selector(nativeSetLineBreakModeWithInt:);
  methods[149].selector = @selector(setJustificationModeWithId:withNSString:);
  methods[150].selector = @selector(nativeSetTextAligmentWithInt:);
  methods[151].selector = @selector(getJustificationMode);
  methods[152].selector = @selector(nativeGetTextAligment);
  methods[153].selector = @selector(setShadowDyWithJavaLangFloat:withNSString:);
  methods[154].selector = @selector(setShadowDxWithJavaLangFloat:withNSString:);
  methods[155].selector = @selector(getShadowDy);
  methods[156].selector = @selector(getShadowDx);
  methods[157].selector = @selector(setSingleLineWithId:);
  methods[158].selector = @selector(getSingleLine);
  methods[159].selector = @selector(setEnabledWithId:);
  methods[160].selector = @selector(toUpperCaseWithNSString:);
  methods[161].selector = @selector(nativeGetFontSize);
  methods[162].selector = @selector(nativeGetFontStyle);
  methods[163].selector = @selector(nativeSetCustomFontWithInt:withASFontDescriptor:);
  methods[164].selector = @selector(nativeSetFontStyleWithInt:);
  methods[165].selector = @selector(setDrawablePaddingWithId:);
  methods[166].selector = @selector(setDrawableBottomWithId:);
  methods[167].selector = @selector(setDrawableTopWithId:);
  methods[168].selector = @selector(setDrawableRightWithNSString:withId:);
  methods[169].selector = @selector(setDrawableRightInternalWithNSString:withId:);
  methods[170].selector = @selector(setDrawableLeftWithNSString:withId:);
  methods[171].selector = @selector(setDrawableLeftInternalWithNSString:withId:);
  methods[172].selector = @selector(getImageHeightWithId:);
  methods[173].selector = @selector(getImageWidthWithId:);
  methods[174].selector = @selector(getDrawablePadding);
  methods[175].selector = @selector(setDrawableTintModeWithId:);
  methods[176].selector = @selector(setDrawableTintWithId:);
  methods[177].selector = @selector(updatePadding);
  methods[178].selector = @selector(setScrollHorizontallyWithId:);
  methods[179].selector = @selector(canMarquee);
  methods[180].selector = @selector(cancelNativeTimer);
  methods[181].selector = @selector(isDisposed);
  methods[182].selector = @selector(addDeallocHandler);
  methods[183].selector = @selector(schedule);
  methods[184].selector = @selector(executeOnMainThreadWithJavaLangRunnable:);
  methods[185].selector = @selector(setTextColorWithId:);
  methods[186].selector = @selector(getTextColorState);
  methods[187].selector = @selector(drawableStateChanged);
  methods[188].selector = @selector(drawableStateChangeWithNSString:withADDrawable:);
  methods[189].selector = @selector(setHintColorWithInt:);
  methods[190].selector = @selector(syncPlaceholderLabel);
  methods[191].selector = @selector(getBaseLine);
  methods[192].selector = @selector(nativeGetBaseLine);
  methods[193].selector = @selector(getFont);
  methods[194].selector = @selector(setTextColorLinkWithADColorStateList:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "LOCAL_NAME", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 120, -1, -1 },
    { "GROUP_NAME", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 121, -1, -1 },
    { "uiView_", "LNSObject;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "measurableView_", "LADTextView;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "postMeasureHandler_", "LASTextViewImpl_PostMeasureHandler;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "POST_MEASURE_EVENT_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "html_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "escapeHtml_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "htmlConfig_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 122, -1 },
    { "fontDescriptors_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 123, -1 },
    { "marqueeTask_", "LASTextViewImpl_MarqueeTask;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "marqueeRepeatLimit_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "marqueeCommandConverter_", "LASMarqueeCommandConverter;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "autoSizeMin_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "autoSizeMax_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "autoSizeGranular_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "TEXT_ALIGN_CENTER", "I", .constantValue.asInt = ASTextViewImpl_TEXT_ALIGN_CENTER, 0x1a, -1, -1, -1, -1 },
    { "TEXT_ALIGN_LEFT", "I", .constantValue.asInt = ASTextViewImpl_TEXT_ALIGN_LEFT, 0x1a, -1, -1, -1, -1 },
    { "TEXT_ALIGN_RIGHT", "I", .constantValue.asInt = ASTextViewImpl_TEXT_ALIGN_RIGHT, 0x1a, -1, -1, -1, -1 },
    { "ellipsize_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "ITALIC_FONT_TRAIT", "I", .constantValue.asLong = 0, 0xa, -1, 124, -1, -1 },
    { "BOLD_FONT_TRAIT", "I", .constantValue.asLong = 0, 0xa, -1, 125, -1, -1 },
    { "NORMAL_FONT_TRAIT", "I", .constantValue.asInt = ASTextViewImpl_NORMAL_FONT_TRAIT, 0x1a, -1, -1, -1, -1 },
    { "drawableTint_", "LADColorStateList;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "timer_", "LNSObject;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "isDisposed_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "dellocHandler_", "LASTextViewImpl_DellocHandler;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "loadAttributes", "LNSString;", "LNSString;LNSString;", "create", "LASIFragment;LJavaUtilMap;", "(Lcom/ashera/core/IFragment;Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;)V", "setAttribute", "LASWidgetAttribute;LNSString;LNSObject;LASILifeCycleDecorator;", "getAttribute", "LASWidgetAttribute;LASILifeCycleDecorator;", "setGravity", "LNSObject;", "onRtlPropertiesChanged", "I", "setDrawableIconSize", "setEms", "setMinEms", "setMaxEms", "setWidth", "setHeight", "setMaxLines", "setLines", "setMinLines", "setMaxHeight", "setMaxWidth", "setMinHeight", "setMinWidth", "getAutoSizeTextType", "LADTextView;", "setAutoSizeTextTypeInternal", "setAutoSizePresetSizes", "setMaxLength", "setMyText", "setTextAllCaps", "initHtml", "LJavaUtilMap;", "(Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;)V", "setTypeFace", "LNSObject;LNSString;", "setFontFamily", "setTextStyle", "setMarqueeRepeatLimit", "startOrStopMarquee", "setPassword", "setFirstBaselineToTopHeight", "setLastBaselineToBottomHeight", "setAutoSizeStepGranularity", "setAutoMinTextSize", "setAutoMaxTextSize", "setAutoSizeTextType", "setErrorMessage", "setTextFormat", "setText", "LNSObject;LNSObject;", "setTextColor", "setIsEnabled", "setAdjustsFontSizeToFitWidth", "setAllowsDefaultTighteningForTruncation", "setMinimumScaleFactor", "setNumberOfLines", "setHighlightedTextColor", "setIsHighlighted", "setShadowColor", "setPreferredMaxLayoutWidth", "setIsUserInteractionEnabled", "checkIosVersion", "setId", "setVisible", "Z", "createLabel", "LJavaUtilMap;LADTextView;", "(Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;Lr/android/widget/TextView;)V", "nativeCreate", "handleHtmlText", "nativeSetText", "nativeSetHtmlText", "setPadding", "setPaddingBottom", "setPaddingTop", "setPaddingLeft", "setPaddingRight", "setPaddingVertical", "setPaddingHorizontal", "setPaddingEnd", "setPaddingStart", "setMyTextSize", "nativeSetTextSize", "setEllipsize", "nativeSetLineBreakMode", "setJustificationMode", "nativeSetTextAligment", "setShadowDy", "LJavaLangFloat;LNSString;", "setShadowDx", "setSingleLine", "setEnabled", "toUpperCase", "nativeSetCustomFont", "ILASFontDescriptor;", "nativeSetFontStyle", "setDrawablePadding", "setDrawableBottom", "setDrawableTop", "setDrawableRight", "LNSString;LNSObject;", "setDrawableRightInternal", "setDrawableLeft", "setDrawableLeftInternal", "getImageHeight", "getImageWidth", "setDrawableTintMode", "setDrawableTint", "setScrollHorizontally", "executeOnMainThread", "LJavaLangRunnable;", "drawableStateChange", "LNSString;LADDrawable;", "setHintColor", "setTextColorLink", "LADColorStateList;", &ASTextViewImpl_LOCAL_NAME, &ASTextViewImpl_GROUP_NAME, "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", "Ljava/util/Map<Ljava/lang/String;Lcom/ashera/model/FontDescriptor;>;", &ASTextViewImpl_ITALIC_FONT_TRAIT, &ASTextViewImpl_BOLD_FONT_TRAIT, "LASTextViewImpl_AutoSizeTextType;LASTextViewImpl_Ellipsize;LASTextViewImpl_MarqueeRepeatLimit;LASTextViewImpl_JustificationMode;LASTextViewImpl_Font;LASTextViewImpl_TextStyle;LASTextViewImpl_DrawableTintMode;LASTextViewImpl_TextViewExt;LASTextViewImpl_PostMeasureHandler;LASTextViewImpl_MarqueeTask;LASTextViewImpl_DellocHandler;" };
  static const J2ObjcClassInfo _ASTextViewImpl = { "TextViewImpl", "com.ashera.layout", ptrTable, methods, fields, 7, 0x1, 195, 27, -1, 126, -1, -1, -1 };
  return &_ASTextViewImpl;
}

+ (void)initialize {
  if (self == [ASTextViewImpl class]) {
    ASTextViewImpl_ITALIC_FONT_TRAIT = JreLoadStatic(ASLayoutNativeVars, UIFontDescriptorTraitItalic);
    ASTextViewImpl_BOLD_FONT_TRAIT = JreLoadStatic(ASLayoutNativeVars, UIFontDescriptorTraitBold);
    J2OBJC_SET_INITIALIZED(ASTextViewImpl)
  }
}

@end

void ASTextViewImpl_init(ASTextViewImpl *self) {
  ASBaseWidget_initWithNSString_withNSString_(self, ASTextViewImpl_GROUP_NAME, ASTextViewImpl_LOCAL_NAME);
  self->POST_MEASURE_EVENT_ = [((ASEvent_StandardEvents *) nil_chk(JreLoadEnum(ASEvent_StandardEvents, postMeasure))) description];
  self->autoSizeMin_ = -1;
  self->autoSizeMax_ = -1;
  self->autoSizeGranular_ = -1;
}

ASTextViewImpl *new_ASTextViewImpl_init() {
  J2OBJC_NEW_IMPL(ASTextViewImpl, init)
}

ASTextViewImpl *create_ASTextViewImpl_init() {
  J2OBJC_CREATE_IMPL(ASTextViewImpl, init)
}

void ASTextViewImpl_initWithNSString_(ASTextViewImpl *self, NSString *localname) {
  ASBaseWidget_initWithNSString_withNSString_(self, ASTextViewImpl_GROUP_NAME, localname);
  self->POST_MEASURE_EVENT_ = [((ASEvent_StandardEvents *) nil_chk(JreLoadEnum(ASEvent_StandardEvents, postMeasure))) description];
  self->autoSizeMin_ = -1;
  self->autoSizeMax_ = -1;
  self->autoSizeGranular_ = -1;
}

ASTextViewImpl *new_ASTextViewImpl_initWithNSString_(NSString *localname) {
  J2OBJC_NEW_IMPL(ASTextViewImpl, initWithNSString_, localname)
}

ASTextViewImpl *create_ASTextViewImpl_initWithNSString_(NSString *localname) {
  J2OBJC_CREATE_IMPL(ASTextViewImpl, initWithNSString_, localname)
}

void ASTextViewImpl_initWithNSString_withNSString_(ASTextViewImpl *self, NSString *groupName, NSString *localname) {
  ASBaseWidget_initWithNSString_withNSString_(self, groupName, localname);
  self->POST_MEASURE_EVENT_ = [((ASEvent_StandardEvents *) nil_chk(JreLoadEnum(ASEvent_StandardEvents, postMeasure))) description];
  self->autoSizeMin_ = -1;
  self->autoSizeMax_ = -1;
  self->autoSizeGranular_ = -1;
}

ASTextViewImpl *new_ASTextViewImpl_initWithNSString_withNSString_(NSString *groupName, NSString *localname) {
  J2OBJC_NEW_IMPL(ASTextViewImpl, initWithNSString_withNSString_, groupName, localname)
}

ASTextViewImpl *create_ASTextViewImpl_initWithNSString_withNSString_(NSString *groupName, NSString *localname) {
  J2OBJC_CREATE_IMPL(ASTextViewImpl, initWithNSString_withNSString_, groupName, localname)
}

void ASTextViewImpl_setWidgetOnNativeClass(ASTextViewImpl *self) {
  ((ASUILabel*) self.uiView).widget = self;
}

void ASTextViewImpl_setGravityWithId_(ASTextViewImpl *self, id objValue) {
  int32_t value = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
  [((ADTextView *) nil_chk(self->measurableView_)) setGravityWithInt:value];
  int32_t major = value & ASGravityConverter_VERTICAL_GRAVITY_MASK;
  ASTextViewImpl_updateTextAlignment(self);
  switch (major) {
    case ASGravityConverter_TOP:
    ASTextViewImpl_setVerticalAligmentTop(self);
    break;
    case ASGravityConverter_BOTTOM:
    ASTextViewImpl_setVerticalAligmentBottom(self);
    break;
    case ASGravityConverter_CENTER_VERTICAL:
    ASTextViewImpl_setVerticalAligmentCenter(self);
    break;
    default:
    ASTextViewImpl_setVerticalAligmentTop(self);
    break;
  }
}

void ASTextViewImpl_updateTextAlignment(ASTextViewImpl *self) {
  ADLayout_Alignment *minor = [((ADTextView *) nil_chk(self->measurableView_)) getAlignmentOfLayout];
  bool isRtl = false;
  bool hasTextDirection = [((ADTextView *) nil_chk(self->measurableView_)) getRawTextDirection] != 0;
  if (hasTextDirection) {
    id<ADTextDirectionHeuristic> heuristic = [((ADTextView *) nil_chk(self->measurableView_)) getTextDirectionHeuristic];
    NSString *text = (NSString *) cast_chk(ASTextViewImpl_getMyText(self), [NSString class]);
    isRtl = [((id<ADTextDirectionHeuristic>) nil_chk(heuristic)) isRtlWithJavaLangCharSequence:text withInt:0 withInt:[((NSString *) nil_chk(text)) java_length]];
  }
  switch ([minor ordinal]) {
    case ADLayout_Alignment_Enum_ALIGN_LEFT:
    ASTextViewImpl_setHorizontalAligmentLeft(self);
    break;
    case ADLayout_Alignment_Enum_ALIGN_NORMAL:
    if (hasTextDirection) {
      if (isRtl) {
        ASTextViewImpl_setHorizontalAligmentRight(self);
      }
      else {
        ASTextViewImpl_setHorizontalAligmentLeft(self);
      }
    }
    else {
      ASTextViewImpl_setHorizontalAligmentLeft(self);
    }
    break;
    case ADLayout_Alignment_Enum_ALIGN_RIGHT:
    ASTextViewImpl_setHorizontalAligmentRight(self);
    break;
    case ADLayout_Alignment_Enum_ALIGN_OPPOSITE:
    if (hasTextDirection) {
      if (isRtl) {
        ASTextViewImpl_setHorizontalAligmentLeft(self);
      }
      else {
        ASTextViewImpl_setHorizontalAligmentRight(self);
      }
    }
    else {
      ASTextViewImpl_setHorizontalAligmentRight(self);
    }
    break;
    case ADLayout_Alignment_Enum_ALIGN_CENTER:
    ASTextViewImpl_setHorizontalAligmentCenter(self);
    break;
    default:
    ASTextViewImpl_setHorizontalAligmentLeft(self);
    break;
  }
}

id ASTextViewImpl_getGravity(ASTextViewImpl *self) {
  ASBaseMeasurableView_VerticalAligment *verticalAligment = [((ADTextView *) nil_chk(self->measurableView_)) getVerticalAligment];
  if (verticalAligment == nil) {
    verticalAligment = JreLoadEnum(ASBaseMeasurableView_VerticalAligment, top);
  }
  int32_t gravityVertical = 0;
  switch ([verticalAligment ordinal]) {
    case ASBaseMeasurableView_VerticalAligment_Enum_top:
    gravityVertical = ASGravityConverter_TOP;
    break;
    case ASBaseMeasurableView_VerticalAligment_Enum_middle:
    gravityVertical = ASGravityConverter_CENTER_VERTICAL;
    break;
    case ASBaseMeasurableView_VerticalAligment_Enum_bottom:
    gravityVertical = ASGravityConverter_BOTTOM;
    break;
    default:
    break;
  }
  int32_t aligment = ASTextViewImpl_getTextAlignment(self);
  int32_t gravitHorizontal = 0;
  switch (aligment) {
    case ASTextViewImpl_TEXT_ALIGN_CENTER:
    gravitHorizontal = ASGravityConverter_CENTER_HORIZONTAL;
    break;
    case ASTextViewImpl_TEXT_ALIGN_LEFT:
    gravitHorizontal = ASGravityConverter_LEFT;
    break;
    case ASTextViewImpl_TEXT_ALIGN_RIGHT:
    gravitHorizontal = ASGravityConverter_RIGHT;
    break;
    default:
    break;
  }
  int32_t gravity = gravitHorizontal | gravityVertical;
  return JavaLangInteger_valueOfWithInt_(gravity);
}

void ASTextViewImpl_setDrawableIconSizeWithId_(ASTextViewImpl *self, id objValue) {
  [self applyAttributeCommandWithNSString:@"drawableStart" withNSString:@"drawableIconSize" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableIconSize" } count:1 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ objValue } count:1 type:NSObject_class_()]];
  [self applyAttributeCommandWithNSString:@"drawableEnd" withNSString:@"drawableIconSize" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableIconSize" } count:1 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ objValue } count:1 type:NSObject_class_()]];
  [self applyAttributeCommandWithNSString:@"drawableTop" withNSString:@"drawableIconSize" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableIconSize" } count:1 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ objValue } count:1 type:NSObject_class_()]];
  [self applyAttributeCommandWithNSString:@"drawableBottom" withNSString:@"drawableIconSize" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableIconSize" } count:1 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ objValue } count:1 type:NSObject_class_()]];
}

id ASTextViewImpl_getMinHeight(ASTextViewImpl *self) {
  return JavaLangInteger_valueOfWithInt_([((ADTextView *) nil_chk(self->measurableView_)) getMinHeight]);
}

id ASTextViewImpl_getMinWidth(ASTextViewImpl *self) {
  return JavaLangInteger_valueOfWithInt_([((ADTextView *) nil_chk(self->measurableView_)) getMinWidth]);
}

void ASTextViewImpl_setEmsWithId_(ASTextViewImpl *self, id objValue) {
  ASTextViewImpl_setMinEmsWithId_(self, objValue);
  ASTextViewImpl_setMaxEmsWithId_(self, objValue);
}

void ASTextViewImpl_setMinEmsWithId_(ASTextViewImpl *self, id objValue) {
  [((ADTextView *) nil_chk(self->measurableView_)) setMinEmsWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
  ASTextViewImpl_addMinMaxListener(self);
}

void ASTextViewImpl_setMaxEmsWithId_(ASTextViewImpl *self, id objValue) {
  [((ADTextView *) nil_chk(self->measurableView_)) setMaxEmsWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
  ASTextViewImpl_addMinMaxListener(self);
}

void ASTextViewImpl_setWidthWithId_(ASTextViewImpl *self, id objValue) {
  ASTextViewImpl_setMinWidthWithId_(self, objValue);
  ASTextViewImpl_setMaxWidthWithId_(self, objValue);
}

void ASTextViewImpl_setHeightWithId_(ASTextViewImpl *self, id objValue) {
  ASTextViewImpl_setMinHeightWithId_(self, objValue);
  ASTextViewImpl_setMaxHeightWithId_(self, objValue);
}

void ASTextViewImpl_setMaxLinesWithId_(ASTextViewImpl *self, id objValue) {
  [((ADTextView *) nil_chk(self->measurableView_)) setMaxLinesWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
  ASTextViewImpl_addMinMaxListener(self);
}

void ASTextViewImpl_setLinesWithId_(ASTextViewImpl *self, id objValue) {
  ASTextViewImpl_setMinLinesWithId_(self, objValue);
  ASTextViewImpl_setMaxLinesWithId_(self, objValue);
}

void ASTextViewImpl_setMinLinesWithId_(ASTextViewImpl *self, id objValue) {
  [((ADTextView *) nil_chk(self->measurableView_)) setMinLinesWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
  ASTextViewImpl_addMinMaxListener(self);
}

void ASTextViewImpl_setMaxHeightWithId_(ASTextViewImpl *self, id objValue) {
  [((ADTextView *) nil_chk(self->measurableView_)) setMaxHeightWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
  ASTextViewImpl_addMinMaxListener(self);
}

void ASTextViewImpl_setMaxWidthWithId_(ASTextViewImpl *self, id objValue) {
  [((ADTextView *) nil_chk(self->measurableView_)) setMaxWidthWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
  ASTextViewImpl_addMinMaxListener(self);
}

void ASTextViewImpl_setMinHeightWithId_(ASTextViewImpl *self, id objValue) {
  [((ADTextView *) nil_chk(self->measurableView_)) setMinHeightWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
  ASTextViewImpl_addMinMaxListener(self);
}

void ASTextViewImpl_setMinWidthWithId_(ASTextViewImpl *self, id objValue) {
  [((ADTextView *) nil_chk(self->measurableView_)) setMinWidthWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
  ASTextViewImpl_addMinMaxListener(self);
}

id ASTextViewImpl_getWidth(ASTextViewImpl *self) {
  return JavaLangInteger_valueOfWithInt_([((ADTextView *) nil_chk(self->measurableView_)) getWidth]);
}

int32_t ASTextViewImpl_getHeight(ASTextViewImpl *self) {
  return [((ADTextView *) nil_chk(self->measurableView_)) getHeight];
}

int32_t ASTextViewImpl_getAutoSizeTextTypeWithADTextView_(ASTextViewImpl *self, ADTextView *measurableView) {
  return [((ADTextView *) nil_chk(measurableView)) getAutoSizeTextType];
}

void ASTextViewImpl_setAutoSizeTextTypeInternalWithInt_(ASTextViewImpl *self, int32_t autoTextType) {
  ASTextViewImpl_removeResizeListener(self);
  if ([((ADTextView *) nil_chk(self->measurableView_)) isAutoSizeTextTypeUniformWithInt:autoTextType]) {
    [((ADTextView *) nil_chk(self->measurableView_)) setUpAutoSizeTextTypeUniformWithInt:self->autoSizeMin_ withInt:self->autoSizeMax_ withInt:self->autoSizeGranular_];
    ASTextViewImpl_addAutoResizeListener(self);
  }
  else {
    [((ADTextView *) nil_chk(self->measurableView_)) clearAutoSizeTypeConfiguration];
  }
}

void ASTextViewImpl_setAutoSizePresetSizesWithId_(ASTextViewImpl *self, id objValue) {
  [((ADTextView *) nil_chk(self->measurableView_)) setAutoSizeTextTypeUniformWithPresetSizesWithIntArray:(IOSIntArray *) cast_chk(objValue, [IOSIntArray class]) withInt:0];
}

void ASTextViewImpl_addAutoResizeListener(ASTextViewImpl *self) {
  if (self->postMeasureHandler_ == nil) {
    self->postMeasureHandler_ = new_ASTextViewImpl_PostMeasureHandler_initWithASTextViewImpl_withNSString_(self, self->POST_MEASURE_EVENT_);
    [((ASEventBus *) nil_chk([((id<ASIFragment>) nil_chk(self->fragment_)) getEventBus])) onWithNSString:self->POST_MEASURE_EVENT_ withASEventBusHandlerArray:[IOSObjectArray newArrayWithObjects:(id[]){ self->postMeasureHandler_ } count:1 type:ASEventBusHandler_class_()]];
  }
}

void ASTextViewImpl_removeResizeListener(ASTextViewImpl *self) {
  if (self->postMeasureHandler_ != nil) {
    [((ASEventBus *) nil_chk([((id<ASIFragment>) nil_chk(self->fragment_)) getEventBus])) offWithASEventBusHandlerArray:[IOSObjectArray newArrayWithObjects:(id[]){ self->postMeasureHandler_ } count:1 type:ASEventBusHandler_class_()]];
    self->postMeasureHandler_ = nil;
  }
}

void ASTextViewImpl_setMaxLengthWithId_(ASTextViewImpl *self, id objValue) {
  if (!self->html_) {
    [self applyAttributeCommandWithNSString:@"text" withNSString:ASCommonConverters_command_maxlength withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"maxLength" } count:1 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ objValue } count:1 type:NSObject_class_()]];
  }
  else {
    (void) [((id<JavaUtilMap>) nil_chk(self->htmlConfig_)) putWithId:@"maxLength" withId:objValue];
  }
}

void ASTextViewImpl_setMyTextWithId_(ASTextViewImpl *self, id objValue) {
  NSString *text = (NSString *) cast_chk(objValue, [NSString class]);
  if (text == nil) {
    text = @"";
  }
  if (self->html_) {
    ASTextViewImpl_handleHtmlTextWithNSString_(self, text);
  }
  else {
    ASTextViewImpl_nativeSetTextWithNSString_(self, text);
  }
}

void ASTextViewImpl_setTextAllCapsWithId_(ASTextViewImpl *self, id objValue) {
  if (!self->html_) {
    [self applyAttributeCommandWithNSString:@"text" withNSString:ASCommonConverters_command_uppercase withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"textAllCaps" } count:1 type:NSString_class_()] withBoolean:[((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]))) booleanValue] withNSObjectArray:[IOSObjectArray newArrayWithLength:0 type:NSObject_class_()]];
  }
  else {
    (void) [((id<JavaUtilMap>) nil_chk(self->htmlConfig_)) putWithId:@"textAllCaps" withId:objValue];
  }
}

void ASTextViewImpl_initHtmlWithJavaUtilMap_(ASTextViewImpl *self, id<JavaUtilMap> params) {
  if ([((id<JavaUtilMap>) nil_chk(params)) containsKeyWithId:@"html"]) {
    self->html_ = [nil_chk([params getWithId:@"html"]) isEqual:@"true"];
    if (self->html_) {
      self->htmlConfig_ = new_JavaUtilHashMap_init();
    }
    else {
      if (self->escapeHtml_) {
        [self applyAttributeCommandWithNSString:@"text" withNSString:ASCommonConverters_command_escapehtml withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){  } count:0 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithLength:0 type:NSObject_class_()]];
      }
    }
  }
}

void ASTextViewImpl_setTypeFaceWithId_withNSString_(ASTextViewImpl *self, id objValue, NSString *strValue) {
  ASTextViewImpl_setFontFamilyWithId_withNSString_(self, objValue, strValue);
}

void ASTextViewImpl_setFontFamilyWithId_withNSString_(ASTextViewImpl *self, id objValue, NSString *strValue) {
  if ([objValue isKindOfClass:[JavaLangInteger class]]) {
    objValue = ASPluginInvoker_convertFromWithASIConverter_withJavaUtilMap_withId_withASIFragment_(ASConverterFactory_getWithNSString_(ASCommonConverters_font), nil, strValue, self->fragment_);
  }
  self->fontDescriptors_ = (id<JavaUtilMap>) cast_check(objValue, JavaUtilMap_class_());
  int32_t style = ASTextViewImpl_nativeGetFontStyle(self);
  int32_t height = ASTextViewImpl_nativeGetFontSize(self);
  NSString *weight = @"400";
  if ((style & ASTextViewImpl_BOLD_FONT_TRAIT) != 0) {
    weight = @"700";
  }
  NSString *fontStyle = @"normal";
  if ((style & ASTextViewImpl_ITALIC_FONT_TRAIT) != 0) {
    fontStyle = @"italic";
  }
  ASFontDescriptor *fontDescriptor = [((id<JavaUtilMap>) nil_chk(self->fontDescriptors_)) getWithId:JreStrcat("$C$", fontStyle, '_', weight)];
  ASTextViewImpl_nativeSetCustomFontWithInt_withASFontDescriptor_(self, height, fontDescriptor);
}

void ASTextViewImpl_setTextStyleWithId_(ASTextViewImpl *self, id objValue) {
  int32_t value = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
  if (self->fontDescriptors_ != nil) {
    int32_t height = ASTextViewImpl_nativeGetFontSize(self);
    NSString *weight = @"400";
    if ((value & (int32_t) 0x1) != 0) {
      weight = @"700";
    }
    NSString *fontStyle = @"normal";
    if ((value & (int32_t) 0x2) != 0) {
      fontStyle = @"italic";
    }
    ASFontDescriptor *fontDescriptor = [((id<JavaUtilMap>) nil_chk(self->fontDescriptors_)) getWithId:JreStrcat("$C$", fontStyle, '_', weight)];
    ASTextViewImpl_nativeSetCustomFontWithInt_withASFontDescriptor_(self, height, fontDescriptor);
  }
  else {
    int32_t style = ASTextViewImpl_NORMAL_FONT_TRAIT;
    if ((value & (int32_t) 0x1) != 0) {
      style = style | ASTextViewImpl_BOLD_FONT_TRAIT;
    }
    if ((value & (int32_t) 0x2) != 0) {
      style = style | ASTextViewImpl_ITALIC_FONT_TRAIT;
    }
    ASTextViewImpl_nativeSetFontStyleWithInt_(self, style);
  }
}

int32_t ASTextViewImpl_calcNumberOfWhiteSpaces(ASTextViewImpl *self) {
  if (!ASTextViewImpl_isLabelMeasured(self)) {
    return 0;
  }
  float blankSpaceWidth = [((NSNumber *) nil_chk(((NSNumber *) cast_chk(ASTextViewImpl_getTextSize(self), [NSNumber class])))) floatValue];
  int32_t width = JreIntDiv(ASTextViewImpl_getLabelWidth(self), 3);
  int32_t numberOfBlankSpaces = JreFpToInt(JavaLangMath_ceilWithDouble_(width / (blankSpaceWidth * 1.0f)));
  return numberOfBlankSpaces;
}

void ASTextViewImpl_cancelTimer(ASTextViewImpl *self) {
  ASTextViewImpl_cancelNativeTimer(self);
  if (self->marqueeTask_ != nil) {
    [self->marqueeTask_ cancel];
  }
  if (self->marqueeCommandConverter_ != nil) {
    [self->marqueeCommandConverter_ updateArgsWithNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(0), JavaLangInteger_valueOfWithInt_(0) } count:2 type:NSObject_class_()]];
  }
}

void ASTextViewImpl_startTimer(ASTextViewImpl *self) {
  if (ASTextViewImpl_canMarquee(self)) {
    ASTextViewImpl_addDeallocHandler(self);
    if (self->marqueeTask_ != nil) {
      [self->marqueeTask_ restart];
    }
    else {
      NSString *direction = ASViewImpl_isRTLLayoutDirectionWithASIWidget_(self) ? @"reverse" : @"forward";
      self->marqueeTask_ = new_ASTextViewImpl_MarqueeTask_initWithASTextViewImpl_withNSString_(self, direction);
    }
    ASTextViewImpl_schedule(self);
  }
}

id ASTextViewImpl_getMarqueeRepeatLimit(ASTextViewImpl *self) {
  return JavaLangInteger_valueOfWithInt_(self->marqueeRepeatLimit_);
}

void ASTextViewImpl_setMarqueeRepeatLimitWithId_(ASTextViewImpl *self, id objValue) {
  self->marqueeRepeatLimit_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
}

void ASTextViewImpl_startOrStopMarqueeWithId_(ASTextViewImpl *self, id objValue) {
  ASTextViewImpl_cancelTimer(self);
  if (objValue != nil && [(JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]) booleanValue]) {
    ASTextViewImpl_startTimer(self);
  }
}

int32_t ASTextViewImpl_getLabelWidth(ASTextViewImpl *self) {
  if ([((ADTextView *) nil_chk(self->measurableView_)) isIgnoreDrawableHeight]) {
    return [((ADTextView *) nil_chk(self->measurableView_)) getMeasuredWidth] - [((ADTextView *) nil_chk(self->measurableView_)) getPaddingLeft] - [((ADTextView *) nil_chk(self->measurableView_)) getPaddingRight];
  }
  return [((ADTextView *) nil_chk(self->measurableView_)) getMeasuredWidth] - [((ADTextView *) nil_chk(self->measurableView_)) getCompoundPaddingRight] - [((ADTextView *) nil_chk(self->measurableView_)) getCompoundPaddingLeft];
}

bool ASTextViewImpl_isLabelMeasured(ASTextViewImpl *self) {
  return !ASTextViewImpl_isDisposed(self) && ASTextViewImpl_getLabelWidth(self) > 0;
}

void ASTextViewImpl_setPasswordWithId_(ASTextViewImpl *self, id objValue) {
  if (!self->html_) {
    [self applyAttributeCommandWithNSString:@"text" withNSString:ASCommonConverters_command_password withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"password" } count:1 type:NSString_class_()] withBoolean:[((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]))) booleanValue] withNSObjectArray:[IOSObjectArray newArrayWithLength:0 type:NSObject_class_()]];
  }
  else {
    (void) [((id<JavaUtilMap>) nil_chk(self->htmlConfig_)) putWithId:@"password" withId:objValue];
  }
}

void ASTextViewImpl_setFirstBaselineToTopHeightWithId_(ASTextViewImpl *self, id objValue) {
  ASFontMetricsDescriptor *fontMetrics = ASPluginInvoker_getFontMetricsWithId_(ASTextViewImpl_getFont(self));
  int32_t firstBaselineToTopHeight = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
  int32_t fontMetricsTop;
  if (ASTextViewImpl_getIncludeFontPadding(self)) {
    fontMetricsTop = ((ASFontMetricsDescriptor *) nil_chk(fontMetrics))->top_;
  }
  else {
    fontMetricsTop = ((ASFontMetricsDescriptor *) nil_chk(fontMetrics))->ascent_;
  }
  if (firstBaselineToTopHeight > JavaLangMath_absWithInt_(fontMetricsTop)) {
    int32_t paddingTop = firstBaselineToTopHeight - (-fontMetricsTop);
    [((ADTextView *) nil_chk(self->measurableView_)) setPaddingWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(ASTextViewImpl_getPaddingLeft(self), [JavaLangInteger class]))) intValue] withInt:paddingTop withInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(ASTextViewImpl_getPaddingRight(self), [JavaLangInteger class]))) intValue] withInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(ASTextViewImpl_getPaddingBottom(self), [JavaLangInteger class]))) intValue]];
  }
}

bool ASTextViewImpl_getIncludeFontPadding(ASTextViewImpl *self) {
  return false;
}

id ASTextViewImpl_getFirstBaselineToTopHeight(ASTextViewImpl *self) {
  ASFontMetricsDescriptor *fontMetrics = ASPluginInvoker_getFontMetricsWithId_(ASTextViewImpl_getFont(self));
  return JavaLangInteger_valueOfWithInt_([((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(ASTextViewImpl_getPaddingTop(self), [JavaLangInteger class]))) intValue] - ((ASFontMetricsDescriptor *) nil_chk(fontMetrics))->top_);
}

void ASTextViewImpl_setLastBaselineToBottomHeightWithId_(ASTextViewImpl *self, id objValue) {
  ASFontMetricsDescriptor *fontMetrics = ASPluginInvoker_getFontMetricsWithId_(ASTextViewImpl_getFont(self));
  int32_t lastBaselineToBottomHeight = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
  int32_t fontMetricsBottom;
  if (ASTextViewImpl_getIncludeFontPadding(self)) {
    fontMetricsBottom = ((ASFontMetricsDescriptor *) nil_chk(fontMetrics))->bottom_;
  }
  else {
    fontMetricsBottom = ((ASFontMetricsDescriptor *) nil_chk(fontMetrics))->descent_;
  }
  if (lastBaselineToBottomHeight > JavaLangMath_absWithInt_(fontMetricsBottom)) {
    int32_t paddingBottom = lastBaselineToBottomHeight - fontMetricsBottom;
    [((ADTextView *) nil_chk(self->measurableView_)) setPaddingWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(ASTextViewImpl_getPaddingLeft(self), [JavaLangInteger class]))) intValue] withInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(ASTextViewImpl_getPaddingTop(self), [JavaLangInteger class]))) intValue] withInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(ASTextViewImpl_getPaddingRight(self), [JavaLangInteger class]))) intValue] withInt:paddingBottom];
  }
}

id ASTextViewImpl_getLastBaselineToBottomHeight(ASTextViewImpl *self) {
  ASFontMetricsDescriptor *fontMetrics = ASPluginInvoker_getFontMetricsWithId_(ASTextViewImpl_getFont(self));
  return JavaLangInteger_valueOfWithInt_([((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(ASTextViewImpl_getPaddingBottom(self), [JavaLangInteger class]))) intValue] + ((ASFontMetricsDescriptor *) nil_chk(fontMetrics))->bottom_);
}

void ASTextViewImpl_setAutoSizeStepGranularityWithId_(ASTextViewImpl *self, id objValue) {
  self->autoSizeGranular_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
  if ([self isInitialised]) {
    ASTextViewImpl_setAutoSizeTextTypeInternalWithInt_(self, ASTextViewImpl_getAutoSizeTextTypeWithADTextView_(self, self->measurableView_));
  }
}

void ASTextViewImpl_setAutoMinTextSizeWithId_(ASTextViewImpl *self, id objValue) {
  self->autoSizeMin_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
  if ([self isInitialised]) {
    ASTextViewImpl_setAutoSizeTextTypeInternalWithInt_(self, ASTextViewImpl_getAutoSizeTextTypeWithADTextView_(self, self->measurableView_));
  }
}

void ASTextViewImpl_setAutoMaxTextSizeWithId_(ASTextViewImpl *self, id objValue) {
  self->autoSizeMax_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
  if ([self isInitialised]) {
    ASTextViewImpl_setAutoSizeTextTypeInternalWithInt_(self, ASTextViewImpl_getAutoSizeTextTypeWithADTextView_(self, self->measurableView_));
  }
}

void ASTextViewImpl_setAutoSizeTextTypeWithId_(ASTextViewImpl *self, id objValue) {
  int32_t autoTextType = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
  ASTextViewImpl_setAutoSizeTextTypeInternalWithInt_(self, autoTextType);
}

id ASTextViewImpl_getAutoSizeStepGranularity(ASTextViewImpl *self) {
  return JavaLangInteger_valueOfWithInt_(self->autoSizeGranular_);
}

id ASTextViewImpl_getAutoMinTextSize(ASTextViewImpl *self) {
  return JavaLangInteger_valueOfWithInt_(self->autoSizeMin_);
}

id ASTextViewImpl_getAutoMaxTextSize(ASTextViewImpl *self) {
  return JavaLangInteger_valueOfWithInt_(self->autoSizeMax_);
}

id ASTextViewImpl_getAutoSizeTextType(ASTextViewImpl *self) {
  return JavaLangInteger_valueOfWithInt_(ASTextViewImpl_getAutoSizeTextTypeWithADTextView_(self, self->measurableView_));
}

void ASTextViewImpl_setTextFormatWithId_(ASTextViewImpl *self, id objValue) {
  [self applyAttributeCommandWithNSString:@"text" withNSString:ASCommonConverters_command_textformatter withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"textFormat" } count:1 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ (NSString *) cast_chk(objValue, [NSString class]) } count:1 type:NSObject_class_()]];
}

void ASTextViewImpl_createLabelWithJavaUtilMap_withADTextView_(ASTextViewImpl *self, id<JavaUtilMap> params, ADTextView *measurableView) {
  self.uiView = [ASUILabel new];
  ((ASUILabel*)self.uiView).numberOfLines = 0;
  ((ASUILabel*)self.uiView).lineBreakMode = NSLineBreakByClipping;
}

void ASTextViewImpl_nativeCreateWithJavaUtilMap_(ASTextViewImpl *self, id<JavaUtilMap> params) {
  ASTextViewImpl_initHtmlWithJavaUtilMap_(self, params);
  ASTextViewImpl_createLabelWithJavaUtilMap_withADTextView_(self, params, (ADTextView *) cast_chk([self asWidget], [ADTextView class]));
  [((ADTextView *) nil_chk(self->measurableView_)) setVerticalAligmentWithASBaseMeasurableView_VerticalAligment:JreLoadEnum(ASBaseMeasurableView_VerticalAligment, top)];
  [self registerForAttributeCommandChainWithNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"text" } count:1 type:NSString_class_()]];
  [self registerForAttributeCommandChainWithPhaseWithNSString:@"predraw" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableStart", @"drawableEnd", @"drawableLeft", @"drawableTop", @"drawableRight", @"drawableBottom", @"drawablePadding", @"drawableTint", @"drawableTintMode" } count:9 type:NSString_class_()]];
}

void ASTextViewImpl_handleHtmlTextWithNSString_(ASTextViewImpl *self, NSString *text) {
  ASTextViewImpl_nativeSetHtmlTextWithId_(self, [((id<ASAttributedString>) nil_chk(ASHtml_fromHtmlWithNSString_withJavaUtilMap_withASIFragment_(text, self->htmlConfig_, self->fragment_))) get]);
}

void ASTextViewImpl_nativeSetTextWithNSString_(ASTextViewImpl *self, NSString *text) {
  [((ASUILabel*)self->uiView_) setText:text];
}

void ASTextViewImpl_nativeSetHtmlTextWithId_(ASTextViewImpl *self, id text) {
  [((ASUILabel*)self->uiView_) setAttributedText : (NSMutableAttributedString*)text];
}

id ASTextViewImpl_getMyText(ASTextViewImpl *self) {
  return ((ASUILabel*)self.uiView).text;
}

id ASTextViewImpl_getPaddingTop(ASTextViewImpl *self) {
  return JavaLangInteger_valueOfWithInt_([((ADView *) nil_chk(((ADView *) cast_chk([self asWidget], [ADView class])))) getPaddingTop]);
}

id ASTextViewImpl_getPaddingEnd(ASTextViewImpl *self) {
  return JavaLangInteger_valueOfWithInt_([((ADView *) nil_chk(((ADView *) cast_chk([self asWidget], [ADView class])))) getPaddingEnd]);
}

id ASTextViewImpl_getPaddingStart(ASTextViewImpl *self) {
  return JavaLangInteger_valueOfWithInt_([((ADView *) nil_chk(((ADView *) cast_chk([self asWidget], [ADView class])))) getPaddingStart]);
}

id ASTextViewImpl_getPaddingLeft(ASTextViewImpl *self) {
  return JavaLangInteger_valueOfWithInt_([((ADView *) nil_chk(((ADView *) cast_chk([self asWidget], [ADView class])))) getPaddingLeft]);
}

id ASTextViewImpl_getPaddingRight(ASTextViewImpl *self) {
  return JavaLangInteger_valueOfWithInt_([((ADView *) nil_chk(((ADView *) cast_chk([self asWidget], [ADView class])))) getPaddingRight]);
}

id ASTextViewImpl_getPaddingBottom(ASTextViewImpl *self) {
  return JavaLangInteger_valueOfWithInt_([((ADView *) nil_chk(((ADView *) cast_chk([self asWidget], [ADView class])))) getPaddingBottom]);
}

void ASTextViewImpl_setPaddingVerticalWithId_(ASTextViewImpl *self, id objValue) {
  [self setPaddingTopWithId:objValue];
  [self setPaddingBottomWithId:objValue];
}

void ASTextViewImpl_setPaddingHorizontalWithId_(ASTextViewImpl *self, id objValue) {
  [self setPaddingLeftWithId:objValue];
  [self setPaddingRightWithId:objValue];
}

void ASTextViewImpl_setPaddingEndWithId_(ASTextViewImpl *self, id objValue) {
  [self setPaddingRightWithId:objValue];
}

void ASTextViewImpl_setPaddingStartWithId_(ASTextViewImpl *self, id objValue) {
  [self setPaddingLeftWithId:objValue];
}

id ASTextViewImpl_getTextSize(ASTextViewImpl *self) {
  return [JavaLangFloat valueOfWithFloat:((ASUILabel*)self.uiView).font.pointSize];
}

void ASTextViewImpl_setMyTextSizeWithId_(ASTextViewImpl *self, id objValue) {
  float fontSize = [((JavaLangFloat *) nil_chk(((JavaLangFloat *) cast_chk(objValue, [JavaLangFloat class])))) floatValue] * [((id<ASIActivity>) nil_chk([((id<ASIFragment>) nil_chk([self getFragment])) getRootActivity])) getScaleFactor];
  ASTextViewImpl_nativeSetTextSizeWithInt_(self, JreFpToInt(fontSize));
}

void ASTextViewImpl_nativeSetTextSizeWithInt_(ASTextViewImpl *self, int32_t value) {
  [((ASUILabel*)self.uiView) setFont: [((ASUILabel*)self.uiView).font fontWithSize: value]];
}

void ASTextViewImpl_setVerticalAligmentCenter(ASTextViewImpl *self) {
  [((ADTextView *) nil_chk(self->measurableView_)) setVerticalAligmentWithASBaseMeasurableView_VerticalAligment:JreLoadEnum(ASBaseMeasurableView_VerticalAligment, middle)];
  ASTextViewImpl_nativeSetVerticalAligmentCenter(self);
}

void ASTextViewImpl_setVerticalAligmentBottom(ASTextViewImpl *self) {
  [((ADTextView *) nil_chk(self->measurableView_)) setVerticalAligmentWithASBaseMeasurableView_VerticalAligment:JreLoadEnum(ASBaseMeasurableView_VerticalAligment, bottom)];
  ASTextViewImpl_nativeSetVerticalAligmentBottom(self);
}

void ASTextViewImpl_setVerticalAligmentTop(ASTextViewImpl *self) {
  [((ADTextView *) nil_chk(self->measurableView_)) setVerticalAligmentWithASBaseMeasurableView_VerticalAligment:JreLoadEnum(ASBaseMeasurableView_VerticalAligment, top)];
  ASTextViewImpl_nativeSetVerticalAligmentTop(self);
}

void ASTextViewImpl_setHorizontalAligmentCenter(ASTextViewImpl *self) {
  ((ASUILabel*)self.uiView).textAlignment = NSTextAlignmentCenter;
}

void ASTextViewImpl_setHorizontalAligmentRight(ASTextViewImpl *self) {
  ASTextViewImpl_setHorizontalAligmentRightInternal(self);
}

void ASTextViewImpl_setHorizontalAligmentRightInternal(ASTextViewImpl *self) {
  ((ASUILabel*)self.uiView).textAlignment = NSTextAlignmentRight;
}

void ASTextViewImpl_setHorizontalAligmentLeft(ASTextViewImpl *self) {
  ASTextViewImpl_setHorizontalAligmentLeftInternal(self);
}

void ASTextViewImpl_setHorizontalAligmentLeftInternal(ASTextViewImpl *self) {
  ((ASUILabel*)self.uiView).textAlignment = NSTextAlignmentLeft;
}

int32_t ASTextViewImpl_getTextAlignment(ASTextViewImpl *self) {
  int alignment = (int) ((ASUILabel*)self.uiView).textAlignment;
  
  if (alignment == NSTextAlignmentCenter) {
    return 2;
  }
  
  if (alignment == NSTextAlignmentLeft) {
    return 0;
  }
  
  if (alignment == NSTextAlignmentRight) {
    return 1;
  }
  
  return 0;
}

void ASTextViewImpl_nativeSetVerticalAligmentBottom(ASTextViewImpl *self) {
}

void ASTextViewImpl_nativeSetVerticalAligmentTop(ASTextViewImpl *self) {
}

void ASTextViewImpl_nativeSetVerticalAligmentCenter(ASTextViewImpl *self) {
}

void ASTextViewImpl_addMinMaxListener(ASTextViewImpl *self) {
}

int32_t ASTextViewImpl_getLineHeight(ASTextViewImpl *self) {
  return ceil(((ASUILabel*)self.uiView).font.lineHeight);
}

int32_t ASTextViewImpl_getBorderWidth(ASTextViewImpl *self) {
  return 0;
}

id ASTextViewImpl_getEllipsize(ASTextViewImpl *self) {
  if ([((NSString *) nil_chk(self->ellipsize_)) isEqual:@"marquee"]) {
    return JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, NSLineBreakByMarquee));
  }
  return ASTextViewImpl_nativeGetLinBreakMode(self);
}

void ASTextViewImpl_setEllipsizeWithId_withNSString_(ASTextViewImpl *self, id objValue, NSString *strValue) {
  self->ellipsize_ = strValue;
  int32_t lineBreakMode = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
  if (lineBreakMode == JreLoadStatic(ASLayoutNativeVars, NSLineBreakByMarquee)) {
    lineBreakMode = JreLoadStatic(ASLayoutNativeVars, NSLineBreakByClipping);
  }
  if (ASViewImpl_isRTLLayoutDirectionWithASIWidget_(self)) {
    if (lineBreakMode == JreLoadStatic(ASLayoutNativeVars, NSLineBreakByTruncatingTail)) {
      lineBreakMode = JreLoadStatic(ASLayoutNativeVars, NSLineBreakByTruncatingHead);
    }
    else if (lineBreakMode == JreLoadStatic(ASLayoutNativeVars, NSLineBreakByTruncatingHead)) {
      lineBreakMode = JreLoadStatic(ASLayoutNativeVars, NSLineBreakByTruncatingTail);
    }
  }
  ASTextViewImpl_nativeSetLineBreakModeWithInt_(self, lineBreakMode);
  ASTextViewImpl_cancelTimer(self);
  if ([((NSString *) nil_chk(strValue)) isEqual:@"marquee"]) {
    ASTextViewImpl_startTimer(self);
  }
}

JavaLangInteger *ASTextViewImpl_nativeGetLinBreakMode(ASTextViewImpl *self) {
  return [JavaLangInteger valueOfWithInt:(jint) ((ASUILabel*)self->uiView_).lineBreakMode];
}

void ASTextViewImpl_nativeSetLineBreakModeWithInt_(ASTextViewImpl *self, int32_t lineBreakMode) {
  [((ASUILabel*)self->uiView_) setLineBreakMode:lineBreakMode];
}

void ASTextViewImpl_setJustificationModeWithId_withNSString_(ASTextViewImpl *self, id objValue, NSString *strValue) {
  ASTextViewImpl_nativeSetTextAligmentWithInt_(self, [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]);
}

void ASTextViewImpl_nativeSetTextAligmentWithInt_(ASTextViewImpl *self, int32_t textAlignment) {
  [((ASUILabel*)self->uiView_) setTextAlignment:textAlignment];
}

id ASTextViewImpl_getJustificationMode(ASTextViewImpl *self) {
  return ASTextViewImpl_nativeGetTextAligment(self);
}

JavaLangInteger *ASTextViewImpl_nativeGetTextAligment(ASTextViewImpl *self) {
  return [JavaLangInteger valueOfWithInt:(jint)((ASUILabel*)self->uiView_).textAlignment];
}

void ASTextViewImpl_setShadowDyWithJavaLangFloat_withNSString_(ASTextViewImpl *self, JavaLangFloat *objValue, NSString *strValue) {
  ASUILabel* label = ((ASUILabel*)self->uiView_);
  [label setShadowOffset:CGSizeMake(label.shadowOffset.width, [objValue floatValue])];
}

void ASTextViewImpl_setShadowDxWithJavaLangFloat_withNSString_(ASTextViewImpl *self, JavaLangFloat *objValue, NSString *strValue) {
  ASUILabel* label = ((ASUILabel*)self->uiView_);
  [label setShadowOffset:CGSizeMake([objValue floatValue], label.shadowOffset.height)];
}

id ASTextViewImpl_getShadowDy(ASTextViewImpl *self) {
  return [JavaLangFloat valueOfWithFloat:(jint)((ASUILabel*)self->uiView_).shadowOffset.height];
}

id ASTextViewImpl_getShadowDx(ASTextViewImpl *self) {
  return [JavaLangFloat valueOfWithFloat:(jint)((ASUILabel*)self->uiView_).shadowOffset.width];
}

void ASTextViewImpl_setSingleLineWithId_(ASTextViewImpl *self, id objValue) {
  if (objValue != nil && [(JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]) booleanValue]) {
    [self setNumberOfLinesWithId:[self asNativeWidget] withId:JavaLangInteger_valueOfWithInt_(1)];
  }
  else {
    [self setNumberOfLinesWithId:[self asNativeWidget] withId:JavaLangInteger_valueOfWithInt_(0)];
  }
}

id ASTextViewImpl_getSingleLine(ASTextViewImpl *self) {
  return [JavaLangBoolean valueOfWithBoolean:((ASUILabel*)self.uiView).numberOfLines == 1];
}

void ASTextViewImpl_setEnabledWithId_(ASTextViewImpl *self, id objValue) {
  [self setIsEnabledWithId:[self asNativeWidget] withId:objValue];
}

NSString *ASTextViewImpl_toUpperCaseWithNSString_(NSString *text) {
  ASTextViewImpl_initialize();
  return [((NSString *) nil_chk(text)) java_uppercaseStringWithJRELocale:JavaUtilLocale_getDefault()];
}

int32_t ASTextViewImpl_nativeGetFontSize(ASTextViewImpl *self) {
  return JreFpToInt(JavaLangMath_ceilWithDouble_([((JavaLangFloat *) nil_chk((JavaLangFloat *) cast_chk(ASTextViewImpl_getTextSize(self), [JavaLangFloat class]))) floatValue]));
}

int32_t ASTextViewImpl_nativeGetFontStyle(ASTextViewImpl *self) {
  ASUILabel* label = ((ASUILabel*)self->uiView_);
  return label.font.fontDescriptor.symbolicTraits;
}

void ASTextViewImpl_nativeSetCustomFontWithInt_withASFontDescriptor_(ASTextViewImpl *self, int32_t height, ASFontDescriptor *fontDescriptor) {
  ASUILabel* label = ((ASUILabel*)self->uiView_);
  UIFont* font = [UIFont fontWithName:[fontDescriptor getName] size:height];
  if (font == nil) {
    [NSException raise:@"InitNotImplemented" format:@"%@", [NSString stringWithFormat:@"Failed to load the %@ font. Make sure the font file is included in the project and the font name is spelled correctly.", [fontDescriptor getName]]];
  }
  if ([fontDescriptor getStyle] != 0) {
    UIFontDescriptor* fontD = [font.fontDescriptor fontDescriptorWithSymbolicTraits:[fontDescriptor getStyle]];
    ((ASUILabel*)label).font = [UIFont fontWithDescriptor:fontD size:0];
  } else {
    ((ASUILabel*)label).font = font;
  }
}

void ASTextViewImpl_nativeSetFontStyleWithInt_(ASTextViewImpl *self, int32_t style) {
  ASUILabel* label = ((ASUILabel*)self->uiView_);
  UIFontDescriptor* fontD = [label.font.fontDescriptor fontDescriptorWithSymbolicTraits:style];
  ((ASUILabel*)label).font = [UIFont fontWithDescriptor:fontD size:0];
}

void ASTextViewImpl_setDrawablePaddingWithId_(ASTextViewImpl *self, id objValue) {
  [((ADTextView *) nil_chk(self->measurableView_)) setDrawablePaddingWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
  [self updatePadding];
}

void ASTextViewImpl_setDrawableBottomWithId_(ASTextViewImpl *self, id objValue) {
  if ([@"@null" isEqual:objValue]) {
    [((ADTextView *) nil_chk(self->measurableView_)) setBottomDrawableWithADDrawable:nil];
    [self applyAttributeCommandWithNSString:@"drawableBottom" withNSString:@"drawDrawableIcon" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){  } count:0 type:NSString_class_()] withBoolean:false withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"bottom" } count:1 type:NSObject_class_()]];
  }
  else if (objValue != nil && [objValue isKindOfClass:[ADDrawable class]]) {
    [((ADTextView *) nil_chk(self->measurableView_)) setBottomDrawableWithADDrawable:(ADDrawable *) cast_chk(objValue, [ADDrawable class])];
    [self applyAttributeCommandWithNSString:@"drawableBottom" withNSString:@"drawDrawableIcon" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){  } count:0 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"bottom" } count:1 type:NSObject_class_()]];
    [self updatePadding];
  }
}

void ASTextViewImpl_setDrawableTopWithId_(ASTextViewImpl *self, id objValue) {
  if ([@"@null" isEqual:objValue]) {
    [((ADTextView *) nil_chk(self->measurableView_)) setTopDrawableWithADDrawable:nil];
    [self applyAttributeCommandWithNSString:@"drawableTop" withNSString:@"drawDrawableIcon" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){  } count:0 type:NSString_class_()] withBoolean:false withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"top" } count:1 type:NSObject_class_()]];
  }
  else if (objValue != nil && [objValue isKindOfClass:[ADDrawable class]]) {
    [((ADTextView *) nil_chk(self->measurableView_)) setTopDrawableWithADDrawable:(ADDrawable *) cast_chk(objValue, [ADDrawable class])];
    [self applyAttributeCommandWithNSString:@"drawableTop" withNSString:@"drawDrawableIcon" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){  } count:0 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"top" } count:1 type:NSObject_class_()]];
    [self updatePadding];
  }
}

void ASTextViewImpl_setDrawableRightWithNSString_withId_(ASTextViewImpl *self, NSString *originalAttr, id objValue) {
  if (ASViewImpl_isRTLLayoutWithASIWidget_(self)) {
    ASTextViewImpl_setDrawableLeftInternalWithNSString_withId_(self, originalAttr, objValue);
  }
  else {
    ASTextViewImpl_setDrawableRightInternalWithNSString_withId_(self, originalAttr, objValue);
  }
}

void ASTextViewImpl_setDrawableRightInternalWithNSString_withId_(ASTextViewImpl *self, NSString *originalAttr, id objValue) {
  if ([@"@null" isEqual:objValue]) {
    [((ADTextView *) nil_chk(self->measurableView_)) setRightDrawableWithADDrawable:nil];
    [self applyAttributeCommandWithNSString:originalAttr withNSString:@"drawDrawableIcon" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){  } count:0 type:NSString_class_()] withBoolean:false withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"right" } count:1 type:NSObject_class_()]];
  }
  else if (objValue != nil && [objValue isKindOfClass:[ADDrawable class]]) {
    [((ADTextView *) nil_chk(self->measurableView_)) setRightDrawableWithADDrawable:(ADDrawable *) cast_chk(objValue, [ADDrawable class])];
    [self applyAttributeCommandWithNSString:originalAttr withNSString:@"drawDrawableIcon" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){  } count:0 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"right" } count:1 type:NSObject_class_()]];
    [self updatePadding];
  }
}

void ASTextViewImpl_setDrawableLeftWithNSString_withId_(ASTextViewImpl *self, NSString *originalAttr, id objValue) {
  if (objValue != nil) {
    if (ASViewImpl_isRTLLayoutWithASIWidget_(self)) {
      ASTextViewImpl_setDrawableRightInternalWithNSString_withId_(self, originalAttr, objValue);
    }
    else {
      ASTextViewImpl_setDrawableLeftInternalWithNSString_withId_(self, originalAttr, objValue);
    }
  }
}

void ASTextViewImpl_setDrawableLeftInternalWithNSString_withId_(ASTextViewImpl *self, NSString *originalAttr, id objValue) {
  if ([@"@null" isEqual:objValue]) {
    [((ADTextView *) nil_chk(self->measurableView_)) setLeftDrawableWithADDrawable:nil];
    [self applyAttributeCommandWithNSString:originalAttr withNSString:@"drawDrawableIcon" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){  } count:0 type:NSString_class_()] withBoolean:false withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"left" } count:1 type:NSObject_class_()]];
  }
  else if (objValue != nil && [objValue isKindOfClass:[ADDrawable class]]) {
    [((ADTextView *) nil_chk(self->measurableView_)) setLeftDrawableWithADDrawable:(ADDrawable *) cast_chk(objValue, [ADDrawable class])];
    [self applyAttributeCommandWithNSString:originalAttr withNSString:@"drawDrawableIcon" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){  } count:0 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"left" } count:1 type:NSObject_class_()]];
    [self updatePadding];
  }
}

int32_t ASTextViewImpl_getImageHeightWithId_(ASTextViewImpl *self, id objValue) {
  if ([objValue isKindOfClass:[UIImage class]]) {
    UIImage* image = ((UIImage*) objValue);
    return image.size.height;
  }
  
  return 0;
}

int32_t ASTextViewImpl_getImageWidthWithId_(ASTextViewImpl *self, id objValue) {
  if ([objValue isKindOfClass:[UIImage class]]) {
    UIImage* image = ((UIImage*) objValue);
    return image.size.width;
  }
  
  return 0;
}

id ASTextViewImpl_getDrawablePadding(ASTextViewImpl *self) {
  return JavaLangInteger_valueOfWithInt_([((ADTextView *) nil_chk(self->measurableView_)) getDrawablePadding]);
}

void ASTextViewImpl_setDrawableTintModeWithId_(ASTextViewImpl *self, id value) {
  if ([((ADTextView *) nil_chk(self->measurableView_)) getLeftDrawable] != nil) {
    [self applyAttributeCommandWithNSString:@"drawableStart" withNSString:@"cgTintColor" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTintMode" } count:1 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTintMode", value } count:2 type:NSObject_class_()]];
    [self applyAttributeCommandWithNSString:@"drawableLeft" withNSString:@"cgTintColor" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTintMode" } count:1 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTintMode", value } count:2 type:NSObject_class_()]];
  }
  if ([((ADTextView *) nil_chk(self->measurableView_)) getRightDrawable] != nil) {
    [self applyAttributeCommandWithNSString:@"drawableRight" withNSString:@"cgTintColor" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTintMode" } count:1 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTintMode", value } count:2 type:NSObject_class_()]];
    [self applyAttributeCommandWithNSString:@"drawableEnd" withNSString:@"cgTintColor" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTintMode" } count:1 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTintMode", value } count:2 type:NSObject_class_()]];
  }
  if ([((ADTextView *) nil_chk(self->measurableView_)) getTopDrawable] != nil) {
    [self applyAttributeCommandWithNSString:@"drawableTop" withNSString:@"cgTintColor" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTintMode" } count:1 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTintMode", value } count:2 type:NSObject_class_()]];
  }
  if ([((ADTextView *) nil_chk(self->measurableView_)) getBottomDrawable] != nil) {
    [self applyAttributeCommandWithNSString:@"drawableBottom" withNSString:@"cgTintColor" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTintMode" } count:1 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTintMode", value } count:2 type:NSObject_class_()]];
  }
}

void ASTextViewImpl_setDrawableTintWithId_(ASTextViewImpl *self, id objValue) {
  if ([objValue isKindOfClass:[ADColorStateList class]]) {
    ADColorStateList *colorStateList = (ADColorStateList *) objValue;
    self->drawableTint_ = colorStateList;
    objValue = JavaLangInteger_valueOfWithInt_([((ADColorStateList *) nil_chk(self->drawableTint_)) getColorForStateWithIntArray:[((ADTextView *) nil_chk(self->measurableView_)) getDrawableState] withInt:ADColor_RED]);
  }
  if ([((ADTextView *) nil_chk(self->measurableView_)) getLeftDrawable] != nil) {
    [self applyAttributeCommandWithNSString:@"drawableLeft" withNSString:@"cgTintColor" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTint" } count:1 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTint", ASViewImpl_getColorWithId_(objValue) } count:2 type:NSObject_class_()]];
    [self applyAttributeCommandWithNSString:@"drawableStart" withNSString:@"cgTintColor" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTint" } count:1 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTint", ASViewImpl_getColorWithId_(objValue) } count:2 type:NSObject_class_()]];
  }
  if ([((ADTextView *) nil_chk(self->measurableView_)) getRightDrawable] != nil) {
    [self applyAttributeCommandWithNSString:@"drawableRight" withNSString:@"cgTintColor" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTint" } count:1 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTint", ASViewImpl_getColorWithId_(objValue) } count:2 type:NSObject_class_()]];
    [self applyAttributeCommandWithNSString:@"drawableEnd" withNSString:@"cgTintColor" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTint" } count:1 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTint", ASViewImpl_getColorWithId_(objValue) } count:2 type:NSObject_class_()]];
  }
  if ([((ADTextView *) nil_chk(self->measurableView_)) getTopDrawable] != nil) {
    [self applyAttributeCommandWithNSString:@"drawableTop" withNSString:@"cgTintColor" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTint" } count:1 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTint", ASViewImpl_getColorWithId_(objValue) } count:2 type:NSObject_class_()]];
  }
  if ([((ADTextView *) nil_chk(self->measurableView_)) getBottomDrawable] != nil) {
    [self applyAttributeCommandWithNSString:@"drawableBottom" withNSString:@"cgTintColor" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTint" } count:1 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTint", ASViewImpl_getColorWithId_(objValue) } count:2 type:NSObject_class_()]];
  }
}

void ASTextViewImpl_setScrollHorizontallyWithId_(ASTextViewImpl *self, id objValue) {
  [((ADTextView *) nil_chk(self->measurableView_)) setHorizontallyScrollingWithBoolean:objValue != nil && [(JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]) booleanValue]];
}

bool ASTextViewImpl_canMarquee(ASTextViewImpl *self) {
  return [nil_chk(ASTextViewImpl_getSingleLine(self)) isEqual:JreLoadStatic(JavaLangBoolean, TRUE)];
}

void ASTextViewImpl_cancelNativeTimer(ASTextViewImpl *self) {
  if (self->timer_ != nil) {
    [(NSTimer*) self->timer_ invalidate];
    self->timer_ = nil;
  }
}

bool ASTextViewImpl_isDisposed(ASTextViewImpl *self) {
  return self->isDisposed_;
}

void ASTextViewImpl_addDeallocHandler(ASTextViewImpl *self) {
  if (self->dellocHandler_ == nil) {
    NSString *type = [((ASEvent_StandardEvents *) nil_chk(JreLoadEnum(ASEvent_StandardEvents, dealloc))) description];
    self->dellocHandler_ = new_ASTextViewImpl_DellocHandler_initWithASTextViewImpl_withNSString_(self, type);
    [((ASEventBus *) nil_chk([((id<ASIFragment>) nil_chk(self->fragment_)) getEventBus])) onWithNSString:type withASEventBusHandlerArray:[IOSObjectArray newArrayWithObjects:(id[]){ self->dellocHandler_ } count:1 type:ASEventBusHandler_class_()]];
  }
}

void ASTextViewImpl_schedule(ASTextViewImpl *self) {
  if (self->timer_ == nil) {
    self->timer_ = [NSTimer scheduledTimerWithTimeInterval:0.1
    target:self
    selector:@selector(onTick:)
    userInfo:nil
    repeats:YES];
    [[NSRunLoop mainRunLoop] addTimer:self->timer_ forMode:NSRunLoopCommonModes];
  }
}

void ASTextViewImpl_executeOnMainThreadWithJavaLangRunnable_(ASTextViewImpl *self, id<JavaLangRunnable> runnable) {
  [((id<JavaLangRunnable>) nil_chk(runnable)) run];
}

void ASTextViewImpl_setTextColorWithId_(ASTextViewImpl *self, id objValue) {
  if ([objValue isKindOfClass:[ADColorStateList class]]) {
    ADColorStateList *colorStateList = (ADColorStateList *) objValue;
    [((ADTextView *) nil_chk(self->measurableView_)) setTextColorWithADColorStateList:colorStateList];
    objValue = JavaLangInteger_valueOfWithInt_([((ADTextView *) nil_chk(self->measurableView_)) getCurrentTextColor]);
  }
  [self setTextColorWithId:self->uiView_ withId:ASViewImpl_getColorWithId_(objValue)];
}

id ASTextViewImpl_getTextColorState(ASTextViewImpl *self) {
  return [((ADTextView *) nil_chk(self->measurableView_)) getTextColors];
}

void ASTextViewImpl_drawableStateChangeWithNSString_withADDrawable_(ASTextViewImpl *self, NSString *type, ADDrawable *dr) {
  IOSIntArray *state = [((ADTextView *) nil_chk(self->measurableView_)) getDrawableState];
  if (dr != nil && [dr isStateful] && [dr setStateWithIntArray:state]) {
    switch (JreIndexOfStr(type, (id[]){ @"bottom", @"top", @"left", @"right" }, 4)) {
      case 0:
      ASTextViewImpl_setDrawableBottomWithId_(self, dr);
      break;
      case 1:
      ASTextViewImpl_setDrawableTopWithId_(self, dr);
      break;
      case 2:
      ASTextViewImpl_setDrawableLeftWithNSString_withId_(self, @"drawableLeft", dr);
      break;
      case 3:
      ASTextViewImpl_setDrawableRightWithNSString_withId_(self, @"drawableRight", dr);
      break;
      default:
      break;
    }
  }
  [self invalidate];
}

void ASTextViewImpl_setHintColorWithInt_(ASTextViewImpl *self, int32_t currentHintTextColor) {
}

void ASTextViewImpl_syncPlaceholderLabel(ASTextViewImpl *self) {
}

int32_t ASTextViewImpl_nativeGetBaseLine(ASTextViewImpl *self) {
  ASUILabel* label = ((ASUILabel*)self->uiView_);
  return label.font.ascender;
}

id ASTextViewImpl_getFont(ASTextViewImpl *self) {
  ASUILabel* label = ((ASUILabel*)self->uiView_);
  return label.font;
}

void ASTextViewImpl_setTextColorLinkWithADColorStateList_(ASTextViewImpl *self, ADColorStateList *linkTextColors) {
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASTextViewImpl)

J2OBJC_NAME_MAPPING(ASTextViewImpl, "com.ashera.layout", "AS")

@implementation ASTextViewImpl_AutoSizeTextType

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASTextViewImpl_AutoSizeTextType_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilMap>)getMapping {
  return mapping_;
}

- (JavaLangInteger *)getDefault {
  return JavaLangInteger_valueOfWithInt_(0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMapping);
  methods[2].selector = @selector(getDefault);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapping_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "LASTextViewImpl;" };
  static const J2ObjcClassInfo _ASTextViewImpl_AutoSizeTextType = { "AutoSizeTextType", "com.ashera.layout", ptrTable, methods, fields, 7, 0x18, 3, 1, 2, -1, -1, -1, -1 };
  return &_ASTextViewImpl_AutoSizeTextType;
}

@end

void ASTextViewImpl_AutoSizeTextType_init(ASTextViewImpl_AutoSizeTextType *self) {
  ASAbstractEnumToIntConverter_init(self);
  self->mapping_ = new_JavaUtilHashMap_init();
  {
    (void) [self->mapping_ putWithId:@"none" withId:JavaLangInteger_valueOfWithInt_((int32_t) 0x0)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"uniform" withId:JavaLangInteger_valueOfWithInt_((int32_t) 0x1)];
  }
}

ASTextViewImpl_AutoSizeTextType *new_ASTextViewImpl_AutoSizeTextType_init() {
  J2OBJC_NEW_IMPL(ASTextViewImpl_AutoSizeTextType, init)
}

ASTextViewImpl_AutoSizeTextType *create_ASTextViewImpl_AutoSizeTextType_init() {
  J2OBJC_CREATE_IMPL(ASTextViewImpl_AutoSizeTextType, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASTextViewImpl_AutoSizeTextType)

@implementation ASTextViewImpl_Ellipsize

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASTextViewImpl_Ellipsize_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilMap>)getMapping {
  return mapping_;
}

- (JavaLangInteger *)getDefault {
  return JavaLangInteger_valueOfWithInt_(0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMapping);
  methods[2].selector = @selector(getDefault);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapping_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "LASTextViewImpl;" };
  static const J2ObjcClassInfo _ASTextViewImpl_Ellipsize = { "Ellipsize", "com.ashera.layout", ptrTable, methods, fields, 7, 0x18, 3, 1, 2, -1, -1, -1, -1 };
  return &_ASTextViewImpl_Ellipsize;
}

@end

void ASTextViewImpl_Ellipsize_init(ASTextViewImpl_Ellipsize *self) {
  ASAbstractEnumToIntConverter_init(self);
  self->mapping_ = new_JavaUtilHashMap_init();
  {
    (void) [self->mapping_ putWithId:@"end" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, NSLineBreakByTruncatingTail))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"marquee" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, NSLineBreakByMarquee))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"middle" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, NSLineBreakByTruncatingMiddle))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"none" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, NSLineBreakByClipping))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"start" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, NSLineBreakByTruncatingHead))];
  }
}

ASTextViewImpl_Ellipsize *new_ASTextViewImpl_Ellipsize_init() {
  J2OBJC_NEW_IMPL(ASTextViewImpl_Ellipsize, init)
}

ASTextViewImpl_Ellipsize *create_ASTextViewImpl_Ellipsize_init() {
  J2OBJC_CREATE_IMPL(ASTextViewImpl_Ellipsize, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASTextViewImpl_Ellipsize)

@implementation ASTextViewImpl_MarqueeRepeatLimit

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASTextViewImpl_MarqueeRepeatLimit_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilMap>)getMapping {
  return mapping_;
}

- (JavaLangInteger *)getDefault {
  return JavaLangInteger_valueOfWithInt_(0);
}

- (bool)supportsIntAlso {
  return true;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMapping);
  methods[2].selector = @selector(getDefault);
  methods[3].selector = @selector(supportsIntAlso);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapping_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "LASTextViewImpl;" };
  static const J2ObjcClassInfo _ASTextViewImpl_MarqueeRepeatLimit = { "MarqueeRepeatLimit", "com.ashera.layout", ptrTable, methods, fields, 7, 0x18, 4, 1, 2, -1, -1, -1, -1 };
  return &_ASTextViewImpl_MarqueeRepeatLimit;
}

@end

void ASTextViewImpl_MarqueeRepeatLimit_init(ASTextViewImpl_MarqueeRepeatLimit *self) {
  ASAbstractEnumToIntConverter_init(self);
  self->mapping_ = new_JavaUtilHashMap_init();
  {
    (void) [self->mapping_ putWithId:@"marquee_forever" withId:JavaLangInteger_valueOfWithInt_((int32_t) 0xffffffff)];
  }
}

ASTextViewImpl_MarqueeRepeatLimit *new_ASTextViewImpl_MarqueeRepeatLimit_init() {
  J2OBJC_NEW_IMPL(ASTextViewImpl_MarqueeRepeatLimit, init)
}

ASTextViewImpl_MarqueeRepeatLimit *create_ASTextViewImpl_MarqueeRepeatLimit_init() {
  J2OBJC_CREATE_IMPL(ASTextViewImpl_MarqueeRepeatLimit, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASTextViewImpl_MarqueeRepeatLimit)

@implementation ASTextViewImpl_JustificationMode

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASTextViewImpl_JustificationMode_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilMap>)getMapping {
  return mapping_;
}

- (JavaLangInteger *)getDefault {
  return JavaLangInteger_valueOfWithInt_(0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMapping);
  methods[2].selector = @selector(getDefault);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapping_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "LASTextViewImpl;" };
  static const J2ObjcClassInfo _ASTextViewImpl_JustificationMode = { "JustificationMode", "com.ashera.layout", ptrTable, methods, fields, 7, 0x18, 3, 1, 2, -1, -1, -1, -1 };
  return &_ASTextViewImpl_JustificationMode;
}

@end

void ASTextViewImpl_JustificationMode_init(ASTextViewImpl_JustificationMode *self) {
  ASAbstractEnumToIntConverter_init(self);
  self->mapping_ = new_JavaUtilHashMap_init();
  {
    (void) [self->mapping_ putWithId:@"inter_word" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, NSTextAlignmentJustified))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"none" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, NSTextAlignmentLeft))];
  }
}

ASTextViewImpl_JustificationMode *new_ASTextViewImpl_JustificationMode_init() {
  J2OBJC_NEW_IMPL(ASTextViewImpl_JustificationMode, init)
}

ASTextViewImpl_JustificationMode *create_ASTextViewImpl_JustificationMode_init() {
  J2OBJC_CREATE_IMPL(ASTextViewImpl_JustificationMode, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASTextViewImpl_JustificationMode)

@implementation ASTextViewImpl_Font

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASTextViewImpl_Font_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilMap>)getMapping {
  return mapping_;
}

- (JavaLangInteger *)getDefault {
  return JavaLangInteger_valueOfWithInt_(0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMapping);
  methods[2].selector = @selector(getDefault);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapping_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "LASTextViewImpl;" };
  static const J2ObjcClassInfo _ASTextViewImpl_Font = { "Font", "com.ashera.layout", ptrTable, methods, fields, 7, 0x18, 3, 1, 2, -1, -1, -1, -1 };
  return &_ASTextViewImpl_Font;
}

@end

void ASTextViewImpl_Font_init(ASTextViewImpl_Font *self) {
  ASAbstractEnumToIntConverter_init(self);
  self->mapping_ = new_JavaUtilHashMap_init();
  {
    (void) [self->mapping_ putWithId:@"monospace" withId:JavaLangInteger_valueOfWithInt_((int32_t) 0x3)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"normal" withId:JavaLangInteger_valueOfWithInt_((int32_t) 0x0)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"sans" withId:JavaLangInteger_valueOfWithInt_((int32_t) 0x1)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"serif" withId:JavaLangInteger_valueOfWithInt_((int32_t) 0x2)];
  }
}

ASTextViewImpl_Font *new_ASTextViewImpl_Font_init() {
  J2OBJC_NEW_IMPL(ASTextViewImpl_Font, init)
}

ASTextViewImpl_Font *create_ASTextViewImpl_Font_init() {
  J2OBJC_CREATE_IMPL(ASTextViewImpl_Font, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASTextViewImpl_Font)

@implementation ASTextViewImpl_TextStyle

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASTextViewImpl_TextStyle_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilMap>)getMapping {
  return mapping_;
}

- (JavaLangInteger *)getDefault {
  return JavaLangInteger_valueOfWithInt_(0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMapping);
  methods[2].selector = @selector(getDefault);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapping_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "LASTextViewImpl;" };
  static const J2ObjcClassInfo _ASTextViewImpl_TextStyle = { "TextStyle", "com.ashera.layout", ptrTable, methods, fields, 7, 0x18, 3, 1, 2, -1, -1, -1, -1 };
  return &_ASTextViewImpl_TextStyle;
}

@end

void ASTextViewImpl_TextStyle_init(ASTextViewImpl_TextStyle *self) {
  ASAbstractBitFlagConverter_init(self);
  self->mapping_ = new_JavaUtilHashMap_init();
  {
    (void) [self->mapping_ putWithId:@"bold" withId:JavaLangInteger_valueOfWithInt_((int32_t) 0x1)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"italic" withId:JavaLangInteger_valueOfWithInt_((int32_t) 0x2)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"normal" withId:JavaLangInteger_valueOfWithInt_((int32_t) 0x0)];
  }
}

ASTextViewImpl_TextStyle *new_ASTextViewImpl_TextStyle_init() {
  J2OBJC_NEW_IMPL(ASTextViewImpl_TextStyle, init)
}

ASTextViewImpl_TextStyle *create_ASTextViewImpl_TextStyle_init() {
  J2OBJC_CREATE_IMPL(ASTextViewImpl_TextStyle, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASTextViewImpl_TextStyle)

@implementation ASTextViewImpl_DrawableTintMode

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASTextViewImpl_DrawableTintMode_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilMap>)getMapping {
  return mapping_;
}

- (JavaLangInteger *)getDefault {
  return JavaLangInteger_valueOfWithInt_(0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMapping);
  methods[2].selector = @selector(getDefault);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapping_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "LASTextViewImpl;" };
  static const J2ObjcClassInfo _ASTextViewImpl_DrawableTintMode = { "DrawableTintMode", "com.ashera.layout", ptrTable, methods, fields, 7, 0x18, 3, 1, 2, -1, -1, -1, -1 };
  return &_ASTextViewImpl_DrawableTintMode;
}

@end

void ASTextViewImpl_DrawableTintMode_init(ASTextViewImpl_DrawableTintMode *self) {
  ASAbstractEnumToIntConverter_init(self);
  self->mapping_ = new_JavaUtilHashMap_init();
  {
    (void) [self->mapping_ putWithId:@"add" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, kCGBlendModeOverlay))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"multiply" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, kCGBlendModeMultiply))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"screen" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, kCGBlendModeScreen))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"src_atop" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, kCGBlendModeSourceAtop))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"src_in" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, kCGBlendModeSourceIn))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"src_over" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, kCGBlendModeNormal))];
  }
}

ASTextViewImpl_DrawableTintMode *new_ASTextViewImpl_DrawableTintMode_init() {
  J2OBJC_NEW_IMPL(ASTextViewImpl_DrawableTintMode, init)
}

ASTextViewImpl_DrawableTintMode *create_ASTextViewImpl_DrawableTintMode_init() {
  J2OBJC_CREATE_IMPL(ASTextViewImpl_DrawableTintMode, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASTextViewImpl_DrawableTintMode)

@implementation ASTextViewImpl_TextViewExt

- (id<ASIWidget>)getWidget {
  return this$0_;
}

- (instancetype)initWithASTextViewImpl:(ASTextViewImpl *)outer$ {
  ASTextViewImpl_TextViewExt_initWithASTextViewImpl_(self, outer$);
  return self;
}

- (void)onMeasureWithInt:(int32_t)widthMeasureSpec
                 withInt:(int32_t)heightMeasureSpec {
  [super onMeasureWithInt:widthMeasureSpec withInt:heightMeasureSpec];
  id<ASIWidgetLifeCycleListener> listener = [this$0_ getListener];
  if (listener != nil) {
    [((ASMeasureEvent *) nil_chk(measureFinished_)) setWidthWithInt:[self getMeasuredWidth]];
    [((ASMeasureEvent *) nil_chk(measureFinished_)) setHeightWithInt:[self getMeasuredHeight]];
    [listener eventOccurredWithASIWidgetLifeCycleListener_EventId:JreLoadEnum(ASIWidgetLifeCycleListener_EventId, measureFinished) withASWidgetEvent:measureFinished_];
  }
}

- (void)onLayoutWithBoolean:(bool)changed
                    withInt:(int32_t)l
                    withInt:(int32_t)t
                    withInt:(int32_t)r
                    withInt:(int32_t)b {
  [super onLayoutWithBoolean:changed withInt:l withInt:t withInt:r withInt:b];
  ASViewImpl_setDrawableBoundsWithASIWidget_withInt_withInt_withInt_withInt_(this$0_, l, t, r, b);
  if (![self isOverlay]) {
    ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_([this$0_ asNativeWidget], l, t, r, b);
  }
  [this$0_ replayBufferedEvents];
  ASViewImpl_redrawDrawablesWithASIWidget_(this$0_);
  overlays_ = ASViewImpl_drawOverlayWithASIWidget_withJavaUtilList_(this$0_, overlays_);
  id<ASIWidgetLifeCycleListener> listener = [this$0_ getListener];
  if (listener != nil) {
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setBWithInt:b];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setLWithInt:l];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setRWithInt:r];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setTWithInt:t];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setChangedWithBoolean:changed];
    [listener eventOccurredWithASIWidgetLifeCycleListener_EventId:JreLoadEnum(ASIWidgetLifeCycleListener_EventId, onLayout) withASWidgetEvent:onLayoutEvent_];
  }
  if ([this$0_ isInvalidateOnFrameChange] && [this$0_ isInitialised]) {
    [this$0_ invalidate];
  }
}

- (void)executeWithNSString:(NSString *)method
          withNSObjectArray:(IOSObjectArray *)canvas {
}

- (void)updateMeasuredDimensionWithInt:(int32_t)width
                               withInt:(int32_t)height {
  [self setMeasuredDimensionWithInt:width withInt:height];
}

- (id<ASILifeCycleDecorator>)newInstanceWithASIWidget:(id<ASIWidget>)widget {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)setAttributeWithASWidgetAttribute:(ASWidgetAttribute *)widgetAttribute
                             withNSString:(NSString *)strValue
                                   withId:(id)objValue {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (id<JavaUtilList>)getMethods {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)initialized {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (id)getAttributeWithASWidgetAttribute:(ASWidgetAttribute *)widgetAttribute {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)drawableStateChanged {
  [super drawableStateChanged];
  if (![this$0_ isWidgetDisposed]) {
    ASViewImpl_drawableStateChangedWithASIWidget_(this$0_);
  }
}

- (ADView *)inflateViewWithNSString:(NSString *)layout {
  if (templates_ == nil) {
    templates_ = new_JavaUtilHashMap_init();
  }
  id<ASIWidget> template_ = [templates_ getWithId:layout];
  if (template_ == nil) {
    template_ = (id<ASIWidget>) cast_check([this$0_ quickConvertWithId:layout withNSString:@"template"], ASIWidget_class_());
    (void) [((id<JavaUtilMap>) nil_chk(templates_)) putWithId:layout withId:template_];
  }
  id<ASIWidget> widget = [((id<ASIWidget>) nil_chk(template_)) loadLazyWidgetsWithASHasWidgets:[this$0_ getParent]];
  return (ADView *) cast_chk([((id<ASIWidget>) nil_chk(widget)) asWidget], [ADView class]);
}

- (void)remeasure {
  if ([this$0_ getFragment] != nil) {
    [((id<ASIFragment>) nil_chk([this$0_ getFragment])) remeasure];
  }
}

- (void)removeFromParent {
  [((id<ASHasWidgets>) nil_chk([this$0_ getParent])) removeWithASIWidget:this$0_];
}

- (void)getLocationOnScreenWithIntArray:(IOSIntArray *)appScreenLocation {
  *IOSIntArray_GetRef(nil_chk(appScreenLocation), 0) = ASViewImpl_getLocationXOnScreenWithId_([this$0_ asNativeWidget]);
  *IOSIntArray_GetRef(appScreenLocation, 1) = ASViewImpl_getLocationYOnScreenWithId_([this$0_ asNativeWidget]);
}

- (void)getWindowVisibleDisplayFrameWithADRect:(ADRect *)displayFrame {
  ((ADRect *) nil_chk(displayFrame))->left_ = ASViewImpl_getLocationXOnScreenWithId_([this$0_ asNativeWidget]);
  displayFrame->top_ = ASViewImpl_getLocationYOnScreenWithId_([this$0_ asNativeWidget]);
  displayFrame->right_ = displayFrame->left_ + [self getWidth];
  displayFrame->bottom_ = displayFrame->top_ + [self getHeight];
}

- (void)offsetTopAndBottomWithInt:(int32_t)offset {
  [super offsetTopAndBottomWithInt:offset];
  ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_([this$0_ asNativeWidget], [self getLeft], [self getTop], [self getRight], [self getBottom]);
}

- (void)offsetLeftAndRightWithInt:(int32_t)offset {
  [super offsetLeftAndRightWithInt:offset];
  ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_([this$0_ asNativeWidget], [self getLeft], [self getTop], [self getRight], [self getBottom]);
}

- (void)setMyAttributeWithNSString:(NSString *)name
                            withId:(id)value {
  if ([((NSString *) nil_chk(name)) isEqual:@"state0"]) {
    [self setState0WithId:value];
    return;
  }
  if ([name isEqual:@"state1"]) {
    [self setState1WithId:value];
    return;
  }
  if ([name isEqual:@"state2"]) {
    [self setState2WithId:value];
    return;
  }
  if ([name isEqual:@"state3"]) {
    [self setState3WithId:value];
    return;
  }
  if ([name isEqual:@"state4"]) {
    [self setState4WithId:value];
    return;
  }
  [this$0_ setAttributeWithNSString:name withId:value withBoolean:!([value isKindOfClass:[NSString class]])];
}

- (void)setVisibilityWithInt:(int32_t)visibility {
  [super setVisibilityWithInt:visibility];
  ASViewImpl_nativeSetVisibilityWithId_withBoolean_([this$0_ asNativeWidget], visibility != ADView_VISIBLE);
}

- (int32_t)getBorderPadding {
  return [this$0_ getBorderPadding];
}

- (int32_t)getLineHeight {
  return ASTextViewImpl_getLineHeight(this$0_);
}

- (int32_t)getBorderWidth {
  return ASTextViewImpl_getBorderWidth(this$0_);
}

- (int32_t)getLineHeightPadding {
  return [this$0_ getLineHeightPadding];
}

- (void)onRtlPropertiesChangedWithInt:(int32_t)layoutDirection {
  [this$0_ onRtlPropertiesChangedWithInt:layoutDirection];
}

- (int32_t)nativeMeasureWidthWithId:(id)uiView {
  return ASViewImpl_nativeMeasureWidthWithId_(uiView);
}

- (int32_t)nativeMeasureHeightWithId:(id)uiView
                             withInt:(int32_t)width {
  return ASViewImpl_nativeMeasureHeightWithId_withInt_(uiView, width);
}

- (int32_t)computeSizeWithFloat:(float)width {
  return [self nativeMeasureHeightWithId:this$0_->uiView_ withInt:JreFpToInt(width)];
}

- (NSString *)getText {
  return (NSString *) cast_chk(ASTextViewImpl_getMyText(this$0_), [NSString class]);
}

- (void)setState0WithId:(id)value {
  ASViewImpl_setStateWithASIWidget_withInt_withId_(this$0_, 0, value);
}

- (void)setState1WithId:(id)value {
  ASViewImpl_setStateWithASIWidget_withInt_withId_(this$0_, 1, value);
}

- (void)setState2WithId:(id)value {
  ASViewImpl_setStateWithASIWidget_withInt_withId_(this$0_, 2, value);
}

- (void)setState3WithId:(id)value {
  ASViewImpl_setStateWithASIWidget_withInt_withId_(this$0_, 3, value);
}

- (void)setState4WithId:(id)value {
  ASViewImpl_setStateWithASIWidget_withInt_withId_(this$0_, 4, value);
}

- (void)state0 {
  ASViewImpl_stateWithASIWidget_withInt_(this$0_, 0);
}

- (void)state1 {
  ASViewImpl_stateWithASIWidget_withInt_(this$0_, 1);
}

- (void)state2 {
  ASViewImpl_stateWithASIWidget_withInt_(this$0_, 2);
}

- (void)state3 {
  ASViewImpl_stateWithASIWidget_withInt_(this$0_, 3);
}

- (void)state4 {
  ASViewImpl_stateWithASIWidget_withInt_(this$0_, 4);
}

- (void)stateYes {
  ASViewImpl_stateYesWithASIWidget_(this$0_);
}

- (void)stateNo {
  ASViewImpl_stateNoWithASIWidget_(this$0_);
}

- (void)__javaClone:(ASTextViewImpl_TextViewExt *)original {
  [super __javaClone:original];
  JreRelease(this$0_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LASIWidget;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x81, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 2, -1, -1, -1, -1 },
    { NULL, "LASILifeCycleDecorator;", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 12, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADView;", 0x1, 15, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 18, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 20, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 21, 22, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 23, 22, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 24, 25, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 26, 22, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 27, 22, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 28, 29, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 30, 31, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 32, 33, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 34, 29, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 35, 29, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 36, 29, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 37, 29, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 38, 29, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getWidget);
  methods[1].selector = @selector(initWithASTextViewImpl:);
  methods[2].selector = @selector(onMeasureWithInt:withInt:);
  methods[3].selector = @selector(onLayoutWithBoolean:withInt:withInt:withInt:withInt:);
  methods[4].selector = @selector(executeWithNSString:withNSObjectArray:);
  methods[5].selector = @selector(updateMeasuredDimensionWithInt:withInt:);
  methods[6].selector = @selector(newInstanceWithASIWidget:);
  methods[7].selector = @selector(setAttributeWithASWidgetAttribute:withNSString:withId:);
  methods[8].selector = @selector(getMethods);
  methods[9].selector = @selector(initialized);
  methods[10].selector = @selector(getAttributeWithASWidgetAttribute:);
  methods[11].selector = @selector(drawableStateChanged);
  methods[12].selector = @selector(inflateViewWithNSString:);
  methods[13].selector = @selector(remeasure);
  methods[14].selector = @selector(removeFromParent);
  methods[15].selector = @selector(getLocationOnScreenWithIntArray:);
  methods[16].selector = @selector(getWindowVisibleDisplayFrameWithADRect:);
  methods[17].selector = @selector(offsetTopAndBottomWithInt:);
  methods[18].selector = @selector(offsetLeftAndRightWithInt:);
  methods[19].selector = @selector(setMyAttributeWithNSString:withId:);
  methods[20].selector = @selector(setVisibilityWithInt:);
  methods[21].selector = @selector(getBorderPadding);
  methods[22].selector = @selector(getLineHeight);
  methods[23].selector = @selector(getBorderWidth);
  methods[24].selector = @selector(getLineHeightPadding);
  methods[25].selector = @selector(onRtlPropertiesChangedWithInt:);
  methods[26].selector = @selector(nativeMeasureWidthWithId:);
  methods[27].selector = @selector(nativeMeasureHeightWithId:withInt:);
  methods[28].selector = @selector(computeSizeWithFloat:);
  methods[29].selector = @selector(getText);
  methods[30].selector = @selector(setState0WithId:);
  methods[31].selector = @selector(setState1WithId:);
  methods[32].selector = @selector(setState2WithId:);
  methods[33].selector = @selector(setState3WithId:);
  methods[34].selector = @selector(setState4WithId:);
  methods[35].selector = @selector(state0);
  methods[36].selector = @selector(state1);
  methods[37].selector = @selector(state2);
  methods[38].selector = @selector(state3);
  methods[39].selector = @selector(state4);
  methods[40].selector = @selector(stateYes);
  methods[41].selector = @selector(stateNo);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASTextViewImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "measureFinished_", "LASMeasureEvent;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "onLayoutEvent_", "LASOnLayoutEvent;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "overlays_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 39, -1 },
    { "templates_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 40, -1 },
  };
  static const void *ptrTable[] = { "LASTextViewImpl;", "onMeasure", "II", "onLayout", "ZIIII", "execute", "LNSString;[LNSObject;", "updateMeasuredDimension", "newInstance", "LASIWidget;", "setAttribute", "LASWidgetAttribute;LNSString;LNSObject;", "()Ljava/util/List<Ljava/lang/String;>;", "getAttribute", "LASWidgetAttribute;", "inflateView", "LNSString;", "getLocationOnScreen", "[I", "getWindowVisibleDisplayFrame", "LADRect;", "offsetTopAndBottom", "I", "offsetLeftAndRight", "setMyAttribute", "LNSString;LNSObject;", "setVisibility", "onRtlPropertiesChanged", "nativeMeasureWidth", "LNSObject;", "nativeMeasureHeight", "LNSObject;I", "computeSize", "F", "setState0", "setState1", "setState2", "setState3", "setState4", "Ljava/util/List<Lcom/ashera/widget/IWidget;>;", "Ljava/util/Map<Ljava/lang/String;Lcom/ashera/widget/IWidget;>;" };
  static const J2ObjcClassInfo _ASTextViewImpl_TextViewExt = { "TextViewExt", "com.ashera.layout", ptrTable, methods, fields, 7, 0x1, 42, 5, 0, -1, -1, -1, -1 };
  return &_ASTextViewImpl_TextViewExt;
}

@end

void ASTextViewImpl_TextViewExt_initWithASTextViewImpl_(ASTextViewImpl_TextViewExt *self, ASTextViewImpl *outer$) {
  self->this$0_ = outer$;
  ADTextView_initWithASIWidget_(self, outer$);
  self->measureFinished_ = new_ASMeasureEvent_init();
  self->onLayoutEvent_ = new_ASOnLayoutEvent_init();
}

ASTextViewImpl_TextViewExt *new_ASTextViewImpl_TextViewExt_initWithASTextViewImpl_(ASTextViewImpl *outer$) {
  J2OBJC_NEW_IMPL(ASTextViewImpl_TextViewExt, initWithASTextViewImpl_, outer$)
}

ASTextViewImpl_TextViewExt *create_ASTextViewImpl_TextViewExt_initWithASTextViewImpl_(ASTextViewImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASTextViewImpl_TextViewExt, initWithASTextViewImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASTextViewImpl_TextViewExt)

@implementation ASTextViewImpl_PostMeasureHandler

- (instancetype)initWithASTextViewImpl:(ASTextViewImpl *)outer$
                          withNSString:(NSString *)type {
  ASTextViewImpl_PostMeasureHandler_initWithASTextViewImpl_withNSString_(self, outer$, type);
  return self;
}

- (void)doPerformWithId:(id)payload {
  if (!onlyOnce_ || [((ADTextView *) nil_chk(this$0_->measurableView_)) isLayoutRequested]) {
    [((ADTextView *) nil_chk(this$0_->measurableView_)) autoResizeText];
    onlyOnce_ = true;
  }
}

- (void)__javaClone:(ASTextViewImpl_PostMeasureHandler *)original {
  [super __javaClone:original];
  JreRelease(this$0_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASTextViewImpl:withNSString:);
  methods[1].selector = @selector(doPerformWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASTextViewImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "onlyOnce_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASTextViewImpl;LNSString;", "doPerform", "LNSObject;", "LASTextViewImpl;" };
  static const J2ObjcClassInfo _ASTextViewImpl_PostMeasureHandler = { "PostMeasureHandler", "com.ashera.layout", ptrTable, methods, fields, 7, 0x0, 2, 2, 3, -1, -1, -1, -1 };
  return &_ASTextViewImpl_PostMeasureHandler;
}

@end

void ASTextViewImpl_PostMeasureHandler_initWithASTextViewImpl_withNSString_(ASTextViewImpl_PostMeasureHandler *self, ASTextViewImpl *outer$, NSString *type) {
  self->this$0_ = outer$;
  ASEventBusHandler_initWithNSString_(self, type);
}

ASTextViewImpl_PostMeasureHandler *new_ASTextViewImpl_PostMeasureHandler_initWithASTextViewImpl_withNSString_(ASTextViewImpl *outer$, NSString *type) {
  J2OBJC_NEW_IMPL(ASTextViewImpl_PostMeasureHandler, initWithASTextViewImpl_withNSString_, outer$, type)
}

ASTextViewImpl_PostMeasureHandler *create_ASTextViewImpl_PostMeasureHandler_initWithASTextViewImpl_withNSString_(ASTextViewImpl *outer$, NSString *type) {
  J2OBJC_CREATE_IMPL(ASTextViewImpl_PostMeasureHandler, initWithASTextViewImpl_withNSString_, outer$, type)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASTextViewImpl_PostMeasureHandler)

@implementation ASTextViewImpl_MarqueeTask

- (instancetype)initWithASTextViewImpl:(ASTextViewImpl *)outer$
                          withNSString:(NSString *)direction {
  ASTextViewImpl_MarqueeTask_initWithASTextViewImpl_withNSString_(self, outer$, direction);
  return self;
}

- (void)cancel {
  cancel_ = true;
}

- (void)restart {
  cancel_ = false;
  slideLength_ = 0;
  cycles_ = 0;
}

- (void)run {
  int32_t numberOfBlankSpaces = ASTextViewImpl_calcNumberOfWhiteSpaces(this$0_);
  if (this$0_->marqueeCommandConverter_ == nil) {
    this$0_->marqueeCommandConverter_ = (ASMarqueeCommandConverter *) cast_chk([this$0_ getAttributeCommandWithNSString:@"text" withNSString:ASCommonConverters_command_marquee withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(numberOfBlankSpaces), JavaLangInteger_valueOfWithInt_(0), direction_ } count:3 type:NSObject_class_()]], [ASMarqueeCommandConverter class]);
  }
  slideLength_ = [((ASMarqueeCommandConverter *) nil_chk(this$0_->marqueeCommandConverter_)) getOffset];
  if (numberOfBlankSpaces > 0) {
    NSString *str = (NSString *) cast_chk(ASTextViewImpl_getMyText(this$0_), [NSString class]);
    if (slideLength_ == [((NSString *) nil_chk(str)) java_length]) {
      slideLength_ = 0;
      cycles_++;
    }
    if ((this$0_->marqueeRepeatLimit_ > 0 && cycles_ >= this$0_->marqueeRepeatLimit_)) {
      ASTextViewImpl_cancelTimer(this$0_);
      return;
    }
    slideLength_++;
    ASTextViewImpl_executeOnMainThreadWithJavaLangRunnable_(this$0_, new_ASTextViewImpl_MarqueeTask_$Lambda$1_initWithASTextViewImpl_MarqueeTask_withInt_(self, numberOfBlankSpaces));
  }
  else {
    ASTextViewImpl_schedule(this$0_);
  }
}

- (void)__javaClone:(ASTextViewImpl_MarqueeTask *)original {
  [super __javaClone:original];
  JreRelease(this$0_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASTextViewImpl:withNSString:);
  methods[1].selector = @selector(cancel);
  methods[2].selector = @selector(restart);
  methods[3].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASTextViewImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "slideLength_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "cycles_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "cancel_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "direction_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASTextViewImpl;LNSString;", "LASTextViewImpl;" };
  static const J2ObjcClassInfo _ASTextViewImpl_MarqueeTask = { "MarqueeTask", "com.ashera.layout", ptrTable, methods, fields, 7, 0x12, 4, 5, 1, -1, -1, -1, -1 };
  return &_ASTextViewImpl_MarqueeTask;
}

@end

void ASTextViewImpl_MarqueeTask_initWithASTextViewImpl_withNSString_(ASTextViewImpl_MarqueeTask *self, ASTextViewImpl *outer$, NSString *direction) {
  self->this$0_ = outer$;
  NSObject_init(self);
  self->slideLength_ = 0;
  self->cycles_ = 0;
  self->cancel_ = false;
  self->direction_ = direction;
}

ASTextViewImpl_MarqueeTask *new_ASTextViewImpl_MarqueeTask_initWithASTextViewImpl_withNSString_(ASTextViewImpl *outer$, NSString *direction) {
  J2OBJC_NEW_IMPL(ASTextViewImpl_MarqueeTask, initWithASTextViewImpl_withNSString_, outer$, direction)
}

ASTextViewImpl_MarqueeTask *create_ASTextViewImpl_MarqueeTask_initWithASTextViewImpl_withNSString_(ASTextViewImpl *outer$, NSString *direction) {
  J2OBJC_CREATE_IMPL(ASTextViewImpl_MarqueeTask, initWithASTextViewImpl_withNSString_, outer$, direction)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASTextViewImpl_MarqueeTask)

@implementation ASTextViewImpl_MarqueeTask_$Lambda$1

- (void)run {
  if (!this$0_->cancel_) {
    [this$0_->this$0_ applyAttributeCommandWithNSString:@"text" withNSString:ASCommonConverters_command_marquee withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"ellipsize" } count:1 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(val$numberOfBlankSpaces_), JavaLangInteger_valueOfWithInt_(this$0_->slideLength_), this$0_->direction_ } count:3 type:NSObject_class_()]];
    ASTextViewImpl_schedule(this$0_->this$0_);
  }
}

@end

void ASTextViewImpl_MarqueeTask_$Lambda$1_initWithASTextViewImpl_MarqueeTask_withInt_(ASTextViewImpl_MarqueeTask_$Lambda$1 *self, ASTextViewImpl_MarqueeTask *outer$, int32_t capture$0) {
  self->this$0_ = outer$;
  self->val$numberOfBlankSpaces_ = capture$0;
  NSObject_init(self);
}

ASTextViewImpl_MarqueeTask_$Lambda$1 *new_ASTextViewImpl_MarqueeTask_$Lambda$1_initWithASTextViewImpl_MarqueeTask_withInt_(ASTextViewImpl_MarqueeTask *outer$, int32_t capture$0) {
  J2OBJC_NEW_IMPL(ASTextViewImpl_MarqueeTask_$Lambda$1, initWithASTextViewImpl_MarqueeTask_withInt_, outer$, capture$0)
}

ASTextViewImpl_MarqueeTask_$Lambda$1 *create_ASTextViewImpl_MarqueeTask_$Lambda$1_initWithASTextViewImpl_MarqueeTask_withInt_(ASTextViewImpl_MarqueeTask *outer$, int32_t capture$0) {
  J2OBJC_CREATE_IMPL(ASTextViewImpl_MarqueeTask_$Lambda$1, initWithASTextViewImpl_MarqueeTask_withInt_, outer$, capture$0)
}

@implementation ASTextViewImpl_DellocHandler

- (instancetype)initWithASTextViewImpl:(ASTextViewImpl *)outer$
                          withNSString:(NSString *)type {
  ASTextViewImpl_DellocHandler_initWithASTextViewImpl_withNSString_(self, outer$, type);
  return self;
}

- (void)doPerformWithId:(id)payload {
  ASTextViewImpl_cancelTimer(this$0_);
  this$0_->isDisposed_ = true;
}

- (void)__javaClone:(ASTextViewImpl_DellocHandler *)original {
  [super __javaClone:original];
  JreRelease(this$0_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASTextViewImpl:withNSString:);
  methods[1].selector = @selector(doPerformWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASTextViewImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASTextViewImpl;LNSString;", "doPerform", "LNSObject;", "LASTextViewImpl;" };
  static const J2ObjcClassInfo _ASTextViewImpl_DellocHandler = { "DellocHandler", "com.ashera.layout", ptrTable, methods, fields, 7, 0x12, 2, 1, 3, -1, -1, -1, -1 };
  return &_ASTextViewImpl_DellocHandler;
}

@end

void ASTextViewImpl_DellocHandler_initWithASTextViewImpl_withNSString_(ASTextViewImpl_DellocHandler *self, ASTextViewImpl *outer$, NSString *type) {
  self->this$0_ = outer$;
  ASEventBusHandler_initWithNSString_(self, type);
}

ASTextViewImpl_DellocHandler *new_ASTextViewImpl_DellocHandler_initWithASTextViewImpl_withNSString_(ASTextViewImpl *outer$, NSString *type) {
  J2OBJC_NEW_IMPL(ASTextViewImpl_DellocHandler, initWithASTextViewImpl_withNSString_, outer$, type)
}

ASTextViewImpl_DellocHandler *create_ASTextViewImpl_DellocHandler_initWithASTextViewImpl_withNSString_(ASTextViewImpl *outer$, NSString *type) {
  J2OBJC_CREATE_IMPL(ASTextViewImpl_DellocHandler, initWithASTextViewImpl_withNSString_, outer$, type)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASTextViewImpl_DellocHandler)
