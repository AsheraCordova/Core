//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-ios-widgets\ios_widget_library\src\main\java\com\ashera\layout\ViewOverlayImpl.java
//

#include "BaseWidget.h"
#include "CommonConverters.h"
#include "ConverterFactory.h"
#include "Drawable.h"
#include "HasWidgets.h"
#include "IConverter.h"
#include "IFragment.h"
#include "ILifeCycleDecorator.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "IWidget.h"
#include "J2ObjC_source.h"
#include "View.h"
#include "ViewImpl.h"
#include "ViewOverlay.h"
#include "ViewOverlayImpl.h"
#include "WidgetAttribute.h"
#include "WidgetFactory.h"
#include "java/lang/Boolean.h"
#include "java/lang/Integer.h"
#include "java/util/HashMap.h"
#include "java/util/Map.h"

#include <UIKit/UIKit.h>
#include "ASUIView.h"

@protocol JavaUtilMap;


@interface ASViewOverlayImpl () {
 @public
  ADView *viewStub_;
  id<ASIWidget> anchor_;
  NSString *drawableWidth_;
  NSString *drawableHeight_;
  NSString *offsetHorizontal_;
  NSString *offsetVertical_;
  ADDrawable *drawable_;
  NSString *boundsType_;
  NSString *boundsConverter_;
  ADDrawable *currentDrawable_;
  jboolean useGC_;
}

- (void)setDrawableHeightWithNSString:(NSString *)drawableHeight;

- (void)setDrawableWidthWithNSString:(NSString *)drawableWidth;

- (void)setOffsetHorizontalWithNSString:(NSString *)offsetHorizontal;

- (void)setOffsetVerticalWithNSString:(NSString *)offsetVertical;

- (void)setDrawableWithId:(id)drawable;

- (void)setTypeWithNSString:(NSString *)boundsType;

- (void)setAnchorRefWithNSString:(NSString *)id_;

- (void)addOverlay;

- (IOSIntArray *)getBoundsWithADView:(ADView *)view;

- (jint)getDrawableDimenWithNSString:(NSString *)dimen
                             withInt:(jint)intrinsicDimen
                             withInt:(jint)width
                             withInt:(jint)height;

- (jint)percentDimensionConvertWithNSString:(NSString *)dimen
                                    withInt:(jint)width
                                    withInt:(jint)height;

- (void)setBoundsConverterWithNSString:(NSString *)boundsConverter;

- (void)addOverlayInternalWithADView:(ADView *)view;

- (jint)getTopWithADView:(ADView *)view;

- (jint)getLeftWithADView:(ADView *)view;

- (void)setUseGCWithId:(id)useGC;

- (void)updateDrawableAttributes;

- (void)nativeCreateWithASIFragment:(id<ASIFragment>)fragment
                    withJavaUtilMap:(id<JavaUtilMap>)params;

@end

J2OBJC_FIELD_SETTER(ASViewOverlayImpl, viewStub_, ADView *)
J2OBJC_FIELD_SETTER(ASViewOverlayImpl, anchor_, id<ASIWidget>)
J2OBJC_FIELD_SETTER(ASViewOverlayImpl, drawableWidth_, NSString *)
J2OBJC_FIELD_SETTER(ASViewOverlayImpl, drawableHeight_, NSString *)
J2OBJC_FIELD_SETTER(ASViewOverlayImpl, offsetHorizontal_, NSString *)
J2OBJC_FIELD_SETTER(ASViewOverlayImpl, offsetVertical_, NSString *)
J2OBJC_FIELD_SETTER(ASViewOverlayImpl, drawable_, ADDrawable *)
J2OBJC_FIELD_SETTER(ASViewOverlayImpl, boundsType_, NSString *)
J2OBJC_FIELD_SETTER(ASViewOverlayImpl, boundsConverter_, NSString *)
J2OBJC_FIELD_SETTER(ASViewOverlayImpl, currentDrawable_, ADDrawable *)

__attribute__((unused)) static void ASViewOverlayImpl_setDrawableHeightWithNSString_(ASViewOverlayImpl *self, NSString *drawableHeight);

__attribute__((unused)) static void ASViewOverlayImpl_setDrawableWidthWithNSString_(ASViewOverlayImpl *self, NSString *drawableWidth);

__attribute__((unused)) static void ASViewOverlayImpl_setOffsetHorizontalWithNSString_(ASViewOverlayImpl *self, NSString *offsetHorizontal);

__attribute__((unused)) static void ASViewOverlayImpl_setOffsetVerticalWithNSString_(ASViewOverlayImpl *self, NSString *offsetVertical);

__attribute__((unused)) static void ASViewOverlayImpl_setDrawableWithId_(ASViewOverlayImpl *self, id drawable);

__attribute__((unused)) static void ASViewOverlayImpl_setTypeWithNSString_(ASViewOverlayImpl *self, NSString *boundsType);

__attribute__((unused)) static void ASViewOverlayImpl_setAnchorRefWithNSString_(ASViewOverlayImpl *self, NSString *id_);

__attribute__((unused)) static void ASViewOverlayImpl_addOverlay(ASViewOverlayImpl *self);

__attribute__((unused)) static IOSIntArray *ASViewOverlayImpl_getBoundsWithADView_(ASViewOverlayImpl *self, ADView *view);

__attribute__((unused)) static jint ASViewOverlayImpl_getDrawableDimenWithNSString_withInt_withInt_withInt_(ASViewOverlayImpl *self, NSString *dimen, jint intrinsicDimen, jint width, jint height);

__attribute__((unused)) static jint ASViewOverlayImpl_percentDimensionConvertWithNSString_withInt_withInt_(ASViewOverlayImpl *self, NSString *dimen, jint width, jint height);

__attribute__((unused)) static void ASViewOverlayImpl_setBoundsConverterWithNSString_(ASViewOverlayImpl *self, NSString *boundsConverter);

__attribute__((unused)) static void ASViewOverlayImpl_addOverlayInternalWithADView_(ASViewOverlayImpl *self, ADView *view);

__attribute__((unused)) static jint ASViewOverlayImpl_getTopWithADView_(ASViewOverlayImpl *self, ADView *view);

__attribute__((unused)) static jint ASViewOverlayImpl_getLeftWithADView_(ASViewOverlayImpl *self, ADView *view);

__attribute__((unused)) static void ASViewOverlayImpl_setUseGCWithId_(ASViewOverlayImpl *self, id useGC);

__attribute__((unused)) static void ASViewOverlayImpl_updateDrawableAttributes(ASViewOverlayImpl *self);

__attribute__((unused)) static void ASViewOverlayImpl_nativeCreateWithASIFragment_withJavaUtilMap_(ASViewOverlayImpl *self, id<ASIFragment> fragment, id<JavaUtilMap> params);

@interface ASViewOverlayImpl_ViewExt () {
 @public
  ASViewOverlayImpl *this$0_;
  id<JavaUtilMap> templates_;
}

@end

J2OBJC_FIELD_SETTER(ASViewOverlayImpl_ViewExt, templates_, id<JavaUtilMap>)

NSString *ASViewOverlayImpl_LOCAL_NAME = @"com.ashera.layout.ViewOverlay";
NSString *ASViewOverlayImpl_GROUP_NAME = @"ViewOverlay";

@implementation ASViewOverlayImpl

@synthesize uiView = uiView_;

- (void)loadAttributesWithNSString:(NSString *)attributeName {
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"anchorRef"])) withTypeWithNSString:@"string"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"boundsType"])) withTypeWithNSString:@"string"])) withOrderWithInt:-1]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"drawable"])) withTypeWithNSString:@"drawable"])) withOrderWithInt:-1]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"offsetVertical"])) withTypeWithNSString:@"string"])) withOrderWithInt:-1]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"offsetHorizontal"])) withTypeWithNSString:@"string"])) withOrderWithInt:-1]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"drawableWidth"])) withTypeWithNSString:@"string"])) withOrderWithInt:-1]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"drawableHeight"])) withTypeWithNSString:@"string"])) withOrderWithInt:-1]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"boundsConverter"])) withTypeWithNSString:@"string"])) withOrderWithInt:-1]);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASViewOverlayImpl_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<ASIWidget>)newInstance {
  return new_ASViewOverlayImpl_init();
}

- (void)createWithASIFragment:(id<ASIFragment>)fragment
              withJavaUtilMap:(id<JavaUtilMap>)params {
  [super createWithASIFragment:fragment withJavaUtilMap:params];
  viewStub_ = new_ASViewOverlayImpl_ViewExt_initWithASViewOverlayImpl_(self);
  [self createView];
  ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_(uiView_, 0, 0, 0, 0);
  ASViewOverlayImpl_nativeCreateWithASIFragment_withJavaUtilMap_(self, fragment, params);
}

- (void)createView {
  ASUIView* uiView = [ASUIView new];
  uiView.backgroundColor = [UIColor clearColor];
  uiView_ = uiView;
}

- (void)setAttributeWithASWidgetAttribute:(ASWidgetAttribute *)key
                             withNSString:(NSString *)strValue
                                   withId:(id)objValue
                withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  id nativeWidget = [self asNativeWidget];
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"anchorRef", @"boundsType", @"drawable", @"offsetVertical", @"offsetHorizontal", @"drawableWidth", @"drawableHeight", @"boundsConverter" }, 8)) {
    case 0:
    {
      ASViewOverlayImpl_setAnchorRefWithNSString_(self, (NSString *) cast_chk(objValue, [NSString class]));
    }
    break;
    case 1:
    {
      ASViewOverlayImpl_setTypeWithNSString_(self, strValue);
    }
    break;
    case 2:
    {
      ASViewOverlayImpl_setDrawableWithId_(self, objValue);
    }
    break;
    case 3:
    {
      ASViewOverlayImpl_setOffsetVerticalWithNSString_(self, (NSString *) cast_chk(objValue, [NSString class]));
    }
    break;
    case 4:
    {
      ASViewOverlayImpl_setOffsetHorizontalWithNSString_(self, (NSString *) cast_chk(objValue, [NSString class]));
    }
    break;
    case 5:
    {
      ASViewOverlayImpl_setDrawableWidthWithNSString_(self, (NSString *) cast_chk(objValue, [NSString class]));
    }
    break;
    case 6:
    {
      ASViewOverlayImpl_setDrawableHeightWithNSString_(self, (NSString *) cast_chk(objValue, [NSString class]));
    }
    break;
    case 7:
    {
      ASViewOverlayImpl_setBoundsConverterWithNSString_(self, (NSString *) cast_chk(objValue, [NSString class]));
    }
    break;
    default:
    break;
  }
}

- (id)asWidget {
  return viewStub_;
}

- (id)getAttributeWithASWidgetAttribute:(ASWidgetAttribute *)key
              withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  id nativeWidget = [self asNativeWidget];
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){  }, 0)) {
  }
  return nil;
}

- (void)setDrawableHeightWithNSString:(NSString *)drawableHeight {
  ASViewOverlayImpl_setDrawableHeightWithNSString_(self, drawableHeight);
}

- (void)setDrawableWidthWithNSString:(NSString *)drawableWidth {
  ASViewOverlayImpl_setDrawableWidthWithNSString_(self, drawableWidth);
}

- (void)setOffsetHorizontalWithNSString:(NSString *)offsetHorizontal {
  ASViewOverlayImpl_setOffsetHorizontalWithNSString_(self, offsetHorizontal);
}

- (void)setOffsetVerticalWithNSString:(NSString *)offsetVertical {
  ASViewOverlayImpl_setOffsetVerticalWithNSString_(self, offsetVertical);
}

- (void)setDrawableWithId:(id)drawable {
  ASViewOverlayImpl_setDrawableWithId_(self, drawable);
}

- (void)setTypeWithNSString:(NSString *)boundsType {
  ASViewOverlayImpl_setTypeWithNSString_(self, boundsType);
}

- (void)setAnchorRefWithNSString:(NSString *)id_ {
  ASViewOverlayImpl_setAnchorRefWithNSString_(self, id_);
}

- (void)addOverlay {
  ASViewOverlayImpl_addOverlay(self);
}

- (IOSIntArray *)getBoundsWithADView:(ADView *)view {
  return ASViewOverlayImpl_getBoundsWithADView_(self, view);
}

- (jint)getDrawableDimenWithNSString:(NSString *)dimen
                             withInt:(jint)intrinsicDimen
                             withInt:(jint)width
                             withInt:(jint)height {
  return ASViewOverlayImpl_getDrawableDimenWithNSString_withInt_withInt_withInt_(self, dimen, intrinsicDimen, width, height);
}

- (jint)percentDimensionConvertWithNSString:(NSString *)dimen
                                    withInt:(jint)width
                                    withInt:(jint)height {
  return ASViewOverlayImpl_percentDimensionConvertWithNSString_withInt_withInt_(self, dimen, width, height);
}

- (void)setBoundsConverterWithNSString:(NSString *)boundsConverter {
  ASViewOverlayImpl_setBoundsConverterWithNSString_(self, boundsConverter);
}

- (void)addOverlayInternalWithADView:(ADView *)view {
  ASViewOverlayImpl_addOverlayInternalWithADView_(self, view);
}

- (id)invokeMethodWithNSString:(NSString *)methodName
             withNSObjectArray:(IOSObjectArray *)args {
  switch (JreIndexOfStr(methodName, (id[]){ @"updateBounds" }, 1)) {
    case 0:
    if (anchor_ != nil) {
      ADView *view = (ADView *) cast_chk([anchor_ asWidget], [ADView class]);
      IOSIntArray *finalBounds = ASViewOverlayImpl_getBoundsWithADView_(self, view);
      [((ADDrawable *) nil_chk(drawable_)) setBoundsWithInt:IOSIntArray_Get(nil_chk(finalBounds), 0) withInt:IOSIntArray_Get(finalBounds, 1) withInt:IOSIntArray_Get(finalBounds, 2) withInt:IOSIntArray_Get(finalBounds, 3)];
    }
    break;
    default:
    break;
  }
  return [super invokeMethodWithNSString:methodName withNSObjectArray:args];
}

- (jint)getTopWithADView:(ADView *)view {
  return ASViewOverlayImpl_getTopWithADView_(self, view);
}

- (jint)getLeftWithADView:(ADView *)view {
  return ASViewOverlayImpl_getLeftWithADView_(self, view);
}

- (void)setUseGCWithId:(id)useGC {
  ASViewOverlayImpl_setUseGCWithId_(self, useGC);
}

- (void)updateDrawableAttributes {
  ASViewOverlayImpl_updateDrawableAttributes(self);
}

- (id)asNativeWidget {
  return uiView_;
}

- (void)nativeCreateWithASIFragment:(id<ASIFragment>)fragment
                    withJavaUtilMap:(id<JavaUtilMap>)params {
  ASViewOverlayImpl_nativeCreateWithASIFragment_withJavaUtilMap_(self, fragment, params);
}

- (IOSClass *)getViewClass {
  return ADView_class_();
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASIWidget;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, -1 },
    { NULL, "V", 0x101, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 9, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 10, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 11, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 12, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 13, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 15, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 16, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "[I", 0x2, 17, 18, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 19, 20, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 21, 22, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 23, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 24, 18, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x81, 25, 26, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 27, 18, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 28, 18, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 29, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 30, 3, -1, 4, -1, -1 },
    { NULL, "LIOSClass;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(loadAttributesWithNSString:);
  methods[1].selector = @selector(init);
  methods[2].selector = @selector(newInstance);
  methods[3].selector = @selector(createWithASIFragment:withJavaUtilMap:);
  methods[4].selector = @selector(createView);
  methods[5].selector = @selector(setAttributeWithASWidgetAttribute:withNSString:withId:withASILifeCycleDecorator:);
  methods[6].selector = @selector(asWidget);
  methods[7].selector = @selector(getAttributeWithASWidgetAttribute:withASILifeCycleDecorator:);
  methods[8].selector = @selector(setDrawableHeightWithNSString:);
  methods[9].selector = @selector(setDrawableWidthWithNSString:);
  methods[10].selector = @selector(setOffsetHorizontalWithNSString:);
  methods[11].selector = @selector(setOffsetVerticalWithNSString:);
  methods[12].selector = @selector(setDrawableWithId:);
  methods[13].selector = @selector(setTypeWithNSString:);
  methods[14].selector = @selector(setAnchorRefWithNSString:);
  methods[15].selector = @selector(addOverlay);
  methods[16].selector = @selector(getBoundsWithADView:);
  methods[17].selector = @selector(getDrawableDimenWithNSString:withInt:withInt:withInt:);
  methods[18].selector = @selector(percentDimensionConvertWithNSString:withInt:withInt:);
  methods[19].selector = @selector(setBoundsConverterWithNSString:);
  methods[20].selector = @selector(addOverlayInternalWithADView:);
  methods[21].selector = @selector(invokeMethodWithNSString:withNSObjectArray:);
  methods[22].selector = @selector(getTopWithADView:);
  methods[23].selector = @selector(getLeftWithADView:);
  methods[24].selector = @selector(setUseGCWithId:);
  methods[25].selector = @selector(updateDrawableAttributes);
  methods[26].selector = @selector(asNativeWidget);
  methods[27].selector = @selector(nativeCreateWithASIFragment:withJavaUtilMap:);
  methods[28].selector = @selector(getViewClass);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "viewStub_", "LADView;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "uiView_", "LNSObject;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "LOCAL_NAME", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 31, -1, -1 },
    { "GROUP_NAME", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 32, -1, -1 },
    { "anchor_", "LASIWidget;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "drawableWidth_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "drawableHeight_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "offsetHorizontal_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "offsetVertical_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "drawable_", "LADDrawable;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "boundsType_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "boundsConverter_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "currentDrawable_", "LADDrawable;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "useGC_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "loadAttributes", "LNSString;", "create", "LASIFragment;LJavaUtilMap;", "(Lcom/ashera/core/IFragment;Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;)V", "setAttribute", "LASWidgetAttribute;LNSString;LNSObject;LASILifeCycleDecorator;", "getAttribute", "LASWidgetAttribute;LASILifeCycleDecorator;", "setDrawableHeight", "setDrawableWidth", "setOffsetHorizontal", "setOffsetVertical", "setDrawable", "LNSObject;", "setType", "setAnchorRef", "getBounds", "LADView;", "getDrawableDimen", "LNSString;III", "percentDimensionConvert", "LNSString;II", "setBoundsConverter", "addOverlayInternal", "invokeMethod", "LNSString;[LNSObject;", "getTop", "getLeft", "setUseGC", "nativeCreate", &ASViewOverlayImpl_LOCAL_NAME, &ASViewOverlayImpl_GROUP_NAME, "LASViewOverlayImpl_ViewExt;" };
  static const J2ObjcClassInfo _ASViewOverlayImpl = { "ViewOverlayImpl", "com.ashera.layout", ptrTable, methods, fields, 7, 0x1, 29, 14, -1, 33, -1, -1, -1 };
  return &_ASViewOverlayImpl;
}

@end

void ASViewOverlayImpl_init(ASViewOverlayImpl *self) {
  ASBaseWidget_initWithNSString_withNSString_(self, ASViewOverlayImpl_LOCAL_NAME, ASViewOverlayImpl_LOCAL_NAME);
  self->boundsType_ = @"center";
  self->boundsConverter_ = @"overlay_bounds";
  self->currentDrawable_ = nil;
}

ASViewOverlayImpl *new_ASViewOverlayImpl_init() {
  J2OBJC_NEW_IMPL(ASViewOverlayImpl, init)
}

ASViewOverlayImpl *create_ASViewOverlayImpl_init() {
  J2OBJC_CREATE_IMPL(ASViewOverlayImpl, init)
}

void ASViewOverlayImpl_setDrawableHeightWithNSString_(ASViewOverlayImpl *self, NSString *drawableHeight) {
  self->drawableHeight_ = drawableHeight;
}

void ASViewOverlayImpl_setDrawableWidthWithNSString_(ASViewOverlayImpl *self, NSString *drawableWidth) {
  self->drawableWidth_ = drawableWidth;
}

void ASViewOverlayImpl_setOffsetHorizontalWithNSString_(ASViewOverlayImpl *self, NSString *offsetHorizontal) {
  self->offsetHorizontal_ = offsetHorizontal;
}

void ASViewOverlayImpl_setOffsetVerticalWithNSString_(ASViewOverlayImpl *self, NSString *offsetVertical) {
  self->offsetVertical_ = offsetVertical;
}

void ASViewOverlayImpl_setDrawableWithId_(ASViewOverlayImpl *self, id drawable) {
  if ([drawable isKindOfClass:[ADDrawable class]]) {
    self->drawable_ = (ADDrawable *) drawable;
  }
  else {
    self->drawable_ = nil;
  }
  ASViewOverlayImpl_updateDrawableAttributes(self);
}

void ASViewOverlayImpl_setTypeWithNSString_(ASViewOverlayImpl *self, NSString *boundsType) {
  self->boundsType_ = boundsType;
}

void ASViewOverlayImpl_setAnchorRefWithNSString_(ASViewOverlayImpl *self, NSString *id_) {
  self->anchor_ = [((id<ASHasWidgets>) nil_chk([self getParent])) findWidgetByIdWithNSString:id_];
  ASViewOverlayImpl_addOverlay(self);
}

void ASViewOverlayImpl_addOverlay(ASViewOverlayImpl *self) {
  {
    if (self->anchor_ != nil) {
      ADView *view = (ADView *) cast_chk([self->anchor_ asWidget], [ADView class]);
      if (self->currentDrawable_ != nil) {
        [((ADViewOverlay *) nil_chk([((ADView *) nil_chk(view)) getOverlay])) removeWithADDrawable:self->currentDrawable_];
      }
      ASViewOverlayImpl_addOverlayInternalWithADView_(self, view);
    }
  }
}

IOSIntArray *ASViewOverlayImpl_getBoundsWithADView_(ASViewOverlayImpl *self, ADView *view) {
  jint width = [((ADView *) nil_chk(view)) getWidth];
  jint height = [view getHeight];
  jint left = ASViewOverlayImpl_getLeftWithADView_(self, view);
  
  ;
  jint top = ASViewOverlayImpl_getTopWithADView_(self, view);
  jint intrinsicWidth = [((ADDrawable *) nil_chk(self->drawable_)) getIntrinsicWidth];
  jint mydrawableWidth = ASViewOverlayImpl_getDrawableDimenWithNSString_withInt_withInt_withInt_(self, self->drawableWidth_, intrinsicWidth, width, height);
  jint intrinsicHeight = [((ADDrawable *) nil_chk(self->drawable_)) getIntrinsicHeight];
  jint mydrawableHeight = ASViewOverlayImpl_getDrawableDimenWithNSString_withInt_withInt_withInt_(self, self->drawableHeight_, intrinsicHeight, width, height);
  jint myoffsetHorizontal = ASViewOverlayImpl_percentDimensionConvertWithNSString_withInt_withInt_(self, self->offsetHorizontal_, width, height);
  jint myoffsetVertical = ASViewOverlayImpl_percentDimensionConvertWithNSString_withInt_withInt_(self, self->offsetVertical_, width, height);
  if (self->offsetHorizontal_ == nil) {
    myoffsetHorizontal = 0;
  }
  if (self->offsetVertical_ == nil) {
    myoffsetVertical = 0;
  }
  IOSObjectArray *value = [IOSObjectArray newArrayWithObjects:(id[]){ self->boundsType_, JavaLangInteger_valueOfWithInt_(mydrawableWidth), JavaLangInteger_valueOfWithInt_(mydrawableHeight), JavaLangInteger_valueOfWithInt_(left), JavaLangInteger_valueOfWithInt_(top), JavaLangInteger_valueOfWithInt_(width), JavaLangInteger_valueOfWithInt_(height) } count:7 type:NSObject_class_()];
  IOSIntArray *bounds = (IOSIntArray *) cast_chk([((id<ASIConverter>) nil_chk(ASConverterFactory_getWithNSString_(self->boundsConverter_))) convertFromWithId:value withJavaUtilMap:nil withASIFragment:[self getFragment]], [IOSIntArray class]);
  IOSIntArray *finalBounds = [IOSIntArray newArrayWithInts:(jint[]){ IOSIntArray_Get(nil_chk(bounds), 0) + myoffsetHorizontal, IOSIntArray_Get(bounds, 1) + myoffsetVertical, IOSIntArray_Get(bounds, 2) + IOSIntArray_Get(bounds, 0) + myoffsetHorizontal, IOSIntArray_Get(bounds, 3) + IOSIntArray_Get(bounds, 1) + myoffsetVertical } count:4];
  return finalBounds;
}

jint ASViewOverlayImpl_getDrawableDimenWithNSString_withInt_withInt_withInt_(ASViewOverlayImpl *self, NSString *dimen, jint intrinsicDimen, jint width, jint height) {
  jint finalWidth = ASViewOverlayImpl_percentDimensionConvertWithNSString_withInt_withInt_(self, dimen, width, height);
  if (finalWidth == -1) {
    finalWidth = intrinsicDimen;
  }
  return finalWidth;
}

jint ASViewOverlayImpl_percentDimensionConvertWithNSString_withInt_withInt_(ASViewOverlayImpl *self, NSString *dimen, jint width, jint height) {
  jint finalWidth = -1;
  if (dimen != nil) {
    if ([dimen java_hasSuffix:@"%w"]) {
      finalWidth = JreFpToInt(((JavaLangInteger_parseIntWithNSString_([dimen java_replace:@"%w" withSequence:@""]) / 100.0f) * width));
    }
    else if ([dimen java_hasSuffix:@"%h"]) {
      finalWidth = JreFpToInt(((JavaLangInteger_parseIntWithNSString_([dimen java_replace:@"%h" withSequence:@""]) / 100.0f) * height));
    }
    else {
      finalWidth = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([self quickConvertWithId:dimen withNSString:ASCommonConverters_dimension], [JavaLangInteger class]))) intValue];
    }
  }
  return finalWidth;
}

void ASViewOverlayImpl_setBoundsConverterWithNSString_(ASViewOverlayImpl *self, NSString *boundsConverter) {
  self->boundsConverter_ = boundsConverter;
}

void ASViewOverlayImpl_addOverlayInternalWithADView_(ASViewOverlayImpl *self, ADView *view) {
  if (self->drawable_ != nil) {
    [self->drawable_ setOverlayWithASIWidget:self];
    [((ADViewOverlay *) nil_chk([((ADView *) nil_chk(view)) getOverlay])) addWithADDrawable:self->drawable_];
  }
  self->currentDrawable_ = self->drawable_;
  if (self->anchor_ != nil) {
    [self->anchor_ requestLayout];
    [((id<ASIWidget>) nil_chk(self->anchor_)) invalidate];
  }
}

jint ASViewOverlayImpl_getTopWithADView_(ASViewOverlayImpl *self, ADView *view) {
  if (self->useGC_) {
    return 0;
  }
  return [((ADView *) nil_chk(view)) getTop];
}

jint ASViewOverlayImpl_getLeftWithADView_(ASViewOverlayImpl *self, ADView *view) {
  if (self->useGC_) {
    return 0;
  }
  return [((ADView *) nil_chk(view)) getLeft];
}

void ASViewOverlayImpl_setUseGCWithId_(ASViewOverlayImpl *self, id useGC) {
  self->useGC_ = [((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(useGC, [JavaLangBoolean class]))) booleanValue];
  if (self->drawable_ != nil) {
    [self->drawable_ setUseGCWithBoolean:self->useGC_];
  }
}

void ASViewOverlayImpl_updateDrawableAttributes(ASViewOverlayImpl *self) {
  if (self->drawable_ != nil) {
    [self->drawable_ setUseGCWithBoolean:self->useGC_];
  }
}

void ASViewOverlayImpl_nativeCreateWithASIFragment_withJavaUtilMap_(ASViewOverlayImpl *self, id<ASIFragment> fragment, id<JavaUtilMap> params) {
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASViewOverlayImpl)

@implementation ASViewOverlayImpl_ViewExt

- (instancetype)initWithASViewOverlayImpl:(ASViewOverlayImpl *)outer$ {
  ASViewOverlayImpl_ViewExt_initWithASViewOverlayImpl_(self, outer$);
  return self;
}

- (void)remeasure {
  if ([this$0_ getFragment] != nil) {
    [((id<ASIFragment>) nil_chk([this$0_ getFragment])) remeasure];
  }
}

- (ADView *)inflateViewWithNSString:(NSString *)layout {
  if (templates_ == nil) {
    templates_ = new_JavaUtilHashMap_init();
  }
  id<ASIWidget> template_ = [templates_ getWithId:layout];
  if (template_ == nil) {
    template_ = (id<ASIWidget>) cast_check([this$0_ quickConvertWithId:layout withNSString:@"template"], ASIWidget_class_());
    (void) [((id<JavaUtilMap>) nil_chk(templates_)) putWithId:layout withId:template_];
  }
  id<ASIWidget> widget = [((id<ASIWidget>) nil_chk(template_)) loadLazyWidgetsWithASHasWidgets:[this$0_ getParent]];
  return (ADView *) cast_chk([((id<ASIWidget>) nil_chk(widget)) asWidget], [ADView class]);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADView;", 0x1, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASViewOverlayImpl:);
  methods[1].selector = @selector(remeasure);
  methods[2].selector = @selector(inflateViewWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASViewOverlayImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "templates_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 3, -1 },
  };
  static const void *ptrTable[] = { "LASViewOverlayImpl;", "inflateView", "LNSString;", "Ljava/util/Map<Ljava/lang/String;Lcom/ashera/widget/IWidget;>;" };
  static const J2ObjcClassInfo _ASViewOverlayImpl_ViewExt = { "ViewExt", "com.ashera.layout", ptrTable, methods, fields, 7, 0x1, 3, 2, 0, -1, -1, -1, -1 };
  return &_ASViewOverlayImpl_ViewExt;
}

@end

void ASViewOverlayImpl_ViewExt_initWithASViewOverlayImpl_(ASViewOverlayImpl_ViewExt *self, ASViewOverlayImpl *outer$) {
  self->this$0_ = outer$;
  ADView_init(self);
}

ASViewOverlayImpl_ViewExt *new_ASViewOverlayImpl_ViewExt_initWithASViewOverlayImpl_(ASViewOverlayImpl *outer$) {
  J2OBJC_NEW_IMPL(ASViewOverlayImpl_ViewExt, initWithASViewOverlayImpl_, outer$)
}

ASViewOverlayImpl_ViewExt *create_ASViewOverlayImpl_ViewExt_initWithASViewOverlayImpl_(ASViewOverlayImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASViewOverlayImpl_ViewExt, initWithASViewOverlayImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASViewOverlayImpl_ViewExt)
