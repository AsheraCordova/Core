//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-ios-widgets\ios_widget_library\src\main\java\com\ashera\layout\HorizontalScrollViewImpl.java
//

#define J2OBJC_IMPORTED_BY_JAVA_IMPLEMENTATION 1




#include "BaseHasWidgets.h"
#include "EventCommand.h"
#include "EventCommandFactory.h"
#include "EventExpressionParser.h"
#include "FrameLayout.h"
#include "HasWidgets.h"
#include "HorizontalScrollView.h"
#include "HorizontalScrollViewImpl.h"
#include "IActivity.h"
#include "IFragment.h"
#include "ILifeCycleDecorator.h"
#include "IListener.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "IWidget.h"
#include "IWidgetLifeCycleListener.h"
#include "J2ObjC_source.h"
#include "LayoutTransition.h"
#include "MeasureEvent.h"
#include "OnLayoutEvent.h"
#include "PluginInvoker.h"
#include "Rect.h"
#include "View.h"
#include "ViewGroup.h"
#include "ViewGroupImpl.h"
#include "ViewImpl.h"
#include "ViewTreeObserver.h"
#include "WidgetAttribute.h"
#include "WidgetFactory.h"
#include "java/lang/Boolean.h"
#include "java/lang/Double.h"
#include "java/lang/Integer.h"
#include "java/lang/Runnable.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"

#include <UIKit/UIKit.h>
#include "ASUIView.h"
#include "HasLifeCycleDecorators.h"

#include "ASUIScrollView.h"


@class NSString;


#pragma clang diagnostic error "-Wreturn-type"
#pragma clang diagnostic ignored "-Wswitch"


#pragma clang diagnostic ignored "-Wprotocol"

@interface ASHorizontalScrollViewImpl () {
 @public
  id uiView_;
  ADHorizontalScrollView *horizontalScrollView_;
  id<ADView_OnScrollChangeListener> listener_HorizontalScrollViewImpl_;
}

- (void)setWidgetOnNativeClass;

- (void)nativeRemoveViewWithASIWidget:(id<ASIWidget>)widget;

- (void)createLayoutParamsWithADView:(ADView *)view;

- (ADFrameLayout_LayoutParams *)getLayoutParamsWithADView:(ADView *)view;

- (void)setScrollXWithId:(id)objValue;

- (void)setScrollYWithId:(id)objValue;

- (void)setOnScrollWithId:(id)objValue;

- (void)setPreventAutoScrollWithId:(id)objValue;

- (void)nativeSetPreventAutoScrollWithBoolean:(bool)preventAutoScroll;

- (void)nativeCreateWithJavaUtilMap:(id<JavaUtilMap>)params;

@end

J2OBJC_FIELD_SETTER(ASHorizontalScrollViewImpl, uiView_, id)
J2OBJC_FIELD_SETTER(ASHorizontalScrollViewImpl, horizontalScrollView_, ADHorizontalScrollView *)
J2OBJC_FIELD_SETTER(ASHorizontalScrollViewImpl, listener_HorizontalScrollViewImpl_, id<ADView_OnScrollChangeListener>)

__attribute__((unused)) static void ASHorizontalScrollViewImpl_setWidgetOnNativeClass(ASHorizontalScrollViewImpl *self);

__attribute__((unused)) static void ASHorizontalScrollViewImpl_nativeRemoveViewWithASIWidget_(ASHorizontalScrollViewImpl *self, id<ASIWidget> widget);

__attribute__((unused)) static void ASHorizontalScrollViewImpl_createLayoutParamsWithADView_(ASHorizontalScrollViewImpl *self, ADView *view);

__attribute__((unused)) static ADFrameLayout_LayoutParams *ASHorizontalScrollViewImpl_getLayoutParamsWithADView_(ASHorizontalScrollViewImpl *self, ADView *view);

__attribute__((unused)) static void ASHorizontalScrollViewImpl_setScrollXWithId_(ASHorizontalScrollViewImpl *self, id objValue);

__attribute__((unused)) static void ASHorizontalScrollViewImpl_setScrollYWithId_(ASHorizontalScrollViewImpl *self, id objValue);

__attribute__((unused)) static void ASHorizontalScrollViewImpl_setOnScrollWithId_(ASHorizontalScrollViewImpl *self, id objValue);

__attribute__((unused)) static void ASHorizontalScrollViewImpl_setPreventAutoScrollWithId_(ASHorizontalScrollViewImpl *self, id objValue);

__attribute__((unused)) static void ASHorizontalScrollViewImpl_nativeSetPreventAutoScrollWithBoolean_(ASHorizontalScrollViewImpl *self, bool preventAutoScroll);

__attribute__((unused)) static void ASHorizontalScrollViewImpl_nativeCreateWithJavaUtilMap_(ASHorizontalScrollViewImpl *self, id<JavaUtilMap> params);

@interface ASHorizontalScrollViewImpl_HorizontalScrollViewExt () {
 @public
  WEAK_ ASHorizontalScrollViewImpl *this$0_;
  ASMeasureEvent *measureFinished_;
  ASOnLayoutEvent *onLayoutEvent_;
  id<JavaUtilList> overlays_;
  int32_t mMaxWidth_;
  int32_t mMaxHeight_;
  id<JavaUtilMap> templates_;
}

@end

J2OBJC_FIELD_SETTER(ASHorizontalScrollViewImpl_HorizontalScrollViewExt, measureFinished_, ASMeasureEvent *)
J2OBJC_FIELD_SETTER(ASHorizontalScrollViewImpl_HorizontalScrollViewExt, onLayoutEvent_, ASOnLayoutEvent *)
J2OBJC_FIELD_SETTER(ASHorizontalScrollViewImpl_HorizontalScrollViewExt, overlays_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(ASHorizontalScrollViewImpl_HorizontalScrollViewExt, templates_, id<JavaUtilMap>)

@interface ASHorizontalScrollViewImpl_MyUIScrollViewDelegate () {
 @public
  WEAK_ ASHorizontalScrollViewImpl *this$0_;
  id<ADView_OnScrollChangeListener> listener_;
}

@end

J2OBJC_FIELD_SETTER(ASHorizontalScrollViewImpl_MyUIScrollViewDelegate, listener_, id<ADView_OnScrollChangeListener>)

@interface ASHorizontalScrollViewImpl_OnScrollChangeListener : NSObject < ADView_OnScrollChangeListener, ASIListener > {
 @public
  id<ASIWidget> w_;
  ADView *view_;
  NSString *strValue_;
  NSString *action_;
}

- (NSString *)getAction;

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue;

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue
                     withNSString:(NSString *)action;

- (void)onScrollChangeWithADView:(ADView *)v
                         withInt:(int32_t)scrollX
                         withInt:(int32_t)scrollY
                         withInt:(int32_t)oldScrollX
                         withInt:(int32_t)oldScrollY;

- (id<JavaUtilMap>)getOnScrollChangeEventObjWithADView:(ADView *)v
                                               withInt:(int32_t)scrollX
                                               withInt:(int32_t)scrollY
                                               withInt:(int32_t)oldScrollX
                                               withInt:(int32_t)oldScrollY;

@end

J2OBJC_EMPTY_STATIC_INIT(ASHorizontalScrollViewImpl_OnScrollChangeListener)

J2OBJC_FIELD_SETTER(ASHorizontalScrollViewImpl_OnScrollChangeListener, w_, id<ASIWidget>)
J2OBJC_FIELD_SETTER(ASHorizontalScrollViewImpl_OnScrollChangeListener, view_, ADView *)
J2OBJC_FIELD_SETTER(ASHorizontalScrollViewImpl_OnScrollChangeListener, strValue_, NSString *)
J2OBJC_FIELD_SETTER(ASHorizontalScrollViewImpl_OnScrollChangeListener, action_, NSString *)

__attribute__((unused)) static void ASHorizontalScrollViewImpl_OnScrollChangeListener_initWithASIWidget_withNSString_(ASHorizontalScrollViewImpl_OnScrollChangeListener *self, id<ASIWidget> w, NSString *strValue);

__attribute__((unused)) static ASHorizontalScrollViewImpl_OnScrollChangeListener *new_ASHorizontalScrollViewImpl_OnScrollChangeListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASHorizontalScrollViewImpl_OnScrollChangeListener *create_ASHorizontalScrollViewImpl_OnScrollChangeListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue);

__attribute__((unused)) static void ASHorizontalScrollViewImpl_OnScrollChangeListener_initWithASIWidget_withNSString_withNSString_(ASHorizontalScrollViewImpl_OnScrollChangeListener *self, id<ASIWidget> w, NSString *strValue, NSString *action);

__attribute__((unused)) static ASHorizontalScrollViewImpl_OnScrollChangeListener *new_ASHorizontalScrollViewImpl_OnScrollChangeListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASHorizontalScrollViewImpl_OnScrollChangeListener *create_ASHorizontalScrollViewImpl_OnScrollChangeListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action);

J2OBJC_TYPE_LITERAL_HEADER(ASHorizontalScrollViewImpl_OnScrollChangeListener)


@interface ASHorizontalScrollViewImpl_$Lambda$1 : NSObject < JavaLangRunnable > {
 @public
  id<ASIWidget> val$widget_;
}

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(ASHorizontalScrollViewImpl_$Lambda$1)

__attribute__((unused)) static void ASHorizontalScrollViewImpl_$Lambda$1_initWithASIWidget_(ASHorizontalScrollViewImpl_$Lambda$1 *self, id<ASIWidget> capture$0);

__attribute__((unused)) static ASHorizontalScrollViewImpl_$Lambda$1 *new_ASHorizontalScrollViewImpl_$Lambda$1_initWithASIWidget_(id<ASIWidget> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASHorizontalScrollViewImpl_$Lambda$1 *create_ASHorizontalScrollViewImpl_$Lambda$1_initWithASIWidget_(id<ASIWidget> capture$0);


NSString *ASHorizontalScrollViewImpl_LOCAL_NAME = @"HorizontalScrollView";
NSString *ASHorizontalScrollViewImpl_GROUP_NAME = @"HorizontalScrollView";

@implementation ASHorizontalScrollViewImpl

@synthesize uiView = uiView_;

- (void)loadAttributesWithNSString:(NSString *)localName {
  ASViewGroupImpl_register__WithNSString_(localName);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"foregroundGravity"])) withTypeWithNSString:@"gravity"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT_N_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"measureAllChildren"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"fillViewport"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"scrollX"])) withTypeWithNSString:@"dimension"])) withBufferStrategyWithInt:ASIWidget_BUFFER_STRATEGY_DURING_INIT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"onScrollChange"])) withTypeWithNSString:@"string"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosPreventAutoScroll"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_gravity"])) withTypeWithNSString:@"gravity"])) forChild]);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASHorizontalScrollViewImpl_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithNSString:(NSString *)localname {
  ASHorizontalScrollViewImpl_initWithNSString_(self, localname);
  return self;
}

- (instancetype)initWithNSString:(NSString *)groupName
                    withNSString:(NSString *)localname {
  ASHorizontalScrollViewImpl_initWithNSString_withNSString_(self, groupName, localname);
  return self;
}

- (id<ASIWidget>)newInstance {
  return new_ASHorizontalScrollViewImpl_initWithNSString_withNSString_(groupName_, localName_);
}

- (void)createWithASIFragment:(id<ASIFragment>)fragment
              withJavaUtilMap:(id<JavaUtilMap>)params {
  [super createWithASIFragment:fragment withJavaUtilMap:params];
  horizontalScrollView_ = new_ASHorizontalScrollViewImpl_HorizontalScrollViewExt_initWithASHorizontalScrollViewImpl_(self);
  ASHorizontalScrollViewImpl_nativeCreateWithJavaUtilMap_(self, params);
  ASViewGroupImpl_registerCommandConveterWithASIWidget_(self);
  ASHorizontalScrollViewImpl_setWidgetOnNativeClass(self);
}

- (void)setWidgetOnNativeClass {
  ASHorizontalScrollViewImpl_setWidgetOnNativeClass(self);
}

- (id)asWidget {
  return horizontalScrollView_;
}

- (bool)removeWithASIWidget:(id<ASIWidget>)w {
  bool remove = [super removeWithASIWidget:w];
  [((ADHorizontalScrollView *) nil_chk(horizontalScrollView_)) removeViewWithADView:(ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class])];
  ASHorizontalScrollViewImpl_nativeRemoveViewWithASIWidget_(self, w);
  return remove;
}

- (bool)removeWithInt:(int32_t)index {
  id<ASIWidget> widget = [((id<JavaUtilList>) nil_chk(widgets_)) getWithInt:index];
  bool remove = [super removeWithInt:index];
  if (index + 1 <= [((ADHorizontalScrollView *) nil_chk(horizontalScrollView_)) getChildCount]) {
    [((ADHorizontalScrollView *) nil_chk(horizontalScrollView_)) removeViewAtWithInt:index];
    ASHorizontalScrollViewImpl_nativeRemoveViewWithASIWidget_(self, widget);
  }
  return remove;
}

- (void)nativeRemoveViewWithASIWidget:(id<ASIWidget>)widget {
  ASHorizontalScrollViewImpl_nativeRemoveViewWithASIWidget_(self, widget);
}

- (void)addWithASIWidget:(id<ASIWidget>)w
                 withInt:(int32_t)index {
  if (index != -2) {
    ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]);
    ASHorizontalScrollViewImpl_createLayoutParamsWithADView_(self, view);
    if (index == -1) {
      [((ADHorizontalScrollView *) nil_chk(horizontalScrollView_)) addViewWithADView:view];
    }
    else {
      [((ADHorizontalScrollView *) nil_chk(horizontalScrollView_)) addViewWithADView:view withInt:index];
    }
  }
  ASViewGroupImpl_nativeAddViewWithId_withId_([self asNativeWidget], [((id<ASIWidget>) nil_chk(w)) asNativeWidget]);
  [super addWithASIWidget:w withInt:index];
}

- (void)createLayoutParamsWithADView:(ADView *)view {
  ASHorizontalScrollViewImpl_createLayoutParamsWithADView_(self, view);
}

- (ADFrameLayout_LayoutParams *)getLayoutParamsWithADView:(ADView *)view {
  return ASHorizontalScrollViewImpl_getLayoutParamsWithADView_(self, view);
}

- (void)setChildAttributeWithASIWidget:(id<ASIWidget>)w
                 withASWidgetAttribute:(ASWidgetAttribute *)key
                          withNSString:(NSString *)strValue
                                withId:(id)objValue {
  ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]);
  ADFrameLayout_LayoutParams *layoutParams = ASHorizontalScrollViewImpl_getLayoutParamsWithADView_(self, view);
  ASViewGroupImpl_setChildAttributeWithASIWidget_withASWidgetAttribute_withId_withId_(w, key, objValue, layoutParams);
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"layout_width", @"layout_height", @"layout_gravity" }, 3)) {
    case 0:
    ((ADFrameLayout_LayoutParams *) nil_chk(layoutParams))->width_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
    break;
    case 1:
    ((ADFrameLayout_LayoutParams *) nil_chk(layoutParams))->height_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
    break;
    case 2:
    {
      ((ADFrameLayout_LayoutParams *) nil_chk(layoutParams))->gravity_ = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class])))) intValue];
    }
    break;
    default:
    break;
  }
  [((ADView *) nil_chk(view)) setLayoutParamsWithADViewGroup_LayoutParams:layoutParams];
}

- (id)getChildAttributeWithASIWidget:(id<ASIWidget>)w
               withASWidgetAttribute:(ASWidgetAttribute *)key {
  id attributeValue = ASViewGroupImpl_getChildAttributeWithASIWidget_withASWidgetAttribute_(w, key);
  if (attributeValue != nil) {
    return attributeValue;
  }
  ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]);
  ADFrameLayout_LayoutParams *layoutParams = ASHorizontalScrollViewImpl_getLayoutParamsWithADView_(self, view);
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"layout_width", @"layout_height", @"layout_gravity" }, 3)) {
    case 0:
    return JavaLangInteger_valueOfWithInt_(((ADFrameLayout_LayoutParams *) nil_chk(layoutParams))->width_);
    case 1:
    return JavaLangInteger_valueOfWithInt_(((ADFrameLayout_LayoutParams *) nil_chk(layoutParams))->height_);
    case 2:
    {
      return JavaLangInteger_valueOfWithInt_(((ADFrameLayout_LayoutParams *) nil_chk(layoutParams))->gravity_);
    }
  }
  return nil;
}

- (IOSClass *)getViewClass {
  return ASHorizontalScrollViewImpl_HorizontalScrollViewExt_class_();
}

- (void)setAttributeWithASWidgetAttribute:(ASWidgetAttribute *)key
                             withNSString:(NSString *)strValue
                                   withId:(id)objValue
                withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  ASViewGroupImpl_setAttributeWithASIWidget_withASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(self, key, strValue, objValue, decorator);
  id nativeWidget = [self asNativeWidget];
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"foregroundGravity", @"measureAllChildren", @"fillViewport", @"scrollX", @"onScrollChange", @"iosPreventAutoScroll" }, 6)) {
    case 0:
    {
      [((ADHorizontalScrollView *) nil_chk(horizontalScrollView_)) setForegroundGravityWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
    }
    break;
    case 1:
    {
      [((ADHorizontalScrollView *) nil_chk(horizontalScrollView_)) setMeasureAllChildrenWithBoolean:[((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]))) booleanValue]];
    }
    break;
    case 2:
    {
      [((ADHorizontalScrollView *) nil_chk(horizontalScrollView_)) setFillViewportWithBoolean:[((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]))) booleanValue]];
    }
    break;
    case 3:
    {
      ASHorizontalScrollViewImpl_setScrollXWithId_(self, objValue);
    }
    break;
    case 4:
    {
      ASHorizontalScrollViewImpl_setOnScrollWithId_(self, objValue);
    }
    break;
    case 5:
    {
      ASHorizontalScrollViewImpl_setPreventAutoScrollWithId_(self, objValue);
    }
    break;
    default:
    break;
  }
}

- (id)getAttributeWithASWidgetAttribute:(ASWidgetAttribute *)key
              withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  id attributeValue = ASViewGroupImpl_getAttributeWithASIWidget_withASWidgetAttribute_withASILifeCycleDecorator_(self, key, decorator);
  if (attributeValue != nil) {
    return attributeValue;
  }
  id nativeWidget = [self asNativeWidget];
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"measureAllChildren", @"fillViewport", @"scrollX" }, 3)) {
    case 0:
    {
      {
        return JavaLangBoolean_valueOfWithBoolean_([((ADHorizontalScrollView *) nil_chk(horizontalScrollView_)) getMeasureAllChildren]);
      }
    }
    case 1:
    {
      return JavaLangBoolean_valueOfWithBoolean_([((ADHorizontalScrollView *) nil_chk(horizontalScrollView_)) isFillViewport]);
    }
    case 2:
    {
      return [self getScrollX];
    }
  }
  return nil;
}

- (id)asNativeWidget {
  return uiView_;
}

- (bool)checkIosVersionWithNSString:(NSString *)v {
  return ([[[UIDevice currentDevice] systemVersion] compare:v options:NSNumericSearch] == NSOrderedDescending);
}

- (void)requestLayout {
  if ([self isInitialised]) {
    ASViewImpl_requestLayoutWithASIWidget_withId_(self, [self asNativeWidget]);
  }
}

- (void)invalidate {
  if ([self isInitialised]) {
    ASViewImpl_invalidateWithASIWidget_withId_(self, [self asNativeWidget]);
  }
}

- (void)setScrollXWithId:(id)objValue {
  ASHorizontalScrollViewImpl_setScrollXWithId_(self, objValue);
}

- (void)nativeSetScrollXWithId:(id)view
                       withInt:(int32_t)value {
  [((ASUIScrollView*)view) setContentOffset:CGPointMake(value ,((ASUIScrollView*)view).contentOffset.y)];
}

- (void)setScrollYWithId:(id)objValue {
  ASHorizontalScrollViewImpl_setScrollYWithId_(self, objValue);
}

- (void)nativeSetScrollYWithId:(id)view
                       withInt:(int32_t)value {
  [((ASUIScrollView*)view) setContentOffset:CGPointMake(((ASUIScrollView*)view).contentOffset.x, value)];
}

- (id)getScrollX {
  return JavaLangDouble_valueOfWithDouble_([self nativeGetScrollXWithId:[self asNativeWidget]]);
}

- (double)nativeGetScrollXWithId:(id)view {
  return ((ASUIScrollView*)view).contentOffset.x;
}

- (id)getScrollY {
  return JavaLangDouble_valueOfWithDouble_([self nativeGetScrollYWithId:[self asNativeWidget]]);
}

- (double)nativeGetScrollYWithId:(id)view {
  return ((ASUIScrollView*)view).contentOffset.y;
}

- (void)setOnScrollWithId:(id)objValue {
  ASHorizontalScrollViewImpl_setOnScrollWithId_(self, objValue);
}

- (void)setPreventAutoScrollWithId:(id)objValue {
  ASHorizontalScrollViewImpl_setPreventAutoScrollWithId_(self, objValue);
}

- (void)nativeSetPreventAutoScrollWithBoolean:(bool)preventAutoScroll {
  ASHorizontalScrollViewImpl_nativeSetPreventAutoScrollWithBoolean_(self, preventAutoScroll);
}

- (void)setIdWithNSString:(NSString *)id_ {
  if (id_ != nil && ![id_ isEqual:@""]) {
    [super setIdWithNSString:id_];
    [((ADHorizontalScrollView *) nil_chk(horizontalScrollView_)) setIdWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([self quickConvertWithId:id_ withNSString:@"id"], [JavaLangInteger class]))) intValue]];
  }
}

- (void)setVisibleWithBoolean:(bool)b {
  [((ADView *) nil_chk(((ADView *) cast_chk([self asWidget], [ADView class])))) setVisibilityWithInt:b ? ADView_VISIBLE : ADView_GONE];
}

- (void)nativeCreateWithJavaUtilMap:(id<JavaUtilMap>)params {
  ASHorizontalScrollViewImpl_nativeCreateWithJavaUtilMap_(self, params);
}

- (id)nativeHscrollViewCreate {
  ASUIScrollView* uiView = [ASUIScrollView new];
  uiView.backgroundColor = [UIColor clearColor];
  uiView.showsHorizontalScrollIndicator=YES;
  uiView.scrollEnabled=YES;
  uiView.userInteractionEnabled=YES;
  return uiView;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "LASIWidget;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, 5, -1, -1 },
    { NULL, "V", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 6, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 9, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 12, 13, -1, -1, -1, -1 },
    { NULL, "LADFrameLayout_LayoutParams;", 0x2, 14, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 16, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 17, 18, -1, -1, -1, -1 },
    { NULL, "LIOSClass;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 20, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 21, 22, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x101, 23, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 24, 25, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 26, 27, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 28, 25, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 29, 27, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x101, 30, 25, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x101, 31, 25, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 32, 25, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 33, 25, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 34, 35, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 36, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 37, 35, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 38, 39, -1, 40, -1, -1 },
    { NULL, "LNSObject;", 0x101, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(loadAttributesWithNSString:);
  methods[1].selector = @selector(init);
  methods[2].selector = @selector(initWithNSString:);
  methods[3].selector = @selector(initWithNSString:withNSString:);
  methods[4].selector = @selector(newInstance);
  methods[5].selector = @selector(createWithASIFragment:withJavaUtilMap:);
  methods[6].selector = @selector(setWidgetOnNativeClass);
  methods[7].selector = @selector(asWidget);
  methods[8].selector = @selector(removeWithASIWidget:);
  methods[9].selector = @selector(removeWithInt:);
  methods[10].selector = @selector(nativeRemoveViewWithASIWidget:);
  methods[11].selector = @selector(addWithASIWidget:withInt:);
  methods[12].selector = @selector(createLayoutParamsWithADView:);
  methods[13].selector = @selector(getLayoutParamsWithADView:);
  methods[14].selector = @selector(setChildAttributeWithASIWidget:withASWidgetAttribute:withNSString:withId:);
  methods[15].selector = @selector(getChildAttributeWithASIWidget:withASWidgetAttribute:);
  methods[16].selector = @selector(getViewClass);
  methods[17].selector = @selector(setAttributeWithASWidgetAttribute:withNSString:withId:withASILifeCycleDecorator:);
  methods[18].selector = @selector(getAttributeWithASWidgetAttribute:withASILifeCycleDecorator:);
  methods[19].selector = @selector(asNativeWidget);
  methods[20].selector = @selector(checkIosVersionWithNSString:);
  methods[21].selector = @selector(requestLayout);
  methods[22].selector = @selector(invalidate);
  methods[23].selector = @selector(setScrollXWithId:);
  methods[24].selector = @selector(nativeSetScrollXWithId:withInt:);
  methods[25].selector = @selector(setScrollYWithId:);
  methods[26].selector = @selector(nativeSetScrollYWithId:withInt:);
  methods[27].selector = @selector(getScrollX);
  methods[28].selector = @selector(nativeGetScrollXWithId:);
  methods[29].selector = @selector(getScrollY);
  methods[30].selector = @selector(nativeGetScrollYWithId:);
  methods[31].selector = @selector(setOnScrollWithId:);
  methods[32].selector = @selector(setPreventAutoScrollWithId:);
  methods[33].selector = @selector(nativeSetPreventAutoScrollWithBoolean:);
  methods[34].selector = @selector(setIdWithNSString:);
  methods[35].selector = @selector(setVisibleWithBoolean:);
  methods[36].selector = @selector(nativeCreateWithJavaUtilMap:);
  methods[37].selector = @selector(nativeHscrollViewCreate);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "uiView_", "LNSObject;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "LOCAL_NAME", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 41, -1, -1 },
    { "GROUP_NAME", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 42, -1, -1 },
    { "horizontalScrollView_", "LADHorizontalScrollView;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "listener_HorizontalScrollViewImpl_", "LADView_OnScrollChangeListener;", .constantValue.asLong = 0, 0x2, 43, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "loadAttributes", "LNSString;", "LNSString;LNSString;", "create", "LASIFragment;LJavaUtilMap;", "(Lcom/ashera/core/IFragment;Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;)V", "remove", "LASIWidget;", "I", "nativeRemoveView", "add", "LASIWidget;I", "createLayoutParams", "LADView;", "getLayoutParams", "setChildAttribute", "LASIWidget;LASWidgetAttribute;LNSString;LNSObject;", "getChildAttribute", "LASIWidget;LASWidgetAttribute;", "setAttribute", "LASWidgetAttribute;LNSString;LNSObject;LASILifeCycleDecorator;", "getAttribute", "LASWidgetAttribute;LASILifeCycleDecorator;", "checkIosVersion", "setScrollX", "LNSObject;", "nativeSetScrollX", "LNSObject;I", "setScrollY", "nativeSetScrollY", "nativeGetScrollX", "nativeGetScrollY", "setOnScroll", "setPreventAutoScroll", "nativeSetPreventAutoScroll", "Z", "setId", "setVisible", "nativeCreate", "LJavaUtilMap;", "(Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;)V", &ASHorizontalScrollViewImpl_LOCAL_NAME, &ASHorizontalScrollViewImpl_GROUP_NAME, "listener", "LASHorizontalScrollViewImpl_HorizontalScrollViewExt;LASHorizontalScrollViewImpl_MyUIScrollViewDelegate;LASHorizontalScrollViewImpl_OnScrollChangeListener;" };
  static const J2ObjcClassInfo _ASHorizontalScrollViewImpl = { "HorizontalScrollViewImpl", "com.ashera.layout", ptrTable, methods, fields, 7, 0x1, 38, 5, -1, 44, -1, -1, -1 };
  return &_ASHorizontalScrollViewImpl;
}

@end

void ASHorizontalScrollViewImpl_init(ASHorizontalScrollViewImpl *self) {
  ASBaseHasWidgets_initWithNSString_withNSString_(self, ASHorizontalScrollViewImpl_GROUP_NAME, ASHorizontalScrollViewImpl_LOCAL_NAME);
}

ASHorizontalScrollViewImpl *new_ASHorizontalScrollViewImpl_init() {
  J2OBJC_NEW_IMPL(ASHorizontalScrollViewImpl, init)
}

ASHorizontalScrollViewImpl *create_ASHorizontalScrollViewImpl_init() {
  J2OBJC_CREATE_IMPL(ASHorizontalScrollViewImpl, init)
}

void ASHorizontalScrollViewImpl_initWithNSString_(ASHorizontalScrollViewImpl *self, NSString *localname) {
  ASBaseHasWidgets_initWithNSString_withNSString_(self, ASHorizontalScrollViewImpl_GROUP_NAME, localname);
}

ASHorizontalScrollViewImpl *new_ASHorizontalScrollViewImpl_initWithNSString_(NSString *localname) {
  J2OBJC_NEW_IMPL(ASHorizontalScrollViewImpl, initWithNSString_, localname)
}

ASHorizontalScrollViewImpl *create_ASHorizontalScrollViewImpl_initWithNSString_(NSString *localname) {
  J2OBJC_CREATE_IMPL(ASHorizontalScrollViewImpl, initWithNSString_, localname)
}

void ASHorizontalScrollViewImpl_initWithNSString_withNSString_(ASHorizontalScrollViewImpl *self, NSString *groupName, NSString *localname) {
  ASBaseHasWidgets_initWithNSString_withNSString_(self, groupName, localname);
}

ASHorizontalScrollViewImpl *new_ASHorizontalScrollViewImpl_initWithNSString_withNSString_(NSString *groupName, NSString *localname) {
  J2OBJC_NEW_IMPL(ASHorizontalScrollViewImpl, initWithNSString_withNSString_, groupName, localname)
}

ASHorizontalScrollViewImpl *create_ASHorizontalScrollViewImpl_initWithNSString_withNSString_(NSString *groupName, NSString *localname) {
  J2OBJC_CREATE_IMPL(ASHorizontalScrollViewImpl, initWithNSString_withNSString_, groupName, localname)
}

void ASHorizontalScrollViewImpl_setWidgetOnNativeClass(ASHorizontalScrollViewImpl *self) {
  ((ASUIScrollView*) [self asNativeWidget]).widget = self;
}

void ASHorizontalScrollViewImpl_nativeRemoveViewWithASIWidget_(ASHorizontalScrollViewImpl *self, id<ASIWidget> widget) {
  ADLayoutTransition *layoutTransition = [((ADHorizontalScrollView *) nil_chk(self->horizontalScrollView_)) getLayoutTransition];
  if (layoutTransition != nil && ([layoutTransition isTransitionTypeEnabledWithInt:ADLayoutTransition_CHANGE_DISAPPEARING] || [layoutTransition isTransitionTypeEnabledWithInt:ADLayoutTransition_DISAPPEARING])) {
    [self addToBufferedRunnablesWithJavaLangRunnable:new_ASHorizontalScrollViewImpl_$Lambda$1_initWithASIWidget_(widget)];
  }
  else {
    ASViewGroupImpl_nativeRemoveViewWithASIWidget_(widget);
  }
}

void ASHorizontalScrollViewImpl_createLayoutParamsWithADView_(ASHorizontalScrollViewImpl *self, ADView *view) {
  ADFrameLayout_LayoutParams *layoutParams = (ADFrameLayout_LayoutParams *) cast_chk([((ADView *) nil_chk(view)) getLayoutParams], [ADFrameLayout_LayoutParams class]);
  layoutParams = (ADFrameLayout_LayoutParams *) cast_chk([view getLayoutParams], [ADFrameLayout_LayoutParams class]);
  if (layoutParams == nil) {
    layoutParams = new_ADFrameLayout_LayoutParams_initWithInt_withInt_(-2, -2);
    [view setLayoutParamsWithADViewGroup_LayoutParams:layoutParams];
  }
  else {
    layoutParams->height_ = -2;
    layoutParams->width_ = -2;
  }
}

ADFrameLayout_LayoutParams *ASHorizontalScrollViewImpl_getLayoutParamsWithADView_(ASHorizontalScrollViewImpl *self, ADView *view) {
  return (ADFrameLayout_LayoutParams *) cast_chk([((ADView *) nil_chk(view)) getLayoutParams], [ADFrameLayout_LayoutParams class]);
}

void ASHorizontalScrollViewImpl_setScrollXWithId_(ASHorizontalScrollViewImpl *self, id objValue) {
  [self nativeSetScrollXWithId:[self asNativeWidget] withInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
}

void ASHorizontalScrollViewImpl_setScrollYWithId_(ASHorizontalScrollViewImpl *self, id objValue) {
  [self nativeSetScrollYWithId:[self asNativeWidget] withInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
}

void ASHorizontalScrollViewImpl_setOnScrollWithId_(ASHorizontalScrollViewImpl *self, id objValue) {
  if ([objValue isKindOfClass:[NSString class]]) {
    self->listener_HorizontalScrollViewImpl_ = new_ASHorizontalScrollViewImpl_OnScrollChangeListener_initWithASIWidget_withNSString_(self, (NSString *) objValue);
  }
  else {
    self->listener_HorizontalScrollViewImpl_ = (id<ADView_OnScrollChangeListener>) cast_check(objValue, ADView_OnScrollChangeListener_class_());
  }
}

void ASHorizontalScrollViewImpl_setPreventAutoScrollWithId_(ASHorizontalScrollViewImpl *self, id objValue) {
  ASHorizontalScrollViewImpl_nativeSetPreventAutoScrollWithBoolean_(self, [((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]))) booleanValue]);
}

void ASHorizontalScrollViewImpl_nativeSetPreventAutoScrollWithBoolean_(ASHorizontalScrollViewImpl *self, bool preventAutoScroll) {
  ASUIScrollView* scrollview = ((ASUIScrollView*)self.uiView);
  scrollview.preventAutoScroll = preventAutoScroll;
}

void ASHorizontalScrollViewImpl_nativeCreateWithJavaUtilMap_(ASHorizontalScrollViewImpl *self, id<JavaUtilMap> params) {
  self->uiView_ = [self nativeHscrollViewCreate];
  ASHorizontalScrollViewImpl_MyUIScrollViewDelegate *myUIScrollViewDelegate = new_ASHorizontalScrollViewImpl_MyUIScrollViewDelegate_initWithASHorizontalScrollViewImpl_(self);
  [myUIScrollViewDelegate nativeScrollChangeListenerWithId:[self asNativeWidget]];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASHorizontalScrollViewImpl)

J2OBJC_NAME_MAPPING(ASHorizontalScrollViewImpl, "com.ashera.layout", "AS")

@implementation ASHorizontalScrollViewImpl_HorizontalScrollViewExt

- (id<ASIWidget>)getWidget {
  return this$0_;
}

- (void)setMaxWidthWithInt:(int32_t)width {
  mMaxWidth_ = width;
}

- (void)setMaxHeightWithInt:(int32_t)height {
  mMaxHeight_ = height;
}

- (int32_t)getMaxWidth {
  return mMaxWidth_;
}

- (int32_t)getMaxHeight {
  return mMaxHeight_;
}

- (instancetype)initWithASHorizontalScrollViewImpl:(ASHorizontalScrollViewImpl *)outer$ {
  ASHorizontalScrollViewImpl_HorizontalScrollViewExt_initWithASHorizontalScrollViewImpl_(self, outer$);
  return self;
}

- (void)onMeasureWithInt:(int32_t)widthMeasureSpec
                 withInt:(int32_t)heightMeasureSpec {
  if (mMaxWidth_ > 0) {
    widthMeasureSpec = ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_(mMaxWidth_, ADView_MeasureSpec_AT_MOST);
  }
  if (mMaxHeight_ > 0) {
    heightMeasureSpec = ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_(mMaxHeight_, ADView_MeasureSpec_AT_MOST);
  }
  [super onMeasureWithInt:widthMeasureSpec withInt:heightMeasureSpec];
  id<ASIWidgetLifeCycleListener> listener = [this$0_ getListener];
  if (listener != nil) {
    [((ASMeasureEvent *) nil_chk(measureFinished_)) setWidthWithInt:[self getMeasuredWidth]];
    [((ASMeasureEvent *) nil_chk(measureFinished_)) setHeightWithInt:[self getMeasuredHeight]];
    [listener eventOccurredWithASIWidgetLifeCycleListener_EventId:JreLoadEnum(ASIWidgetLifeCycleListener_EventId, measureFinished) withASWidgetEvent:measureFinished_];
  }
}

- (void)onLayoutWithBoolean:(bool)changed
                    withInt:(int32_t)l
                    withInt:(int32_t)t
                    withInt:(int32_t)r
                    withInt:(int32_t)b {
  [super onLayoutWithBoolean:changed withInt:l withInt:t withInt:r withInt:b];
  ASViewImpl_setDrawableBoundsWithASIWidget_withInt_withInt_withInt_withInt_(this$0_, l, t, r, b);
  if (![self isOverlay]) {
    ASViewImpl_nativeMakeFrameForHorizontalScrollViewWithId_withInt_withInt_withInt_withInt_withInt_([this$0_ asNativeWidget], l, t, r, b, (int32_t) ([self computeHorizontalScrollRange]));
  }
  [this$0_ replayBufferedEvents];
  ASViewImpl_redrawDrawablesWithASIWidget_(this$0_);
  overlays_ = ASViewImpl_drawOverlayWithASIWidget_withJavaUtilList_(this$0_, overlays_);
  id<ASIWidgetLifeCycleListener> listener = [this$0_ getListener];
  if (listener != nil) {
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setBWithInt:b];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setLWithInt:l];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setRWithInt:r];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setTWithInt:t];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setChangedWithBoolean:changed];
    [listener eventOccurredWithASIWidgetLifeCycleListener_EventId:JreLoadEnum(ASIWidgetLifeCycleListener_EventId, onLayout) withASWidgetEvent:onLayoutEvent_];
  }
  if ([this$0_ isInvalidateOnFrameChange] && [this$0_ isInitialised]) {
    [this$0_ invalidate];
  }
}

- (void)executeWithNSString:(NSString *)method
          withNSObjectArray:(IOSObjectArray *)canvas {
}

- (void)updateMeasuredDimensionWithInt:(int32_t)width
                               withInt:(int32_t)height {
  [self setMeasuredDimensionWithInt:width withInt:height];
}

- (id<ASILifeCycleDecorator>)newInstanceWithASIWidget:(id<ASIWidget>)widget {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)setAttributeWithASWidgetAttribute:(ASWidgetAttribute *)widgetAttribute
                             withNSString:(NSString *)strValue
                                   withId:(id)objValue {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (id<JavaUtilList>)getMethods {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)initialized {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (id)getAttributeWithASWidgetAttribute:(ASWidgetAttribute *)widgetAttribute {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)drawableStateChanged {
  [super drawableStateChanged];
  if (![this$0_ isWidgetDisposed]) {
    ASViewImpl_drawableStateChangedWithASIWidget_(this$0_);
  }
}

- (ADView *)inflateViewWithNSString:(NSString *)layout {
  if (templates_ == nil) {
    templates_ = new_JavaUtilHashMap_init();
  }
  id<ASIWidget> template_ = [templates_ getWithId:layout];
  if (template_ == nil) {
    template_ = (id<ASIWidget>) cast_check([this$0_ quickConvertWithId:layout withNSString:@"template"], ASIWidget_class_());
    (void) [((id<JavaUtilMap>) nil_chk(templates_)) putWithId:layout withId:template_];
  }
  id<ASIWidget> widget = [((id<ASIWidget>) nil_chk(template_)) loadLazyWidgetsWithASHasWidgets:this$0_];
  return (ADView *) cast_chk([((id<ASIWidget>) nil_chk(widget)) asWidget], [ADView class]);
}

- (void)remeasure {
  if ([this$0_ getFragment] != nil) {
    [((id<ASIFragment>) nil_chk([this$0_ getFragment])) remeasure];
  }
}

- (void)removeFromParent {
  [((id<ASHasWidgets>) nil_chk([this$0_ getParent])) removeWithASIWidget:this$0_];
}

- (void)getLocationOnScreenWithIntArray:(IOSIntArray *)appScreenLocation {
  *IOSIntArray_GetRef(nil_chk(appScreenLocation), 0) = ASViewImpl_getLocationXOnScreenWithId_([this$0_ asNativeWidget]);
  *IOSIntArray_GetRef(appScreenLocation, 1) = ASViewImpl_getLocationYOnScreenWithId_([this$0_ asNativeWidget]);
}

- (void)getWindowVisibleDisplayFrameWithADRect:(ADRect *)displayFrame {
  ((ADRect *) nil_chk(displayFrame))->left_ = ASViewImpl_getLocationXOnScreenWithId_([this$0_ asNativeWidget]);
  displayFrame->top_ = ASViewImpl_getLocationYOnScreenWithId_([this$0_ asNativeWidget]);
  displayFrame->right_ = displayFrame->left_ + [self getWidth];
  displayFrame->bottom_ = displayFrame->top_ + [self getHeight];
}

- (void)offsetTopAndBottomWithInt:(int32_t)offset {
  [super offsetTopAndBottomWithInt:offset];
  ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_([this$0_ asNativeWidget], [self getLeft], [self getTop], [self getRight], [self getBottom]);
}

- (void)offsetLeftAndRightWithInt:(int32_t)offset {
  [super offsetLeftAndRightWithInt:offset];
  ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_([this$0_ asNativeWidget], [self getLeft], [self getTop], [self getRight], [self getBottom]);
}

- (void)setMyAttributeWithNSString:(NSString *)name
                            withId:(id)value {
  if ([((NSString *) nil_chk(name)) isEqual:@"state0"]) {
    [self setState0WithId:value];
    return;
  }
  if ([name isEqual:@"state1"]) {
    [self setState1WithId:value];
    return;
  }
  if ([name isEqual:@"state2"]) {
    [self setState2WithId:value];
    return;
  }
  if ([name isEqual:@"state3"]) {
    [self setState3WithId:value];
    return;
  }
  if ([name isEqual:@"state4"]) {
    [self setState4WithId:value];
    return;
  }
  [this$0_ setAttributeWithNSString:name withId:value withBoolean:!([value isKindOfClass:[NSString class]])];
}

- (void)setVisibilityWithInt:(int32_t)visibility {
  [super setVisibilityWithInt:visibility];
  ASViewImpl_nativeSetVisibilityWithId_withBoolean_([this$0_ asNativeWidget], visibility != ADView_VISIBLE);
}

- (void)setState0WithId:(id)value {
  ASViewImpl_setStateWithASIWidget_withInt_withId_(this$0_, 0, value);
}

- (void)setState1WithId:(id)value {
  ASViewImpl_setStateWithASIWidget_withInt_withId_(this$0_, 1, value);
}

- (void)setState2WithId:(id)value {
  ASViewImpl_setStateWithASIWidget_withInt_withId_(this$0_, 2, value);
}

- (void)setState3WithId:(id)value {
  ASViewImpl_setStateWithASIWidget_withInt_withId_(this$0_, 3, value);
}

- (void)setState4WithId:(id)value {
  ASViewImpl_setStateWithASIWidget_withInt_withId_(this$0_, 4, value);
}

- (void)state0 {
  ASViewImpl_stateWithASIWidget_withInt_(this$0_, 0);
}

- (void)state1 {
  ASViewImpl_stateWithASIWidget_withInt_(this$0_, 1);
}

- (void)state2 {
  ASViewImpl_stateWithASIWidget_withInt_(this$0_, 2);
}

- (void)state3 {
  ASViewImpl_stateWithASIWidget_withInt_(this$0_, 3);
}

- (void)state4 {
  ASViewImpl_stateWithASIWidget_withInt_(this$0_, 4);
}

- (void)stateYes {
  ASViewImpl_stateYesWithASIWidget_(this$0_);
}

- (void)stateNo {
  ASViewImpl_stateNoWithASIWidget_(this$0_);
}

- (void)endViewTransitionWithADView:(ADView *)view {
  [super endViewTransitionWithADView:view];
  [this$0_ runBufferedRunnables];
}

- (void)__javaClone:(ASHorizontalScrollViewImpl_HorizontalScrollViewExt *)original {
  [super __javaClone:original];
  JreRelease(this$0_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LASIWidget;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x81, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 5, -1, -1, -1, -1 },
    { NULL, "LASILifeCycleDecorator;", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 15, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 16, 17, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADView;", 0x1, 18, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 21, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 22, 23, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 24, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 25, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 26, 27, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 28, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 29, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 31, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 32, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 33, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 34, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 35, 36, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getWidget);
  methods[1].selector = @selector(setMaxWidthWithInt:);
  methods[2].selector = @selector(setMaxHeightWithInt:);
  methods[3].selector = @selector(getMaxWidth);
  methods[4].selector = @selector(getMaxHeight);
  methods[5].selector = @selector(initWithASHorizontalScrollViewImpl:);
  methods[6].selector = @selector(onMeasureWithInt:withInt:);
  methods[7].selector = @selector(onLayoutWithBoolean:withInt:withInt:withInt:withInt:);
  methods[8].selector = @selector(executeWithNSString:withNSObjectArray:);
  methods[9].selector = @selector(updateMeasuredDimensionWithInt:withInt:);
  methods[10].selector = @selector(newInstanceWithASIWidget:);
  methods[11].selector = @selector(setAttributeWithASWidgetAttribute:withNSString:withId:);
  methods[12].selector = @selector(getMethods);
  methods[13].selector = @selector(initialized);
  methods[14].selector = @selector(getAttributeWithASWidgetAttribute:);
  methods[15].selector = @selector(drawableStateChanged);
  methods[16].selector = @selector(inflateViewWithNSString:);
  methods[17].selector = @selector(remeasure);
  methods[18].selector = @selector(removeFromParent);
  methods[19].selector = @selector(getLocationOnScreenWithIntArray:);
  methods[20].selector = @selector(getWindowVisibleDisplayFrameWithADRect:);
  methods[21].selector = @selector(offsetTopAndBottomWithInt:);
  methods[22].selector = @selector(offsetLeftAndRightWithInt:);
  methods[23].selector = @selector(setMyAttributeWithNSString:withId:);
  methods[24].selector = @selector(setVisibilityWithInt:);
  methods[25].selector = @selector(setState0WithId:);
  methods[26].selector = @selector(setState1WithId:);
  methods[27].selector = @selector(setState2WithId:);
  methods[28].selector = @selector(setState3WithId:);
  methods[29].selector = @selector(setState4WithId:);
  methods[30].selector = @selector(state0);
  methods[31].selector = @selector(state1);
  methods[32].selector = @selector(state2);
  methods[33].selector = @selector(state3);
  methods[34].selector = @selector(state4);
  methods[35].selector = @selector(stateYes);
  methods[36].selector = @selector(stateNo);
  methods[37].selector = @selector(endViewTransitionWithADView:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASHorizontalScrollViewImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "measureFinished_", "LASMeasureEvent;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "onLayoutEvent_", "LASOnLayoutEvent;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "overlays_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 37, -1 },
    { "mMaxWidth_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mMaxHeight_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "templates_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 38, -1 },
  };
  static const void *ptrTable[] = { "setMaxWidth", "I", "setMaxHeight", "LASHorizontalScrollViewImpl;", "onMeasure", "II", "onLayout", "ZIIII", "execute", "LNSString;[LNSObject;", "updateMeasuredDimension", "newInstance", "LASIWidget;", "setAttribute", "LASWidgetAttribute;LNSString;LNSObject;", "()Ljava/util/List<Ljava/lang/String;>;", "getAttribute", "LASWidgetAttribute;", "inflateView", "LNSString;", "getLocationOnScreen", "[I", "getWindowVisibleDisplayFrame", "LADRect;", "offsetTopAndBottom", "offsetLeftAndRight", "setMyAttribute", "LNSString;LNSObject;", "setVisibility", "setState0", "LNSObject;", "setState1", "setState2", "setState3", "setState4", "endViewTransition", "LADView;", "Ljava/util/List<Lcom/ashera/widget/IWidget;>;", "Ljava/util/Map<Ljava/lang/String;Lcom/ashera/widget/IWidget;>;" };
  static const J2ObjcClassInfo _ASHorizontalScrollViewImpl_HorizontalScrollViewExt = { "HorizontalScrollViewExt", "com.ashera.layout", ptrTable, methods, fields, 7, 0x1, 38, 7, 3, -1, -1, -1, -1 };
  return &_ASHorizontalScrollViewImpl_HorizontalScrollViewExt;
}

@end

void ASHorizontalScrollViewImpl_HorizontalScrollViewExt_initWithASHorizontalScrollViewImpl_(ASHorizontalScrollViewImpl_HorizontalScrollViewExt *self, ASHorizontalScrollViewImpl *outer$) {
  self->this$0_ = outer$;
  ADHorizontalScrollView_init(self);
  self->measureFinished_ = new_ASMeasureEvent_init();
  self->onLayoutEvent_ = new_ASOnLayoutEvent_init();
  self->mMaxWidth_ = -1;
  self->mMaxHeight_ = -1;
}

ASHorizontalScrollViewImpl_HorizontalScrollViewExt *new_ASHorizontalScrollViewImpl_HorizontalScrollViewExt_initWithASHorizontalScrollViewImpl_(ASHorizontalScrollViewImpl *outer$) {
  J2OBJC_NEW_IMPL(ASHorizontalScrollViewImpl_HorizontalScrollViewExt, initWithASHorizontalScrollViewImpl_, outer$)
}

ASHorizontalScrollViewImpl_HorizontalScrollViewExt *create_ASHorizontalScrollViewImpl_HorizontalScrollViewExt_initWithASHorizontalScrollViewImpl_(ASHorizontalScrollViewImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASHorizontalScrollViewImpl_HorizontalScrollViewExt, initWithASHorizontalScrollViewImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASHorizontalScrollViewImpl_HorizontalScrollViewExt)

@implementation ASHorizontalScrollViewImpl_MyUIScrollViewDelegate

- (instancetype)initWithASHorizontalScrollViewImpl:(ASHorizontalScrollViewImpl *)outer$ {
  ASHorizontalScrollViewImpl_MyUIScrollViewDelegate_initWithASHorizontalScrollViewImpl_(self, outer$);
  return self;
}

- (void)nativeScrollChangeListenerWithId:(id)nativeWidget {
  UIScrollView* scrollview = ((UIScrollView*)nativeWidget);
  scrollview.delegate = self;
}

- (void)onscrollWithInt:(int32_t)scrollX
                withInt:(int32_t)scrollY {
  if (listener_ != nil) {
    [listener_ onScrollChangeWithADView:(ADView *) cast_chk([this$0_ asWidget], [ADView class]) withInt:scrollX withInt:scrollY withInt:oldScrollX_ withInt:oldScrollY_];
  }
  oldScrollX_ = scrollX;
  oldScrollY_ = scrollY;
  [((ADViewTreeObserver *) nil_chk([((ADHorizontalScrollView *) nil_chk(this$0_->horizontalScrollView_)) getViewTreeObserver])) dispatchOnScrollChanged];
}

- (void)__javaClone:(ASHorizontalScrollViewImpl_MyUIScrollViewDelegate *)original {
  [super __javaClone:original];
  JreRelease(this$0_);
}

- (void)scrollViewDidScroll:(UIScrollView *)scrollView {
  [self onscrollWithInt:scrollView.contentOffset.x withInt:scrollView.contentOffset.y];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASHorizontalScrollViewImpl:);
  methods[1].selector = @selector(nativeScrollChangeListenerWithId:);
  methods[2].selector = @selector(onscrollWithInt:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASHorizontalScrollViewImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "oldScrollY_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "oldScrollX_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "listener_", "LADView_OnScrollChangeListener;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASHorizontalScrollViewImpl;", "nativeScrollChangeListener", "LNSObject;", "onscroll", "II" };
  static const J2ObjcClassInfo _ASHorizontalScrollViewImpl_MyUIScrollViewDelegate = { "MyUIScrollViewDelegate", "com.ashera.layout", ptrTable, methods, fields, 7, 0x0, 3, 4, 0, -1, -1, -1, -1 };
  return &_ASHorizontalScrollViewImpl_MyUIScrollViewDelegate;
}

@end

void ASHorizontalScrollViewImpl_MyUIScrollViewDelegate_initWithASHorizontalScrollViewImpl_(ASHorizontalScrollViewImpl_MyUIScrollViewDelegate *self, ASHorizontalScrollViewImpl *outer$) {
  self->this$0_ = outer$;
  NSObject_init(self);
  self->oldScrollY_ = 0;
  self->oldScrollX_ = 0;
  [((id<ASIFragment>) nil_chk([outer$ getFragment])) addListenerWithASIWidget:outer$ withId:self];
}

ASHorizontalScrollViewImpl_MyUIScrollViewDelegate *new_ASHorizontalScrollViewImpl_MyUIScrollViewDelegate_initWithASHorizontalScrollViewImpl_(ASHorizontalScrollViewImpl *outer$) {
  J2OBJC_NEW_IMPL(ASHorizontalScrollViewImpl_MyUIScrollViewDelegate, initWithASHorizontalScrollViewImpl_, outer$)
}

ASHorizontalScrollViewImpl_MyUIScrollViewDelegate *create_ASHorizontalScrollViewImpl_MyUIScrollViewDelegate_initWithASHorizontalScrollViewImpl_(ASHorizontalScrollViewImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASHorizontalScrollViewImpl_MyUIScrollViewDelegate, initWithASHorizontalScrollViewImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASHorizontalScrollViewImpl_MyUIScrollViewDelegate)

@implementation ASHorizontalScrollViewImpl_OnScrollChangeListener

- (NSString *)getAction {
  return action_;
}

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue {
  ASHorizontalScrollViewImpl_OnScrollChangeListener_initWithASIWidget_withNSString_(self, w, strValue);
  return self;
}

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue
                     withNSString:(NSString *)action {
  ASHorizontalScrollViewImpl_OnScrollChangeListener_initWithASIWidget_withNSString_withNSString_(self, w, strValue, action);
  return self;
}

- (void)onScrollChangeWithADView:(ADView *)v
                         withInt:(int32_t)scrollX
                         withInt:(int32_t)scrollY
                         withInt:(int32_t)oldScrollX
                         withInt:(int32_t)oldScrollY {
  if (action_ == nil || [action_ isEqual:@"onScrollChange"]) {
    [((id<ASIWidget>) nil_chk(w_)) syncModelFromUiToPojoWithNSString:@"onScrollChange"];
    id<JavaUtilMap> obj = [self getOnScrollChangeEventObjWithADView:v withInt:scrollX withInt:scrollY withInt:oldScrollX withInt:oldScrollY];
    NSString *commandName = (NSString *) cast_chk([((id<JavaUtilMap>) nil_chk(obj)) getWithId:ASEventExpressionParser_KEY_COMMAND_NAME], [NSString class]);
    NSString *commandType = (NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_COMMAND_TYPE], [NSString class]);
    switch (JreIndexOfStr(commandType, (id[]){ @"+" }, 1)) {
      case 0:
      if (ASEventCommandFactory_hasCommandWithNSString_(commandName)) {
        (void) [((id<ASEventCommand>) nil_chk(ASEventCommandFactory_getCommandWithNSString_(commandName))) executeCommandWithASIWidget:w_ withJavaUtilMap:obj withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ v, JavaLangInteger_valueOfWithInt_(scrollX), JavaLangInteger_valueOfWithInt_(scrollY), JavaLangInteger_valueOfWithInt_(oldScrollX), JavaLangInteger_valueOfWithInt_(oldScrollY) } count:5 type:NSObject_class_()]];
      }
      break;
      default:
      break;
    }
    if ([obj containsKeyWithId:@"refreshUiFromModel"]) {
      id widgets = [obj removeWithId:@"refreshUiFromModel"];
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, widgets, true);
    }
    if ([((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds] != nil) {
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, [((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds], true);
    }
    if (strValue_ != nil && ![strValue_ isEmpty] && ![((NSString *) nil_chk([((NSString *) nil_chk(strValue_)) java_trim])) java_hasPrefix:@"+"]) {
      id<ASIActivity> activity = [((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getRootActivity];
      if (activity != nil) {
        [activity sendEventMessageWithJavaUtilMap:obj];
      }
    }
  }
  return;
}

- (id<JavaUtilMap>)getOnScrollChangeEventObjWithADView:(ADView *)v
                                               withInt:(int32_t)scrollX
                                               withInt:(int32_t)scrollY
                                               withInt:(int32_t)oldScrollX
                                               withInt:(int32_t)oldScrollY {
  id<JavaUtilMap> obj = ASPluginInvoker_getJSONCompatMap();
  (void) [((id<JavaUtilMap>) nil_chk(obj)) putWithId:@"action" withId:@"action"];
  (void) [obj putWithId:@"eventType" withId:@"scrollchange"];
  (void) [obj putWithId:@"fragmentId" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getFragmentId]];
  (void) [obj putWithId:@"actionUrl" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getActionUrl]];
  (void) [obj putWithId:@"namespace" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getNamespace]];
  if ([((id<ASIWidget>) nil_chk(w_)) getComponentId] != nil) {
    (void) [obj putWithId:@"componentId" withId:[((id<ASIWidget>) nil_chk(w_)) getComponentId]];
  }
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"id", [((id<ASIWidget>) nil_chk(w_)) getId]);
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"scrollX", JavaLangInteger_valueOfWithInt_(scrollX));
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"scrollY", JavaLangInteger_valueOfWithInt_(scrollY));
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"oldScrollX", JavaLangInteger_valueOfWithInt_(oldScrollX));
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"oldScrollY", JavaLangInteger_valueOfWithInt_(oldScrollY));
  (void) ASEventExpressionParser_parseEventExpressionWithNSString_withJavaUtilMap_(strValue_, obj);
  [((id<ASIWidget>) nil_chk(w_)) updateModelToEventMapWithJavaUtilMap:obj withNSString:@"onScrollChange" withNSString:(NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_EVENT_ARGS], [NSString class])];
  return obj;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, 4, 3, -1, 5, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getAction);
  methods[1].selector = @selector(initWithASIWidget:withNSString:);
  methods[2].selector = @selector(initWithASIWidget:withNSString:withNSString:);
  methods[3].selector = @selector(onScrollChangeWithADView:withInt:withInt:withInt:withInt:);
  methods[4].selector = @selector(getOnScrollChangeEventObjWithADView:withInt:withInt:withInt:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "w_", "LASIWidget;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "view_", "LADView;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "strValue_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "action_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASIWidget;LNSString;", "LASIWidget;LNSString;LNSString;", "onScrollChange", "LADView;IIII", "getOnScrollChangeEventObj", "(Lr/android/view/View;IIII)Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", "LASHorizontalScrollViewImpl;" };
  static const J2ObjcClassInfo _ASHorizontalScrollViewImpl_OnScrollChangeListener = { "OnScrollChangeListener", "com.ashera.layout", ptrTable, methods, fields, 7, 0xa, 5, 4, 6, -1, -1, -1, -1 };
  return &_ASHorizontalScrollViewImpl_OnScrollChangeListener;
}

@end

void ASHorizontalScrollViewImpl_OnScrollChangeListener_initWithASIWidget_withNSString_(ASHorizontalScrollViewImpl_OnScrollChangeListener *self, id<ASIWidget> w, NSString *strValue) {
  NSObject_init(self);
  self->w_ = w;
  self->strValue_ = strValue;
}

ASHorizontalScrollViewImpl_OnScrollChangeListener *new_ASHorizontalScrollViewImpl_OnScrollChangeListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) {
  J2OBJC_NEW_IMPL(ASHorizontalScrollViewImpl_OnScrollChangeListener, initWithASIWidget_withNSString_, w, strValue)
}

ASHorizontalScrollViewImpl_OnScrollChangeListener *create_ASHorizontalScrollViewImpl_OnScrollChangeListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) {
  J2OBJC_CREATE_IMPL(ASHorizontalScrollViewImpl_OnScrollChangeListener, initWithASIWidget_withNSString_, w, strValue)
}

void ASHorizontalScrollViewImpl_OnScrollChangeListener_initWithASIWidget_withNSString_withNSString_(ASHorizontalScrollViewImpl_OnScrollChangeListener *self, id<ASIWidget> w, NSString *strValue, NSString *action) {
  NSObject_init(self);
  self->w_ = w;
  self->strValue_ = strValue;
  self->action_ = action;
}

ASHorizontalScrollViewImpl_OnScrollChangeListener *new_ASHorizontalScrollViewImpl_OnScrollChangeListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) {
  J2OBJC_NEW_IMPL(ASHorizontalScrollViewImpl_OnScrollChangeListener, initWithASIWidget_withNSString_withNSString_, w, strValue, action)
}

ASHorizontalScrollViewImpl_OnScrollChangeListener *create_ASHorizontalScrollViewImpl_OnScrollChangeListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) {
  J2OBJC_CREATE_IMPL(ASHorizontalScrollViewImpl_OnScrollChangeListener, initWithASIWidget_withNSString_withNSString_, w, strValue, action)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASHorizontalScrollViewImpl_OnScrollChangeListener)

@implementation ASHorizontalScrollViewImpl_$Lambda$1

- (void)run {
  ASViewGroupImpl_nativeRemoveViewWithASIWidget_(val$widget_);
}

@end

void ASHorizontalScrollViewImpl_$Lambda$1_initWithASIWidget_(ASHorizontalScrollViewImpl_$Lambda$1 *self, id<ASIWidget> capture$0) {
  self->val$widget_ = capture$0;
  NSObject_init(self);
}

ASHorizontalScrollViewImpl_$Lambda$1 *new_ASHorizontalScrollViewImpl_$Lambda$1_initWithASIWidget_(id<ASIWidget> capture$0) {
  J2OBJC_NEW_IMPL(ASHorizontalScrollViewImpl_$Lambda$1, initWithASIWidget_, capture$0)
}

ASHorizontalScrollViewImpl_$Lambda$1 *create_ASHorizontalScrollViewImpl_$Lambda$1_initWithASIWidget_(id<ASIWidget> capture$0) {
  J2OBJC_CREATE_IMPL(ASHorizontalScrollViewImpl_$Lambda$1, initWithASIWidget_, capture$0)
}
