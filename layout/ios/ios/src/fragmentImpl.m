//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-ios-widgets\ios_widget_library\src\main\java\com\ashera\layout\fragmentImpl.java
//

#include "BaseHasWidgets.h"
#include "FileUtils.h"
#include "Fragment.h"
#include "FragmentManager.h"
#include "FragmentTransaction.h"
#include "FrameLayout.h"
#include "GenericFragment.h"
#include "HasWidgets.h"
#include "IAttributable.h"
#include "IFragment.h"
#include "ILifeCycleDecorator.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "IWidget.h"
#include "IWidgetLifeCycleListener.h"
#include "J2ObjC_source.h"
#include "LayoutTransition.h"
#include "MeasureEvent.h"
#include "OnLayoutEvent.h"
#include "PluginInvoker.h"
#include "Rect.h"
#include "UINavigatorImpl.h"
#include "View.h"
#include "ViewGroup.h"
#include "ViewGroupImpl.h"
#include "ViewImpl.h"
#include "WidgetAttribute.h"
#include "WidgetFactory.h"
#include "fragmentImpl.h"
#include "java/lang/Boolean.h"
#include "java/lang/Integer.h"
#include "java/lang/Runnable.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Properties.h"

#include <UIKit/UIKit.h>
#include "ASUIView.h"
#include "HasLifeCycleDecorators.h"

static void (*ASfragmentImpl_super$_addWithASIWidget_withInt_)(id, SEL, id, jint);

@protocol JavaUtilMap;


#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface ASfragmentImpl () {
 @public
  id uiView_;
  ADFrameLayout *frameLayout_;
  NSString *layout_;
  NSString *name_;
  NSString *navGraph_;
  NSString *tag_;
  ASUINavigatorImpl *navigator_;
  ASfragmentImpl_fragmentCommandBuilder *builder_;
  ASfragmentImpl_fragmentBean *bean_;
  ASfragmentImpl_fragmentCommandParamsBuilder *paramsBuilder_;
  ASfragmentImpl_fragmentParamsBean *paramsBean_;
  id navController_;
}

- (void)setWidgetOnNativeClass;

- (void)nativeRemoveViewWithASIWidget:(id<ASIWidget>)widget;

- (void)createLayoutParamsWithADView:(ADView *)view;

- (ADFrameLayout_LayoutParams *)getLayoutParamsWithADView:(ADView *)view;

- (void)setTemplateWithId:(id)objValue;

- (void)setNameWithId:(id)objValue;

- (void)setNavGraphWithId:(id)objValue;

- (void)replaceWithId:(id)objValue;

- (void)setTagWithId:(id)objValue;

- (void)navigateWithId:(id)actionId
                withId:(id)scopeObjects;

- (void)checkIfDialogWithId:(id)actionId;

- (void)popBackStack;

- (void)popBackStackToWithId:(id)destinationId
                      withId:(id)inclusive;

- (void)navigateWithPopBackStackToWithId:(id)actionId
                                  withId:(id)destinationId
                                  withId:(id)inclusive
                                  withId:(id)scopeObjects;

- (void)navigateAsTopWithId:(id)actionId
                     withId:(id)scopeObjects;

- (void)navigateWithPopBackStackWithId:(id)actionId
                                withId:(id)scopeObjects;

- (void)addOrReplaceFragmentWithBoolean:(jboolean)add;

- (void)executePendingTransactions;

- (void)createOrReplaceFragmentWithNSString:(NSString *)id_
                                withBoolean:(jboolean)add
                               withNSString:(NSString *)layout;

- (void)makeCurrentFragmentActive;

- (ASUINavigatorImpl *)getNavigator;

- (jboolean)isValidFragment;

- (void)closeDialog;

- (void)nativeCreateWithJavaUtilMap:(id<JavaUtilMap>)params;

- (void)nativeMakeFrameForChildWidgetWithInt:(jint)l
                                     withInt:(jint)t
                                     withInt:(jint)r
                                     withInt:(jint)b;

- (id)getViewWithId:(id)navController;

- (void)remeasureIfRequired;

@end

J2OBJC_FIELD_SETTER(ASfragmentImpl, uiView_, id)
J2OBJC_FIELD_SETTER(ASfragmentImpl, frameLayout_, ADFrameLayout *)
J2OBJC_FIELD_SETTER(ASfragmentImpl, layout_, NSString *)
J2OBJC_FIELD_SETTER(ASfragmentImpl, name_, NSString *)
J2OBJC_FIELD_SETTER(ASfragmentImpl, navGraph_, NSString *)
J2OBJC_FIELD_SETTER(ASfragmentImpl, tag_, NSString *)
J2OBJC_FIELD_SETTER(ASfragmentImpl, navigator_, ASUINavigatorImpl *)
J2OBJC_FIELD_SETTER(ASfragmentImpl, builder_, ASfragmentImpl_fragmentCommandBuilder *)
J2OBJC_FIELD_SETTER(ASfragmentImpl, bean_, ASfragmentImpl_fragmentBean *)
J2OBJC_FIELD_SETTER(ASfragmentImpl, paramsBuilder_, ASfragmentImpl_fragmentCommandParamsBuilder *)
J2OBJC_FIELD_SETTER(ASfragmentImpl, paramsBean_, ASfragmentImpl_fragmentParamsBean *)
J2OBJC_FIELD_SETTER(ASfragmentImpl, navController_, id)

__attribute__((unused)) static void ASfragmentImpl_setWidgetOnNativeClass(ASfragmentImpl *self);

__attribute__((unused)) static void ASfragmentImpl_nativeRemoveViewWithASIWidget_(ASfragmentImpl *self, id<ASIWidget> widget);

__attribute__((unused)) static void ASfragmentImpl_createLayoutParamsWithADView_(ASfragmentImpl *self, ADView *view);

__attribute__((unused)) static ADFrameLayout_LayoutParams *ASfragmentImpl_getLayoutParamsWithADView_(ASfragmentImpl *self, ADView *view);

__attribute__((unused)) static void ASfragmentImpl_setTemplateWithId_(ASfragmentImpl *self, id objValue);

__attribute__((unused)) static void ASfragmentImpl_setNameWithId_(ASfragmentImpl *self, id objValue);

__attribute__((unused)) static void ASfragmentImpl_setNavGraphWithId_(ASfragmentImpl *self, id objValue);

__attribute__((unused)) static void ASfragmentImpl_replaceWithId_(ASfragmentImpl *self, id objValue);

__attribute__((unused)) static void ASfragmentImpl_setTagWithId_(ASfragmentImpl *self, id objValue);

__attribute__((unused)) static void ASfragmentImpl_navigateWithId_withId_(ASfragmentImpl *self, id actionId, id scopeObjects);

__attribute__((unused)) static void ASfragmentImpl_checkIfDialogWithId_(ASfragmentImpl *self, id actionId);

__attribute__((unused)) static void ASfragmentImpl_popBackStack(ASfragmentImpl *self);

__attribute__((unused)) static void ASfragmentImpl_popBackStackToWithId_withId_(ASfragmentImpl *self, id destinationId, id inclusive);

__attribute__((unused)) static void ASfragmentImpl_navigateWithPopBackStackToWithId_withId_withId_withId_(ASfragmentImpl *self, id actionId, id destinationId, id inclusive, id scopeObjects);

__attribute__((unused)) static void ASfragmentImpl_navigateAsTopWithId_withId_(ASfragmentImpl *self, id actionId, id scopeObjects);

__attribute__((unused)) static void ASfragmentImpl_navigateWithPopBackStackWithId_withId_(ASfragmentImpl *self, id actionId, id scopeObjects);

__attribute__((unused)) static void ASfragmentImpl_addOrReplaceFragmentWithBoolean_(ASfragmentImpl *self, jboolean add);

__attribute__((unused)) static void ASfragmentImpl_executePendingTransactions(ASfragmentImpl *self);

__attribute__((unused)) static void ASfragmentImpl_createOrReplaceFragmentWithNSString_withBoolean_withNSString_(ASfragmentImpl *self, NSString *id_, jboolean add, NSString *layout);

__attribute__((unused)) static void ASfragmentImpl_makeCurrentFragmentActive(ASfragmentImpl *self);

__attribute__((unused)) static ASUINavigatorImpl *ASfragmentImpl_getNavigator(ASfragmentImpl *self);

__attribute__((unused)) static jboolean ASfragmentImpl_isValidFragment(ASfragmentImpl *self);

__attribute__((unused)) static void ASfragmentImpl_closeDialog(ASfragmentImpl *self);

__attribute__((unused)) static void ASfragmentImpl_nativeCreateWithJavaUtilMap_(ASfragmentImpl *self, id<JavaUtilMap> params);

__attribute__((unused)) static void ASfragmentImpl_nativeMakeFrameForChildWidgetWithInt_withInt_withInt_withInt_(ASfragmentImpl *self, jint l, jint t, jint r, jint b);

__attribute__((unused)) static id ASfragmentImpl_getViewWithId_(ASfragmentImpl *self, id navController);

__attribute__((unused)) static void ASfragmentImpl_remeasureIfRequired(ASfragmentImpl *self);

@interface ASfragmentImpl_fragmentExt () {
 @public
  __unsafe_unretained ASfragmentImpl *this$0_;
  ASMeasureEvent *measureFinished_;
  ASOnLayoutEvent *onLayoutEvent_;
  jint mMaxWidth_;
  jint mMaxHeight_;
  id<JavaUtilMap> templates_;
}

@end

J2OBJC_FIELD_SETTER(ASfragmentImpl_fragmentExt, measureFinished_, ASMeasureEvent *)
J2OBJC_FIELD_SETTER(ASfragmentImpl_fragmentExt, onLayoutEvent_, ASOnLayoutEvent *)
J2OBJC_FIELD_SETTER(ASfragmentImpl_fragmentExt, templates_, id<JavaUtilMap>)

@interface ASfragmentImpl_fragmentCommandBuilder () {
 @public
  ASfragmentImpl *this$0_;
}

@end

@interface ASfragmentImpl_fragmentBean () {
 @public
  ASfragmentImpl *this$0_;
}

@end

@interface ASfragmentImpl_MyFragmentFactory : ASUINavigatorImpl_FragmentFactory {
 @public
  __unsafe_unretained ASfragmentImpl *this$0_;
}

- (instancetype)initWithASfragmentImpl:(ASfragmentImpl *)outer$;

- (ASGenericFragment *)getFragment;

@end

J2OBJC_EMPTY_STATIC_INIT(ASfragmentImpl_MyFragmentFactory)

__attribute__((unused)) static void ASfragmentImpl_MyFragmentFactory_initWithASfragmentImpl_(ASfragmentImpl_MyFragmentFactory *self, ASfragmentImpl *outer$);

__attribute__((unused)) static ASfragmentImpl_MyFragmentFactory *new_ASfragmentImpl_MyFragmentFactory_initWithASfragmentImpl_(ASfragmentImpl *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASfragmentImpl_MyFragmentFactory *create_ASfragmentImpl_MyFragmentFactory_initWithASfragmentImpl_(ASfragmentImpl *outer$);

J2OBJC_TYPE_LITERAL_HEADER(ASfragmentImpl_MyFragmentFactory)

@interface ASfragmentImpl_MyGenericFragment : ASGenericFragment {
 @public
  __unsafe_unretained ASfragmentImpl *this$0_;
}

- (instancetype)initWithASfragmentImpl:(ASfragmentImpl *)outer$;

- (void)createChildFragments;

@end

J2OBJC_EMPTY_STATIC_INIT(ASfragmentImpl_MyGenericFragment)

__attribute__((unused)) static void ASfragmentImpl_MyGenericFragment_initWithASfragmentImpl_(ASfragmentImpl_MyGenericFragment *self, ASfragmentImpl *outer$);

__attribute__((unused)) static ASfragmentImpl_MyGenericFragment *new_ASfragmentImpl_MyGenericFragment_initWithASfragmentImpl_(ASfragmentImpl *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASfragmentImpl_MyGenericFragment *create_ASfragmentImpl_MyGenericFragment_initWithASfragmentImpl_(ASfragmentImpl *outer$);

J2OBJC_TYPE_LITERAL_HEADER(ASfragmentImpl_MyGenericFragment)

@interface ASfragmentImpl_$Lambda$1 : NSObject < JavaLangRunnable > {
 @public
  id<ASIWidget> val$widget_;
}

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(ASfragmentImpl_$Lambda$1)

__attribute__((unused)) static void ASfragmentImpl_$Lambda$1_initWithASIWidget_(ASfragmentImpl_$Lambda$1 *self, id<ASIWidget> capture$0);

__attribute__((unused)) static ASfragmentImpl_$Lambda$1 *new_ASfragmentImpl_$Lambda$1_initWithASIWidget_(id<ASIWidget> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASfragmentImpl_$Lambda$1 *create_ASfragmentImpl_$Lambda$1_initWithASIWidget_(id<ASIWidget> capture$0);

@interface ASfragmentImpl_$Lambda$2 : NSObject < JavaLangRunnable > {
 @public
  ASfragmentImpl *this$0_;
}

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(ASfragmentImpl_$Lambda$2)

__attribute__((unused)) static void ASfragmentImpl_$Lambda$2_initWithASfragmentImpl_(ASfragmentImpl_$Lambda$2 *self, ASfragmentImpl *outer$);

__attribute__((unused)) static ASfragmentImpl_$Lambda$2 *new_ASfragmentImpl_$Lambda$2_initWithASfragmentImpl_(ASfragmentImpl *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASfragmentImpl_$Lambda$2 *create_ASfragmentImpl_$Lambda$2_initWithASfragmentImpl_(ASfragmentImpl *outer$);

@interface ASfragmentImpl_$Lambda$3 : NSObject < JavaLangRunnable > {
 @public
  ASfragmentImpl *this$0_;
}

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(ASfragmentImpl_$Lambda$3)

__attribute__((unused)) static void ASfragmentImpl_$Lambda$3_initWithASfragmentImpl_(ASfragmentImpl_$Lambda$3 *self, ASfragmentImpl *outer$);

__attribute__((unused)) static ASfragmentImpl_$Lambda$3 *new_ASfragmentImpl_$Lambda$3_initWithASfragmentImpl_(ASfragmentImpl *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASfragmentImpl_$Lambda$3 *create_ASfragmentImpl_$Lambda$3_initWithASfragmentImpl_(ASfragmentImpl *outer$);

J2OBJC_INITIALIZED_DEFN(ASfragmentImpl)

NSString *ASfragmentImpl_LOCAL_NAME = @"fragment";
NSString *ASfragmentImpl_GROUP_NAME = @"fragment";

@implementation ASfragmentImpl

@synthesize uiView = uiView_;

- (void)loadAttributesWithNSString:(NSString *)localName {
  ASViewGroupImpl_register__WithNSString_(localName);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"name"])) withTypeWithNSString:@"string"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout"])) withTypeWithNSString:@"string"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"navGraph"])) withTypeWithNSString:@"string"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"tag"])) withTypeWithNSString:@"string"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"replace"])) withTypeWithNSString:@"string"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"navigate"])) withTypeWithNSString:@"object"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"popBackStack"])) withTypeWithNSString:@"nil"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"navigateWithPopBackStack"])) withTypeWithNSString:@"object"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"navigateAsTop"])) withTypeWithNSString:@"object"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"navigateWithPopBackStackTo"])) withTypeWithNSString:@"object"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"popBackStackTo"])) withTypeWithNSString:@"object"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASfragmentImpl_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithNSString:(NSString *)localname {
  ASfragmentImpl_initWithNSString_(self, localname);
  return self;
}

- (instancetype)initWithNSString:(NSString *)groupName
                    withNSString:(NSString *)localname {
  ASfragmentImpl_initWithNSString_withNSString_(self, groupName, localname);
  return self;
}

- (id<ASIWidget>)newInstance {
  return new_ASfragmentImpl_initWithNSString_withNSString_(groupName_, localName_);
}

- (void)createWithASIFragment:(id<ASIFragment>)fragment
              withJavaUtilMap:(id<JavaUtilMap>)params {
  [super createWithASIFragment:fragment withJavaUtilMap:params];
  frameLayout_ = new_ASfragmentImpl_fragmentExt_initWithASfragmentImpl_(self);
  ASfragmentImpl_nativeCreateWithJavaUtilMap_(self, params);
  ASViewGroupImpl_registerCommandConveterWithASIWidget_(self);
  ASfragmentImpl_setWidgetOnNativeClass(self);
}

- (void)setWidgetOnNativeClass {
  ASfragmentImpl_setWidgetOnNativeClass(self);
}

- (id)asWidget {
  return frameLayout_;
}

- (jboolean)removeWithASIWidget:(id<ASIWidget>)w {
  jboolean remove = [super removeWithASIWidget:w];
  [((ADFrameLayout *) nil_chk(frameLayout_)) removeViewWithADView:(ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class])];
  ASfragmentImpl_nativeRemoveViewWithASIWidget_(self, w);
  return remove;
}

- (jboolean)removeWithInt:(jint)index {
  id<ASIWidget> widget = [((id<JavaUtilList>) nil_chk(widgets_)) getWithInt:index];
  jboolean remove = [super removeWithInt:index];
  if (index + 1 <= [((ADFrameLayout *) nil_chk(frameLayout_)) getChildCount]) {
    [((ADFrameLayout *) nil_chk(frameLayout_)) removeViewAtWithInt:index];
    ASfragmentImpl_nativeRemoveViewWithASIWidget_(self, widget);
  }
  return remove;
}

- (void)nativeRemoveViewWithASIWidget:(id<ASIWidget>)widget {
  ASfragmentImpl_nativeRemoveViewWithASIWidget_(self, widget);
}

- (void)addWithASIWidget:(id<ASIWidget>)w
                 withInt:(jint)index {
  if (index != -2) {
    ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]);
    ASfragmentImpl_createLayoutParamsWithADView_(self, view);
    if (index == -1) {
      [((ADFrameLayout *) nil_chk(frameLayout_)) addViewWithADView:view];
    }
    else {
      [((ADFrameLayout *) nil_chk(frameLayout_)) addViewWithADView:view withInt:index];
    }
  }
  ASViewGroupImpl_nativeAddViewWithId_withId_([self asNativeWidget], [((id<ASIWidget>) nil_chk(w)) asNativeWidget]);
  [super addWithASIWidget:w withInt:index];
}

- (void)createLayoutParamsWithADView:(ADView *)view {
  ASfragmentImpl_createLayoutParamsWithADView_(self, view);
}

- (ADFrameLayout_LayoutParams *)getLayoutParamsWithADView:(ADView *)view {
  return ASfragmentImpl_getLayoutParamsWithADView_(self, view);
}

- (void)setChildAttributeWithASIWidget:(id<ASIWidget>)w
                 withASWidgetAttribute:(ASWidgetAttribute *)key
                          withNSString:(NSString *)strValue
                                withId:(id)objValue {
  ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]);
  ADFrameLayout_LayoutParams *layoutParams = ASfragmentImpl_getLayoutParamsWithADView_(self, view);
  ASViewGroupImpl_setChildAttributeWithASIWidget_withASWidgetAttribute_withId_withId_(w, key, objValue, layoutParams);
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"layout_width", @"layout_height" }, 2)) {
    case 0:
    ((ADFrameLayout_LayoutParams *) nil_chk(layoutParams))->width_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
    break;
    case 1:
    ((ADFrameLayout_LayoutParams *) nil_chk(layoutParams))->height_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
    break;
    default:
    break;
  }
  [((ADView *) nil_chk(view)) setLayoutParamsWithADViewGroup_LayoutParams:layoutParams];
}

- (id)getChildAttributeWithASIWidget:(id<ASIWidget>)w
               withASWidgetAttribute:(ASWidgetAttribute *)key {
  id attributeValue = ASViewGroupImpl_getChildAttributeWithASIWidget_withASWidgetAttribute_(w, key);
  if (attributeValue != nil) {
    return attributeValue;
  }
  ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]);
  ADFrameLayout_LayoutParams *layoutParams = ASfragmentImpl_getLayoutParamsWithADView_(self, view);
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"layout_width", @"layout_height" }, 2)) {
    case 0:
    return JavaLangInteger_valueOfWithInt_(((ADFrameLayout_LayoutParams *) nil_chk(layoutParams))->width_);
    case 1:
    return JavaLangInteger_valueOfWithInt_(((ADFrameLayout_LayoutParams *) nil_chk(layoutParams))->height_);
  }
  return nil;
}

- (IOSClass *)getViewClass {
  return ASfragmentImpl_fragmentExt_class_();
}

- (void)setAttributeWithASWidgetAttribute:(ASWidgetAttribute *)key
                             withNSString:(NSString *)strValue
                                   withId:(id)objValue
                withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  ASViewGroupImpl_setAttributeWithASIWidget_withASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(self, key, strValue, objValue, decorator);
  id nativeWidget = [self asNativeWidget];
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"name", @"layout", @"navGraph", @"tag", @"replace", @"navigate", @"popBackStack", @"navigateWithPopBackStack", @"navigateAsTop", @"navigateWithPopBackStackTo", @"popBackStackTo" }, 11)) {
    case 0:
    {
      ASfragmentImpl_setNameWithId_(self, objValue);
    }
    break;
    case 1:
    {
      ASfragmentImpl_setTemplateWithId_(self, objValue);
    }
    break;
    case 2:
    {
      ASfragmentImpl_setNavGraphWithId_(self, objValue);
    }
    break;
    case 3:
    {
      ASfragmentImpl_setTagWithId_(self, objValue);
    }
    break;
    case 4:
    {
      ASfragmentImpl_replaceWithId_(self, objValue);
    }
    break;
    case 5:
    {
      if ([JavaUtilMap_class_() isInstance:objValue]) {
        id<JavaUtilMap> data = ((id<JavaUtilMap>) cast_check(objValue, JavaUtilMap_class_()));
        id actionId = [self quickConvertWithId:[((id<JavaUtilMap>) nil_chk(data)) getWithId:@"actionId"] withNSString:@"string"];
        id scopeObjects = [self quickConvertWithId:[data getWithId:@"scopeObjects"] withNSString:@"object"];
        ASfragmentImpl_navigateWithId_withId_(self, actionId, scopeObjects);
      }
      if ([JavaUtilList_class_() isInstance:objValue]) {
        id<JavaUtilList> list = (id<JavaUtilList>) cast_check(objValue, JavaUtilList_class_());
        for (id __strong object in nil_chk(list)) {
          id<JavaUtilMap> data = ASPluginInvoker_getMapWithId_(object);
          id actionId = [self quickConvertWithId:[((id<JavaUtilMap>) nil_chk(data)) getWithId:@"actionId"] withNSString:@"string"];
          id scopeObjects = [self quickConvertWithId:[data getWithId:@"scopeObjects"] withNSString:@"object"];
          ASfragmentImpl_navigateWithId_withId_(self, actionId, scopeObjects);
        }
      }
    }
    break;
    case 6:
    {
      ASfragmentImpl_popBackStack(self);
    }
    break;
    case 7:
    {
      if ([JavaUtilMap_class_() isInstance:objValue]) {
        id<JavaUtilMap> data = ((id<JavaUtilMap>) cast_check(objValue, JavaUtilMap_class_()));
        id actionId = [self quickConvertWithId:[((id<JavaUtilMap>) nil_chk(data)) getWithId:@"actionId"] withNSString:@"string"];
        id scopeObjects = [self quickConvertWithId:[data getWithId:@"scopeObjects"] withNSString:@"object"];
        ASfragmentImpl_navigateWithPopBackStackWithId_withId_(self, actionId, scopeObjects);
      }
      if ([JavaUtilList_class_() isInstance:objValue]) {
        id<JavaUtilList> list = (id<JavaUtilList>) cast_check(objValue, JavaUtilList_class_());
        for (id __strong object in nil_chk(list)) {
          id<JavaUtilMap> data = ASPluginInvoker_getMapWithId_(object);
          id actionId = [self quickConvertWithId:[((id<JavaUtilMap>) nil_chk(data)) getWithId:@"actionId"] withNSString:@"string"];
          id scopeObjects = [self quickConvertWithId:[data getWithId:@"scopeObjects"] withNSString:@"object"];
          ASfragmentImpl_navigateWithPopBackStackWithId_withId_(self, actionId, scopeObjects);
        }
      }
    }
    break;
    case 8:
    {
      if ([JavaUtilMap_class_() isInstance:objValue]) {
        id<JavaUtilMap> data = ((id<JavaUtilMap>) cast_check(objValue, JavaUtilMap_class_()));
        id actionId = [self quickConvertWithId:[((id<JavaUtilMap>) nil_chk(data)) getWithId:@"actionId"] withNSString:@"string"];
        id scopeObjects = [self quickConvertWithId:[data getWithId:@"scopeObjects"] withNSString:@"object"];
        ASfragmentImpl_navigateAsTopWithId_withId_(self, actionId, scopeObjects);
      }
      if ([JavaUtilList_class_() isInstance:objValue]) {
        id<JavaUtilList> list = (id<JavaUtilList>) cast_check(objValue, JavaUtilList_class_());
        for (id __strong object in nil_chk(list)) {
          id<JavaUtilMap> data = ASPluginInvoker_getMapWithId_(object);
          id actionId = [self quickConvertWithId:[((id<JavaUtilMap>) nil_chk(data)) getWithId:@"actionId"] withNSString:@"string"];
          id scopeObjects = [self quickConvertWithId:[data getWithId:@"scopeObjects"] withNSString:@"object"];
          ASfragmentImpl_navigateAsTopWithId_withId_(self, actionId, scopeObjects);
        }
      }
    }
    break;
    case 9:
    {
      if ([JavaUtilMap_class_() isInstance:objValue]) {
        id<JavaUtilMap> data = ((id<JavaUtilMap>) cast_check(objValue, JavaUtilMap_class_()));
        id actionId = [self quickConvertWithId:[((id<JavaUtilMap>) nil_chk(data)) getWithId:@"actionId"] withNSString:@"string"];
        id destinationId = [self quickConvertWithId:[data getWithId:@"destinationId"] withNSString:@"string"];
        id inclusive = [self quickConvertWithId:[data getWithId:@"inclusive"] withNSString:@"boolean"];
        id scopeObjects = [self quickConvertWithId:[data getWithId:@"scopeObjects"] withNSString:@"object"];
        ASfragmentImpl_navigateWithPopBackStackToWithId_withId_withId_withId_(self, actionId, destinationId, inclusive, scopeObjects);
      }
      if ([JavaUtilList_class_() isInstance:objValue]) {
        id<JavaUtilList> list = (id<JavaUtilList>) cast_check(objValue, JavaUtilList_class_());
        for (id __strong object in nil_chk(list)) {
          id<JavaUtilMap> data = ASPluginInvoker_getMapWithId_(object);
          id actionId = [self quickConvertWithId:[((id<JavaUtilMap>) nil_chk(data)) getWithId:@"actionId"] withNSString:@"string"];
          id destinationId = [self quickConvertWithId:[data getWithId:@"destinationId"] withNSString:@"string"];
          id inclusive = [self quickConvertWithId:[data getWithId:@"inclusive"] withNSString:@"boolean"];
          id scopeObjects = [self quickConvertWithId:[data getWithId:@"scopeObjects"] withNSString:@"object"];
          ASfragmentImpl_navigateWithPopBackStackToWithId_withId_withId_withId_(self, actionId, destinationId, inclusive, scopeObjects);
        }
      }
    }
    break;
    case 10:
    {
      if ([JavaUtilMap_class_() isInstance:objValue]) {
        id<JavaUtilMap> data = ((id<JavaUtilMap>) cast_check(objValue, JavaUtilMap_class_()));
        id destinationId = [self quickConvertWithId:[((id<JavaUtilMap>) nil_chk(data)) getWithId:@"destinationId"] withNSString:@"string"];
        id inclusive = [self quickConvertWithId:[data getWithId:@"inclusive"] withNSString:@"boolean"];
        ASfragmentImpl_popBackStackToWithId_withId_(self, destinationId, inclusive);
      }
      if ([JavaUtilList_class_() isInstance:objValue]) {
        id<JavaUtilList> list = (id<JavaUtilList>) cast_check(objValue, JavaUtilList_class_());
        for (id __strong object in nil_chk(list)) {
          id<JavaUtilMap> data = ASPluginInvoker_getMapWithId_(object);
          id destinationId = [self quickConvertWithId:[((id<JavaUtilMap>) nil_chk(data)) getWithId:@"destinationId"] withNSString:@"string"];
          id inclusive = [self quickConvertWithId:[data getWithId:@"inclusive"] withNSString:@"boolean"];
          ASfragmentImpl_popBackStackToWithId_withId_(self, destinationId, inclusive);
        }
      }
    }
    break;
    default:
    break;
  }
}

- (id)getAttributeWithASWidgetAttribute:(ASWidgetAttribute *)key
              withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  id attributeValue = ASViewGroupImpl_getAttributeWithASIWidget_withASWidgetAttribute_withASILifeCycleDecorator_(self, key, decorator);
  if (attributeValue != nil) {
    return attributeValue;
  }
  id nativeWidget = [self asNativeWidget];
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){  }, 0)) {
  }
  return nil;
}

- (id)asNativeWidget {
  return uiView_;
}

- (jboolean)checkIosVersionWithNSString:(NSString *)v {
  return ([[[UIDevice currentDevice] systemVersion] compare:v options:NSNumericSearch] == NSOrderedDescending);
}

- (void)requestLayout {
  if ([self isInitialised]) {
    ASViewImpl_requestLayoutWithASIWidget_withId_(self, [self asNativeWidget]);
  }
}

- (void)invalidate {
  if ([self isInitialised]) {
    ASViewImpl_invalidateWithASIWidget_withId_(self, [self asNativeWidget]);
  }
}

- (void)setTemplateWithId:(id)objValue {
  ASfragmentImpl_setTemplateWithId_(self, objValue);
}

- (void)setNameWithId:(id)objValue {
  ASfragmentImpl_setNameWithId_(self, objValue);
}

- (void)setNavGraphWithId:(id)objValue {
  ASfragmentImpl_setNavGraphWithId_(self, objValue);
}

- (void)replaceWithId:(id)objValue {
  ASfragmentImpl_replaceWithId_(self, objValue);
}

- (void)setTagWithId:(id)objValue {
  ASfragmentImpl_setTagWithId_(self, objValue);
}

- (void)initialized {
  [super initialized];
  ASfragmentImpl_addOrReplaceFragmentWithBoolean_(self, true);
}

- (void)navigateWithId:(id)actionId
                withId:(id)scopeObjects {
  ASfragmentImpl_navigateWithId_withId_(self, actionId, scopeObjects);
}

- (void)checkIfDialogWithId:(id)actionId {
  ASfragmentImpl_checkIfDialogWithId_(self, actionId);
}

- (void)popBackStack {
  ASfragmentImpl_popBackStack(self);
}

- (void)popBackStackToWithId:(id)destinationId
                      withId:(id)inclusive {
  ASfragmentImpl_popBackStackToWithId_withId_(self, destinationId, inclusive);
}

- (void)navigateWithPopBackStackToWithId:(id)actionId
                                  withId:(id)destinationId
                                  withId:(id)inclusive
                                  withId:(id)scopeObjects {
  ASfragmentImpl_navigateWithPopBackStackToWithId_withId_withId_withId_(self, actionId, destinationId, inclusive, scopeObjects);
}

- (void)navigateAsTopWithId:(id)actionId
                     withId:(id)scopeObjects {
  ASfragmentImpl_navigateAsTopWithId_withId_(self, actionId, scopeObjects);
}

- (void)navigateWithPopBackStackWithId:(id)actionId
                                withId:(id)scopeObjects {
  ASfragmentImpl_navigateWithPopBackStackWithId_withId_(self, actionId, scopeObjects);
}

- (void)addOrReplaceFragmentWithBoolean:(jboolean)add {
  ASfragmentImpl_addOrReplaceFragmentWithBoolean_(self, add);
}

- (void)executePendingTransactions {
  ASfragmentImpl_executePendingTransactions(self);
}

- (void)addOrReplaceFragmentWithNSString:(NSString *)name
                             withBoolean:(jboolean)add
                            withNSString:(NSString *)layout
                            withNSString:(NSString *)navGraphId
                            withNSString:(NSString *)tag {
  if (self->name_ != nil) {
    switch (JreIndexOfStr(self->name_, (id[]){ @"com.ashera.core.GenericFragment", @"androidx.navigation.fragment.NavHostFragment" }, 2)) {
      case 0:
      ASfragmentImpl_createOrReplaceFragmentWithNSString_withBoolean_withNSString_(self, [self getId], add, layout);
      break;
      case 1:
      if (navGraphId != nil) {
        navGraphId = [((NSString *) nil_chk(navGraph_)) java_substring:1];
        JavaUtilProperties *properties = ASFileUtils_loadPropertiesFromClassPathWithNSString_(JreStrcat("$$", navGraphId, @".properties"));
        NSString *id_ = [((JavaUtilProperties *) nil_chk(properties)) getPropertyWithNSString:@"startDestination"];
        id_ = [((NSString *) nil_chk(id_)) java_replace:@"@id/" withSequence:@"@+id/"];
        NSString *mylayout = [properties getPropertyWithNSString:id_];
        id_ = [((NSString *) nil_chk([((NSString *) nil_chk(id_)) java_replace:@"@+id/" withSequence:@""])) java_replace:@"@id/" withSequence:@""];
        ASfragmentImpl_createOrReplaceFragmentWithNSString_withBoolean_withNSString_(self, id_, add, mylayout);
      }
      break;
      default:
      break;
    }
  }
}

- (void)createOrReplaceFragmentWithNSString:(NSString *)id_
                                withBoolean:(jboolean)add
                               withNSString:(NSString *)layout {
  ASfragmentImpl_createOrReplaceFragmentWithNSString_withBoolean_withNSString_(self, id_, add, layout);
}

- (void)makeCurrentFragmentActive {
  ASfragmentImpl_makeCurrentFragmentActive(self);
}

- (ASUINavigatorImpl *)getNavigator {
  return ASfragmentImpl_getNavigator(self);
}

- (jboolean)isValidFragment {
  return ASfragmentImpl_isValidFragment(self);
}

- (id<ASIWidget>)getActiveRootWidget {
  return [((id<JavaUtilList>) nil_chk(widgets_)) getWithInt:0];
}

- (void)closeDialog {
  ASfragmentImpl_closeDialog(self);
}

- (void)setIdWithNSString:(NSString *)id_ {
  if (id_ != nil && ![id_ isEqual:@""]) {
    [super setIdWithNSString:id_];
    [((ADFrameLayout *) nil_chk(frameLayout_)) setIdWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([self quickConvertWithId:id_ withNSString:@"id"], [JavaLangInteger class]))) intValue]];
  }
}

- (void)setVisibleWithBoolean:(jboolean)b {
  [((ADView *) nil_chk(((ADView *) cast_chk([self asWidget], [ADView class])))) setVisibilityWithInt:b ? ADView_VISIBLE : ADView_GONE];
}

- (id)getPluginWithNSString:(NSString *)plugin {
  return [((id<ASIAttributable>) nil_chk(ASWidgetFactory_getAttributableWithNSString_(plugin))) newInstanceWithASIWidget:self];
}

- (ASfragmentImpl_fragmentBean *)getBean {
  if (bean_ == nil) {
    bean_ = new_ASfragmentImpl_fragmentBean_initWithASfragmentImpl_(self);
  }
  return bean_;
}

- (ASfragmentImpl_fragmentCommandBuilder *)getBuilder {
  if (builder_ == nil) {
    builder_ = new_ASfragmentImpl_fragmentCommandBuilder_initWithASfragmentImpl_(self);
  }
  return builder_;
}

- (ASfragmentImpl_fragmentParamsBean *)getParamsBean {
  if (paramsBean_ == nil) {
    paramsBean_ = new_ASfragmentImpl_fragmentParamsBean_initWithASfragmentImpl_(self);
  }
  return paramsBean_;
}

- (ASfragmentImpl_fragmentCommandParamsBuilder *)getParamsBuilder {
  if (paramsBuilder_ == nil) {
    paramsBuilder_ = new_ASfragmentImpl_fragmentCommandParamsBuilder_initWithASfragmentImpl_(self);
  }
  return paramsBuilder_;
}

- (void)nativeCreateWithJavaUtilMap:(id<JavaUtilMap>)params {
  ASfragmentImpl_nativeCreateWithJavaUtilMap_(self, params);
}

- (id)createView {
  ASUIView* uiView = [ASUIView new];
  uiView.backgroundColor = [UIColor clearColor];
  uiView_ = uiView;
  
  UINavigationController *navController = [[UINavigationController alloc] initWithNavigationBarClass:nil toolbarClass:nil];
  navController.modalPresentationStyle = UIModalPresentationOverCurrentContext;
  [navController setNavigationBarHidden:YES];
  
  [uiView addSubview:navController.view];
  return navController;
}

- (void)addChildViewControllerWithId:(id)navController
                              withId:(id)rootView {
  UIViewController* currentController = (UIViewController*) [[((ASUIView*) rootView) nextResponder] nextResponder];
  [(UIViewController*)navController willMoveToParentViewController:currentController];
  [currentController addChildViewController:navController];
  [(UIViewController*)navController didMoveToParentViewController:currentController];
}

- (void)nativeMakeFrameForChildWidgetWithInt:(jint)l
                                     withInt:(jint)t
                                     withInt:(jint)r
                                     withInt:(jint)b {
  ASfragmentImpl_nativeMakeFrameForChildWidgetWithInt_withInt_withInt_withInt_(self, l, t, r, b);
}

- (id)getViewWithId:(id)navController {
  return ASfragmentImpl_getViewWithId_(self, navController);
}

- (void)remeasureIfRequired {
  ASfragmentImpl_remeasureIfRequired(self);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "LASIWidget;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, 5, -1, -1 },
    { NULL, "V", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 6, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 9, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 12, 13, -1, -1, -1, -1 },
    { NULL, "LADFrameLayout_LayoutParams;", 0x2, 14, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 16, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 17, 18, -1, -1, -1, -1 },
    { NULL, "LIOSClass;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 20, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 21, 22, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x101, 23, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 24, 25, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 26, 25, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 27, 25, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 28, 25, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 29, 25, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 30, 31, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 32, 25, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 33, 31, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 34, 35, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 36, 31, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 37, 31, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 38, 39, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 38, 40, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 41, 42, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASUINavigatorImpl;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASIWidget;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 43, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 44, 39, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 45, 1, -1, -1, -1, -1 },
    { NULL, "LASfragmentImpl_fragmentBean;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASfragmentImpl_fragmentCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASfragmentImpl_fragmentParamsBean;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASfragmentImpl_fragmentCommandParamsBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 46, 47, -1, 48, -1, -1 },
    { NULL, "LNSObject;", 0x101, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 49, 31, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 50, 51, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x102, 52, 25, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(loadAttributesWithNSString:);
  methods[1].selector = @selector(init);
  methods[2].selector = @selector(initWithNSString:);
  methods[3].selector = @selector(initWithNSString:withNSString:);
  methods[4].selector = @selector(newInstance);
  methods[5].selector = @selector(createWithASIFragment:withJavaUtilMap:);
  methods[6].selector = @selector(setWidgetOnNativeClass);
  methods[7].selector = @selector(asWidget);
  methods[8].selector = @selector(removeWithASIWidget:);
  methods[9].selector = @selector(removeWithInt:);
  methods[10].selector = @selector(nativeRemoveViewWithASIWidget:);
  methods[11].selector = @selector(addWithASIWidget:withInt:);
  methods[12].selector = @selector(createLayoutParamsWithADView:);
  methods[13].selector = @selector(getLayoutParamsWithADView:);
  methods[14].selector = @selector(setChildAttributeWithASIWidget:withASWidgetAttribute:withNSString:withId:);
  methods[15].selector = @selector(getChildAttributeWithASIWidget:withASWidgetAttribute:);
  methods[16].selector = @selector(getViewClass);
  methods[17].selector = @selector(setAttributeWithASWidgetAttribute:withNSString:withId:withASILifeCycleDecorator:);
  methods[18].selector = @selector(getAttributeWithASWidgetAttribute:withASILifeCycleDecorator:);
  methods[19].selector = @selector(asNativeWidget);
  methods[20].selector = @selector(checkIosVersionWithNSString:);
  methods[21].selector = @selector(requestLayout);
  methods[22].selector = @selector(invalidate);
  methods[23].selector = @selector(setTemplateWithId:);
  methods[24].selector = @selector(setNameWithId:);
  methods[25].selector = @selector(setNavGraphWithId:);
  methods[26].selector = @selector(replaceWithId:);
  methods[27].selector = @selector(setTagWithId:);
  methods[28].selector = @selector(initialized);
  methods[29].selector = @selector(navigateWithId:withId:);
  methods[30].selector = @selector(checkIfDialogWithId:);
  methods[31].selector = @selector(popBackStack);
  methods[32].selector = @selector(popBackStackToWithId:withId:);
  methods[33].selector = @selector(navigateWithPopBackStackToWithId:withId:withId:withId:);
  methods[34].selector = @selector(navigateAsTopWithId:withId:);
  methods[35].selector = @selector(navigateWithPopBackStackWithId:withId:);
  methods[36].selector = @selector(addOrReplaceFragmentWithBoolean:);
  methods[37].selector = @selector(executePendingTransactions);
  methods[38].selector = @selector(addOrReplaceFragmentWithNSString:withBoolean:withNSString:withNSString:withNSString:);
  methods[39].selector = @selector(createOrReplaceFragmentWithNSString:withBoolean:withNSString:);
  methods[40].selector = @selector(makeCurrentFragmentActive);
  methods[41].selector = @selector(getNavigator);
  methods[42].selector = @selector(isValidFragment);
  methods[43].selector = @selector(getActiveRootWidget);
  methods[44].selector = @selector(closeDialog);
  methods[45].selector = @selector(setIdWithNSString:);
  methods[46].selector = @selector(setVisibleWithBoolean:);
  methods[47].selector = @selector(getPluginWithNSString:);
  methods[48].selector = @selector(getBean);
  methods[49].selector = @selector(getBuilder);
  methods[50].selector = @selector(getParamsBean);
  methods[51].selector = @selector(getParamsBuilder);
  methods[52].selector = @selector(nativeCreateWithJavaUtilMap:);
  methods[53].selector = @selector(createView);
  methods[54].selector = @selector(addChildViewControllerWithId:withId:);
  methods[55].selector = @selector(nativeMakeFrameForChildWidgetWithInt:withInt:withInt:withInt:);
  methods[56].selector = @selector(getViewWithId:);
  methods[57].selector = @selector(remeasureIfRequired);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "uiView_", "LNSObject;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "LOCAL_NAME", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 53, -1, -1 },
    { "GROUP_NAME", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 54, -1, -1 },
    { "frameLayout_", "LADFrameLayout;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "layout_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "name_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "navGraph_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "tag_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "navigator_", "LASUINavigatorImpl;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "builder_", "LASfragmentImpl_fragmentCommandBuilder;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "bean_", "LASfragmentImpl_fragmentBean;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "paramsBuilder_", "LASfragmentImpl_fragmentCommandParamsBuilder;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "paramsBean_", "LASfragmentImpl_fragmentParamsBean;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "navController_", "LNSObject;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "loadAttributes", "LNSString;", "LNSString;LNSString;", "create", "LASIFragment;LJavaUtilMap;", "(Lcom/ashera/core/IFragment;Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;)V", "remove", "LASIWidget;", "I", "nativeRemoveView", "add", "LASIWidget;I", "createLayoutParams", "LADView;", "getLayoutParams", "setChildAttribute", "LASIWidget;LASWidgetAttribute;LNSString;LNSObject;", "getChildAttribute", "LASIWidget;LASWidgetAttribute;", "setAttribute", "LASWidgetAttribute;LNSString;LNSObject;LASILifeCycleDecorator;", "getAttribute", "LASWidgetAttribute;LASILifeCycleDecorator;", "checkIosVersion", "setTemplate", "LNSObject;", "setName", "setNavGraph", "replace", "setTag", "navigate", "LNSObject;LNSObject;", "checkIfDialog", "popBackStackTo", "navigateWithPopBackStackTo", "LNSObject;LNSObject;LNSObject;LNSObject;", "navigateAsTop", "navigateWithPopBackStack", "addOrReplaceFragment", "Z", "LNSString;ZLNSString;LNSString;LNSString;", "createOrReplaceFragment", "LNSString;ZLNSString;", "setId", "setVisible", "getPlugin", "nativeCreate", "LJavaUtilMap;", "(Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;)V", "addChildViewController", "nativeMakeFrameForChildWidget", "IIII", "getView", &ASfragmentImpl_LOCAL_NAME, &ASfragmentImpl_GROUP_NAME, "LASfragmentImpl_fragmentExt;LASfragmentImpl_fragmentCommandBuilder;LASfragmentImpl_fragmentBean;LASfragmentImpl_fragmentParamsBean;LASfragmentImpl_fragmentCommandParamsBuilder;LASfragmentImpl_MyFragmentFactory;LASfragmentImpl_MyGenericFragment;" };
  static const J2ObjcClassInfo _ASfragmentImpl = { "fragmentImpl", "com.ashera.layout", ptrTable, methods, fields, 7, 0x1, 58, 14, -1, 55, -1, -1, -1 };
  return &_ASfragmentImpl;
}

+ (void)initialize {
  if (self == [ASfragmentImpl class]) {
    ASfragmentImpl_super$_addWithASIWidget_withInt_ = (void (*)(id, SEL, id, jint))[ASBaseHasWidgets instanceMethodForSelector:@selector(addWithASIWidget:withInt:)];
    J2OBJC_SET_INITIALIZED(ASfragmentImpl)
  }
}

@end

void ASfragmentImpl_init(ASfragmentImpl *self) {
  ASBaseHasWidgets_initWithNSString_withNSString_(self, ASfragmentImpl_GROUP_NAME, ASfragmentImpl_LOCAL_NAME);
}

ASfragmentImpl *new_ASfragmentImpl_init() {
  J2OBJC_NEW_IMPL(ASfragmentImpl, init)
}

ASfragmentImpl *create_ASfragmentImpl_init() {
  J2OBJC_CREATE_IMPL(ASfragmentImpl, init)
}

void ASfragmentImpl_initWithNSString_(ASfragmentImpl *self, NSString *localname) {
  ASBaseHasWidgets_initWithNSString_withNSString_(self, ASfragmentImpl_GROUP_NAME, localname);
}

ASfragmentImpl *new_ASfragmentImpl_initWithNSString_(NSString *localname) {
  J2OBJC_NEW_IMPL(ASfragmentImpl, initWithNSString_, localname)
}

ASfragmentImpl *create_ASfragmentImpl_initWithNSString_(NSString *localname) {
  J2OBJC_CREATE_IMPL(ASfragmentImpl, initWithNSString_, localname)
}

void ASfragmentImpl_initWithNSString_withNSString_(ASfragmentImpl *self, NSString *groupName, NSString *localname) {
  ASBaseHasWidgets_initWithNSString_withNSString_(self, groupName, localname);
}

ASfragmentImpl *new_ASfragmentImpl_initWithNSString_withNSString_(NSString *groupName, NSString *localname) {
  J2OBJC_NEW_IMPL(ASfragmentImpl, initWithNSString_withNSString_, groupName, localname)
}

ASfragmentImpl *create_ASfragmentImpl_initWithNSString_withNSString_(NSString *groupName, NSString *localname) {
  J2OBJC_CREATE_IMPL(ASfragmentImpl, initWithNSString_withNSString_, groupName, localname)
}

void ASfragmentImpl_setWidgetOnNativeClass(ASfragmentImpl *self) {
  ((ASUIView*) [self asNativeWidget]).widget = self;
}

void ASfragmentImpl_nativeRemoveViewWithASIWidget_(ASfragmentImpl *self, id<ASIWidget> widget) {
  ADLayoutTransition *layoutTransition = [((ADFrameLayout *) nil_chk(self->frameLayout_)) getLayoutTransition];
  if (layoutTransition != nil && ([layoutTransition isTransitionTypeEnabledWithInt:ADLayoutTransition_CHANGE_DISAPPEARING] || [layoutTransition isTransitionTypeEnabledWithInt:ADLayoutTransition_DISAPPEARING])) {
    [self addToBufferedRunnablesWithJavaLangRunnable:new_ASfragmentImpl_$Lambda$1_initWithASIWidget_(widget)];
  }
  else {
    ASViewGroupImpl_nativeRemoveViewWithASIWidget_(widget);
  }
}

void ASfragmentImpl_createLayoutParamsWithADView_(ASfragmentImpl *self, ADView *view) {
  ADFrameLayout_LayoutParams *layoutParams = (ADFrameLayout_LayoutParams *) cast_chk([((ADView *) nil_chk(view)) getLayoutParams], [ADFrameLayout_LayoutParams class]);
  layoutParams = (ADFrameLayout_LayoutParams *) cast_chk([view getLayoutParams], [ADFrameLayout_LayoutParams class]);
  if (layoutParams == nil) {
    layoutParams = new_ADFrameLayout_LayoutParams_initWithInt_withInt_(-2, -2);
    [view setLayoutParamsWithADViewGroup_LayoutParams:layoutParams];
  }
  else {
    layoutParams->height_ = -2;
    layoutParams->width_ = -2;
  }
}

ADFrameLayout_LayoutParams *ASfragmentImpl_getLayoutParamsWithADView_(ASfragmentImpl *self, ADView *view) {
  return (ADFrameLayout_LayoutParams *) cast_chk([((ADView *) nil_chk(view)) getLayoutParams], [ADFrameLayout_LayoutParams class]);
}

void ASfragmentImpl_setTemplateWithId_(ASfragmentImpl *self, id objValue) {
  self->layout_ = (NSString *) cast_chk(objValue, [NSString class]);
}

void ASfragmentImpl_setNameWithId_(ASfragmentImpl *self, id objValue) {
  self->name_ = (NSString *) cast_chk(objValue, [NSString class]);
}

void ASfragmentImpl_setNavGraphWithId_(ASfragmentImpl *self, id objValue) {
  self->navGraph_ = (NSString *) cast_chk(objValue, [NSString class]);
}

void ASfragmentImpl_replaceWithId_(ASfragmentImpl *self, id objValue) {
  self->navGraph_ = (NSString *) cast_chk(objValue, [NSString class]);
  self->layout_ = (NSString *) cast_chk(objValue, [NSString class]);
  ASfragmentImpl_addOrReplaceFragmentWithBoolean_(self, false);
  ASfragmentImpl_executePendingTransactions(self);
}

void ASfragmentImpl_setTagWithId_(ASfragmentImpl *self, id objValue) {
  self->tag_ = (NSString *) cast_chk(objValue, [NSString class]);
}

void ASfragmentImpl_navigateWithId_withId_(ASfragmentImpl *self, id actionId, id scopeObjects) {
  if (ASfragmentImpl_isValidFragment(self)) {
    ASfragmentImpl_checkIfDialogWithId_(self, actionId);
    ASUINavigatorImpl *navigator = ASfragmentImpl_getNavigator(self);
    [((ASUINavigatorImpl *) nil_chk(navigator)) navigateWithNSString:(NSString *) cast_chk(actionId, [NSString class]) withNSString:nil withBoolean:false withBoolean:false withJavaUtilList:(id<JavaUtilList>) cast_check(scopeObjects, JavaUtilList_class_()) withASIFragment:[self getFragment]];
    ASfragmentImpl_makeCurrentFragmentActive(self);
  }
}

void ASfragmentImpl_checkIfDialogWithId_(ASfragmentImpl *self, id actionId) {
  if ([((NSString *) nil_chk(((NSString *) cast_chk(actionId, [NSString class])))) java_hasPrefix:@"dialog#"]) {
    @throw new_JavaLangRuntimeException_initWithNSString_(@"Dialog is not supported. Use navigator.navigate(...).");
  }
}

void ASfragmentImpl_popBackStack(ASfragmentImpl *self) {
  if (ASfragmentImpl_isValidFragment(self)) {
    ASUINavigatorImpl *navigator = ASfragmentImpl_getNavigator(self);
    [((ASUINavigatorImpl *) nil_chk(navigator)) popBackStackWithASIFragment:[self getFragment]];
    ASfragmentImpl_makeCurrentFragmentActive(self);
  }
}

void ASfragmentImpl_popBackStackToWithId_withId_(ASfragmentImpl *self, id destinationId, id inclusive) {
  if (ASfragmentImpl_isValidFragment(self)) {
    ASUINavigatorImpl *navigator = ASfragmentImpl_getNavigator(self);
    [((ASUINavigatorImpl *) nil_chk(navigator)) popBackStackWithASIFragment:[self getFragment] withNSString:(NSString *) cast_chk(destinationId, [NSString class]) withBoolean:[((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(inclusive, [JavaLangBoolean class]))) booleanValue]];
    ASfragmentImpl_makeCurrentFragmentActive(self);
  }
}

void ASfragmentImpl_navigateWithPopBackStackToWithId_withId_withId_withId_(ASfragmentImpl *self, id actionId, id destinationId, id inclusive, id scopeObjects) {
  if (ASfragmentImpl_isValidFragment(self)) {
    ASfragmentImpl_checkIfDialogWithId_(self, actionId);
    ASUINavigatorImpl *navigator = ASfragmentImpl_getNavigator(self);
    [((ASUINavigatorImpl *) nil_chk(navigator)) navigateWithNSString:(NSString *) cast_chk(actionId, [NSString class]) withNSString:(NSString *) cast_chk(destinationId, [NSString class]) withBoolean:[((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(inclusive, [JavaLangBoolean class]))) booleanValue] withBoolean:false withJavaUtilList:(id<JavaUtilList>) cast_check(scopeObjects, JavaUtilList_class_()) withASIFragment:[self getFragment]];
    ASfragmentImpl_makeCurrentFragmentActive(self);
  }
}

void ASfragmentImpl_navigateAsTopWithId_withId_(ASfragmentImpl *self, id actionId, id scopeObjects) {
  if (ASfragmentImpl_isValidFragment(self)) {
    ASfragmentImpl_checkIfDialogWithId_(self, actionId);
    ASUINavigatorImpl *navigator = ASfragmentImpl_getNavigator(self);
    [((ASUINavigatorImpl *) nil_chk(navigator)) navigateWithNSString:(NSString *) cast_chk(actionId, [NSString class]) withNSString:nil withBoolean:false withBoolean:true withJavaUtilList:(id<JavaUtilList>) cast_check(scopeObjects, JavaUtilList_class_()) withASIFragment:[self getFragment]];
    ASfragmentImpl_makeCurrentFragmentActive(self);
  }
}

void ASfragmentImpl_navigateWithPopBackStackWithId_withId_(ASfragmentImpl *self, id actionId, id scopeObjects) {
  if (ASfragmentImpl_isValidFragment(self)) {
    ASfragmentImpl_checkIfDialogWithId_(self, actionId);
    ASUINavigatorImpl *navigator = ASfragmentImpl_getNavigator(self);
    [((ASUINavigatorImpl *) nil_chk(navigator)) navigateWithNSString:(NSString *) cast_chk(actionId, [NSString class]) withNSString:nil withBoolean:true withBoolean:false withJavaUtilList:(id<JavaUtilList>) cast_check(scopeObjects, JavaUtilList_class_()) withASIFragment:[self getFragment]];
    ASfragmentImpl_makeCurrentFragmentActive(self);
  }
}

void ASfragmentImpl_addOrReplaceFragmentWithBoolean_(ASfragmentImpl *self, jboolean add) {
  ADXFragmentManager *manager = [((ADXFragment *) nil_chk(((ADXFragment *) cast_chk([self getFragment], [ADXFragment class])))) getChildFragmentManager];
  ADXFragmentTransaction *transaction = [((ADXFragmentManager *) nil_chk(manager)) beginTransaction];
  if (add) {
    [((ADXFragmentTransaction *) nil_chk(transaction)) addWithASIFragmentContainer:self withNSString:self->name_ withNSString:self->layout_ withNSString:self->navGraph_ withNSString:self->tag_];
  }
  else {
    [((ADXFragmentTransaction *) nil_chk(transaction)) replaceWithASIFragmentContainer:self withNSString:self->name_ withNSString:self->layout_ withNSString:self->navGraph_ withNSString:self->tag_];
  }
  [transaction commit];
}

void ASfragmentImpl_executePendingTransactions(ASfragmentImpl *self) {
  if ([self isInitialised]) {
    [((ADXFragment *) nil_chk(((ADXFragment *) cast_chk(self->fragment_, [ADXFragment class])))) executePendingTransactions];
  }
}

void ASfragmentImpl_createOrReplaceFragmentWithNSString_withBoolean_withNSString_(ASfragmentImpl *self, NSString *id_, jboolean add, NSString *layout) {
  if (layout != nil) {
    NSString *mylayout = layout;
    if ([mylayout java_hasPrefix:@"@layout"]) {
      mylayout = JreStrcat("$$", [mylayout java_substring:1], @".xml");
    }
    [((ASUINavigatorImpl *) nil_chk(self->navigator_)) navigateWithNSString:JreStrcat("$$C$", @"fragment#", id_, '#', mylayout) withNSString:nil withBoolean:false withBoolean:!add withJavaUtilList:nil withASIFragment:[self getFragment]];
    ASfragmentImpl_makeCurrentFragmentActive(self);
  }
}

void ASfragmentImpl_makeCurrentFragmentActive(ASfragmentImpl *self) {
  id<ASIWidget> rootWidget = [((id<ASIFragment>) nil_chk(([((ASUINavigatorImpl *) nil_chk(self->navigator_)) getActiveFragmentWithASIFragment:self->fragment_]))) getRootWidget];
  if (rootWidget != nil) {
    [((id<JavaUtilList>) nil_chk(self->widgets_)) clear];
    [((ADFrameLayout *) nil_chk(self->frameLayout_)) removeAllViews];
    ADView *view = (ADView *) cast_chk([rootWidget asWidget], [ADView class]);
    ASfragmentImpl_createLayoutParamsWithADView_(self, view);
    [((ADFrameLayout *) nil_chk(self->frameLayout_)) addViewWithADView:view];
    ASfragmentImpl_super$_addWithASIWidget_withInt_(self, @selector(addWithASIWidget:withInt:), rootWidget, -1);
    [rootWidget setParentWithASHasWidgets:self];
    ASfragmentImpl_remeasureIfRequired(self);
  }
}

ASUINavigatorImpl *ASfragmentImpl_getNavigator(ASfragmentImpl *self) {
  return self->navigator_;
}

jboolean ASfragmentImpl_isValidFragment(ASfragmentImpl *self) {
  return [@"androidx.navigation.fragment.NavHostFragment" isEqual:self->name_];
}

void ASfragmentImpl_closeDialog(ASfragmentImpl *self) {
  if (ASfragmentImpl_isValidFragment(self)) {
    [((ASUINavigatorImpl *) nil_chk(self->navigator_)) closeDialogWithASIFragment:self->fragment_];
    ASfragmentImpl_makeCurrentFragmentActive(self);
  }
}

void ASfragmentImpl_nativeCreateWithJavaUtilMap_(ASfragmentImpl *self, id<JavaUtilMap> params) {
  self->navController_ = [self createView];
  self->navigator_ = new_ASUINavigatorImpl_initWithASUINavigatorImpl_FragmentFactory_withId_withBoolean_(new_ASfragmentImpl_MyFragmentFactory_initWithASfragmentImpl_(self), self->navController_, false);
  (void) ASPluginInvoker_postDelayedWithJavaLangRunnable_withInt_(new_ASfragmentImpl_$Lambda$2_initWithASfragmentImpl_(self), 0);
}

void ASfragmentImpl_nativeMakeFrameForChildWidgetWithInt_withInt_withInt_withInt_(ASfragmentImpl *self, jint l, jint t, jint r, jint b) {
  ASViewImpl_updateBoundsWithId_withInt_withInt_withInt_withInt_(ASfragmentImpl_getViewWithId_(self, self->navController_), 0, 0, r - l, b - t);
}

id ASfragmentImpl_getViewWithId_(ASfragmentImpl *self, id navController) {
  return ((UINavigationController*)navController).view;
}

void ASfragmentImpl_remeasureIfRequired(ASfragmentImpl *self) {
  [self requestLayout];
  (void) ASPluginInvoker_postDelayedWithJavaLangRunnable_withInt_(new_ASfragmentImpl_$Lambda$3_initWithASfragmentImpl_(self), 0);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASfragmentImpl)

@implementation ASfragmentImpl_fragmentExt

- (id<ASIWidget>)getWidget {
  return this$0_;
}

- (void)setMaxWidthWithInt:(jint)width {
  mMaxWidth_ = width;
}

- (void)setMaxHeightWithInt:(jint)height {
  mMaxHeight_ = height;
}

- (jint)getMaxWidth {
  return mMaxWidth_;
}

- (jint)getMaxHeight {
  return mMaxHeight_;
}

- (instancetype)initWithASfragmentImpl:(ASfragmentImpl *)outer$ {
  ASfragmentImpl_fragmentExt_initWithASfragmentImpl_(self, outer$);
  return self;
}

- (void)onMeasureWithInt:(jint)widthMeasureSpec
                 withInt:(jint)heightMeasureSpec {
  if (mMaxWidth_ > 0) {
    widthMeasureSpec = ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_(mMaxWidth_, ADView_MeasureSpec_AT_MOST);
  }
  if (mMaxHeight_ > 0) {
    heightMeasureSpec = ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_(mMaxHeight_, ADView_MeasureSpec_AT_MOST);
  }
  [super onMeasureWithInt:widthMeasureSpec withInt:heightMeasureSpec];
  id<ASIWidgetLifeCycleListener> listener = [this$0_ getListener];
  if (listener != nil) {
    [((ASMeasureEvent *) nil_chk(measureFinished_)) setWidthWithInt:[self getMeasuredWidth]];
    [((ASMeasureEvent *) nil_chk(measureFinished_)) setHeightWithInt:[self getMeasuredHeight]];
    [listener eventOccurredWithASIWidgetLifeCycleListener_EventId:JreLoadEnum(ASIWidgetLifeCycleListener_EventId, measureFinished) withASWidgetEvent:measureFinished_];
  }
}

- (void)onLayoutWithBoolean:(jboolean)changed
                    withInt:(jint)l
                    withInt:(jint)t
                    withInt:(jint)r
                    withInt:(jint)b {
  [super onLayoutWithBoolean:changed withInt:l withInt:t withInt:r withInt:b];
  ASViewImpl_setDrawableBoundsWithASIWidget_withInt_withInt_withInt_withInt_(this$0_, l, t, r, b);
  ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_([this$0_ asNativeWidget], l, t, r, b);
  ASfragmentImpl_nativeMakeFrameForChildWidgetWithInt_withInt_withInt_withInt_(this$0_, l, t, r, b);
  [this$0_ replayBufferedEvents];
  ASViewImpl_redrawDrawablesWithASIWidget_(this$0_);
  id<ASIWidgetLifeCycleListener> listener = [this$0_ getListener];
  if (listener != nil) {
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setBWithInt:b];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setLWithInt:l];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setRWithInt:r];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setTWithInt:t];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setChangedWithBoolean:changed];
    [listener eventOccurredWithASIWidgetLifeCycleListener_EventId:JreLoadEnum(ASIWidgetLifeCycleListener_EventId, onLayout) withASWidgetEvent:onLayoutEvent_];
  }
  if ([this$0_ isInvalidateOnFrameChange] && [this$0_ isInitialised]) {
    [this$0_ invalidate];
  }
}

- (void)executeWithNSString:(NSString *)method
          withNSObjectArray:(IOSObjectArray *)canvas {
}

- (void)updateMeasuredDimensionWithInt:(jint)width
                               withInt:(jint)height {
  [self setMeasuredDimensionWithInt:width withInt:height];
}

- (id<ASILifeCycleDecorator>)newInstanceWithASIWidget:(id<ASIWidget>)widget {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)setAttributeWithASWidgetAttribute:(ASWidgetAttribute *)widgetAttribute
                             withNSString:(NSString *)strValue
                                   withId:(id)objValue {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (id<JavaUtilList>)getMethods {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)initialized {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (id)getAttributeWithASWidgetAttribute:(ASWidgetAttribute *)widgetAttribute {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)drawableStateChanged {
  [super drawableStateChanged];
  ASViewImpl_drawableStateChangedWithASIWidget_(this$0_);
}

- (ADView *)inflateViewWithNSString:(NSString *)layout {
  if (templates_ == nil) {
    templates_ = new_JavaUtilHashMap_init();
  }
  id<ASIWidget> template_ = [templates_ getWithId:layout];
  if (template_ == nil) {
    template_ = (id<ASIWidget>) cast_check([this$0_ quickConvertWithId:layout withNSString:@"template"], ASIWidget_class_());
    (void) [((id<JavaUtilMap>) nil_chk(templates_)) putWithId:layout withId:template_];
  }
  id<ASIWidget> widget = [((id<ASIWidget>) nil_chk(template_)) loadLazyWidgetsWithASHasWidgets:[this$0_ getParent]];
  return (ADView *) cast_chk([((id<ASIWidget>) nil_chk(widget)) asWidget], [ADView class]);
}

- (void)remeasure {
  if ([this$0_ getFragment] != nil) {
    [((id<ASIFragment>) nil_chk([this$0_ getFragment])) remeasure];
  }
}

- (void)removeFromParent {
  [((id<ASHasWidgets>) nil_chk([this$0_ getParent])) removeWithASIWidget:this$0_];
}

- (void)getLocationOnScreenWithIntArray:(IOSIntArray *)appScreenLocation {
  *IOSIntArray_GetRef(nil_chk(appScreenLocation), 0) = ASViewImpl_getLocationXOnScreenWithId_([this$0_ asNativeWidget]);
  *IOSIntArray_GetRef(appScreenLocation, 1) = ASViewImpl_getLocationYOnScreenWithId_([this$0_ asNativeWidget]);
}

- (void)getWindowVisibleDisplayFrameWithADRect:(ADRect *)displayFrame {
  ((ADRect *) nil_chk(displayFrame))->left_ = ASViewImpl_getLocationXOnScreenWithId_([this$0_ asNativeWidget]);
  displayFrame->top_ = ASViewImpl_getLocationYOnScreenWithId_([this$0_ asNativeWidget]);
  displayFrame->right_ = displayFrame->left_ + [self getWidth];
  displayFrame->bottom_ = displayFrame->top_ + [self getHeight];
}

- (void)offsetTopAndBottomWithInt:(jint)offset {
  [super offsetTopAndBottomWithInt:offset];
  ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_([this$0_ asNativeWidget], [self getLeft], [self getTop], [self getRight], [self getBottom]);
}

- (void)offsetLeftAndRightWithInt:(jint)offset {
  [super offsetLeftAndRightWithInt:offset];
  ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_([this$0_ asNativeWidget], [self getLeft], [self getTop], [self getRight], [self getBottom]);
}

- (void)setMyAttributeWithNSString:(NSString *)name
                            withId:(id)value {
  if ([((NSString *) nil_chk(name)) isEqual:@"state0"]) {
    [self setState0WithId:value];
    return;
  }
  if ([name isEqual:@"state1"]) {
    [self setState1WithId:value];
    return;
  }
  if ([name isEqual:@"state2"]) {
    [self setState2WithId:value];
    return;
  }
  if ([name isEqual:@"state3"]) {
    [self setState3WithId:value];
    return;
  }
  if ([name isEqual:@"state4"]) {
    [self setState4WithId:value];
    return;
  }
  [this$0_ setAttributeWithNSString:name withId:value withBoolean:true];
}

- (void)setVisibilityWithInt:(jint)visibility {
  [super setVisibilityWithInt:visibility];
  ASViewImpl_nativeSetVisibilityWithId_withBoolean_([this$0_ asNativeWidget], visibility != ADView_VISIBLE);
}

- (void)setState0WithId:(id)value {
  ASViewImpl_setStateWithASIWidget_withInt_withId_(this$0_, 0, value);
}

- (void)setState1WithId:(id)value {
  ASViewImpl_setStateWithASIWidget_withInt_withId_(this$0_, 1, value);
}

- (void)setState2WithId:(id)value {
  ASViewImpl_setStateWithASIWidget_withInt_withId_(this$0_, 2, value);
}

- (void)setState3WithId:(id)value {
  ASViewImpl_setStateWithASIWidget_withInt_withId_(this$0_, 3, value);
}

- (void)setState4WithId:(id)value {
  ASViewImpl_setStateWithASIWidget_withInt_withId_(this$0_, 4, value);
}

- (void)state0 {
  ASViewImpl_stateWithASIWidget_withInt_(this$0_, 0);
}

- (void)state1 {
  ASViewImpl_stateWithASIWidget_withInt_(this$0_, 1);
}

- (void)state2 {
  ASViewImpl_stateWithASIWidget_withInt_(this$0_, 2);
}

- (void)state3 {
  ASViewImpl_stateWithASIWidget_withInt_(this$0_, 3);
}

- (void)state4 {
  ASViewImpl_stateWithASIWidget_withInt_(this$0_, 4);
}

- (void)stateYes {
  ASViewImpl_stateYesWithASIWidget_(this$0_);
}

- (void)stateNo {
  ASViewImpl_stateNoWithASIWidget_(this$0_);
}

- (void)endViewTransitionWithADView:(ADView *)view {
  [super endViewTransitionWithADView:view];
  [this$0_ runBufferedRunnables];
}

- (void)__javaClone:(ASfragmentImpl_fragmentExt *)original {
  [super __javaClone:original];
  JreRelease(this$0_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LASIWidget;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x81, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 5, -1, -1, -1, -1 },
    { NULL, "LASILifeCycleDecorator;", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 15, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 16, 17, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADView;", 0x1, 18, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 21, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 22, 23, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 24, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 25, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 26, 27, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 28, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 29, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 31, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 32, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 33, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 34, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 35, 36, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getWidget);
  methods[1].selector = @selector(setMaxWidthWithInt:);
  methods[2].selector = @selector(setMaxHeightWithInt:);
  methods[3].selector = @selector(getMaxWidth);
  methods[4].selector = @selector(getMaxHeight);
  methods[5].selector = @selector(initWithASfragmentImpl:);
  methods[6].selector = @selector(onMeasureWithInt:withInt:);
  methods[7].selector = @selector(onLayoutWithBoolean:withInt:withInt:withInt:withInt:);
  methods[8].selector = @selector(executeWithNSString:withNSObjectArray:);
  methods[9].selector = @selector(updateMeasuredDimensionWithInt:withInt:);
  methods[10].selector = @selector(newInstanceWithASIWidget:);
  methods[11].selector = @selector(setAttributeWithASWidgetAttribute:withNSString:withId:);
  methods[12].selector = @selector(getMethods);
  methods[13].selector = @selector(initialized);
  methods[14].selector = @selector(getAttributeWithASWidgetAttribute:);
  methods[15].selector = @selector(drawableStateChanged);
  methods[16].selector = @selector(inflateViewWithNSString:);
  methods[17].selector = @selector(remeasure);
  methods[18].selector = @selector(removeFromParent);
  methods[19].selector = @selector(getLocationOnScreenWithIntArray:);
  methods[20].selector = @selector(getWindowVisibleDisplayFrameWithADRect:);
  methods[21].selector = @selector(offsetTopAndBottomWithInt:);
  methods[22].selector = @selector(offsetLeftAndRightWithInt:);
  methods[23].selector = @selector(setMyAttributeWithNSString:withId:);
  methods[24].selector = @selector(setVisibilityWithInt:);
  methods[25].selector = @selector(setState0WithId:);
  methods[26].selector = @selector(setState1WithId:);
  methods[27].selector = @selector(setState2WithId:);
  methods[28].selector = @selector(setState3WithId:);
  methods[29].selector = @selector(setState4WithId:);
  methods[30].selector = @selector(state0);
  methods[31].selector = @selector(state1);
  methods[32].selector = @selector(state2);
  methods[33].selector = @selector(state3);
  methods[34].selector = @selector(state4);
  methods[35].selector = @selector(stateYes);
  methods[36].selector = @selector(stateNo);
  methods[37].selector = @selector(endViewTransitionWithADView:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASfragmentImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "measureFinished_", "LASMeasureEvent;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "onLayoutEvent_", "LASOnLayoutEvent;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mMaxWidth_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mMaxHeight_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "templates_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 37, -1 },
  };
  static const void *ptrTable[] = { "setMaxWidth", "I", "setMaxHeight", "LASfragmentImpl;", "onMeasure", "II", "onLayout", "ZIIII", "execute", "LNSString;[LNSObject;", "updateMeasuredDimension", "newInstance", "LASIWidget;", "setAttribute", "LASWidgetAttribute;LNSString;LNSObject;", "()Ljava/util/List<Ljava/lang/String;>;", "getAttribute", "LASWidgetAttribute;", "inflateView", "LNSString;", "getLocationOnScreen", "[I", "getWindowVisibleDisplayFrame", "LADRect;", "offsetTopAndBottom", "offsetLeftAndRight", "setMyAttribute", "LNSString;LNSObject;", "setVisibility", "setState0", "LNSObject;", "setState1", "setState2", "setState3", "setState4", "endViewTransition", "LADView;", "Ljava/util/Map<Ljava/lang/String;Lcom/ashera/widget/IWidget;>;" };
  static const J2ObjcClassInfo _ASfragmentImpl_fragmentExt = { "fragmentExt", "com.ashera.layout", ptrTable, methods, fields, 7, 0x1, 38, 6, 3, -1, -1, -1, -1 };
  return &_ASfragmentImpl_fragmentExt;
}

@end

void ASfragmentImpl_fragmentExt_initWithASfragmentImpl_(ASfragmentImpl_fragmentExt *self, ASfragmentImpl *outer$) {
  self->this$0_ = outer$;
  ADFrameLayout_init(self);
  self->measureFinished_ = new_ASMeasureEvent_init();
  self->onLayoutEvent_ = new_ASOnLayoutEvent_init();
  self->mMaxWidth_ = -1;
  self->mMaxHeight_ = -1;
}

ASfragmentImpl_fragmentExt *new_ASfragmentImpl_fragmentExt_initWithASfragmentImpl_(ASfragmentImpl *outer$) {
  J2OBJC_NEW_IMPL(ASfragmentImpl_fragmentExt, initWithASfragmentImpl_, outer$)
}

ASfragmentImpl_fragmentExt *create_ASfragmentImpl_fragmentExt_initWithASfragmentImpl_(ASfragmentImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASfragmentImpl_fragmentExt, initWithASfragmentImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASfragmentImpl_fragmentExt)

@implementation ASfragmentImpl_fragmentCommandBuilder

- (instancetype)initWithASfragmentImpl:(ASfragmentImpl *)outer$ {
  ASfragmentImpl_fragmentCommandBuilder_initWithASfragmentImpl_(self, outer$);
  return self;
}

- (ASfragmentImpl_fragmentCommandBuilder *)executeWithBoolean:(jboolean)setter {
  if (setter) {
    [this$0_ executeCommandWithJavaUtilMap:command_ withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_SETTER_METHOD];
    [((id<ASIFragment>) nil_chk([this$0_ getFragment])) remeasure];
  }
  [this$0_ executeCommandWithJavaUtilMap:command_ withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_GETTER_METHOD];
  return self;
}

- (ASfragmentImpl_fragmentCommandBuilder *)setNameWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"name"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASfragmentImpl_fragmentCommandBuilder *)setLayoutWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"layout"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASfragmentImpl_fragmentCommandBuilder *)setNavGraphWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"navGraph"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASfragmentImpl_fragmentCommandBuilder *)setTagWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"tag"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASfragmentImpl_fragmentCommandBuilder *)replaceWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"replace"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASfragmentImpl_fragmentCommandBuilder *)navigateWithNSString:(NSString *)actionId
                                                         withId:(id)scopeObjects {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"navigate"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  id<JavaUtilMap> wrapper = new_JavaUtilHashMap_init();
  (void) [wrapper putWithId:@"actionId" withId:actionId];
  (void) [wrapper putWithId:@"scopeObjects" withId:scopeObjects];
  (void) [attrs putWithId:@"value" withId:wrapper];
  return self;
}

- (ASfragmentImpl_fragmentCommandBuilder *)popBackStack {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"popBackStack"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  return self;
}

- (ASfragmentImpl_fragmentCommandBuilder *)navigateWithPopBackStackWithNSString:(NSString *)actionId
                                                                         withId:(id)scopeObjects {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"navigateWithPopBackStack"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  id<JavaUtilMap> wrapper = new_JavaUtilHashMap_init();
  (void) [wrapper putWithId:@"actionId" withId:actionId];
  (void) [wrapper putWithId:@"scopeObjects" withId:scopeObjects];
  (void) [attrs putWithId:@"value" withId:wrapper];
  return self;
}

- (ASfragmentImpl_fragmentCommandBuilder *)navigateAsTopWithNSString:(NSString *)actionId
                                                              withId:(id)scopeObjects {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"navigateAsTop"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  id<JavaUtilMap> wrapper = new_JavaUtilHashMap_init();
  (void) [wrapper putWithId:@"actionId" withId:actionId];
  (void) [wrapper putWithId:@"scopeObjects" withId:scopeObjects];
  (void) [attrs putWithId:@"value" withId:wrapper];
  return self;
}

- (ASfragmentImpl_fragmentCommandBuilder *)navigateWithPopBackStackToWithNSString:(NSString *)actionId
                                                                     withNSString:(NSString *)destinationId
                                                                      withBoolean:(jboolean)inclusive
                                                                           withId:(id)scopeObjects {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"navigateWithPopBackStackTo"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  id<JavaUtilMap> wrapper = new_JavaUtilHashMap_init();
  (void) [wrapper putWithId:@"actionId" withId:actionId];
  (void) [wrapper putWithId:@"destinationId" withId:destinationId];
  (void) [wrapper putWithId:@"inclusive" withId:JavaLangBoolean_valueOfWithBoolean_(inclusive)];
  (void) [wrapper putWithId:@"scopeObjects" withId:scopeObjects];
  (void) [attrs putWithId:@"value" withId:wrapper];
  return self;
}

- (ASfragmentImpl_fragmentCommandBuilder *)popBackStackToWithNSString:(NSString *)destinationId
                                                          withBoolean:(jboolean)inclusive {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"popBackStackTo"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  id<JavaUtilMap> wrapper = new_JavaUtilHashMap_init();
  (void) [wrapper putWithId:@"destinationId" withId:destinationId];
  (void) [wrapper putWithId:@"inclusive" withId:JavaLangBoolean_valueOfWithBoolean_(inclusive)];
  (void) [attrs putWithId:@"value" withId:wrapper];
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LASfragmentImpl_fragmentCommandBuilder;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LASfragmentImpl_fragmentCommandBuilder;", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LASfragmentImpl_fragmentCommandBuilder;", 0x1, 5, 4, -1, -1, -1, -1 },
    { NULL, "LASfragmentImpl_fragmentCommandBuilder;", 0x1, 6, 4, -1, -1, -1, -1 },
    { NULL, "LASfragmentImpl_fragmentCommandBuilder;", 0x1, 7, 4, -1, -1, -1, -1 },
    { NULL, "LASfragmentImpl_fragmentCommandBuilder;", 0x1, 8, 4, -1, -1, -1, -1 },
    { NULL, "LASfragmentImpl_fragmentCommandBuilder;", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "LASfragmentImpl_fragmentCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASfragmentImpl_fragmentCommandBuilder;", 0x1, 11, 10, -1, -1, -1, -1 },
    { NULL, "LASfragmentImpl_fragmentCommandBuilder;", 0x1, 12, 10, -1, -1, -1, -1 },
    { NULL, "LASfragmentImpl_fragmentCommandBuilder;", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "LASfragmentImpl_fragmentCommandBuilder;", 0x1, 15, 16, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASfragmentImpl:);
  methods[1].selector = @selector(executeWithBoolean:);
  methods[2].selector = @selector(setNameWithNSString:);
  methods[3].selector = @selector(setLayoutWithNSString:);
  methods[4].selector = @selector(setNavGraphWithNSString:);
  methods[5].selector = @selector(setTagWithNSString:);
  methods[6].selector = @selector(replaceWithNSString:);
  methods[7].selector = @selector(navigateWithNSString:withId:);
  methods[8].selector = @selector(popBackStack);
  methods[9].selector = @selector(navigateWithPopBackStackWithNSString:withId:);
  methods[10].selector = @selector(navigateAsTopWithNSString:withId:);
  methods[11].selector = @selector(navigateWithPopBackStackToWithNSString:withNSString:withBoolean:withId:);
  methods[12].selector = @selector(popBackStackToWithNSString:withBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASfragmentImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASfragmentImpl;", "execute", "Z", "setName", "LNSString;", "setLayout", "setNavGraph", "setTag", "replace", "navigate", "LNSString;LNSObject;", "navigateWithPopBackStack", "navigateAsTop", "navigateWithPopBackStackTo", "LNSString;LNSString;ZLNSObject;", "popBackStackTo", "LNSString;Z", "Lcom/ashera/layout/ViewGroupImpl$ViewGroupCommandBuilder<Lcom/ashera/layout/fragmentImpl$fragmentCommandBuilder;>;" };
  static const J2ObjcClassInfo _ASfragmentImpl_fragmentCommandBuilder = { "fragmentCommandBuilder", "com.ashera.layout", ptrTable, methods, fields, 7, 0x1, 13, 1, 0, -1, -1, 17, -1 };
  return &_ASfragmentImpl_fragmentCommandBuilder;
}

@end

void ASfragmentImpl_fragmentCommandBuilder_initWithASfragmentImpl_(ASfragmentImpl_fragmentCommandBuilder *self, ASfragmentImpl *outer$) {
  self->this$0_ = outer$;
  ASViewGroupImpl_ViewGroupCommandBuilder_init(self);
}

ASfragmentImpl_fragmentCommandBuilder *new_ASfragmentImpl_fragmentCommandBuilder_initWithASfragmentImpl_(ASfragmentImpl *outer$) {
  J2OBJC_NEW_IMPL(ASfragmentImpl_fragmentCommandBuilder, initWithASfragmentImpl_, outer$)
}

ASfragmentImpl_fragmentCommandBuilder *create_ASfragmentImpl_fragmentCommandBuilder_initWithASfragmentImpl_(ASfragmentImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASfragmentImpl_fragmentCommandBuilder, initWithASfragmentImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASfragmentImpl_fragmentCommandBuilder)

@implementation ASfragmentImpl_fragmentBean

- (instancetype)initWithASfragmentImpl:(ASfragmentImpl *)outer$ {
  ASfragmentImpl_fragmentBean_initWithASfragmentImpl_(self, outer$);
  return self;
}

- (void)setNameWithNSString:(NSString *)value {
  (void) [((ASfragmentImpl_fragmentCommandBuilder *) nil_chk([((ASfragmentImpl_fragmentCommandBuilder *) nil_chk([((ASfragmentImpl_fragmentCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setNameWithNSString:value])) executeWithBoolean:true];
}

- (void)setLayoutWithNSString:(NSString *)value {
  (void) [((ASfragmentImpl_fragmentCommandBuilder *) nil_chk([((ASfragmentImpl_fragmentCommandBuilder *) nil_chk([((ASfragmentImpl_fragmentCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setLayoutWithNSString:value])) executeWithBoolean:true];
}

- (void)setNavGraphWithNSString:(NSString *)value {
  (void) [((ASfragmentImpl_fragmentCommandBuilder *) nil_chk([((ASfragmentImpl_fragmentCommandBuilder *) nil_chk([((ASfragmentImpl_fragmentCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setNavGraphWithNSString:value])) executeWithBoolean:true];
}

- (void)setTagWithNSString:(NSString *)value {
  (void) [((ASfragmentImpl_fragmentCommandBuilder *) nil_chk([((ASfragmentImpl_fragmentCommandBuilder *) nil_chk([((ASfragmentImpl_fragmentCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setTagWithNSString:value])) executeWithBoolean:true];
}

- (void)replaceWithNSString:(NSString *)value {
  (void) [((ASfragmentImpl_fragmentCommandBuilder *) nil_chk([((ASfragmentImpl_fragmentCommandBuilder *) nil_chk([((ASfragmentImpl_fragmentCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) replaceWithNSString:value])) executeWithBoolean:true];
}

- (void)navigateWithNSString:(NSString *)actionId
                      withId:(id)scopeObjects {
  (void) [((ASfragmentImpl_fragmentCommandBuilder *) nil_chk([((ASfragmentImpl_fragmentCommandBuilder *) nil_chk([((ASfragmentImpl_fragmentCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) navigateWithNSString:actionId withId:scopeObjects])) executeWithBoolean:true];
}

- (void)popBackStack {
  (void) [((ASfragmentImpl_fragmentCommandBuilder *) nil_chk([((ASfragmentImpl_fragmentCommandBuilder *) nil_chk([((ASfragmentImpl_fragmentCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) popBackStack])) executeWithBoolean:true];
}

- (void)navigateWithPopBackStackWithNSString:(NSString *)actionId
                                      withId:(id)scopeObjects {
  (void) [((ASfragmentImpl_fragmentCommandBuilder *) nil_chk([((ASfragmentImpl_fragmentCommandBuilder *) nil_chk([((ASfragmentImpl_fragmentCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) navigateWithPopBackStackWithNSString:actionId withId:scopeObjects])) executeWithBoolean:true];
}

- (void)navigateAsTopWithNSString:(NSString *)actionId
                           withId:(id)scopeObjects {
  (void) [((ASfragmentImpl_fragmentCommandBuilder *) nil_chk([((ASfragmentImpl_fragmentCommandBuilder *) nil_chk([((ASfragmentImpl_fragmentCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) navigateAsTopWithNSString:actionId withId:scopeObjects])) executeWithBoolean:true];
}

- (void)navigateWithPopBackStackToWithNSString:(NSString *)actionId
                                  withNSString:(NSString *)destinationId
                                   withBoolean:(jboolean)inclusive
                                        withId:(id)scopeObjects {
  (void) [((ASfragmentImpl_fragmentCommandBuilder *) nil_chk([((ASfragmentImpl_fragmentCommandBuilder *) nil_chk([((ASfragmentImpl_fragmentCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) navigateWithPopBackStackToWithNSString:actionId withNSString:destinationId withBoolean:inclusive withId:scopeObjects])) executeWithBoolean:true];
}

- (void)popBackStackToWithNSString:(NSString *)destinationId
                       withBoolean:(jboolean)inclusive {
  (void) [((ASfragmentImpl_fragmentCommandBuilder *) nil_chk([((ASfragmentImpl_fragmentCommandBuilder *) nil_chk([((ASfragmentImpl_fragmentCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) popBackStackToWithNSString:destinationId withBoolean:inclusive])) executeWithBoolean:true];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 14, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASfragmentImpl:);
  methods[1].selector = @selector(setNameWithNSString:);
  methods[2].selector = @selector(setLayoutWithNSString:);
  methods[3].selector = @selector(setNavGraphWithNSString:);
  methods[4].selector = @selector(setTagWithNSString:);
  methods[5].selector = @selector(replaceWithNSString:);
  methods[6].selector = @selector(navigateWithNSString:withId:);
  methods[7].selector = @selector(popBackStack);
  methods[8].selector = @selector(navigateWithPopBackStackWithNSString:withId:);
  methods[9].selector = @selector(navigateAsTopWithNSString:withId:);
  methods[10].selector = @selector(navigateWithPopBackStackToWithNSString:withNSString:withBoolean:withId:);
  methods[11].selector = @selector(popBackStackToWithNSString:withBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASfragmentImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASfragmentImpl;", "setName", "LNSString;", "setLayout", "setNavGraph", "setTag", "replace", "navigate", "LNSString;LNSObject;", "navigateWithPopBackStack", "navigateAsTop", "navigateWithPopBackStackTo", "LNSString;LNSString;ZLNSObject;", "popBackStackTo", "LNSString;Z" };
  static const J2ObjcClassInfo _ASfragmentImpl_fragmentBean = { "fragmentBean", "com.ashera.layout", ptrTable, methods, fields, 7, 0x1, 12, 1, 0, -1, -1, -1, -1 };
  return &_ASfragmentImpl_fragmentBean;
}

@end

void ASfragmentImpl_fragmentBean_initWithASfragmentImpl_(ASfragmentImpl_fragmentBean *self, ASfragmentImpl *outer$) {
  self->this$0_ = outer$;
  ASViewGroupImpl_ViewGroupBean_initWithASIWidget_(self, outer$);
}

ASfragmentImpl_fragmentBean *new_ASfragmentImpl_fragmentBean_initWithASfragmentImpl_(ASfragmentImpl *outer$) {
  J2OBJC_NEW_IMPL(ASfragmentImpl_fragmentBean, initWithASfragmentImpl_, outer$)
}

ASfragmentImpl_fragmentBean *create_ASfragmentImpl_fragmentBean_initWithASfragmentImpl_(ASfragmentImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASfragmentImpl_fragmentBean, initWithASfragmentImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASfragmentImpl_fragmentBean)

@implementation ASfragmentImpl_fragmentParamsBean

- (instancetype)initWithASfragmentImpl:(ASfragmentImpl *)outer$ {
  ASfragmentImpl_fragmentParamsBean_initWithASfragmentImpl_(self, outer$);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASfragmentImpl:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LASfragmentImpl;" };
  static const J2ObjcClassInfo _ASfragmentImpl_fragmentParamsBean = { "fragmentParamsBean", "com.ashera.layout", ptrTable, methods, NULL, 7, 0x1, 1, 0, 0, -1, -1, -1, -1 };
  return &_ASfragmentImpl_fragmentParamsBean;
}

@end

void ASfragmentImpl_fragmentParamsBean_initWithASfragmentImpl_(ASfragmentImpl_fragmentParamsBean *self, ASfragmentImpl *outer$) {
  ASViewGroupImpl_ViewGroupParamsBean_init(self);
}

ASfragmentImpl_fragmentParamsBean *new_ASfragmentImpl_fragmentParamsBean_initWithASfragmentImpl_(ASfragmentImpl *outer$) {
  J2OBJC_NEW_IMPL(ASfragmentImpl_fragmentParamsBean, initWithASfragmentImpl_, outer$)
}

ASfragmentImpl_fragmentParamsBean *create_ASfragmentImpl_fragmentParamsBean_initWithASfragmentImpl_(ASfragmentImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASfragmentImpl_fragmentParamsBean, initWithASfragmentImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASfragmentImpl_fragmentParamsBean)

@implementation ASfragmentImpl_fragmentCommandParamsBuilder

- (instancetype)initWithASfragmentImpl:(ASfragmentImpl *)outer$ {
  ASfragmentImpl_fragmentCommandParamsBuilder_initWithASfragmentImpl_(self, outer$);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASfragmentImpl:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LASfragmentImpl;", "Lcom/ashera/layout/ViewGroupImpl$ViewGroupCommandParamsBuilder<Lcom/ashera/layout/fragmentImpl$fragmentCommandParamsBuilder;>;" };
  static const J2ObjcClassInfo _ASfragmentImpl_fragmentCommandParamsBuilder = { "fragmentCommandParamsBuilder", "com.ashera.layout", ptrTable, methods, NULL, 7, 0x1, 1, 0, 0, -1, -1, 1, -1 };
  return &_ASfragmentImpl_fragmentCommandParamsBuilder;
}

@end

void ASfragmentImpl_fragmentCommandParamsBuilder_initWithASfragmentImpl_(ASfragmentImpl_fragmentCommandParamsBuilder *self, ASfragmentImpl *outer$) {
  ASViewGroupImpl_ViewGroupCommandParamsBuilder_init(self);
}

ASfragmentImpl_fragmentCommandParamsBuilder *new_ASfragmentImpl_fragmentCommandParamsBuilder_initWithASfragmentImpl_(ASfragmentImpl *outer$) {
  J2OBJC_NEW_IMPL(ASfragmentImpl_fragmentCommandParamsBuilder, initWithASfragmentImpl_, outer$)
}

ASfragmentImpl_fragmentCommandParamsBuilder *create_ASfragmentImpl_fragmentCommandParamsBuilder_initWithASfragmentImpl_(ASfragmentImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASfragmentImpl_fragmentCommandParamsBuilder, initWithASfragmentImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASfragmentImpl_fragmentCommandParamsBuilder)

@implementation ASfragmentImpl_MyFragmentFactory

- (instancetype)initWithASfragmentImpl:(ASfragmentImpl *)outer$ {
  ASfragmentImpl_MyFragmentFactory_initWithASfragmentImpl_(self, outer$);
  return self;
}

- (ASGenericFragment *)getFragment {
  ASfragmentImpl_MyGenericFragment *myGenericFragment = new_ASfragmentImpl_MyGenericFragment_initWithASfragmentImpl_(this$0_);
  [myGenericFragment setParentFragmentWithASIFragment:[this$0_ getFragment] withBoolean:false];
  return myGenericFragment;
}

- (void)__javaClone:(ASfragmentImpl_MyFragmentFactory *)original {
  [super __javaClone:original];
  JreRelease(this$0_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "LASGenericFragment;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASfragmentImpl:);
  methods[1].selector = @selector(getFragment);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASfragmentImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASfragmentImpl;" };
  static const J2ObjcClassInfo _ASfragmentImpl_MyFragmentFactory = { "MyFragmentFactory", "com.ashera.layout", ptrTable, methods, fields, 7, 0x12, 2, 1, 0, -1, -1, -1, -1 };
  return &_ASfragmentImpl_MyFragmentFactory;
}

@end

void ASfragmentImpl_MyFragmentFactory_initWithASfragmentImpl_(ASfragmentImpl_MyFragmentFactory *self, ASfragmentImpl *outer$) {
  self->this$0_ = outer$;
  ASUINavigatorImpl_FragmentFactory_init(self);
}

ASfragmentImpl_MyFragmentFactory *new_ASfragmentImpl_MyFragmentFactory_initWithASfragmentImpl_(ASfragmentImpl *outer$) {
  J2OBJC_NEW_IMPL(ASfragmentImpl_MyFragmentFactory, initWithASfragmentImpl_, outer$)
}

ASfragmentImpl_MyFragmentFactory *create_ASfragmentImpl_MyFragmentFactory_initWithASfragmentImpl_(ASfragmentImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASfragmentImpl_MyFragmentFactory, initWithASfragmentImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASfragmentImpl_MyFragmentFactory)

@implementation ASfragmentImpl_MyGenericFragment

- (instancetype)initWithASfragmentImpl:(ASfragmentImpl *)outer$ {
  ASfragmentImpl_MyGenericFragment_initWithASfragmentImpl_(self, outer$);
  return self;
}

- (void)createChildFragments {
  ASfragmentImpl_makeCurrentFragmentActive(this$0_);
  [super executePendingTransactions];
}

- (void)__javaClone:(ASfragmentImpl_MyGenericFragment *)original {
  [super __javaClone:original];
  JreRelease(this$0_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASfragmentImpl:);
  methods[1].selector = @selector(createChildFragments);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASfragmentImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASfragmentImpl;" };
  static const J2ObjcClassInfo _ASfragmentImpl_MyGenericFragment = { "MyGenericFragment", "com.ashera.layout", ptrTable, methods, fields, 7, 0x12, 2, 1, 0, -1, -1, -1, -1 };
  return &_ASfragmentImpl_MyGenericFragment;
}

@end

void ASfragmentImpl_MyGenericFragment_initWithASfragmentImpl_(ASfragmentImpl_MyGenericFragment *self, ASfragmentImpl *outer$) {
  self->this$0_ = outer$;
  ASGenericFragment_init(self);
}

ASfragmentImpl_MyGenericFragment *new_ASfragmentImpl_MyGenericFragment_initWithASfragmentImpl_(ASfragmentImpl *outer$) {
  J2OBJC_NEW_IMPL(ASfragmentImpl_MyGenericFragment, initWithASfragmentImpl_, outer$)
}

ASfragmentImpl_MyGenericFragment *create_ASfragmentImpl_MyGenericFragment_initWithASfragmentImpl_(ASfragmentImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASfragmentImpl_MyGenericFragment, initWithASfragmentImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASfragmentImpl_MyGenericFragment)

@implementation ASfragmentImpl_$Lambda$1

- (void)run {
  ASViewGroupImpl_nativeRemoveViewWithASIWidget_(val$widget_);
}

@end

void ASfragmentImpl_$Lambda$1_initWithASIWidget_(ASfragmentImpl_$Lambda$1 *self, id<ASIWidget> capture$0) {
  self->val$widget_ = capture$0;
  NSObject_init(self);
}

ASfragmentImpl_$Lambda$1 *new_ASfragmentImpl_$Lambda$1_initWithASIWidget_(id<ASIWidget> capture$0) {
  J2OBJC_NEW_IMPL(ASfragmentImpl_$Lambda$1, initWithASIWidget_, capture$0)
}

ASfragmentImpl_$Lambda$1 *create_ASfragmentImpl_$Lambda$1_initWithASIWidget_(id<ASIWidget> capture$0) {
  J2OBJC_CREATE_IMPL(ASfragmentImpl_$Lambda$1, initWithASIWidget_, capture$0)
}

@implementation ASfragmentImpl_$Lambda$2

- (void)run {
  [this$0_ addChildViewControllerWithId:this$0_->navController_ withId:[((id<ASIWidget>) nil_chk([((id<ASIFragment>) nil_chk([this$0_ getFragment])) getRootWidget])) asNativeWidget]];
}

@end

void ASfragmentImpl_$Lambda$2_initWithASfragmentImpl_(ASfragmentImpl_$Lambda$2 *self, ASfragmentImpl *outer$) {
  self->this$0_ = outer$;
  NSObject_init(self);
}

ASfragmentImpl_$Lambda$2 *new_ASfragmentImpl_$Lambda$2_initWithASfragmentImpl_(ASfragmentImpl *outer$) {
  J2OBJC_NEW_IMPL(ASfragmentImpl_$Lambda$2, initWithASfragmentImpl_, outer$)
}

ASfragmentImpl_$Lambda$2 *create_ASfragmentImpl_$Lambda$2_initWithASfragmentImpl_(ASfragmentImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASfragmentImpl_$Lambda$2, initWithASfragmentImpl_, outer$)
}

@implementation ASfragmentImpl_$Lambda$3

- (void)run {
  [((id<ASIFragment>) nil_chk([this$0_ getFragment])) remeasure];
}

@end

void ASfragmentImpl_$Lambda$3_initWithASfragmentImpl_(ASfragmentImpl_$Lambda$3 *self, ASfragmentImpl *outer$) {
  self->this$0_ = outer$;
  NSObject_init(self);
}

ASfragmentImpl_$Lambda$3 *new_ASfragmentImpl_$Lambda$3_initWithASfragmentImpl_(ASfragmentImpl *outer$) {
  J2OBJC_NEW_IMPL(ASfragmentImpl_$Lambda$3, initWithASfragmentImpl_, outer$)
}

ASfragmentImpl_$Lambda$3 *create_ASfragmentImpl_$Lambda$3_initWithASfragmentImpl_(ASfragmentImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASfragmentImpl_$Lambda$3, initWithASfragmentImpl_, outer$)
}
