//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-ios-widgets\ios_widget_library\src\main\java\com\ashera\layout\SpinnerImpl.java
//

#import <Foundation/Foundation.h>
#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_SpinnerImpl")
#ifdef RESTRICT_SpinnerImpl
#define INCLUDE_ALL_SpinnerImpl 0
#else
#define INCLUDE_ALL_SpinnerImpl 1
#endif
#undef RESTRICT_SpinnerImpl

#if !defined (ASSpinnerImpl_) && (INCLUDE_ALL_SpinnerImpl || defined(INCLUDE_ASSpinnerImpl))
#define ASSpinnerImpl_

#define RESTRICT_BaseHasWidgets 1
#define INCLUDE_ASBaseHasWidgets 1
#include "BaseHasWidgets.h"

#define RESTRICT_ICustomMeasureHeight 1
#define INCLUDE_ASICustomMeasureHeight 1
#include "ICustomMeasureHeight.h"

#define RESTRICT_ICustomMeasureWidth 1
#define INCLUDE_ASICustomMeasureWidth 1
#include "ICustomMeasureWidth.h"

#define RESTRICT_FormElement 1
#define INCLUDE_ASFormElement 1
#include "FormElement.h"

@class ADSpinner;
@class ASLoopParam;
@class ASWidgetAttribute;
@class IOSClass;
@class JavaLangBoolean;
@class JavaLangInteger;
@class NSString;
@protocol ASIFragment;
@protocol ASILifeCycleDecorator;
@protocol ASIWidget;
@protocol JavaUtilMap;

@interface ASSpinnerImpl : ASBaseHasWidgets < ASICustomMeasureHeight, ASICustomMeasureWidth, ASFormElement > {
 @public
  id uiView_;
  ADSpinner *measurableView_;
}
@property id uiView;

#pragma mark Public

- (instancetype)init;

- (instancetype)initWithNSString:(NSString *)localname;

- (instancetype)initWithNSString:(NSString *)groupName
                    withNSString:(NSString *)localname;

- (id)asNativeWidget;

- (id)asWidget;

- (bool)checkIosVersionWithNSString:(NSString *)v;

- (void)createWithASIFragment:(id<ASIFragment>)fragment
              withJavaUtilMap:(id<JavaUtilMap>)params;

- (void)drawableStateChanged;

- (void)focus;

- (id)getAdjustsFontSizeToFitWidth;

- (id)getAllowsEditingTextAttributes;

- (id)getAttributeWithASWidgetAttribute:(ASWidgetAttribute *)key
              withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator;

- (id)getBackground;

- (int32_t)getBorderPadding;

- (id)getChildAttributeWithASIWidget:(id<ASIWidget>)w
               withASWidgetAttribute:(ASWidgetAttribute *)key;

- (id)getClearsOnBeginEditing;

- (id)getClearsOnInsertion;

- (id)getDisabledBackground;

- (id)getIsEditing;

- (int32_t)getLineHeightPadding;

- (id)getMinimumFontSize;

- (id)getPlaceholder;

- (id)getText;

- (id)getTextColor;

- (NSString *)getTextEntered;

- (IOSClass *)getViewClass;

- (void)initialized OBJC_METHOD_FAMILY_NONE;

- (void)invalidate;

- (bool)isViewVisible;

- (void)loadAttributesWithNSString:(NSString *)attributeName;

- (int32_t)measureHeightWithInt:(int32_t)width;

- (int32_t)measureWidth;

- (void)nativeSetEnabledWithBoolean:(bool)value;

- (id<ASIWidget>)newInstance OBJC_METHOD_FAMILY_NONE;

- (void)onRtlPropertiesChangedWithInt:(int32_t)layoutDirection;

- (void)requestLayout;

- (void)resetError;

- (void)setAdjustsFontSizeToFitWidthWithId:(id)nativeWidget
                                    withId:(id)value;

- (void)setAllowsEditingTextAttributesWithId:(id)nativeWidget
                                      withId:(id)value;

- (void)setAttributeWithASWidgetAttribute:(ASWidgetAttribute *)key
                             withNSString:(NSString *)strValue
                                   withId:(id)objValue
                withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator;

- (void)setBackgroundWithId:(id)nativeWidget
                     withId:(id)value;

- (void)setChildAttributeWithASIWidget:(id<ASIWidget>)widget
                 withASWidgetAttribute:(ASWidgetAttribute *)key
                          withNSString:(NSString *)strValue
                                withId:(id)value;

- (void)setClearsOnBeginEditingWithId:(id)nativeWidget
                               withId:(id)value;

- (void)setClearsOnInsertionWithId:(id)nativeWidget
                            withId:(id)value;

- (void)setDisabledBackgroundWithId:(id)nativeWidget
                             withId:(id)value;

- (void)setEnabledWithId:(id)objValue;

- (void)setIdWithNSString:(NSString *)id_;

- (void)setMinimumFontSizeWithId:(id)nativeWidget
                          withId:(id)value;

- (void)setPaddingWithId:(id)objValue;

- (void)setPaddingBottomWithId:(id)objValue;

- (void)setPaddingLeftWithId:(id)objValue;

- (void)setPaddingRightWithId:(id)objValue;

- (void)setPaddingTopWithId:(id)objValue;

- (void)setPlaceholderWithId:(id)nativeWidget
                      withId:(id)value;

- (void)setTextWithId:(id)nativeWidget
               withId:(id)value;

- (void)setTextColorWithId:(id)nativeWidget
                    withId:(id)value;

- (void)setVisibleWithBoolean:(bool)b;

- (void)showErrorWithNSString:(NSString *)message;

#pragma mark Protected

- (void)addItemToParentWithInt:(int32_t)index
                  withNSString:(NSString *)id_
               withASLoopParam:(ASLoopParam *)loopParam;

#pragma mark Package-Private

@end

J2OBJC_STATIC_INIT(ASSpinnerImpl)

J2OBJC_FIELD_SETTER(ASSpinnerImpl, uiView_, id)
J2OBJC_FIELD_SETTER(ASSpinnerImpl, measurableView_, ADSpinner *)

inline NSString *ASSpinnerImpl_get_LOCAL_NAME(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ASSpinnerImpl_LOCAL_NAME;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ASSpinnerImpl, LOCAL_NAME, NSString *)

inline NSString *ASSpinnerImpl_get_GROUP_NAME(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ASSpinnerImpl_GROUP_NAME;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ASSpinnerImpl, GROUP_NAME, NSString *)

FOUNDATION_EXPORT void ASSpinnerImpl_init(ASSpinnerImpl *self);

FOUNDATION_EXPORT ASSpinnerImpl *new_ASSpinnerImpl_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ASSpinnerImpl *create_ASSpinnerImpl_init(void);

FOUNDATION_EXPORT void ASSpinnerImpl_initWithNSString_(ASSpinnerImpl *self, NSString *localname);

FOUNDATION_EXPORT ASSpinnerImpl *new_ASSpinnerImpl_initWithNSString_(NSString *localname) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ASSpinnerImpl *create_ASSpinnerImpl_initWithNSString_(NSString *localname);

FOUNDATION_EXPORT void ASSpinnerImpl_initWithNSString_withNSString_(ASSpinnerImpl *self, NSString *groupName, NSString *localname);

FOUNDATION_EXPORT ASSpinnerImpl *new_ASSpinnerImpl_initWithNSString_withNSString_(NSString *groupName, NSString *localname) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ASSpinnerImpl *create_ASSpinnerImpl_initWithNSString_withNSString_(NSString *groupName, NSString *localname);

J2OBJC_TYPE_LITERAL_HEADER(ASSpinnerImpl)

@compatibility_alias ComAsheraLayoutSpinnerImpl ASSpinnerImpl;


#endif

#if !defined (ASSpinnerImpl_DrawableTintMode_) && (INCLUDE_ALL_SpinnerImpl || defined(INCLUDE_ASSpinnerImpl_DrawableTintMode))
#define ASSpinnerImpl_DrawableTintMode_

#define RESTRICT_AbstractEnumToIntConverter 1
#define INCLUDE_ASAbstractEnumToIntConverter 1
#include "AbstractEnumToIntConverter.h"

@class JavaLangInteger;
@protocol JavaUtilMap;

@interface ASSpinnerImpl_DrawableTintMode : ASAbstractEnumToIntConverter

#pragma mark Public

- (JavaLangInteger *)getDefault;

- (id<JavaUtilMap>)getMapping;

#pragma mark Package-Private

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(ASSpinnerImpl_DrawableTintMode)

FOUNDATION_EXPORT void ASSpinnerImpl_DrawableTintMode_init(ASSpinnerImpl_DrawableTintMode *self);

FOUNDATION_EXPORT ASSpinnerImpl_DrawableTintMode *new_ASSpinnerImpl_DrawableTintMode_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ASSpinnerImpl_DrawableTintMode *create_ASSpinnerImpl_DrawableTintMode_init(void);

J2OBJC_TYPE_LITERAL_HEADER(ASSpinnerImpl_DrawableTintMode)


#endif

#if !defined (ASSpinnerImpl_Font_) && (INCLUDE_ALL_SpinnerImpl || defined(INCLUDE_ASSpinnerImpl_Font))
#define ASSpinnerImpl_Font_

#define RESTRICT_AbstractEnumToIntConverter 1
#define INCLUDE_ASAbstractEnumToIntConverter 1
#include "AbstractEnumToIntConverter.h"

@class JavaLangInteger;
@protocol JavaUtilMap;

@interface ASSpinnerImpl_Font : ASAbstractEnumToIntConverter

#pragma mark Public

- (JavaLangInteger *)getDefault;

- (id<JavaUtilMap>)getMapping;

#pragma mark Package-Private

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(ASSpinnerImpl_Font)

FOUNDATION_EXPORT void ASSpinnerImpl_Font_init(ASSpinnerImpl_Font *self);

FOUNDATION_EXPORT ASSpinnerImpl_Font *new_ASSpinnerImpl_Font_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ASSpinnerImpl_Font *create_ASSpinnerImpl_Font_init(void);

J2OBJC_TYPE_LITERAL_HEADER(ASSpinnerImpl_Font)


#endif

#if !defined (ASSpinnerImpl_TextStyle_) && (INCLUDE_ALL_SpinnerImpl || defined(INCLUDE_ASSpinnerImpl_TextStyle))
#define ASSpinnerImpl_TextStyle_

#define RESTRICT_AbstractBitFlagConverter 1
#define INCLUDE_ASAbstractBitFlagConverter 1
#include "AbstractBitFlagConverter.h"

@class JavaLangInteger;
@protocol JavaUtilMap;

@interface ASSpinnerImpl_TextStyle : ASAbstractBitFlagConverter

#pragma mark Public

- (JavaLangInteger *)getDefault;

- (id<JavaUtilMap>)getMapping;

#pragma mark Package-Private

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(ASSpinnerImpl_TextStyle)

FOUNDATION_EXPORT void ASSpinnerImpl_TextStyle_init(ASSpinnerImpl_TextStyle *self);

FOUNDATION_EXPORT ASSpinnerImpl_TextStyle *new_ASSpinnerImpl_TextStyle_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ASSpinnerImpl_TextStyle *create_ASSpinnerImpl_TextStyle_init(void);

J2OBJC_TYPE_LITERAL_HEADER(ASSpinnerImpl_TextStyle)


#endif

#if !defined (ASSpinnerImpl_SpinnerExt_) && (INCLUDE_ALL_SpinnerImpl || defined(INCLUDE_ASSpinnerImpl_SpinnerExt))
#define ASSpinnerImpl_SpinnerExt_

#define RESTRICT_Spinner 1
#define INCLUDE_ADSpinner 1
#include "Spinner.h"

#define RESTRICT_ILifeCycleDecorator 1
#define INCLUDE_ASILifeCycleDecorator 1
#include "ILifeCycleDecorator.h"

#define RESTRICT_IMaxDimension 1
#define INCLUDE_ASIMaxDimension 1
#include "IMaxDimension.h"

@class ADRect;
@class ADView;
@class ASSpinnerImpl;
@class ASWidgetAttribute;
@class IOSIntArray;
@class IOSObjectArray;
@class JavaLangBoolean;
@class JavaLangInteger;
@class NSString;
@protocol ASIWidget;
@protocol JavaUtilList;

@interface ASSpinnerImpl_SpinnerExt : ADSpinner < ASILifeCycleDecorator, ASIMaxDimension >

#pragma mark Public

- (instancetype)initWithASSpinnerImpl:(ASSpinnerImpl *)outer$;

- (void)drawableStateChanged;

- (void)executeWithNSString:(NSString *)method
          withNSObjectArray:(IOSObjectArray *)canvas;

- (id)getAttributeWithASWidgetAttribute:(ASWidgetAttribute *)widgetAttribute;

- (void)getLocationOnScreenWithIntArray:(IOSIntArray *)appScreenLocation;

- (int32_t)getMaxHeight;

- (int32_t)getMaxWidth;

- (id<JavaUtilList>)getMethods;

- (id<ASIWidget>)getWidget;

- (void)getWindowVisibleDisplayFrameWithADRect:(ADRect *)displayFrame;

- (ADView *)inflateViewWithNSString:(NSString *)layout;

- (void)initialized OBJC_METHOD_FAMILY_NONE;

- (int32_t)nativeMeasureHeightWithId:(id)uiView
                             withInt:(int32_t)width;

- (int32_t)nativeMeasureWidthWithId:(id)uiView;

- (id<ASILifeCycleDecorator>)newInstanceWithASIWidget:(id<ASIWidget>)widget OBJC_METHOD_FAMILY_NONE;

- (void)offsetLeftAndRightWithInt:(int32_t)offset;

- (void)offsetTopAndBottomWithInt:(int32_t)offset;

- (void)onMeasureWithInt:(int32_t)widthMeasureSpec
                 withInt:(int32_t)heightMeasureSpec;

- (void)remeasure;

- (void)removeFromParent;

- (void)setAttributeWithASWidgetAttribute:(ASWidgetAttribute *)widgetAttribute
                             withNSString:(NSString *)strValue
                                   withId:(id)objValue;

- (void)setMaxHeightWithInt:(int32_t)height;

- (void)setMaxWidthWithInt:(int32_t)width;

- (void)setMyAttributeWithNSString:(NSString *)name
                            withId:(id)value;

- (void)setState0WithId:(id)value;

- (void)setState1WithId:(id)value;

- (void)setState2WithId:(id)value;

- (void)setState3WithId:(id)value;

- (void)setState4WithId:(id)value;

- (void)setVisibilityWithInt:(int32_t)visibility;

- (void)state0;

- (void)state1;

- (void)state2;

- (void)state3;

- (void)state4;

- (void)stateNo;

- (void)stateYes;

- (void)updateMeasuredDimensionWithInt:(int32_t)width
                               withInt:(int32_t)height;

#pragma mark Protected

- (void)onLayoutWithBoolean:(bool)changed
                    withInt:(int32_t)l
                    withInt:(int32_t)t
                    withInt:(int32_t)r
                    withInt:(int32_t)b;

// Disallowed inherited constructors, do not use.

- (instancetype)initWithASIWidget:(id<ASIWidget>)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ASSpinnerImpl_SpinnerExt)

FOUNDATION_EXPORT void ASSpinnerImpl_SpinnerExt_initWithASSpinnerImpl_(ASSpinnerImpl_SpinnerExt *self, ASSpinnerImpl *outer$);

FOUNDATION_EXPORT ASSpinnerImpl_SpinnerExt *new_ASSpinnerImpl_SpinnerExt_initWithASSpinnerImpl_(ASSpinnerImpl *outer$) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ASSpinnerImpl_SpinnerExt *create_ASSpinnerImpl_SpinnerExt_initWithASSpinnerImpl_(ASSpinnerImpl *outer$);

J2OBJC_TYPE_LITERAL_HEADER(ASSpinnerImpl_SpinnerExt)


#endif

#if !defined (ASSpinnerImpl_AdapterView_) && (INCLUDE_ALL_SpinnerImpl || defined(INCLUDE_ASSpinnerImpl_AdapterView))
#define ASSpinnerImpl_AdapterView_

@interface ASSpinnerImpl_AdapterView : NSObject

#pragma mark Package-Private

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(ASSpinnerImpl_AdapterView)

FOUNDATION_EXPORT void ASSpinnerImpl_AdapterView_init(ASSpinnerImpl_AdapterView *self);

FOUNDATION_EXPORT ASSpinnerImpl_AdapterView *new_ASSpinnerImpl_AdapterView_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ASSpinnerImpl_AdapterView *create_ASSpinnerImpl_AdapterView_init(void);

J2OBJC_TYPE_LITERAL_HEADER(ASSpinnerImpl_AdapterView)


#endif

#if !defined (ASSpinnerImpl_AdapterView_OnItemSelectedListener_) && (INCLUDE_ALL_SpinnerImpl || defined(INCLUDE_ASSpinnerImpl_AdapterView_OnItemSelectedListener))
#define ASSpinnerImpl_AdapterView_OnItemSelectedListener_

@class ADView;
@class ASSpinnerImpl_AdapterView;
@class JavaLangInteger;
@class JavaLangLong;

@protocol ASSpinnerImpl_AdapterView_OnItemSelectedListener < JavaObject >

- (void)onItemSelectedWithASSpinnerImpl_AdapterView:(ASSpinnerImpl_AdapterView *)parent
                                         withADView:(ADView *)view
                                            withInt:(int32_t)position
                                           withLong:(int64_t)id_;

@end

J2OBJC_EMPTY_STATIC_INIT(ASSpinnerImpl_AdapterView_OnItemSelectedListener)

J2OBJC_TYPE_LITERAL_HEADER(ASSpinnerImpl_AdapterView_OnItemSelectedListener)


#endif

#if !defined (ASSpinnerImpl_PostMeasureHandler_) && (INCLUDE_ALL_SpinnerImpl || defined(INCLUDE_ASSpinnerImpl_PostMeasureHandler))
#define ASSpinnerImpl_PostMeasureHandler_

#define RESTRICT_EventBusHandler 1
#define INCLUDE_ASEventBusHandler 1
#include "EventBusHandler.h"

@class ASSpinnerImpl;
@class NSString;

@interface ASSpinnerImpl_PostMeasureHandler : ASEventBusHandler

#pragma mark Public

- (instancetype)initWithASSpinnerImpl:(ASSpinnerImpl *)outer$
                         withNSString:(NSString *)type;

#pragma mark Protected

- (void)doPerformWithId:(id)payload;

// Disallowed inherited constructors, do not use.

- (instancetype)initWithNSString:(NSString *)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ASSpinnerImpl_PostMeasureHandler)

FOUNDATION_EXPORT void ASSpinnerImpl_PostMeasureHandler_initWithASSpinnerImpl_withNSString_(ASSpinnerImpl_PostMeasureHandler *self, ASSpinnerImpl *outer$, NSString *type);

FOUNDATION_EXPORT ASSpinnerImpl_PostMeasureHandler *new_ASSpinnerImpl_PostMeasureHandler_initWithASSpinnerImpl_withNSString_(ASSpinnerImpl *outer$, NSString *type) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ASSpinnerImpl_PostMeasureHandler *create_ASSpinnerImpl_PostMeasureHandler_initWithASSpinnerImpl_withNSString_(ASSpinnerImpl *outer$, NSString *type);

J2OBJC_TYPE_LITERAL_HEADER(ASSpinnerImpl_PostMeasureHandler)


#endif

#pragma pop_macro("INCLUDE_ALL_SpinnerImpl")
