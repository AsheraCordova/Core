//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-ios-widgets\ios_widget_library\src\main\java\com\ashera\layout\SpinnerImpl.java
//

#include "AbstractBitFlagConverter.h"
#include "AbstractEnumToIntConverter.h"
#include "BaseHasWidgets.h"
#include "BaseMeasurableView.h"
#include "Color.h"
#include "ColorStateList.h"
#include "CommonConverters.h"
#include "ConverterFactory.h"
#include "Drawable.h"
#include "Event.h"
#include "EventBus.h"
#include "EventBusHandler.h"
#include "EventCommand.h"
#include "EventCommandFactory.h"
#include "EventExpressionParser.h"
#include "FontDescriptor.h"
#include "FormElement.h"
#include "GravityConverter.h"
#include "HasWidgets.h"
#include "IActivity.h"
#include "IConverter.h"
#include "IFragment.h"
#include "ILifeCycleDecorator.h"
#include "IListener.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "IWidget.h"
#include "IWidgetLifeCycleListener.h"
#include "J2ObjC_source.h"
#include "Layout.h"
#include "LayoutNativeVars.h"
#include "LoopParam.h"
#include "MeasureEvent.h"
#include "ModelExpressionParser.h"
#include "ModelScope.h"
#include "OnLayoutEvent.h"
#include "PluginInvoker.h"
#include "Rect.h"
#include "Spinner.h"
#include "SpinnerImpl.h"
#include "TextDirectionHeuristic.h"
#include "View.h"
#include "ViewGroupModelImpl.h"
#include "ViewImpl.h"
#include "WidgetAttribute.h"
#include "WidgetFactory.h"
#include "java/lang/Boolean.h"
#include "java/lang/Float.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/Math.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/ArrayList.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"

#include "java/lang/Integer.h"
#include "java/lang/Float.h"
#include "java/lang/Boolean.h"
#include <UIKit/UIKit.h>
#include "HasLifeCycleDecorators.h"

#include "ASUITextField.h"

@protocol JavaUtilList;
@protocol JavaUtilMap;


@interface ASSpinnerImpl () {
 @public
  id<JavaUtilMap> fontDescriptors_;
  ADColorStateList *drawableTint_;
  NSString *modelOptionTextPath_;
  NSString *modelOptionValuePath_;
  id<JavaUtilList> values_;
  id tmpSelectedValue_;
  id<JavaUtilList> entries_;
  id<ASSpinnerImpl_AdapterView_OnItemSelectedListener> onItemSelectedListener_;
  ASSpinnerImpl_PostMeasureHandler *postMeasureHandler_;
  NSString *POST_MEASURE_EVENT_;
}

- (void)setWidgetOnNativeClass;

- (void)setGravityWithId:(id)objValue;

- (void)updateTextAlignment;

- (id)getGravity;

- (void)setDrawableIconSizeWithId:(id)objValue;

- (void)setTypeFaceWithId:(id)objValue
             withNSString:(NSString *)strValue;

- (void)setFontFamilyWithId:(id)objValue
               withNSString:(NSString *)strValue;

- (void)setTextStyleWithId:(id)objValue;

- (jint)nativeGetFontSize;

- (jint)nativeGetFontStyle;

- (void)nativeSetCustomFontWithInt:(jint)height
              withASFontDescriptor:(ASFontDescriptor *)fontDescriptor;

- (void)nativeSetFontStyleWithInt:(jint)style;

- (id)getPaddingTop;

- (id)getPaddingEnd;

- (id)getPaddingStart;

- (id)getPaddingLeft;

- (id)getPaddingRight;

- (id)getPaddingBottom;

- (void)setPaddingVerticalWithId:(id)objValue;

- (void)setPaddingHorizontalWithId:(id)objValue;

- (void)setPaddingEndWithId:(id)objValue;

- (void)setPaddingStartWithId:(id)objValue;

- (id)getTextSize;

- (void)setMyTextSizeWithId:(id)objValue;

- (void)nativeSetTextSizeWithInt:(jint)value;

- (void)setVerticalAligmentCenter;

- (void)setVerticalAligmentBottom;

- (void)setVerticalAligmentTop;

- (void)setHorizontalAligmentCenter;

- (void)setHorizontalAligmentRight;

- (void)setHorizontalAligmentRightInternal;

- (void)setHorizontalAligmentLeft;

- (void)setHorizontalAligmentLeftInternal;

- (jint)getTextAlignment;

- (void)setDrawablePaddingWithId:(id)objValue;

- (void)setDrawableBottomWithId:(id)objValue;

- (void)setDrawableTopWithId:(id)objValue;

- (void)setDrawableRightWithNSString:(NSString *)originalAttr
                              withId:(id)objValue;

- (void)setDrawableRightInternalWithNSString:(NSString *)originalAttr
                                      withId:(id)objValue;

- (void)setDrawableLeftWithNSString:(NSString *)originalAttr
                             withId:(id)objValue;

- (void)setDrawableLeftInternalWithNSString:(NSString *)originalAttr
                                     withId:(id)objValue;

- (jint)getImageHeightWithId:(id)objValue;

- (jint)getImageWidthWithId:(id)objValue;

- (id)getDrawablePadding;

- (void)setDrawableTintModeWithId:(id)value;

- (void)setDrawableTintWithId:(id)objValue;

- (void)setTextColorWithId:(id)objValue;

- (id)getTextColorState;

- (void)drawableStateChangeWithNSString:(NSString *)type
                         withADDrawable:(ADDrawable *)dr;

- (jint)getLineHeight;

- (jint)getBorderWidth;

- (void)setModelOptionTextPathWithId:(id)objValue;

- (void)setModelOptionValuePathWithId:(id)objValue;

- (id)getOptionValueFromLoopParamWithASLoopParam:(ASLoopParam *)loopParam
                                    withNSString:(NSString *)path;

- (void)setValuesWithId:(id)objValue;

- (void)setSelectedValueWithId:(id)objValue;

- (id)getSelectedValue;

- (void)updatePadding;

- (void)nativeSetVerticalAligmentCenter;

- (void)nativeSetVerticalAligmentBottom;

- (void)nativeSetVerticalAligmentTop;

- (void)setHintColorWithId:(id)objValue;

- (void)nativeSetHintColorWithId:(id)value;

- (void)syncPlaceholderLabel;

- (void)becomeFirstResponder;

- (void)setHintTextFormatWithId:(id)objValue;

- (void)nativeCreateWithJavaUtilMap:(id<JavaUtilMap>)params;

- (id)nativeCreateView;

- (NSString *)getSelectedTextWithInt:(jint)selectedIndex;

- (void)triggerOnSelectWithInt:(jint)selectedIndex;

- (void)setOnItemSelectedListenerWithASSpinnerImpl_AdapterView_OnItemSelectedListener:(id<ASSpinnerImpl_AdapterView_OnItemSelectedListener>)onItemSelectedListener;

- (void)setEntriesWithId:(id)objValue;

- (void)setSelectionWithId:(id)objValue;

- (void)nativeSetSelectionWithInt:(jint)selectedIndex;

- (void)setTextColorLinkWithADColorStateList:(ADColorStateList *)linkTextColors;

- (id)getMyText;

- (jint)getSelectedItemPosition;

- (void)setErrorWithId:(id)object;

- (void)triggerChangeOnLoad;

- (void)addTriggerChangeOnLoadListener;

- (void)selectSpinnerIfRequired;

@end

J2OBJC_FIELD_SETTER(ASSpinnerImpl, fontDescriptors_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(ASSpinnerImpl, drawableTint_, ADColorStateList *)
J2OBJC_FIELD_SETTER(ASSpinnerImpl, modelOptionTextPath_, NSString *)
J2OBJC_FIELD_SETTER(ASSpinnerImpl, modelOptionValuePath_, NSString *)
J2OBJC_FIELD_SETTER(ASSpinnerImpl, values_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(ASSpinnerImpl, tmpSelectedValue_, id)
J2OBJC_FIELD_SETTER(ASSpinnerImpl, entries_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(ASSpinnerImpl, onItemSelectedListener_, id<ASSpinnerImpl_AdapterView_OnItemSelectedListener>)
J2OBJC_FIELD_SETTER(ASSpinnerImpl, postMeasureHandler_, ASSpinnerImpl_PostMeasureHandler *)
J2OBJC_FIELD_SETTER(ASSpinnerImpl, POST_MEASURE_EVENT_, NSString *)

inline jint ASSpinnerImpl_get_ITALIC_FONT_TRAIT(void);
inline jint ASSpinnerImpl_set_ITALIC_FONT_TRAIT(jint value);
inline jint *ASSpinnerImpl_getRef_ITALIC_FONT_TRAIT(void);
static jint ASSpinnerImpl_ITALIC_FONT_TRAIT;
J2OBJC_STATIC_FIELD_PRIMITIVE(ASSpinnerImpl, ITALIC_FONT_TRAIT, jint)

inline jint ASSpinnerImpl_get_BOLD_FONT_TRAIT(void);
inline jint ASSpinnerImpl_set_BOLD_FONT_TRAIT(jint value);
inline jint *ASSpinnerImpl_getRef_BOLD_FONT_TRAIT(void);
static jint ASSpinnerImpl_BOLD_FONT_TRAIT;
J2OBJC_STATIC_FIELD_PRIMITIVE(ASSpinnerImpl, BOLD_FONT_TRAIT, jint)

inline jint ASSpinnerImpl_get_NORMAL_FONT_TRAIT(void);
#define ASSpinnerImpl_NORMAL_FONT_TRAIT 0
J2OBJC_STATIC_FIELD_CONSTANT(ASSpinnerImpl, NORMAL_FONT_TRAIT, jint)

inline jint ASSpinnerImpl_get_TEXT_ALIGN_CENTER(void);
#define ASSpinnerImpl_TEXT_ALIGN_CENTER 2
J2OBJC_STATIC_FIELD_CONSTANT(ASSpinnerImpl, TEXT_ALIGN_CENTER, jint)

inline jint ASSpinnerImpl_get_TEXT_ALIGN_LEFT(void);
#define ASSpinnerImpl_TEXT_ALIGN_LEFT 0
J2OBJC_STATIC_FIELD_CONSTANT(ASSpinnerImpl, TEXT_ALIGN_LEFT, jint)

inline jint ASSpinnerImpl_get_TEXT_ALIGN_RIGHT(void);
#define ASSpinnerImpl_TEXT_ALIGN_RIGHT 1
J2OBJC_STATIC_FIELD_CONSTANT(ASSpinnerImpl, TEXT_ALIGN_RIGHT, jint)

__attribute__((unused)) static void ASSpinnerImpl_setWidgetOnNativeClass(ASSpinnerImpl *self);

__attribute__((unused)) static void ASSpinnerImpl_setGravityWithId_(ASSpinnerImpl *self, id objValue);

__attribute__((unused)) static void ASSpinnerImpl_updateTextAlignment(ASSpinnerImpl *self);

__attribute__((unused)) static id ASSpinnerImpl_getGravity(ASSpinnerImpl *self);

__attribute__((unused)) static void ASSpinnerImpl_setDrawableIconSizeWithId_(ASSpinnerImpl *self, id objValue);

__attribute__((unused)) static void ASSpinnerImpl_setTypeFaceWithId_withNSString_(ASSpinnerImpl *self, id objValue, NSString *strValue);

__attribute__((unused)) static void ASSpinnerImpl_setFontFamilyWithId_withNSString_(ASSpinnerImpl *self, id objValue, NSString *strValue);

__attribute__((unused)) static void ASSpinnerImpl_setTextStyleWithId_(ASSpinnerImpl *self, id objValue);

__attribute__((unused)) static jint ASSpinnerImpl_nativeGetFontSize(ASSpinnerImpl *self);

__attribute__((unused)) static jint ASSpinnerImpl_nativeGetFontStyle(ASSpinnerImpl *self);

__attribute__((unused)) static void ASSpinnerImpl_nativeSetCustomFontWithInt_withASFontDescriptor_(ASSpinnerImpl *self, jint height, ASFontDescriptor *fontDescriptor);

__attribute__((unused)) static void ASSpinnerImpl_nativeSetFontStyleWithInt_(ASSpinnerImpl *self, jint style);

__attribute__((unused)) static id ASSpinnerImpl_getPaddingTop(ASSpinnerImpl *self);

__attribute__((unused)) static id ASSpinnerImpl_getPaddingEnd(ASSpinnerImpl *self);

__attribute__((unused)) static id ASSpinnerImpl_getPaddingStart(ASSpinnerImpl *self);

__attribute__((unused)) static id ASSpinnerImpl_getPaddingLeft(ASSpinnerImpl *self);

__attribute__((unused)) static id ASSpinnerImpl_getPaddingRight(ASSpinnerImpl *self);

__attribute__((unused)) static id ASSpinnerImpl_getPaddingBottom(ASSpinnerImpl *self);

__attribute__((unused)) static void ASSpinnerImpl_setPaddingVerticalWithId_(ASSpinnerImpl *self, id objValue);

__attribute__((unused)) static void ASSpinnerImpl_setPaddingHorizontalWithId_(ASSpinnerImpl *self, id objValue);

__attribute__((unused)) static void ASSpinnerImpl_setPaddingEndWithId_(ASSpinnerImpl *self, id objValue);

__attribute__((unused)) static void ASSpinnerImpl_setPaddingStartWithId_(ASSpinnerImpl *self, id objValue);

__attribute__((unused)) static id ASSpinnerImpl_getTextSize(ASSpinnerImpl *self);

__attribute__((unused)) static void ASSpinnerImpl_setMyTextSizeWithId_(ASSpinnerImpl *self, id objValue);

__attribute__((unused)) static void ASSpinnerImpl_nativeSetTextSizeWithInt_(ASSpinnerImpl *self, jint value);

__attribute__((unused)) static void ASSpinnerImpl_setVerticalAligmentCenter(ASSpinnerImpl *self);

__attribute__((unused)) static void ASSpinnerImpl_setVerticalAligmentBottom(ASSpinnerImpl *self);

__attribute__((unused)) static void ASSpinnerImpl_setVerticalAligmentTop(ASSpinnerImpl *self);

__attribute__((unused)) static void ASSpinnerImpl_setHorizontalAligmentCenter(ASSpinnerImpl *self);

__attribute__((unused)) static void ASSpinnerImpl_setHorizontalAligmentRight(ASSpinnerImpl *self);

__attribute__((unused)) static void ASSpinnerImpl_setHorizontalAligmentRightInternal(ASSpinnerImpl *self);

__attribute__((unused)) static void ASSpinnerImpl_setHorizontalAligmentLeft(ASSpinnerImpl *self);

__attribute__((unused)) static void ASSpinnerImpl_setHorizontalAligmentLeftInternal(ASSpinnerImpl *self);

__attribute__((unused)) static jint ASSpinnerImpl_getTextAlignment(ASSpinnerImpl *self);

__attribute__((unused)) static void ASSpinnerImpl_setDrawablePaddingWithId_(ASSpinnerImpl *self, id objValue);

__attribute__((unused)) static void ASSpinnerImpl_setDrawableBottomWithId_(ASSpinnerImpl *self, id objValue);

__attribute__((unused)) static void ASSpinnerImpl_setDrawableTopWithId_(ASSpinnerImpl *self, id objValue);

__attribute__((unused)) static void ASSpinnerImpl_setDrawableRightWithNSString_withId_(ASSpinnerImpl *self, NSString *originalAttr, id objValue);

__attribute__((unused)) static void ASSpinnerImpl_setDrawableRightInternalWithNSString_withId_(ASSpinnerImpl *self, NSString *originalAttr, id objValue);

__attribute__((unused)) static void ASSpinnerImpl_setDrawableLeftWithNSString_withId_(ASSpinnerImpl *self, NSString *originalAttr, id objValue);

__attribute__((unused)) static void ASSpinnerImpl_setDrawableLeftInternalWithNSString_withId_(ASSpinnerImpl *self, NSString *originalAttr, id objValue);

__attribute__((unused)) static jint ASSpinnerImpl_getImageHeightWithId_(ASSpinnerImpl *self, id objValue);

__attribute__((unused)) static jint ASSpinnerImpl_getImageWidthWithId_(ASSpinnerImpl *self, id objValue);

__attribute__((unused)) static id ASSpinnerImpl_getDrawablePadding(ASSpinnerImpl *self);

__attribute__((unused)) static void ASSpinnerImpl_setDrawableTintModeWithId_(ASSpinnerImpl *self, id value);

__attribute__((unused)) static void ASSpinnerImpl_setDrawableTintWithId_(ASSpinnerImpl *self, id objValue);

__attribute__((unused)) static void ASSpinnerImpl_setTextColorWithId_(ASSpinnerImpl *self, id objValue);

__attribute__((unused)) static id ASSpinnerImpl_getTextColorState(ASSpinnerImpl *self);

__attribute__((unused)) static void ASSpinnerImpl_drawableStateChangeWithNSString_withADDrawable_(ASSpinnerImpl *self, NSString *type, ADDrawable *dr);

__attribute__((unused)) static jint ASSpinnerImpl_getLineHeight(ASSpinnerImpl *self);

__attribute__((unused)) static jint ASSpinnerImpl_getBorderWidth(ASSpinnerImpl *self);

__attribute__((unused)) static void ASSpinnerImpl_setModelOptionTextPathWithId_(ASSpinnerImpl *self, id objValue);

__attribute__((unused)) static void ASSpinnerImpl_setModelOptionValuePathWithId_(ASSpinnerImpl *self, id objValue);

__attribute__((unused)) static id ASSpinnerImpl_getOptionValueFromLoopParamWithASLoopParam_withNSString_(ASSpinnerImpl *self, ASLoopParam *loopParam, NSString *path);

__attribute__((unused)) static void ASSpinnerImpl_setValuesWithId_(ASSpinnerImpl *self, id objValue);

__attribute__((unused)) static void ASSpinnerImpl_setSelectedValueWithId_(ASSpinnerImpl *self, id objValue);

__attribute__((unused)) static id ASSpinnerImpl_getSelectedValue(ASSpinnerImpl *self);

__attribute__((unused)) static void ASSpinnerImpl_updatePadding(ASSpinnerImpl *self);

__attribute__((unused)) static void ASSpinnerImpl_nativeSetVerticalAligmentCenter(ASSpinnerImpl *self);

__attribute__((unused)) static void ASSpinnerImpl_nativeSetVerticalAligmentBottom(ASSpinnerImpl *self);

__attribute__((unused)) static void ASSpinnerImpl_nativeSetVerticalAligmentTop(ASSpinnerImpl *self);

__attribute__((unused)) static void ASSpinnerImpl_setHintColorWithId_(ASSpinnerImpl *self, id objValue);

__attribute__((unused)) static void ASSpinnerImpl_nativeSetHintColorWithId_(ASSpinnerImpl *self, id value);

__attribute__((unused)) static void ASSpinnerImpl_syncPlaceholderLabel(ASSpinnerImpl *self);

__attribute__((unused)) static void ASSpinnerImpl_becomeFirstResponder(ASSpinnerImpl *self);

__attribute__((unused)) static void ASSpinnerImpl_setHintTextFormatWithId_(ASSpinnerImpl *self, id objValue);

__attribute__((unused)) static void ASSpinnerImpl_nativeCreateWithJavaUtilMap_(ASSpinnerImpl *self, id<JavaUtilMap> params);

__attribute__((unused)) static id ASSpinnerImpl_nativeCreateView(ASSpinnerImpl *self);

__attribute__((unused)) static NSString *ASSpinnerImpl_getSelectedTextWithInt_(ASSpinnerImpl *self, jint selectedIndex);

__attribute__((unused)) static void ASSpinnerImpl_triggerOnSelectWithInt_(ASSpinnerImpl *self, jint selectedIndex);

__attribute__((unused)) static void ASSpinnerImpl_setOnItemSelectedListenerWithASSpinnerImpl_AdapterView_OnItemSelectedListener_(ASSpinnerImpl *self, id<ASSpinnerImpl_AdapterView_OnItemSelectedListener> onItemSelectedListener);

__attribute__((unused)) static void ASSpinnerImpl_setEntriesWithId_(ASSpinnerImpl *self, id objValue);

__attribute__((unused)) static void ASSpinnerImpl_setSelectionWithId_(ASSpinnerImpl *self, id objValue);

__attribute__((unused)) static void ASSpinnerImpl_nativeSetSelectionWithInt_(ASSpinnerImpl *self, jint selectedIndex);

__attribute__((unused)) static void ASSpinnerImpl_setTextColorLinkWithADColorStateList_(ASSpinnerImpl *self, ADColorStateList *linkTextColors);

__attribute__((unused)) static id ASSpinnerImpl_getMyText(ASSpinnerImpl *self);

__attribute__((unused)) static jint ASSpinnerImpl_getSelectedItemPosition(ASSpinnerImpl *self);

__attribute__((unused)) static void ASSpinnerImpl_setErrorWithId_(ASSpinnerImpl *self, id object);

__attribute__((unused)) static void ASSpinnerImpl_triggerChangeOnLoad(ASSpinnerImpl *self);

__attribute__((unused)) static void ASSpinnerImpl_addTriggerChangeOnLoadListener(ASSpinnerImpl *self);

__attribute__((unused)) static void ASSpinnerImpl_selectSpinnerIfRequired(ASSpinnerImpl *self);

@interface ASSpinnerImpl_DrawableTintMode () {
 @public
  id<JavaUtilMap> mapping_;
}

@end

J2OBJC_FIELD_SETTER(ASSpinnerImpl_DrawableTintMode, mapping_, id<JavaUtilMap>)

@interface ASSpinnerImpl_Font () {
 @public
  id<JavaUtilMap> mapping_;
}

@end

J2OBJC_FIELD_SETTER(ASSpinnerImpl_Font, mapping_, id<JavaUtilMap>)

@interface ASSpinnerImpl_TextStyle () {
 @public
  id<JavaUtilMap> mapping_;
}

@end

J2OBJC_FIELD_SETTER(ASSpinnerImpl_TextStyle, mapping_, id<JavaUtilMap>)

@interface ASSpinnerImpl_SpinnerExt () {
 @public
  __unsafe_unretained ASSpinnerImpl *this$0_;
  ASMeasureEvent *measureFinished_;
  ASOnLayoutEvent *onLayoutEvent_;
  id<JavaUtilList> overlays_;
  jint mMaxWidth_SpinnerExt_;
  jint mMaxHeight_;
  id<JavaUtilMap> templates_;
}

@end

J2OBJC_FIELD_SETTER(ASSpinnerImpl_SpinnerExt, measureFinished_, ASMeasureEvent *)
J2OBJC_FIELD_SETTER(ASSpinnerImpl_SpinnerExt, onLayoutEvent_, ASOnLayoutEvent *)
J2OBJC_FIELD_SETTER(ASSpinnerImpl_SpinnerExt, overlays_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(ASSpinnerImpl_SpinnerExt, templates_, id<JavaUtilMap>)

@interface ASSpinnerImpl_AdapterView_OnItemSelectedListener : NSObject

@end

@interface ASSpinnerImpl_OnItemSelectedListener : NSObject < ASSpinnerImpl_AdapterView_OnItemSelectedListener, ASIListener > {
 @public
  id<ASIWidget> w_;
  ADView *view_;
  NSString *strValue_;
  NSString *action_;
}

- (NSString *)getAction;

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue;

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue
                     withNSString:(NSString *)action;

- (void)onItemSelectedWithASSpinnerImpl_AdapterView:(ASSpinnerImpl_AdapterView *)parent
                                         withADView:(ADView *)view
                                            withInt:(jint)position
                                           withLong:(jlong)id_;

- (id<JavaUtilMap>)getOnItemSelectedEventObjWithASSpinnerImpl_AdapterView:(ASSpinnerImpl_AdapterView *)parent
                                                               withADView:(ADView *)view
                                                                  withInt:(jint)position
                                                                 withLong:(jlong)id_;

- (void)onNothingSelectedWithASSpinnerImpl_AdapterView:(ASSpinnerImpl_AdapterView *)parent;

- (id<JavaUtilMap>)getOnNothingSelectedEventObjWithASSpinnerImpl_AdapterView:(ASSpinnerImpl_AdapterView *)parent;

@end

J2OBJC_EMPTY_STATIC_INIT(ASSpinnerImpl_OnItemSelectedListener)

J2OBJC_FIELD_SETTER(ASSpinnerImpl_OnItemSelectedListener, w_, id<ASIWidget>)
J2OBJC_FIELD_SETTER(ASSpinnerImpl_OnItemSelectedListener, view_, ADView *)
J2OBJC_FIELD_SETTER(ASSpinnerImpl_OnItemSelectedListener, strValue_, NSString *)
J2OBJC_FIELD_SETTER(ASSpinnerImpl_OnItemSelectedListener, action_, NSString *)

__attribute__((unused)) static void ASSpinnerImpl_OnItemSelectedListener_initWithASIWidget_withNSString_(ASSpinnerImpl_OnItemSelectedListener *self, id<ASIWidget> w, NSString *strValue);

__attribute__((unused)) static ASSpinnerImpl_OnItemSelectedListener *new_ASSpinnerImpl_OnItemSelectedListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASSpinnerImpl_OnItemSelectedListener *create_ASSpinnerImpl_OnItemSelectedListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue);

__attribute__((unused)) static void ASSpinnerImpl_OnItemSelectedListener_initWithASIWidget_withNSString_withNSString_(ASSpinnerImpl_OnItemSelectedListener *self, id<ASIWidget> w, NSString *strValue, NSString *action);

__attribute__((unused)) static ASSpinnerImpl_OnItemSelectedListener *new_ASSpinnerImpl_OnItemSelectedListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASSpinnerImpl_OnItemSelectedListener *create_ASSpinnerImpl_OnItemSelectedListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action);

J2OBJC_TYPE_LITERAL_HEADER(ASSpinnerImpl_OnItemSelectedListener)

@interface ASSpinnerImpl_PostMeasureHandler () {
 @public
  __unsafe_unretained ASSpinnerImpl *this$0_;
}

@end

J2OBJC_INITIALIZED_DEFN(ASSpinnerImpl)

NSString *ASSpinnerImpl_LOCAL_NAME = @"Spinner";
NSString *ASSpinnerImpl_GROUP_NAME = @"Spinner";

@implementation ASSpinnerImpl

@synthesize uiView = uiView_;

- (void)loadAttributesWithNSString:(NSString *)attributeName {
  ASViewGroupModelImpl_register__WithNSString_(attributeName);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosText"])) withTypeWithNSString:@"resourcestring"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosPlaceholder"])) withTypeWithNSString:@"resourcestring"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"hint"])) withTypeWithNSString:@"resourcestring"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosTextColor"])) withTypeWithNSString:@"color"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosAdjustsFontSizeToFitWidth"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosMinimumFontSize"])) withTypeWithNSString:@"float"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosIsEditing"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosClearsOnBeginEditing"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosClearsOnInsertion"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosAllowsEditingTextAttributes"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosBackground"])) withTypeWithNSString:@"image"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosDisabledBackground"])) withTypeWithNSString:@"image"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"entries"])) withTypeWithNSString:@"array"])) withArrayTypeWithNSString:@"resourcestring"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"onItemSelected"])) withTypeWithNSString:@"string"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"modelOptionTextPath"])) withTypeWithNSString:@"string"])) withOrderWithInt:-1]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"modelOptionValuePath"])) withTypeWithNSString:@"string"])) withOrderWithInt:-1]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"values"])) withTypeWithNSString:@"array"])) withArrayTypeWithNSString:@"resourcestring"])) withOrderWithInt:-1]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"selectedValue"])) withTypeWithNSString:@"object"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"hintTextFormat"])) withTypeWithNSString:@"resourcestring"])) withOrderWithInt:-1]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"padding"])) withTypeWithNSString:@"dimension"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"paddingBottom"])) withTypeWithNSString:@"dimension"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"paddingRight"])) withTypeWithNSString:@"dimension"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"paddingLeft"])) withTypeWithNSString:@"dimension"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"paddingStart"])) withTypeWithNSString:@"dimension"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"paddingEnd"])) withTypeWithNSString:@"dimension"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"paddingTop"])) withTypeWithNSString:@"dimension"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"paddingHorizontal"])) withTypeWithNSString:@"dimension"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"paddingVertical"])) withTypeWithNSString:@"dimension"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"drawableStart"])) withTypeWithNSString:@"drawable"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT_N_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"drawableEnd"])) withTypeWithNSString:@"drawable"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT_N_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"drawableTop"])) withTypeWithNSString:@"drawable"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT_N_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"drawableBottom"])) withTypeWithNSString:@"drawable"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT_N_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"drawablePadding"])) withTypeWithNSString:@"dimension"])) withOrderWithInt:1])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"drawableTint"])) withTypeWithNSString:@"colorstate"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_INVALIDATE]);
  ASConverterFactory_register__WithNSString_withASIConverter_(@"Spinner.drawableTintMode", new_ASSpinnerImpl_DrawableTintMode_init());
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"drawableTintMode"])) withTypeWithNSString:@"Spinner.drawableTintMode"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"drawableIconSize"])) withTypeWithNSString:@"dimension"])) withOrderWithInt:-1])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"editable"])) withTypeWithNSString:@"boolean"]);
  ASConverterFactory_register__WithNSString_withASIConverter_(@"Spinner.font", new_ASSpinnerImpl_Font_init());
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"typeface"])) withTypeWithNSString:@"Spinner.font"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASConverterFactory_register__WithNSString_withASIConverter_(@"Spinner.textStyle", new_ASSpinnerImpl_TextStyle_init());
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"textStyle"])) withTypeWithNSString:@"Spinner.textStyle"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"fontFamily"])) withTypeWithNSString:@"font"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"textColor"])) withTypeWithNSString:@"colorstate"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"enabled"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"selection"])) withTypeWithNSString:@"int"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"gravity"])) withTypeWithNSString:@"gravity"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"textSize"])) withTypeWithNSString:@"dimensionsp"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"textColorHint"])) withTypeWithNSString:@"colorstate"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT_N_INVALIDATE]);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASSpinnerImpl_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithNSString:(NSString *)localname {
  ASSpinnerImpl_initWithNSString_(self, localname);
  return self;
}

- (instancetype)initWithNSString:(NSString *)groupName
                    withNSString:(NSString *)localname {
  ASSpinnerImpl_initWithNSString_withNSString_(self, groupName, localname);
  return self;
}

- (IOSClass *)getViewClass {
  return ASSpinnerImpl_SpinnerExt_class_();
}

- (id<ASIWidget>)newInstance {
  return new_ASSpinnerImpl_initWithNSString_withNSString_(groupName_, localName_);
}

- (void)createWithASIFragment:(id<ASIFragment>)fragment
              withJavaUtilMap:(id<JavaUtilMap>)params {
  [super createWithASIFragment:fragment withJavaUtilMap:params];
  measurableView_ = new_ASSpinnerImpl_SpinnerExt_initWithASSpinnerImpl_(self);
  ASSpinnerImpl_nativeCreateWithJavaUtilMap_(self, params);
  ASViewImpl_registerCommandConveterWithASIWidget_(self);
  ASSpinnerImpl_setWidgetOnNativeClass(self);
}

- (void)setWidgetOnNativeClass {
  ASSpinnerImpl_setWidgetOnNativeClass(self);
}

- (void)setAttributeWithASWidgetAttribute:(ASWidgetAttribute *)key
                             withNSString:(NSString *)strValue
                                   withId:(id)objValue
                withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  id nativeWidget = [self asNativeWidget];
  ASViewGroupModelImpl_setAttributeWithASIWidget_withASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(self, key, strValue, objValue, decorator);
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"iosText", @"hint", @"iosPlaceholder", @"iosTextColor", @"iosAdjustsFontSizeToFitWidth", @"iosMinimumFontSize", @"iosIsEditing", @"iosClearsOnBeginEditing", @"iosClearsOnInsertion", @"iosAllowsEditingTextAttributes", @"iosBackground", @"iosDisabledBackground", @"entries", @"onItemSelected", @"modelOptionTextPath", @"modelOptionValuePath", @"values", @"selectedValue", @"hintTextFormat", @"padding", @"paddingBottom", @"paddingRight", @"paddingLeft", @"paddingStart", @"paddingEnd", @"paddingTop", @"paddingHorizontal", @"paddingVertical", @"drawableStart", @"drawableEnd", @"drawableTop", @"drawableBottom", @"drawablePadding", @"drawableTint", @"drawableTintMode", @"drawableIconSize", @"editable", @"typeface", @"textStyle", @"fontFamily", @"textColor", @"enabled", @"selection", @"gravity", @"textSize", @"textColorHint" }, 46)) {
    case 0:
    {
      [self setTextWithId:nativeWidget withId:objValue];
    }
    break;
    case 1:
    case 2:
    {
      [self setPlaceholderWithId:nativeWidget withId:objValue];
    }
    break;
    case 3:
    {
      [self setTextColorWithId:nativeWidget withId:objValue];
    }
    break;
    case 4:
    {
      [self setAdjustsFontSizeToFitWidthWithId:nativeWidget withId:objValue];
    }
    break;
    case 5:
    {
      [self setMinimumFontSizeWithId:nativeWidget withId:objValue];
    }
    break;
    case 6:
    {
    }
    break;
    case 7:
    {
      [self setClearsOnBeginEditingWithId:nativeWidget withId:objValue];
    }
    break;
    case 8:
    {
      [self setClearsOnInsertionWithId:nativeWidget withId:objValue];
    }
    break;
    case 9:
    {
      [self setAllowsEditingTextAttributesWithId:nativeWidget withId:objValue];
    }
    break;
    case 10:
    {
      [self setBackgroundWithId:nativeWidget withId:objValue];
    }
    break;
    case 11:
    {
      [self setDisabledBackgroundWithId:nativeWidget withId:objValue];
    }
    break;
    case 12:
    {
      ASSpinnerImpl_setEntriesWithId_(self, objValue);
    }
    break;
    case 13:
    {
      if ([objValue isKindOfClass:[NSString class]]) {
        ASSpinnerImpl_setOnItemSelectedListenerWithASSpinnerImpl_AdapterView_OnItemSelectedListener_(self, new_ASSpinnerImpl_OnItemSelectedListener_initWithASIWidget_withNSString_withNSString_(self, strValue, @"onItemSelected"));
      }
      else {
        ASSpinnerImpl_setOnItemSelectedListenerWithASSpinnerImpl_AdapterView_OnItemSelectedListener_(self, (id<ASSpinnerImpl_AdapterView_OnItemSelectedListener>) cast_check(objValue, ASSpinnerImpl_AdapterView_OnItemSelectedListener_class_()));
      }
    }
    break;
    case 14:
    {
      ASSpinnerImpl_setModelOptionTextPathWithId_(self, objValue);
    }
    break;
    case 15:
    {
      ASSpinnerImpl_setModelOptionValuePathWithId_(self, objValue);
    }
    break;
    case 16:
    {
      ASSpinnerImpl_setValuesWithId_(self, objValue);
    }
    break;
    case 17:
    {
      ASSpinnerImpl_setSelectedValueWithId_(self, objValue);
    }
    break;
    case 18:
    {
      ASSpinnerImpl_setHintTextFormatWithId_(self, objValue);
    }
    break;
    case 19:
    {
      [self setPaddingWithId:objValue];
    }
    break;
    case 20:
    {
      [self setPaddingBottomWithId:objValue];
    }
    break;
    case 21:
    {
      [self setPaddingRightWithId:objValue];
    }
    break;
    case 22:
    {
      [self setPaddingLeftWithId:objValue];
    }
    break;
    case 23:
    {
      ASSpinnerImpl_setPaddingStartWithId_(self, objValue);
    }
    break;
    case 24:
    {
      ASSpinnerImpl_setPaddingEndWithId_(self, objValue);
    }
    break;
    case 25:
    {
      [self setPaddingTopWithId:objValue];
    }
    break;
    case 26:
    {
      ASSpinnerImpl_setPaddingHorizontalWithId_(self, objValue);
    }
    break;
    case 27:
    {
      ASSpinnerImpl_setPaddingVerticalWithId_(self, objValue);
    }
    break;
    case 28:
    {
      ASSpinnerImpl_setDrawableLeftWithNSString_withId_(self, @"drawableStart", objValue);
    }
    break;
    case 29:
    {
      ASSpinnerImpl_setDrawableRightWithNSString_withId_(self, @"drawableEnd", objValue);
    }
    break;
    case 30:
    {
      ASSpinnerImpl_setDrawableTopWithId_(self, objValue);
    }
    break;
    case 31:
    {
      ASSpinnerImpl_setDrawableBottomWithId_(self, objValue);
    }
    break;
    case 32:
    {
      ASSpinnerImpl_setDrawablePaddingWithId_(self, objValue);
    }
    break;
    case 33:
    {
      ASSpinnerImpl_setDrawableTintWithId_(self, objValue);
    }
    break;
    case 34:
    {
      ASSpinnerImpl_setDrawableTintModeWithId_(self, objValue);
    }
    break;
    case 35:
    {
      ASSpinnerImpl_setDrawableIconSizeWithId_(self, objValue);
    }
    break;
    case 36:
    {
      [self setEnabledWithId:objValue];
    }
    break;
    case 37:
    {
      ASSpinnerImpl_setTypeFaceWithId_withNSString_(self, objValue, strValue);
    }
    break;
    case 38:
    {
      ASSpinnerImpl_setTextStyleWithId_(self, objValue);
    }
    break;
    case 39:
    {
      ASSpinnerImpl_setFontFamilyWithId_withNSString_(self, objValue, strValue);
    }
    break;
    case 40:
    {
      ASSpinnerImpl_setTextColorWithId_(self, objValue);
    }
    break;
    case 41:
    {
      [self setEnabledWithId:objValue];
    }
    break;
    case 42:
    {
      ASSpinnerImpl_setSelectionWithId_(self, objValue);
    }
    break;
    case 43:
    {
      ASSpinnerImpl_setGravityWithId_(self, objValue);
    }
    break;
    case 44:
    {
      ASSpinnerImpl_setMyTextSizeWithId_(self, objValue);
    }
    break;
    case 45:
    {
      ASSpinnerImpl_setHintColorWithId_(self, objValue);
    }
    break;
    default:
    break;
  }
}

- (id)getAttributeWithASWidgetAttribute:(ASWidgetAttribute *)key
              withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  id nativeWidget = [self asNativeWidget];
  id attributeValue = ASViewImpl_getAttributeWithASIWidget_withId_withASWidgetAttribute_withASILifeCycleDecorator_(self, nativeWidget, key, decorator);
  if (attributeValue != nil) {
    return attributeValue;
  }
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"iosText", @"hint", @"iosPlaceholder", @"iosTextColor", @"iosAdjustsFontSizeToFitWidth", @"iosMinimumFontSize", @"iosIsEditing", @"iosClearsOnBeginEditing", @"iosClearsOnInsertion", @"iosAllowsEditingTextAttributes", @"iosBackground", @"iosDisabledBackground", @"selectedValue", @"paddingBottom", @"paddingRight", @"paddingLeft", @"paddingStart", @"paddingEnd", @"paddingTop", @"drawablePadding", @"textColor", @"gravity", @"textSize" }, 23)) {
    case 0:
    {
      return [self getText];
    }
    case 1:
    case 2:
    {
      return [self getPlaceholder];
    }
    case 3:
    {
      return [self getTextColor];
    }
    case 4:
    {
      return [self getAdjustsFontSizeToFitWidth];
    }
    case 5:
    {
      return [self getMinimumFontSize];
    }
    case 6:
    {
      return [self getIsEditing];
    }
    case 7:
    {
      return [self getClearsOnBeginEditing];
    }
    case 8:
    {
      return [self getClearsOnInsertion];
    }
    case 9:
    {
      return [self getAllowsEditingTextAttributes];
    }
    case 10:
    {
      return [self getBackground];
    }
    case 11:
    {
      return [self getDisabledBackground];
    }
    case 12:
    {
      return ASSpinnerImpl_getSelectedValue(self);
    }
    case 13:
    {
      return ASSpinnerImpl_getPaddingBottom(self);
    }
    case 14:
    {
      return ASSpinnerImpl_getPaddingRight(self);
    }
    case 15:
    {
      return ASSpinnerImpl_getPaddingLeft(self);
    }
    case 16:
    {
      return ASSpinnerImpl_getPaddingStart(self);
    }
    case 17:
    {
      return ASSpinnerImpl_getPaddingEnd(self);
    }
    case 18:
    {
      return ASSpinnerImpl_getPaddingTop(self);
    }
    case 19:
    {
      return ASSpinnerImpl_getDrawablePadding(self);
    }
    case 20:
    {
      return ASSpinnerImpl_getTextColorState(self);
    }
    case 21:
    {
      return ASSpinnerImpl_getGravity(self);
    }
    case 22:
    {
      return ASSpinnerImpl_getTextSize(self);
    }
  }
  return nil;
}

- (id)asWidget {
  return measurableView_;
}

- (void)setGravityWithId:(id)objValue {
  ASSpinnerImpl_setGravityWithId_(self, objValue);
}

- (void)updateTextAlignment {
  ASSpinnerImpl_updateTextAlignment(self);
}

- (id)getGravity {
  return ASSpinnerImpl_getGravity(self);
}

- (void)onRtlPropertiesChangedWithInt:(jint)layoutDirection {
  if ([((ADSpinner *) nil_chk(measurableView_)) getRawTextAlignment] != 0 || [((ADSpinner *) nil_chk(measurableView_)) getRawLayoutDirection] != 0) {
    ASSpinnerImpl_updateTextAlignment(self);
  }
}

- (void)setDrawableIconSizeWithId:(id)objValue {
  ASSpinnerImpl_setDrawableIconSizeWithId_(self, objValue);
}

- (void)setTypeFaceWithId:(id)objValue
             withNSString:(NSString *)strValue {
  ASSpinnerImpl_setTypeFaceWithId_withNSString_(self, objValue, strValue);
}

- (void)setFontFamilyWithId:(id)objValue
               withNSString:(NSString *)strValue {
  ASSpinnerImpl_setFontFamilyWithId_withNSString_(self, objValue, strValue);
}

- (void)setTextStyleWithId:(id)objValue {
  ASSpinnerImpl_setTextStyleWithId_(self, objValue);
}

- (jint)nativeGetFontSize {
  return ASSpinnerImpl_nativeGetFontSize(self);
}

- (jint)nativeGetFontStyle {
  return ASSpinnerImpl_nativeGetFontStyle(self);
}

- (void)nativeSetCustomFontWithInt:(jint)height
              withASFontDescriptor:(ASFontDescriptor *)fontDescriptor {
  ASSpinnerImpl_nativeSetCustomFontWithInt_withASFontDescriptor_(self, height, fontDescriptor);
}

- (void)nativeSetFontStyleWithInt:(jint)style {
  ASSpinnerImpl_nativeSetFontStyleWithInt_(self, style);
}

- (void)setPaddingWithId:(id)objValue {
  jint value = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
  ADView *view = (ADView *) cast_chk([self asWidget], [ADView class]);
  ASViewImpl_setPaddingWithId_withADView_(JavaLangInteger_valueOfWithInt_(value), view);
}

- (void)setPaddingBottomWithId:(id)objValue {
  jint value = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
  ADView *view = (ADView *) cast_chk([self asWidget], [ADView class]);
  ASViewImpl_setPaddingBottomWithId_withADView_(JavaLangInteger_valueOfWithInt_(value), view);
}

- (void)setPaddingTopWithId:(id)objValue {
  jint value = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
  ADView *view = (ADView *) cast_chk([self asWidget], [ADView class]);
  ASViewImpl_setPaddingTopWithId_withADView_(JavaLangInteger_valueOfWithInt_(value), view);
}

- (void)setPaddingLeftWithId:(id)objValue {
  jint value = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
  ADView *view = (ADView *) cast_chk([self asWidget], [ADView class]);
  ASViewImpl_setPaddingLeftWithId_withADView_(JavaLangInteger_valueOfWithInt_(value), view);
}

- (void)setPaddingRightWithId:(id)objValue {
  jint value = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
  ADView *view = (ADView *) cast_chk([self asWidget], [ADView class]);
  ASViewImpl_setPaddingRightWithId_withADView_(JavaLangInteger_valueOfWithInt_(value), view);
}

- (id)getPaddingTop {
  return ASSpinnerImpl_getPaddingTop(self);
}

- (id)getPaddingEnd {
  return ASSpinnerImpl_getPaddingEnd(self);
}

- (id)getPaddingStart {
  return ASSpinnerImpl_getPaddingStart(self);
}

- (id)getPaddingLeft {
  return ASSpinnerImpl_getPaddingLeft(self);
}

- (id)getPaddingRight {
  return ASSpinnerImpl_getPaddingRight(self);
}

- (id)getPaddingBottom {
  return ASSpinnerImpl_getPaddingBottom(self);
}

- (void)setPaddingVerticalWithId:(id)objValue {
  ASSpinnerImpl_setPaddingVerticalWithId_(self, objValue);
}

- (void)setPaddingHorizontalWithId:(id)objValue {
  ASSpinnerImpl_setPaddingHorizontalWithId_(self, objValue);
}

- (void)setPaddingEndWithId:(id)objValue {
  ASSpinnerImpl_setPaddingEndWithId_(self, objValue);
}

- (void)setPaddingStartWithId:(id)objValue {
  ASSpinnerImpl_setPaddingStartWithId_(self, objValue);
}

- (id)getTextSize {
  return ASSpinnerImpl_getTextSize(self);
}

- (void)setMyTextSizeWithId:(id)objValue {
  ASSpinnerImpl_setMyTextSizeWithId_(self, objValue);
}

- (void)nativeSetTextSizeWithInt:(jint)value {
  ASSpinnerImpl_nativeSetTextSizeWithInt_(self, value);
}

- (void)setVerticalAligmentCenter {
  ASSpinnerImpl_setVerticalAligmentCenter(self);
}

- (void)setVerticalAligmentBottom {
  ASSpinnerImpl_setVerticalAligmentBottom(self);
}

- (void)setVerticalAligmentTop {
  ASSpinnerImpl_setVerticalAligmentTop(self);
}

- (void)setHorizontalAligmentCenter {
  ASSpinnerImpl_setHorizontalAligmentCenter(self);
}

- (void)setHorizontalAligmentRight {
  ASSpinnerImpl_setHorizontalAligmentRight(self);
}

- (void)setHorizontalAligmentRightInternal {
  ASSpinnerImpl_setHorizontalAligmentRightInternal(self);
}

- (void)setHorizontalAligmentLeft {
  ASSpinnerImpl_setHorizontalAligmentLeft(self);
}

- (void)setHorizontalAligmentLeftInternal {
  ASSpinnerImpl_setHorizontalAligmentLeftInternal(self);
}

- (jint)getTextAlignment {
  return ASSpinnerImpl_getTextAlignment(self);
}

- (void)setDrawablePaddingWithId:(id)objValue {
  ASSpinnerImpl_setDrawablePaddingWithId_(self, objValue);
}

- (void)setDrawableBottomWithId:(id)objValue {
  ASSpinnerImpl_setDrawableBottomWithId_(self, objValue);
}

- (void)setDrawableTopWithId:(id)objValue {
  ASSpinnerImpl_setDrawableTopWithId_(self, objValue);
}

- (void)setDrawableRightWithNSString:(NSString *)originalAttr
                              withId:(id)objValue {
  ASSpinnerImpl_setDrawableRightWithNSString_withId_(self, originalAttr, objValue);
}

- (void)setDrawableRightInternalWithNSString:(NSString *)originalAttr
                                      withId:(id)objValue {
  ASSpinnerImpl_setDrawableRightInternalWithNSString_withId_(self, originalAttr, objValue);
}

- (void)setDrawableLeftWithNSString:(NSString *)originalAttr
                             withId:(id)objValue {
  ASSpinnerImpl_setDrawableLeftWithNSString_withId_(self, originalAttr, objValue);
}

- (void)setDrawableLeftInternalWithNSString:(NSString *)originalAttr
                                     withId:(id)objValue {
  ASSpinnerImpl_setDrawableLeftInternalWithNSString_withId_(self, originalAttr, objValue);
}

- (jint)getImageHeightWithId:(id)objValue {
  return ASSpinnerImpl_getImageHeightWithId_(self, objValue);
}

- (jint)getImageWidthWithId:(id)objValue {
  return ASSpinnerImpl_getImageWidthWithId_(self, objValue);
}

- (id)getDrawablePadding {
  return ASSpinnerImpl_getDrawablePadding(self);
}

- (void)setDrawableTintModeWithId:(id)value {
  ASSpinnerImpl_setDrawableTintModeWithId_(self, value);
}

- (void)setDrawableTintWithId:(id)objValue {
  ASSpinnerImpl_setDrawableTintWithId_(self, objValue);
}

- (void)setTextColorWithId:(id)objValue {
  ASSpinnerImpl_setTextColorWithId_(self, objValue);
}

- (id)getTextColorState {
  return ASSpinnerImpl_getTextColorState(self);
}

- (void)drawableStateChanged {
  [super drawableStateChanged];
  ASSpinnerImpl_drawableStateChangeWithNSString_withADDrawable_(self, @"bottom", [((ADSpinner *) nil_chk(measurableView_)) getBottomDrawable]);
  ASSpinnerImpl_drawableStateChangeWithNSString_withADDrawable_(self, @"left", [((ADSpinner *) nil_chk(measurableView_)) getLeftDrawable]);
  ASSpinnerImpl_drawableStateChangeWithNSString_withADDrawable_(self, @"right", [((ADSpinner *) nil_chk(measurableView_)) getRightDrawable]);
  ASSpinnerImpl_drawableStateChangeWithNSString_withADDrawable_(self, @"top", [((ADSpinner *) nil_chk(measurableView_)) getTopDrawable]);
  if ([((ADSpinner *) nil_chk(measurableView_)) getTextColors] != nil && [((ADColorStateList *) nil_chk([((ADSpinner *) nil_chk(measurableView_)) getTextColors])) isStateful]) {
    ASSpinnerImpl_setTextColorWithId_(self, JavaLangInteger_valueOfWithInt_([((ADSpinner *) nil_chk(measurableView_)) getCurrentTextColor]));
  }
  if ([((ADSpinner *) nil_chk(measurableView_)) getHintTextColors] != nil && [((ADColorStateList *) nil_chk([((ADSpinner *) nil_chk(measurableView_)) getHintTextColors])) isStateful]) {
    ASSpinnerImpl_setHintColorWithId_(self, JavaLangInteger_valueOfWithInt_([((ADSpinner *) nil_chk(measurableView_)) getCurrentHintTextColor]));
    ASSpinnerImpl_syncPlaceholderLabel(self);
  }
  if (drawableTint_ != nil && [drawableTint_ isStateful]) {
    ASSpinnerImpl_setDrawableTintWithId_(self, drawableTint_);
    [self invalidate];
  }
  if ([((ADSpinner *) nil_chk(measurableView_)) getLinkTextColors] != nil && [((ADColorStateList *) nil_chk([((ADSpinner *) nil_chk(measurableView_)) getLinkTextColors])) isStateful]) {
    ASSpinnerImpl_setTextColorLinkWithADColorStateList_(self, [((ADSpinner *) nil_chk(measurableView_)) getLinkTextColors]);
  }
}

- (void)drawableStateChangeWithNSString:(NSString *)type
                         withADDrawable:(ADDrawable *)dr {
  ASSpinnerImpl_drawableStateChangeWithNSString_withADDrawable_(self, type, dr);
}

- (jint)getBorderPadding {
  return 0;
}

- (jint)getLineHeightPadding {
  return 0;
}

- (jint)getLineHeight {
  return ASSpinnerImpl_getLineHeight(self);
}

- (jint)getBorderWidth {
  return ASSpinnerImpl_getBorderWidth(self);
}

- (id)getChildAttributeWithASIWidget:(id<ASIWidget>)w
               withASWidgetAttribute:(ASWidgetAttribute *)key {
  return nil;
}

- (void)setChildAttributeWithASIWidget:(id<ASIWidget>)widget
                 withASWidgetAttribute:(ASWidgetAttribute *)key
                          withNSString:(NSString *)strValue
                                withId:(id)value {
}

- (void)setModelOptionTextPathWithId:(id)objValue {
  ASSpinnerImpl_setModelOptionTextPathWithId_(self, objValue);
}

- (void)setModelOptionValuePathWithId:(id)objValue {
  ASSpinnerImpl_setModelOptionValuePathWithId_(self, objValue);
}

- (id)getOptionValueFromLoopParamWithASLoopParam:(ASLoopParam *)loopParam
                                    withNSString:(NSString *)path {
  return ASSpinnerImpl_getOptionValueFromLoopParamWithASLoopParam_withNSString_(self, loopParam, path);
}

- (void)setValuesWithId:(id)objValue {
  ASSpinnerImpl_setValuesWithId_(self, objValue);
}

- (void)setSelectedValueWithId:(id)objValue {
  ASSpinnerImpl_setSelectedValueWithId_(self, objValue);
}

- (id)getSelectedValue {
  return ASSpinnerImpl_getSelectedValue(self);
}

- (NSString *)getTextEntered {
  id selectedValue = ASSpinnerImpl_getSelectedValue(self);
  if (!([selectedValue isKindOfClass:[NSString class]]) && [self getModelIdPath] != nil) {
    selectedValue = ASPluginInvoker_getStringWithId_([self getModelByPathWithNSString:[self getModelIdPath] withId:selectedValue]);
  }
  return (NSString *) cast_chk(selectedValue, [NSString class]);
}

- (void)initialized {
  [super initialized];
  if (tmpSelectedValue_ != nil) {
    ASSpinnerImpl_setSelectedValueWithId_(self, tmpSelectedValue_);
  }
  ASSpinnerImpl_selectSpinnerIfRequired(self);
}

- (jint)measureWidth {
  jint width = [((ADSpinner *) nil_chk(measurableView_)) nativeMeasureWidthWithId:uiView_];
  return width;
}

- (jint)measureHeightWithInt:(jint)width {
  jint height = [((ADSpinner *) nil_chk(measurableView_)) nativeMeasureHeightWithId:uiView_ withInt:width];
  return height;
}

- (void)updatePadding {
  ASSpinnerImpl_updatePadding(self);
}

- (void)nativeSetVerticalAligmentCenter {
  ASSpinnerImpl_nativeSetVerticalAligmentCenter(self);
}

- (void)nativeSetVerticalAligmentBottom {
  ASSpinnerImpl_nativeSetVerticalAligmentBottom(self);
}

- (void)nativeSetVerticalAligmentTop {
  ASSpinnerImpl_nativeSetVerticalAligmentTop(self);
}

- (void)setHintColorWithId:(id)objValue {
  ASSpinnerImpl_setHintColorWithId_(self, objValue);
}

- (void)nativeSetHintColorWithId:(id)value {
  ASSpinnerImpl_nativeSetHintColorWithId_(self, value);
}

- (void)syncPlaceholderLabel {
  ASSpinnerImpl_syncPlaceholderLabel(self);
}

- (void)nativeSetEnabledWithBoolean:(jboolean)value {
  ((ASUITextField*)self.uiView).enabled = value;
}

- (void)setEnabledWithId:(id)objValue {
  jboolean isEnabled = objValue != nil && [(JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]) booleanValue];
  [self nativeSetEnabledWithBoolean:isEnabled];
}

- (void)becomeFirstResponder {
  ASSpinnerImpl_becomeFirstResponder(self);
}

- (void)resetError {
  jint validationErrorDisplayType = [self getValidationErrorDisplayType];
  if ((validationErrorDisplayType & ASFormElement_ERROR_DISPLAY_TYPE_POPUP) != 0) {
    ASSpinnerImpl_setErrorWithId_(self, nil);
  }
  if ((validationErrorDisplayType & ASFormElement_ERROR_DISPLAY_TYPE_LABEL) != 0) {
    ASViewImpl_setMessageOnLabelWithASIWidget_withNSString_(self, @"");
  }
  if ((validationErrorDisplayType & ASFormElement_ERROR_DISPLAY_TYPE_STYLE) != 0) {
    ASViewImpl_setStyleWithASIWidget_withId_(self, [self getNormalStyle]);
  }
}

- (void)showErrorWithNSString:(NSString *)message {
  jint validationErrorDisplayType = [self getValidationErrorDisplayType];
  if ((validationErrorDisplayType & ASFormElement_ERROR_DISPLAY_TYPE_POPUP) != 0) {
    ASSpinnerImpl_setErrorWithId_(self, message);
  }
  if ((validationErrorDisplayType & ASFormElement_ERROR_DISPLAY_TYPE_LABEL) != 0) {
    ASViewImpl_setMessageOnLabelWithASIWidget_withNSString_(self, message);
  }
  if ((validationErrorDisplayType & ASFormElement_ERROR_DISPLAY_TYPE_STYLE) != 0) {
    ASViewImpl_setStyleWithASIWidget_withId_(self, [self getErrorStyle]);
  }
}

- (void)setHintTextFormatWithId:(id)objValue {
  ASSpinnerImpl_setHintTextFormatWithId_(self, objValue);
}

- (void)setTextWithId:(id)nativeWidget
               withId:(id)value {
  ((ASUITextField*) nativeWidget).text = (NSString*) value;
}

- (id)getText {
  return ((ASUITextField*) uiView_).text;
}

- (void)setPlaceholderWithId:(id)nativeWidget
                      withId:(id)value {
  ((ASUITextField*) nativeWidget).placeholder = (NSString*) value;
}

- (id)getPlaceholder {
  return ((ASUITextField*) uiView_).placeholder;
}

- (void)setTextColorWithId:(id)nativeWidget
                    withId:(id)value {
  ((ASUITextField*) nativeWidget).textColor = (UIColor*) value;
}

- (id)getTextColor {
  return ((ASUITextField*) uiView_).textColor;
}

- (void)setAdjustsFontSizeToFitWidthWithId:(id)nativeWidget
                                    withId:(id)value {
  ((ASUITextField*) nativeWidget).adjustsFontSizeToFitWidth = [(JavaLangBoolean*) value booleanValue];
}

- (id)getAdjustsFontSizeToFitWidth {
  return [JavaLangBoolean valueOfWithBoolean :((ASUITextField*) uiView_).adjustsFontSizeToFitWidth];
}

- (void)setMinimumFontSizeWithId:(id)nativeWidget
                          withId:(id)value {
  ((ASUITextField*) nativeWidget).minimumFontSize = [(JavaLangFloat*) value floatValue];
}

- (id)getMinimumFontSize {
  return [JavaLangFloat valueOfWithFloat :((ASUITextField*) uiView_).minimumFontSize];
}

- (id)getIsEditing {
  return [JavaLangBoolean valueOfWithBoolean :((ASUITextField*) uiView_).editing];
}

- (void)setClearsOnBeginEditingWithId:(id)nativeWidget
                               withId:(id)value {
  ((ASUITextField*) nativeWidget).clearsOnBeginEditing = [(JavaLangBoolean*) value booleanValue];
}

- (id)getClearsOnBeginEditing {
  return [JavaLangBoolean valueOfWithBoolean :((ASUITextField*) uiView_).clearsOnBeginEditing];
}

- (void)setClearsOnInsertionWithId:(id)nativeWidget
                            withId:(id)value {
  ((ASUITextField*) nativeWidget).clearsOnInsertion = [(JavaLangBoolean*) value booleanValue];
}

- (id)getClearsOnInsertion {
  return [JavaLangBoolean valueOfWithBoolean :((ASUITextField*) uiView_).clearsOnInsertion];
}

- (void)setAllowsEditingTextAttributesWithId:(id)nativeWidget
                                      withId:(id)value {
  ((ASUITextField*) nativeWidget).allowsEditingTextAttributes = [(JavaLangBoolean*) value booleanValue];
}

- (id)getAllowsEditingTextAttributes {
  return [JavaLangBoolean valueOfWithBoolean :((ASUITextField*) uiView_).allowsEditingTextAttributes];
}

- (void)setBackgroundWithId:(id)nativeWidget
                     withId:(id)value {
  ((ASUITextField*) nativeWidget).background = (UIImage*) value;
}

- (id)getBackground {
  return ((ASUITextField*) uiView_).background;
}

- (void)setDisabledBackgroundWithId:(id)nativeWidget
                             withId:(id)value {
  ((ASUITextField*) nativeWidget).disabledBackground = (UIImage*) value;
}

- (id)getDisabledBackground {
  return ((ASUITextField*) uiView_).disabledBackground;
}

- (id)asNativeWidget {
  return uiView_;
}

- (jboolean)checkIosVersionWithNSString:(NSString *)v {
  return ([[[UIDevice currentDevice] systemVersion] compare:v options:NSNumericSearch] == NSOrderedDescending);
}

- (void)setIdWithNSString:(NSString *)id_ {
  if (id_ != nil && ![id_ isEqual:@""]) {
    [super setIdWithNSString:id_];
    [((ADSpinner *) nil_chk(measurableView_)) setIdWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([self quickConvertWithId:id_ withNSString:@"id"], [JavaLangInteger class]))) intValue]];
  }
}

- (void)setVisibleWithBoolean:(jboolean)b {
  [((ADView *) nil_chk(((ADView *) cast_chk([self asWidget], [ADView class])))) setVisibilityWithInt:b ? ADView_VISIBLE : ADView_GONE];
}

- (void)requestLayout {
  if ([self isInitialised]) {
    ASViewImpl_requestLayoutWithASIWidget_withId_(self, [self asNativeWidget]);
  }
}

- (void)invalidate {
  if ([self isInitialised]) {
    ASViewImpl_invalidateWithASIWidget_withId_(self, [self asNativeWidget]);
  }
}

- (void)nativeCreateWithJavaUtilMap:(id<JavaUtilMap>)params {
  ASSpinnerImpl_nativeCreateWithJavaUtilMap_(self, params);
}

- (id)nativeCreateView {
  return ASSpinnerImpl_nativeCreateView(self);
}

- (void)addItemToParentWithInt:(jint)index
                  withNSString:(NSString *)id_
               withASLoopParam:(ASLoopParam *)loopParam {
  if (modelOptionTextPath_ != nil) {
    id val = ASSpinnerImpl_getOptionValueFromLoopParamWithASLoopParam_withNSString_(self, loopParam, modelOptionTextPath_);
    if (entries_ == nil) {
      entries_ = new_JavaUtilArrayList_init();
    }
    [entries_ addWithId:(NSString *) cast_chk(val, [NSString class])];
  }
}

- (NSInteger)numberOfComponentsInPickerView:(UIPickerView *)pickerView {
  return 1;
}

- (NSInteger)pickerView:(UIPickerView *)pickerView numberOfRowsInComponent:(NSInteger)component {
  return [self->entries_ size];
}

- (NSString *)pickerView:(UIPickerView *)pickerView titleForRow:(NSInteger)row forComponent:(NSInteger)component {
  return [self->entries_ getWithInt: (int)row];
}
- (void)pickerView:(UIPickerView *)pickerView didSelectRow:(NSInteger)row inComponent:(NSInteger)component {
  [self triggerOnSelectWithInt:(int) row];
  ((ASUITextField*) [self asNativeWidget]).text = [self getSelectedTextWithInt: (int)row];
  [((ASUITextField*) [self asNativeWidget]) sendActionsForControlEvents:UIControlEventEditingChanged];
}

- (NSString *)getSelectedTextWithInt:(jint)selectedIndex {
  return ASSpinnerImpl_getSelectedTextWithInt_(self, selectedIndex);
}

- (void)triggerOnSelectWithInt:(jint)selectedIndex {
  ASSpinnerImpl_triggerOnSelectWithInt_(self, selectedIndex);
}

- (void)setOnItemSelectedListenerWithASSpinnerImpl_AdapterView_OnItemSelectedListener:(id<ASSpinnerImpl_AdapterView_OnItemSelectedListener>)onItemSelectedListener {
  ASSpinnerImpl_setOnItemSelectedListenerWithASSpinnerImpl_AdapterView_OnItemSelectedListener_(self, onItemSelectedListener);
}

- (void)setEntriesWithId:(id)objValue {
  ASSpinnerImpl_setEntriesWithId_(self, objValue);
}

- (void)setSelectionWithId:(id)objValue {
  ASSpinnerImpl_setSelectionWithId_(self, objValue);
}

- (void)nativeSetSelectionWithInt:(jint)selectedIndex {
  ASSpinnerImpl_nativeSetSelectionWithInt_(self, selectedIndex);
}

- (void)setTextColorLinkWithADColorStateList:(ADColorStateList *)linkTextColors {
  ASSpinnerImpl_setTextColorLinkWithADColorStateList_(self, linkTextColors);
}

- (id)getMyText {
  return ASSpinnerImpl_getMyText(self);
}

- (jint)getSelectedItemPosition {
  return ASSpinnerImpl_getSelectedItemPosition(self);
}

- (jboolean)isViewVisible {
  return [((ADSpinner *) nil_chk(measurableView_)) getVisibility] == ADView_VISIBLE;
}

- (void)focus {
  ASSpinnerImpl_becomeFirstResponder(self);
}

- (void)setErrorWithId:(id)object {
  ASSpinnerImpl_setErrorWithId_(self, object);
}

- (void)triggerChangeOnLoad {
  ASSpinnerImpl_triggerChangeOnLoad(self);
}

- (void)addTriggerChangeOnLoadListener {
  ASSpinnerImpl_addTriggerChangeOnLoadListener(self);
}

- (void)selectSpinnerIfRequired {
  ASSpinnerImpl_selectSpinnerIfRequired(self);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "LIOSClass;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASIWidget;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, 5, -1, -1 },
    { NULL, "V", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 14, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 15, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 17, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 18, 11, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 19, 20, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 21, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 22, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 23, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 24, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 25, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 26, 11, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 27, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 28, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 29, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 30, 11, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 31, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 32, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 33, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 34, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 35, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 36, 37, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 38, 37, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 39, 37, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 40, 37, -1, -1, -1, -1 },
    { NULL, "I", 0x102, 41, 11, -1, -1, -1, -1 },
    { NULL, "I", 0x102, 42, 11, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 43, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 44, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 45, 11, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 46, 47, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 48, 49, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 50, 51, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 52, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 53, 11, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, 54, 55, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 56, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 57, 11, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 58, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 59, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 60, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 61, 62, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 63, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 64, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 65, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 66, 67, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x101, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 68, 67, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x101, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 45, 67, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x101, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 69, 67, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x101, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 70, 67, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x101, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x101, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 71, 67, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x101, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 72, 67, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x101, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 73, 67, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x101, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 74, 67, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x101, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 75, 67, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x101, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x101, 76, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 77, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 78, 62, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 79, 80, -1, 81, -1, -1 },
    { NULL, "LNSObject;", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 82, 83, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 84, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 85, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 86, 87, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 88, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 89, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 90, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 91, 92, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 93, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(loadAttributesWithNSString:);
  methods[1].selector = @selector(init);
  methods[2].selector = @selector(initWithNSString:);
  methods[3].selector = @selector(initWithNSString:withNSString:);
  methods[4].selector = @selector(getViewClass);
  methods[5].selector = @selector(newInstance);
  methods[6].selector = @selector(createWithASIFragment:withJavaUtilMap:);
  methods[7].selector = @selector(setWidgetOnNativeClass);
  methods[8].selector = @selector(setAttributeWithASWidgetAttribute:withNSString:withId:withASILifeCycleDecorator:);
  methods[9].selector = @selector(getAttributeWithASWidgetAttribute:withASILifeCycleDecorator:);
  methods[10].selector = @selector(asWidget);
  methods[11].selector = @selector(setGravityWithId:);
  methods[12].selector = @selector(updateTextAlignment);
  methods[13].selector = @selector(getGravity);
  methods[14].selector = @selector(onRtlPropertiesChangedWithInt:);
  methods[15].selector = @selector(setDrawableIconSizeWithId:);
  methods[16].selector = @selector(setTypeFaceWithId:withNSString:);
  methods[17].selector = @selector(setFontFamilyWithId:withNSString:);
  methods[18].selector = @selector(setTextStyleWithId:);
  methods[19].selector = @selector(nativeGetFontSize);
  methods[20].selector = @selector(nativeGetFontStyle);
  methods[21].selector = @selector(nativeSetCustomFontWithInt:withASFontDescriptor:);
  methods[22].selector = @selector(nativeSetFontStyleWithInt:);
  methods[23].selector = @selector(setPaddingWithId:);
  methods[24].selector = @selector(setPaddingBottomWithId:);
  methods[25].selector = @selector(setPaddingTopWithId:);
  methods[26].selector = @selector(setPaddingLeftWithId:);
  methods[27].selector = @selector(setPaddingRightWithId:);
  methods[28].selector = @selector(getPaddingTop);
  methods[29].selector = @selector(getPaddingEnd);
  methods[30].selector = @selector(getPaddingStart);
  methods[31].selector = @selector(getPaddingLeft);
  methods[32].selector = @selector(getPaddingRight);
  methods[33].selector = @selector(getPaddingBottom);
  methods[34].selector = @selector(setPaddingVerticalWithId:);
  methods[35].selector = @selector(setPaddingHorizontalWithId:);
  methods[36].selector = @selector(setPaddingEndWithId:);
  methods[37].selector = @selector(setPaddingStartWithId:);
  methods[38].selector = @selector(getTextSize);
  methods[39].selector = @selector(setMyTextSizeWithId:);
  methods[40].selector = @selector(nativeSetTextSizeWithInt:);
  methods[41].selector = @selector(setVerticalAligmentCenter);
  methods[42].selector = @selector(setVerticalAligmentBottom);
  methods[43].selector = @selector(setVerticalAligmentTop);
  methods[44].selector = @selector(setHorizontalAligmentCenter);
  methods[45].selector = @selector(setHorizontalAligmentRight);
  methods[46].selector = @selector(setHorizontalAligmentRightInternal);
  methods[47].selector = @selector(setHorizontalAligmentLeft);
  methods[48].selector = @selector(setHorizontalAligmentLeftInternal);
  methods[49].selector = @selector(getTextAlignment);
  methods[50].selector = @selector(setDrawablePaddingWithId:);
  methods[51].selector = @selector(setDrawableBottomWithId:);
  methods[52].selector = @selector(setDrawableTopWithId:);
  methods[53].selector = @selector(setDrawableRightWithNSString:withId:);
  methods[54].selector = @selector(setDrawableRightInternalWithNSString:withId:);
  methods[55].selector = @selector(setDrawableLeftWithNSString:withId:);
  methods[56].selector = @selector(setDrawableLeftInternalWithNSString:withId:);
  methods[57].selector = @selector(getImageHeightWithId:);
  methods[58].selector = @selector(getImageWidthWithId:);
  methods[59].selector = @selector(getDrawablePadding);
  methods[60].selector = @selector(setDrawableTintModeWithId:);
  methods[61].selector = @selector(setDrawableTintWithId:);
  methods[62].selector = @selector(setTextColorWithId:);
  methods[63].selector = @selector(getTextColorState);
  methods[64].selector = @selector(drawableStateChanged);
  methods[65].selector = @selector(drawableStateChangeWithNSString:withADDrawable:);
  methods[66].selector = @selector(getBorderPadding);
  methods[67].selector = @selector(getLineHeightPadding);
  methods[68].selector = @selector(getLineHeight);
  methods[69].selector = @selector(getBorderWidth);
  methods[70].selector = @selector(getChildAttributeWithASIWidget:withASWidgetAttribute:);
  methods[71].selector = @selector(setChildAttributeWithASIWidget:withASWidgetAttribute:withNSString:withId:);
  methods[72].selector = @selector(setModelOptionTextPathWithId:);
  methods[73].selector = @selector(setModelOptionValuePathWithId:);
  methods[74].selector = @selector(getOptionValueFromLoopParamWithASLoopParam:withNSString:);
  methods[75].selector = @selector(setValuesWithId:);
  methods[76].selector = @selector(setSelectedValueWithId:);
  methods[77].selector = @selector(getSelectedValue);
  methods[78].selector = @selector(getTextEntered);
  methods[79].selector = @selector(initialized);
  methods[80].selector = @selector(measureWidth);
  methods[81].selector = @selector(measureHeightWithInt:);
  methods[82].selector = @selector(updatePadding);
  methods[83].selector = @selector(nativeSetVerticalAligmentCenter);
  methods[84].selector = @selector(nativeSetVerticalAligmentBottom);
  methods[85].selector = @selector(nativeSetVerticalAligmentTop);
  methods[86].selector = @selector(setHintColorWithId:);
  methods[87].selector = @selector(nativeSetHintColorWithId:);
  methods[88].selector = @selector(syncPlaceholderLabel);
  methods[89].selector = @selector(nativeSetEnabledWithBoolean:);
  methods[90].selector = @selector(setEnabledWithId:);
  methods[91].selector = @selector(becomeFirstResponder);
  methods[92].selector = @selector(resetError);
  methods[93].selector = @selector(showErrorWithNSString:);
  methods[94].selector = @selector(setHintTextFormatWithId:);
  methods[95].selector = @selector(setTextWithId:withId:);
  methods[96].selector = @selector(getText);
  methods[97].selector = @selector(setPlaceholderWithId:withId:);
  methods[98].selector = @selector(getPlaceholder);
  methods[99].selector = @selector(setTextColorWithId:withId:);
  methods[100].selector = @selector(getTextColor);
  methods[101].selector = @selector(setAdjustsFontSizeToFitWidthWithId:withId:);
  methods[102].selector = @selector(getAdjustsFontSizeToFitWidth);
  methods[103].selector = @selector(setMinimumFontSizeWithId:withId:);
  methods[104].selector = @selector(getMinimumFontSize);
  methods[105].selector = @selector(getIsEditing);
  methods[106].selector = @selector(setClearsOnBeginEditingWithId:withId:);
  methods[107].selector = @selector(getClearsOnBeginEditing);
  methods[108].selector = @selector(setClearsOnInsertionWithId:withId:);
  methods[109].selector = @selector(getClearsOnInsertion);
  methods[110].selector = @selector(setAllowsEditingTextAttributesWithId:withId:);
  methods[111].selector = @selector(getAllowsEditingTextAttributes);
  methods[112].selector = @selector(setBackgroundWithId:withId:);
  methods[113].selector = @selector(getBackground);
  methods[114].selector = @selector(setDisabledBackgroundWithId:withId:);
  methods[115].selector = @selector(getDisabledBackground);
  methods[116].selector = @selector(asNativeWidget);
  methods[117].selector = @selector(checkIosVersionWithNSString:);
  methods[118].selector = @selector(setIdWithNSString:);
  methods[119].selector = @selector(setVisibleWithBoolean:);
  methods[120].selector = @selector(requestLayout);
  methods[121].selector = @selector(invalidate);
  methods[122].selector = @selector(nativeCreateWithJavaUtilMap:);
  methods[123].selector = @selector(nativeCreateView);
  methods[124].selector = @selector(addItemToParentWithInt:withNSString:withASLoopParam:);
  methods[125].selector = @selector(getSelectedTextWithInt:);
  methods[126].selector = @selector(triggerOnSelectWithInt:);
  methods[127].selector = @selector(setOnItemSelectedListenerWithASSpinnerImpl_AdapterView_OnItemSelectedListener:);
  methods[128].selector = @selector(setEntriesWithId:);
  methods[129].selector = @selector(setSelectionWithId:);
  methods[130].selector = @selector(nativeSetSelectionWithInt:);
  methods[131].selector = @selector(setTextColorLinkWithADColorStateList:);
  methods[132].selector = @selector(getMyText);
  methods[133].selector = @selector(getSelectedItemPosition);
  methods[134].selector = @selector(isViewVisible);
  methods[135].selector = @selector(focus);
  methods[136].selector = @selector(setErrorWithId:);
  methods[137].selector = @selector(triggerChangeOnLoad);
  methods[138].selector = @selector(addTriggerChangeOnLoadListener);
  methods[139].selector = @selector(selectSpinnerIfRequired);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "LOCAL_NAME", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 94, -1, -1 },
    { "GROUP_NAME", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 95, -1, -1 },
    { "uiView_", "LNSObject;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "measurableView_", "LADSpinner;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "fontDescriptors_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 96, -1 },
    { "ITALIC_FONT_TRAIT", "I", .constantValue.asLong = 0, 0xa, -1, 97, -1, -1 },
    { "BOLD_FONT_TRAIT", "I", .constantValue.asLong = 0, 0xa, -1, 98, -1, -1 },
    { "NORMAL_FONT_TRAIT", "I", .constantValue.asInt = ASSpinnerImpl_NORMAL_FONT_TRAIT, 0x1a, -1, -1, -1, -1 },
    { "TEXT_ALIGN_CENTER", "I", .constantValue.asInt = ASSpinnerImpl_TEXT_ALIGN_CENTER, 0x1a, -1, -1, -1, -1 },
    { "TEXT_ALIGN_LEFT", "I", .constantValue.asInt = ASSpinnerImpl_TEXT_ALIGN_LEFT, 0x1a, -1, -1, -1, -1 },
    { "TEXT_ALIGN_RIGHT", "I", .constantValue.asInt = ASSpinnerImpl_TEXT_ALIGN_RIGHT, 0x1a, -1, -1, -1, -1 },
    { "drawableTint_", "LADColorStateList;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "modelOptionTextPath_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "modelOptionValuePath_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "values_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 99, -1 },
    { "tmpSelectedValue_", "LNSObject;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "entries_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 99, -1 },
    { "onItemSelectedListener_", "LASSpinnerImpl_AdapterView_OnItemSelectedListener;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "postMeasureHandler_", "LASSpinnerImpl_PostMeasureHandler;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "POST_MEASURE_EVENT_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "loadAttributes", "LNSString;", "LNSString;LNSString;", "create", "LASIFragment;LJavaUtilMap;", "(Lcom/ashera/core/IFragment;Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;)V", "setAttribute", "LASWidgetAttribute;LNSString;LNSObject;LASILifeCycleDecorator;", "getAttribute", "LASWidgetAttribute;LASILifeCycleDecorator;", "setGravity", "LNSObject;", "onRtlPropertiesChanged", "I", "setDrawableIconSize", "setTypeFace", "LNSObject;LNSString;", "setFontFamily", "setTextStyle", "nativeSetCustomFont", "ILASFontDescriptor;", "nativeSetFontStyle", "setPadding", "setPaddingBottom", "setPaddingTop", "setPaddingLeft", "setPaddingRight", "setPaddingVertical", "setPaddingHorizontal", "setPaddingEnd", "setPaddingStart", "setMyTextSize", "nativeSetTextSize", "setDrawablePadding", "setDrawableBottom", "setDrawableTop", "setDrawableRight", "LNSString;LNSObject;", "setDrawableRightInternal", "setDrawableLeft", "setDrawableLeftInternal", "getImageHeight", "getImageWidth", "setDrawableTintMode", "setDrawableTint", "setTextColor", "drawableStateChange", "LNSString;LADDrawable;", "getChildAttribute", "LASIWidget;LASWidgetAttribute;", "setChildAttribute", "LASIWidget;LASWidgetAttribute;LNSString;LNSObject;", "setModelOptionTextPath", "setModelOptionValuePath", "getOptionValueFromLoopParam", "LASLoopParam;LNSString;", "setValues", "setSelectedValue", "measureHeight", "setHintColor", "nativeSetHintColor", "nativeSetEnabled", "Z", "setEnabled", "showError", "setHintTextFormat", "setText", "LNSObject;LNSObject;", "setPlaceholder", "setAdjustsFontSizeToFitWidth", "setMinimumFontSize", "setClearsOnBeginEditing", "setClearsOnInsertion", "setAllowsEditingTextAttributes", "setBackground", "setDisabledBackground", "checkIosVersion", "setId", "setVisible", "nativeCreate", "LJavaUtilMap;", "(Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;)V", "addItemToParent", "ILNSString;LASLoopParam;", "getSelectedText", "triggerOnSelect", "setOnItemSelectedListener", "LASSpinnerImpl_AdapterView_OnItemSelectedListener;", "setEntries", "setSelection", "nativeSetSelection", "setTextColorLink", "LADColorStateList;", "setError", &ASSpinnerImpl_LOCAL_NAME, &ASSpinnerImpl_GROUP_NAME, "Ljava/util/Map<Ljava/lang/String;Lcom/ashera/model/FontDescriptor;>;", &ASSpinnerImpl_ITALIC_FONT_TRAIT, &ASSpinnerImpl_BOLD_FONT_TRAIT, "Ljava/util/List<Ljava/lang/String;>;", "LASSpinnerImpl_DrawableTintMode;LASSpinnerImpl_Font;LASSpinnerImpl_TextStyle;LASSpinnerImpl_SpinnerExt;LASSpinnerImpl_AdapterView;LASSpinnerImpl_OnItemSelectedListener;LASSpinnerImpl_PostMeasureHandler;" };
  static const J2ObjcClassInfo _ASSpinnerImpl = { "SpinnerImpl", "com.ashera.layout", ptrTable, methods, fields, 7, 0x1, 140, 20, -1, 100, -1, -1, -1 };
  return &_ASSpinnerImpl;
}

+ (void)initialize {
  if (self == [ASSpinnerImpl class]) {
    ASSpinnerImpl_ITALIC_FONT_TRAIT = JreLoadStatic(ASLayoutNativeVars, UIFontDescriptorTraitItalic);
    ASSpinnerImpl_BOLD_FONT_TRAIT = JreLoadStatic(ASLayoutNativeVars, UIFontDescriptorTraitBold);
    J2OBJC_SET_INITIALIZED(ASSpinnerImpl)
  }
}

@end

void ASSpinnerImpl_init(ASSpinnerImpl *self) {
  ASBaseHasWidgets_initWithNSString_withNSString_(self, ASSpinnerImpl_GROUP_NAME, ASSpinnerImpl_LOCAL_NAME);
  self->POST_MEASURE_EVENT_ = [((ASEvent_StandardEvents *) nil_chk(JreLoadEnum(ASEvent_StandardEvents, postMeasure))) description];
}

ASSpinnerImpl *new_ASSpinnerImpl_init() {
  J2OBJC_NEW_IMPL(ASSpinnerImpl, init)
}

ASSpinnerImpl *create_ASSpinnerImpl_init() {
  J2OBJC_CREATE_IMPL(ASSpinnerImpl, init)
}

void ASSpinnerImpl_initWithNSString_(ASSpinnerImpl *self, NSString *localname) {
  ASBaseHasWidgets_initWithNSString_withNSString_(self, ASSpinnerImpl_GROUP_NAME, localname);
  self->POST_MEASURE_EVENT_ = [((ASEvent_StandardEvents *) nil_chk(JreLoadEnum(ASEvent_StandardEvents, postMeasure))) description];
}

ASSpinnerImpl *new_ASSpinnerImpl_initWithNSString_(NSString *localname) {
  J2OBJC_NEW_IMPL(ASSpinnerImpl, initWithNSString_, localname)
}

ASSpinnerImpl *create_ASSpinnerImpl_initWithNSString_(NSString *localname) {
  J2OBJC_CREATE_IMPL(ASSpinnerImpl, initWithNSString_, localname)
}

void ASSpinnerImpl_initWithNSString_withNSString_(ASSpinnerImpl *self, NSString *groupName, NSString *localname) {
  ASBaseHasWidgets_initWithNSString_withNSString_(self, groupName, localname);
  self->POST_MEASURE_EVENT_ = [((ASEvent_StandardEvents *) nil_chk(JreLoadEnum(ASEvent_StandardEvents, postMeasure))) description];
}

ASSpinnerImpl *new_ASSpinnerImpl_initWithNSString_withNSString_(NSString *groupName, NSString *localname) {
  J2OBJC_NEW_IMPL(ASSpinnerImpl, initWithNSString_withNSString_, groupName, localname)
}

ASSpinnerImpl *create_ASSpinnerImpl_initWithNSString_withNSString_(NSString *groupName, NSString *localname) {
  J2OBJC_CREATE_IMPL(ASSpinnerImpl, initWithNSString_withNSString_, groupName, localname)
}

void ASSpinnerImpl_setWidgetOnNativeClass(ASSpinnerImpl *self) {
  ((ASUITextField*) self.uiView).widget = self;
}

void ASSpinnerImpl_setGravityWithId_(ASSpinnerImpl *self, id objValue) {
  jint value = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
  [((ADSpinner *) nil_chk(self->measurableView_)) setGravityWithInt:value];
  jint major = value & ASGravityConverter_VERTICAL_GRAVITY_MASK;
  ASSpinnerImpl_updateTextAlignment(self);
  switch (major) {
    case ASGravityConverter_TOP:
    ASSpinnerImpl_setVerticalAligmentTop(self);
    break;
    case ASGravityConverter_BOTTOM:
    ASSpinnerImpl_setVerticalAligmentBottom(self);
    break;
    case ASGravityConverter_CENTER_VERTICAL:
    ASSpinnerImpl_setVerticalAligmentCenter(self);
    break;
    default:
    ASSpinnerImpl_setVerticalAligmentTop(self);
    break;
  }
}

void ASSpinnerImpl_updateTextAlignment(ASSpinnerImpl *self) {
  ADLayout_Alignment *minor = [((ADSpinner *) nil_chk(self->measurableView_)) getAlignmentOfLayout];
  jboolean isRtl = false;
  jboolean hasTextDirection = [((ADSpinner *) nil_chk(self->measurableView_)) getRawTextDirection] != 0;
  if (hasTextDirection) {
    id<ADTextDirectionHeuristic> heuristic = [((ADSpinner *) nil_chk(self->measurableView_)) getTextDirectionHeuristic];
    NSString *text = (NSString *) cast_chk(ASSpinnerImpl_getMyText(self), [NSString class]);
    isRtl = [((id<ADTextDirectionHeuristic>) nil_chk(heuristic)) isRtlWithJavaLangCharSequence:text withInt:0 withInt:[((NSString *) nil_chk(text)) java_length]];
  }
  switch ([minor ordinal]) {
    case ADLayout_Alignment_Enum_ALIGN_LEFT:
    ASSpinnerImpl_setHorizontalAligmentLeft(self);
    break;
    case ADLayout_Alignment_Enum_ALIGN_NORMAL:
    if (hasTextDirection) {
      if (isRtl) {
        ASSpinnerImpl_setHorizontalAligmentRight(self);
      }
      else {
        ASSpinnerImpl_setHorizontalAligmentLeft(self);
      }
    }
    else {
      ASSpinnerImpl_setHorizontalAligmentLeft(self);
    }
    break;
    case ADLayout_Alignment_Enum_ALIGN_RIGHT:
    ASSpinnerImpl_setHorizontalAligmentRight(self);
    break;
    case ADLayout_Alignment_Enum_ALIGN_OPPOSITE:
    if (hasTextDirection) {
      if (isRtl) {
        ASSpinnerImpl_setHorizontalAligmentLeft(self);
      }
      else {
        ASSpinnerImpl_setHorizontalAligmentRight(self);
      }
    }
    else {
      ASSpinnerImpl_setHorizontalAligmentRight(self);
    }
    break;
    case ADLayout_Alignment_Enum_ALIGN_CENTER:
    ASSpinnerImpl_setHorizontalAligmentCenter(self);
    break;
    default:
    ASSpinnerImpl_setHorizontalAligmentLeft(self);
    break;
  }
}

id ASSpinnerImpl_getGravity(ASSpinnerImpl *self) {
  ASBaseMeasurableView_VerticalAligment *verticalAligment = [((ADSpinner *) nil_chk(self->measurableView_)) getVerticalAligment];
  if (verticalAligment == nil) {
    verticalAligment = JreLoadEnum(ASBaseMeasurableView_VerticalAligment, top);
  }
  jint gravityVertical = 0;
  switch ([verticalAligment ordinal]) {
    case ASBaseMeasurableView_VerticalAligment_Enum_top:
    gravityVertical = ASGravityConverter_TOP;
    break;
    case ASBaseMeasurableView_VerticalAligment_Enum_middle:
    gravityVertical = ASGravityConverter_CENTER_VERTICAL;
    break;
    case ASBaseMeasurableView_VerticalAligment_Enum_bottom:
    gravityVertical = ASGravityConverter_BOTTOM;
    break;
    default:
    break;
  }
  jint aligment = ASSpinnerImpl_getTextAlignment(self);
  jint gravitHorizontal = 0;
  switch (aligment) {
    case ASSpinnerImpl_TEXT_ALIGN_CENTER:
    gravitHorizontal = ASGravityConverter_CENTER_HORIZONTAL;
    break;
    case ASSpinnerImpl_TEXT_ALIGN_LEFT:
    gravitHorizontal = ASGravityConverter_LEFT;
    break;
    case ASSpinnerImpl_TEXT_ALIGN_RIGHT:
    gravitHorizontal = ASGravityConverter_RIGHT;
    break;
    default:
    break;
  }
  jint gravity = gravitHorizontal | gravityVertical;
  return JavaLangInteger_valueOfWithInt_(gravity);
}

void ASSpinnerImpl_setDrawableIconSizeWithId_(ASSpinnerImpl *self, id objValue) {
  [self applyAttributeCommandWithNSString:@"drawableStart" withNSString:@"drawableIconSize" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableIconSize" } count:1 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ objValue } count:1 type:NSObject_class_()]];
  [self applyAttributeCommandWithNSString:@"drawableEnd" withNSString:@"drawableIconSize" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableIconSize" } count:1 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ objValue } count:1 type:NSObject_class_()]];
  [self applyAttributeCommandWithNSString:@"drawableTop" withNSString:@"drawableIconSize" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableIconSize" } count:1 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ objValue } count:1 type:NSObject_class_()]];
  [self applyAttributeCommandWithNSString:@"drawableBottom" withNSString:@"drawableIconSize" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableIconSize" } count:1 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ objValue } count:1 type:NSObject_class_()]];
}

void ASSpinnerImpl_setTypeFaceWithId_withNSString_(ASSpinnerImpl *self, id objValue, NSString *strValue) {
  ASSpinnerImpl_setFontFamilyWithId_withNSString_(self, objValue, strValue);
}

void ASSpinnerImpl_setFontFamilyWithId_withNSString_(ASSpinnerImpl *self, id objValue, NSString *strValue) {
  if ([objValue isKindOfClass:[JavaLangInteger class]]) {
    objValue = ASPluginInvoker_convertFromWithASIConverter_withJavaUtilMap_withId_withASIFragment_(ASConverterFactory_getWithNSString_(ASCommonConverters_font), nil, strValue, self->fragment_);
  }
  self->fontDescriptors_ = (id<JavaUtilMap>) cast_check(objValue, JavaUtilMap_class_());
  jint style = ASSpinnerImpl_nativeGetFontStyle(self);
  jint height = ASSpinnerImpl_nativeGetFontSize(self);
  NSString *weight = @"400";
  if ((style & ASSpinnerImpl_BOLD_FONT_TRAIT) != 0) {
    weight = @"700";
  }
  NSString *fontStyle = @"normal";
  if ((style & ASSpinnerImpl_ITALIC_FONT_TRAIT) != 0) {
    fontStyle = @"italic";
  }
  ASFontDescriptor *fontDescriptor = [((id<JavaUtilMap>) nil_chk(self->fontDescriptors_)) getWithId:JreStrcat("$C$", fontStyle, '_', weight)];
  ASSpinnerImpl_nativeSetCustomFontWithInt_withASFontDescriptor_(self, height, fontDescriptor);
}

void ASSpinnerImpl_setTextStyleWithId_(ASSpinnerImpl *self, id objValue) {
  jint value = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
  if (self->fontDescriptors_ != nil) {
    jint height = ASSpinnerImpl_nativeGetFontSize(self);
    NSString *weight = @"400";
    if ((value & (jint) 0x1) != 0) {
      weight = @"700";
    }
    NSString *fontStyle = @"normal";
    if ((value & (jint) 0x2) != 0) {
      fontStyle = @"italic";
    }
    ASFontDescriptor *fontDescriptor = [((id<JavaUtilMap>) nil_chk(self->fontDescriptors_)) getWithId:JreStrcat("$C$", fontStyle, '_', weight)];
    ASSpinnerImpl_nativeSetCustomFontWithInt_withASFontDescriptor_(self, height, fontDescriptor);
  }
  else {
    jint style = ASSpinnerImpl_NORMAL_FONT_TRAIT;
    if ((value & (jint) 0x1) != 0) {
      style = style | ASSpinnerImpl_BOLD_FONT_TRAIT;
    }
    if ((value & (jint) 0x2) != 0) {
      style = style | ASSpinnerImpl_ITALIC_FONT_TRAIT;
    }
    ASSpinnerImpl_nativeSetFontStyleWithInt_(self, style);
  }
}

jint ASSpinnerImpl_nativeGetFontSize(ASSpinnerImpl *self) {
  return JreFpToInt(JavaLangMath_ceilWithDouble_([((JavaLangFloat *) nil_chk((JavaLangFloat *) cast_chk(ASSpinnerImpl_getTextSize(self), [JavaLangFloat class]))) floatValue]));
}

jint ASSpinnerImpl_nativeGetFontStyle(ASSpinnerImpl *self) {
  ASUITextField* label = ((ASUITextField*)self->uiView_);
  return label.font.fontDescriptor.symbolicTraits;
}

void ASSpinnerImpl_nativeSetCustomFontWithInt_withASFontDescriptor_(ASSpinnerImpl *self, jint height, ASFontDescriptor *fontDescriptor) {
  ASUITextField* label = ((ASUITextField*)self->uiView_);
  UIFont* font = [UIFont fontWithName:[fontDescriptor getName] size:height];
  if (font == nil) {
    [NSException raise:@"InitNotImplemented" format:@"%@", [NSString stringWithFormat:@"Failed to load the %@ font. Make sure the font file is included in the project and the font name is spelled correctly.", [fontDescriptor getName]]];
  }
  if ([fontDescriptor getStyle] != 0) {
    UIFontDescriptor* fontD = [font.fontDescriptor fontDescriptorWithSymbolicTraits:[fontDescriptor getStyle]];
    ((ASUITextField*)label).font = [UIFont fontWithDescriptor:fontD size:0];
  } else {
    ((ASUITextField*)label).font = font;
  }
}

void ASSpinnerImpl_nativeSetFontStyleWithInt_(ASSpinnerImpl *self, jint style) {
  ASUITextField* label = ((ASUITextField*)self->uiView_);
  UIFontDescriptor* fontD = [label.font.fontDescriptor fontDescriptorWithSymbolicTraits:style];
  ((ASUITextField*)label).font = [UIFont fontWithDescriptor:fontD size:0];
}

id ASSpinnerImpl_getPaddingTop(ASSpinnerImpl *self) {
  return JavaLangInteger_valueOfWithInt_([((ADView *) nil_chk(((ADView *) cast_chk([self asWidget], [ADView class])))) getPaddingTop]);
}

id ASSpinnerImpl_getPaddingEnd(ASSpinnerImpl *self) {
  return JavaLangInteger_valueOfWithInt_([((ADView *) nil_chk(((ADView *) cast_chk([self asWidget], [ADView class])))) getPaddingEnd]);
}

id ASSpinnerImpl_getPaddingStart(ASSpinnerImpl *self) {
  return JavaLangInteger_valueOfWithInt_([((ADView *) nil_chk(((ADView *) cast_chk([self asWidget], [ADView class])))) getPaddingStart]);
}

id ASSpinnerImpl_getPaddingLeft(ASSpinnerImpl *self) {
  return JavaLangInteger_valueOfWithInt_([((ADView *) nil_chk(((ADView *) cast_chk([self asWidget], [ADView class])))) getPaddingLeft]);
}

id ASSpinnerImpl_getPaddingRight(ASSpinnerImpl *self) {
  return JavaLangInteger_valueOfWithInt_([((ADView *) nil_chk(((ADView *) cast_chk([self asWidget], [ADView class])))) getPaddingRight]);
}

id ASSpinnerImpl_getPaddingBottom(ASSpinnerImpl *self) {
  return JavaLangInteger_valueOfWithInt_([((ADView *) nil_chk(((ADView *) cast_chk([self asWidget], [ADView class])))) getPaddingBottom]);
}

void ASSpinnerImpl_setPaddingVerticalWithId_(ASSpinnerImpl *self, id objValue) {
  [self setPaddingTopWithId:objValue];
  [self setPaddingBottomWithId:objValue];
}

void ASSpinnerImpl_setPaddingHorizontalWithId_(ASSpinnerImpl *self, id objValue) {
  [self setPaddingLeftWithId:objValue];
  [self setPaddingRightWithId:objValue];
}

void ASSpinnerImpl_setPaddingEndWithId_(ASSpinnerImpl *self, id objValue) {
  [self setPaddingRightWithId:objValue];
}

void ASSpinnerImpl_setPaddingStartWithId_(ASSpinnerImpl *self, id objValue) {
  [self setPaddingLeftWithId:objValue];
}

id ASSpinnerImpl_getTextSize(ASSpinnerImpl *self) {
  return [JavaLangFloat valueOfWithFloat:((ASUITextField*)self.uiView).font.pointSize];
}

void ASSpinnerImpl_setMyTextSizeWithId_(ASSpinnerImpl *self, id objValue) {
  jfloat fontSize = [((JavaLangFloat *) nil_chk(((JavaLangFloat *) cast_chk(objValue, [JavaLangFloat class])))) floatValue] * [((id<ASIActivity>) nil_chk([((id<ASIFragment>) nil_chk([self getFragment])) getRootActivity])) getScaleFactor];
  ASSpinnerImpl_nativeSetTextSizeWithInt_(self, JreFpToInt(fontSize));
}

void ASSpinnerImpl_nativeSetTextSizeWithInt_(ASSpinnerImpl *self, jint value) {
  [((ASUITextField*)self.uiView) setFont: [((ASUITextField*)self.uiView).font fontWithSize: value]];
}

void ASSpinnerImpl_setVerticalAligmentCenter(ASSpinnerImpl *self) {
  [((ADSpinner *) nil_chk(self->measurableView_)) setVerticalAligmentWithASBaseMeasurableView_VerticalAligment:JreLoadEnum(ASBaseMeasurableView_VerticalAligment, middle)];
  ASSpinnerImpl_nativeSetVerticalAligmentCenter(self);
}

void ASSpinnerImpl_setVerticalAligmentBottom(ASSpinnerImpl *self) {
  [((ADSpinner *) nil_chk(self->measurableView_)) setVerticalAligmentWithASBaseMeasurableView_VerticalAligment:JreLoadEnum(ASBaseMeasurableView_VerticalAligment, bottom)];
  ASSpinnerImpl_nativeSetVerticalAligmentBottom(self);
}

void ASSpinnerImpl_setVerticalAligmentTop(ASSpinnerImpl *self) {
  [((ADSpinner *) nil_chk(self->measurableView_)) setVerticalAligmentWithASBaseMeasurableView_VerticalAligment:JreLoadEnum(ASBaseMeasurableView_VerticalAligment, top)];
  ASSpinnerImpl_nativeSetVerticalAligmentTop(self);
}

void ASSpinnerImpl_setHorizontalAligmentCenter(ASSpinnerImpl *self) {
  ((ASUITextField*)self.uiView).textAlignment = NSTextAlignmentCenter;
}

void ASSpinnerImpl_setHorizontalAligmentRight(ASSpinnerImpl *self) {
  ASSpinnerImpl_setHorizontalAligmentRightInternal(self);
}

void ASSpinnerImpl_setHorizontalAligmentRightInternal(ASSpinnerImpl *self) {
  ((ASUITextField*)self.uiView).textAlignment = NSTextAlignmentRight;
}

void ASSpinnerImpl_setHorizontalAligmentLeft(ASSpinnerImpl *self) {
  ASSpinnerImpl_setHorizontalAligmentLeftInternal(self);
}

void ASSpinnerImpl_setHorizontalAligmentLeftInternal(ASSpinnerImpl *self) {
  ((ASUITextField*)self.uiView).textAlignment = NSTextAlignmentLeft;
}

jint ASSpinnerImpl_getTextAlignment(ASSpinnerImpl *self) {
  int alignment = (int) ((ASUITextField*)self.uiView).textAlignment;
  
  if (alignment == NSTextAlignmentCenter) {
    return 2;
  }
  
  if (alignment == NSTextAlignmentLeft) {
    return 0;
  }
  
  if (alignment == NSTextAlignmentRight) {
    return 1;
  }
  
  return 0;
}

void ASSpinnerImpl_setDrawablePaddingWithId_(ASSpinnerImpl *self, id objValue) {
  [((ADSpinner *) nil_chk(self->measurableView_)) setDrawablePaddingWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
  ASSpinnerImpl_updatePadding(self);
}

void ASSpinnerImpl_setDrawableBottomWithId_(ASSpinnerImpl *self, id objValue) {
  if ([@"@null" isEqual:objValue]) {
    [((ADSpinner *) nil_chk(self->measurableView_)) setBottomDrawableWithADDrawable:nil];
    [self applyAttributeCommandWithNSString:@"drawableBottom" withNSString:@"drawDrawableIcon" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){  } count:0 type:NSString_class_()] withBoolean:false withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"bottom" } count:1 type:NSObject_class_()]];
  }
  else if (objValue != nil && [objValue isKindOfClass:[ADDrawable class]]) {
    [((ADSpinner *) nil_chk(self->measurableView_)) setBottomDrawableWithADDrawable:(ADDrawable *) cast_chk(objValue, [ADDrawable class])];
    [self applyAttributeCommandWithNSString:@"drawableBottom" withNSString:@"drawDrawableIcon" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){  } count:0 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"bottom" } count:1 type:NSObject_class_()]];
    ASSpinnerImpl_updatePadding(self);
  }
}

void ASSpinnerImpl_setDrawableTopWithId_(ASSpinnerImpl *self, id objValue) {
  if ([@"@null" isEqual:objValue]) {
    [((ADSpinner *) nil_chk(self->measurableView_)) setTopDrawableWithADDrawable:nil];
    [self applyAttributeCommandWithNSString:@"drawableTop" withNSString:@"drawDrawableIcon" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){  } count:0 type:NSString_class_()] withBoolean:false withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"top" } count:1 type:NSObject_class_()]];
  }
  else if (objValue != nil && [objValue isKindOfClass:[ADDrawable class]]) {
    [((ADSpinner *) nil_chk(self->measurableView_)) setTopDrawableWithADDrawable:(ADDrawable *) cast_chk(objValue, [ADDrawable class])];
    [self applyAttributeCommandWithNSString:@"drawableTop" withNSString:@"drawDrawableIcon" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){  } count:0 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"top" } count:1 type:NSObject_class_()]];
    ASSpinnerImpl_updatePadding(self);
  }
}

void ASSpinnerImpl_setDrawableRightWithNSString_withId_(ASSpinnerImpl *self, NSString *originalAttr, id objValue) {
  if (ASViewImpl_isRTLLayoutWithASIWidget_(self)) {
    ASSpinnerImpl_setDrawableLeftInternalWithNSString_withId_(self, originalAttr, objValue);
  }
  else {
    ASSpinnerImpl_setDrawableRightInternalWithNSString_withId_(self, originalAttr, objValue);
  }
}

void ASSpinnerImpl_setDrawableRightInternalWithNSString_withId_(ASSpinnerImpl *self, NSString *originalAttr, id objValue) {
  if ([@"@null" isEqual:objValue]) {
    [((ADSpinner *) nil_chk(self->measurableView_)) setRightDrawableWithADDrawable:nil];
    [self applyAttributeCommandWithNSString:originalAttr withNSString:@"drawDrawableIcon" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){  } count:0 type:NSString_class_()] withBoolean:false withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"right" } count:1 type:NSObject_class_()]];
  }
  else if (objValue != nil && [objValue isKindOfClass:[ADDrawable class]]) {
    [((ADSpinner *) nil_chk(self->measurableView_)) setRightDrawableWithADDrawable:(ADDrawable *) cast_chk(objValue, [ADDrawable class])];
    [self applyAttributeCommandWithNSString:originalAttr withNSString:@"drawDrawableIcon" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){  } count:0 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"right" } count:1 type:NSObject_class_()]];
    ASSpinnerImpl_updatePadding(self);
  }
}

void ASSpinnerImpl_setDrawableLeftWithNSString_withId_(ASSpinnerImpl *self, NSString *originalAttr, id objValue) {
  if (objValue != nil) {
    if (ASViewImpl_isRTLLayoutWithASIWidget_(self)) {
      ASSpinnerImpl_setDrawableRightInternalWithNSString_withId_(self, originalAttr, objValue);
    }
    else {
      ASSpinnerImpl_setDrawableLeftInternalWithNSString_withId_(self, originalAttr, objValue);
    }
  }
}

void ASSpinnerImpl_setDrawableLeftInternalWithNSString_withId_(ASSpinnerImpl *self, NSString *originalAttr, id objValue) {
  if ([@"@null" isEqual:objValue]) {
    [((ADSpinner *) nil_chk(self->measurableView_)) setLeftDrawableWithADDrawable:nil];
    [self applyAttributeCommandWithNSString:originalAttr withNSString:@"drawDrawableIcon" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){  } count:0 type:NSString_class_()] withBoolean:false withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"left" } count:1 type:NSObject_class_()]];
  }
  else if (objValue != nil && [objValue isKindOfClass:[ADDrawable class]]) {
    [((ADSpinner *) nil_chk(self->measurableView_)) setLeftDrawableWithADDrawable:(ADDrawable *) cast_chk(objValue, [ADDrawable class])];
    [self applyAttributeCommandWithNSString:originalAttr withNSString:@"drawDrawableIcon" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){  } count:0 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"left" } count:1 type:NSObject_class_()]];
    ASSpinnerImpl_updatePadding(self);
  }
}

jint ASSpinnerImpl_getImageHeightWithId_(ASSpinnerImpl *self, id objValue) {
  if ([objValue isKindOfClass:[UIImage class]]) {
    UIImage* image = ((UIImage*) objValue);
    return image.size.height;
  }
  
  return 0;
}

jint ASSpinnerImpl_getImageWidthWithId_(ASSpinnerImpl *self, id objValue) {
  if ([objValue isKindOfClass:[UIImage class]]) {
    UIImage* image = ((UIImage*) objValue);
    return image.size.width;
  }
  
  return 0;
}

id ASSpinnerImpl_getDrawablePadding(ASSpinnerImpl *self) {
  return JavaLangInteger_valueOfWithInt_([((ADSpinner *) nil_chk(self->measurableView_)) getDrawablePadding]);
}

void ASSpinnerImpl_setDrawableTintModeWithId_(ASSpinnerImpl *self, id value) {
  if ([((ADSpinner *) nil_chk(self->measurableView_)) getLeftDrawable] != nil) {
    [self applyAttributeCommandWithNSString:@"drawableStart" withNSString:@"cgTintColor" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTintMode" } count:1 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTintMode", value } count:2 type:NSObject_class_()]];
    [self applyAttributeCommandWithNSString:@"drawableLeft" withNSString:@"cgTintColor" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTintMode" } count:1 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTintMode", value } count:2 type:NSObject_class_()]];
  }
  if ([((ADSpinner *) nil_chk(self->measurableView_)) getRightDrawable] != nil) {
    [self applyAttributeCommandWithNSString:@"drawableRight" withNSString:@"cgTintColor" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTintMode" } count:1 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTintMode", value } count:2 type:NSObject_class_()]];
    [self applyAttributeCommandWithNSString:@"drawableEnd" withNSString:@"cgTintColor" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTintMode" } count:1 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTintMode", value } count:2 type:NSObject_class_()]];
  }
  if ([((ADSpinner *) nil_chk(self->measurableView_)) getTopDrawable] != nil) {
    [self applyAttributeCommandWithNSString:@"drawableTop" withNSString:@"cgTintColor" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTintMode" } count:1 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTintMode", value } count:2 type:NSObject_class_()]];
  }
  if ([((ADSpinner *) nil_chk(self->measurableView_)) getBottomDrawable] != nil) {
    [self applyAttributeCommandWithNSString:@"drawableBottom" withNSString:@"cgTintColor" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTintMode" } count:1 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTintMode", value } count:2 type:NSObject_class_()]];
  }
}

void ASSpinnerImpl_setDrawableTintWithId_(ASSpinnerImpl *self, id objValue) {
  if ([objValue isKindOfClass:[ADColorStateList class]]) {
    ADColorStateList *colorStateList = (ADColorStateList *) objValue;
    self->drawableTint_ = colorStateList;
    objValue = JavaLangInteger_valueOfWithInt_([((ADColorStateList *) nil_chk(self->drawableTint_)) getColorForStateWithIntArray:[((ADSpinner *) nil_chk(self->measurableView_)) getDrawableState] withInt:ADColor_RED]);
  }
  if ([((ADSpinner *) nil_chk(self->measurableView_)) getLeftDrawable] != nil) {
    [self applyAttributeCommandWithNSString:@"drawableLeft" withNSString:@"cgTintColor" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTint" } count:1 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTint", ASViewImpl_getColorWithId_(objValue) } count:2 type:NSObject_class_()]];
    [self applyAttributeCommandWithNSString:@"drawableStart" withNSString:@"cgTintColor" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTint" } count:1 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTint", ASViewImpl_getColorWithId_(objValue) } count:2 type:NSObject_class_()]];
  }
  if ([((ADSpinner *) nil_chk(self->measurableView_)) getRightDrawable] != nil) {
    [self applyAttributeCommandWithNSString:@"drawableRight" withNSString:@"cgTintColor" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTint" } count:1 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTint", ASViewImpl_getColorWithId_(objValue) } count:2 type:NSObject_class_()]];
    [self applyAttributeCommandWithNSString:@"drawableEnd" withNSString:@"cgTintColor" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTint" } count:1 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTint", ASViewImpl_getColorWithId_(objValue) } count:2 type:NSObject_class_()]];
  }
  if ([((ADSpinner *) nil_chk(self->measurableView_)) getTopDrawable] != nil) {
    [self applyAttributeCommandWithNSString:@"drawableTop" withNSString:@"cgTintColor" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTint" } count:1 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTint", ASViewImpl_getColorWithId_(objValue) } count:2 type:NSObject_class_()]];
  }
  if ([((ADSpinner *) nil_chk(self->measurableView_)) getBottomDrawable] != nil) {
    [self applyAttributeCommandWithNSString:@"drawableBottom" withNSString:@"cgTintColor" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTint" } count:1 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTint", ASViewImpl_getColorWithId_(objValue) } count:2 type:NSObject_class_()]];
  }
}

void ASSpinnerImpl_setTextColorWithId_(ASSpinnerImpl *self, id objValue) {
  if ([objValue isKindOfClass:[ADColorStateList class]]) {
    ADColorStateList *colorStateList = (ADColorStateList *) objValue;
    [((ADSpinner *) nil_chk(self->measurableView_)) setTextColorWithADColorStateList:colorStateList];
    objValue = JavaLangInteger_valueOfWithInt_([((ADSpinner *) nil_chk(self->measurableView_)) getCurrentTextColor]);
  }
  [self setTextColorWithId:self->uiView_ withId:ASViewImpl_getColorWithId_(objValue)];
}

id ASSpinnerImpl_getTextColorState(ASSpinnerImpl *self) {
  return [((ADSpinner *) nil_chk(self->measurableView_)) getTextColors];
}

void ASSpinnerImpl_drawableStateChangeWithNSString_withADDrawable_(ASSpinnerImpl *self, NSString *type, ADDrawable *dr) {
  IOSIntArray *state = [((ADSpinner *) nil_chk(self->measurableView_)) getDrawableState];
  if (dr != nil && [dr isStateful] && [dr setStateWithIntArray:state]) {
    switch (JreIndexOfStr(type, (id[]){ @"bottom", @"top", @"left", @"right" }, 4)) {
      case 0:
      ASSpinnerImpl_setDrawableBottomWithId_(self, dr);
      break;
      case 1:
      ASSpinnerImpl_setDrawableTopWithId_(self, dr);
      break;
      case 2:
      ASSpinnerImpl_setDrawableLeftWithNSString_withId_(self, @"drawableLeft", dr);
      break;
      case 3:
      ASSpinnerImpl_setDrawableRightWithNSString_withId_(self, @"drawableRight", dr);
      break;
      default:
      break;
    }
  }
  [self invalidate];
}

jint ASSpinnerImpl_getLineHeight(ASSpinnerImpl *self) {
  return ceil(((ASUITextField*)self.uiView).font.lineHeight);
}

jint ASSpinnerImpl_getBorderWidth(ASSpinnerImpl *self) {
  return 0;
}

void ASSpinnerImpl_setModelOptionTextPathWithId_(ASSpinnerImpl *self, id objValue) {
  self->modelOptionTextPath_ = (NSString *) cast_chk(objValue, [NSString class]);
}

void ASSpinnerImpl_setModelOptionValuePathWithId_(ASSpinnerImpl *self, id objValue) {
  self->modelOptionValuePath_ = (NSString *) cast_chk(objValue, [NSString class]);
}

id ASSpinnerImpl_getOptionValueFromLoopParamWithASLoopParam_withNSString_(ASSpinnerImpl *self, ASLoopParam *loopParam, NSString *path) {
  ASModelExpressionParser_ModelFromScopeHolder *modelFromScopeHolder = ASModelExpressionParser_parseModelFromScopeWithNSString_(path);
  [self setLoopParamWithASLoopParam:loopParam];
  id obj = [self getModelFromScopeWithNSString:((ASModelExpressionParser_ModelFromScopeHolder *) nil_chk(modelFromScopeHolder))->varName_ withASModelScope:modelFromScopeHolder->varScope_];
  id val = [self getModelByPathWithNSString:modelFromScopeHolder->varPath_ withId:obj];
  if (val == nil) {
    val = @"";
  }
  return val;
}

void ASSpinnerImpl_setValuesWithId_(ASSpinnerImpl *self, id objValue) {
  self->values_ = (id<JavaUtilList>) cast_check(objValue, JavaUtilList_class_());
}

void ASSpinnerImpl_setSelectedValueWithId_(ASSpinnerImpl *self, id objValue) {
  if ([objValue isKindOfClass:[NSString class]]) {
    objValue = [self quickConvertWithId:objValue withNSString:ASCommonConverters_resourcestring];
  }
  if (self->values_ != nil) {
    jint index = [self->values_ indexOfWithId:objValue];
    ASSpinnerImpl_setSelectionWithId_(self, JavaLangInteger_valueOfWithInt_(index));
  }
  else if (self->dataList_ != nil && [self->dataList_ size] > 0) {
    for (jint i = 0; i < [((id<JavaUtilList>) nil_chk(self->dataList_)) size]; i++) {
      ASLoopParam *loopParam = [((id<JavaUtilList>) nil_chk(self->dataList_)) getWithInt:i];
      if (self->modelOptionValuePath_ != nil) {
        id data = ASSpinnerImpl_getOptionValueFromLoopParamWithASLoopParam_withNSString_(self, loopParam, self->modelOptionValuePath_);
        if ([nil_chk(data) isEqual:objValue]) {
          ASSpinnerImpl_setSelectionWithId_(self, JavaLangInteger_valueOfWithInt_(i));
          break;
        }
      }
      else if (self->modelOptionTextPath_ != nil) {
        id data = ASSpinnerImpl_getOptionValueFromLoopParamWithASLoopParam_withNSString_(self, loopParam, self->modelOptionTextPath_);
        if ([nil_chk(data) isEqual:objValue]) {
          ASSpinnerImpl_setSelectionWithId_(self, JavaLangInteger_valueOfWithInt_(i));
          break;
        }
      }
    }
  }
  else {
    self->tmpSelectedValue_ = objValue;
  }
}

id ASSpinnerImpl_getSelectedValue(ASSpinnerImpl *self) {
  jint selectedItemPosition = ASSpinnerImpl_getSelectedItemPosition(self);
  if (self->values_ != nil && [self->values_ size] > selectedItemPosition) {
    return [self->values_ getWithInt:selectedItemPosition];
  }
  if (self->dataList_ != nil && [self->dataList_ size] > 0) {
    if (self->modelOptionValuePath_ != nil) {
      return ASSpinnerImpl_getOptionValueFromLoopParamWithASLoopParam_withNSString_(self, [self->dataList_ getWithInt:selectedItemPosition], self->modelOptionValuePath_);
    }
    if (self->modelOptionTextPath_ != nil) {
      return ASSpinnerImpl_getOptionValueFromLoopParamWithASLoopParam_withNSString_(self, [self->dataList_ getWithInt:selectedItemPosition], self->modelOptionTextPath_);
    }
  }
  return nil;
}

void ASSpinnerImpl_updatePadding(ASSpinnerImpl *self) {
}

void ASSpinnerImpl_nativeSetVerticalAligmentCenter(ASSpinnerImpl *self) {
  ((ASUITextField*)self.uiView).contentVerticalAlignment = UIControlContentVerticalAlignmentCenter;
}

void ASSpinnerImpl_nativeSetVerticalAligmentBottom(ASSpinnerImpl *self) {
  ((ASUITextField*)self.uiView).contentVerticalAlignment = UIControlContentVerticalAlignmentBottom;
}

void ASSpinnerImpl_nativeSetVerticalAligmentTop(ASSpinnerImpl *self) {
  ((ASUITextField*)self.uiView).contentVerticalAlignment = UIControlContentVerticalAlignmentTop;
}

void ASSpinnerImpl_setHintColorWithId_(ASSpinnerImpl *self, id objValue) {
  if ([objValue isKindOfClass:[ADColorStateList class]]) {
    ADColorStateList *colorStateList = (ADColorStateList *) objValue;
    [((ADSpinner *) nil_chk(self->measurableView_)) setHintTextColorWithADColorStateList:colorStateList];
    objValue = JavaLangInteger_valueOfWithInt_([((ADSpinner *) nil_chk(self->measurableView_)) getCurrentHintTextColor]);
  }
  ASSpinnerImpl_nativeSetHintColorWithId_(self, ASViewImpl_getColorWithId_(objValue));
}

void ASSpinnerImpl_nativeSetHintColorWithId_(ASSpinnerImpl *self, id value) {
  ((ASUITextField*)self.uiView).placeHolderColor = (UIColor*) value;
}

void ASSpinnerImpl_syncPlaceholderLabel(ASSpinnerImpl *self) {
  [self invalidate];
}

void ASSpinnerImpl_becomeFirstResponder(ASSpinnerImpl *self) {
  ASUITextField* tv = ((ASUITextField*)self.uiView);
  [tv becomeFirstResponder];
}

void ASSpinnerImpl_setHintTextFormatWithId_(ASSpinnerImpl *self, id objValue) {
  [self applyAttributeCommandWithNSString:@"hint" withNSString:ASCommonConverters_command_textformatter withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"hintTextFormat" } count:1 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ (NSString *) cast_chk(objValue, [NSString class]) } count:1 type:NSObject_class_()]];
}

void ASSpinnerImpl_nativeCreateWithJavaUtilMap_(ASSpinnerImpl *self, id<JavaUtilMap> params) {
  self->uiView_ = ASSpinnerImpl_nativeCreateView(self);
  [self registerForAttributeCommandChainWithNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"hint" } count:1 type:NSString_class_()]];
  [self registerForAttributeCommandChainWithPhaseWithNSString:@"predraw" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableStart", @"drawableEnd", @"drawableLeft", @"drawableTop", @"drawableRight", @"drawableBottom", @"drawablePadding", @"drawableTint", @"drawableTintMode" } count:9 type:NSString_class_()]];
}

id ASSpinnerImpl_nativeCreateView(ASSpinnerImpl *self) {
  ASUITextField* uiView = [ASUITextField new];
  UIPickerView * picker = [UIPickerView new];
  picker.delegate = self;
  picker.dataSource = self;
  picker.showsSelectionIndicator = YES;
  [uiView setInputView:picker];
  return uiView;
}

NSString *ASSpinnerImpl_getSelectedTextWithInt_(ASSpinnerImpl *self, jint selectedIndex) {
  return [((id<JavaUtilList>) nil_chk(self->entries_)) getWithInt:selectedIndex];
}

void ASSpinnerImpl_triggerOnSelectWithInt_(ASSpinnerImpl *self, jint selectedIndex) {
  if (self->onItemSelectedListener_ != nil) {
    [self->onItemSelectedListener_ onItemSelectedWithASSpinnerImpl_AdapterView:new_ASSpinnerImpl_AdapterView_init() withADView:self->measurableView_ withInt:selectedIndex withLong:0];
  }
}

void ASSpinnerImpl_setOnItemSelectedListenerWithASSpinnerImpl_AdapterView_OnItemSelectedListener_(ASSpinnerImpl *self, id<ASSpinnerImpl_AdapterView_OnItemSelectedListener> onItemSelectedListener) {
  self->onItemSelectedListener_ = onItemSelectedListener;
}

void ASSpinnerImpl_setEntriesWithId_(ASSpinnerImpl *self, id objValue) {
  self->entries_ = (id<JavaUtilList>) cast_check(objValue, JavaUtilList_class_());
}

void ASSpinnerImpl_setSelectionWithId_(ASSpinnerImpl *self, id objValue) {
  ASSpinnerImpl_nativeSetSelectionWithInt_(self, [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]);
}

void ASSpinnerImpl_nativeSetSelectionWithInt_(ASSpinnerImpl *self, jint selectedIndex) {
  UIPickerView *picker = ((UIPickerView*) ((ASUITextField*)[self asNativeWidget]).inputView);
  [picker selectRow:selectedIndex inComponent:0 animated:NO];
  ((ASUITextField*) [self asNativeWidget]).text = [self getSelectedTextWithInt: selectedIndex];
}

void ASSpinnerImpl_setTextColorLinkWithADColorStateList_(ASSpinnerImpl *self, ADColorStateList *linkTextColors) {
}

id ASSpinnerImpl_getMyText(ASSpinnerImpl *self) {
  return ((ASUITextField*)self.uiView).text;
}

jint ASSpinnerImpl_getSelectedItemPosition(ASSpinnerImpl *self) {
  UIPickerView *picker = ((UIPickerView*) ((ASUITextField*)[self asNativeWidget]).inputView);
  return (int) [picker selectedRowInComponent:0];
}

void ASSpinnerImpl_setErrorWithId_(ASSpinnerImpl *self, id object) {
}

void ASSpinnerImpl_triggerChangeOnLoad(ASSpinnerImpl *self) {
  jint selectedPosition = ASSpinnerImpl_getSelectedItemPosition(self);
  if (selectedPosition == 0) {
    ASSpinnerImpl_triggerOnSelectWithInt_(self, 0);
  }
}

void ASSpinnerImpl_addTriggerChangeOnLoadListener(ASSpinnerImpl *self) {
  if (self->postMeasureHandler_ == nil) {
    self->postMeasureHandler_ = new_ASSpinnerImpl_PostMeasureHandler_initWithASSpinnerImpl_withNSString_(self, self->POST_MEASURE_EVENT_);
    [((ASEventBus *) nil_chk([((id<ASIFragment>) nil_chk(self->fragment_)) getEventBus])) onWithNSString:self->POST_MEASURE_EVENT_ withASEventBusHandlerArray:[IOSObjectArray newArrayWithObjects:(id[]){ self->postMeasureHandler_ } count:1 type:ASEventBusHandler_class_()]];
  }
}

void ASSpinnerImpl_selectSpinnerIfRequired(ASSpinnerImpl *self) {
  ASSpinnerImpl_addTriggerChangeOnLoadListener(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASSpinnerImpl)

@implementation ASSpinnerImpl_DrawableTintMode

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASSpinnerImpl_DrawableTintMode_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilMap>)getMapping {
  return mapping_;
}

- (JavaLangInteger *)getDefault {
  return JavaLangInteger_valueOfWithInt_(0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMapping);
  methods[2].selector = @selector(getDefault);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapping_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "LASSpinnerImpl;" };
  static const J2ObjcClassInfo _ASSpinnerImpl_DrawableTintMode = { "DrawableTintMode", "com.ashera.layout", ptrTable, methods, fields, 7, 0x18, 3, 1, 2, -1, -1, -1, -1 };
  return &_ASSpinnerImpl_DrawableTintMode;
}

@end

void ASSpinnerImpl_DrawableTintMode_init(ASSpinnerImpl_DrawableTintMode *self) {
  ASAbstractEnumToIntConverter_init(self);
  self->mapping_ = new_JavaUtilHashMap_init();
  {
    (void) [self->mapping_ putWithId:@"add" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, kCGBlendModeOverlay))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"multiply" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, kCGBlendModeMultiply))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"screen" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, kCGBlendModeScreen))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"src_atop" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, kCGBlendModeSourceAtop))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"src_in" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, kCGBlendModeSourceIn))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"src_over" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, kCGBlendModeNormal))];
  }
}

ASSpinnerImpl_DrawableTintMode *new_ASSpinnerImpl_DrawableTintMode_init() {
  J2OBJC_NEW_IMPL(ASSpinnerImpl_DrawableTintMode, init)
}

ASSpinnerImpl_DrawableTintMode *create_ASSpinnerImpl_DrawableTintMode_init() {
  J2OBJC_CREATE_IMPL(ASSpinnerImpl_DrawableTintMode, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASSpinnerImpl_DrawableTintMode)

@implementation ASSpinnerImpl_Font

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASSpinnerImpl_Font_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilMap>)getMapping {
  return mapping_;
}

- (JavaLangInteger *)getDefault {
  return JavaLangInteger_valueOfWithInt_(0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMapping);
  methods[2].selector = @selector(getDefault);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapping_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "LASSpinnerImpl;" };
  static const J2ObjcClassInfo _ASSpinnerImpl_Font = { "Font", "com.ashera.layout", ptrTable, methods, fields, 7, 0x18, 3, 1, 2, -1, -1, -1, -1 };
  return &_ASSpinnerImpl_Font;
}

@end

void ASSpinnerImpl_Font_init(ASSpinnerImpl_Font *self) {
  ASAbstractEnumToIntConverter_init(self);
  self->mapping_ = new_JavaUtilHashMap_init();
  {
    (void) [self->mapping_ putWithId:@"monospace" withId:JavaLangInteger_valueOfWithInt_((jint) 0x3)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"normal" withId:JavaLangInteger_valueOfWithInt_((jint) 0x0)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"sans" withId:JavaLangInteger_valueOfWithInt_((jint) 0x1)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"serif" withId:JavaLangInteger_valueOfWithInt_((jint) 0x2)];
  }
}

ASSpinnerImpl_Font *new_ASSpinnerImpl_Font_init() {
  J2OBJC_NEW_IMPL(ASSpinnerImpl_Font, init)
}

ASSpinnerImpl_Font *create_ASSpinnerImpl_Font_init() {
  J2OBJC_CREATE_IMPL(ASSpinnerImpl_Font, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASSpinnerImpl_Font)

@implementation ASSpinnerImpl_TextStyle

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASSpinnerImpl_TextStyle_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilMap>)getMapping {
  return mapping_;
}

- (JavaLangInteger *)getDefault {
  return JavaLangInteger_valueOfWithInt_(0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMapping);
  methods[2].selector = @selector(getDefault);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapping_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "LASSpinnerImpl;" };
  static const J2ObjcClassInfo _ASSpinnerImpl_TextStyle = { "TextStyle", "com.ashera.layout", ptrTable, methods, fields, 7, 0x18, 3, 1, 2, -1, -1, -1, -1 };
  return &_ASSpinnerImpl_TextStyle;
}

@end

void ASSpinnerImpl_TextStyle_init(ASSpinnerImpl_TextStyle *self) {
  ASAbstractBitFlagConverter_init(self);
  self->mapping_ = new_JavaUtilHashMap_init();
  {
    (void) [self->mapping_ putWithId:@"bold" withId:JavaLangInteger_valueOfWithInt_((jint) 0x1)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"italic" withId:JavaLangInteger_valueOfWithInt_((jint) 0x2)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"normal" withId:JavaLangInteger_valueOfWithInt_((jint) 0x0)];
  }
}

ASSpinnerImpl_TextStyle *new_ASSpinnerImpl_TextStyle_init() {
  J2OBJC_NEW_IMPL(ASSpinnerImpl_TextStyle, init)
}

ASSpinnerImpl_TextStyle *create_ASSpinnerImpl_TextStyle_init() {
  J2OBJC_CREATE_IMPL(ASSpinnerImpl_TextStyle, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASSpinnerImpl_TextStyle)

@implementation ASSpinnerImpl_SpinnerExt

- (id<ASIWidget>)getWidget {
  return this$0_;
}

- (void)setMaxWidthWithInt:(jint)width {
  mMaxWidth_SpinnerExt_ = width;
}

- (void)setMaxHeightWithInt:(jint)height {
  mMaxHeight_ = height;
}

- (jint)getMaxWidth {
  return mMaxWidth_SpinnerExt_;
}

- (jint)getMaxHeight {
  return mMaxHeight_;
}

- (instancetype)initWithASSpinnerImpl:(ASSpinnerImpl *)outer$ {
  ASSpinnerImpl_SpinnerExt_initWithASSpinnerImpl_(self, outer$);
  return self;
}

- (void)onMeasureWithInt:(jint)widthMeasureSpec
                 withInt:(jint)heightMeasureSpec {
  if (mMaxWidth_SpinnerExt_ > 0) {
    widthMeasureSpec = ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_(mMaxWidth_SpinnerExt_, ADView_MeasureSpec_AT_MOST);
  }
  if (mMaxHeight_ > 0) {
    heightMeasureSpec = ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_(mMaxHeight_, ADView_MeasureSpec_AT_MOST);
  }
  [super onMeasureWithInt:widthMeasureSpec withInt:heightMeasureSpec];
  id<ASIWidgetLifeCycleListener> listener = [this$0_ getListener];
  if (listener != nil) {
    [((ASMeasureEvent *) nil_chk(measureFinished_)) setWidthWithInt:[self getMeasuredWidth]];
    [((ASMeasureEvent *) nil_chk(measureFinished_)) setHeightWithInt:[self getMeasuredHeight]];
    [listener eventOccurredWithASIWidgetLifeCycleListener_EventId:JreLoadEnum(ASIWidgetLifeCycleListener_EventId, measureFinished) withASWidgetEvent:measureFinished_];
  }
}

- (void)onLayoutWithBoolean:(jboolean)changed
                    withInt:(jint)l
                    withInt:(jint)t
                    withInt:(jint)r
                    withInt:(jint)b {
  [super onLayoutWithBoolean:changed withInt:l withInt:t withInt:r withInt:b];
  ASViewImpl_setDrawableBoundsWithASIWidget_withInt_withInt_withInt_withInt_(this$0_, l, t, r, b);
  if (![self isOverlay]) {
    ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_([this$0_ asNativeWidget], l, t, r, b);
  }
  [this$0_ replayBufferedEvents];
  ASViewImpl_redrawDrawablesWithASIWidget_(this$0_);
  overlays_ = ASViewImpl_drawOverlayWithASIWidget_withJavaUtilList_(this$0_, overlays_);
  id<ASIWidgetLifeCycleListener> listener = [this$0_ getListener];
  if (listener != nil) {
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setBWithInt:b];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setLWithInt:l];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setRWithInt:r];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setTWithInt:t];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setChangedWithBoolean:changed];
    [listener eventOccurredWithASIWidgetLifeCycleListener_EventId:JreLoadEnum(ASIWidgetLifeCycleListener_EventId, onLayout) withASWidgetEvent:onLayoutEvent_];
  }
  if ([this$0_ isInvalidateOnFrameChange] && [this$0_ isInitialised]) {
    [this$0_ invalidate];
  }
}

- (void)executeWithNSString:(NSString *)method
          withNSObjectArray:(IOSObjectArray *)canvas {
}

- (void)updateMeasuredDimensionWithInt:(jint)width
                               withInt:(jint)height {
  [self setMeasuredDimensionWithInt:width withInt:height];
}

- (id<ASILifeCycleDecorator>)newInstanceWithASIWidget:(id<ASIWidget>)widget {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)setAttributeWithASWidgetAttribute:(ASWidgetAttribute *)widgetAttribute
                             withNSString:(NSString *)strValue
                                   withId:(id)objValue {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (id<JavaUtilList>)getMethods {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)initialized {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (id)getAttributeWithASWidgetAttribute:(ASWidgetAttribute *)widgetAttribute {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)drawableStateChanged {
  [super drawableStateChanged];
  if (![this$0_ isWidgetDisposed]) {
    ASViewImpl_drawableStateChangedWithASIWidget_(this$0_);
  }
}

- (ADView *)inflateViewWithNSString:(NSString *)layout {
  if (templates_ == nil) {
    templates_ = new_JavaUtilHashMap_init();
  }
  id<ASIWidget> template_ = [templates_ getWithId:layout];
  if (template_ == nil) {
    template_ = (id<ASIWidget>) cast_check([this$0_ quickConvertWithId:layout withNSString:@"template"], ASIWidget_class_());
    (void) [((id<JavaUtilMap>) nil_chk(templates_)) putWithId:layout withId:template_];
  }
  id<ASIWidget> widget = [((id<ASIWidget>) nil_chk(template_)) loadLazyWidgetsWithASHasWidgets:[this$0_ getParent]];
  return (ADView *) cast_chk([((id<ASIWidget>) nil_chk(widget)) asWidget], [ADView class]);
}

- (void)remeasure {
  if ([this$0_ getFragment] != nil) {
    [((id<ASIFragment>) nil_chk([this$0_ getFragment])) remeasure];
  }
}

- (void)removeFromParent {
  [((id<ASHasWidgets>) nil_chk([this$0_ getParent])) removeWithASIWidget:this$0_];
}

- (void)getLocationOnScreenWithIntArray:(IOSIntArray *)appScreenLocation {
  *IOSIntArray_GetRef(nil_chk(appScreenLocation), 0) = ASViewImpl_getLocationXOnScreenWithId_([this$0_ asNativeWidget]);
  *IOSIntArray_GetRef(appScreenLocation, 1) = ASViewImpl_getLocationYOnScreenWithId_([this$0_ asNativeWidget]);
}

- (void)getWindowVisibleDisplayFrameWithADRect:(ADRect *)displayFrame {
  ((ADRect *) nil_chk(displayFrame))->left_ = ASViewImpl_getLocationXOnScreenWithId_([this$0_ asNativeWidget]);
  displayFrame->top_ = ASViewImpl_getLocationYOnScreenWithId_([this$0_ asNativeWidget]);
  displayFrame->right_ = displayFrame->left_ + [self getWidth];
  displayFrame->bottom_ = displayFrame->top_ + [self getHeight];
}

- (void)offsetTopAndBottomWithInt:(jint)offset {
  [super offsetTopAndBottomWithInt:offset];
  ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_([this$0_ asNativeWidget], [self getLeft], [self getTop], [self getRight], [self getBottom]);
}

- (void)offsetLeftAndRightWithInt:(jint)offset {
  [super offsetLeftAndRightWithInt:offset];
  ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_([this$0_ asNativeWidget], [self getLeft], [self getTop], [self getRight], [self getBottom]);
}

- (void)setMyAttributeWithNSString:(NSString *)name
                            withId:(id)value {
  if ([((NSString *) nil_chk(name)) isEqual:@"state0"]) {
    [self setState0WithId:value];
    return;
  }
  if ([name isEqual:@"state1"]) {
    [self setState1WithId:value];
    return;
  }
  if ([name isEqual:@"state2"]) {
    [self setState2WithId:value];
    return;
  }
  if ([name isEqual:@"state3"]) {
    [self setState3WithId:value];
    return;
  }
  if ([name isEqual:@"state4"]) {
    [self setState4WithId:value];
    return;
  }
  [this$0_ setAttributeWithNSString:name withId:value withBoolean:!([value isKindOfClass:[NSString class]])];
}

- (void)setVisibilityWithInt:(jint)visibility {
  [super setVisibilityWithInt:visibility];
  ASViewImpl_nativeSetVisibilityWithId_withBoolean_([this$0_ asNativeWidget], visibility != ADView_VISIBLE);
}

- (jint)nativeMeasureWidthWithId:(id)uiView {
  return ASViewImpl_nativeMeasureWidthWithId_(uiView);
}

- (jint)nativeMeasureHeightWithId:(id)uiView
                          withInt:(jint)width {
  return ASViewImpl_nativeMeasureHeightWithId_withInt_(uiView, width);
}

- (void)setState0WithId:(id)value {
  ASViewImpl_setStateWithASIWidget_withInt_withId_(this$0_, 0, value);
}

- (void)setState1WithId:(id)value {
  ASViewImpl_setStateWithASIWidget_withInt_withId_(this$0_, 1, value);
}

- (void)setState2WithId:(id)value {
  ASViewImpl_setStateWithASIWidget_withInt_withId_(this$0_, 2, value);
}

- (void)setState3WithId:(id)value {
  ASViewImpl_setStateWithASIWidget_withInt_withId_(this$0_, 3, value);
}

- (void)setState4WithId:(id)value {
  ASViewImpl_setStateWithASIWidget_withInt_withId_(this$0_, 4, value);
}

- (void)state0 {
  ASViewImpl_stateWithASIWidget_withInt_(this$0_, 0);
}

- (void)state1 {
  ASViewImpl_stateWithASIWidget_withInt_(this$0_, 1);
}

- (void)state2 {
  ASViewImpl_stateWithASIWidget_withInt_(this$0_, 2);
}

- (void)state3 {
  ASViewImpl_stateWithASIWidget_withInt_(this$0_, 3);
}

- (void)state4 {
  ASViewImpl_stateWithASIWidget_withInt_(this$0_, 4);
}

- (void)stateYes {
  ASViewImpl_stateYesWithASIWidget_(this$0_);
}

- (void)stateNo {
  ASViewImpl_stateNoWithASIWidget_(this$0_);
}

- (void)__javaClone:(ASSpinnerImpl_SpinnerExt *)original {
  [super __javaClone:original];
  JreRelease(this$0_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LASIWidget;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x81, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 5, -1, -1, -1, -1 },
    { NULL, "LASILifeCycleDecorator;", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 15, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 16, 17, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADView;", 0x1, 18, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 21, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 22, 23, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 24, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 25, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 26, 27, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 28, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 29, 30, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 31, 32, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 33, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 34, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 35, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 36, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 37, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getWidget);
  methods[1].selector = @selector(setMaxWidthWithInt:);
  methods[2].selector = @selector(setMaxHeightWithInt:);
  methods[3].selector = @selector(getMaxWidth);
  methods[4].selector = @selector(getMaxHeight);
  methods[5].selector = @selector(initWithASSpinnerImpl:);
  methods[6].selector = @selector(onMeasureWithInt:withInt:);
  methods[7].selector = @selector(onLayoutWithBoolean:withInt:withInt:withInt:withInt:);
  methods[8].selector = @selector(executeWithNSString:withNSObjectArray:);
  methods[9].selector = @selector(updateMeasuredDimensionWithInt:withInt:);
  methods[10].selector = @selector(newInstanceWithASIWidget:);
  methods[11].selector = @selector(setAttributeWithASWidgetAttribute:withNSString:withId:);
  methods[12].selector = @selector(getMethods);
  methods[13].selector = @selector(initialized);
  methods[14].selector = @selector(getAttributeWithASWidgetAttribute:);
  methods[15].selector = @selector(drawableStateChanged);
  methods[16].selector = @selector(inflateViewWithNSString:);
  methods[17].selector = @selector(remeasure);
  methods[18].selector = @selector(removeFromParent);
  methods[19].selector = @selector(getLocationOnScreenWithIntArray:);
  methods[20].selector = @selector(getWindowVisibleDisplayFrameWithADRect:);
  methods[21].selector = @selector(offsetTopAndBottomWithInt:);
  methods[22].selector = @selector(offsetLeftAndRightWithInt:);
  methods[23].selector = @selector(setMyAttributeWithNSString:withId:);
  methods[24].selector = @selector(setVisibilityWithInt:);
  methods[25].selector = @selector(nativeMeasureWidthWithId:);
  methods[26].selector = @selector(nativeMeasureHeightWithId:withInt:);
  methods[27].selector = @selector(setState0WithId:);
  methods[28].selector = @selector(setState1WithId:);
  methods[29].selector = @selector(setState2WithId:);
  methods[30].selector = @selector(setState3WithId:);
  methods[31].selector = @selector(setState4WithId:);
  methods[32].selector = @selector(state0);
  methods[33].selector = @selector(state1);
  methods[34].selector = @selector(state2);
  methods[35].selector = @selector(state3);
  methods[36].selector = @selector(state4);
  methods[37].selector = @selector(stateYes);
  methods[38].selector = @selector(stateNo);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASSpinnerImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "measureFinished_", "LASMeasureEvent;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "onLayoutEvent_", "LASOnLayoutEvent;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "overlays_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 38, -1 },
    { "mMaxWidth_SpinnerExt_", "I", .constantValue.asLong = 0, 0x2, 39, -1, -1, -1 },
    { "mMaxHeight_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "templates_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 40, -1 },
  };
  static const void *ptrTable[] = { "setMaxWidth", "I", "setMaxHeight", "LASSpinnerImpl;", "onMeasure", "II", "onLayout", "ZIIII", "execute", "LNSString;[LNSObject;", "updateMeasuredDimension", "newInstance", "LASIWidget;", "setAttribute", "LASWidgetAttribute;LNSString;LNSObject;", "()Ljava/util/List<Ljava/lang/String;>;", "getAttribute", "LASWidgetAttribute;", "inflateView", "LNSString;", "getLocationOnScreen", "[I", "getWindowVisibleDisplayFrame", "LADRect;", "offsetTopAndBottom", "offsetLeftAndRight", "setMyAttribute", "LNSString;LNSObject;", "setVisibility", "nativeMeasureWidth", "LNSObject;", "nativeMeasureHeight", "LNSObject;I", "setState0", "setState1", "setState2", "setState3", "setState4", "Ljava/util/List<Lcom/ashera/widget/IWidget;>;", "mMaxWidth", "Ljava/util/Map<Ljava/lang/String;Lcom/ashera/widget/IWidget;>;" };
  static const J2ObjcClassInfo _ASSpinnerImpl_SpinnerExt = { "SpinnerExt", "com.ashera.layout", ptrTable, methods, fields, 7, 0x1, 39, 7, 3, -1, -1, -1, -1 };
  return &_ASSpinnerImpl_SpinnerExt;
}

@end

void ASSpinnerImpl_SpinnerExt_initWithASSpinnerImpl_(ASSpinnerImpl_SpinnerExt *self, ASSpinnerImpl *outer$) {
  self->this$0_ = outer$;
  ADSpinner_initWithASIWidget_(self, outer$);
  self->measureFinished_ = new_ASMeasureEvent_init();
  self->onLayoutEvent_ = new_ASOnLayoutEvent_init();
  self->mMaxWidth_SpinnerExt_ = -1;
  self->mMaxHeight_ = -1;
}

ASSpinnerImpl_SpinnerExt *new_ASSpinnerImpl_SpinnerExt_initWithASSpinnerImpl_(ASSpinnerImpl *outer$) {
  J2OBJC_NEW_IMPL(ASSpinnerImpl_SpinnerExt, initWithASSpinnerImpl_, outer$)
}

ASSpinnerImpl_SpinnerExt *create_ASSpinnerImpl_SpinnerExt_initWithASSpinnerImpl_(ASSpinnerImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASSpinnerImpl_SpinnerExt, initWithASSpinnerImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASSpinnerImpl_SpinnerExt)

@implementation ASSpinnerImpl_AdapterView

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASSpinnerImpl_AdapterView_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LASSpinnerImpl;", "LASSpinnerImpl_AdapterView_OnItemSelectedListener;", "<T:Ljava/lang/Object;>Ljava/lang/Object;" };
  static const J2ObjcClassInfo _ASSpinnerImpl_AdapterView = { "AdapterView", "com.ashera.layout", ptrTable, methods, NULL, 7, 0x8, 1, 0, 0, 1, -1, 2, -1 };
  return &_ASSpinnerImpl_AdapterView;
}

@end

void ASSpinnerImpl_AdapterView_init(ASSpinnerImpl_AdapterView *self) {
  NSObject_init(self);
}

ASSpinnerImpl_AdapterView *new_ASSpinnerImpl_AdapterView_init() {
  J2OBJC_NEW_IMPL(ASSpinnerImpl_AdapterView, init)
}

ASSpinnerImpl_AdapterView *create_ASSpinnerImpl_AdapterView_init() {
  J2OBJC_CREATE_IMPL(ASSpinnerImpl_AdapterView, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASSpinnerImpl_AdapterView)

@implementation ASSpinnerImpl_AdapterView_OnItemSelectedListener

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x401, 0, 1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(onItemSelectedWithASSpinnerImpl_AdapterView:withADView:withInt:withLong:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "onItemSelected", "LASSpinnerImpl_AdapterView;LADView;IJ", "(Lcom/ashera/layout/SpinnerImpl$AdapterView<*>;Lr/android/view/View;IJ)V", "LASSpinnerImpl_AdapterView;" };
  static const J2ObjcClassInfo _ASSpinnerImpl_AdapterView_OnItemSelectedListener = { "OnItemSelectedListener", "com.ashera.layout", ptrTable, methods, NULL, 7, 0x609, 1, 0, 3, -1, -1, -1, -1 };
  return &_ASSpinnerImpl_AdapterView_OnItemSelectedListener;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(ASSpinnerImpl_AdapterView_OnItemSelectedListener)

@implementation ASSpinnerImpl_OnItemSelectedListener

- (NSString *)getAction {
  return action_;
}

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue {
  ASSpinnerImpl_OnItemSelectedListener_initWithASIWidget_withNSString_(self, w, strValue);
  return self;
}

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue
                     withNSString:(NSString *)action {
  ASSpinnerImpl_OnItemSelectedListener_initWithASIWidget_withNSString_withNSString_(self, w, strValue, action);
  return self;
}

- (void)onItemSelectedWithASSpinnerImpl_AdapterView:(ASSpinnerImpl_AdapterView *)parent
                                         withADView:(ADView *)view
                                            withInt:(jint)position
                                           withLong:(jlong)id_ {
  if (action_ == nil || [action_ isEqual:@"onItemSelected"]) {
    [((id<ASIWidget>) nil_chk(w_)) syncModelFromUiToPojoWithNSString:@"onItemSelected"];
    id<JavaUtilMap> obj = [self getOnItemSelectedEventObjWithASSpinnerImpl_AdapterView:parent withADView:view withInt:position withLong:id_];
    NSString *commandName = (NSString *) cast_chk([((id<JavaUtilMap>) nil_chk(obj)) getWithId:ASEventExpressionParser_KEY_COMMAND_NAME], [NSString class]);
    NSString *commandType = (NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_COMMAND_TYPE], [NSString class]);
    switch (JreIndexOfStr(commandType, (id[]){ @"+" }, 1)) {
      case 0:
      if (ASEventCommandFactory_hasCommandWithNSString_(commandName)) {
        (void) [((id<ASEventCommand>) nil_chk(ASEventCommandFactory_getCommandWithNSString_(commandName))) executeCommandWithASIWidget:w_ withJavaUtilMap:obj withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ parent, view, JavaLangInteger_valueOfWithInt_(position), JavaLangLong_valueOfWithLong_(id_) } count:4 type:NSObject_class_()]];
      }
      break;
      default:
      break;
    }
    if ([obj containsKeyWithId:@"refreshUiFromModel"]) {
      id widgets = [obj removeWithId:@"refreshUiFromModel"];
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, widgets, true);
    }
    if ([((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds] != nil) {
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, [((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds], true);
    }
    if (strValue_ != nil && ![strValue_ java_isEmpty] && ![((NSString *) nil_chk([((NSString *) nil_chk(strValue_)) java_trim])) java_hasPrefix:@"+"]) {
      id<ASIActivity> activity = [((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getRootActivity];
      if (activity != nil) {
        [activity sendEventMessageWithJavaUtilMap:obj];
      }
    }
  }
  return;
}

- (id<JavaUtilMap>)getOnItemSelectedEventObjWithASSpinnerImpl_AdapterView:(ASSpinnerImpl_AdapterView *)parent
                                                               withADView:(ADView *)view
                                                                  withInt:(jint)position
                                                                 withLong:(jlong)id_ {
  id<JavaUtilMap> obj = ASPluginInvoker_getJSONCompatMap();
  (void) [((id<JavaUtilMap>) nil_chk(obj)) putWithId:@"action" withId:@"action"];
  (void) [obj putWithId:@"eventType" withId:@"itemselected"];
  (void) [obj putWithId:@"fragmentId" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getFragmentId]];
  (void) [obj putWithId:@"actionUrl" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getActionUrl]];
  if ([((id<ASIWidget>) nil_chk(w_)) getComponentId] != nil) {
    (void) [obj putWithId:@"componentId" withId:[((id<ASIWidget>) nil_chk(w_)) getComponentId]];
  }
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"id", [((id<ASIWidget>) nil_chk(w_)) getId]);
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"position", JavaLangInteger_valueOfWithInt_(position));
  id selectedValue = ASSpinnerImpl_getSelectedValue(nil_chk(((ASSpinnerImpl *) cast_chk(w_, [ASSpinnerImpl class]))));
  if (selectedValue != nil) {
    ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"selectedValue", selectedValue);
  }
  (void) ASEventExpressionParser_parseEventExpressionWithNSString_withJavaUtilMap_(strValue_, obj);
  [((id<ASIWidget>) nil_chk(w_)) updateModelToEventMapWithJavaUtilMap:obj withNSString:@"onItemSelected" withNSString:(NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_EVENT_ARGS], [NSString class])];
  return obj;
}

- (void)onNothingSelectedWithASSpinnerImpl_AdapterView:(ASSpinnerImpl_AdapterView *)parent {
  if (action_ == nil || [action_ isEqual:@"onNothingSelected"]) {
    [((id<ASIWidget>) nil_chk(w_)) syncModelFromUiToPojoWithNSString:@"onNothingSelected"];
    id<JavaUtilMap> obj = [self getOnNothingSelectedEventObjWithASSpinnerImpl_AdapterView:parent];
    NSString *commandName = (NSString *) cast_chk([((id<JavaUtilMap>) nil_chk(obj)) getWithId:ASEventExpressionParser_KEY_COMMAND_NAME], [NSString class]);
    NSString *commandType = (NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_COMMAND_TYPE], [NSString class]);
    switch (JreIndexOfStr(commandType, (id[]){ @"+" }, 1)) {
      case 0:
      if (ASEventCommandFactory_hasCommandWithNSString_(commandName)) {
        (void) [((id<ASEventCommand>) nil_chk(ASEventCommandFactory_getCommandWithNSString_(commandName))) executeCommandWithASIWidget:w_ withJavaUtilMap:obj withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ parent } count:1 type:NSObject_class_()]];
      }
      break;
      default:
      break;
    }
    if ([obj containsKeyWithId:@"refreshUiFromModel"]) {
      id widgets = [obj removeWithId:@"refreshUiFromModel"];
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, widgets, true);
    }
    if ([((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds] != nil) {
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, [((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds], true);
    }
    if (strValue_ != nil && ![strValue_ java_isEmpty] && ![((NSString *) nil_chk([((NSString *) nil_chk(strValue_)) java_trim])) java_hasPrefix:@"+"]) {
      id<ASIActivity> activity = [((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getRootActivity];
      if (activity != nil) {
        [activity sendEventMessageWithJavaUtilMap:obj];
      }
    }
  }
  return;
}

- (id<JavaUtilMap>)getOnNothingSelectedEventObjWithASSpinnerImpl_AdapterView:(ASSpinnerImpl_AdapterView *)parent {
  id<JavaUtilMap> obj = ASPluginInvoker_getJSONCompatMap();
  (void) [((id<JavaUtilMap>) nil_chk(obj)) putWithId:@"action" withId:@"action"];
  (void) [obj putWithId:@"eventType" withId:@"nothingselected"];
  (void) [obj putWithId:@"fragmentId" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getFragmentId]];
  (void) [obj putWithId:@"actionUrl" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getActionUrl]];
  if ([((id<ASIWidget>) nil_chk(w_)) getComponentId] != nil) {
    (void) [obj putWithId:@"componentId" withId:[((id<ASIWidget>) nil_chk(w_)) getComponentId]];
  }
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"id", [((id<ASIWidget>) nil_chk(w_)) getId]);
  (void) ASEventExpressionParser_parseEventExpressionWithNSString_withJavaUtilMap_(strValue_, obj);
  [((id<ASIWidget>) nil_chk(w_)) updateModelToEventMapWithJavaUtilMap:obj withNSString:@"onNothingSelected" withNSString:(NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_EVENT_ARGS], [NSString class])];
  return obj;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, 5, 3, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, 9, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, 10, 8, -1, 11, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getAction);
  methods[1].selector = @selector(initWithASIWidget:withNSString:);
  methods[2].selector = @selector(initWithASIWidget:withNSString:withNSString:);
  methods[3].selector = @selector(onItemSelectedWithASSpinnerImpl_AdapterView:withADView:withInt:withLong:);
  methods[4].selector = @selector(getOnItemSelectedEventObjWithASSpinnerImpl_AdapterView:withADView:withInt:withLong:);
  methods[5].selector = @selector(onNothingSelectedWithASSpinnerImpl_AdapterView:);
  methods[6].selector = @selector(getOnNothingSelectedEventObjWithASSpinnerImpl_AdapterView:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "w_", "LASIWidget;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "view_", "LADView;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "strValue_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "action_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASIWidget;LNSString;", "LASIWidget;LNSString;LNSString;", "onItemSelected", "LASSpinnerImpl_AdapterView;LADView;IJ", "(Lcom/ashera/layout/SpinnerImpl$AdapterView<*>;Lr/android/view/View;IJ)V", "getOnItemSelectedEventObj", "(Lcom/ashera/layout/SpinnerImpl$AdapterView<*>;Lr/android/view/View;IJ)Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", "onNothingSelected", "LASSpinnerImpl_AdapterView;", "(Lcom/ashera/layout/SpinnerImpl$AdapterView<*>;)V", "getOnNothingSelectedEventObj", "(Lcom/ashera/layout/SpinnerImpl$AdapterView<*>;)Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", "LASSpinnerImpl;" };
  static const J2ObjcClassInfo _ASSpinnerImpl_OnItemSelectedListener = { "OnItemSelectedListener", "com.ashera.layout", ptrTable, methods, fields, 7, 0xa, 7, 4, 12, -1, -1, -1, -1 };
  return &_ASSpinnerImpl_OnItemSelectedListener;
}

@end

void ASSpinnerImpl_OnItemSelectedListener_initWithASIWidget_withNSString_(ASSpinnerImpl_OnItemSelectedListener *self, id<ASIWidget> w, NSString *strValue) {
  NSObject_init(self);
  self->w_ = w;
  self->strValue_ = strValue;
}

ASSpinnerImpl_OnItemSelectedListener *new_ASSpinnerImpl_OnItemSelectedListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) {
  J2OBJC_NEW_IMPL(ASSpinnerImpl_OnItemSelectedListener, initWithASIWidget_withNSString_, w, strValue)
}

ASSpinnerImpl_OnItemSelectedListener *create_ASSpinnerImpl_OnItemSelectedListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) {
  J2OBJC_CREATE_IMPL(ASSpinnerImpl_OnItemSelectedListener, initWithASIWidget_withNSString_, w, strValue)
}

void ASSpinnerImpl_OnItemSelectedListener_initWithASIWidget_withNSString_withNSString_(ASSpinnerImpl_OnItemSelectedListener *self, id<ASIWidget> w, NSString *strValue, NSString *action) {
  NSObject_init(self);
  self->w_ = w;
  self->strValue_ = strValue;
  self->action_ = action;
}

ASSpinnerImpl_OnItemSelectedListener *new_ASSpinnerImpl_OnItemSelectedListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) {
  J2OBJC_NEW_IMPL(ASSpinnerImpl_OnItemSelectedListener, initWithASIWidget_withNSString_withNSString_, w, strValue, action)
}

ASSpinnerImpl_OnItemSelectedListener *create_ASSpinnerImpl_OnItemSelectedListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) {
  J2OBJC_CREATE_IMPL(ASSpinnerImpl_OnItemSelectedListener, initWithASIWidget_withNSString_withNSString_, w, strValue, action)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASSpinnerImpl_OnItemSelectedListener)

@implementation ASSpinnerImpl_PostMeasureHandler

- (instancetype)initWithASSpinnerImpl:(ASSpinnerImpl *)outer$
                         withNSString:(NSString *)type {
  ASSpinnerImpl_PostMeasureHandler_initWithASSpinnerImpl_withNSString_(self, outer$, type);
  return self;
}

- (void)doPerformWithId:(id)payload {
  [((ASEventBus *) nil_chk([((id<ASIFragment>) nil_chk(this$0_->fragment_)) getEventBus])) offWithASEventBusHandlerArray:[IOSObjectArray newArrayWithObjects:(id[]){ self } count:1 type:ASEventBusHandler_class_()]];
  ASSpinnerImpl_triggerChangeOnLoad(this$0_);
}

- (void)__javaClone:(ASSpinnerImpl_PostMeasureHandler *)original {
  [super __javaClone:original];
  JreRelease(this$0_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASSpinnerImpl:withNSString:);
  methods[1].selector = @selector(doPerformWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASSpinnerImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASSpinnerImpl;LNSString;", "doPerform", "LNSObject;", "LASSpinnerImpl;" };
  static const J2ObjcClassInfo _ASSpinnerImpl_PostMeasureHandler = { "PostMeasureHandler", "com.ashera.layout", ptrTable, methods, fields, 7, 0x0, 2, 1, 3, -1, -1, -1, -1 };
  return &_ASSpinnerImpl_PostMeasureHandler;
}

@end

void ASSpinnerImpl_PostMeasureHandler_initWithASSpinnerImpl_withNSString_(ASSpinnerImpl_PostMeasureHandler *self, ASSpinnerImpl *outer$, NSString *type) {
  self->this$0_ = outer$;
  ASEventBusHandler_initWithNSString_(self, type);
}

ASSpinnerImpl_PostMeasureHandler *new_ASSpinnerImpl_PostMeasureHandler_initWithASSpinnerImpl_withNSString_(ASSpinnerImpl *outer$, NSString *type) {
  J2OBJC_NEW_IMPL(ASSpinnerImpl_PostMeasureHandler, initWithASSpinnerImpl_withNSString_, outer$, type)
}

ASSpinnerImpl_PostMeasureHandler *create_ASSpinnerImpl_PostMeasureHandler_initWithASSpinnerImpl_withNSString_(ASSpinnerImpl *outer$, NSString *type) {
  J2OBJC_CREATE_IMPL(ASSpinnerImpl_PostMeasureHandler, initWithASSpinnerImpl_withNSString_, outer$, type)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASSpinnerImpl_PostMeasureHandler)
