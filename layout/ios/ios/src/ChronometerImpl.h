//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-ios-widgets\ios_widget_library\src\main\java\com\ashera\layout\ChronometerImpl.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ChronometerImpl")
#ifdef RESTRICT_ChronometerImpl
#define INCLUDE_ALL_ChronometerImpl 0
#else
#define INCLUDE_ALL_ChronometerImpl 1
#endif
#undef RESTRICT_ChronometerImpl

#if !defined (ASChronometerImpl_) && (INCLUDE_ALL_ChronometerImpl || defined(INCLUDE_ASChronometerImpl))
#define ASChronometerImpl_

#define RESTRICT_BaseWidget 1
#define INCLUDE_ASBaseWidget 1
#include "BaseWidget.h"

@class ADChronometer;
@class ASWidgetAttribute;
@class IOSClass;
@protocol ASIFragment;
@protocol ASILifeCycleDecorator;
@protocol ASIWidget;
@protocol JavaUtilMap;

@interface ASChronometerImpl : ASBaseWidget {
 @public
  id uiView_;
  ADChronometer *measurableView_;
}
@property id uiView;

#pragma mark Public

- (instancetype)init;

- (instancetype)initWithNSString:(NSString *)localname;

- (instancetype)initWithNSString:(NSString *)groupName
                    withNSString:(NSString *)localname;

- (id)asNativeWidget;

- (id)asWidget;

- (jboolean)checkIosVersionWithNSString:(NSString *)v;

- (void)createWithASIFragment:(id<ASIFragment>)fragment
              withJavaUtilMap:(id<JavaUtilMap>)params;

- (void)drawableStateChanged;

- (id)getAdjustsFontSizeToFitWidth;

- (id)getAllowsDefaultTighteningForTruncation;

- (id)getAttributeWithASWidgetAttribute:(ASWidgetAttribute *)key
              withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator;

- (jint)getBaseLine;

- (jint)getBorderPadding;

- (id)getHighlightedTextColor;

- (id)getIsEnabled;

- (id)getIsHighlighted;

- (id)getIsUserInteractionEnabled;

- (jint)getLineHeightPadding;

- (jint)getMaxEms;

- (jint)getMaxHeight;

- (jint)getMaxLines;

- (jint)getMaxWidth;

- (jint)getMinEms;

- (id)getMinimumScaleFactor;

- (jint)getMinLines;

- (id)getNumberOfLines;

- (id)getPreferredMaxLayoutWidth;

- (id)getShadowColor;

- (id)getText;

- (id)getTextColor;

- (IOSClass *)getViewClass;

- (void)invalidate;

- (void)loadAttributesWithNSString:(NSString *)attributeName;

- (id<ASIWidget>)newInstance OBJC_METHOD_FAMILY_NONE;

- (void)onRtlPropertiesChangedWithInt:(jint)layoutDirection;

- (void)requestLayout;

- (void)setAdjustsFontSizeToFitWidthWithId:(id)nativeWidget
                                    withId:(id)value;

- (void)setAllowsDefaultTighteningForTruncationWithId:(id)nativeWidget
                                               withId:(id)value;

- (void)setAttributeWithASWidgetAttribute:(ASWidgetAttribute *)key
                             withNSString:(NSString *)strValue
                                   withId:(id)objValue
                withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator;

- (void)setHighlightedTextColorWithId:(id)nativeWidget
                               withId:(id)value;

- (void)setIdWithNSString:(NSString *)id_;

- (void)setIsEnabledWithId:(id)nativeWidget
                    withId:(id)value;

- (void)setIsHighlightedWithId:(id)nativeWidget
                        withId:(id)value;

- (void)setIsUserInteractionEnabledWithId:(id)nativeWidget
                                   withId:(id)value;

- (void)setMinimumScaleFactorWithId:(id)nativeWidget
                             withId:(id)value;

- (void)setNumberOfLinesWithId:(id)nativeWidget
                        withId:(id)value;

- (void)setPaddingWithId:(id)objValue;

- (void)setPaddingBottomWithId:(id)objValue;

- (void)setPaddingLeftWithId:(id)objValue;

- (void)setPaddingRightWithId:(id)objValue;

- (void)setPaddingTopWithId:(id)objValue;

- (void)setPreferredMaxLayoutWidthWithId:(id)nativeWidget
                                  withId:(id)value;

- (void)setShadowColorWithId:(id)nativeWidget
                      withId:(id)value;

- (void)setTextWithId:(id)nativeWidget
               withId:(id)value;

- (void)setTextColorWithId:(id)nativeWidget
                    withId:(id)value;

- (void)setVisibleWithBoolean:(jboolean)b;

+ (NSString *)toUpperCaseWithNSString:(NSString *)text;

- (void)updatePadding;

#pragma mark Package-Private

@end

J2OBJC_STATIC_INIT(ASChronometerImpl)

J2OBJC_FIELD_SETTER(ASChronometerImpl, uiView_, id)
J2OBJC_FIELD_SETTER(ASChronometerImpl, measurableView_, ADChronometer *)

inline NSString *ASChronometerImpl_get_LOCAL_NAME(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ASChronometerImpl_LOCAL_NAME;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ASChronometerImpl, LOCAL_NAME, NSString *)

inline NSString *ASChronometerImpl_get_GROUP_NAME(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ASChronometerImpl_GROUP_NAME;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ASChronometerImpl, GROUP_NAME, NSString *)

FOUNDATION_EXPORT void ASChronometerImpl_init(ASChronometerImpl *self);

FOUNDATION_EXPORT ASChronometerImpl *new_ASChronometerImpl_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ASChronometerImpl *create_ASChronometerImpl_init(void);

FOUNDATION_EXPORT void ASChronometerImpl_initWithNSString_(ASChronometerImpl *self, NSString *localname);

FOUNDATION_EXPORT ASChronometerImpl *new_ASChronometerImpl_initWithNSString_(NSString *localname) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ASChronometerImpl *create_ASChronometerImpl_initWithNSString_(NSString *localname);

FOUNDATION_EXPORT void ASChronometerImpl_initWithNSString_withNSString_(ASChronometerImpl *self, NSString *groupName, NSString *localname);

FOUNDATION_EXPORT ASChronometerImpl *new_ASChronometerImpl_initWithNSString_withNSString_(NSString *groupName, NSString *localname) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ASChronometerImpl *create_ASChronometerImpl_initWithNSString_withNSString_(NSString *groupName, NSString *localname);

FOUNDATION_EXPORT NSString *ASChronometerImpl_toUpperCaseWithNSString_(NSString *text);

J2OBJC_TYPE_LITERAL_HEADER(ASChronometerImpl)

@compatibility_alias ComAsheraLayoutChronometerImpl ASChronometerImpl;

#endif

#if !defined (ASChronometerImpl_DallocHandler_) && (INCLUDE_ALL_ChronometerImpl || defined(INCLUDE_ASChronometerImpl_DallocHandler))
#define ASChronometerImpl_DallocHandler_

#define RESTRICT_EventBusHandler 1
#define INCLUDE_ASEventBusHandler 1
#include "EventBusHandler.h"

@class ASChronometerImpl;

@interface ASChronometerImpl_DallocHandler : ASEventBusHandler

#pragma mark Public

- (instancetype)initWithASChronometerImpl:(ASChronometerImpl *)outer$
                             withNSString:(NSString *)type;

#pragma mark Protected

- (void)doPerformWithId:(id)payload;

// Disallowed inherited constructors, do not use.

- (instancetype)initWithNSString:(NSString *)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ASChronometerImpl_DallocHandler)

FOUNDATION_EXPORT void ASChronometerImpl_DallocHandler_initWithASChronometerImpl_withNSString_(ASChronometerImpl_DallocHandler *self, ASChronometerImpl *outer$, NSString *type);

FOUNDATION_EXPORT ASChronometerImpl_DallocHandler *new_ASChronometerImpl_DallocHandler_initWithASChronometerImpl_withNSString_(ASChronometerImpl *outer$, NSString *type) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ASChronometerImpl_DallocHandler *create_ASChronometerImpl_DallocHandler_initWithASChronometerImpl_withNSString_(ASChronometerImpl *outer$, NSString *type);

J2OBJC_TYPE_LITERAL_HEADER(ASChronometerImpl_DallocHandler)

#endif

#if !defined (ASChronometerImpl_Font_) && (INCLUDE_ALL_ChronometerImpl || defined(INCLUDE_ASChronometerImpl_Font))
#define ASChronometerImpl_Font_

#define RESTRICT_AbstractEnumToIntConverter 1
#define INCLUDE_ASAbstractEnumToIntConverter 1
#include "AbstractEnumToIntConverter.h"

@class JavaLangInteger;
@protocol JavaUtilMap;

@interface ASChronometerImpl_Font : ASAbstractEnumToIntConverter

#pragma mark Public

- (JavaLangInteger *)getDefault;

- (id<JavaUtilMap>)getMapping;

#pragma mark Package-Private

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(ASChronometerImpl_Font)

FOUNDATION_EXPORT void ASChronometerImpl_Font_init(ASChronometerImpl_Font *self);

FOUNDATION_EXPORT ASChronometerImpl_Font *new_ASChronometerImpl_Font_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ASChronometerImpl_Font *create_ASChronometerImpl_Font_init(void);

J2OBJC_TYPE_LITERAL_HEADER(ASChronometerImpl_Font)

#endif

#if !defined (ASChronometerImpl_TextStyle_) && (INCLUDE_ALL_ChronometerImpl || defined(INCLUDE_ASChronometerImpl_TextStyle))
#define ASChronometerImpl_TextStyle_

#define RESTRICT_AbstractBitFlagConverter 1
#define INCLUDE_ASAbstractBitFlagConverter 1
#include "AbstractBitFlagConverter.h"

@class JavaLangInteger;
@protocol JavaUtilMap;

@interface ASChronometerImpl_TextStyle : ASAbstractBitFlagConverter

#pragma mark Public

- (JavaLangInteger *)getDefault;

- (id<JavaUtilMap>)getMapping;

#pragma mark Package-Private

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(ASChronometerImpl_TextStyle)

FOUNDATION_EXPORT void ASChronometerImpl_TextStyle_init(ASChronometerImpl_TextStyle *self);

FOUNDATION_EXPORT ASChronometerImpl_TextStyle *new_ASChronometerImpl_TextStyle_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ASChronometerImpl_TextStyle *create_ASChronometerImpl_TextStyle_init(void);

J2OBJC_TYPE_LITERAL_HEADER(ASChronometerImpl_TextStyle)

#endif

#if !defined (ASChronometerImpl_DrawableTintMode_) && (INCLUDE_ALL_ChronometerImpl || defined(INCLUDE_ASChronometerImpl_DrawableTintMode))
#define ASChronometerImpl_DrawableTintMode_

#define RESTRICT_AbstractEnumToIntConverter 1
#define INCLUDE_ASAbstractEnumToIntConverter 1
#include "AbstractEnumToIntConverter.h"

@class JavaLangInteger;
@protocol JavaUtilMap;

@interface ASChronometerImpl_DrawableTintMode : ASAbstractEnumToIntConverter

#pragma mark Public

- (JavaLangInteger *)getDefault;

- (id<JavaUtilMap>)getMapping;

#pragma mark Package-Private

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(ASChronometerImpl_DrawableTintMode)

FOUNDATION_EXPORT void ASChronometerImpl_DrawableTintMode_init(ASChronometerImpl_DrawableTintMode *self);

FOUNDATION_EXPORT ASChronometerImpl_DrawableTintMode *new_ASChronometerImpl_DrawableTintMode_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ASChronometerImpl_DrawableTintMode *create_ASChronometerImpl_DrawableTintMode_init(void);

J2OBJC_TYPE_LITERAL_HEADER(ASChronometerImpl_DrawableTintMode)

#endif

#if !defined (ASChronometerImpl_ChronometerExt_) && (INCLUDE_ALL_ChronometerImpl || defined(INCLUDE_ASChronometerImpl_ChronometerExt))
#define ASChronometerImpl_ChronometerExt_

#define RESTRICT_Chronometer 1
#define INCLUDE_ADChronometer 1
#include "Chronometer.h"

#define RESTRICT_ILifeCycleDecorator 1
#define INCLUDE_ASILifeCycleDecorator 1
#include "ILifeCycleDecorator.h"

@class ADRect;
@class ADView;
@class ASChronometerImpl;
@class ASWidgetAttribute;
@class IOSIntArray;
@class IOSObjectArray;
@protocol ASIWidget;
@protocol JavaUtilList;

@interface ASChronometerImpl_ChronometerExt : ADChronometer < ASILifeCycleDecorator >

#pragma mark Public

- (instancetype)initWithASChronometerImpl:(ASChronometerImpl *)outer$;

- (jint)computeSizeWithFloat:(jfloat)width;

- (void)drawableStateChanged;

- (void)executeWithNSString:(NSString *)method
          withNSObjectArray:(IOSObjectArray *)canvas;

- (id)getAttributeWithASWidgetAttribute:(ASWidgetAttribute *)widgetAttribute;

- (jint)getBorderPadding;

- (jint)getBorderWidth;

- (jint)getLineHeight;

- (jint)getLineHeightPadding;

- (void)getLocationOnScreenWithIntArray:(IOSIntArray *)appScreenLocation;

- (id<JavaUtilList>)getMethods;

- (NSString *)getText;

- (id<ASIWidget>)getWidget;

- (void)getWindowVisibleDisplayFrameWithADRect:(ADRect *)displayFrame;

- (ADView *)inflateViewWithNSString:(NSString *)layout;

- (void)initialized OBJC_METHOD_FAMILY_NONE;

- (jint)nativeMeasureHeightWithId:(id)uiView
                          withInt:(jint)width;

- (jint)nativeMeasureWidthWithId:(id)uiView;

- (id<ASILifeCycleDecorator>)newInstanceWithASIWidget:(id<ASIWidget>)widget OBJC_METHOD_FAMILY_NONE;

- (void)offsetLeftAndRightWithInt:(jint)offset;

- (void)offsetTopAndBottomWithInt:(jint)offset;

- (void)onMeasureWithInt:(jint)widthMeasureSpec
                 withInt:(jint)heightMeasureSpec;

- (void)onRtlPropertiesChangedWithInt:(jint)layoutDirection;

- (void)remeasure;

- (void)removeFromParent;

- (void)setAttributeWithASWidgetAttribute:(ASWidgetAttribute *)widgetAttribute
                             withNSString:(NSString *)strValue
                                   withId:(id)objValue;

- (void)setMyAttributeWithNSString:(NSString *)name
                            withId:(id)value;

- (void)setState0WithId:(id)value;

- (void)setState1WithId:(id)value;

- (void)setState2WithId:(id)value;

- (void)setState3WithId:(id)value;

- (void)setState4WithId:(id)value;

- (void)setVisibilityWithInt:(jint)visibility;

- (void)state0;

- (void)state1;

- (void)state2;

- (void)state3;

- (void)state4;

- (void)stateNo;

- (void)stateYes;

- (void)updateMeasuredDimensionWithInt:(jint)width
                               withInt:(jint)height;

#pragma mark Protected

- (void)onLayoutWithBoolean:(jboolean)changed
                    withInt:(jint)l
                    withInt:(jint)t
                    withInt:(jint)r
                    withInt:(jint)b;

// Disallowed inherited constructors, do not use.

- (instancetype)initWithASIWidget:(id<ASIWidget>)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ASChronometerImpl_ChronometerExt)

FOUNDATION_EXPORT void ASChronometerImpl_ChronometerExt_initWithASChronometerImpl_(ASChronometerImpl_ChronometerExt *self, ASChronometerImpl *outer$);

FOUNDATION_EXPORT ASChronometerImpl_ChronometerExt *new_ASChronometerImpl_ChronometerExt_initWithASChronometerImpl_(ASChronometerImpl *outer$) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ASChronometerImpl_ChronometerExt *create_ASChronometerImpl_ChronometerExt_initWithASChronometerImpl_(ASChronometerImpl *outer$);

J2OBJC_TYPE_LITERAL_HEADER(ASChronometerImpl_ChronometerExt)

#endif

#if !defined (ASChronometerImpl_PostMeasureHandler_) && (INCLUDE_ALL_ChronometerImpl || defined(INCLUDE_ASChronometerImpl_PostMeasureHandler))
#define ASChronometerImpl_PostMeasureHandler_

#define RESTRICT_EventBusHandler 1
#define INCLUDE_ASEventBusHandler 1
#include "EventBusHandler.h"

@class ASChronometerImpl;

@interface ASChronometerImpl_PostMeasureHandler : ASEventBusHandler

#pragma mark Public

- (instancetype)initWithASChronometerImpl:(ASChronometerImpl *)outer$
                             withNSString:(NSString *)type;

#pragma mark Protected

- (void)doPerformWithId:(id)payload;

// Disallowed inherited constructors, do not use.

- (instancetype)initWithNSString:(NSString *)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ASChronometerImpl_PostMeasureHandler)

FOUNDATION_EXPORT void ASChronometerImpl_PostMeasureHandler_initWithASChronometerImpl_withNSString_(ASChronometerImpl_PostMeasureHandler *self, ASChronometerImpl *outer$, NSString *type);

FOUNDATION_EXPORT ASChronometerImpl_PostMeasureHandler *new_ASChronometerImpl_PostMeasureHandler_initWithASChronometerImpl_withNSString_(ASChronometerImpl *outer$, NSString *type) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ASChronometerImpl_PostMeasureHandler *create_ASChronometerImpl_PostMeasureHandler_initWithASChronometerImpl_withNSString_(ASChronometerImpl *outer$, NSString *type);

J2OBJC_TYPE_LITERAL_HEADER(ASChronometerImpl_PostMeasureHandler)

#endif

#pragma pop_macro("INCLUDE_ALL_ChronometerImpl")
