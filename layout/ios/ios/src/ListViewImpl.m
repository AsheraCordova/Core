//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-ios-widgets\ios_widget_library\src\main\java\com\ashera\layout\ListViewImpl.java
//

#include "AbsListView.h"
#include "AbstractEnumToIntConverter.h"
#include "AdapterView.h"
#include "BaseAdapter.h"
#include "BaseHasWidgets.h"
#include "ConverterFactory.h"
#include "Drawable.h"
#include "Event.h"
#include "EventBus.h"
#include "EventBusHandler.h"
#include "EventCommand.h"
#include "EventCommandFactory.h"
#include "EventExpressionParser.h"
#include "Filter.h"
#include "FilterFactory.h"
#include "FrameLayout.h"
#include "Handler.h"
#include "HasWidgets.h"
#include "IActivity.h"
#include "IFilter.h"
#include "IFragment.h"
#include "ILifeCycleDecorator.h"
#include "IListener.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "IWidget.h"
#include "IWidgetLifeCycleListener.h"
#include "IdGenerator.h"
#include "J2ObjC_source.h"
#include "LayoutNativeVars.h"
#include "LayoutTransition.h"
#include "ListView.h"
#include "ListViewImpl.h"
#include "LoopParam.h"
#include "MeasureEvent.h"
#include "ModelExpressionParser.h"
#include "OnLayoutEvent.h"
#include "PluginInvoker.h"
#include "Rect.h"
#include "View.h"
#include "ViewGroup.h"
#include "ViewGroupImpl.h"
#include "ViewImpl.h"
#include "WidgetAttribute.h"
#include "WidgetFactory.h"
#include "java/lang/Boolean.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Double.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/Runnable.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/ArrayList.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/UUID.h"

#include <UIKit/UIKit.h>
#include "ASUIView.h"
#include "HasLifeCycleDecorators.h"

#include "CustomUITableViewCell.h"
#include "ASUITableView.h"
#include "ASUILongTapGestureRecognizer.h"
#include "java/lang/Float.h"

@class ASListViewImpl_FilterStatus;
@class ASListViewImpl_ListAdapter_ArrayFilter;
@protocol JavaLangCharSequence;
@protocol JavaUtilList;
@protocol JavaUtilMap;


#pragma clang diagnostic ignored "-Wprotocol"

@interface ASListViewImpl () {
 @public
  id uiView_;
  ADListView *listView_;
  jboolean disableUpdate_;
  ASListViewImpl_ListAdapter *listAdapter_;
  ASListViewImpl_FilterStatus *filter_;
  NSString *query_;
  jint filterDelay_;
  ADHandler *handler_;
  NSString *filterId_;
  IOSObjectArray *filterItemPaths_;
  id<ASHasWidgets> headerTemplate_;
  id<ASHasWidgets> footerTemplate_;
  jboolean autoLayout_;
  id onItemClick_;
  id<JavaUtilMap> heightCache_;
  id<ASIWidget> header_;
  id<ASIWidget> footer_;
  id<ADAdapterView_OnItemLongClickListener> onItemLongClickListener_;
  ADDrawable *listSelector_;
  jint cellSelectionStyle_;
  id<ADAbsListView_OnScrollListener> onScrollChangeListener_;
  jboolean headerDividersEnabled_;
  jboolean footerDividersEnabled_;
  ADDrawable *divider_;
  jint dividerHeight_;
  jint separatorInsetRight_;
  jboolean reloadTableAfterPostMeasure_;
}

- (void)setWidgetOnNativeClass;

- (void)nativeRemoveViewWithASIWidget:(id<ASIWidget>)widget;

- (void)createLayoutParamsWithADView:(ADView *)view;

- (ADFrameLayout_LayoutParams *)getLayoutParamsWithADView:(ADView *)view;

+ (void)addCheckItemInfoWithJavaUtilMap:(id<JavaUtilMap>)obj
                      withADAdapterView:(ADAdapterView *)parent;

- (void)filterWithId:(id)query;

- (void)setFilterDelayWithId:(id)objValue;

- (void)setFilterIdWithId:(id)objValue;

- (void)setFilterItemPathWithId:(id)objValue;

- (void)setScrollXWithId:(id)objValue;

- (void)setScrollYWithId:(id)objValue;

- (void)setChoiceModeWithId:(id)objValue;

- (id)getChoiceMode;

- (void)initListAdapter OBJC_METHOD_FAMILY_NONE;

- (jint)updatePositionWithJavaUtilMap:(id<JavaUtilMap>)eventMap
                              withInt:(jint)position;

- (void)addFooterTemplateWithId:(id)objValue;

- (void)addHeaderTemplateWithId:(id)objValue;

- (void)handleItemClickWithInt:(jint)position;

- (id)getCellWithInt:(jint)index;

- (void)setCellDividerInsetsWithInt:(jint)index
                             withId:(id)cell;

- (void)nativeSetSeparatorCellInsetRightWithId:(id)cell
                                       withInt:(jint)val;

- (id)createCellWithInt:(jint)index;

- (ADView *)updateLayoutWithASIWidget:(id<ASIWidget>)myWidget
                              withInt:(jint)index;

- (void)setCustomDividerAttributesWithASIWidget:(id<ASIWidget>)cellwidget
                                    withBoolean:(jboolean)visible;

- (void)nativeCreateWithJavaUtilMap:(id<JavaUtilMap>)params;

- (void)createTableView;

- (void)addHeaderWidgetWithId:(id)headerView;

- (void)addFooterWidgetWithId:(id)view;

- (void)updateTableSelection;

- (jint)nativeGetWidth;

- (id)getCellContentViewWithId:(id)cell;

- (void)setDataWithId:(id)cell
               withId:(id)data;

- (id<ASIWidget>)getDataWithId:(id)cell;

- (id)getReusableCellWithNSString:(NSString *)simpleTableIdentifier;

- (id)newCellWithNSString:(NSString *)simpleTableIdentifier
                   withId:(id)data OBJC_METHOD_FAMILY_NONE;

- (void)setSelectionStyleOnCellWithId:(id)cell;

- (void)addSubViewWithId:(id)cell
                  withId:(id)layout;

- (void)updateTable;

- (void)reloadTable;

- (void)setSeparatorStyleWithId:(id)objValue;

- (void)nativeSetSeparatorStyleWithInt:(jint)separatorStyle;

- (id)getStackFromBottom;

- (jboolean)isStackFromBottom;

- (void)setStackFromBottomWithId:(id)objValue;

- (jboolean)nativeGetStackFromBottom;

- (void)nativeSetStackFromBottomWithBoolean:(jboolean)stackFromBottom;

- (void)nativesetStackFromBottom;

- (void)nativesetStackFromTop;

- (void)setOnItemLongClickWithId:(id)objValue;

- (void)longPressWithInt:(jint)position;

- (void)nativeAddLongClickListenerWithId:(id)nativeWidget;

- (void)setSelectedBackgroundViewWithId:(id)cell;

- (void)setDrawableBoundsWithId:(id)cell
                 withADDrawable:(ADDrawable *)listSelector;

- (void)nativeSelectedBackgroundViewWithId:(id)cell
                                    withId:(id)imageOrColor;

- (void)setListSelectorWithNSString:(NSString *)strValue
                             withId:(id)objValue;

- (void)nativesetTrackSelectedCellWithBoolean:(jboolean)trackSelectedCell;

- (void)setSelectionStyleWithId:(id)objValue;

- (id)getCurrentSelectedCell;

- (void)setOnScrollWithASWidgetAttribute:(ASWidgetAttribute *)key
                            withNSString:(NSString *)strValue
                                  withId:(id)objValue
               withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator;

- (void)setHeaderDividersEnabledWithId:(id)objValue;

- (void)setFooterDividersEnabledWithId:(id)objValue;

- (void)setDividerWithASWidgetAttribute:(ASWidgetAttribute *)key
                           withNSString:(NSString *)strValue
                                 withId:(id)objValue
              withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator;

- (id)getDividerWithASWidgetAttribute:(ASWidgetAttribute *)key
            withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator;

- (void)setDividerHeightWithId:(id)objValue;

- (id)getDividerHeight;

- (void)setSeparatorInsetRightWithId:(id)objValue;

- (void)nativeSetSeparatorInsetRightWithInt:(jint)val;

- (void)setSeparatorInsetLeftWithId:(id)objValue;

- (void)nativeSetSeparatorInsetLeftWithInt:(jint)val;

- (void)setSeparatorInsetBottomWithId:(id)objValue;

- (void)nativeSetSeparatorInsetBottomWithInt:(jint)val;

- (void)setSeparatorInsetTopWithId:(id)objValue;

- (void)nativeSetSeparatorInsetTopWithInt:(jint)val;

- (void)nativeRequestLayout;

- (void)postFilter;

- (void)preFilter;

@end

J2OBJC_FIELD_SETTER(ASListViewImpl, uiView_, id)
J2OBJC_FIELD_SETTER(ASListViewImpl, listView_, ADListView *)
J2OBJC_FIELD_SETTER(ASListViewImpl, listAdapter_, ASListViewImpl_ListAdapter *)
J2OBJC_FIELD_SETTER(ASListViewImpl, filter_, ASListViewImpl_FilterStatus *)
J2OBJC_FIELD_SETTER(ASListViewImpl, query_, NSString *)
J2OBJC_FIELD_SETTER(ASListViewImpl, handler_, ADHandler *)
J2OBJC_FIELD_SETTER(ASListViewImpl, filterId_, NSString *)
J2OBJC_FIELD_SETTER(ASListViewImpl, filterItemPaths_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(ASListViewImpl, headerTemplate_, id<ASHasWidgets>)
J2OBJC_FIELD_SETTER(ASListViewImpl, footerTemplate_, id<ASHasWidgets>)
J2OBJC_FIELD_SETTER(ASListViewImpl, onItemClick_, id)
J2OBJC_FIELD_SETTER(ASListViewImpl, heightCache_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(ASListViewImpl, header_, id<ASIWidget>)
J2OBJC_FIELD_SETTER(ASListViewImpl, footer_, id<ASIWidget>)
J2OBJC_FIELD_SETTER(ASListViewImpl, onItemLongClickListener_, id<ADAdapterView_OnItemLongClickListener>)
J2OBJC_FIELD_SETTER(ASListViewImpl, listSelector_, ADDrawable *)
J2OBJC_FIELD_SETTER(ASListViewImpl, onScrollChangeListener_, id<ADAbsListView_OnScrollListener>)
J2OBJC_FIELD_SETTER(ASListViewImpl, divider_, ADDrawable *)

__attribute__((unused)) static void ASListViewImpl_setWidgetOnNativeClass(ASListViewImpl *self);

__attribute__((unused)) static void ASListViewImpl_nativeRemoveViewWithASIWidget_(ASListViewImpl *self, id<ASIWidget> widget);

__attribute__((unused)) static void ASListViewImpl_createLayoutParamsWithADView_(ASListViewImpl *self, ADView *view);

__attribute__((unused)) static ADFrameLayout_LayoutParams *ASListViewImpl_getLayoutParamsWithADView_(ASListViewImpl *self, ADView *view);

__attribute__((unused)) static void ASListViewImpl_addCheckItemInfoWithJavaUtilMap_withADAdapterView_(id<JavaUtilMap> obj, ADAdapterView *parent);

__attribute__((unused)) static void ASListViewImpl_filterWithId_(ASListViewImpl *self, id query);

__attribute__((unused)) static void ASListViewImpl_setFilterDelayWithId_(ASListViewImpl *self, id objValue);

__attribute__((unused)) static void ASListViewImpl_setFilterIdWithId_(ASListViewImpl *self, id objValue);

__attribute__((unused)) static void ASListViewImpl_setFilterItemPathWithId_(ASListViewImpl *self, id objValue);

__attribute__((unused)) static void ASListViewImpl_setScrollXWithId_(ASListViewImpl *self, id objValue);

__attribute__((unused)) static void ASListViewImpl_setScrollYWithId_(ASListViewImpl *self, id objValue);

__attribute__((unused)) static void ASListViewImpl_setChoiceModeWithId_(ASListViewImpl *self, id objValue);

__attribute__((unused)) static id ASListViewImpl_getChoiceMode(ASListViewImpl *self);

__attribute__((unused)) static void ASListViewImpl_initListAdapter(ASListViewImpl *self);

__attribute__((unused)) static jint ASListViewImpl_updatePositionWithJavaUtilMap_withInt_(ASListViewImpl *self, id<JavaUtilMap> eventMap, jint position);

__attribute__((unused)) static void ASListViewImpl_addFooterTemplateWithId_(ASListViewImpl *self, id objValue);

__attribute__((unused)) static void ASListViewImpl_addHeaderTemplateWithId_(ASListViewImpl *self, id objValue);

__attribute__((unused)) static void ASListViewImpl_handleItemClickWithInt_(ASListViewImpl *self, jint position);

__attribute__((unused)) static id ASListViewImpl_getCellWithInt_(ASListViewImpl *self, jint index);

__attribute__((unused)) static void ASListViewImpl_setCellDividerInsetsWithInt_withId_(ASListViewImpl *self, jint index, id cell);

__attribute__((unused)) static void ASListViewImpl_nativeSetSeparatorCellInsetRightWithId_withInt_(ASListViewImpl *self, id cell, jint val);

__attribute__((unused)) static id ASListViewImpl_createCellWithInt_(ASListViewImpl *self, jint index);

__attribute__((unused)) static ADView *ASListViewImpl_updateLayoutWithASIWidget_withInt_(ASListViewImpl *self, id<ASIWidget> myWidget, jint index);

__attribute__((unused)) static void ASListViewImpl_setCustomDividerAttributesWithASIWidget_withBoolean_(ASListViewImpl *self, id<ASIWidget> cellwidget, jboolean visible);

__attribute__((unused)) static void ASListViewImpl_nativeCreateWithJavaUtilMap_(ASListViewImpl *self, id<JavaUtilMap> params);

__attribute__((unused)) static void ASListViewImpl_createTableView(ASListViewImpl *self);

__attribute__((unused)) static void ASListViewImpl_addHeaderWidgetWithId_(ASListViewImpl *self, id headerView);

__attribute__((unused)) static void ASListViewImpl_addFooterWidgetWithId_(ASListViewImpl *self, id view);

__attribute__((unused)) static void ASListViewImpl_updateTableSelection(ASListViewImpl *self);

__attribute__((unused)) static jint ASListViewImpl_nativeGetWidth(ASListViewImpl *self);

__attribute__((unused)) static id ASListViewImpl_getCellContentViewWithId_(ASListViewImpl *self, id cell);

__attribute__((unused)) static void ASListViewImpl_setDataWithId_withId_(ASListViewImpl *self, id cell, id data);

__attribute__((unused)) static id<ASIWidget> ASListViewImpl_getDataWithId_(ASListViewImpl *self, id cell);

__attribute__((unused)) static id ASListViewImpl_getReusableCellWithNSString_(ASListViewImpl *self, NSString *simpleTableIdentifier);

__attribute__((unused)) static id ASListViewImpl_newCellWithNSString_withId_(ASListViewImpl *self, NSString *simpleTableIdentifier, id data);

__attribute__((unused)) static void ASListViewImpl_setSelectionStyleOnCellWithId_(ASListViewImpl *self, id cell);

__attribute__((unused)) static void ASListViewImpl_addSubViewWithId_withId_(ASListViewImpl *self, id cell, id layout);

__attribute__((unused)) static void ASListViewImpl_updateTable(ASListViewImpl *self);

__attribute__((unused)) static void ASListViewImpl_reloadTable(ASListViewImpl *self);

__attribute__((unused)) static void ASListViewImpl_setSeparatorStyleWithId_(ASListViewImpl *self, id objValue);

__attribute__((unused)) static void ASListViewImpl_nativeSetSeparatorStyleWithInt_(ASListViewImpl *self, jint separatorStyle);

__attribute__((unused)) static id ASListViewImpl_getStackFromBottom(ASListViewImpl *self);

__attribute__((unused)) static jboolean ASListViewImpl_isStackFromBottom(ASListViewImpl *self);

__attribute__((unused)) static void ASListViewImpl_setStackFromBottomWithId_(ASListViewImpl *self, id objValue);

__attribute__((unused)) static jboolean ASListViewImpl_nativeGetStackFromBottom(ASListViewImpl *self);

__attribute__((unused)) static void ASListViewImpl_nativeSetStackFromBottomWithBoolean_(ASListViewImpl *self, jboolean stackFromBottom);

__attribute__((unused)) static void ASListViewImpl_nativesetStackFromBottom(ASListViewImpl *self);

__attribute__((unused)) static void ASListViewImpl_nativesetStackFromTop(ASListViewImpl *self);

__attribute__((unused)) static void ASListViewImpl_setOnItemLongClickWithId_(ASListViewImpl *self, id objValue);

__attribute__((unused)) static void ASListViewImpl_longPressWithInt_(ASListViewImpl *self, jint position);

__attribute__((unused)) static void ASListViewImpl_nativeAddLongClickListenerWithId_(ASListViewImpl *self, id nativeWidget);

__attribute__((unused)) static void ASListViewImpl_setSelectedBackgroundViewWithId_(ASListViewImpl *self, id cell);

__attribute__((unused)) static void ASListViewImpl_setDrawableBoundsWithId_withADDrawable_(ASListViewImpl *self, id cell, ADDrawable *listSelector);

__attribute__((unused)) static void ASListViewImpl_nativeSelectedBackgroundViewWithId_withId_(ASListViewImpl *self, id cell, id imageOrColor);

__attribute__((unused)) static void ASListViewImpl_setListSelectorWithNSString_withId_(ASListViewImpl *self, NSString *strValue, id objValue);

__attribute__((unused)) static void ASListViewImpl_nativesetTrackSelectedCellWithBoolean_(ASListViewImpl *self, jboolean trackSelectedCell);

__attribute__((unused)) static void ASListViewImpl_setSelectionStyleWithId_(ASListViewImpl *self, id objValue);

__attribute__((unused)) static id ASListViewImpl_getCurrentSelectedCell(ASListViewImpl *self);

__attribute__((unused)) static void ASListViewImpl_setOnScrollWithASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(ASListViewImpl *self, ASWidgetAttribute *key, NSString *strValue, id objValue, id<ASILifeCycleDecorator> decorator);

__attribute__((unused)) static void ASListViewImpl_setHeaderDividersEnabledWithId_(ASListViewImpl *self, id objValue);

__attribute__((unused)) static void ASListViewImpl_setFooterDividersEnabledWithId_(ASListViewImpl *self, id objValue);

__attribute__((unused)) static void ASListViewImpl_setDividerWithASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(ASListViewImpl *self, ASWidgetAttribute *key, NSString *strValue, id objValue, id<ASILifeCycleDecorator> decorator);

__attribute__((unused)) static id ASListViewImpl_getDividerWithASWidgetAttribute_withASILifeCycleDecorator_(ASListViewImpl *self, ASWidgetAttribute *key, id<ASILifeCycleDecorator> decorator);

__attribute__((unused)) static void ASListViewImpl_setDividerHeightWithId_(ASListViewImpl *self, id objValue);

__attribute__((unused)) static id ASListViewImpl_getDividerHeight(ASListViewImpl *self);

__attribute__((unused)) static void ASListViewImpl_setSeparatorInsetRightWithId_(ASListViewImpl *self, id objValue);

__attribute__((unused)) static void ASListViewImpl_nativeSetSeparatorInsetRightWithInt_(ASListViewImpl *self, jint val);

__attribute__((unused)) static void ASListViewImpl_setSeparatorInsetLeftWithId_(ASListViewImpl *self, id objValue);

__attribute__((unused)) static void ASListViewImpl_nativeSetSeparatorInsetLeftWithInt_(ASListViewImpl *self, jint val);

__attribute__((unused)) static void ASListViewImpl_setSeparatorInsetBottomWithId_(ASListViewImpl *self, id objValue);

__attribute__((unused)) static void ASListViewImpl_nativeSetSeparatorInsetBottomWithInt_(ASListViewImpl *self, jint val);

__attribute__((unused)) static void ASListViewImpl_setSeparatorInsetTopWithId_(ASListViewImpl *self, id objValue);

__attribute__((unused)) static void ASListViewImpl_nativeSetSeparatorInsetTopWithInt_(ASListViewImpl *self, jint val);

__attribute__((unused)) static void ASListViewImpl_nativeRequestLayout(ASListViewImpl *self);

__attribute__((unused)) static void ASListViewImpl_postFilter(ASListViewImpl *self);

__attribute__((unused)) static void ASListViewImpl_preFilter(ASListViewImpl *self);

@interface ASListViewImpl_ChoiceMode () {
 @public
  id<JavaUtilMap> mapping_;
}

@end

J2OBJC_FIELD_SETTER(ASListViewImpl_ChoiceMode, mapping_, id<JavaUtilMap>)

@interface ASListViewImpl_IosSeparatorStyle () {
 @public
  id<JavaUtilMap> mapping_;
}

@end

J2OBJC_FIELD_SETTER(ASListViewImpl_IosSeparatorStyle, mapping_, id<JavaUtilMap>)

@interface ASListViewImpl_IosCellSelectionStyle () {
 @public
  id<JavaUtilMap> mapping_;
}

@end

J2OBJC_FIELD_SETTER(ASListViewImpl_IosCellSelectionStyle, mapping_, id<JavaUtilMap>)

@interface ASListViewImpl_ListViewExt () {
 @public
  __unsafe_unretained ASListViewImpl *this$0_;
  ASMeasureEvent *measureFinished_;
  ASOnLayoutEvent *onLayoutEvent_;
  id<JavaUtilList> overlays_;
  jint mMaxWidth_;
  jint mMaxHeight_;
  id<JavaUtilMap> templates_;
}

@end

J2OBJC_FIELD_SETTER(ASListViewImpl_ListViewExt, measureFinished_, ASMeasureEvent *)
J2OBJC_FIELD_SETTER(ASListViewImpl_ListViewExt, onLayoutEvent_, ASOnLayoutEvent *)
J2OBJC_FIELD_SETTER(ASListViewImpl_ListViewExt, overlays_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(ASListViewImpl_ListViewExt, templates_, id<JavaUtilMap>)

@interface ASListViewImpl_ListAdapter () {
 @public
  ASListViewImpl *this$0_;
  id mLock_;
  ASListViewImpl_ListAdapter_ArrayFilter *mFilter_;
  id<JavaUtilList> mObjects_;
}

@end

J2OBJC_FIELD_SETTER(ASListViewImpl_ListAdapter, mLock_, id)
J2OBJC_FIELD_SETTER(ASListViewImpl_ListAdapter, mFilter_, ASListViewImpl_ListAdapter_ArrayFilter *)
J2OBJC_FIELD_SETTER(ASListViewImpl_ListAdapter, mObjects_, id<JavaUtilList>)

@interface ASListViewImpl_ListAdapter_ArrayFilter : ADFilter {
 @public
  ASListViewImpl_ListAdapter *this$0_;
}

- (instancetype)initWithASListViewImpl_ListAdapter:(ASListViewImpl_ListAdapter *)outer$;

- (ADFilter_FilterResults *)performFilteringWithJavaLangCharSequence:(id<JavaLangCharSequence>)prefix;

- (void)publishResultsWithJavaLangCharSequence:(id<JavaLangCharSequence>)constraint
                    withADFilter_FilterResults:(ADFilter_FilterResults *)results;

@end

J2OBJC_EMPTY_STATIC_INIT(ASListViewImpl_ListAdapter_ArrayFilter)

__attribute__((unused)) static void ASListViewImpl_ListAdapter_ArrayFilter_initWithASListViewImpl_ListAdapter_(ASListViewImpl_ListAdapter_ArrayFilter *self, ASListViewImpl_ListAdapter *outer$);

__attribute__((unused)) static ASListViewImpl_ListAdapter_ArrayFilter *new_ASListViewImpl_ListAdapter_ArrayFilter_initWithASListViewImpl_ListAdapter_(ASListViewImpl_ListAdapter *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASListViewImpl_ListAdapter_ArrayFilter *create_ASListViewImpl_ListAdapter_ArrayFilter_initWithASListViewImpl_ListAdapter_(ASListViewImpl_ListAdapter *outer$);

J2OBJC_TYPE_LITERAL_HEADER(ASListViewImpl_ListAdapter_ArrayFilter)

typedef NS_ENUM(NSUInteger, ASListViewImpl_FilterStatus_Enum) {
  ASListViewImpl_FilterStatus_Enum_None = 0,
  ASListViewImpl_FilterStatus_Enum_Restore = 1,
  ASListViewImpl_FilterStatus_Enum_Filtering = 2,
  ASListViewImpl_FilterStatus_Enum_Done = 3,
};

@interface ASListViewImpl_FilterStatus : JavaLangEnum

+ (IOSObjectArray *)values;

+ (ASListViewImpl_FilterStatus *)valueOfWithNSString:(NSString *)name;

- (ASListViewImpl_FilterStatus_Enum)toNSEnum;

@end

J2OBJC_STATIC_INIT(ASListViewImpl_FilterStatus)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT ASListViewImpl_FilterStatus *ASListViewImpl_FilterStatus_values_[];

inline ASListViewImpl_FilterStatus *ASListViewImpl_FilterStatus_get_None(void);
J2OBJC_ENUM_CONSTANT(ASListViewImpl_FilterStatus, None)

inline ASListViewImpl_FilterStatus *ASListViewImpl_FilterStatus_get_Restore(void);
J2OBJC_ENUM_CONSTANT(ASListViewImpl_FilterStatus, Restore)

inline ASListViewImpl_FilterStatus *ASListViewImpl_FilterStatus_get_Filtering(void);
J2OBJC_ENUM_CONSTANT(ASListViewImpl_FilterStatus, Filtering)

inline ASListViewImpl_FilterStatus *ASListViewImpl_FilterStatus_get_Done(void);
J2OBJC_ENUM_CONSTANT(ASListViewImpl_FilterStatus, Done)

__attribute__((unused)) static void ASListViewImpl_FilterStatus_initWithNSString_withInt_(ASListViewImpl_FilterStatus *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static ASListViewImpl_FilterStatus *new_ASListViewImpl_FilterStatus_initWithNSString_withInt_(NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

__attribute__((unused)) static IOSObjectArray *ASListViewImpl_FilterStatus_values(void);

__attribute__((unused)) static ASListViewImpl_FilterStatus *ASListViewImpl_FilterStatus_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT ASListViewImpl_FilterStatus *ASListViewImpl_FilterStatus_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(ASListViewImpl_FilterStatus)

@interface ASListViewImpl_OnItemClickListener : NSObject < ADAdapterView_OnItemClickListener, ASIListener > {
 @public
  id<ASIWidget> w_;
  ADView *view_;
  NSString *strValue_;
  NSString *action_;
}

- (NSString *)getAction;

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue;

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue
                     withNSString:(NSString *)action;

- (void)onItemClickWithADAdapterView:(ADAdapterView *)parent
                          withADView:(ADView *)view
                             withInt:(jint)position
                            withLong:(jlong)id_;

- (id<JavaUtilMap>)getOnItemClickEventObjWithADAdapterView:(ADAdapterView *)parent
                                                withADView:(ADView *)view
                                                   withInt:(jint)position
                                                  withLong:(jlong)id_;

@end

J2OBJC_EMPTY_STATIC_INIT(ASListViewImpl_OnItemClickListener)

J2OBJC_FIELD_SETTER(ASListViewImpl_OnItemClickListener, w_, id<ASIWidget>)
J2OBJC_FIELD_SETTER(ASListViewImpl_OnItemClickListener, view_, ADView *)
J2OBJC_FIELD_SETTER(ASListViewImpl_OnItemClickListener, strValue_, NSString *)
J2OBJC_FIELD_SETTER(ASListViewImpl_OnItemClickListener, action_, NSString *)

__attribute__((unused)) static void ASListViewImpl_OnItemClickListener_initWithASIWidget_withNSString_(ASListViewImpl_OnItemClickListener *self, id<ASIWidget> w, NSString *strValue);

__attribute__((unused)) static ASListViewImpl_OnItemClickListener *new_ASListViewImpl_OnItemClickListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASListViewImpl_OnItemClickListener *create_ASListViewImpl_OnItemClickListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue);

__attribute__((unused)) static void ASListViewImpl_OnItemClickListener_initWithASIWidget_withNSString_withNSString_(ASListViewImpl_OnItemClickListener *self, id<ASIWidget> w, NSString *strValue, NSString *action);

__attribute__((unused)) static ASListViewImpl_OnItemClickListener *new_ASListViewImpl_OnItemClickListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASListViewImpl_OnItemClickListener *create_ASListViewImpl_OnItemClickListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action);

J2OBJC_TYPE_LITERAL_HEADER(ASListViewImpl_OnItemClickListener)

@interface ASListViewImpl_OnItemLongClickListener : NSObject < ADAdapterView_OnItemLongClickListener, ASIListener > {
 @public
  id<ASIWidget> w_;
  ADView *view_;
  NSString *strValue_;
  NSString *action_;
}

- (NSString *)getAction;

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue;

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue
                     withNSString:(NSString *)action;

- (jboolean)onItemLongClickWithADAdapterView:(ADAdapterView *)parent
                                  withADView:(ADView *)view
                                     withInt:(jint)position
                                    withLong:(jlong)id_;

- (id<JavaUtilMap>)getOnItemLongClickEventObjWithADAdapterView:(ADAdapterView *)parent
                                                    withADView:(ADView *)view
                                                       withInt:(jint)position
                                                      withLong:(jlong)id_;

@end

J2OBJC_EMPTY_STATIC_INIT(ASListViewImpl_OnItemLongClickListener)

J2OBJC_FIELD_SETTER(ASListViewImpl_OnItemLongClickListener, w_, id<ASIWidget>)
J2OBJC_FIELD_SETTER(ASListViewImpl_OnItemLongClickListener, view_, ADView *)
J2OBJC_FIELD_SETTER(ASListViewImpl_OnItemLongClickListener, strValue_, NSString *)
J2OBJC_FIELD_SETTER(ASListViewImpl_OnItemLongClickListener, action_, NSString *)

__attribute__((unused)) static void ASListViewImpl_OnItemLongClickListener_initWithASIWidget_withNSString_(ASListViewImpl_OnItemLongClickListener *self, id<ASIWidget> w, NSString *strValue);

__attribute__((unused)) static ASListViewImpl_OnItemLongClickListener *new_ASListViewImpl_OnItemLongClickListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASListViewImpl_OnItemLongClickListener *create_ASListViewImpl_OnItemLongClickListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue);

__attribute__((unused)) static void ASListViewImpl_OnItemLongClickListener_initWithASIWidget_withNSString_withNSString_(ASListViewImpl_OnItemLongClickListener *self, id<ASIWidget> w, NSString *strValue, NSString *action);

__attribute__((unused)) static ASListViewImpl_OnItemLongClickListener *new_ASListViewImpl_OnItemLongClickListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASListViewImpl_OnItemLongClickListener *create_ASListViewImpl_OnItemLongClickListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action);

J2OBJC_TYPE_LITERAL_HEADER(ASListViewImpl_OnItemLongClickListener)

@interface ASListViewImpl_OnScrollListener : NSObject < ADAbsListView_OnScrollListener, ASIListener > {
 @public
  id<ASIWidget> w_;
  ADView *view_;
  NSString *strValue_;
  NSString *action_;
}

- (NSString *)getAction;

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue;

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue
                     withNSString:(NSString *)action;

- (void)onScrollWithADAbsListView:(ADAbsListView *)view
                          withInt:(jint)firstVisibleItem
                          withInt:(jint)visibleItemCount
                          withInt:(jint)totalItemCount;

- (void)onScrollStateChangedWithADAbsListView:(ADAbsListView *)view
                                      withInt:(jint)scrollState;

- (id<JavaUtilMap>)getOnScrollStateChangeEventObjWithADAbsListView:(ADAbsListView *)view
                                                           withInt:(jint)scrollState;

- (id<JavaUtilMap>)getOnScrollChangeEventObjWithADAbsListView:(ADAbsListView *)view
                                                      withInt:(jint)firstVisibleItem
                                                      withInt:(jint)visibleItemCount
                                                      withInt:(jint)totalItemCount;

@end

J2OBJC_EMPTY_STATIC_INIT(ASListViewImpl_OnScrollListener)

J2OBJC_FIELD_SETTER(ASListViewImpl_OnScrollListener, w_, id<ASIWidget>)
J2OBJC_FIELD_SETTER(ASListViewImpl_OnScrollListener, view_, ADView *)
J2OBJC_FIELD_SETTER(ASListViewImpl_OnScrollListener, strValue_, NSString *)
J2OBJC_FIELD_SETTER(ASListViewImpl_OnScrollListener, action_, NSString *)

__attribute__((unused)) static void ASListViewImpl_OnScrollListener_initWithASIWidget_withNSString_(ASListViewImpl_OnScrollListener *self, id<ASIWidget> w, NSString *strValue);

__attribute__((unused)) static ASListViewImpl_OnScrollListener *new_ASListViewImpl_OnScrollListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASListViewImpl_OnScrollListener *create_ASListViewImpl_OnScrollListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue);

__attribute__((unused)) static void ASListViewImpl_OnScrollListener_initWithASIWidget_withNSString_withNSString_(ASListViewImpl_OnScrollListener *self, id<ASIWidget> w, NSString *strValue, NSString *action);

__attribute__((unused)) static ASListViewImpl_OnScrollListener *new_ASListViewImpl_OnScrollListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASListViewImpl_OnScrollListener *create_ASListViewImpl_OnScrollListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action);

J2OBJC_TYPE_LITERAL_HEADER(ASListViewImpl_OnScrollListener)

@interface ASListViewImpl_PostMeasureEventHandler () {
 @public
  __unsafe_unretained ASListViewImpl *this$0_;
}

@end

@interface ASListViewImpl_$Lambda$1 : NSObject < JavaLangRunnable > {
 @public
  id<ASIWidget> val$widget_;
}

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(ASListViewImpl_$Lambda$1)

__attribute__((unused)) static void ASListViewImpl_$Lambda$1_initWithASIWidget_(ASListViewImpl_$Lambda$1 *self, id<ASIWidget> capture$0);

__attribute__((unused)) static ASListViewImpl_$Lambda$1 *new_ASListViewImpl_$Lambda$1_initWithASIWidget_(id<ASIWidget> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASListViewImpl_$Lambda$1 *create_ASListViewImpl_$Lambda$1_initWithASIWidget_(id<ASIWidget> capture$0);

@interface ASListViewImpl_$Lambda$2 : NSObject < JavaLangRunnable > {
 @public
  ASListViewImpl *this$0_;
}

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(ASListViewImpl_$Lambda$2)

__attribute__((unused)) static void ASListViewImpl_$Lambda$2_initWithASListViewImpl_(ASListViewImpl_$Lambda$2 *self, ASListViewImpl *outer$);

__attribute__((unused)) static ASListViewImpl_$Lambda$2 *new_ASListViewImpl_$Lambda$2_initWithASListViewImpl_(ASListViewImpl *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASListViewImpl_$Lambda$2 *create_ASListViewImpl_$Lambda$2_initWithASListViewImpl_(ASListViewImpl *outer$);

NSString *ASListViewImpl_LOCAL_NAME = @"ListView";
NSString *ASListViewImpl_GROUP_NAME = @"ListView";
NSString *ASListViewImpl_simpleTableIdentifier = @"SimpleTableItem";

@implementation ASListViewImpl

@synthesize uiView = uiView_;

- (void)loadAttributesWithNSString:(NSString *)localName {
  ASViewGroupImpl_register__WithNSString_(localName);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosRowHeight"])) withTypeWithNSString:@"float"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosEstimatedRowHeight"])) withTypeWithNSString:@"float"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosCellLayoutMarginsFollowReadableWidth"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosInsetsContentViewsToSafeArea"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosSectionHeaderHeight"])) withTypeWithNSString:@"float"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosSectionFooterHeight"])) withTypeWithNSString:@"float"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosEstimatedSectionHeaderHeight"])) withTypeWithNSString:@"float"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosEstimatedSectionFooterHeight"])) withTypeWithNSString:@"float"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosSectionHeaderTopPadding"])) withTypeWithNSString:@"float"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosSeparatorColor"])) withTypeWithNSString:@"color"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosNumberOfSections"])) withTypeWithNSString:@"int"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosAllowsSelection"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosAllowsMultipleSelection"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosAllowsSelectionDuringEditing"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosAllowsMultipleSelectionDuringEditing"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosSelectionFollowsFocus"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosSectionIndexMinimumDisplayRowCount"])) withTypeWithNSString:@"int"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosSectionIndexColor"])) withTypeWithNSString:@"color"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosSectionIndexBackgroundColor"])) withTypeWithNSString:@"color"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosSectionIndexTrackingBackgroundColor"])) withTypeWithNSString:@"color"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosHasUncommittedUpdates"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosHasActiveDrag"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosDragInteractionEnabled"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosHasActiveDrop"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosIsEditing"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosRemembersLastFocusedIndexPath"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosAllowsFocus"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosAllowsFocusDuringEditing"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosFillerRowHeight"])) withTypeWithNSString:@"float"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosIsPrefetchingEnabled"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"onItemClick"])) withTypeWithNSString:@"string"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"onItemLongClick"])) withTypeWithNSString:@"string"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"onScrollChange"])) withTypeWithNSString:@"string"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"listheader"])) withTypeWithNSString:@"template"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"listfooter"])) withTypeWithNSString:@"template"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"scrollX"])) withTypeWithNSString:@"dimension"])) withBufferStrategyWithInt:ASIWidget_BUFFER_STRATEGY_DURING_INIT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"scrollY"])) withTypeWithNSString:@"dimension"])) withBufferStrategyWithInt:ASIWidget_BUFFER_STRATEGY_DURING_INIT]);
  ASConverterFactory_register__WithNSString_withASIConverter_(@"ListView.choiceMode", new_ASListViewImpl_ChoiceMode_init());
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"choiceMode"])) withTypeWithNSString:@"ListView.choiceMode"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"stackFromBottom"])) withTypeWithNSString:@"boolean"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"listSelector"])) withTypeWithNSString:@"drawable"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASConverterFactory_register__WithNSString_withASIConverter_(@"ListView.iosSeparatorStyle", new_ASListViewImpl_IosSeparatorStyle_init());
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosSeparatorStyle"])) withTypeWithNSString:@"ListView.iosSeparatorStyle"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASConverterFactory_register__WithNSString_withASIConverter_(@"ListView.iosCellSelectionStyle", new_ASListViewImpl_IosCellSelectionStyle_init());
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosCellSelectionStyle"])) withTypeWithNSString:@"ListView.iosCellSelectionStyle"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosSeparatorInsetTop"])) withTypeWithNSString:@"dimension"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosSeparatorInsetBottom"])) withTypeWithNSString:@"dimension"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosSeparatorInsetLeft"])) withTypeWithNSString:@"dimension"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosSeparatorInsetRight"])) withTypeWithNSString:@"dimension"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"divider"])) withTypeWithNSString:@"drawable"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"dividerHeight"])) withTypeWithNSString:@"dimension"])) withOrderWithInt:-1])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"footerDividersEnabled"])) withTypeWithNSString:@"boolean"])) withOrderWithInt:-1])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"headerDividersEnabled"])) withTypeWithNSString:@"boolean"])) withOrderWithInt:-1])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"filter"])) withTypeWithNSString:@"string"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"filterDelay"])) withTypeWithNSString:@"int"])) withOrderWithInt:-10]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"filterId"])) withTypeWithNSString:@"string"])) withOrderWithInt:-10]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"filterItemPath"])) withTypeWithNSString:@"array"])) withOrderWithInt:-10]);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASListViewImpl_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithNSString:(NSString *)localname {
  ASListViewImpl_initWithNSString_(self, localname);
  return self;
}

- (instancetype)initWithNSString:(NSString *)groupName
                    withNSString:(NSString *)localname {
  ASListViewImpl_initWithNSString_withNSString_(self, groupName, localname);
  return self;
}

- (id<ASIWidget>)newInstance {
  return new_ASListViewImpl_initWithNSString_withNSString_(groupName_, localName_);
}

- (void)createWithASIFragment:(id<ASIFragment>)fragment
              withJavaUtilMap:(id<JavaUtilMap>)params {
  [super createWithASIFragment:fragment withJavaUtilMap:params];
  listView_ = new_ASListViewImpl_ListViewExt_initWithASListViewImpl_(self);
  ASListViewImpl_nativeCreateWithJavaUtilMap_(self, params);
  ASViewGroupImpl_registerCommandConveterWithASIWidget_(self);
  ASListViewImpl_setWidgetOnNativeClass(self);
}

- (void)setWidgetOnNativeClass {
  ASListViewImpl_setWidgetOnNativeClass(self);
}

- (id)asWidget {
  return listView_;
}

- (void)nativeRemoveViewWithASIWidget:(id<ASIWidget>)widget {
  ASListViewImpl_nativeRemoveViewWithASIWidget_(self, widget);
}

- (void)addWithASIWidget:(id<ASIWidget>)w
                 withInt:(jint)index {
  if (index != -2) {
    ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]);
    ASListViewImpl_createLayoutParamsWithADView_(self, view);
    if (index == -1) {
      [((ADListView *) nil_chk(listView_)) addViewWithADView:view];
    }
    else {
      [((ADListView *) nil_chk(listView_)) addViewWithADView:view withInt:index];
    }
  }
  ASViewGroupImpl_nativeAddViewWithId_withId_([self asNativeWidget], [((id<ASIWidget>) nil_chk(w)) asNativeWidget]);
  [super addWithASIWidget:w withInt:index];
}

- (void)createLayoutParamsWithADView:(ADView *)view {
  ASListViewImpl_createLayoutParamsWithADView_(self, view);
}

- (ADFrameLayout_LayoutParams *)getLayoutParamsWithADView:(ADView *)view {
  return ASListViewImpl_getLayoutParamsWithADView_(self, view);
}

- (void)setChildAttributeWithASIWidget:(id<ASIWidget>)w
                 withASWidgetAttribute:(ASWidgetAttribute *)key
                          withNSString:(NSString *)strValue
                                withId:(id)objValue {
  ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]);
  ADFrameLayout_LayoutParams *layoutParams = ASListViewImpl_getLayoutParamsWithADView_(self, view);
  ASViewGroupImpl_setChildAttributeWithASIWidget_withASWidgetAttribute_withId_withId_(w, key, objValue, layoutParams);
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"layout_width", @"layout_height" }, 2)) {
    case 0:
    ((ADFrameLayout_LayoutParams *) nil_chk(layoutParams))->width_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
    break;
    case 1:
    ((ADFrameLayout_LayoutParams *) nil_chk(layoutParams))->height_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
    break;
    default:
    break;
  }
  [((ADView *) nil_chk(view)) setLayoutParamsWithADViewGroup_LayoutParams:layoutParams];
}

- (id)getChildAttributeWithASIWidget:(id<ASIWidget>)w
               withASWidgetAttribute:(ASWidgetAttribute *)key {
  id attributeValue = ASViewGroupImpl_getChildAttributeWithASIWidget_withASWidgetAttribute_(w, key);
  if (attributeValue != nil) {
    return attributeValue;
  }
  ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]);
  ADFrameLayout_LayoutParams *layoutParams = ASListViewImpl_getLayoutParamsWithADView_(self, view);
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"layout_width", @"layout_height" }, 2)) {
    case 0:
    return JavaLangInteger_valueOfWithInt_(((ADFrameLayout_LayoutParams *) nil_chk(layoutParams))->width_);
    case 1:
    return JavaLangInteger_valueOfWithInt_(((ADFrameLayout_LayoutParams *) nil_chk(layoutParams))->height_);
  }
  return nil;
}

- (IOSClass *)getViewClass {
  return ASListViewImpl_ListViewExt_class_();
}

- (void)setAttributeWithASWidgetAttribute:(ASWidgetAttribute *)key
                             withNSString:(NSString *)strValue
                                   withId:(id)objValue
                withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  ASViewGroupImpl_setAttributeWithASIWidget_withASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(self, key, strValue, objValue, decorator);
  id nativeWidget = [self asNativeWidget];
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"iosRowHeight", @"iosEstimatedRowHeight", @"iosCellLayoutMarginsFollowReadableWidth", @"iosInsetsContentViewsToSafeArea", @"iosSectionHeaderHeight", @"iosSectionFooterHeight", @"iosEstimatedSectionHeaderHeight", @"iosEstimatedSectionFooterHeight", @"iosSectionHeaderTopPadding", @"iosSeparatorColor", @"iosAllowsSelection", @"iosAllowsMultipleSelection", @"iosAllowsSelectionDuringEditing", @"iosAllowsMultipleSelectionDuringEditing", @"iosSelectionFollowsFocus", @"iosSectionIndexMinimumDisplayRowCount", @"iosSectionIndexColor", @"iosSectionIndexBackgroundColor", @"iosSectionIndexTrackingBackgroundColor", @"iosDragInteractionEnabled", @"iosIsEditing", @"iosRemembersLastFocusedIndexPath", @"iosAllowsFocus", @"iosAllowsFocusDuringEditing", @"iosFillerRowHeight", @"iosIsPrefetchingEnabled", @"onItemClick", @"onItemLongClick", @"onScrollChange", @"listheader", @"listfooter", @"scrollX", @"scrollY", @"choiceMode", @"stackFromBottom", @"listSelector", @"iosSeparatorStyle", @"iosCellSelectionStyle", @"iosSeparatorInsetTop", @"iosSeparatorInsetBottom", @"iosSeparatorInsetLeft", @"iosSeparatorInsetRight", @"divider", @"dividerHeight", @"footerDividersEnabled", @"headerDividersEnabled", @"filter", @"filterDelay", @"filterId", @"filterItemPath" }, 50)) {
    case 0:
    {
      [self setRowHeightWithId:nativeWidget withId:objValue];
    }
    break;
    case 1:
    {
      [self setEstimatedRowHeightWithId:nativeWidget withId:objValue];
    }
    break;
    case 2:
    {
      [self setCellLayoutMarginsFollowReadableWidthWithId:nativeWidget withId:objValue];
    }
    break;
    case 3:
    {
      [self setInsetsContentViewsToSafeAreaWithId:nativeWidget withId:objValue];
    }
    break;
    case 4:
    {
      [self setSectionHeaderHeightWithId:nativeWidget withId:objValue];
    }
    break;
    case 5:
    {
      [self setSectionFooterHeightWithId:nativeWidget withId:objValue];
    }
    break;
    case 6:
    {
      [self setEstimatedSectionHeaderHeightWithId:nativeWidget withId:objValue];
    }
    break;
    case 7:
    {
      [self setEstimatedSectionFooterHeightWithId:nativeWidget withId:objValue];
    }
    break;
    case 8:
    {
      if ([self checkIosVersionWithNSString:@"15.0"]) {
        [self setSectionHeaderTopPaddingWithId:nativeWidget withId:objValue];
      }
    }
    break;
    case 9:
    {
      [self setSeparatorColorWithId:nativeWidget withId:objValue];
    }
    break;
    case 10:
    {
      [self setAllowsSelectionWithId:nativeWidget withId:objValue];
    }
    break;
    case 11:
    {
      [self setAllowsMultipleSelectionWithId:nativeWidget withId:objValue];
    }
    break;
    case 12:
    {
      [self setAllowsSelectionDuringEditingWithId:nativeWidget withId:objValue];
    }
    break;
    case 13:
    {
      [self setAllowsMultipleSelectionDuringEditingWithId:nativeWidget withId:objValue];
    }
    break;
    case 14:
    {
      if ([self checkIosVersionWithNSString:@"14.0"]) {
        [self setSelectionFollowsFocusWithId:nativeWidget withId:objValue];
      }
    }
    break;
    case 15:
    {
      [self setSectionIndexMinimumDisplayRowCountWithId:nativeWidget withId:objValue];
    }
    break;
    case 16:
    {
      [self setSectionIndexColorWithId:nativeWidget withId:objValue];
    }
    break;
    case 17:
    {
      [self setSectionIndexBackgroundColorWithId:nativeWidget withId:objValue];
    }
    break;
    case 18:
    {
      [self setSectionIndexTrackingBackgroundColorWithId:nativeWidget withId:objValue];
    }
    break;
    case 19:
    {
      [self setDragInteractionEnabledWithId:nativeWidget withId:objValue];
    }
    break;
    case 20:
    {
      [self setIsEditingWithId:nativeWidget withId:objValue];
    }
    break;
    case 21:
    {
      [self setRemembersLastFocusedIndexPathWithId:nativeWidget withId:objValue];
    }
    break;
    case 22:
    {
      if ([self checkIosVersionWithNSString:@"15.0"]) {
        [self setAllowsFocusWithId:nativeWidget withId:objValue];
      }
    }
    break;
    case 23:
    {
      if ([self checkIosVersionWithNSString:@"15.0"]) {
        [self setAllowsFocusDuringEditingWithId:nativeWidget withId:objValue];
      }
    }
    break;
    case 24:
    {
      if ([self checkIosVersionWithNSString:@"15.0"]) {
        [self setFillerRowHeightWithId:nativeWidget withId:objValue];
      }
    }
    break;
    case 25:
    {
      if ([self checkIosVersionWithNSString:@"15.0"]) {
        [self setIsPrefetchingEnabledWithId:nativeWidget withId:objValue];
      }
    }
    break;
    case 26:
    {
      [self setOnItemClickWithId:objValue];
    }
    break;
    case 27:
    {
      ASListViewImpl_setOnItemLongClickWithId_(self, objValue);
    }
    break;
    case 28:
    {
      ASListViewImpl_setOnScrollWithASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(self, key, strValue, objValue, decorator);
    }
    break;
    case 29:
    {
      ASListViewImpl_addHeaderTemplateWithId_(self, objValue);
    }
    break;
    case 30:
    {
      ASListViewImpl_addFooterTemplateWithId_(self, objValue);
    }
    break;
    case 31:
    {
      ASListViewImpl_setScrollXWithId_(self, objValue);
    }
    break;
    case 32:
    {
      ASListViewImpl_setScrollYWithId_(self, objValue);
    }
    break;
    case 33:
    {
      ASListViewImpl_setChoiceModeWithId_(self, objValue);
    }
    break;
    case 34:
    {
      ASListViewImpl_setStackFromBottomWithId_(self, objValue);
    }
    break;
    case 35:
    {
      ASListViewImpl_setListSelectorWithNSString_withId_(self, strValue, objValue);
    }
    break;
    case 36:
    {
      ASListViewImpl_setSeparatorStyleWithId_(self, objValue);
    }
    break;
    case 37:
    {
      ASListViewImpl_setSelectionStyleWithId_(self, objValue);
    }
    break;
    case 38:
    {
      ASListViewImpl_setSeparatorInsetTopWithId_(self, objValue);
    }
    break;
    case 39:
    {
      ASListViewImpl_setSeparatorInsetBottomWithId_(self, objValue);
    }
    break;
    case 40:
    {
      ASListViewImpl_setSeparatorInsetLeftWithId_(self, objValue);
    }
    break;
    case 41:
    {
      ASListViewImpl_setSeparatorInsetRightWithId_(self, objValue);
    }
    break;
    case 42:
    {
      ASListViewImpl_setDividerWithASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(self, key, strValue, objValue, decorator);
    }
    break;
    case 43:
    {
      ASListViewImpl_setDividerHeightWithId_(self, objValue);
    }
    break;
    case 44:
    {
      ASListViewImpl_setFooterDividersEnabledWithId_(self, objValue);
    }
    break;
    case 45:
    {
      ASListViewImpl_setHeaderDividersEnabledWithId_(self, objValue);
    }
    break;
    case 46:
    {
      ASListViewImpl_filterWithId_(self, objValue);
    }
    break;
    case 47:
    {
      ASListViewImpl_setFilterDelayWithId_(self, objValue);
    }
    break;
    case 48:
    {
      ASListViewImpl_setFilterIdWithId_(self, objValue);
    }
    break;
    case 49:
    {
      ASListViewImpl_setFilterItemPathWithId_(self, objValue);
    }
    break;
    default:
    break;
  }
}

- (id)getAttributeWithASWidgetAttribute:(ASWidgetAttribute *)key
              withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  id attributeValue = ASViewGroupImpl_getAttributeWithASIWidget_withASWidgetAttribute_withASILifeCycleDecorator_(self, key, decorator);
  if (attributeValue != nil) {
    return attributeValue;
  }
  id nativeWidget = [self asNativeWidget];
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"iosRowHeight", @"iosEstimatedRowHeight", @"iosCellLayoutMarginsFollowReadableWidth", @"iosInsetsContentViewsToSafeArea", @"iosSectionHeaderHeight", @"iosSectionFooterHeight", @"iosEstimatedSectionHeaderHeight", @"iosEstimatedSectionFooterHeight", @"iosSectionHeaderTopPadding", @"iosSeparatorColor", @"iosNumberOfSections", @"iosAllowsSelection", @"iosAllowsMultipleSelection", @"iosAllowsSelectionDuringEditing", @"iosAllowsMultipleSelectionDuringEditing", @"iosSelectionFollowsFocus", @"iosSectionIndexMinimumDisplayRowCount", @"iosSectionIndexColor", @"iosSectionIndexBackgroundColor", @"iosSectionIndexTrackingBackgroundColor", @"iosHasUncommittedUpdates", @"iosHasActiveDrag", @"iosDragInteractionEnabled", @"iosHasActiveDrop", @"iosIsEditing", @"iosRemembersLastFocusedIndexPath", @"iosAllowsFocus", @"iosAllowsFocusDuringEditing", @"iosFillerRowHeight", @"iosIsPrefetchingEnabled", @"scrollX", @"scrollY", @"choiceMode", @"stackFromBottom", @"listSelector", @"divider", @"dividerHeight" }, 37)) {
    case 0:
    {
      return [self getRowHeight];
    }
    case 1:
    {
      return [self getEstimatedRowHeight];
    }
    case 2:
    {
      return [self getCellLayoutMarginsFollowReadableWidth];
    }
    case 3:
    {
      return [self getInsetsContentViewsToSafeArea];
    }
    case 4:
    {
      return [self getSectionHeaderHeight];
    }
    case 5:
    {
      return [self getSectionFooterHeight];
    }
    case 6:
    {
      return [self getEstimatedSectionHeaderHeight];
    }
    case 7:
    {
      return [self getEstimatedSectionFooterHeight];
    }
    case 8:
    {
      if ([self checkIosVersionWithNSString:@"15.0"]) {
        return [self getSectionHeaderTopPadding];
      }
      break;
    }
    case 9:
    {
      return [self getSeparatorColor];
    }
    case 10:
    {
      return [self getNumberOfSections];
    }
    case 11:
    {
      return [self getAllowsSelection];
    }
    case 12:
    {
      return [self getAllowsMultipleSelection];
    }
    case 13:
    {
      return [self getAllowsSelectionDuringEditing];
    }
    case 14:
    {
      return [self getAllowsMultipleSelectionDuringEditing];
    }
    case 15:
    {
      if ([self checkIosVersionWithNSString:@"14.0"]) {
        return [self getSelectionFollowsFocus];
      }
      break;
    }
    case 16:
    {
      return [self getSectionIndexMinimumDisplayRowCount];
    }
    case 17:
    {
      return [self getSectionIndexColor];
    }
    case 18:
    {
      return [self getSectionIndexBackgroundColor];
    }
    case 19:
    {
      return [self getSectionIndexTrackingBackgroundColor];
    }
    case 20:
    {
      return [self getHasUncommittedUpdates];
    }
    case 21:
    {
      return [self getHasActiveDrag];
    }
    case 22:
    {
      return [self getDragInteractionEnabled];
    }
    case 23:
    {
      return [self getHasActiveDrop];
    }
    case 24:
    {
      return [self getIsEditing];
    }
    case 25:
    {
      return [self getRemembersLastFocusedIndexPath];
    }
    case 26:
    {
      if ([self checkIosVersionWithNSString:@"15.0"]) {
        return [self getAllowsFocus];
      }
      break;
    }
    case 27:
    {
      if ([self checkIosVersionWithNSString:@"15.0"]) {
        return [self getAllowsFocusDuringEditing];
      }
      break;
    }
    case 28:
    {
      if ([self checkIosVersionWithNSString:@"15.0"]) {
        return [self getFillerRowHeight];
      }
      break;
    }
    case 29:
    {
      if ([self checkIosVersionWithNSString:@"15.0"]) {
        return [self getIsPrefetchingEnabled];
      }
      break;
    }
    case 30:
    {
      return [self getScrollX];
    }
    case 31:
    {
      return [self getScrollY];
    }
    case 32:
    {
      return ASListViewImpl_getChoiceMode(self);
    }
    case 33:
    {
      return ASListViewImpl_getStackFromBottom(self);
    }
    case 34:
    {
      return [self getListSelector];
    }
    case 35:
    {
      return ASListViewImpl_getDividerWithASWidgetAttribute_withASILifeCycleDecorator_(self, key, decorator);
    }
    case 36:
    {
      return ASListViewImpl_getDividerHeight(self);
    }
  }
  return nil;
}

- (id)asNativeWidget {
  return uiView_;
}

- (jboolean)checkIosVersionWithNSString:(NSString *)v {
  return ([[[UIDevice currentDevice] systemVersion] compare:v options:NSNumericSearch] == NSOrderedDescending);
}

- (void)requestLayout {
  if ([self isInitialised]) {
    ASViewImpl_requestLayoutWithASIWidget_withId_(self, [self asNativeWidget]);
    ASListViewImpl_nativeRequestLayout(self);
  }
}

- (void)invalidate {
  if ([self isInitialised]) {
    ASViewImpl_invalidateWithASIWidget_withId_(self, [self asNativeWidget]);
  }
}

- (void)updateModelToEventMapWithJavaUtilMap:(id<JavaUtilMap>)eventMap
                                withNSString:(NSString *)eventType
                                withNSString:(NSString *)eventParams {
  if ([((id<JavaUtilMap>) nil_chk(eventMap)) containsKeyWithId:@"position"] && [((NSString *) nil_chk(eventType)) java_hasPrefix:@"onItem"]) {
    jint position = [((JavaLangInteger *) nil_chk(ASPluginInvoker_getIntWithId_([eventMap getWithId:@"position"]))) intValue];
    position = ASListViewImpl_updatePositionWithJavaUtilMap_withInt_(self, eventMap, position);
    if (position >= 0 && position < [((id<JavaUtilList>) nil_chk(dataList_)) size]) {
      ASLoopParam *loopParam = [((id<JavaUtilList>) nil_chk(dataList_)) getWithInt:position];
      [self updateModelToEventMapWithJavaUtilMap:eventMap withNSString:eventParams withASLoopParam:loopParam];
    }
  }
  else {
    [super updateModelToEventMapWithJavaUtilMap:eventMap withNSString:eventType withNSString:eventParams];
  }
}

- (void)addObjectWithASLoopParam:(ASLoopParam *)childModel
                    withNSString:(NSString *)modelIdPath
                         withInt:(jint)index
                    withNSString:(NSString *)currentLoopVar {
  NSString *id_ = nil;
  if (modelIdPath != nil) {
    id_ = ASPluginInvoker_getStringWithId_([self getModelByPathWithNSString:modelIdPath withId:[((ASLoopParam *) nil_chk(childModel)) getWithId:currentLoopVar]]);
  }
  else {
    id_ = [((JavaUtilUUID *) nil_chk(JavaUtilUUID_randomUUID())) description];
  }
  if (![((id<JavaUtilList>) nil_chk(ids_)) containsWithId:id_]) {
    if (index == -1) {
      [((id<JavaUtilList>) nil_chk(ids_)) addWithId:id_];
      [((id<JavaUtilList>) nil_chk(dataList_)) addWithId:childModel];
    }
    else {
      [((id<JavaUtilList>) nil_chk(ids_)) addWithInt:index withId:id_];
      [((id<JavaUtilList>) nil_chk(dataList_)) addWithInt:index withId:childModel];
    }
  }
  else {
    (void) [((id<JavaUtilList>) nil_chk(dataList_)) setWithInt:[((id<JavaUtilList>) nil_chk(ids_)) indexOfWithId:id_] withId:childModel];
  }
  ASListViewImpl_reloadTable(self);
}

- (void)addAllModelWithId:(id)objValue {
  disableUpdate_ = true;
  [super addAllModelWithId:objValue];
  disableUpdate_ = false;
  ASListViewImpl_reloadTable(self);
}

- (jboolean)removeWithInt:(jint)index {
  if (index + 1 <= [((id<JavaUtilList>) nil_chk(ids_)) size]) {
    (void) [((id<JavaUtilList>) nil_chk(ids_)) removeWithInt:index];
  }
  if (index + 1 <= [((id<JavaUtilList>) nil_chk(dataList_)) size]) {
    (void) [((id<JavaUtilList>) nil_chk(dataList_)) removeWithInt:index];
  }
  ASListViewImpl_reloadTable(self);
  return true;
}

- (jboolean)areWidgetItemsRecycled {
  return true;
}

- (void)clear {
  [((id<JavaUtilList>) nil_chk(ids_)) clear];
  [((id<JavaUtilList>) nil_chk(dataList_)) clear];
  ASListViewImpl_reloadTable(self);
}

- (void)clearModel {
  [((id<JavaUtilList>) nil_chk(ids_)) clear];
  [((id<JavaUtilList>) nil_chk(dataList_)) clear];
}

- (void)notifyDataSetChanged {
  disableUpdate_ = true;
  [super notifyDataSetChanged];
  disableUpdate_ = false;
  ASListViewImpl_reloadTable(self);
}

- (ASListViewImpl_ListAdapter *)getListAdapter {
  return listAdapter_;
}

+ (void)addCheckItemInfoWithJavaUtilMap:(id<JavaUtilMap>)obj
                      withADAdapterView:(ADAdapterView *)parent {
  ASListViewImpl_addCheckItemInfoWithJavaUtilMap_withADAdapterView_(obj, parent);
}

- (void)filterWithId:(id)query {
  ASListViewImpl_filterWithId_(self, query);
}

- (void)setFilterDelayWithId:(id)objValue {
  ASListViewImpl_setFilterDelayWithId_(self, objValue);
}

- (void)setFilterIdWithId:(id)objValue {
  ASListViewImpl_setFilterIdWithId_(self, objValue);
}

- (void)setFilterItemPathWithId:(id)objValue {
  ASListViewImpl_setFilterItemPathWithId_(self, objValue);
}

- (void)setScrollXWithId:(id)objValue {
  ASListViewImpl_setScrollXWithId_(self, objValue);
}

- (void)nativeSetScrollXWithId:(id)view
                       withInt:(jint)value {
  [((ASUITableView*)view) setContentOffset:CGPointMake(value ,((ASUITableView*)view).contentOffset.y)];
}

- (void)setScrollYWithId:(id)objValue {
  ASListViewImpl_setScrollYWithId_(self, objValue);
}

- (void)nativeSetScrollYWithId:(id)view
                       withInt:(jint)value {
  [((ASUITableView*)view) setContentOffset:CGPointMake(((ASUITableView*)view).contentOffset.x, value)];
}

- (id)getScrollX {
  return JavaLangDouble_valueOfWithDouble_([self nativeGetScrollXWithId:[self asNativeWidget]]);
}

- (jdouble)nativeGetScrollXWithId:(id)view {
  return ((ASUITableView*)view).contentOffset.x;
}

- (id)getScrollY {
  return JavaLangDouble_valueOfWithDouble_([self nativeGetScrollYWithId:[self asNativeWidget]]);
}

- (jdouble)nativeGetScrollYWithId:(id)view {
  return ((ASUITableView*)view).contentOffset.y;
}

- (void)setChoiceModeWithId:(id)objValue {
  ASListViewImpl_setChoiceModeWithId_(self, objValue);
}

- (id)getChoiceMode {
  return ASListViewImpl_getChoiceMode(self);
}

- (void)initListAdapter {
  ASListViewImpl_initListAdapter(self);
}

- (jint)updatePositionWithJavaUtilMap:(id<JavaUtilMap>)eventMap
                              withInt:(jint)position {
  return ASListViewImpl_updatePositionWithJavaUtilMap_withInt_(self, eventMap, position);
}

- (void)setRowHeightWithId:(id)nativeWidget
                    withId:(id)value {
  ((ASUITableView*) nativeWidget).rowHeight = [(JavaLangFloat*) value floatValue];
}

- (id)getRowHeight {
  return [JavaLangFloat valueOfWithFloat :((ASUITableView*) uiView_).rowHeight];
}

- (void)setEstimatedRowHeightWithId:(id)nativeWidget
                             withId:(id)value {
  ((ASUITableView*) nativeWidget).estimatedRowHeight = [(JavaLangFloat*) value floatValue];
}

- (id)getEstimatedRowHeight {
  return [JavaLangFloat valueOfWithFloat :((ASUITableView*) uiView_).estimatedRowHeight];
}

- (void)setCellLayoutMarginsFollowReadableWidthWithId:(id)nativeWidget
                                               withId:(id)value {
  ((ASUITableView*) nativeWidget).cellLayoutMarginsFollowReadableWidth = [(JavaLangBoolean*) value booleanValue];
}

- (id)getCellLayoutMarginsFollowReadableWidth {
  return [JavaLangBoolean valueOfWithBoolean :((ASUITableView*) uiView_).cellLayoutMarginsFollowReadableWidth];
}

- (void)setInsetsContentViewsToSafeAreaWithId:(id)nativeWidget
                                       withId:(id)value {
  ((ASUITableView*) nativeWidget).insetsContentViewsToSafeArea = [(JavaLangBoolean*) value booleanValue];
}

- (id)getInsetsContentViewsToSafeArea {
  return [JavaLangBoolean valueOfWithBoolean :((ASUITableView*) uiView_).insetsContentViewsToSafeArea];
}

- (void)setSectionHeaderHeightWithId:(id)nativeWidget
                              withId:(id)value {
  ((ASUITableView*) nativeWidget).sectionHeaderHeight = [(JavaLangFloat*) value floatValue];
}

- (id)getSectionHeaderHeight {
  return [JavaLangFloat valueOfWithFloat :((ASUITableView*) uiView_).sectionHeaderHeight];
}

- (void)setSectionFooterHeightWithId:(id)nativeWidget
                              withId:(id)value {
  ((ASUITableView*) nativeWidget).sectionFooterHeight = [(JavaLangFloat*) value floatValue];
}

- (id)getSectionFooterHeight {
  return [JavaLangFloat valueOfWithFloat :((ASUITableView*) uiView_).sectionFooterHeight];
}

- (void)setEstimatedSectionHeaderHeightWithId:(id)nativeWidget
                                       withId:(id)value {
  ((ASUITableView*) nativeWidget).estimatedSectionHeaderHeight = [(JavaLangFloat*) value floatValue];
}

- (id)getEstimatedSectionHeaderHeight {
  return [JavaLangFloat valueOfWithFloat :((ASUITableView*) uiView_).estimatedSectionHeaderHeight];
}

- (void)setEstimatedSectionFooterHeightWithId:(id)nativeWidget
                                       withId:(id)value {
  ((ASUITableView*) nativeWidget).estimatedSectionFooterHeight = [(JavaLangFloat*) value floatValue];
}

- (id)getEstimatedSectionFooterHeight {
  return [JavaLangFloat valueOfWithFloat :((ASUITableView*) uiView_).estimatedSectionFooterHeight];
}

- (void)setSectionHeaderTopPaddingWithId:(id)nativeWidget
                                  withId:(id)value {
  ((ASUITableView*) nativeWidget).sectionHeaderTopPadding = [(JavaLangFloat*) value floatValue];
}

- (id)getSectionHeaderTopPadding {
  return [JavaLangFloat valueOfWithFloat :((ASUITableView*) uiView_).sectionHeaderTopPadding];
}

- (void)setSeparatorColorWithId:(id)nativeWidget
                         withId:(id)value {
  ((ASUITableView*) nativeWidget).separatorColor = (UIColor*) value;
}

- (id)getSeparatorColor {
  return ((ASUITableView*) uiView_).separatorColor;
}

- (id)getNumberOfSections {
  return [JavaLangInteger valueOfWithInt :((ASUITableView*) uiView_).numberOfSections];
}

- (void)setAllowsSelectionWithId:(id)nativeWidget
                          withId:(id)value {
  ((ASUITableView*) nativeWidget).allowsSelection = [(JavaLangBoolean*) value booleanValue];
}

- (id)getAllowsSelection {
  return [JavaLangBoolean valueOfWithBoolean :((ASUITableView*) uiView_).allowsSelection];
}

- (void)setAllowsMultipleSelectionWithId:(id)nativeWidget
                                  withId:(id)value {
  ((ASUITableView*) nativeWidget).allowsMultipleSelection = [(JavaLangBoolean*) value booleanValue];
}

- (id)getAllowsMultipleSelection {
  return [JavaLangBoolean valueOfWithBoolean :((ASUITableView*) uiView_).allowsMultipleSelection];
}

- (void)setAllowsSelectionDuringEditingWithId:(id)nativeWidget
                                       withId:(id)value {
  ((ASUITableView*) nativeWidget).allowsSelectionDuringEditing = [(JavaLangBoolean*) value booleanValue];
}

- (id)getAllowsSelectionDuringEditing {
  return [JavaLangBoolean valueOfWithBoolean :((ASUITableView*) uiView_).allowsSelectionDuringEditing];
}

- (void)setAllowsMultipleSelectionDuringEditingWithId:(id)nativeWidget
                                               withId:(id)value {
  ((ASUITableView*) nativeWidget).allowsMultipleSelectionDuringEditing = [(JavaLangBoolean*) value booleanValue];
}

- (id)getAllowsMultipleSelectionDuringEditing {
  return [JavaLangBoolean valueOfWithBoolean :((ASUITableView*) uiView_).allowsMultipleSelectionDuringEditing];
}

- (void)setSelectionFollowsFocusWithId:(id)nativeWidget
                                withId:(id)value {
  ((ASUITableView*) nativeWidget).selectionFollowsFocus = [(JavaLangBoolean*) value booleanValue];
}

- (id)getSelectionFollowsFocus {
  return [JavaLangBoolean valueOfWithBoolean :((ASUITableView*) uiView_).selectionFollowsFocus];
}

- (void)setSectionIndexMinimumDisplayRowCountWithId:(id)nativeWidget
                                             withId:(id)value {
  ((ASUITableView*) nativeWidget).sectionIndexMinimumDisplayRowCount = [(JavaLangInteger*) value intValue];
}

- (id)getSectionIndexMinimumDisplayRowCount {
  return [JavaLangInteger valueOfWithInt :((ASUITableView*) uiView_).sectionIndexMinimumDisplayRowCount];
}

- (void)setSectionIndexColorWithId:(id)nativeWidget
                            withId:(id)value {
  ((ASUITableView*) nativeWidget).sectionIndexColor = (UIColor*) value;
}

- (id)getSectionIndexColor {
  return ((ASUITableView*) uiView_).sectionIndexColor;
}

- (void)setSectionIndexBackgroundColorWithId:(id)nativeWidget
                                      withId:(id)value {
  ((ASUITableView*) nativeWidget).sectionIndexBackgroundColor = (UIColor*) value;
}

- (id)getSectionIndexBackgroundColor {
  return ((ASUITableView*) uiView_).sectionIndexBackgroundColor;
}

- (void)setSectionIndexTrackingBackgroundColorWithId:(id)nativeWidget
                                              withId:(id)value {
  ((ASUITableView*) nativeWidget).sectionIndexTrackingBackgroundColor = (UIColor*) value;
}

- (id)getSectionIndexTrackingBackgroundColor {
  return ((ASUITableView*) uiView_).sectionIndexTrackingBackgroundColor;
}

- (id)getHasUncommittedUpdates {
  return [JavaLangBoolean valueOfWithBoolean :((ASUITableView*) uiView_).hasUncommittedUpdates];
}

- (id)getHasActiveDrag {
  return [JavaLangBoolean valueOfWithBoolean :((ASUITableView*) uiView_).hasActiveDrag];
}

- (void)setDragInteractionEnabledWithId:(id)nativeWidget
                                 withId:(id)value {
  ((ASUITableView*) nativeWidget).dragInteractionEnabled = [(JavaLangBoolean*) value booleanValue];
}

- (id)getDragInteractionEnabled {
  return [JavaLangBoolean valueOfWithBoolean :((ASUITableView*) uiView_).dragInteractionEnabled];
}

- (id)getHasActiveDrop {
  return [JavaLangBoolean valueOfWithBoolean :((ASUITableView*) uiView_).hasActiveDrop];
}

- (void)setIsEditingWithId:(id)nativeWidget
                    withId:(id)value {
  ((ASUITableView*) nativeWidget).editing = [(JavaLangBoolean*) value booleanValue];
}

- (id)getIsEditing {
  return [JavaLangBoolean valueOfWithBoolean :((ASUITableView*) uiView_).editing];
}

- (void)setRemembersLastFocusedIndexPathWithId:(id)nativeWidget
                                        withId:(id)value {
  ((ASUITableView*) nativeWidget).remembersLastFocusedIndexPath = [(JavaLangBoolean*) value booleanValue];
}

- (id)getRemembersLastFocusedIndexPath {
  return [JavaLangBoolean valueOfWithBoolean :((ASUITableView*) uiView_).remembersLastFocusedIndexPath];
}

- (void)setAllowsFocusWithId:(id)nativeWidget
                      withId:(id)value {
  ((ASUITableView*) nativeWidget).allowsFocus = [(JavaLangBoolean*) value booleanValue];
}

- (id)getAllowsFocus {
  return [JavaLangBoolean valueOfWithBoolean :((ASUITableView*) uiView_).allowsFocus];
}

- (void)setAllowsFocusDuringEditingWithId:(id)nativeWidget
                                   withId:(id)value {
  ((ASUITableView*) nativeWidget).allowsFocusDuringEditing = [(JavaLangBoolean*) value booleanValue];
}

- (id)getAllowsFocusDuringEditing {
  return [JavaLangBoolean valueOfWithBoolean :((ASUITableView*) uiView_).allowsFocusDuringEditing];
}

- (void)setFillerRowHeightWithId:(id)nativeWidget
                          withId:(id)value {
  ((ASUITableView*) nativeWidget).fillerRowHeight = [(JavaLangFloat*) value floatValue];
}

- (id)getFillerRowHeight {
  return [JavaLangFloat valueOfWithFloat :((ASUITableView*) uiView_).fillerRowHeight];
}

- (void)setIsPrefetchingEnabledWithId:(id)nativeWidget
                               withId:(id)value {
  ((ASUITableView*) nativeWidget).prefetchingEnabled = [(JavaLangBoolean*) value booleanValue];
}

- (id)getIsPrefetchingEnabled {
  return [JavaLangBoolean valueOfWithBoolean :((ASUITableView*) uiView_).prefetchingEnabled];
}

- (void)setIdWithNSString:(NSString *)id_ {
  if (id_ != nil && ![id_ isEqual:@""]) {
    [super setIdWithNSString:id_];
    [((ADListView *) nil_chk(listView_)) setIdWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([self quickConvertWithId:id_ withNSString:@"id"], [JavaLangInteger class]))) intValue]];
  }
}

- (void)setVisibleWithBoolean:(jboolean)b {
  [((ADView *) nil_chk(((ADView *) cast_chk([self asWidget], [ADView class])))) setVisibilityWithInt:b ? ADView_VISIBLE : ADView_GONE];
}

- (void)addFooterTemplateWithId:(id)objValue {
  ASListViewImpl_addFooterTemplateWithId_(self, objValue);
}

- (void)addHeaderTemplateWithId:(id)objValue {
  ASListViewImpl_addHeaderTemplateWithId_(self, objValue);
}

- (void)setOnItemClickWithId:(id)objValue {
  self->onItemClick_ = objValue;
  ASListViewImpl_updateTableSelection(self);
}

- (void)handleItemClickWithInt:(jint)position {
  ASListViewImpl_handleItemClickWithInt_(self, position);
}

- (id)getCellWithInt:(jint)index {
  return ASListViewImpl_getCellWithInt_(self, index);
}

- (void)setCellDividerInsetsWithInt:(jint)index
                             withId:(id)cell {
  ASListViewImpl_setCellDividerInsetsWithInt_withId_(self, index, cell);
}

- (void)nativeSetSeparatorCellInsetRightWithId:(id)cell
                                       withInt:(jint)val {
  ASListViewImpl_nativeSetSeparatorCellInsetRightWithId_withInt_(self, cell, val);
}

- (id)createCellWithInt:(jint)index {
  return ASListViewImpl_createCellWithInt_(self, index);
}

- (jint)calculateHeightOfRowWithInt:(jint)index {
  if ([((id<JavaUtilMap>) nil_chk(heightCache_)) containsKeyWithId:JavaLangInteger_valueOfWithInt_(index)]) {
    return [((JavaLangInteger *) nil_chk([((id<JavaUtilMap>) nil_chk(heightCache_)) getWithId:JavaLangInteger_valueOfWithInt_(index)])) intValue];
  }
  (void) ASListViewImpl_getCellWithInt_(self, index);
  return [((JavaLangInteger *) nil_chk([((id<JavaUtilMap>) nil_chk(heightCache_)) getWithId:JavaLangInteger_valueOfWithInt_(index)])) intValue];
}

- (ADView *)updateLayoutWithASIWidget:(id<ASIWidget>)myWidget
                              withInt:(jint)index {
  return ASListViewImpl_updateLayoutWithASIWidget_withInt_(self, myWidget, index);
}

- (void)setCustomDividerAttributesWithASIWidget:(id<ASIWidget>)cellwidget
                                    withBoolean:(jboolean)visible {
  ASListViewImpl_setCustomDividerAttributesWithASIWidget_withBoolean_(self, cellwidget, visible);
}

- (void)nativeCreateWithJavaUtilMap:(id<JavaUtilMap>)params {
  ASListViewImpl_nativeCreateWithJavaUtilMap_(self, params);
}

- (void)createTableView {
  ASListViewImpl_createTableView(self);
}

- (void)addHeaderWidgetWithId:(id)headerView {
  ASListViewImpl_addHeaderWidgetWithId_(self, headerView);
}

- (void)addFooterWidgetWithId:(id)view {
  ASListViewImpl_addFooterWidgetWithId_(self, view);
}

- (void)updateTableSelection {
  ASListViewImpl_updateTableSelection(self);
}

- (jint)nativeGetWidth {
  return ASListViewImpl_nativeGetWidth(self);
}

- (id)getCellContentViewWithId:(id)cell {
  return ASListViewImpl_getCellContentViewWithId_(self, cell);
}

- (void)setDataWithId:(id)cell
               withId:(id)data {
  ASListViewImpl_setDataWithId_withId_(self, cell, data);
}

- (id<ASIWidget>)getDataWithId:(id)cell {
  return ASListViewImpl_getDataWithId_(self, cell);
}

- (id)getReusableCellWithNSString:(NSString *)simpleTableIdentifier {
  return ASListViewImpl_getReusableCellWithNSString_(self, simpleTableIdentifier);
}

- (id)newCellWithNSString:(NSString *)simpleTableIdentifier
                   withId:(id)data {
  return ASListViewImpl_newCellWithNSString_withId_(self, simpleTableIdentifier, data);
}

- (void)setSelectionStyleOnCellWithId:(id)cell {
  ASListViewImpl_setSelectionStyleOnCellWithId_(self, cell);
}

- (void)addSubViewWithId:(id)cell
                  withId:(id)layout {
  ASListViewImpl_addSubViewWithId_withId_(self, cell, layout);
}

- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView {
  return 1;
}

- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section
{
  return [listAdapter_ getCount];
}
- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath
{
  return (UITableViewCell *)[self getCellWithInt:indexPath.row];
}

- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath
{
  if (!autoLayout_) {
    return (CGFloat)[self calculateHeightOfRowWithInt:indexPath.row];
  } else {
    return UITableViewAutomaticDimension;
  }
}
- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath
{
  if (onItemClick_ != nil) {
    NSNumber *index = [NSNumber numberWithLong:(indexPath.row)];
    [self handleItemClickWithInt: [index intValue]];
  }
}

- (void)scrollViewDidScroll:(UIScrollView *)scrollView
{
  if (onScrollChangeListener_ != nil) {
    UITableView* tableView = (UITableView*) self.uiView;
    NSArray* indexPathsForVisibleRows = [tableView indexPathsForVisibleRows];
    NSIndexPath *firstVisibleItem = [indexPathsForVisibleRows objectAtIndex:0];
    int visibleItemCount = [indexPathsForVisibleRows count];
    int totalItemCount = [listAdapter_ getCount];
    
    [onScrollChangeListener_ onScrollWithADAbsListView: listView_
    withInt: firstVisibleItem.row
    withInt: visibleItemCount
    withInt: totalItemCount];
  }
}

- (void)updateTable {
  ASListViewImpl_updateTable(self);
}

- (void)reloadTable {
  ASListViewImpl_reloadTable(self);
}

- (void)setSeparatorStyleWithId:(id)objValue {
  ASListViewImpl_setSeparatorStyleWithId_(self, objValue);
}

- (void)nativeSetSeparatorStyleWithInt:(jint)separatorStyle {
  ASListViewImpl_nativeSetSeparatorStyleWithInt_(self, separatorStyle);
}

- (id)getStackFromBottom {
  return ASListViewImpl_getStackFromBottom(self);
}

- (jboolean)isStackFromBottom {
  return ASListViewImpl_isStackFromBottom(self);
}

- (void)setStackFromBottomWithId:(id)objValue {
  ASListViewImpl_setStackFromBottomWithId_(self, objValue);
}

- (jboolean)nativeGetStackFromBottom {
  return ASListViewImpl_nativeGetStackFromBottom(self);
}

- (void)nativeSetStackFromBottomWithBoolean:(jboolean)stackFromBottom {
  ASListViewImpl_nativeSetStackFromBottomWithBoolean_(self, stackFromBottom);
}

- (void)nativesetStackFromBottom {
  ASListViewImpl_nativesetStackFromBottom(self);
}

- (void)nativesetStackFromTop {
  ASListViewImpl_nativesetStackFromTop(self);
}

- (void)setOnItemLongClickWithId:(id)objValue {
  ASListViewImpl_setOnItemLongClickWithId_(self, objValue);
}

- (void)longPressWithInt:(jint)position {
  ASListViewImpl_longPressWithInt_(self, position);
}

- (void)nativeAddLongClickListenerWithId:(id)nativeWidget {
  ASListViewImpl_nativeAddLongClickListenerWithId_(self, nativeWidget);
}

- (void)longPressDetected:(ASUILongTapGestureRecognizer *)tapRecognizer {
  if (tapRecognizer.state == UIGestureRecognizerStateBegan) {
    CGPoint p = [tapRecognizer locationInView:(UITableView*) self.uiView];
    NSIndexPath *indexPath = [(UITableView*) self.uiView indexPathForRowAtPoint:p];
    
    if (indexPath == nil) {
      NSLog(@"long press on table view but not on a row");
    } else {
      [self longPressWithInt: indexPath.row];
      [(UITableView*) self.uiView selectRowAtIndexPath:indexPath
      animated:NO scrollPosition:UITableViewScrollPositionNone];
    }
  }
}

- (void)setSelectedBackgroundViewWithId:(id)cell {
  ASListViewImpl_setSelectedBackgroundViewWithId_(self, cell);
}

- (void)setDrawableBoundsWithId:(id)cell
                 withADDrawable:(ADDrawable *)listSelector {
  ASListViewImpl_setDrawableBoundsWithId_withADDrawable_(self, cell, listSelector);
}

- (void)nativeSelectedBackgroundViewWithId:(id)cell
                                    withId:(id)imageOrColor {
  ASListViewImpl_nativeSelectedBackgroundViewWithId_withId_(self, cell, imageOrColor);
}

- (void)setListSelectorWithNSString:(NSString *)strValue
                             withId:(id)objValue {
  ASListViewImpl_setListSelectorWithNSString_withId_(self, strValue, objValue);
}

- (void)nativesetTrackSelectedCellWithBoolean:(jboolean)trackSelectedCell {
  ASListViewImpl_nativesetTrackSelectedCellWithBoolean_(self, trackSelectedCell);
}

- (id)getListSelector {
  return listSelector_;
}

- (void)setSelectionStyleWithId:(id)objValue {
  ASListViewImpl_setSelectionStyleWithId_(self, objValue);
}

- (void)drawableStateChanged {
  [super drawableStateChanged];
  if (listSelector_ != nil && [listSelector_ isStateful] && [((ADDrawable *) nil_chk(listSelector_)) setStateWithIntArray:[((ADListView *) nil_chk(listView_)) getDrawableState]]) {
    ASListViewImpl_setSelectedBackgroundViewWithId_(self, ASListViewImpl_getCurrentSelectedCell(self));
  }
}

- (id)getCurrentSelectedCell {
  return ASListViewImpl_getCurrentSelectedCell(self);
}

- (void)setOnScrollWithASWidgetAttribute:(ASWidgetAttribute *)key
                            withNSString:(NSString *)strValue
                                  withId:(id)objValue
               withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  ASListViewImpl_setOnScrollWithASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(self, key, strValue, objValue, decorator);
}

- (void)setHeaderDividersEnabledWithId:(id)objValue {
  ASListViewImpl_setHeaderDividersEnabledWithId_(self, objValue);
}

- (void)setFooterDividersEnabledWithId:(id)objValue {
  ASListViewImpl_setFooterDividersEnabledWithId_(self, objValue);
}

- (void)setDividerWithASWidgetAttribute:(ASWidgetAttribute *)key
                           withNSString:(NSString *)strValue
                                 withId:(id)objValue
              withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  ASListViewImpl_setDividerWithASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(self, key, strValue, objValue, decorator);
}

- (id)getDividerWithASWidgetAttribute:(ASWidgetAttribute *)key
            withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  return ASListViewImpl_getDividerWithASWidgetAttribute_withASILifeCycleDecorator_(self, key, decorator);
}

- (void)setDividerHeightWithId:(id)objValue {
  ASListViewImpl_setDividerHeightWithId_(self, objValue);
}

- (id)getDividerHeight {
  return ASListViewImpl_getDividerHeight(self);
}

- (void)setSeparatorInsetRightWithId:(id)objValue {
  ASListViewImpl_setSeparatorInsetRightWithId_(self, objValue);
}

- (void)nativeSetSeparatorInsetRightWithInt:(jint)val {
  ASListViewImpl_nativeSetSeparatorInsetRightWithInt_(self, val);
}

- (void)setSeparatorInsetLeftWithId:(id)objValue {
  ASListViewImpl_setSeparatorInsetLeftWithId_(self, objValue);
}

- (void)nativeSetSeparatorInsetLeftWithInt:(jint)val {
  ASListViewImpl_nativeSetSeparatorInsetLeftWithInt_(self, val);
}

- (void)setSeparatorInsetBottomWithId:(id)objValue {
  ASListViewImpl_setSeparatorInsetBottomWithId_(self, objValue);
}

- (void)nativeSetSeparatorInsetBottomWithInt:(jint)val {
  ASListViewImpl_nativeSetSeparatorInsetBottomWithInt_(self, val);
}

- (void)setSeparatorInsetTopWithId:(id)objValue {
  ASListViewImpl_setSeparatorInsetTopWithId_(self, objValue);
}

- (void)nativeSetSeparatorInsetTopWithInt:(jint)val {
  ASListViewImpl_nativeSetSeparatorInsetTopWithInt_(self, val);
}

- (void)nativeRequestLayout {
  ASListViewImpl_nativeRequestLayout(self);
}

- (id<JavaUtilList>)getData {
  return dataList_;
}

- (void)postFilter {
  ASListViewImpl_postFilter(self);
}

- (void)preFilter {
  ASListViewImpl_preFilter(self);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "LASIWidget;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, 5, -1, -1 },
    { NULL, "V", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 10, 11, -1, -1, -1, -1 },
    { NULL, "LADFrameLayout_LayoutParams;", 0x2, 12, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 15, 16, -1, -1, -1, -1 },
    { NULL, "LIOSClass;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 18, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 19, 20, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x101, 21, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 22, 23, -1, 24, -1, -1 },
    { NULL, "V", 0x4, 25, 26, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 27, 28, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 29, 30, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASListViewImpl_ListAdapter;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 31, 32, -1, 33, -1, -1 },
    { NULL, "V", 0x2, 34, 28, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 35, 28, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 36, 28, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 37, 28, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 38, 28, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 39, 40, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 41, 28, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 42, 40, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x101, 43, 28, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x101, 44, 28, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 45, 28, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 46, 47, -1, 48, -1, -1 },
    { NULL, "V", 0x101, 49, 50, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x101, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 51, 50, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x101, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 52, 50, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x101, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 53, 50, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x101, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 54, 50, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x101, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 55, 50, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x101, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 56, 50, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x101, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 57, 50, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x101, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 58, 50, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x101, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 59, 50, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x101, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x101, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 60, 50, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x101, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 61, 50, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x101, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 62, 50, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x101, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 63, 50, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x101, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 64, 50, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x101, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 65, 50, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x101, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 66, 50, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x101, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 67, 50, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x101, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 68, 50, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x101, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x101, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x101, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 69, 50, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x101, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x101, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 70, 50, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x101, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 71, 50, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x101, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 72, 50, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x101, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 73, 50, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x101, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 74, 50, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x101, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 75, 50, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x101, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 76, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 77, 78, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 79, 28, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 80, 28, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 81, 28, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 82, 30, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, 83, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 84, 85, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 86, 40, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, 87, 30, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 88, 30, -1, -1, -1, -1 },
    { NULL, "LADView;", 0x2, 89, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 90, 91, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 92, 93, -1, 94, -1, -1 },
    { NULL, "V", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 95, 28, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 96, 28, -1, -1, -1, -1 },
    { NULL, "V", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x102, 97, 28, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 98, 50, -1, -1, -1, -1 },
    { NULL, "LASIWidget;", 0x102, 99, 28, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x102, 100, 1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x102, 101, 102, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 103, 28, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 104, 50, -1, -1, -1, -1 },
    { NULL, "V", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 105, 28, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 106, 30, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 107, 28, -1, -1, -1, -1 },
    { NULL, "Z", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 108, 78, -1, -1, -1, -1 },
    { NULL, "V", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 109, 28, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 110, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 111, 28, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 112, 28, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 113, 114, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 115, 50, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 116, 102, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 117, 78, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 118, 28, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 119, 18, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 120, 28, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 121, 28, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 122, 18, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, 123, 20, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 124, 28, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 125, 28, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 126, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 127, 28, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 128, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 129, 28, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 130, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 131, 28, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 132, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 133, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(loadAttributesWithNSString:);
  methods[1].selector = @selector(init);
  methods[2].selector = @selector(initWithNSString:);
  methods[3].selector = @selector(initWithNSString:withNSString:);
  methods[4].selector = @selector(newInstance);
  methods[5].selector = @selector(createWithASIFragment:withJavaUtilMap:);
  methods[6].selector = @selector(setWidgetOnNativeClass);
  methods[7].selector = @selector(asWidget);
  methods[8].selector = @selector(nativeRemoveViewWithASIWidget:);
  methods[9].selector = @selector(addWithASIWidget:withInt:);
  methods[10].selector = @selector(createLayoutParamsWithADView:);
  methods[11].selector = @selector(getLayoutParamsWithADView:);
  methods[12].selector = @selector(setChildAttributeWithASIWidget:withASWidgetAttribute:withNSString:withId:);
  methods[13].selector = @selector(getChildAttributeWithASIWidget:withASWidgetAttribute:);
  methods[14].selector = @selector(getViewClass);
  methods[15].selector = @selector(setAttributeWithASWidgetAttribute:withNSString:withId:withASILifeCycleDecorator:);
  methods[16].selector = @selector(getAttributeWithASWidgetAttribute:withASILifeCycleDecorator:);
  methods[17].selector = @selector(asNativeWidget);
  methods[18].selector = @selector(checkIosVersionWithNSString:);
  methods[19].selector = @selector(requestLayout);
  methods[20].selector = @selector(invalidate);
  methods[21].selector = @selector(updateModelToEventMapWithJavaUtilMap:withNSString:withNSString:);
  methods[22].selector = @selector(addObjectWithASLoopParam:withNSString:withInt:withNSString:);
  methods[23].selector = @selector(addAllModelWithId:);
  methods[24].selector = @selector(removeWithInt:);
  methods[25].selector = @selector(areWidgetItemsRecycled);
  methods[26].selector = @selector(clear);
  methods[27].selector = @selector(clearModel);
  methods[28].selector = @selector(notifyDataSetChanged);
  methods[29].selector = @selector(getListAdapter);
  methods[30].selector = @selector(addCheckItemInfoWithJavaUtilMap:withADAdapterView:);
  methods[31].selector = @selector(filterWithId:);
  methods[32].selector = @selector(setFilterDelayWithId:);
  methods[33].selector = @selector(setFilterIdWithId:);
  methods[34].selector = @selector(setFilterItemPathWithId:);
  methods[35].selector = @selector(setScrollXWithId:);
  methods[36].selector = @selector(nativeSetScrollXWithId:withInt:);
  methods[37].selector = @selector(setScrollYWithId:);
  methods[38].selector = @selector(nativeSetScrollYWithId:withInt:);
  methods[39].selector = @selector(getScrollX);
  methods[40].selector = @selector(nativeGetScrollXWithId:);
  methods[41].selector = @selector(getScrollY);
  methods[42].selector = @selector(nativeGetScrollYWithId:);
  methods[43].selector = @selector(setChoiceModeWithId:);
  methods[44].selector = @selector(getChoiceMode);
  methods[45].selector = @selector(initListAdapter);
  methods[46].selector = @selector(updatePositionWithJavaUtilMap:withInt:);
  methods[47].selector = @selector(setRowHeightWithId:withId:);
  methods[48].selector = @selector(getRowHeight);
  methods[49].selector = @selector(setEstimatedRowHeightWithId:withId:);
  methods[50].selector = @selector(getEstimatedRowHeight);
  methods[51].selector = @selector(setCellLayoutMarginsFollowReadableWidthWithId:withId:);
  methods[52].selector = @selector(getCellLayoutMarginsFollowReadableWidth);
  methods[53].selector = @selector(setInsetsContentViewsToSafeAreaWithId:withId:);
  methods[54].selector = @selector(getInsetsContentViewsToSafeArea);
  methods[55].selector = @selector(setSectionHeaderHeightWithId:withId:);
  methods[56].selector = @selector(getSectionHeaderHeight);
  methods[57].selector = @selector(setSectionFooterHeightWithId:withId:);
  methods[58].selector = @selector(getSectionFooterHeight);
  methods[59].selector = @selector(setEstimatedSectionHeaderHeightWithId:withId:);
  methods[60].selector = @selector(getEstimatedSectionHeaderHeight);
  methods[61].selector = @selector(setEstimatedSectionFooterHeightWithId:withId:);
  methods[62].selector = @selector(getEstimatedSectionFooterHeight);
  methods[63].selector = @selector(setSectionHeaderTopPaddingWithId:withId:);
  methods[64].selector = @selector(getSectionHeaderTopPadding);
  methods[65].selector = @selector(setSeparatorColorWithId:withId:);
  methods[66].selector = @selector(getSeparatorColor);
  methods[67].selector = @selector(getNumberOfSections);
  methods[68].selector = @selector(setAllowsSelectionWithId:withId:);
  methods[69].selector = @selector(getAllowsSelection);
  methods[70].selector = @selector(setAllowsMultipleSelectionWithId:withId:);
  methods[71].selector = @selector(getAllowsMultipleSelection);
  methods[72].selector = @selector(setAllowsSelectionDuringEditingWithId:withId:);
  methods[73].selector = @selector(getAllowsSelectionDuringEditing);
  methods[74].selector = @selector(setAllowsMultipleSelectionDuringEditingWithId:withId:);
  methods[75].selector = @selector(getAllowsMultipleSelectionDuringEditing);
  methods[76].selector = @selector(setSelectionFollowsFocusWithId:withId:);
  methods[77].selector = @selector(getSelectionFollowsFocus);
  methods[78].selector = @selector(setSectionIndexMinimumDisplayRowCountWithId:withId:);
  methods[79].selector = @selector(getSectionIndexMinimumDisplayRowCount);
  methods[80].selector = @selector(setSectionIndexColorWithId:withId:);
  methods[81].selector = @selector(getSectionIndexColor);
  methods[82].selector = @selector(setSectionIndexBackgroundColorWithId:withId:);
  methods[83].selector = @selector(getSectionIndexBackgroundColor);
  methods[84].selector = @selector(setSectionIndexTrackingBackgroundColorWithId:withId:);
  methods[85].selector = @selector(getSectionIndexTrackingBackgroundColor);
  methods[86].selector = @selector(getHasUncommittedUpdates);
  methods[87].selector = @selector(getHasActiveDrag);
  methods[88].selector = @selector(setDragInteractionEnabledWithId:withId:);
  methods[89].selector = @selector(getDragInteractionEnabled);
  methods[90].selector = @selector(getHasActiveDrop);
  methods[91].selector = @selector(setIsEditingWithId:withId:);
  methods[92].selector = @selector(getIsEditing);
  methods[93].selector = @selector(setRemembersLastFocusedIndexPathWithId:withId:);
  methods[94].selector = @selector(getRemembersLastFocusedIndexPath);
  methods[95].selector = @selector(setAllowsFocusWithId:withId:);
  methods[96].selector = @selector(getAllowsFocus);
  methods[97].selector = @selector(setAllowsFocusDuringEditingWithId:withId:);
  methods[98].selector = @selector(getAllowsFocusDuringEditing);
  methods[99].selector = @selector(setFillerRowHeightWithId:withId:);
  methods[100].selector = @selector(getFillerRowHeight);
  methods[101].selector = @selector(setIsPrefetchingEnabledWithId:withId:);
  methods[102].selector = @selector(getIsPrefetchingEnabled);
  methods[103].selector = @selector(setIdWithNSString:);
  methods[104].selector = @selector(setVisibleWithBoolean:);
  methods[105].selector = @selector(addFooterTemplateWithId:);
  methods[106].selector = @selector(addHeaderTemplateWithId:);
  methods[107].selector = @selector(setOnItemClickWithId:);
  methods[108].selector = @selector(handleItemClickWithInt:);
  methods[109].selector = @selector(getCellWithInt:);
  methods[110].selector = @selector(setCellDividerInsetsWithInt:withId:);
  methods[111].selector = @selector(nativeSetSeparatorCellInsetRightWithId:withInt:);
  methods[112].selector = @selector(createCellWithInt:);
  methods[113].selector = @selector(calculateHeightOfRowWithInt:);
  methods[114].selector = @selector(updateLayoutWithASIWidget:withInt:);
  methods[115].selector = @selector(setCustomDividerAttributesWithASIWidget:withBoolean:);
  methods[116].selector = @selector(nativeCreateWithJavaUtilMap:);
  methods[117].selector = @selector(createTableView);
  methods[118].selector = @selector(addHeaderWidgetWithId:);
  methods[119].selector = @selector(addFooterWidgetWithId:);
  methods[120].selector = @selector(updateTableSelection);
  methods[121].selector = @selector(nativeGetWidth);
  methods[122].selector = @selector(getCellContentViewWithId:);
  methods[123].selector = @selector(setDataWithId:withId:);
  methods[124].selector = @selector(getDataWithId:);
  methods[125].selector = @selector(getReusableCellWithNSString:);
  methods[126].selector = @selector(newCellWithNSString:withId:);
  methods[127].selector = @selector(setSelectionStyleOnCellWithId:);
  methods[128].selector = @selector(addSubViewWithId:withId:);
  methods[129].selector = @selector(updateTable);
  methods[130].selector = @selector(reloadTable);
  methods[131].selector = @selector(setSeparatorStyleWithId:);
  methods[132].selector = @selector(nativeSetSeparatorStyleWithInt:);
  methods[133].selector = @selector(getStackFromBottom);
  methods[134].selector = @selector(isStackFromBottom);
  methods[135].selector = @selector(setStackFromBottomWithId:);
  methods[136].selector = @selector(nativeGetStackFromBottom);
  methods[137].selector = @selector(nativeSetStackFromBottomWithBoolean:);
  methods[138].selector = @selector(nativesetStackFromBottom);
  methods[139].selector = @selector(nativesetStackFromTop);
  methods[140].selector = @selector(setOnItemLongClickWithId:);
  methods[141].selector = @selector(longPressWithInt:);
  methods[142].selector = @selector(nativeAddLongClickListenerWithId:);
  methods[143].selector = @selector(setSelectedBackgroundViewWithId:);
  methods[144].selector = @selector(setDrawableBoundsWithId:withADDrawable:);
  methods[145].selector = @selector(nativeSelectedBackgroundViewWithId:withId:);
  methods[146].selector = @selector(setListSelectorWithNSString:withId:);
  methods[147].selector = @selector(nativesetTrackSelectedCellWithBoolean:);
  methods[148].selector = @selector(getListSelector);
  methods[149].selector = @selector(setSelectionStyleWithId:);
  methods[150].selector = @selector(drawableStateChanged);
  methods[151].selector = @selector(getCurrentSelectedCell);
  methods[152].selector = @selector(setOnScrollWithASWidgetAttribute:withNSString:withId:withASILifeCycleDecorator:);
  methods[153].selector = @selector(setHeaderDividersEnabledWithId:);
  methods[154].selector = @selector(setFooterDividersEnabledWithId:);
  methods[155].selector = @selector(setDividerWithASWidgetAttribute:withNSString:withId:withASILifeCycleDecorator:);
  methods[156].selector = @selector(getDividerWithASWidgetAttribute:withASILifeCycleDecorator:);
  methods[157].selector = @selector(setDividerHeightWithId:);
  methods[158].selector = @selector(getDividerHeight);
  methods[159].selector = @selector(setSeparatorInsetRightWithId:);
  methods[160].selector = @selector(nativeSetSeparatorInsetRightWithInt:);
  methods[161].selector = @selector(setSeparatorInsetLeftWithId:);
  methods[162].selector = @selector(nativeSetSeparatorInsetLeftWithInt:);
  methods[163].selector = @selector(setSeparatorInsetBottomWithId:);
  methods[164].selector = @selector(nativeSetSeparatorInsetBottomWithInt:);
  methods[165].selector = @selector(setSeparatorInsetTopWithId:);
  methods[166].selector = @selector(nativeSetSeparatorInsetTopWithInt:);
  methods[167].selector = @selector(nativeRequestLayout);
  methods[168].selector = @selector(getData);
  methods[169].selector = @selector(postFilter);
  methods[170].selector = @selector(preFilter);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "uiView_", "LNSObject;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "LOCAL_NAME", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 134, -1, -1 },
    { "GROUP_NAME", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 135, -1, -1 },
    { "listView_", "LADListView;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "disableUpdate_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "listAdapter_", "LASListViewImpl_ListAdapter;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "filter_", "LASListViewImpl_FilterStatus;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "query_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "filterDelay_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "handler_", "LADHandler;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "filterId_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "filterItemPaths_", "[LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "headerTemplate_", "LASHasWidgets;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "footerTemplate_", "LASHasWidgets;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "autoLayout_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "onItemClick_", "LNSObject;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "heightCache_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 136, -1 },
    { "header_", "LASIWidget;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "footer_", "LASIWidget;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "simpleTableIdentifier", "LNSString;", .constantValue.asLong = 0, 0x18, -1, 137, -1, -1 },
    { "onItemLongClickListener_", "LADAdapterView_OnItemLongClickListener;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "listSelector_", "LADDrawable;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "cellSelectionStyle_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "onScrollChangeListener_", "LADAbsListView_OnScrollListener;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "headerDividersEnabled_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "footerDividersEnabled_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "divider_", "LADDrawable;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "dividerHeight_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "separatorInsetRight_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "reloadTableAfterPostMeasure_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "loadAttributes", "LNSString;", "LNSString;LNSString;", "create", "LASIFragment;LJavaUtilMap;", "(Lcom/ashera/core/IFragment;Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;)V", "nativeRemoveView", "LASIWidget;", "add", "LASIWidget;I", "createLayoutParams", "LADView;", "getLayoutParams", "setChildAttribute", "LASIWidget;LASWidgetAttribute;LNSString;LNSObject;", "getChildAttribute", "LASIWidget;LASWidgetAttribute;", "setAttribute", "LASWidgetAttribute;LNSString;LNSObject;LASILifeCycleDecorator;", "getAttribute", "LASWidgetAttribute;LASILifeCycleDecorator;", "checkIosVersion", "updateModelToEventMap", "LJavaUtilMap;LNSString;LNSString;", "(Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;Ljava/lang/String;Ljava/lang/String;)V", "addObject", "LASLoopParam;LNSString;ILNSString;", "addAllModel", "LNSObject;", "remove", "I", "addCheckItemInfo", "LJavaUtilMap;LADAdapterView;", "(Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;Lr/android/widget/AdapterView<*>;)V", "filter", "setFilterDelay", "setFilterId", "setFilterItemPath", "setScrollX", "nativeSetScrollX", "LNSObject;I", "setScrollY", "nativeSetScrollY", "nativeGetScrollX", "nativeGetScrollY", "setChoiceMode", "updatePosition", "LJavaUtilMap;I", "(Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;I)I", "setRowHeight", "LNSObject;LNSObject;", "setEstimatedRowHeight", "setCellLayoutMarginsFollowReadableWidth", "setInsetsContentViewsToSafeArea", "setSectionHeaderHeight", "setSectionFooterHeight", "setEstimatedSectionHeaderHeight", "setEstimatedSectionFooterHeight", "setSectionHeaderTopPadding", "setSeparatorColor", "setAllowsSelection", "setAllowsMultipleSelection", "setAllowsSelectionDuringEditing", "setAllowsMultipleSelectionDuringEditing", "setSelectionFollowsFocus", "setSectionIndexMinimumDisplayRowCount", "setSectionIndexColor", "setSectionIndexBackgroundColor", "setSectionIndexTrackingBackgroundColor", "setDragInteractionEnabled", "setIsEditing", "setRemembersLastFocusedIndexPath", "setAllowsFocus", "setAllowsFocusDuringEditing", "setFillerRowHeight", "setIsPrefetchingEnabled", "setId", "setVisible", "Z", "addFooterTemplate", "addHeaderTemplate", "setOnItemClick", "handleItemClick", "getCell", "setCellDividerInsets", "ILNSObject;", "nativeSetSeparatorCellInsetRight", "createCell", "calculateHeightOfRow", "updateLayout", "setCustomDividerAttributes", "LASIWidget;Z", "nativeCreate", "LJavaUtilMap;", "(Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;)V", "addHeaderWidget", "addFooterWidget", "getCellContentView", "setData", "getData", "getReusableCell", "newCell", "LNSString;LNSObject;", "setSelectionStyleOnCell", "addSubView", "setSeparatorStyle", "nativeSetSeparatorStyle", "setStackFromBottom", "nativeSetStackFromBottom", "setOnItemLongClick", "longPress", "nativeAddLongClickListener", "setSelectedBackgroundView", "setDrawableBounds", "LNSObject;LADDrawable;", "nativeSelectedBackgroundView", "setListSelector", "nativesetTrackSelectedCell", "setSelectionStyle", "setOnScroll", "setHeaderDividersEnabled", "setFooterDividersEnabled", "setDivider", "getDivider", "setDividerHeight", "setSeparatorInsetRight", "nativeSetSeparatorInsetRight", "setSeparatorInsetLeft", "nativeSetSeparatorInsetLeft", "setSeparatorInsetBottom", "nativeSetSeparatorInsetBottom", "setSeparatorInsetTop", "nativeSetSeparatorInsetTop", "()Ljava/util/List<Lcom/ashera/model/LoopParam;>;", &ASListViewImpl_LOCAL_NAME, &ASListViewImpl_GROUP_NAME, "Ljava/util/Map<Ljava/lang/Integer;Ljava/lang/Integer;>;", &ASListViewImpl_simpleTableIdentifier, "LASListViewImpl_ChoiceMode;LASListViewImpl_IosSeparatorStyle;LASListViewImpl_IosCellSelectionStyle;LASListViewImpl_ListViewExt;LASListViewImpl_ListAdapter;LASListViewImpl_FilterStatus;LASListViewImpl_OnItemClickListener;LASListViewImpl_OnItemLongClickListener;LASListViewImpl_OnScrollListener;LASListViewImpl_PostMeasureEventHandler;" };
  static const J2ObjcClassInfo _ASListViewImpl = { "ListViewImpl", "com.ashera.layout", ptrTable, methods, fields, 7, 0x1, 171, 30, -1, 138, -1, -1, -1 };
  return &_ASListViewImpl;
}

@end

void ASListViewImpl_init(ASListViewImpl *self) {
  ASBaseHasWidgets_initWithNSString_withNSString_(self, ASListViewImpl_GROUP_NAME, ASListViewImpl_LOCAL_NAME);
  self->disableUpdate_ = false;
  self->filter_ = JreLoadEnum(ASListViewImpl_FilterStatus, None);
  self->filterDelay_ = 100;
  self->filterId_ = JreLoadStatic(ASFilterFactory, DEFAULT_FILTER);
  self->autoLayout_ = false;
  self->heightCache_ = new_JavaUtilHashMap_init();
  self->cellSelectionStyle_ = JreLoadStatic(ASLayoutNativeVars, UITableViewCellSelectionStyleDefault);
  self->headerDividersEnabled_ = true;
  self->footerDividersEnabled_ = true;
  self->dividerHeight_ = -1;
}

ASListViewImpl *new_ASListViewImpl_init() {
  J2OBJC_NEW_IMPL(ASListViewImpl, init)
}

ASListViewImpl *create_ASListViewImpl_init() {
  J2OBJC_CREATE_IMPL(ASListViewImpl, init)
}

void ASListViewImpl_initWithNSString_(ASListViewImpl *self, NSString *localname) {
  ASBaseHasWidgets_initWithNSString_withNSString_(self, ASListViewImpl_GROUP_NAME, localname);
  self->disableUpdate_ = false;
  self->filter_ = JreLoadEnum(ASListViewImpl_FilterStatus, None);
  self->filterDelay_ = 100;
  self->filterId_ = JreLoadStatic(ASFilterFactory, DEFAULT_FILTER);
  self->autoLayout_ = false;
  self->heightCache_ = new_JavaUtilHashMap_init();
  self->cellSelectionStyle_ = JreLoadStatic(ASLayoutNativeVars, UITableViewCellSelectionStyleDefault);
  self->headerDividersEnabled_ = true;
  self->footerDividersEnabled_ = true;
  self->dividerHeight_ = -1;
}

ASListViewImpl *new_ASListViewImpl_initWithNSString_(NSString *localname) {
  J2OBJC_NEW_IMPL(ASListViewImpl, initWithNSString_, localname)
}

ASListViewImpl *create_ASListViewImpl_initWithNSString_(NSString *localname) {
  J2OBJC_CREATE_IMPL(ASListViewImpl, initWithNSString_, localname)
}

void ASListViewImpl_initWithNSString_withNSString_(ASListViewImpl *self, NSString *groupName, NSString *localname) {
  ASBaseHasWidgets_initWithNSString_withNSString_(self, groupName, localname);
  self->disableUpdate_ = false;
  self->filter_ = JreLoadEnum(ASListViewImpl_FilterStatus, None);
  self->filterDelay_ = 100;
  self->filterId_ = JreLoadStatic(ASFilterFactory, DEFAULT_FILTER);
  self->autoLayout_ = false;
  self->heightCache_ = new_JavaUtilHashMap_init();
  self->cellSelectionStyle_ = JreLoadStatic(ASLayoutNativeVars, UITableViewCellSelectionStyleDefault);
  self->headerDividersEnabled_ = true;
  self->footerDividersEnabled_ = true;
  self->dividerHeight_ = -1;
}

ASListViewImpl *new_ASListViewImpl_initWithNSString_withNSString_(NSString *groupName, NSString *localname) {
  J2OBJC_NEW_IMPL(ASListViewImpl, initWithNSString_withNSString_, groupName, localname)
}

ASListViewImpl *create_ASListViewImpl_initWithNSString_withNSString_(NSString *groupName, NSString *localname) {
  J2OBJC_CREATE_IMPL(ASListViewImpl, initWithNSString_withNSString_, groupName, localname)
}

void ASListViewImpl_setWidgetOnNativeClass(ASListViewImpl *self) {
  ((ASUITableView*) [self asNativeWidget]).widget = self;
}

void ASListViewImpl_nativeRemoveViewWithASIWidget_(ASListViewImpl *self, id<ASIWidget> widget) {
  ADLayoutTransition *layoutTransition = [((ADListView *) nil_chk(self->listView_)) getLayoutTransition];
  if (layoutTransition != nil && ([layoutTransition isTransitionTypeEnabledWithInt:ADLayoutTransition_CHANGE_DISAPPEARING] || [layoutTransition isTransitionTypeEnabledWithInt:ADLayoutTransition_DISAPPEARING])) {
    [self addToBufferedRunnablesWithJavaLangRunnable:new_ASListViewImpl_$Lambda$1_initWithASIWidget_(widget)];
  }
  else {
    ASViewGroupImpl_nativeRemoveViewWithASIWidget_(widget);
  }
}

void ASListViewImpl_createLayoutParamsWithADView_(ASListViewImpl *self, ADView *view) {
  ADFrameLayout_LayoutParams *layoutParams = (ADFrameLayout_LayoutParams *) cast_chk([((ADView *) nil_chk(view)) getLayoutParams], [ADFrameLayout_LayoutParams class]);
  layoutParams = (ADFrameLayout_LayoutParams *) cast_chk([view getLayoutParams], [ADFrameLayout_LayoutParams class]);
  if (layoutParams == nil) {
    layoutParams = new_ADFrameLayout_LayoutParams_initWithInt_withInt_(-2, -2);
    [view setLayoutParamsWithADViewGroup_LayoutParams:layoutParams];
  }
  else {
    layoutParams->height_ = -2;
    layoutParams->width_ = -2;
  }
}

ADFrameLayout_LayoutParams *ASListViewImpl_getLayoutParamsWithADView_(ASListViewImpl *self, ADView *view) {
  return (ADFrameLayout_LayoutParams *) cast_chk([((ADView *) nil_chk(view)) getLayoutParams], [ADFrameLayout_LayoutParams class]);
}

void ASListViewImpl_addCheckItemInfoWithJavaUtilMap_withADAdapterView_(id<JavaUtilMap> obj, ADAdapterView *parent) {
  ASListViewImpl_initialize();
  if ([parent isKindOfClass:[ADAbsListView class]]) {
    ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"checkedItemCount", JavaLangInteger_valueOfWithInt_([((ADAbsListView *) nil_chk(((ADAbsListView *) parent))) getCheckedItemCount]));
    ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"checkedItemPosition", JavaLangInteger_valueOfWithInt_([((ADAbsListView *) nil_chk(((ADAbsListView *) parent))) getCheckedItemPosition]));
    IOSLongArray *checkedItemIds = [((ADAbsListView *) nil_chk(((ADAbsListView *) parent))) getCheckedItemIds];
    id<JavaUtilList> ids = new_JavaUtilArrayList_init();
    {
      IOSLongArray *a__ = checkedItemIds;
      jlong const *b__ = ((IOSLongArray *) nil_chk(a__))->buffer_;
      jlong const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        jlong checkedItemId = *b__++;
        [ids addWithId:ASIdGenerator_getNameWithInt_((jint) checkedItemId)];
      }
    }
    ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"checkedItemIds", ids);
  }
}

void ASListViewImpl_filterWithId_(ASListViewImpl *self, id query) {
  self->query_ = (NSString *) cast_chk(query, [NSString class]);
  if (self->handler_ == nil) {
    self->handler_ = new_ADHandler_init();
  }
  else {
    [self->handler_ removeCallbacksWithJavaLangRunnable:nil];
  }
  [((ADHandler *) nil_chk(self->handler_)) postDelayedWithJavaLangRunnable:new_ASListViewImpl_$Lambda$2_initWithASListViewImpl_(self) withLong:self->filterDelay_];
}

void ASListViewImpl_setFilterDelayWithId_(ASListViewImpl *self, id objValue) {
  self->filterDelay_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
}

void ASListViewImpl_setFilterIdWithId_(ASListViewImpl *self, id objValue) {
  self->filterId_ = (NSString *) cast_chk(objValue, [NSString class]);
}

void ASListViewImpl_setFilterItemPathWithId_(ASListViewImpl *self, id objValue) {
  self->filterItemPaths_ = (IOSObjectArray *) cast_check(objValue, IOSClass_arrayType(NSString_class_(), 1));
}

void ASListViewImpl_setScrollXWithId_(ASListViewImpl *self, id objValue) {
  [self nativeSetScrollXWithId:[self asNativeWidget] withInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
}

void ASListViewImpl_setScrollYWithId_(ASListViewImpl *self, id objValue) {
  [self nativeSetScrollYWithId:[self asNativeWidget] withInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
}

void ASListViewImpl_setChoiceModeWithId_(ASListViewImpl *self, id objValue) {
  [((ADListView *) nil_chk(self->listView_)) setChoiceModeWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
}

id ASListViewImpl_getChoiceMode(ASListViewImpl *self) {
  return JavaLangInteger_valueOfWithInt_([((ADListView *) nil_chk(self->listView_)) getChoiceMode]);
}

void ASListViewImpl_initListAdapter(ASListViewImpl *self) {
  self->listAdapter_ = new_ASListViewImpl_ListAdapter_initWithASListViewImpl_(self);
  [((ADListView *) nil_chk(self->listView_)) setAdapterWithADListAdapter:self->listAdapter_];
}

jint ASListViewImpl_updatePositionWithJavaUtilMap_withInt_(ASListViewImpl *self, id<JavaUtilMap> eventMap, jint position) {
  return position;
}

void ASListViewImpl_addFooterTemplateWithId_(ASListViewImpl *self, id objValue) {
  self->footerTemplate_ = (id<ASHasWidgets>) cast_check(objValue, ASHasWidgets_class_());
  if (self->footerTemplate_ != nil) {
    self->footer_ = ((id<ASHasWidgets>) cast_check([self->footerTemplate_ loadLazyWidgetsWithASHasWidgets:self], ASHasWidgets_class_()));
    ASListViewImpl_addFooterWidgetWithId_(self, [((id<ASIWidget>) nil_chk(self->footer_)) asNativeWidget]);
    ASListViewImpl_setCustomDividerAttributesWithASIWidget_withBoolean_(self, self->footer_, self->footerDividersEnabled_);
  }
}

void ASListViewImpl_addHeaderTemplateWithId_(ASListViewImpl *self, id objValue) {
  self->headerTemplate_ = (id<ASHasWidgets>) cast_check(objValue, ASHasWidgets_class_());
  if (self->headerTemplate_ != nil) {
    self->header_ = ((id<ASHasWidgets>) cast_check([self->headerTemplate_ loadLazyWidgetsWithASHasWidgets:self], ASHasWidgets_class_()));
    ASListViewImpl_addHeaderWidgetWithId_(self, [((id<ASIWidget>) nil_chk(self->header_)) asNativeWidget]);
    ASListViewImpl_setCustomDividerAttributesWithASIWidget_withBoolean_(self, self->header_, self->headerDividersEnabled_);
  }
}

void ASListViewImpl_handleItemClickWithInt_(ASListViewImpl *self, jint position) {
  id<ADAdapterView_OnItemClickListener> onItemClickListener;
  if ([self->onItemClick_ isKindOfClass:[NSString class]]) {
    onItemClickListener = new_ASListViewImpl_OnItemClickListener_initWithASIWidget_withNSString_(self, (NSString *) self->onItemClick_);
  }
  else {
    onItemClickListener = (id<ADAdapterView_OnItemClickListener>) cast_check(self->onItemClick_, ADAdapterView_OnItemClickListener_class_());
  }
  [((ADListView *) nil_chk(self->listView_)) performItemClickWithADView:(ADView *) cast_chk([self asWidget], [ADView class]) withInt:position withLong:-1l];
  [((id<ADAdapterView_OnItemClickListener>) nil_chk(onItemClickListener)) onItemClickWithADAdapterView:self->listView_ withADView:(ADView *) cast_chk([self asWidget], [ADView class]) withInt:position withLong:-1l];
}

id ASListViewImpl_getCellWithInt_(ASListViewImpl *self, jint index) {
  id cell = ASListViewImpl_getReusableCellWithNSString_(self, ASListViewImpl_simpleTableIdentifier);
  if (cell == nil) {
    cell = ASListViewImpl_createCellWithInt_(self, index);
  }
  id<ASIWidget> widget = ASListViewImpl_getDataWithId_(self, cell);
  (void) ASListViewImpl_updateLayoutWithASIWidget_withInt_(self, widget, index);
  ASListViewImpl_setSelectionStyleOnCellWithId_(self, cell);
  ASListViewImpl_setCellDividerInsetsWithInt_withId_(self, index, cell);
  ASListViewImpl_setSelectedBackgroundViewWithId_(self, cell);
  return cell;
}

void ASListViewImpl_setCellDividerInsetsWithInt_withId_(ASListViewImpl *self, jint index, id cell) {
  if (self->footerTemplate_ != nil && index == [((ASListViewImpl_ListAdapter *) nil_chk(self->listAdapter_)) getCount] - 1 && !self->footerDividersEnabled_) {
    ASListViewImpl_nativeSetSeparatorCellInsetRightWithId_withInt_(self, cell, 100000);
  }
  else {
    ASListViewImpl_nativeSetSeparatorCellInsetRightWithId_withInt_(self, cell, self->separatorInsetRight_);
  }
}

void ASListViewImpl_nativeSetSeparatorCellInsetRightWithId_withInt_(ASListViewImpl *self, id cell, jint val) {
  CustomUITableViewCell* mycell = (UITableView*) self.uiView;
  mycell.separatorInset = UIEdgeInsetsMake(mycell.separatorInset.top, mycell.separatorInset.left, mycell.separatorInset.bottom, val);
}

id ASListViewImpl_createCellWithInt_(ASListViewImpl *self, jint index) {
  ASLoopParam *model = (ASLoopParam *) cast_chk([((ASListViewImpl_ListAdapter *) nil_chk(self->listAdapter_)) getItemWithInt:index], [ASLoopParam class]);
  id<ASIWidget> widget = nil;
  if (self->autoLayout_) {
  }
  else {
    widget = [((id<ASIWidget>) nil_chk(self->listItem_)) loadLazyWidgetsWithASHasWidgets:self withInt:-1 withNSString:@"" withASLoopParam:model];
  }
  id cell = ASListViewImpl_newCellWithNSString_withId_(self, ASListViewImpl_simpleTableIdentifier, widget);
  id asNativeWidget = [((id<ASIWidget>) nil_chk(widget)) asNativeWidget];
  ASListViewImpl_addSubViewWithId_withId_(self, cell, asNativeWidget);
  return cell;
}

ADView *ASListViewImpl_updateLayoutWithASIWidget_withInt_(ASListViewImpl *self, id<ASIWidget> myWidget, jint index) {
  ASLoopParam *model = (ASLoopParam *) cast_chk([((ASListViewImpl_ListAdapter *) nil_chk(self->listAdapter_)) getItemWithInt:index], [ASLoopParam class]);
  [self updateModelRecurseWithASIWidget:myWidget withASLoopParam:model];
  if (self->footerTemplate_ != nil && index == [((ASListViewImpl_ListAdapter *) nil_chk(self->listAdapter_)) getCount] - 1) {
    ASListViewImpl_setCustomDividerAttributesWithASIWidget_withBoolean_(self, myWidget, self->footerDividersEnabled_);
  }
  else {
    ASListViewImpl_setCustomDividerAttributesWithASIWidget_withBoolean_(self, myWidget, true);
  }
  if (!self->autoLayout_) {
    ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(myWidget)) asWidget], [ADView class]);
    [((ADListView *) nil_chk(self->listView_)) measureChildWithADView:view];
    [((ADView *) nil_chk(view)) layoutWithInt:0 withInt:0 withInt:[view getMeasuredWidth] withInt:[view getMeasuredHeight]];
    (void) [((id<JavaUtilMap>) nil_chk(self->heightCache_)) putWithId:JavaLangInteger_valueOfWithInt_(index) withId:JavaLangInteger_valueOfWithInt_([view getMeasuredHeight])];
    return view;
  }
  return nil;
}

void ASListViewImpl_setCustomDividerAttributesWithASIWidget_withBoolean_(ASListViewImpl *self, id<ASIWidget> cellwidget, jboolean visible) {
  if (self->divider_ != nil && [ASHasWidgets_class_() isInstance:cellwidget]) {
    id<JavaUtilList> childwidgets = [((id<ASHasWidgets>) nil_chk(((id<ASHasWidgets>) cast_check(cellwidget, ASHasWidgets_class_())))) getWidgets];
    id<ASIWidget> widget = [((id<JavaUtilList>) nil_chk(childwidgets)) getWithInt:[childwidgets size] - 1];
    if ([((NSString *) nil_chk([((id<ASIWidget>) nil_chk(widget)) getId])) isEqual:@"@+id/divider"]) {
      ADView *view = (ADView *) cast_chk(([widget asWidget]), [ADView class]);
      jint visibility = visible ? ADView_VISIBLE : ADView_GONE;
      if ([((ADView *) nil_chk(view)) getVisibility] != visibility) {
        ASViewImpl_setVisibilityWithASIWidget_withId_withId_(widget, [widget asNativeWidget], JavaLangInteger_valueOfWithInt_(visibility));
        [view requestLayout];
      }
      if (self->dividerHeight_ != -1 && ((ADViewGroup_LayoutParams *) nil_chk([view getLayoutParams]))->height_ != self->dividerHeight_) {
        ((ADViewGroup_LayoutParams *) nil_chk([view getLayoutParams]))->height_ = self->dividerHeight_;
        [view requestLayout];
      }
    }
  }
}

void ASListViewImpl_nativeCreateWithJavaUtilMap_(ASListViewImpl *self, id<JavaUtilMap> params) {
  ASListViewImpl_createTableView(self);
  ASListViewImpl_initListAdapter(self);
  NSString *postMeasureEvent = [((ASEvent_StandardEvents *) nil_chk(JreLoadEnum(ASEvent_StandardEvents, postMeasure))) description];
  [((ASEventBus *) nil_chk([((id<ASIFragment>) nil_chk(self->fragment_)) getEventBus])) onWithNSString:postMeasureEvent withASEventBusHandlerArray:[IOSObjectArray newArrayWithObjects:(id[]){ create_ASListViewImpl_PostMeasureEventHandler_initWithASListViewImpl_withNSString_(self, postMeasureEvent) } count:1 type:ASEventBusHandler_class_()]];
}

void ASListViewImpl_createTableView(ASListViewImpl *self) {
  ASUITableView* tableView = [ASUITableView new];
  tableView.allowsSelection = NO;
  tableView.dataSource = self;
  tableView.delegate = self;
  tableView.separatorInset = UIEdgeInsetsMake(0, 0, 0, 0);
  tableView.estimatedRowHeight = 44.0f;
  if (self->autoLayout_) {
    tableView.rowHeight = UITableViewAutomaticDimension;
  }
  [tableView  setTableFooterView:[[UIView alloc] initWithFrame:CGRectMake(0,0,0,0)]];
  self.uiView = tableView;
}

void ASListViewImpl_addHeaderWidgetWithId_(ASListViewImpl *self, id headerView) {
  UITableView* tableView = (UITableView*) self.uiView;
  [tableView setTableHeaderView:headerView];
}

void ASListViewImpl_addFooterWidgetWithId_(ASListViewImpl *self, id view) {
  UITableView* tableView = (UITableView*) self.uiView;
  [tableView setTableFooterView:view];
}

void ASListViewImpl_updateTableSelection(ASListViewImpl *self) {
  ASUITableView* tableView = self.uiView;
  tableView.allowsSelection = YES;
}

jint ASListViewImpl_nativeGetWidth(ASListViewImpl *self) {
  UITableView* tableView = (UITableView*) self.uiView;
  return tableView.frame.size.width;
}

id ASListViewImpl_getCellContentViewWithId_(ASListViewImpl *self, id cell) {
  return ((UITableViewCell*)cell).contentView;
}

void ASListViewImpl_setDataWithId_withId_(ASListViewImpl *self, id cell, id data) {
  ((CustomUITableViewCell*)cell).data = data;
}

id<ASIWidget> ASListViewImpl_getDataWithId_(ASListViewImpl *self, id cell) {
  return ((CustomUITableViewCell*)cell).data;
}

id ASListViewImpl_getReusableCellWithNSString_(ASListViewImpl *self, NSString *simpleTableIdentifier) {
  UITableView* tableView = (UITableView*) self.uiView;
  return [tableView dequeueReusableCellWithIdentifier:simpleTableIdentifier];
}

id ASListViewImpl_newCellWithNSString_withId_(ASListViewImpl *self, NSString *simpleTableIdentifier, id data) {
  CustomUITableViewCell* cell = [[CustomUITableViewCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:simpleTableIdentifier data:data];
  return cell;
}

void ASListViewImpl_setSelectionStyleOnCellWithId_(ASListViewImpl *self, id cell) {
  ((CustomUITableViewCell*) cell).selectionStyle = self->cellSelectionStyle_;
}

void ASListViewImpl_addSubViewWithId_withId_(ASListViewImpl *self, id cell, id layout) {
  [((UITableViewCell*)cell).contentView addSubview:layout];
}

void ASListViewImpl_updateTable(ASListViewImpl *self) {
  UITableView* tableView = (UITableView*) self.uiView;
  [tableView reloadRowsAtIndexPaths:[tableView indexPathsForVisibleRows] withRowAnimation:UITableViewRowAnimationNone];
}

void ASListViewImpl_reloadTable(ASListViewImpl *self) {
  if (!self->disableUpdate_) {
    UITableView* tableView = (UITableView*) self.uiView;
    [tableView reloadData];
  }
}

void ASListViewImpl_setSeparatorStyleWithId_(ASListViewImpl *self, id objValue) {
  ASListViewImpl_nativeSetSeparatorStyleWithInt_(self, [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]);
}

void ASListViewImpl_nativeSetSeparatorStyleWithInt_(ASListViewImpl *self, jint separatorStyle) {
  [((UITableView*)self->uiView_) setSeparatorStyle:separatorStyle];
}

id ASListViewImpl_getStackFromBottom(ASListViewImpl *self) {
  return JavaLangBoolean_valueOfWithBoolean_(ASListViewImpl_isStackFromBottom(self));
}

jboolean ASListViewImpl_isStackFromBottom(ASListViewImpl *self) {
  return ASListViewImpl_nativeGetStackFromBottom(self);
}

void ASListViewImpl_setStackFromBottomWithId_(ASListViewImpl *self, id objValue) {
  jboolean stackFromBottom = [((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]))) booleanValue];
  ASListViewImpl_nativeSetStackFromBottomWithBoolean_(self, stackFromBottom);
  if (stackFromBottom) {
    ASListViewImpl_nativesetStackFromBottom(self);
  }
  else {
    ASListViewImpl_nativesetStackFromTop(self);
  }
}

jboolean ASListViewImpl_nativeGetStackFromBottom(ASListViewImpl *self) {
  return ((ASUITableView*)self->uiView_).stackFromBottom;
}

void ASListViewImpl_nativeSetStackFromBottomWithBoolean_(ASListViewImpl *self, jboolean stackFromBottom) {
  ((ASUITableView*)self->uiView_).stackFromBottom = stackFromBottom;
}

void ASListViewImpl_nativesetStackFromBottom(ASListViewImpl *self) {
  // fixed in layoutsubviews
}

void ASListViewImpl_nativesetStackFromTop(ASListViewImpl *self) {
  ((UITableView*)self->uiView_).contentInset = UIEdgeInsetsMake(0, 0, 0, 0);
}

void ASListViewImpl_setOnItemLongClickWithId_(ASListViewImpl *self, id objValue) {
  if ([objValue isKindOfClass:[NSString class]]) {
    self->onItemLongClickListener_ = new_ASListViewImpl_OnItemLongClickListener_initWithASIWidget_withNSString_(self, (NSString *) objValue);
  }
  else {
    self->onItemLongClickListener_ = (id<ADAdapterView_OnItemLongClickListener>) cast_check(objValue, ADAdapterView_OnItemLongClickListener_class_());
  }
  ASListViewImpl_nativeAddLongClickListenerWithId_(self, self->uiView_);
  ASListViewImpl_updateTableSelection(self);
}

void ASListViewImpl_longPressWithInt_(ASListViewImpl *self, jint position) {
  [((id<ADAdapterView_OnItemLongClickListener>) nil_chk(self->onItemLongClickListener_)) onItemLongClickWithADAdapterView:self->listView_ withADView:(ADView *) cast_chk([self asWidget], [ADView class]) withInt:position withLong:-1];
}

void ASListViewImpl_nativeAddLongClickListenerWithId_(ASListViewImpl *self, id nativeWidget) {
  UIView* view = ((UIView*)nativeWidget);
  ASUILongTapGestureRecognizer *gestureRecognizer = [[ASUILongTapGestureRecognizer alloc] initWithTarget:self action:@selector(longPressDetected:)];
  gestureRecognizer.minimumPressDuration = 1;
  view.userInteractionEnabled = YES;
  
  for (UIGestureRecognizer* interaction in view.gestureRecognizers) {
    if ([interaction isKindOfClass:[ASUILongTapGestureRecognizer class]]) {
      [view removeGestureRecognizer:interaction];
    }
  }
  [view addGestureRecognizer:gestureRecognizer];
}

void ASListViewImpl_setSelectedBackgroundViewWithId_(ASListViewImpl *self, id cell) {
  if (self->listSelector_ != nil) {
    ASListViewImpl_setDrawableBoundsWithId_withADDrawable_(self, cell, self->listSelector_);
    id imageOrColor = [((ADDrawable *) nil_chk(self->listSelector_)) getDrawable];
    ASListViewImpl_nativeSelectedBackgroundViewWithId_withId_(self, cell, imageOrColor);
  }
}

void ASListViewImpl_setDrawableBoundsWithId_withADDrawable_(ASListViewImpl *self, id cell, ADDrawable *listSelector) {
  [listSelector setBoundsWithInt:0 withInt:0 withInt:((CustomUITableViewCell*) cell).frame.size.width withInt:((CustomUITableViewCell*) cell).frame.size.height];
}

void ASListViewImpl_nativeSelectedBackgroundViewWithId_withId_(ASListViewImpl *self, id cell, id imageOrColor) {
  UIImageView* selectedBackgroundView = ((CustomUITableViewCell*) cell).selectedBackgroundView;
  if (selectedBackgroundView == nil) {
    selectedBackgroundView = [UIImageView new];
    ((CustomUITableViewCell*) cell).selectedBackgroundView = selectedBackgroundView;
  }
  
  selectedBackgroundView.backgroundColor = [UIColor clearColor];
  
  if ([selectedBackgroundView  respondsToSelector:@selector(setImage:)]) {
    [selectedBackgroundView setImage: nil];
    if ([imageOrColor isKindOfClass:[UIImage class]]) {
      [selectedBackgroundView setImage: (UIImage*)imageOrColor];
    }
  }
  
  if ([imageOrColor isKindOfClass:[UIColor class]]) {
    selectedBackgroundView.backgroundColor = (UIColor*)imageOrColor;
  }
}

void ASListViewImpl_setListSelectorWithNSString_withId_(ASListViewImpl *self, NSString *strValue, id objValue) {
  self->listSelector_ = (ADDrawable *) cast_chk(objValue, [ADDrawable class]);
  ASListViewImpl_nativesetTrackSelectedCellWithBoolean_(self, self->listSelector_ != nil && [self->listSelector_ isStateful]);
}

void ASListViewImpl_nativesetTrackSelectedCellWithBoolean_(ASListViewImpl *self, jboolean trackSelectedCell) {
  ((ASUITableView*)self->uiView_).trackSelectedCell = trackSelectedCell;
}

void ASListViewImpl_setSelectionStyleWithId_(ASListViewImpl *self, id objValue) {
  self->cellSelectionStyle_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
}

id ASListViewImpl_getCurrentSelectedCell(ASListViewImpl *self) {
  ASUITableView* tableView = (ASUITableView*) self.uiView;
  return tableView.currentSelectedCell;
}

void ASListViewImpl_setOnScrollWithASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(ASListViewImpl *self, ASWidgetAttribute *key, NSString *strValue, id objValue, id<ASILifeCycleDecorator> decorator) {
  if ([objValue isKindOfClass:[NSString class]]) {
    self->onScrollChangeListener_ = new_ASListViewImpl_OnScrollListener_initWithASIWidget_withNSString_(self, (NSString *) objValue);
  }
  else {
    self->onScrollChangeListener_ = (id<ADAbsListView_OnScrollListener>) cast_check(objValue, ADAbsListView_OnScrollListener_class_());
  }
}

void ASListViewImpl_setHeaderDividersEnabledWithId_(ASListViewImpl *self, id objValue) {
  self->headerDividersEnabled_ = [((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]))) booleanValue];
  if ([self isInitialised] && self->header_ != nil) {
    ASListViewImpl_setCustomDividerAttributesWithASIWidget_withBoolean_(self, self->header_, self->headerDividersEnabled_);
  }
}

void ASListViewImpl_setFooterDividersEnabledWithId_(ASListViewImpl *self, id objValue) {
  self->footerDividersEnabled_ = [((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]))) booleanValue];
  if ([self isInitialised] && self->footer_ != nil) {
    ASListViewImpl_setCustomDividerAttributesWithASIWidget_withBoolean_(self, self->footer_, self->footerDividersEnabled_);
  }
}

void ASListViewImpl_setDividerWithASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(ASListViewImpl *self, ASWidgetAttribute *key, NSString *strValue, id objValue, id<ASILifeCycleDecorator> decorator) {
  self->divider_ = (ADDrawable *) cast_chk(objValue, [ADDrawable class]);
}

id ASListViewImpl_getDividerWithASWidgetAttribute_withASILifeCycleDecorator_(ASListViewImpl *self, ASWidgetAttribute *key, id<ASILifeCycleDecorator> decorator) {
  return self->divider_;
}

void ASListViewImpl_setDividerHeightWithId_(ASListViewImpl *self, id objValue) {
  self->dividerHeight_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
}

id ASListViewImpl_getDividerHeight(ASListViewImpl *self) {
  return JavaLangInteger_valueOfWithInt_(self->dividerHeight_);
}

void ASListViewImpl_setSeparatorInsetRightWithId_(ASListViewImpl *self, id objValue) {
  self->separatorInsetRight_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
  ASListViewImpl_nativeSetSeparatorInsetRightWithInt_(self, self->separatorInsetRight_);
}

void ASListViewImpl_nativeSetSeparatorInsetRightWithInt_(ASListViewImpl *self, jint val) {
  ASUITableView* tableView = (ASUITableView*) self.uiView;
  tableView.separatorInset = UIEdgeInsetsMake(tableView.separatorInset.top, tableView.separatorInset.left, tableView.separatorInset.bottom, val);
}

void ASListViewImpl_setSeparatorInsetLeftWithId_(ASListViewImpl *self, id objValue) {
  ASListViewImpl_nativeSetSeparatorInsetLeftWithInt_(self, [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]);
}

void ASListViewImpl_nativeSetSeparatorInsetLeftWithInt_(ASListViewImpl *self, jint val) {
  ASUITableView* tableView = (ASUITableView*) self.uiView;
  tableView.separatorInset = UIEdgeInsetsMake(tableView.separatorInset.top, val, tableView.separatorInset.bottom, tableView.separatorInset.right);
}

void ASListViewImpl_setSeparatorInsetBottomWithId_(ASListViewImpl *self, id objValue) {
  ASListViewImpl_nativeSetSeparatorInsetBottomWithInt_(self, [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]);
}

void ASListViewImpl_nativeSetSeparatorInsetBottomWithInt_(ASListViewImpl *self, jint val) {
  ASUITableView* tableView = (ASUITableView*) self.uiView;
  tableView.separatorInset = UIEdgeInsetsMake(tableView.separatorInset.top, tableView.separatorInset.left, val, tableView.separatorInset.right);
}

void ASListViewImpl_setSeparatorInsetTopWithId_(ASListViewImpl *self, id objValue) {
  ASListViewImpl_nativeSetSeparatorInsetTopWithInt_(self, [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]);
}

void ASListViewImpl_nativeSetSeparatorInsetTopWithInt_(ASListViewImpl *self, jint val) {
  ASUITableView* tableView = (ASUITableView*) self.uiView;
  tableView.separatorInset = UIEdgeInsetsMake(val, tableView.separatorInset.left, tableView.separatorInset.bottom, tableView.separatorInset.right);
}

void ASListViewImpl_nativeRequestLayout(ASListViewImpl *self) {
  self->reloadTableAfterPostMeasure_ = true;
}

void ASListViewImpl_postFilter(ASListViewImpl *self) {
  ASListViewImpl_reloadTable(self);
}

void ASListViewImpl_preFilter(ASListViewImpl *self) {
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASListViewImpl)

@implementation ASListViewImpl_ChoiceMode

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASListViewImpl_ChoiceMode_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilMap>)getMapping {
  return mapping_;
}

- (JavaLangInteger *)getDefault {
  return JavaLangInteger_valueOfWithInt_(0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMapping);
  methods[2].selector = @selector(getDefault);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapping_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "LASListViewImpl;" };
  static const J2ObjcClassInfo _ASListViewImpl_ChoiceMode = { "ChoiceMode", "com.ashera.layout", ptrTable, methods, fields, 7, 0x18, 3, 1, 2, -1, -1, -1, -1 };
  return &_ASListViewImpl_ChoiceMode;
}

@end

void ASListViewImpl_ChoiceMode_init(ASListViewImpl_ChoiceMode *self) {
  ASAbstractEnumToIntConverter_init(self);
  self->mapping_ = new_JavaUtilHashMap_init();
  {
    (void) [self->mapping_ putWithId:@"multipleChoice" withId:JavaLangInteger_valueOfWithInt_((jint) 0x2)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"multipleChoiceModal" withId:JavaLangInteger_valueOfWithInt_((jint) 0x3)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"none" withId:JavaLangInteger_valueOfWithInt_((jint) 0x0)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"singleChoice" withId:JavaLangInteger_valueOfWithInt_((jint) 0x1)];
  }
}

ASListViewImpl_ChoiceMode *new_ASListViewImpl_ChoiceMode_init() {
  J2OBJC_NEW_IMPL(ASListViewImpl_ChoiceMode, init)
}

ASListViewImpl_ChoiceMode *create_ASListViewImpl_ChoiceMode_init() {
  J2OBJC_CREATE_IMPL(ASListViewImpl_ChoiceMode, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASListViewImpl_ChoiceMode)

@implementation ASListViewImpl_IosSeparatorStyle

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASListViewImpl_IosSeparatorStyle_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilMap>)getMapping {
  return mapping_;
}

- (JavaLangInteger *)getDefault {
  return JavaLangInteger_valueOfWithInt_(0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMapping);
  methods[2].selector = @selector(getDefault);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapping_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "LASListViewImpl;" };
  static const J2ObjcClassInfo _ASListViewImpl_IosSeparatorStyle = { "IosSeparatorStyle", "com.ashera.layout", ptrTable, methods, fields, 7, 0x18, 3, 1, 2, -1, -1, -1, -1 };
  return &_ASListViewImpl_IosSeparatorStyle;
}

@end

void ASListViewImpl_IosSeparatorStyle_init(ASListViewImpl_IosSeparatorStyle *self) {
  ASAbstractEnumToIntConverter_init(self);
  self->mapping_ = new_JavaUtilHashMap_init();
  {
    (void) [self->mapping_ putWithId:@"none" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UITableViewCellSeparatorStyleNone))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"singleLine" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UITableViewCellSeparatorStyleSingleLine))];
  }
}

ASListViewImpl_IosSeparatorStyle *new_ASListViewImpl_IosSeparatorStyle_init() {
  J2OBJC_NEW_IMPL(ASListViewImpl_IosSeparatorStyle, init)
}

ASListViewImpl_IosSeparatorStyle *create_ASListViewImpl_IosSeparatorStyle_init() {
  J2OBJC_CREATE_IMPL(ASListViewImpl_IosSeparatorStyle, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASListViewImpl_IosSeparatorStyle)

@implementation ASListViewImpl_IosCellSelectionStyle

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASListViewImpl_IosCellSelectionStyle_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilMap>)getMapping {
  return mapping_;
}

- (JavaLangInteger *)getDefault {
  return JavaLangInteger_valueOfWithInt_(0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMapping);
  methods[2].selector = @selector(getDefault);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapping_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "LASListViewImpl;" };
  static const J2ObjcClassInfo _ASListViewImpl_IosCellSelectionStyle = { "IosCellSelectionStyle", "com.ashera.layout", ptrTable, methods, fields, 7, 0x18, 3, 1, 2, -1, -1, -1, -1 };
  return &_ASListViewImpl_IosCellSelectionStyle;
}

@end

void ASListViewImpl_IosCellSelectionStyle_init(ASListViewImpl_IosCellSelectionStyle *self) {
  ASAbstractEnumToIntConverter_init(self);
  self->mapping_ = new_JavaUtilHashMap_init();
  {
    (void) [self->mapping_ putWithId:@"none" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UITableViewCellSelectionStyleNone))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"gray" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UITableViewCellSelectionStyleGray))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"blue" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UITableViewCellSelectionStyleBlue))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"default" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UITableViewCellSelectionStyleDefault))];
  }
}

ASListViewImpl_IosCellSelectionStyle *new_ASListViewImpl_IosCellSelectionStyle_init() {
  J2OBJC_NEW_IMPL(ASListViewImpl_IosCellSelectionStyle, init)
}

ASListViewImpl_IosCellSelectionStyle *create_ASListViewImpl_IosCellSelectionStyle_init() {
  J2OBJC_CREATE_IMPL(ASListViewImpl_IosCellSelectionStyle, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASListViewImpl_IosCellSelectionStyle)

@implementation ASListViewImpl_ListViewExt

- (id<ASIWidget>)getWidget {
  return this$0_;
}

- (void)setMaxWidthWithInt:(jint)width {
  mMaxWidth_ = width;
}

- (void)setMaxHeightWithInt:(jint)height {
  mMaxHeight_ = height;
}

- (jint)getMaxWidth {
  return mMaxWidth_;
}

- (jint)getMaxHeight {
  return mMaxHeight_;
}

- (instancetype)initWithASListViewImpl:(ASListViewImpl *)outer$ {
  ASListViewImpl_ListViewExt_initWithASListViewImpl_(self, outer$);
  return self;
}

- (void)onMeasureWithInt:(jint)widthMeasureSpec
                 withInt:(jint)heightMeasureSpec {
  if (mMaxWidth_ > 0) {
    widthMeasureSpec = ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_(mMaxWidth_, ADView_MeasureSpec_AT_MOST);
  }
  if (mMaxHeight_ > 0) {
    heightMeasureSpec = ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_(mMaxHeight_, ADView_MeasureSpec_AT_MOST);
  }
  [super onMeasureWithInt:widthMeasureSpec withInt:heightMeasureSpec];
  id<ASIWidgetLifeCycleListener> listener = [this$0_ getListener];
  if (listener != nil) {
    [((ASMeasureEvent *) nil_chk(measureFinished_)) setWidthWithInt:[self getMeasuredWidth]];
    [((ASMeasureEvent *) nil_chk(measureFinished_)) setHeightWithInt:[self getMeasuredHeight]];
    [listener eventOccurredWithASIWidgetLifeCycleListener_EventId:JreLoadEnum(ASIWidgetLifeCycleListener_EventId, measureFinished) withASWidgetEvent:measureFinished_];
  }
}

- (void)onLayoutWithBoolean:(jboolean)changed
                    withInt:(jint)l
                    withInt:(jint)t
                    withInt:(jint)r
                    withInt:(jint)b {
  [super onLayoutWithBoolean:changed withInt:l withInt:t withInt:r withInt:b];
  ASViewImpl_setDrawableBoundsWithASIWidget_withInt_withInt_withInt_withInt_(this$0_, l, t, r, b);
  if (![self isOverlay]) {
    ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_([this$0_ asNativeWidget], l, t, r, b);
  }
  [this$0_ replayBufferedEvents];
  ASViewImpl_redrawDrawablesWithASIWidget_(this$0_);
  overlays_ = ASViewImpl_drawOverlayWithASIWidget_withJavaUtilList_(this$0_, overlays_);
  id<ASIWidgetLifeCycleListener> listener = [this$0_ getListener];
  if (listener != nil) {
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setBWithInt:b];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setLWithInt:l];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setRWithInt:r];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setTWithInt:t];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setChangedWithBoolean:changed];
    [listener eventOccurredWithASIWidgetLifeCycleListener_EventId:JreLoadEnum(ASIWidgetLifeCycleListener_EventId, onLayout) withASWidgetEvent:onLayoutEvent_];
  }
  if ([this$0_ isInvalidateOnFrameChange] && [this$0_ isInitialised]) {
    [this$0_ invalidate];
  }
}

- (void)executeWithNSString:(NSString *)method
          withNSObjectArray:(IOSObjectArray *)canvas {
}

- (void)updateMeasuredDimensionWithInt:(jint)width
                               withInt:(jint)height {
  [self setMeasuredDimensionWithInt:width withInt:height];
}

- (id<ASILifeCycleDecorator>)newInstanceWithASIWidget:(id<ASIWidget>)widget {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)setAttributeWithASWidgetAttribute:(ASWidgetAttribute *)widgetAttribute
                             withNSString:(NSString *)strValue
                                   withId:(id)objValue {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (id<JavaUtilList>)getMethods {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)initialized {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (id)getAttributeWithASWidgetAttribute:(ASWidgetAttribute *)widgetAttribute {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)drawableStateChanged {
  [super drawableStateChanged];
  if (![this$0_ isWidgetDisposed]) {
    ASViewImpl_drawableStateChangedWithASIWidget_(this$0_);
  }
}

- (ADView *)inflateViewWithNSString:(NSString *)layout {
  if (templates_ == nil) {
    templates_ = new_JavaUtilHashMap_init();
  }
  id<ASIWidget> template_ = [templates_ getWithId:layout];
  if (template_ == nil) {
    template_ = (id<ASIWidget>) cast_check([this$0_ quickConvertWithId:layout withNSString:@"template"], ASIWidget_class_());
    (void) [((id<JavaUtilMap>) nil_chk(templates_)) putWithId:layout withId:template_];
  }
  id<ASIWidget> widget = [((id<ASIWidget>) nil_chk(template_)) loadLazyWidgetsWithASHasWidgets:this$0_];
  return (ADView *) cast_chk([((id<ASIWidget>) nil_chk(widget)) asWidget], [ADView class]);
}

- (void)remeasure {
  if ([this$0_ getFragment] != nil) {
    [((id<ASIFragment>) nil_chk([this$0_ getFragment])) remeasure];
  }
}

- (void)removeFromParent {
  [((id<ASHasWidgets>) nil_chk([this$0_ getParent])) removeWithASIWidget:this$0_];
}

- (void)getLocationOnScreenWithIntArray:(IOSIntArray *)appScreenLocation {
  *IOSIntArray_GetRef(nil_chk(appScreenLocation), 0) = ASViewImpl_getLocationXOnScreenWithId_([this$0_ asNativeWidget]);
  *IOSIntArray_GetRef(appScreenLocation, 1) = ASViewImpl_getLocationYOnScreenWithId_([this$0_ asNativeWidget]);
}

- (void)getWindowVisibleDisplayFrameWithADRect:(ADRect *)displayFrame {
  ((ADRect *) nil_chk(displayFrame))->left_ = ASViewImpl_getLocationXOnScreenWithId_([this$0_ asNativeWidget]);
  displayFrame->top_ = ASViewImpl_getLocationYOnScreenWithId_([this$0_ asNativeWidget]);
  displayFrame->right_ = displayFrame->left_ + [self getWidth];
  displayFrame->bottom_ = displayFrame->top_ + [self getHeight];
}

- (void)offsetTopAndBottomWithInt:(jint)offset {
  [super offsetTopAndBottomWithInt:offset];
  ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_([this$0_ asNativeWidget], [self getLeft], [self getTop], [self getRight], [self getBottom]);
}

- (void)offsetLeftAndRightWithInt:(jint)offset {
  [super offsetLeftAndRightWithInt:offset];
  ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_([this$0_ asNativeWidget], [self getLeft], [self getTop], [self getRight], [self getBottom]);
}

- (void)setMyAttributeWithNSString:(NSString *)name
                            withId:(id)value {
  if ([((NSString *) nil_chk(name)) isEqual:@"state0"]) {
    [self setState0WithId:value];
    return;
  }
  if ([name isEqual:@"state1"]) {
    [self setState1WithId:value];
    return;
  }
  if ([name isEqual:@"state2"]) {
    [self setState2WithId:value];
    return;
  }
  if ([name isEqual:@"state3"]) {
    [self setState3WithId:value];
    return;
  }
  if ([name isEqual:@"state4"]) {
    [self setState4WithId:value];
    return;
  }
  [this$0_ setAttributeWithNSString:name withId:value withBoolean:!([value isKindOfClass:[NSString class]])];
}

- (void)setVisibilityWithInt:(jint)visibility {
  [super setVisibilityWithInt:visibility];
  ASViewImpl_nativeSetVisibilityWithId_withBoolean_([this$0_ asNativeWidget], visibility != ADView_VISIBLE);
}

- (jint)measureHeightOfChildrenWithInt:(jint)widthMeasureSpec
                               withInt:(jint)startPosition
                               withInt:(jint)endPosition
                               withInt:(jint)maxHeight
                               withInt:(jint)disallowPartialChildPosition {
  jint height = 0;
  for (jint i = 0; i < [((id<JavaUtilList>) nil_chk(this$0_->dataList_)) size]; i++) {
    height += [this$0_ calculateHeightOfRowWithInt:i];
  }
  return height;
}

- (void)setState0WithId:(id)value {
  ASViewImpl_setStateWithASIWidget_withInt_withId_(this$0_, 0, value);
}

- (void)setState1WithId:(id)value {
  ASViewImpl_setStateWithASIWidget_withInt_withId_(this$0_, 1, value);
}

- (void)setState2WithId:(id)value {
  ASViewImpl_setStateWithASIWidget_withInt_withId_(this$0_, 2, value);
}

- (void)setState3WithId:(id)value {
  ASViewImpl_setStateWithASIWidget_withInt_withId_(this$0_, 3, value);
}

- (void)setState4WithId:(id)value {
  ASViewImpl_setStateWithASIWidget_withInt_withId_(this$0_, 4, value);
}

- (void)state0 {
  ASViewImpl_stateWithASIWidget_withInt_(this$0_, 0);
}

- (void)state1 {
  ASViewImpl_stateWithASIWidget_withInt_(this$0_, 1);
}

- (void)state2 {
  ASViewImpl_stateWithASIWidget_withInt_(this$0_, 2);
}

- (void)state3 {
  ASViewImpl_stateWithASIWidget_withInt_(this$0_, 3);
}

- (void)state4 {
  ASViewImpl_stateWithASIWidget_withInt_(this$0_, 4);
}

- (void)stateYes {
  ASViewImpl_stateYesWithASIWidget_(this$0_);
}

- (void)stateNo {
  ASViewImpl_stateNoWithASIWidget_(this$0_);
}

- (void)endViewTransitionWithADView:(ADView *)view {
  [super endViewTransitionWithADView:view];
  [this$0_ runBufferedRunnables];
}

- (void)__javaClone:(ASListViewImpl_ListViewExt *)original {
  [super __javaClone:original];
  JreRelease(this$0_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LASIWidget;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x81, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 5, -1, -1, -1, -1 },
    { NULL, "LASILifeCycleDecorator;", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 15, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 16, 17, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADView;", 0x1, 18, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 21, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 22, 23, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 24, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 25, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 26, 27, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 28, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 29, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 31, 32, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 33, 32, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 34, 32, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 35, 32, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 36, 32, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 37, 38, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getWidget);
  methods[1].selector = @selector(setMaxWidthWithInt:);
  methods[2].selector = @selector(setMaxHeightWithInt:);
  methods[3].selector = @selector(getMaxWidth);
  methods[4].selector = @selector(getMaxHeight);
  methods[5].selector = @selector(initWithASListViewImpl:);
  methods[6].selector = @selector(onMeasureWithInt:withInt:);
  methods[7].selector = @selector(onLayoutWithBoolean:withInt:withInt:withInt:withInt:);
  methods[8].selector = @selector(executeWithNSString:withNSObjectArray:);
  methods[9].selector = @selector(updateMeasuredDimensionWithInt:withInt:);
  methods[10].selector = @selector(newInstanceWithASIWidget:);
  methods[11].selector = @selector(setAttributeWithASWidgetAttribute:withNSString:withId:);
  methods[12].selector = @selector(getMethods);
  methods[13].selector = @selector(initialized);
  methods[14].selector = @selector(getAttributeWithASWidgetAttribute:);
  methods[15].selector = @selector(drawableStateChanged);
  methods[16].selector = @selector(inflateViewWithNSString:);
  methods[17].selector = @selector(remeasure);
  methods[18].selector = @selector(removeFromParent);
  methods[19].selector = @selector(getLocationOnScreenWithIntArray:);
  methods[20].selector = @selector(getWindowVisibleDisplayFrameWithADRect:);
  methods[21].selector = @selector(offsetTopAndBottomWithInt:);
  methods[22].selector = @selector(offsetLeftAndRightWithInt:);
  methods[23].selector = @selector(setMyAttributeWithNSString:withId:);
  methods[24].selector = @selector(setVisibilityWithInt:);
  methods[25].selector = @selector(measureHeightOfChildrenWithInt:withInt:withInt:withInt:withInt:);
  methods[26].selector = @selector(setState0WithId:);
  methods[27].selector = @selector(setState1WithId:);
  methods[28].selector = @selector(setState2WithId:);
  methods[29].selector = @selector(setState3WithId:);
  methods[30].selector = @selector(setState4WithId:);
  methods[31].selector = @selector(state0);
  methods[32].selector = @selector(state1);
  methods[33].selector = @selector(state2);
  methods[34].selector = @selector(state3);
  methods[35].selector = @selector(state4);
  methods[36].selector = @selector(stateYes);
  methods[37].selector = @selector(stateNo);
  methods[38].selector = @selector(endViewTransitionWithADView:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASListViewImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "measureFinished_", "LASMeasureEvent;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "onLayoutEvent_", "LASOnLayoutEvent;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "overlays_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 39, -1 },
    { "mMaxWidth_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mMaxHeight_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "templates_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 40, -1 },
  };
  static const void *ptrTable[] = { "setMaxWidth", "I", "setMaxHeight", "LASListViewImpl;", "onMeasure", "II", "onLayout", "ZIIII", "execute", "LNSString;[LNSObject;", "updateMeasuredDimension", "newInstance", "LASIWidget;", "setAttribute", "LASWidgetAttribute;LNSString;LNSObject;", "()Ljava/util/List<Ljava/lang/String;>;", "getAttribute", "LASWidgetAttribute;", "inflateView", "LNSString;", "getLocationOnScreen", "[I", "getWindowVisibleDisplayFrame", "LADRect;", "offsetTopAndBottom", "offsetLeftAndRight", "setMyAttribute", "LNSString;LNSObject;", "setVisibility", "measureHeightOfChildren", "IIIII", "setState0", "LNSObject;", "setState1", "setState2", "setState3", "setState4", "endViewTransition", "LADView;", "Ljava/util/List<Lcom/ashera/widget/IWidget;>;", "Ljava/util/Map<Ljava/lang/String;Lcom/ashera/widget/IWidget;>;" };
  static const J2ObjcClassInfo _ASListViewImpl_ListViewExt = { "ListViewExt", "com.ashera.layout", ptrTable, methods, fields, 7, 0x1, 39, 7, 3, -1, -1, -1, -1 };
  return &_ASListViewImpl_ListViewExt;
}

@end

void ASListViewImpl_ListViewExt_initWithASListViewImpl_(ASListViewImpl_ListViewExt *self, ASListViewImpl *outer$) {
  self->this$0_ = outer$;
  ADListView_init(self);
  self->measureFinished_ = new_ASMeasureEvent_init();
  self->onLayoutEvent_ = new_ASOnLayoutEvent_init();
  self->mMaxWidth_ = -1;
  self->mMaxHeight_ = -1;
}

ASListViewImpl_ListViewExt *new_ASListViewImpl_ListViewExt_initWithASListViewImpl_(ASListViewImpl *outer$) {
  J2OBJC_NEW_IMPL(ASListViewImpl_ListViewExt, initWithASListViewImpl_, outer$)
}

ASListViewImpl_ListViewExt *create_ASListViewImpl_ListViewExt_initWithASListViewImpl_(ASListViewImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASListViewImpl_ListViewExt, initWithASListViewImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASListViewImpl_ListViewExt)

@implementation ASListViewImpl_ListAdapter

- (jboolean)isEnabledWithInt:(jint)position {
  return true;
}

- (instancetype)initWithASListViewImpl:(ASListViewImpl *)outer$ {
  ASListViewImpl_ListAdapter_initWithASListViewImpl_(self, outer$);
  return self;
}

- (jint)getCount {
  return [((id<JavaUtilList>) nil_chk(mObjects_)) size];
}

- (id)getItemWithInt:(jint)position {
  return [((id<JavaUtilList>) nil_chk(mObjects_)) getWithInt:position];
}

- (jlong)getItemIdWithInt:(jint)position {
  NSString *id_ = [((id<JavaUtilList>) nil_chk(this$0_->ids_)) getWithInt:position];
  if (id_ == nil) {
    return 0;
  }
  return [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([this$0_ quickConvertWithId:id_ withNSString:@"id"], [JavaLangInteger class]))) intValue];
}

- (jboolean)hasStableIds {
  return true;
}

- (ADView *)getViewWithInt:(jint)position
                withADView:(ADView *)convertView
           withADViewGroup:(ADViewGroup *)parent {
  ASLoopParam *model = [((id<JavaUtilList>) nil_chk(mObjects_)) getWithInt:position];
  id<ASIWidget> myWidget;
  if (convertView == nil) {
    myWidget = [((id<ASIWidget>) nil_chk([this$0_ getListItem])) loadLazyWidgetsWithASLoopParam:model];
    [((ADView *) nil_chk(((ADView *) cast_chk([((id<ASIWidget>) nil_chk(myWidget)) asNativeWidget], [ADView class])))) setTagWithId:myWidget];
  }
  else {
    myWidget = (id<ASIWidget>) cast_check([convertView getTag], ASIWidget_class_());
  }
  [this$0_ updateModelRecurseWithASIWidget:myWidget withASLoopParam:model];
  return (ADView *) cast_chk([((id<ASIWidget>) nil_chk(myWidget)) asNativeWidget], [ADView class]);
}

- (ADFilter *)getFilter {
  if (mFilter_ == nil) {
    mFilter_ = new_ASListViewImpl_ListAdapter_ArrayFilter_initWithASListViewImpl_ListAdapter_(self);
  }
  return mFilter_;
}

- (void)dofilterSyncWithNSString:(NSString *)text {
  (void) [self getFilter];
  [((ASListViewImpl_ListAdapter_ArrayFilter *) nil_chk(mFilter_)) publishResultsWithJavaLangCharSequence:text withADFilter_FilterResults:[mFilter_ performFilteringWithJavaLangCharSequence:text]];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "Z", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 3, 1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 4, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADView;", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "LADFilter;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(isEnabledWithInt:);
  methods[1].selector = @selector(initWithASListViewImpl:);
  methods[2].selector = @selector(getCount);
  methods[3].selector = @selector(getItemWithInt:);
  methods[4].selector = @selector(getItemIdWithInt:);
  methods[5].selector = @selector(hasStableIds);
  methods[6].selector = @selector(getViewWithInt:withADView:withADViewGroup:);
  methods[7].selector = @selector(getFilter);
  methods[8].selector = @selector(dofilterSyncWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASListViewImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "mLock_", "LNSObject;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mFilter_", "LASListViewImpl_ListAdapter_ArrayFilter;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mObjects_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 9, -1 },
  };
  static const void *ptrTable[] = { "isEnabled", "I", "LASListViewImpl;", "getItem", "getItemId", "getView", "ILADView;LADViewGroup;", "dofilterSync", "LNSString;", "Ljava/util/List<Lcom/ashera/model/LoopParam;>;", "LASListViewImpl_ListAdapter_ArrayFilter;" };
  static const J2ObjcClassInfo _ASListViewImpl_ListAdapter = { "ListAdapter", "com.ashera.layout", ptrTable, methods, fields, 7, 0x0, 9, 4, 2, 10, -1, -1, -1 };
  return &_ASListViewImpl_ListAdapter;
}

@end

void ASListViewImpl_ListAdapter_initWithASListViewImpl_(ASListViewImpl_ListAdapter *self, ASListViewImpl *outer$) {
  self->this$0_ = outer$;
  ADBaseAdapter_init(self);
  self->mLock_ = new_NSObject_init();
  self->mObjects_ = outer$->dataList_;
}

ASListViewImpl_ListAdapter *new_ASListViewImpl_ListAdapter_initWithASListViewImpl_(ASListViewImpl *outer$) {
  J2OBJC_NEW_IMPL(ASListViewImpl_ListAdapter, initWithASListViewImpl_, outer$)
}

ASListViewImpl_ListAdapter *create_ASListViewImpl_ListAdapter_initWithASListViewImpl_(ASListViewImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASListViewImpl_ListAdapter, initWithASListViewImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASListViewImpl_ListAdapter)

@implementation ASListViewImpl_ListAdapter_ArrayFilter

- (instancetype)initWithASListViewImpl_ListAdapter:(ASListViewImpl_ListAdapter *)outer$ {
  ASListViewImpl_ListAdapter_ArrayFilter_initWithASListViewImpl_ListAdapter_(self, outer$);
  return self;
}

- (ADFilter_FilterResults *)performFilteringWithJavaLangCharSequence:(id<JavaLangCharSequence>)prefix {
  ADFilter_FilterResults *results = new_ADFilter_FilterResults_init();
  if (prefix == nil || [prefix java_length] == 0) {
    prefix = @"";
  }
  NSString *prefixString = [prefix description];
  JavaUtilArrayList *values;
  @synchronized(this$0_->mLock_) {
    values = JreRetainedLocalValue(new_JavaUtilArrayList_initWithJavaUtilCollection_(this$0_->this$0_->dataList_));
  }
  jint count = [values size];
  JavaUtilArrayList *newValues = new_JavaUtilArrayList_init();
  id<ASIFilter> filter = ASFilterFactory_getWithNSString_(this$0_->this$0_->filterId_);
  if (filter == nil) {
    filter = ASFilterFactory_getWithNSString_(JreLoadStatic(ASFilterFactory, DEFAULT_FILTER));
  }
  for (jint i = 0; i < count; i++) {
    ASLoopParam *value = [values getWithInt:i];
    if (this$0_->this$0_->filterItemPaths_ != nil) {
      {
        IOSObjectArray *a__ = this$0_->this$0_->filterItemPaths_;
        NSString * const *b__ = a__->buffer_;
        NSString * const *e__ = b__ + a__->size_;
        while (b__ < e__) {
          NSString *path = *b__++;
          ASModelExpressionParser_ModelLoopHolder *modelLoopHolder = ASModelExpressionParser_parseModelLoopExpressionWithNSString_([this$0_->this$0_ getModelFor]);
          NSString *varName = ((ASModelExpressionParser_ModelLoopHolder *) nil_chk(modelLoopHolder))->varName_;
          id modelVal = [this$0_->this$0_ getModelByPathWithNSString:varName withId:value];
          modelVal = [this$0_->this$0_ getModelByPathWithNSString:path withId:modelVal];
          if ([((id<ASIFilter>) nil_chk(filter)) filterWithNSString:ASPluginInvoker_getStringWithId_(modelVal) withNSString:prefixString]) {
            [newValues addWithId:value];
            break;
          }
        }
      }
    }
    else {
      if (value != nil && [((id<ASIFilter>) nil_chk(filter)) filterWithNSString:[value description] withNSString:prefixString]) {
        [newValues addWithId:value];
      }
    }
    results->values_ = newValues;
    results->count_ = [newValues size];
  }
  if (results->values_ == nil) {
    results->values_ = new_JavaUtilArrayList_initWithInt_(0);
  }
  return results;
}

- (void)publishResultsWithJavaLangCharSequence:(id<JavaLangCharSequence>)constraint
                    withADFilter_FilterResults:(ADFilter_FilterResults *)results {
  this$0_->mObjects_ = (id<JavaUtilList>) cast_check(((ADFilter_FilterResults *) nil_chk(results))->values_, JavaUtilList_class_());
  if (results->count_ > 0) {
    [this$0_ notifyDataSetChanged];
  }
  else {
    [this$0_ notifyDataSetInvalidated];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "LADFilter_FilterResults;", 0x4, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 3, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASListViewImpl_ListAdapter:);
  methods[1].selector = @selector(performFilteringWithJavaLangCharSequence:);
  methods[2].selector = @selector(publishResultsWithJavaLangCharSequence:withADFilter_FilterResults:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASListViewImpl_ListAdapter;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASListViewImpl_ListAdapter;", "performFiltering", "LJavaLangCharSequence;", "publishResults", "LJavaLangCharSequence;LADFilter_FilterResults;" };
  static const J2ObjcClassInfo _ASListViewImpl_ListAdapter_ArrayFilter = { "ArrayFilter", "com.ashera.layout", ptrTable, methods, fields, 7, 0x2, 3, 1, 0, -1, -1, -1, -1 };
  return &_ASListViewImpl_ListAdapter_ArrayFilter;
}

@end

void ASListViewImpl_ListAdapter_ArrayFilter_initWithASListViewImpl_ListAdapter_(ASListViewImpl_ListAdapter_ArrayFilter *self, ASListViewImpl_ListAdapter *outer$) {
  self->this$0_ = outer$;
  ADFilter_init(self);
}

ASListViewImpl_ListAdapter_ArrayFilter *new_ASListViewImpl_ListAdapter_ArrayFilter_initWithASListViewImpl_ListAdapter_(ASListViewImpl_ListAdapter *outer$) {
  J2OBJC_NEW_IMPL(ASListViewImpl_ListAdapter_ArrayFilter, initWithASListViewImpl_ListAdapter_, outer$)
}

ASListViewImpl_ListAdapter_ArrayFilter *create_ASListViewImpl_ListAdapter_ArrayFilter_initWithASListViewImpl_ListAdapter_(ASListViewImpl_ListAdapter *outer$) {
  J2OBJC_CREATE_IMPL(ASListViewImpl_ListAdapter_ArrayFilter, initWithASListViewImpl_ListAdapter_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASListViewImpl_ListAdapter_ArrayFilter)

J2OBJC_INITIALIZED_DEFN(ASListViewImpl_FilterStatus)

ASListViewImpl_FilterStatus *ASListViewImpl_FilterStatus_values_[4];

@implementation ASListViewImpl_FilterStatus

+ (IOSObjectArray *)values {
  return ASListViewImpl_FilterStatus_values();
}

+ (ASListViewImpl_FilterStatus *)valueOfWithNSString:(NSString *)name {
  return ASListViewImpl_FilterStatus_valueOfWithNSString_(name);
}

- (ASListViewImpl_FilterStatus_Enum)toNSEnum {
  return (ASListViewImpl_FilterStatus_Enum)[self ordinal];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[LASListViewImpl_FilterStatus;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASListViewImpl_FilterStatus;", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(values);
  methods[1].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "None", "LASListViewImpl_FilterStatus;", .constantValue.asLong = 0, 0x4019, -1, 2, -1, -1 },
    { "Restore", "LASListViewImpl_FilterStatus;", .constantValue.asLong = 0, 0x4019, -1, 3, -1, -1 },
    { "Filtering", "LASListViewImpl_FilterStatus;", .constantValue.asLong = 0, 0x4019, -1, 4, -1, -1 },
    { "Done", "LASListViewImpl_FilterStatus;", .constantValue.asLong = 0, 0x4019, -1, 5, -1, -1 },
  };
  static const void *ptrTable[] = { "valueOf", "LNSString;", &JreEnum(ASListViewImpl_FilterStatus, None), &JreEnum(ASListViewImpl_FilterStatus, Restore), &JreEnum(ASListViewImpl_FilterStatus, Filtering), &JreEnum(ASListViewImpl_FilterStatus, Done), "LASListViewImpl;", "Ljava/lang/Enum<Lcom/ashera/layout/ListViewImpl$FilterStatus;>;" };
  static const J2ObjcClassInfo _ASListViewImpl_FilterStatus = { "FilterStatus", "com.ashera.layout", ptrTable, methods, fields, 7, 0x401a, 2, 4, 6, -1, -1, 7, -1 };
  return &_ASListViewImpl_FilterStatus;
}

+ (void)initialize {
  if (self == [ASListViewImpl_FilterStatus class]) {
    JreEnum(ASListViewImpl_FilterStatus, None) = new_ASListViewImpl_FilterStatus_initWithNSString_withInt_(JreEnumConstantName(ASListViewImpl_FilterStatus_class_(), 0), 0);
    JreEnum(ASListViewImpl_FilterStatus, Restore) = new_ASListViewImpl_FilterStatus_initWithNSString_withInt_(JreEnumConstantName(ASListViewImpl_FilterStatus_class_(), 1), 1);
    JreEnum(ASListViewImpl_FilterStatus, Filtering) = new_ASListViewImpl_FilterStatus_initWithNSString_withInt_(JreEnumConstantName(ASListViewImpl_FilterStatus_class_(), 2), 2);
    JreEnum(ASListViewImpl_FilterStatus, Done) = new_ASListViewImpl_FilterStatus_initWithNSString_withInt_(JreEnumConstantName(ASListViewImpl_FilterStatus_class_(), 3), 3);
    J2OBJC_SET_INITIALIZED(ASListViewImpl_FilterStatus)
  }
}

@end

void ASListViewImpl_FilterStatus_initWithNSString_withInt_(ASListViewImpl_FilterStatus *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

ASListViewImpl_FilterStatus *new_ASListViewImpl_FilterStatus_initWithNSString_withInt_(NSString *__name, jint __ordinal) {
  J2OBJC_NEW_IMPL(ASListViewImpl_FilterStatus, initWithNSString_withInt_, __name, __ordinal)
}

IOSObjectArray *ASListViewImpl_FilterStatus_values() {
  ASListViewImpl_FilterStatus_initialize();
  return [IOSObjectArray arrayWithObjects:ASListViewImpl_FilterStatus_values_ count:4 type:ASListViewImpl_FilterStatus_class_()];
}

ASListViewImpl_FilterStatus *ASListViewImpl_FilterStatus_valueOfWithNSString_(NSString *name) {
  ASListViewImpl_FilterStatus_initialize();
  for (int i = 0; i < 4; i++) {
    ASListViewImpl_FilterStatus *e = ASListViewImpl_FilterStatus_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

ASListViewImpl_FilterStatus *ASListViewImpl_FilterStatus_fromOrdinal(NSUInteger ordinal) {
  ASListViewImpl_FilterStatus_initialize();
  if (ordinal >= 4) {
    return nil;
  }
  return ASListViewImpl_FilterStatus_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASListViewImpl_FilterStatus)

@implementation ASListViewImpl_OnItemClickListener

- (NSString *)getAction {
  return action_;
}

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue {
  ASListViewImpl_OnItemClickListener_initWithASIWidget_withNSString_(self, w, strValue);
  return self;
}

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue
                     withNSString:(NSString *)action {
  ASListViewImpl_OnItemClickListener_initWithASIWidget_withNSString_withNSString_(self, w, strValue, action);
  return self;
}

- (void)onItemClickWithADAdapterView:(ADAdapterView *)parent
                          withADView:(ADView *)view
                             withInt:(jint)position
                            withLong:(jlong)id_ {
  if (action_ == nil || [action_ isEqual:@"onItemClick"]) {
    [((id<ASIWidget>) nil_chk(w_)) syncModelFromUiToPojoWithNSString:@"onItemClick"];
    id<JavaUtilMap> obj = [self getOnItemClickEventObjWithADAdapterView:parent withADView:view withInt:position withLong:id_];
    NSString *commandName = (NSString *) cast_chk([((id<JavaUtilMap>) nil_chk(obj)) getWithId:ASEventExpressionParser_KEY_COMMAND_NAME], [NSString class]);
    NSString *commandType = (NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_COMMAND_TYPE], [NSString class]);
    switch (JreIndexOfStr(commandType, (id[]){ @"+" }, 1)) {
      case 0:
      if (ASEventCommandFactory_hasCommandWithNSString_(commandName)) {
        (void) [((id<ASEventCommand>) nil_chk(ASEventCommandFactory_getCommandWithNSString_(commandName))) executeCommandWithASIWidget:w_ withJavaUtilMap:obj withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ parent, view, JavaLangInteger_valueOfWithInt_(position), JavaLangLong_valueOfWithLong_(id_) } count:4 type:NSObject_class_()]];
      }
      break;
      default:
      break;
    }
    if ([obj containsKeyWithId:@"refreshUiFromModel"]) {
      id widgets = [obj removeWithId:@"refreshUiFromModel"];
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, widgets, true);
    }
    if ([((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds] != nil) {
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, [((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds], true);
    }
    if (strValue_ != nil && ![strValue_ java_isEmpty] && ![((NSString *) nil_chk([((NSString *) nil_chk(strValue_)) java_trim])) java_hasPrefix:@"+"]) {
      id<ASIActivity> activity = [((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getRootActivity];
      if (activity != nil) {
        [activity sendEventMessageWithJavaUtilMap:obj];
      }
    }
  }
  return;
}

- (id<JavaUtilMap>)getOnItemClickEventObjWithADAdapterView:(ADAdapterView *)parent
                                                withADView:(ADView *)view
                                                   withInt:(jint)position
                                                  withLong:(jlong)id_ {
  id<JavaUtilMap> obj = ASPluginInvoker_getJSONCompatMap();
  (void) [((id<JavaUtilMap>) nil_chk(obj)) putWithId:@"action" withId:@"action"];
  (void) [obj putWithId:@"eventType" withId:@"itemclick"];
  ASListViewImpl_addCheckItemInfoWithJavaUtilMap_withADAdapterView_(obj, parent);
  (void) [obj putWithId:@"fragmentId" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getFragmentId]];
  (void) [obj putWithId:@"actionUrl" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getActionUrl]];
  (void) [obj putWithId:@"namespace" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getNamespace]];
  if ([((id<ASIWidget>) nil_chk(w_)) getComponentId] != nil) {
    (void) [obj putWithId:@"componentId" withId:[((id<ASIWidget>) nil_chk(w_)) getComponentId]];
  }
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"id", [((id<ASIWidget>) nil_chk(w_)) getId]);
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"position", JavaLangInteger_valueOfWithInt_(position));
  (void) ASEventExpressionParser_parseEventExpressionWithNSString_withJavaUtilMap_(strValue_, obj);
  [((id<ASIWidget>) nil_chk(w_)) updateModelToEventMapWithJavaUtilMap:obj withNSString:@"onItemClick" withNSString:(NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_EVENT_ARGS], [NSString class])];
  return obj;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, 5, 3, -1, 6, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getAction);
  methods[1].selector = @selector(initWithASIWidget:withNSString:);
  methods[2].selector = @selector(initWithASIWidget:withNSString:withNSString:);
  methods[3].selector = @selector(onItemClickWithADAdapterView:withADView:withInt:withLong:);
  methods[4].selector = @selector(getOnItemClickEventObjWithADAdapterView:withADView:withInt:withLong:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "w_", "LASIWidget;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "view_", "LADView;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "strValue_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "action_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASIWidget;LNSString;", "LASIWidget;LNSString;LNSString;", "onItemClick", "LADAdapterView;LADView;IJ", "(Lr/android/widget/AdapterView<*>;Lr/android/view/View;IJ)V", "getOnItemClickEventObj", "(Lr/android/widget/AdapterView<*>;Lr/android/view/View;IJ)Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", "LASListViewImpl;" };
  static const J2ObjcClassInfo _ASListViewImpl_OnItemClickListener = { "OnItemClickListener", "com.ashera.layout", ptrTable, methods, fields, 7, 0xa, 5, 4, 7, -1, -1, -1, -1 };
  return &_ASListViewImpl_OnItemClickListener;
}

@end

void ASListViewImpl_OnItemClickListener_initWithASIWidget_withNSString_(ASListViewImpl_OnItemClickListener *self, id<ASIWidget> w, NSString *strValue) {
  NSObject_init(self);
  self->w_ = w;
  self->strValue_ = strValue;
}

ASListViewImpl_OnItemClickListener *new_ASListViewImpl_OnItemClickListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) {
  J2OBJC_NEW_IMPL(ASListViewImpl_OnItemClickListener, initWithASIWidget_withNSString_, w, strValue)
}

ASListViewImpl_OnItemClickListener *create_ASListViewImpl_OnItemClickListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) {
  J2OBJC_CREATE_IMPL(ASListViewImpl_OnItemClickListener, initWithASIWidget_withNSString_, w, strValue)
}

void ASListViewImpl_OnItemClickListener_initWithASIWidget_withNSString_withNSString_(ASListViewImpl_OnItemClickListener *self, id<ASIWidget> w, NSString *strValue, NSString *action) {
  NSObject_init(self);
  self->w_ = w;
  self->strValue_ = strValue;
  self->action_ = action;
}

ASListViewImpl_OnItemClickListener *new_ASListViewImpl_OnItemClickListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) {
  J2OBJC_NEW_IMPL(ASListViewImpl_OnItemClickListener, initWithASIWidget_withNSString_withNSString_, w, strValue, action)
}

ASListViewImpl_OnItemClickListener *create_ASListViewImpl_OnItemClickListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) {
  J2OBJC_CREATE_IMPL(ASListViewImpl_OnItemClickListener, initWithASIWidget_withNSString_withNSString_, w, strValue, action)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASListViewImpl_OnItemClickListener)

@implementation ASListViewImpl_OnItemLongClickListener

- (NSString *)getAction {
  return action_;
}

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue {
  ASListViewImpl_OnItemLongClickListener_initWithASIWidget_withNSString_(self, w, strValue);
  return self;
}

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue
                     withNSString:(NSString *)action {
  ASListViewImpl_OnItemLongClickListener_initWithASIWidget_withNSString_withNSString_(self, w, strValue, action);
  return self;
}

- (jboolean)onItemLongClickWithADAdapterView:(ADAdapterView *)parent
                                  withADView:(ADView *)view
                                     withInt:(jint)position
                                    withLong:(jlong)id_ {
  jboolean result = true;
  if (action_ == nil || [action_ isEqual:@"onItemLongClick"]) {
    [((id<ASIWidget>) nil_chk(w_)) syncModelFromUiToPojoWithNSString:@"onItemLongClick"];
    id<JavaUtilMap> obj = [self getOnItemLongClickEventObjWithADAdapterView:parent withADView:view withInt:position withLong:id_];
    NSString *commandName = (NSString *) cast_chk([((id<JavaUtilMap>) nil_chk(obj)) getWithId:ASEventExpressionParser_KEY_COMMAND_NAME], [NSString class]);
    NSString *commandType = (NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_COMMAND_TYPE], [NSString class]);
    switch (JreIndexOfStr(commandType, (id[]){ @"+" }, 1)) {
      case 0:
      if (ASEventCommandFactory_hasCommandWithNSString_(commandName)) {
        id commandResult = [((id<ASEventCommand>) nil_chk(ASEventCommandFactory_getCommandWithNSString_(commandName))) executeCommandWithASIWidget:w_ withJavaUtilMap:obj withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ parent, view, JavaLangInteger_valueOfWithInt_(position), JavaLangLong_valueOfWithLong_(id_) } count:4 type:NSObject_class_()]];
        if (commandResult != nil) {
          result = [(JavaLangBoolean *) cast_chk(commandResult, [JavaLangBoolean class]) booleanValue];
        }
      }
      break;
      default:
      break;
    }
    if ([obj containsKeyWithId:@"refreshUiFromModel"]) {
      id widgets = [obj removeWithId:@"refreshUiFromModel"];
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, widgets, true);
    }
    if ([((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds] != nil) {
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, [((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds], true);
    }
    if (strValue_ != nil && ![strValue_ java_isEmpty] && ![((NSString *) nil_chk([((NSString *) nil_chk(strValue_)) java_trim])) java_hasPrefix:@"+"]) {
      id<ASIActivity> activity = [((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getRootActivity];
      if (activity != nil) {
        [activity sendEventMessageWithJavaUtilMap:obj];
      }
    }
  }
  return result;
}

- (id<JavaUtilMap>)getOnItemLongClickEventObjWithADAdapterView:(ADAdapterView *)parent
                                                    withADView:(ADView *)view
                                                       withInt:(jint)position
                                                      withLong:(jlong)id_ {
  id<JavaUtilMap> obj = ASPluginInvoker_getJSONCompatMap();
  (void) [((id<JavaUtilMap>) nil_chk(obj)) putWithId:@"action" withId:@"action"];
  (void) [obj putWithId:@"eventType" withId:@"itemlongclick"];
  (void) [obj putWithId:@"fragmentId" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getFragmentId]];
  (void) [obj putWithId:@"actionUrl" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getActionUrl]];
  (void) [obj putWithId:@"namespace" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getNamespace]];
  if ([((id<ASIWidget>) nil_chk(w_)) getComponentId] != nil) {
    (void) [obj putWithId:@"componentId" withId:[((id<ASIWidget>) nil_chk(w_)) getComponentId]];
  }
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"id", [((id<ASIWidget>) nil_chk(w_)) getId]);
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"position", JavaLangInteger_valueOfWithInt_(position));
  (void) ASEventExpressionParser_parseEventExpressionWithNSString_withJavaUtilMap_(strValue_, obj);
  [((id<ASIWidget>) nil_chk(w_)) updateModelToEventMapWithJavaUtilMap:obj withNSString:@"onItemLongClick" withNSString:(NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_EVENT_ARGS], [NSString class])];
  return obj;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 2, 3, -1, 4, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, 5, 3, -1, 6, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getAction);
  methods[1].selector = @selector(initWithASIWidget:withNSString:);
  methods[2].selector = @selector(initWithASIWidget:withNSString:withNSString:);
  methods[3].selector = @selector(onItemLongClickWithADAdapterView:withADView:withInt:withLong:);
  methods[4].selector = @selector(getOnItemLongClickEventObjWithADAdapterView:withADView:withInt:withLong:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "w_", "LASIWidget;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "view_", "LADView;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "strValue_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "action_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASIWidget;LNSString;", "LASIWidget;LNSString;LNSString;", "onItemLongClick", "LADAdapterView;LADView;IJ", "(Lr/android/widget/AdapterView<*>;Lr/android/view/View;IJ)Z", "getOnItemLongClickEventObj", "(Lr/android/widget/AdapterView<*>;Lr/android/view/View;IJ)Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", "LASListViewImpl;" };
  static const J2ObjcClassInfo _ASListViewImpl_OnItemLongClickListener = { "OnItemLongClickListener", "com.ashera.layout", ptrTable, methods, fields, 7, 0xa, 5, 4, 7, -1, -1, -1, -1 };
  return &_ASListViewImpl_OnItemLongClickListener;
}

@end

void ASListViewImpl_OnItemLongClickListener_initWithASIWidget_withNSString_(ASListViewImpl_OnItemLongClickListener *self, id<ASIWidget> w, NSString *strValue) {
  NSObject_init(self);
  self->w_ = w;
  self->strValue_ = strValue;
}

ASListViewImpl_OnItemLongClickListener *new_ASListViewImpl_OnItemLongClickListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) {
  J2OBJC_NEW_IMPL(ASListViewImpl_OnItemLongClickListener, initWithASIWidget_withNSString_, w, strValue)
}

ASListViewImpl_OnItemLongClickListener *create_ASListViewImpl_OnItemLongClickListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) {
  J2OBJC_CREATE_IMPL(ASListViewImpl_OnItemLongClickListener, initWithASIWidget_withNSString_, w, strValue)
}

void ASListViewImpl_OnItemLongClickListener_initWithASIWidget_withNSString_withNSString_(ASListViewImpl_OnItemLongClickListener *self, id<ASIWidget> w, NSString *strValue, NSString *action) {
  NSObject_init(self);
  self->w_ = w;
  self->strValue_ = strValue;
  self->action_ = action;
}

ASListViewImpl_OnItemLongClickListener *new_ASListViewImpl_OnItemLongClickListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) {
  J2OBJC_NEW_IMPL(ASListViewImpl_OnItemLongClickListener, initWithASIWidget_withNSString_withNSString_, w, strValue, action)
}

ASListViewImpl_OnItemLongClickListener *create_ASListViewImpl_OnItemLongClickListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) {
  J2OBJC_CREATE_IMPL(ASListViewImpl_OnItemLongClickListener, initWithASIWidget_withNSString_withNSString_, w, strValue, action)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASListViewImpl_OnItemLongClickListener)

@implementation ASListViewImpl_OnScrollListener

- (NSString *)getAction {
  return action_;
}

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue {
  ASListViewImpl_OnScrollListener_initWithASIWidget_withNSString_(self, w, strValue);
  return self;
}

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue
                     withNSString:(NSString *)action {
  ASListViewImpl_OnScrollListener_initWithASIWidget_withNSString_withNSString_(self, w, strValue, action);
  return self;
}

- (void)onScrollWithADAbsListView:(ADAbsListView *)view
                          withInt:(jint)firstVisibleItem
                          withInt:(jint)visibleItemCount
                          withInt:(jint)totalItemCount {
  if (action_ == nil || [action_ isEqual:@"onScrollChange"]) {
    [((id<ASIWidget>) nil_chk(w_)) syncModelFromUiToPojoWithNSString:@"onScrollChange"];
    id<JavaUtilMap> obj = [self getOnScrollChangeEventObjWithADAbsListView:view withInt:firstVisibleItem withInt:visibleItemCount withInt:totalItemCount];
    NSString *commandName = (NSString *) cast_chk([((id<JavaUtilMap>) nil_chk(obj)) getWithId:ASEventExpressionParser_KEY_COMMAND_NAME], [NSString class]);
    NSString *commandType = (NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_COMMAND_TYPE], [NSString class]);
    switch (JreIndexOfStr(commandType, (id[]){ @"+" }, 1)) {
      case 0:
      if (ASEventCommandFactory_hasCommandWithNSString_(commandName)) {
        (void) [((id<ASEventCommand>) nil_chk(ASEventCommandFactory_getCommandWithNSString_(commandName))) executeCommandWithASIWidget:w_ withJavaUtilMap:obj withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ view, JavaLangInteger_valueOfWithInt_(firstVisibleItem), JavaLangInteger_valueOfWithInt_(visibleItemCount), JavaLangInteger_valueOfWithInt_(totalItemCount) } count:4 type:NSObject_class_()]];
      }
      break;
      default:
      break;
    }
    if ([obj containsKeyWithId:@"refreshUiFromModel"]) {
      id widgets = [obj removeWithId:@"refreshUiFromModel"];
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, widgets, true);
    }
    if ([((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds] != nil) {
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, [((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds], true);
    }
    if (strValue_ != nil && ![strValue_ java_isEmpty] && ![((NSString *) nil_chk([((NSString *) nil_chk(strValue_)) java_trim])) java_hasPrefix:@"+"]) {
      id<ASIActivity> activity = [((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getRootActivity];
      if (activity != nil) {
        [activity sendEventMessageWithJavaUtilMap:obj];
      }
    }
  }
  return;
}

- (void)onScrollStateChangedWithADAbsListView:(ADAbsListView *)view
                                      withInt:(jint)scrollState {
  if (action_ == nil || [action_ isEqual:@"onScrollStateChange"]) {
    [((id<ASIWidget>) nil_chk(w_)) syncModelFromUiToPojoWithNSString:@"onScrollStateChange"];
    id<JavaUtilMap> obj = [self getOnScrollStateChangeEventObjWithADAbsListView:view withInt:scrollState];
    NSString *commandName = (NSString *) cast_chk([((id<JavaUtilMap>) nil_chk(obj)) getWithId:ASEventExpressionParser_KEY_COMMAND_NAME], [NSString class]);
    NSString *commandType = (NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_COMMAND_TYPE], [NSString class]);
    switch (JreIndexOfStr(commandType, (id[]){ @"+" }, 1)) {
      case 0:
      if (ASEventCommandFactory_hasCommandWithNSString_(commandName)) {
        (void) [((id<ASEventCommand>) nil_chk(ASEventCommandFactory_getCommandWithNSString_(commandName))) executeCommandWithASIWidget:w_ withJavaUtilMap:obj withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ view, JavaLangInteger_valueOfWithInt_(scrollState) } count:2 type:NSObject_class_()]];
      }
      break;
      default:
      break;
    }
    if ([obj containsKeyWithId:@"refreshUiFromModel"]) {
      id widgets = [obj removeWithId:@"refreshUiFromModel"];
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, widgets, true);
    }
    if ([((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds] != nil) {
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, [((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds], true);
    }
    if (strValue_ != nil && ![strValue_ java_isEmpty] && ![((NSString *) nil_chk([((NSString *) nil_chk(strValue_)) java_trim])) java_hasPrefix:@"+"]) {
      id<ASIActivity> activity = [((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getRootActivity];
      if (activity != nil) {
        [activity sendEventMessageWithJavaUtilMap:obj];
      }
    }
  }
  return;
}

- (id<JavaUtilMap>)getOnScrollStateChangeEventObjWithADAbsListView:(ADAbsListView *)view
                                                           withInt:(jint)scrollState {
  id<JavaUtilMap> obj = ASPluginInvoker_getJSONCompatMap();
  (void) [((id<JavaUtilMap>) nil_chk(obj)) putWithId:@"action" withId:@"action"];
  (void) [obj putWithId:@"eventType" withId:@"scrollstatechange"];
  (void) [obj putWithId:@"fragmentId" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getFragmentId]];
  (void) [obj putWithId:@"actionUrl" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getActionUrl]];
  (void) [obj putWithId:@"namespace" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getNamespace]];
  if ([((id<ASIWidget>) nil_chk(w_)) getComponentId] != nil) {
    (void) [obj putWithId:@"componentId" withId:[((id<ASIWidget>) nil_chk(w_)) getComponentId]];
  }
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"id", [((id<ASIWidget>) nil_chk(w_)) getId]);
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"scrollState", JavaLangInteger_valueOfWithInt_(scrollState));
  (void) ASEventExpressionParser_parseEventExpressionWithNSString_withJavaUtilMap_(strValue_, obj);
  [((id<ASIWidget>) nil_chk(w_)) updateModelToEventMapWithJavaUtilMap:obj withNSString:@"onScrollStateChange" withNSString:(NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_EVENT_ARGS], [NSString class])];
  return obj;
}

- (id<JavaUtilMap>)getOnScrollChangeEventObjWithADAbsListView:(ADAbsListView *)view
                                                      withInt:(jint)firstVisibleItem
                                                      withInt:(jint)visibleItemCount
                                                      withInt:(jint)totalItemCount {
  id<JavaUtilMap> obj = ASPluginInvoker_getJSONCompatMap();
  (void) [((id<JavaUtilMap>) nil_chk(obj)) putWithId:@"action" withId:@"action"];
  (void) [obj putWithId:@"eventType" withId:@"scrollchange"];
  (void) [obj putWithId:@"fragmentId" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getFragmentId]];
  (void) [obj putWithId:@"actionUrl" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getActionUrl]];
  (void) [obj putWithId:@"namespace" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getNamespace]];
  if ([((id<ASIWidget>) nil_chk(w_)) getComponentId] != nil) {
    (void) [obj putWithId:@"componentId" withId:[((id<ASIWidget>) nil_chk(w_)) getComponentId]];
  }
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"id", [((id<ASIWidget>) nil_chk(w_)) getId]);
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"firstVisibleItem", JavaLangInteger_valueOfWithInt_(firstVisibleItem));
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"visibleItemCount", JavaLangInteger_valueOfWithInt_(visibleItemCount));
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"totalItemCount", JavaLangInteger_valueOfWithInt_(totalItemCount));
  (void) ASEventExpressionParser_parseEventExpressionWithNSString_withJavaUtilMap_(strValue_, obj);
  [((id<ASIWidget>) nil_chk(w_)) updateModelToEventMapWithJavaUtilMap:obj withNSString:@"onScrollChange" withNSString:(NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_EVENT_ARGS], [NSString class])];
  return obj;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, 6, 5, -1, 7, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, 8, 3, -1, 9, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getAction);
  methods[1].selector = @selector(initWithASIWidget:withNSString:);
  methods[2].selector = @selector(initWithASIWidget:withNSString:withNSString:);
  methods[3].selector = @selector(onScrollWithADAbsListView:withInt:withInt:withInt:);
  methods[4].selector = @selector(onScrollStateChangedWithADAbsListView:withInt:);
  methods[5].selector = @selector(getOnScrollStateChangeEventObjWithADAbsListView:withInt:);
  methods[6].selector = @selector(getOnScrollChangeEventObjWithADAbsListView:withInt:withInt:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "w_", "LASIWidget;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "view_", "LADView;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "strValue_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "action_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASIWidget;LNSString;", "LASIWidget;LNSString;LNSString;", "onScroll", "LADAbsListView;III", "onScrollStateChanged", "LADAbsListView;I", "getOnScrollStateChangeEventObj", "(Lr/android/widget/AbsListView;I)Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", "getOnScrollChangeEventObj", "(Lr/android/widget/AbsListView;III)Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", "LASListViewImpl;" };
  static const J2ObjcClassInfo _ASListViewImpl_OnScrollListener = { "OnScrollListener", "com.ashera.layout", ptrTable, methods, fields, 7, 0xa, 7, 4, 10, -1, -1, -1, -1 };
  return &_ASListViewImpl_OnScrollListener;
}

@end

void ASListViewImpl_OnScrollListener_initWithASIWidget_withNSString_(ASListViewImpl_OnScrollListener *self, id<ASIWidget> w, NSString *strValue) {
  NSObject_init(self);
  self->w_ = w;
  self->strValue_ = strValue;
}

ASListViewImpl_OnScrollListener *new_ASListViewImpl_OnScrollListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) {
  J2OBJC_NEW_IMPL(ASListViewImpl_OnScrollListener, initWithASIWidget_withNSString_, w, strValue)
}

ASListViewImpl_OnScrollListener *create_ASListViewImpl_OnScrollListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) {
  J2OBJC_CREATE_IMPL(ASListViewImpl_OnScrollListener, initWithASIWidget_withNSString_, w, strValue)
}

void ASListViewImpl_OnScrollListener_initWithASIWidget_withNSString_withNSString_(ASListViewImpl_OnScrollListener *self, id<ASIWidget> w, NSString *strValue, NSString *action) {
  NSObject_init(self);
  self->w_ = w;
  self->strValue_ = strValue;
  self->action_ = action;
}

ASListViewImpl_OnScrollListener *new_ASListViewImpl_OnScrollListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) {
  J2OBJC_NEW_IMPL(ASListViewImpl_OnScrollListener, initWithASIWidget_withNSString_withNSString_, w, strValue, action)
}

ASListViewImpl_OnScrollListener *create_ASListViewImpl_OnScrollListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) {
  J2OBJC_CREATE_IMPL(ASListViewImpl_OnScrollListener, initWithASIWidget_withNSString_withNSString_, w, strValue, action)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASListViewImpl_OnScrollListener)

@implementation ASListViewImpl_PostMeasureEventHandler

- (instancetype)initWithASListViewImpl:(ASListViewImpl *)outer$
                          withNSString:(NSString *)type {
  ASListViewImpl_PostMeasureEventHandler_initWithASListViewImpl_withNSString_(self, outer$, type);
  return self;
}

- (void)doPerformWithId:(id)payload {
  if (this$0_->reloadTableAfterPostMeasure_) {
    [this$0_ notifyDataSetChanged];
    this$0_->reloadTableAfterPostMeasure_ = false;
  }
}

- (void)__javaClone:(ASListViewImpl_PostMeasureEventHandler *)original {
  [super __javaClone:original];
  JreRelease(this$0_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASListViewImpl:withNSString:);
  methods[1].selector = @selector(doPerformWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASListViewImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASListViewImpl;LNSString;", "doPerform", "LNSObject;", "LASListViewImpl;" };
  static const J2ObjcClassInfo _ASListViewImpl_PostMeasureEventHandler = { "PostMeasureEventHandler", "com.ashera.layout", ptrTable, methods, fields, 7, 0x0, 2, 1, 3, -1, -1, -1, -1 };
  return &_ASListViewImpl_PostMeasureEventHandler;
}

@end

void ASListViewImpl_PostMeasureEventHandler_initWithASListViewImpl_withNSString_(ASListViewImpl_PostMeasureEventHandler *self, ASListViewImpl *outer$, NSString *type) {
  self->this$0_ = outer$;
  ASEventBusHandler_initWithNSString_(self, type);
}

ASListViewImpl_PostMeasureEventHandler *new_ASListViewImpl_PostMeasureEventHandler_initWithASListViewImpl_withNSString_(ASListViewImpl *outer$, NSString *type) {
  J2OBJC_NEW_IMPL(ASListViewImpl_PostMeasureEventHandler, initWithASListViewImpl_withNSString_, outer$, type)
}

ASListViewImpl_PostMeasureEventHandler *create_ASListViewImpl_PostMeasureEventHandler_initWithASListViewImpl_withNSString_(ASListViewImpl *outer$, NSString *type) {
  J2OBJC_CREATE_IMPL(ASListViewImpl_PostMeasureEventHandler, initWithASListViewImpl_withNSString_, outer$, type)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASListViewImpl_PostMeasureEventHandler)

@implementation ASListViewImpl_$Lambda$1

- (void)run {
  ASViewGroupImpl_nativeRemoveViewWithASIWidget_(val$widget_);
}

@end

void ASListViewImpl_$Lambda$1_initWithASIWidget_(ASListViewImpl_$Lambda$1 *self, id<ASIWidget> capture$0) {
  self->val$widget_ = capture$0;
  NSObject_init(self);
}

ASListViewImpl_$Lambda$1 *new_ASListViewImpl_$Lambda$1_initWithASIWidget_(id<ASIWidget> capture$0) {
  J2OBJC_NEW_IMPL(ASListViewImpl_$Lambda$1, initWithASIWidget_, capture$0)
}

ASListViewImpl_$Lambda$1 *create_ASListViewImpl_$Lambda$1_initWithASIWidget_(id<ASIWidget> capture$0) {
  J2OBJC_CREATE_IMPL(ASListViewImpl_$Lambda$1, initWithASIWidget_, capture$0)
}

@implementation ASListViewImpl_$Lambda$2

- (void)run {
  ASListViewImpl_preFilter(this$0_);
  [((ASListViewImpl_ListAdapter *) nil_chk(this$0_->listAdapter_)) dofilterSyncWithNSString:this$0_->query_];
  ASListViewImpl_postFilter(this$0_);
}

@end

void ASListViewImpl_$Lambda$2_initWithASListViewImpl_(ASListViewImpl_$Lambda$2 *self, ASListViewImpl *outer$) {
  self->this$0_ = outer$;
  NSObject_init(self);
}

ASListViewImpl_$Lambda$2 *new_ASListViewImpl_$Lambda$2_initWithASListViewImpl_(ASListViewImpl *outer$) {
  J2OBJC_NEW_IMPL(ASListViewImpl_$Lambda$2, initWithASListViewImpl_, outer$)
}

ASListViewImpl_$Lambda$2 *create_ASListViewImpl_$Lambda$2_initWithASListViewImpl_(ASListViewImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASListViewImpl_$Lambda$2, initWithASListViewImpl_, outer$)
}
