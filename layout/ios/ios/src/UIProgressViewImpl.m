//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-ios-widgets\ios_widget_library\src\main\java\com\ashera\layout\UIProgressViewImpl.java
//

#define J2OBJC_IMPORTED_BY_JAVA_IMPLEMENTATION 1




#include "BaseWidget.h"
#include "Color.h"
#include "ColorStateList.h"
#include "HasWidgets.h"
#include "IFragment.h"
#include "ILifeCycleDecorator.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "IWidget.h"
#include "IWidgetLifeCycleListener.h"
#include "J2ObjC_source.h"
#include "MeasureEvent.h"
#include "OnLayoutEvent.h"
#include "ProgressBar.h"
#include "Rect.h"
#include "SimpleWrapableView.h"
#include "UIProgressViewImpl.h"
#include "View.h"
#include "ViewGroupImpl.h"
#include "ViewImpl.h"
#include "WidgetAttribute.h"
#include "WidgetFactory.h"
#include "java/lang/Boolean.h"
#include "java/lang/Float.h"
#include "java/lang/Integer.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"

#include "java/lang/Integer.h"
#include "java/lang/Float.h"
#include "java/lang/Boolean.h"
#include <UIKit/UIKit.h>
#include "HasLifeCycleDecorators.h"
#include "ASUIScrollView.h"
#include "ASUIView.h"

#include "ASUIProgressView.h"


@class NSString;


#pragma clang diagnostic error "-Wreturn-type"
#pragma clang diagnostic ignored "-Wswitch"


@interface ASUIProgressViewImpl () {
 @public
  ASSimpleWrapableView *simpleWrapableView_;
  int32_t max_;
  int32_t min_;
  int32_t progress_;
  id progressTint_;
  id progressTintBackground_;
}

- (void)setWidgetOnNativeClass;

- (id)getPaddingBottom;

- (id)getPaddingTop;

- (id)getPaddingRight;

- (id)getPaddingLeft;

- (id)getPaddingEnd;

- (id)getPaddingStart;

- (void)setPaddingVerticalWithId:(id)objValue;

- (void)setPaddingHorizontalWithId:(id)objValue;

- (void)setPaddingTopWithId:(id)objValue;

- (void)setPaddingEndWithId:(id)objValue;

- (void)setPaddingStartWithId:(id)objValue;

- (void)setPaddingLeftWithId:(id)objValue;

- (void)setPaddingRightWithId:(id)objValue;

- (void)setPaddingBottomWithId:(id)objValue;

- (void)setPaddingWithId:(id)objValue;

- (void)nativeMakeFrameForChildWidgetWithInt:(int32_t)l
                                     withInt:(int32_t)t
                                     withInt:(int32_t)r
                                     withInt:(int32_t)b;

- (void)createSimpleWrapableView;

- (bool)hasScrollView;

- (bool)isViewWrapped;

- (void)setForegroundFrameWithInt:(int32_t)l
                          withInt:(int32_t)t
                          withInt:(int32_t)r
                          withInt:(int32_t)b;

- (void)invalidateWrapViewHolder;

- (id)getScrollView;

- (void)incrementProgressByWithId:(id)objValue;

- (void)setProgressWithId:(id)objValue;

- (void)nativeSetProgressWithFloat:(float)progress;

- (id)nativeCreateViewWithInt:(int32_t)viewtype;

- (void)setMinWithId:(id)objValue;

- (void)setMaxWithId:(id)objValue;

- (void)nativeCreateWithJavaUtilMap:(id<JavaUtilMap>)params;

- (void)setProgressTintWithId:(id)objValue;

- (id)getProgressTint;

- (void)setProgressBackgroundTintWithId:(id)objValue;

- (id)getProgressBackgroundTint;

@end

J2OBJC_FIELD_SETTER(ASUIProgressViewImpl, simpleWrapableView_, ASSimpleWrapableView *)
J2OBJC_FIELD_SETTER(ASUIProgressViewImpl, progressTint_, id)
J2OBJC_FIELD_SETTER(ASUIProgressViewImpl, progressTintBackground_, id)

inline NSString *ASUIProgressViewImpl_get_FOREGROUND_REGEX(void);
static NSString *ASUIProgressViewImpl_FOREGROUND_REGEX = @"none";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ASUIProgressViewImpl, FOREGROUND_REGEX, NSString *)

inline NSString *ASUIProgressViewImpl_get_VIEW_HOLDER_REGEX(void);
static NSString *ASUIProgressViewImpl_VIEW_HOLDER_REGEX = @"none";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ASUIProgressViewImpl, VIEW_HOLDER_REGEX, NSString *)

inline NSString *ASUIProgressViewImpl_get_WIDGET_REGEX(void);
static NSString *ASUIProgressViewImpl_WIDGET_REGEX;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ASUIProgressViewImpl, WIDGET_REGEX, NSString *)

__attribute__((unused)) static void ASUIProgressViewImpl_setWidgetOnNativeClass(ASUIProgressViewImpl *self);

__attribute__((unused)) static id ASUIProgressViewImpl_getPaddingBottom(ASUIProgressViewImpl *self);

__attribute__((unused)) static id ASUIProgressViewImpl_getPaddingTop(ASUIProgressViewImpl *self);

__attribute__((unused)) static id ASUIProgressViewImpl_getPaddingRight(ASUIProgressViewImpl *self);

__attribute__((unused)) static id ASUIProgressViewImpl_getPaddingLeft(ASUIProgressViewImpl *self);

__attribute__((unused)) static id ASUIProgressViewImpl_getPaddingEnd(ASUIProgressViewImpl *self);

__attribute__((unused)) static id ASUIProgressViewImpl_getPaddingStart(ASUIProgressViewImpl *self);

__attribute__((unused)) static void ASUIProgressViewImpl_setPaddingVerticalWithId_(ASUIProgressViewImpl *self, id objValue);

__attribute__((unused)) static void ASUIProgressViewImpl_setPaddingHorizontalWithId_(ASUIProgressViewImpl *self, id objValue);

__attribute__((unused)) static void ASUIProgressViewImpl_setPaddingTopWithId_(ASUIProgressViewImpl *self, id objValue);

__attribute__((unused)) static void ASUIProgressViewImpl_setPaddingEndWithId_(ASUIProgressViewImpl *self, id objValue);

__attribute__((unused)) static void ASUIProgressViewImpl_setPaddingStartWithId_(ASUIProgressViewImpl *self, id objValue);

__attribute__((unused)) static void ASUIProgressViewImpl_setPaddingLeftWithId_(ASUIProgressViewImpl *self, id objValue);

__attribute__((unused)) static void ASUIProgressViewImpl_setPaddingRightWithId_(ASUIProgressViewImpl *self, id objValue);

__attribute__((unused)) static void ASUIProgressViewImpl_setPaddingBottomWithId_(ASUIProgressViewImpl *self, id objValue);

__attribute__((unused)) static void ASUIProgressViewImpl_setPaddingWithId_(ASUIProgressViewImpl *self, id objValue);

__attribute__((unused)) static void ASUIProgressViewImpl_nativeMakeFrameForChildWidgetWithInt_withInt_withInt_withInt_(ASUIProgressViewImpl *self, int32_t l, int32_t t, int32_t r, int32_t b);

__attribute__((unused)) static void ASUIProgressViewImpl_createSimpleWrapableView(ASUIProgressViewImpl *self);

__attribute__((unused)) static bool ASUIProgressViewImpl_hasScrollView(ASUIProgressViewImpl *self);

__attribute__((unused)) static bool ASUIProgressViewImpl_isViewWrapped(ASUIProgressViewImpl *self);

__attribute__((unused)) static void ASUIProgressViewImpl_setForegroundFrameWithInt_withInt_withInt_withInt_(ASUIProgressViewImpl *self, int32_t l, int32_t t, int32_t r, int32_t b);

__attribute__((unused)) static void ASUIProgressViewImpl_invalidateWrapViewHolder(ASUIProgressViewImpl *self);

__attribute__((unused)) static id ASUIProgressViewImpl_getScrollView(ASUIProgressViewImpl *self);

__attribute__((unused)) static void ASUIProgressViewImpl_incrementProgressByWithId_(ASUIProgressViewImpl *self, id objValue);

__attribute__((unused)) static void ASUIProgressViewImpl_setProgressWithId_(ASUIProgressViewImpl *self, id objValue);

__attribute__((unused)) static void ASUIProgressViewImpl_nativeSetProgressWithFloat_(ASUIProgressViewImpl *self, float progress);

__attribute__((unused)) static id ASUIProgressViewImpl_nativeCreateViewWithInt_(ASUIProgressViewImpl *self, int32_t viewtype);

__attribute__((unused)) static void ASUIProgressViewImpl_setMinWithId_(ASUIProgressViewImpl *self, id objValue);

__attribute__((unused)) static void ASUIProgressViewImpl_setMaxWithId_(ASUIProgressViewImpl *self, id objValue);

__attribute__((unused)) static void ASUIProgressViewImpl_nativeCreateWithJavaUtilMap_(ASUIProgressViewImpl *self, id<JavaUtilMap> params);

__attribute__((unused)) static void ASUIProgressViewImpl_setProgressTintWithId_(ASUIProgressViewImpl *self, id objValue);

__attribute__((unused)) static id ASUIProgressViewImpl_getProgressTint(ASUIProgressViewImpl *self);

__attribute__((unused)) static void ASUIProgressViewImpl_setProgressBackgroundTintWithId_(ASUIProgressViewImpl *self, id objValue);

__attribute__((unused)) static id ASUIProgressViewImpl_getProgressBackgroundTint(ASUIProgressViewImpl *self);

@interface ASUIProgressViewImpl_UIProgressViewExt () {
 @public
  WEAK_ ASUIProgressViewImpl *this$0_;
  ASMeasureEvent *measureFinished_;
  ASOnLayoutEvent *onLayoutEvent_;
  id<JavaUtilList> overlays_;
  int32_t mMaxWidth_;
  int32_t mMaxHeight_;
  id<JavaUtilMap> templates_;
}

@end

J2OBJC_FIELD_SETTER(ASUIProgressViewImpl_UIProgressViewExt, measureFinished_, ASMeasureEvent *)
J2OBJC_FIELD_SETTER(ASUIProgressViewImpl_UIProgressViewExt, onLayoutEvent_, ASOnLayoutEvent *)
J2OBJC_FIELD_SETTER(ASUIProgressViewImpl_UIProgressViewExt, overlays_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(ASUIProgressViewImpl_UIProgressViewExt, templates_, id<JavaUtilMap>)

NSString *ASUIProgressViewImpl_LOCAL_NAME = @"UIProgressView";
NSString *ASUIProgressViewImpl_GROUP_NAME = @"ProgressBar";

@implementation ASUIProgressViewImpl

@synthesize uiView = uiView_;

- (void)loadAttributesWithNSString:(NSString *)attributeName {
  ASViewImpl_register__WithNSString_(attributeName);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosProgressTintColor"])) withTypeWithNSString:@"color"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosProgressImage"])) withTypeWithNSString:@"image"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosTrackTintColor"])) withTypeWithNSString:@"color"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosTrackImage"])) withTypeWithNSString:@"image"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"padding"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"paddingBottom"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"paddingRight"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"paddingLeft"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"paddingStart"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"paddingEnd"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"paddingTop"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"paddingHorizontal"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"paddingVertical"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"max"])) withTypeWithNSString:@"int"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"min"])) withTypeWithNSString:@"int"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"progress"])) withTypeWithNSString:@"int"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT_N_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"incrementProgressBy"])) withTypeWithNSString:@"int"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT_N_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"progressTint"])) withTypeWithNSString:@"colorstate"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"progressBackgroundTint"])) withTypeWithNSString:@"colorstate"]);
  ASWidgetFactory_registerConstructorAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"indeterminate"])) withTypeWithNSString:@"boolean"]);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASUIProgressViewImpl_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithNSString:(NSString *)localname {
  ASUIProgressViewImpl_initWithNSString_(self, localname);
  return self;
}

- (instancetype)initWithNSString:(NSString *)groupName
                    withNSString:(NSString *)localname {
  ASUIProgressViewImpl_initWithNSString_withNSString_(self, groupName, localname);
  return self;
}

- (IOSClass *)getViewClass {
  return ASUIProgressViewImpl_UIProgressViewExt_class_();
}

- (id<ASIWidget>)newInstance {
  return new_ASUIProgressViewImpl_initWithNSString_withNSString_(groupName_, localName_);
}

- (void)createWithASIFragment:(id<ASIFragment>)fragment
              withJavaUtilMap:(id<JavaUtilMap>)params {
  [super createWithASIFragment:fragment withJavaUtilMap:params];
  measurableView_ = new_ASUIProgressViewImpl_UIProgressViewExt_initWithASUIProgressViewImpl_(self);
  ASUIProgressViewImpl_createSimpleWrapableView(self);
  ASUIProgressViewImpl_nativeCreateWithJavaUtilMap_(self, params);
  ASViewImpl_registerCommandConveterWithASIWidget_(self);
  ASUIProgressViewImpl_setWidgetOnNativeClass(self);
}

- (void)setWidgetOnNativeClass {
  ASUIProgressViewImpl_setWidgetOnNativeClass(self);
}

- (void)setAttributeWithASWidgetAttribute:(ASWidgetAttribute *)key
                             withNSString:(NSString *)strValue
                                   withId:(id)objValue
                withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  id nativeWidget = [((ASSimpleWrapableView *) nil_chk(simpleWrapableView_)) getWrappedView];
  ASViewImpl_setAttributeWithASIWidget_withASSimpleWrapableView_withASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(self, simpleWrapableView_, key, strValue, objValue, decorator);
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"iosProgressTintColor", @"iosProgressImage", @"iosTrackTintColor", @"iosTrackImage", @"padding", @"paddingBottom", @"paddingRight", @"paddingLeft", @"paddingStart", @"paddingEnd", @"paddingTop", @"paddingHorizontal", @"paddingVertical", @"max", @"min", @"progress", @"incrementProgressBy", @"progressTint", @"progressBackgroundTint" }, 19)) {
    case 0:
    {
      [self setProgressTintColorWithId:nativeWidget withId:objValue];
    }
    break;
    case 1:
    {
      [self setProgressImageWithId:nativeWidget withId:objValue];
    }
    break;
    case 2:
    {
      [self setTrackTintColorWithId:nativeWidget withId:objValue];
    }
    break;
    case 3:
    {
      [self setTrackImageWithId:nativeWidget withId:objValue];
    }
    break;
    case 4:
    {
      ASUIProgressViewImpl_setPaddingWithId_(self, objValue);
    }
    break;
    case 5:
    {
      ASUIProgressViewImpl_setPaddingBottomWithId_(self, objValue);
    }
    break;
    case 6:
    {
      ASUIProgressViewImpl_setPaddingRightWithId_(self, objValue);
    }
    break;
    case 7:
    {
      ASUIProgressViewImpl_setPaddingLeftWithId_(self, objValue);
    }
    break;
    case 8:
    {
      ASUIProgressViewImpl_setPaddingStartWithId_(self, objValue);
    }
    break;
    case 9:
    {
      ASUIProgressViewImpl_setPaddingEndWithId_(self, objValue);
    }
    break;
    case 10:
    {
      ASUIProgressViewImpl_setPaddingTopWithId_(self, objValue);
    }
    break;
    case 11:
    {
      ASUIProgressViewImpl_setPaddingHorizontalWithId_(self, objValue);
    }
    break;
    case 12:
    {
      ASUIProgressViewImpl_setPaddingVerticalWithId_(self, objValue);
    }
    break;
    case 13:
    {
      ASUIProgressViewImpl_setMaxWithId_(self, objValue);
    }
    break;
    case 14:
    {
      ASUIProgressViewImpl_setMinWithId_(self, objValue);
    }
    break;
    case 15:
    {
      ASUIProgressViewImpl_setProgressWithId_(self, objValue);
    }
    break;
    case 16:
    {
      ASUIProgressViewImpl_incrementProgressByWithId_(self, objValue);
    }
    break;
    case 17:
    {
      ASUIProgressViewImpl_setProgressTintWithId_(self, objValue);
    }
    break;
    case 18:
    {
      ASUIProgressViewImpl_setProgressBackgroundTintWithId_(self, objValue);
    }
    break;
    default:
    break;
  }
}

- (id)getAttributeWithASWidgetAttribute:(ASWidgetAttribute *)key
              withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  id nativeWidget = [((ASSimpleWrapableView *) nil_chk(simpleWrapableView_)) getWrappedView];
  id attributeValue = ASViewImpl_getAttributeWithASIWidget_withId_withASWidgetAttribute_withASILifeCycleDecorator_(self, nativeWidget, key, decorator);
  if (attributeValue != nil) {
    return attributeValue;
  }
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"iosProgressTintColor", @"iosProgressImage", @"iosTrackTintColor", @"iosTrackImage", @"paddingBottom", @"paddingRight", @"paddingLeft", @"paddingStart", @"paddingEnd", @"paddingTop", @"progressTint", @"progressBackgroundTint" }, 12)) {
    case 0:
    {
      return [self getProgressTintColor];
    }
    case 1:
    {
      return [self getProgressImage];
    }
    case 2:
    {
      return [self getTrackTintColor];
    }
    case 3:
    {
      return [self getTrackImage];
    }
    case 4:
    {
      return ASUIProgressViewImpl_getPaddingBottom(self);
    }
    case 5:
    {
      return ASUIProgressViewImpl_getPaddingRight(self);
    }
    case 6:
    {
      return ASUIProgressViewImpl_getPaddingLeft(self);
    }
    case 7:
    {
      return ASUIProgressViewImpl_getPaddingStart(self);
    }
    case 8:
    {
      return ASUIProgressViewImpl_getPaddingEnd(self);
    }
    case 9:
    {
      return ASUIProgressViewImpl_getPaddingTop(self);
    }
    case 10:
    {
      return ASUIProgressViewImpl_getProgressTint(self);
    }
    case 11:
    {
      return ASUIProgressViewImpl_getProgressBackgroundTint(self);
    }
  }
  return nil;
}

- (id)asWidget {
  return measurableView_;
}

- (id)getPaddingBottom {
  return ASUIProgressViewImpl_getPaddingBottom(self);
}

- (id)getPaddingTop {
  return ASUIProgressViewImpl_getPaddingTop(self);
}

- (id)getPaddingRight {
  return ASUIProgressViewImpl_getPaddingRight(self);
}

- (id)getPaddingLeft {
  return ASUIProgressViewImpl_getPaddingLeft(self);
}

- (id)getPaddingEnd {
  return ASUIProgressViewImpl_getPaddingEnd(self);
}

- (id)getPaddingStart {
  return ASUIProgressViewImpl_getPaddingStart(self);
}

- (void)setPaddingVerticalWithId:(id)objValue {
  ASUIProgressViewImpl_setPaddingVerticalWithId_(self, objValue);
}

- (void)setPaddingHorizontalWithId:(id)objValue {
  ASUIProgressViewImpl_setPaddingHorizontalWithId_(self, objValue);
}

- (void)setPaddingTopWithId:(id)objValue {
  ASUIProgressViewImpl_setPaddingTopWithId_(self, objValue);
}

- (void)setPaddingEndWithId:(id)objValue {
  ASUIProgressViewImpl_setPaddingEndWithId_(self, objValue);
}

- (void)setPaddingStartWithId:(id)objValue {
  ASUIProgressViewImpl_setPaddingStartWithId_(self, objValue);
}

- (void)setPaddingLeftWithId:(id)objValue {
  ASUIProgressViewImpl_setPaddingLeftWithId_(self, objValue);
}

- (void)setPaddingRightWithId:(id)objValue {
  ASUIProgressViewImpl_setPaddingRightWithId_(self, objValue);
}

- (void)setPaddingBottomWithId:(id)objValue {
  ASUIProgressViewImpl_setPaddingBottomWithId_(self, objValue);
}

- (void)setPaddingWithId:(id)objValue {
  ASUIProgressViewImpl_setPaddingWithId_(self, objValue);
}

- (void)nativeMakeFrameForChildWidgetWithInt:(int32_t)l
                                     withInt:(int32_t)t
                                     withInt:(int32_t)r
                                     withInt:(int32_t)b {
  ASUIProgressViewImpl_nativeMakeFrameForChildWidgetWithInt_withInt_withInt_withInt_(self, l, t, r, b);
}

- (int32_t)measureWidth {
  int32_t width = [((ADProgressBar *) nil_chk(measurableView_)) nativeMeasureWidthWithId:uiView_];
  return width;
}

- (int32_t)measureHeightWithInt:(int32_t)width {
  int32_t height = [((ADProgressBar *) nil_chk(measurableView_)) nativeMeasureHeightWithId:uiView_ withInt:width];
  return height;
}

- (void)setProgressTintColorWithId:(id)nativeWidget
                            withId:(id)value {
  ((ASUIProgressView*) nativeWidget).progressTintColor = (UIColor*) value;
}

- (id)getProgressTintColor {
  return ((ASUIProgressView*) uiView_).progressTintColor;
}

- (void)setProgressImageWithId:(id)nativeWidget
                        withId:(id)value {
  ((ASUIProgressView*) nativeWidget).progressImage = (UIImage*) value;
}

- (id)getProgressImage {
  return ((ASUIProgressView*) uiView_).progressImage;
}

- (void)setTrackTintColorWithId:(id)nativeWidget
                         withId:(id)value {
  ((ASUIProgressView*) nativeWidget).trackTintColor = (UIColor*) value;
}

- (id)getTrackTintColor {
  return ((ASUIProgressView*) uiView_).trackTintColor;
}

- (void)setTrackImageWithId:(id)nativeWidget
                     withId:(id)value {
  ((ASUIProgressView*) nativeWidget).trackImage = (UIImage*) value;
}

- (id)getTrackImage {
  return ((ASUIProgressView*) uiView_).trackImage;
}

- (bool)checkIosVersionWithNSString:(NSString *)v {
  return ([[[UIDevice currentDevice] systemVersion] compare:v options:NSNumericSearch] == NSOrderedDescending);
}

- (void)setIdWithNSString:(NSString *)id_ {
  if (id_ != nil && ![id_ isEqual:@""]) {
    [super setIdWithNSString:id_];
    [((ADProgressBar *) nil_chk(measurableView_)) setIdWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([self quickConvertWithId:id_ withNSString:@"id"], [JavaLangInteger class]))) intValue]];
  }
}

- (void)setVisibleWithBoolean:(bool)b {
  [((ADView *) nil_chk(((ADView *) cast_chk([self asWidget], [ADView class])))) setVisibilityWithInt:b ? ADView_VISIBLE : ADView_GONE];
}

- (void)requestLayout {
  if ([self isInitialised]) {
    ASViewImpl_requestLayoutWithASIWidget_withId_(self, [self asNativeWidget]);
  }
}

- (void)invalidate {
  if ([self isInitialised]) {
    ASViewImpl_invalidateWithASIWidget_withId_(self, [self asNativeWidget]);
    if (ASUIProgressViewImpl_isViewWrapped(self)) {
      ASViewImpl_invalidateWithASIWidget_withId_(self, [((ASSimpleWrapableView *) nil_chk(simpleWrapableView_)) getWrappedView]);
      if ([((ASSimpleWrapableView *) nil_chk(simpleWrapableView_)) getForeground] != nil) {
        ASViewImpl_invalidateWithASIWidget_withId_(self, [((ASSimpleWrapableView *) nil_chk(simpleWrapableView_)) getForeground]);
      }
    }
  }
}

- (void)createSimpleWrapableView {
  ASUIProgressViewImpl_createSimpleWrapableView(self);
}

- (bool)hasScrollView {
  return ASUIProgressViewImpl_hasScrollView(self);
}

- (bool)isViewWrapped {
  return ASUIProgressViewImpl_isViewWrapped(self);
}

- (void)addForegroundIfNeeded {
  if (ASUIProgressViewImpl_isViewWrapped(self) && ![((ASSimpleWrapableView *) nil_chk(simpleWrapableView_)) isDisableForeground]) {
    if ([((ASSimpleWrapableView *) nil_chk(simpleWrapableView_)) getForeground] == nil) {
      id foreground = [self nativeAddForeGroundWithASIWidget:self];
      ASViewGroupImpl_nativeAddViewWithId_withId_([((ASSimpleWrapableView *) nil_chk(simpleWrapableView_)) asNativeWidget], foreground);
      [((ASSimpleWrapableView *) nil_chk(simpleWrapableView_)) setForegroundWithId:foreground];
    }
  }
}

- (id)getForeground {
  return [((ASSimpleWrapableView *) nil_chk(simpleWrapableView_)) getForeground];
}

- (void)setForegroundFrameWithInt:(int32_t)l
                          withInt:(int32_t)t
                          withInt:(int32_t)r
                          withInt:(int32_t)b {
  ASUIProgressViewImpl_setForegroundFrameWithInt_withInt_withInt_withInt_(self, l, t, r, b);
}

- (id)asNativeWidget {
  return [((ASSimpleWrapableView *) nil_chk(simpleWrapableView_)) asNativeWidget];
}

- (void)invalidateWrapViewHolder {
  ASUIProgressViewImpl_invalidateWrapViewHolder(self);
}

- (id)createWrapperViewWithId:(id)wrapperParent
                      withInt:(int32_t)viewtype {
  uiView_ = ASUIProgressViewImpl_nativeCreateViewWithInt_(self, viewtype);
  ASViewGroupImpl_nativeAddViewWithId_withId_(ASViewImpl_getFirstChildOrSelfWithId_(wrapperParent), uiView_);
  return uiView_;
}

- (id)createWrapperViewHolderWithInt:(int32_t)viewType {
  return [self createWrapperViewHolderNativeWithInt:viewType];
}

- (id)nativeAddForeGroundWithASIWidget:(id<ASIWidget>)w {
  ASUIView* uiView = [ASUIView new];
  uiView.widget = w;
  uiView.commandRegex  = ASUIProgressViewImpl_FOREGROUND_REGEX;
  uiView.backgroundColor = [UIColor clearColor];
  return uiView;
}

- (id)createWrapperViewHolderNativeWithInt:(int32_t)viewType {
  if (viewType == 1) {
    ASUIView* uiView = [ASUIView new];
    uiView.widget = self;
    uiView.commandRegex  = ASUIProgressViewImpl_VIEW_HOLDER_REGEX;
    uiView.backgroundColor = [UIColor clearColor];
    
    return uiView;
  }
  
  if (viewType == 2 || viewType == 3) {
    ASUIView* uiView = [ASUIView new];
    uiView.widget = self;
    uiView.backgroundColor = [UIColor clearColor];
    uiView.commandRegex  = ASUIProgressViewImpl_VIEW_HOLDER_REGEX;
    
    ASUIScrollView* scrollview = [ASUIScrollView new];
    scrollview.scrollEnabled=YES;
    scrollview.bounces=NO;
    scrollview.preventAutoScroll=YES;
    scrollview.delaysContentTouches=YES;
    scrollview.userInteractionEnabled=YES;
    scrollview.widget = self;
    scrollview.backgroundColor = [UIColor clearColor];
    scrollview.commandRegex  = @"none";
    [uiView addSubview:scrollview];
    return uiView;
  }
  
  return nil;
}

- (id)getScrollView {
  return ASUIProgressViewImpl_getScrollView(self);
}

- (void)incrementProgressByWithId:(id)objValue {
  ASUIProgressViewImpl_incrementProgressByWithId_(self, objValue);
}

- (void)setProgressWithId:(id)objValue {
  ASUIProgressViewImpl_setProgressWithId_(self, objValue);
}

- (void)nativeSetProgressWithFloat:(float)progress {
  ASUIProgressViewImpl_nativeSetProgressWithFloat_(self, progress);
}

- (id)nativeCreateViewWithInt:(int32_t)viewtype {
  return ASUIProgressViewImpl_nativeCreateViewWithInt_(self, viewtype);
}

- (void)setMinWithId:(id)objValue {
  ASUIProgressViewImpl_setMinWithId_(self, objValue);
}

- (void)setMaxWithId:(id)objValue {
  ASUIProgressViewImpl_setMaxWithId_(self, objValue);
}

- (void)nativeCreateWithJavaUtilMap:(id<JavaUtilMap>)params {
  ASUIProgressViewImpl_nativeCreateWithJavaUtilMap_(self, params);
}

- (void)setProgressTintWithId:(id)objValue {
  ASUIProgressViewImpl_setProgressTintWithId_(self, objValue);
}

- (id)getProgressTint {
  return ASUIProgressViewImpl_getProgressTint(self);
}

- (void)setProgressBackgroundTintWithId:(id)objValue {
  ASUIProgressViewImpl_setProgressBackgroundTintWithId_(self, objValue);
}

- (id)getProgressBackgroundTint {
  return ASUIProgressViewImpl_getProgressBackgroundTint(self);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "LIOSClass;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASIWidget;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, 5, -1, -1 },
    { NULL, "V", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 12, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 13, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 14, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 15, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 16, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 17, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 18, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 19, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 20, 21, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 22, 23, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 24, 25, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x101, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 26, 25, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x101, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 27, 25, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x101, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 28, 25, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x101, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x101, 29, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 30, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 31, 32, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 33, 21, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 34, 35, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 36, 23, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x101, 37, 38, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x101, 39, 23, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 40, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 41, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 42, 43, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x102, 44, 23, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 45, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 46, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 47, 48, -1, 49, -1, -1 },
    { NULL, "V", 0x2, 50, 11, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 51, 11, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(loadAttributesWithNSString:);
  methods[1].selector = @selector(init);
  methods[2].selector = @selector(initWithNSString:);
  methods[3].selector = @selector(initWithNSString:withNSString:);
  methods[4].selector = @selector(getViewClass);
  methods[5].selector = @selector(newInstance);
  methods[6].selector = @selector(createWithASIFragment:withJavaUtilMap:);
  methods[7].selector = @selector(setWidgetOnNativeClass);
  methods[8].selector = @selector(setAttributeWithASWidgetAttribute:withNSString:withId:withASILifeCycleDecorator:);
  methods[9].selector = @selector(getAttributeWithASWidgetAttribute:withASILifeCycleDecorator:);
  methods[10].selector = @selector(asWidget);
  methods[11].selector = @selector(getPaddingBottom);
  methods[12].selector = @selector(getPaddingTop);
  methods[13].selector = @selector(getPaddingRight);
  methods[14].selector = @selector(getPaddingLeft);
  methods[15].selector = @selector(getPaddingEnd);
  methods[16].selector = @selector(getPaddingStart);
  methods[17].selector = @selector(setPaddingVerticalWithId:);
  methods[18].selector = @selector(setPaddingHorizontalWithId:);
  methods[19].selector = @selector(setPaddingTopWithId:);
  methods[20].selector = @selector(setPaddingEndWithId:);
  methods[21].selector = @selector(setPaddingStartWithId:);
  methods[22].selector = @selector(setPaddingLeftWithId:);
  methods[23].selector = @selector(setPaddingRightWithId:);
  methods[24].selector = @selector(setPaddingBottomWithId:);
  methods[25].selector = @selector(setPaddingWithId:);
  methods[26].selector = @selector(nativeMakeFrameForChildWidgetWithInt:withInt:withInt:withInt:);
  methods[27].selector = @selector(measureWidth);
  methods[28].selector = @selector(measureHeightWithInt:);
  methods[29].selector = @selector(setProgressTintColorWithId:withId:);
  methods[30].selector = @selector(getProgressTintColor);
  methods[31].selector = @selector(setProgressImageWithId:withId:);
  methods[32].selector = @selector(getProgressImage);
  methods[33].selector = @selector(setTrackTintColorWithId:withId:);
  methods[34].selector = @selector(getTrackTintColor);
  methods[35].selector = @selector(setTrackImageWithId:withId:);
  methods[36].selector = @selector(getTrackImage);
  methods[37].selector = @selector(checkIosVersionWithNSString:);
  methods[38].selector = @selector(setIdWithNSString:);
  methods[39].selector = @selector(setVisibleWithBoolean:);
  methods[40].selector = @selector(requestLayout);
  methods[41].selector = @selector(invalidate);
  methods[42].selector = @selector(createSimpleWrapableView);
  methods[43].selector = @selector(hasScrollView);
  methods[44].selector = @selector(isViewWrapped);
  methods[45].selector = @selector(addForegroundIfNeeded);
  methods[46].selector = @selector(getForeground);
  methods[47].selector = @selector(setForegroundFrameWithInt:withInt:withInt:withInt:);
  methods[48].selector = @selector(asNativeWidget);
  methods[49].selector = @selector(invalidateWrapViewHolder);
  methods[50].selector = @selector(createWrapperViewWithId:withInt:);
  methods[51].selector = @selector(createWrapperViewHolderWithInt:);
  methods[52].selector = @selector(nativeAddForeGroundWithASIWidget:);
  methods[53].selector = @selector(createWrapperViewHolderNativeWithInt:);
  methods[54].selector = @selector(getScrollView);
  methods[55].selector = @selector(incrementProgressByWithId:);
  methods[56].selector = @selector(setProgressWithId:);
  methods[57].selector = @selector(nativeSetProgressWithFloat:);
  methods[58].selector = @selector(nativeCreateViewWithInt:);
  methods[59].selector = @selector(setMinWithId:);
  methods[60].selector = @selector(setMaxWithId:);
  methods[61].selector = @selector(nativeCreateWithJavaUtilMap:);
  methods[62].selector = @selector(setProgressTintWithId:);
  methods[63].selector = @selector(getProgressTint);
  methods[64].selector = @selector(setProgressBackgroundTintWithId:);
  methods[65].selector = @selector(getProgressBackgroundTint);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "FOREGROUND_REGEX", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 52, -1, -1 },
    { "VIEW_HOLDER_REGEX", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 53, -1, -1 },
    { "WIDGET_REGEX", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 54, -1, -1 },
    { "LOCAL_NAME", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 55, -1, -1 },
    { "GROUP_NAME", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 56, -1, -1 },
    { "uiView_", "LNSObject;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "measurableView_", "LADProgressBar;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "simpleWrapableView_", "LASSimpleWrapableView;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "max_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "min_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "progress_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "progressTint_", "LNSObject;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "progressTintBackground_", "LNSObject;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "loadAttributes", "LNSString;", "LNSString;LNSString;", "create", "LASIFragment;LJavaUtilMap;", "(Lcom/ashera/core/IFragment;Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;)V", "setAttribute", "LASWidgetAttribute;LNSString;LNSObject;LASILifeCycleDecorator;", "getAttribute", "LASWidgetAttribute;LASILifeCycleDecorator;", "setPaddingVertical", "LNSObject;", "setPaddingHorizontal", "setPaddingTop", "setPaddingEnd", "setPaddingStart", "setPaddingLeft", "setPaddingRight", "setPaddingBottom", "setPadding", "nativeMakeFrameForChildWidget", "IIII", "measureHeight", "I", "setProgressTintColor", "LNSObject;LNSObject;", "setProgressImage", "setTrackTintColor", "setTrackImage", "checkIosVersion", "setId", "setVisible", "Z", "setForegroundFrame", "createWrapperView", "LNSObject;I", "createWrapperViewHolder", "nativeAddForeGround", "LASIWidget;", "createWrapperViewHolderNative", "incrementProgressBy", "setProgress", "nativeSetProgress", "F", "nativeCreateView", "setMin", "setMax", "nativeCreate", "LJavaUtilMap;", "(Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;)V", "setProgressTint", "setProgressBackgroundTint", &ASUIProgressViewImpl_FOREGROUND_REGEX, &ASUIProgressViewImpl_VIEW_HOLDER_REGEX, &ASUIProgressViewImpl_WIDGET_REGEX, &ASUIProgressViewImpl_LOCAL_NAME, &ASUIProgressViewImpl_GROUP_NAME, "LASUIProgressViewImpl_UIProgressViewExt;" };
  static const J2ObjcClassInfo _ASUIProgressViewImpl = { "UIProgressViewImpl", "com.ashera.layout", ptrTable, methods, fields, 7, 0x1, 66, 13, -1, 57, -1, -1, -1 };
  return &_ASUIProgressViewImpl;
}

@end

void ASUIProgressViewImpl_init(ASUIProgressViewImpl *self) {
  ASBaseWidget_initWithNSString_withNSString_(self, ASUIProgressViewImpl_GROUP_NAME, ASUIProgressViewImpl_LOCAL_NAME);
  self->max_ = 100;
  self->min_ = 0;
}

ASUIProgressViewImpl *new_ASUIProgressViewImpl_init() {
  J2OBJC_NEW_IMPL(ASUIProgressViewImpl, init)
}

ASUIProgressViewImpl *create_ASUIProgressViewImpl_init() {
  J2OBJC_CREATE_IMPL(ASUIProgressViewImpl, init)
}

void ASUIProgressViewImpl_initWithNSString_(ASUIProgressViewImpl *self, NSString *localname) {
  ASBaseWidget_initWithNSString_withNSString_(self, ASUIProgressViewImpl_GROUP_NAME, localname);
  self->max_ = 100;
  self->min_ = 0;
}

ASUIProgressViewImpl *new_ASUIProgressViewImpl_initWithNSString_(NSString *localname) {
  J2OBJC_NEW_IMPL(ASUIProgressViewImpl, initWithNSString_, localname)
}

ASUIProgressViewImpl *create_ASUIProgressViewImpl_initWithNSString_(NSString *localname) {
  J2OBJC_CREATE_IMPL(ASUIProgressViewImpl, initWithNSString_, localname)
}

void ASUIProgressViewImpl_initWithNSString_withNSString_(ASUIProgressViewImpl *self, NSString *groupName, NSString *localname) {
  ASBaseWidget_initWithNSString_withNSString_(self, groupName, localname);
  self->max_ = 100;
  self->min_ = 0;
}

ASUIProgressViewImpl *new_ASUIProgressViewImpl_initWithNSString_withNSString_(NSString *groupName, NSString *localname) {
  J2OBJC_NEW_IMPL(ASUIProgressViewImpl, initWithNSString_withNSString_, groupName, localname)
}

ASUIProgressViewImpl *create_ASUIProgressViewImpl_initWithNSString_withNSString_(NSString *groupName, NSString *localname) {
  J2OBJC_CREATE_IMPL(ASUIProgressViewImpl, initWithNSString_withNSString_, groupName, localname)
}

void ASUIProgressViewImpl_setWidgetOnNativeClass(ASUIProgressViewImpl *self) {
  ((ASUIProgressView*) self.uiView).widget = self;
}

id ASUIProgressViewImpl_getPaddingBottom(ASUIProgressViewImpl *self) {
  return JavaLangInteger_valueOfWithInt_([((ADProgressBar *) nil_chk(self->measurableView_)) getPaddingBottom]);
}

id ASUIProgressViewImpl_getPaddingTop(ASUIProgressViewImpl *self) {
  return JavaLangInteger_valueOfWithInt_([((ADProgressBar *) nil_chk(self->measurableView_)) getPaddingTop]);
}

id ASUIProgressViewImpl_getPaddingRight(ASUIProgressViewImpl *self) {
  return JavaLangInteger_valueOfWithInt_([((ADProgressBar *) nil_chk(self->measurableView_)) getPaddingRight]);
}

id ASUIProgressViewImpl_getPaddingLeft(ASUIProgressViewImpl *self) {
  return JavaLangInteger_valueOfWithInt_([((ADProgressBar *) nil_chk(self->measurableView_)) getPaddingLeft]);
}

id ASUIProgressViewImpl_getPaddingEnd(ASUIProgressViewImpl *self) {
  return ASUIProgressViewImpl_getPaddingRight(self);
}

id ASUIProgressViewImpl_getPaddingStart(ASUIProgressViewImpl *self) {
  return ASUIProgressViewImpl_getPaddingLeft(self);
}

void ASUIProgressViewImpl_setPaddingVerticalWithId_(ASUIProgressViewImpl *self, id objValue) {
  ASUIProgressViewImpl_setPaddingBottomWithId_(self, objValue);
  ASUIProgressViewImpl_setPaddingTopWithId_(self, objValue);
}

void ASUIProgressViewImpl_setPaddingHorizontalWithId_(ASUIProgressViewImpl *self, id objValue) {
  ASUIProgressViewImpl_setPaddingRightWithId_(self, objValue);
  ASUIProgressViewImpl_setPaddingLeftWithId_(self, objValue);
}

void ASUIProgressViewImpl_setPaddingTopWithId_(ASUIProgressViewImpl *self, id objValue) {
  ASViewImpl_setPaddingTopWithId_withADView_(objValue, self->measurableView_);
}

void ASUIProgressViewImpl_setPaddingEndWithId_(ASUIProgressViewImpl *self, id objValue) {
  ASViewImpl_setPaddingRightWithId_withADView_(objValue, self->measurableView_);
}

void ASUIProgressViewImpl_setPaddingStartWithId_(ASUIProgressViewImpl *self, id objValue) {
  ASViewImpl_setPaddingLeftWithId_withADView_(objValue, self->measurableView_);
}

void ASUIProgressViewImpl_setPaddingLeftWithId_(ASUIProgressViewImpl *self, id objValue) {
  ASViewImpl_setPaddingLeftWithId_withADView_(objValue, self->measurableView_);
}

void ASUIProgressViewImpl_setPaddingRightWithId_(ASUIProgressViewImpl *self, id objValue) {
  ASViewImpl_setPaddingRightWithId_withADView_(objValue, self->measurableView_);
}

void ASUIProgressViewImpl_setPaddingBottomWithId_(ASUIProgressViewImpl *self, id objValue) {
  ASViewImpl_setPaddingBottomWithId_withADView_(objValue, self->measurableView_);
}

void ASUIProgressViewImpl_setPaddingWithId_(ASUIProgressViewImpl *self, id objValue) {
  ASUIProgressViewImpl_setPaddingBottomWithId_(self, objValue);
  ASUIProgressViewImpl_setPaddingTopWithId_(self, objValue);
  ASUIProgressViewImpl_setPaddingRightWithId_(self, objValue);
  ASUIProgressViewImpl_setPaddingLeftWithId_(self, objValue);
}

void ASUIProgressViewImpl_nativeMakeFrameForChildWidgetWithInt_withInt_withInt_withInt_(ASUIProgressViewImpl *self, int32_t l, int32_t t, int32_t r, int32_t b) {
  if (ASUIProgressViewImpl_isViewWrapped(self)) {
    id progressView = [((ASSimpleWrapableView *) nil_chk(self->simpleWrapableView_)) getWrappedView];
    ASViewImpl_updateBoundsWithId_withInt_withInt_withInt_withInt_(progressView, [((ADProgressBar *) nil_chk(self->measurableView_)) getPaddingStart], [((ADProgressBar *) nil_chk(self->measurableView_)) getPaddingTop], r - l - [((ADProgressBar *) nil_chk(self->measurableView_)) getPaddingStart] - [((ADProgressBar *) nil_chk(self->measurableView_)) getPaddingEnd], b - t - [((ADProgressBar *) nil_chk(self->measurableView_)) getPaddingTop] - [((ADProgressBar *) nil_chk(self->measurableView_)) getPaddingBottom]);
  }
}

void ASUIProgressViewImpl_createSimpleWrapableView(ASUIProgressViewImpl *self) {
  bool wrapViewFeature = [self hasFeatureWithNSString:@"enableFeatures" withNSString:@"decorator"];
  int32_t viewType = -1;
  if (wrapViewFeature) {
    bool hscroll = [self hasFeatureWithNSString:@"enableFeatures" withNSString:@"hscroll"];
    bool vscroll = [self hasFeatureWithNSString:@"enableFeatures" withNSString:@"vscroll"];
    viewType = 1;
    if (hscroll) viewType = 2;
    if (vscroll) viewType = 3;
  }
  self->simpleWrapableView_ = new_ASSimpleWrapableView_initWithASIWidget_withInt_(self, viewType);
}

bool ASUIProgressViewImpl_hasScrollView(ASUIProgressViewImpl *self) {
  return ASUIProgressViewImpl_isViewWrapped(self) && ([((ASSimpleWrapableView *) nil_chk(self->simpleWrapableView_)) getViewtype] == 2 || [((ASSimpleWrapableView *) nil_chk(self->simpleWrapableView_)) getViewtype] == 3);
}

bool ASUIProgressViewImpl_isViewWrapped(ASUIProgressViewImpl *self) {
  return [((ASSimpleWrapableView *) nil_chk(self->simpleWrapableView_)) isViewWrapped];
}

void ASUIProgressViewImpl_setForegroundFrameWithInt_withInt_withInt_withInt_(ASUIProgressViewImpl *self, int32_t l, int32_t t, int32_t r, int32_t b) {
  id foreground = [((ASSimpleWrapableView *) nil_chk(self->simpleWrapableView_)) getForeground];
  if (foreground != nil) {
    ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_(foreground, 0, 0, r - l, b - t);
  }
}

void ASUIProgressViewImpl_invalidateWrapViewHolder(ASUIProgressViewImpl *self) {
  if (ASUIProgressViewImpl_isViewWrapped(self)) {
    ASViewImpl_nativeInvalidateWithId_([((ASSimpleWrapableView *) nil_chk(self->simpleWrapableView_)) getWrapperViewHolder]);
  }
}

id ASUIProgressViewImpl_getScrollView(ASUIProgressViewImpl *self) {
  UIView* uiview = (UIView*)[self->simpleWrapableView_ getWrapperViewHolder];
  return uiview.subviews[0];
}

void ASUIProgressViewImpl_incrementProgressByWithId_(ASUIProgressViewImpl *self, id objValue) {
  ASUIProgressViewImpl_setProgressWithId_(self, JavaLangInteger_valueOfWithInt_(self->progress_ + [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]));
}

void ASUIProgressViewImpl_setProgressWithId_(ASUIProgressViewImpl *self, id objValue) {
  self->progress_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
  if (self->progress_ < self->min_) {
    self->progress_ = self->min_;
  }
  ASUIProgressViewImpl_nativeSetProgressWithFloat_(self, (self->progress_) / (self->max_ * 1.0f));
}

void ASUIProgressViewImpl_nativeSetProgressWithFloat_(ASUIProgressViewImpl *self, float progress) {
  [(ASUIProgressView*)self.uiView setProgress: progress animated: YES];
}

id ASUIProgressViewImpl_nativeCreateViewWithInt_(ASUIProgressViewImpl *self, int32_t viewtype) {
  return [[ASUIProgressView alloc] initWithProgressViewStyle:UIProgressViewStyleDefault];
}

void ASUIProgressViewImpl_setMinWithId_(ASUIProgressViewImpl *self, id objValue) {
  self->min_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
  if ([self isInitialised]) {
    ASUIProgressViewImpl_incrementProgressByWithId_(self, JavaLangInteger_valueOfWithInt_(0));
  }
}

void ASUIProgressViewImpl_setMaxWithId_(ASUIProgressViewImpl *self, id objValue) {
  self->max_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
  if ([self isInitialised]) {
    ASUIProgressViewImpl_incrementProgressByWithId_(self, JavaLangInteger_valueOfWithInt_(0));
  }
}

void ASUIProgressViewImpl_nativeCreateWithJavaUtilMap_(ASUIProgressViewImpl *self, id<JavaUtilMap> params) {
  [((ASSimpleWrapableView *) nil_chk(self->simpleWrapableView_)) setDisableForegroundWithBoolean:true];
}

void ASUIProgressViewImpl_setProgressTintWithId_(ASUIProgressViewImpl *self, id objValue) {
  self->progressTint_ = objValue;
  if ([objValue isKindOfClass:[ADColorStateList class]]) {
    ADColorStateList *colorStateList = (ADColorStateList *) objValue;
    objValue = JavaLangInteger_valueOfWithInt_([((ADColorStateList *) nil_chk(colorStateList)) getColorForStateWithIntArray:[((ADProgressBar *) nil_chk(self->measurableView_)) getDrawableState] withInt:ADColor_RED]);
  }
  id color = ASViewImpl_getColorWithId_(objValue);
  [self setProgressTintColorWithId:[self asNativeWidget] withId:color];
}

id ASUIProgressViewImpl_getProgressTint(ASUIProgressViewImpl *self) {
  return self->progressTint_;
}

void ASUIProgressViewImpl_setProgressBackgroundTintWithId_(ASUIProgressViewImpl *self, id objValue) {
  self->progressTintBackground_ = objValue;
  if ([objValue isKindOfClass:[ADColorStateList class]]) {
    ADColorStateList *colorStateList = (ADColorStateList *) objValue;
    objValue = JavaLangInteger_valueOfWithInt_([((ADColorStateList *) nil_chk(colorStateList)) getColorForStateWithIntArray:[((ADProgressBar *) nil_chk(self->measurableView_)) getDrawableState] withInt:ADColor_RED]);
  }
  id color = ASViewImpl_getColorWithId_(objValue);
  [self setTrackTintColorWithId:[self asNativeWidget] withId:color];
}

id ASUIProgressViewImpl_getProgressBackgroundTint(ASUIProgressViewImpl *self) {
  return self->progressTintBackground_;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASUIProgressViewImpl)

J2OBJC_NAME_MAPPING(ASUIProgressViewImpl, "com.ashera.layout", "AS")

@implementation ASUIProgressViewImpl_UIProgressViewExt

- (id<ASIWidget>)getWidget {
  return this$0_;
}

- (void)setMaxWidthWithInt:(int32_t)width {
  mMaxWidth_ = width;
}

- (void)setMaxHeightWithInt:(int32_t)height {
  mMaxHeight_ = height;
}

- (int32_t)getMaxWidth {
  return mMaxWidth_;
}

- (int32_t)getMaxHeight {
  return mMaxHeight_;
}

- (instancetype)initWithASUIProgressViewImpl:(ASUIProgressViewImpl *)outer$ {
  ASUIProgressViewImpl_UIProgressViewExt_initWithASUIProgressViewImpl_(self, outer$);
  return self;
}

- (void)onMeasureWithInt:(int32_t)widthMeasureSpec
                 withInt:(int32_t)heightMeasureSpec {
  if (mMaxWidth_ > 0) {
    widthMeasureSpec = ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_(mMaxWidth_, ADView_MeasureSpec_AT_MOST);
  }
  if (mMaxHeight_ > 0) {
    heightMeasureSpec = ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_(mMaxHeight_, ADView_MeasureSpec_AT_MOST);
  }
  [super onMeasureWithInt:widthMeasureSpec withInt:heightMeasureSpec];
  id<ASIWidgetLifeCycleListener> listener = [this$0_ getListener];
  if (listener != nil) {
    [((ASMeasureEvent *) nil_chk(measureFinished_)) setWidthWithInt:[self getMeasuredWidth]];
    [((ASMeasureEvent *) nil_chk(measureFinished_)) setHeightWithInt:[self getMeasuredHeight]];
    [listener eventOccurredWithASIWidgetLifeCycleListener_EventId:JreLoadEnum(ASIWidgetLifeCycleListener_EventId, measureFinished) withASWidgetEvent:measureFinished_];
  }
}

- (void)onLayoutWithBoolean:(bool)changed
                    withInt:(int32_t)l
                    withInt:(int32_t)t
                    withInt:(int32_t)r
                    withInt:(int32_t)b {
  [super onLayoutWithBoolean:changed withInt:l withInt:t withInt:r withInt:b];
  ASViewImpl_setDrawableBoundsWithASIWidget_withInt_withInt_withInt_withInt_(this$0_, l, t, r, b);
  if (![self isOverlay]) {
    ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_([this$0_ asNativeWidget], l, t, r, b);
    ASUIProgressViewImpl_nativeMakeFrameForChildWidgetWithInt_withInt_withInt_withInt_(this$0_, l, t, r, b);
  }
  [this$0_ replayBufferedEvents];
  ASViewImpl_redrawDrawablesWithASIWidget_(this$0_);
  overlays_ = ASViewImpl_drawOverlayWithASIWidget_withJavaUtilList_(this$0_, overlays_);
  id<ASIWidgetLifeCycleListener> listener = [this$0_ getListener];
  if (listener != nil) {
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setBWithInt:b];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setLWithInt:l];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setRWithInt:r];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setTWithInt:t];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setChangedWithBoolean:changed];
    [listener eventOccurredWithASIWidgetLifeCycleListener_EventId:JreLoadEnum(ASIWidgetLifeCycleListener_EventId, onLayout) withASWidgetEvent:onLayoutEvent_];
  }
  if ([this$0_ isInvalidateOnFrameChange] && [this$0_ isInitialised]) {
    [this$0_ invalidate];
  }
}

- (void)executeWithNSString:(NSString *)method
          withNSObjectArray:(IOSObjectArray *)canvas {
}

- (void)updateMeasuredDimensionWithInt:(int32_t)width
                               withInt:(int32_t)height {
  [self setMeasuredDimensionWithInt:width withInt:height];
}

- (id<ASILifeCycleDecorator>)newInstanceWithASIWidget:(id<ASIWidget>)widget {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)setAttributeWithASWidgetAttribute:(ASWidgetAttribute *)widgetAttribute
                             withNSString:(NSString *)strValue
                                   withId:(id)objValue {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (id<JavaUtilList>)getMethods {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)initialized {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (id)getAttributeWithASWidgetAttribute:(ASWidgetAttribute *)widgetAttribute {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)drawableStateChanged {
  [super drawableStateChanged];
  if (![this$0_ isWidgetDisposed]) {
    ASViewImpl_drawableStateChangedWithASIWidget_(this$0_);
  }
}

- (ADView *)inflateViewWithNSString:(NSString *)layout {
  if (templates_ == nil) {
    templates_ = new_JavaUtilHashMap_init();
  }
  id<ASIWidget> template_ = [templates_ getWithId:layout];
  if (template_ == nil) {
    template_ = (id<ASIWidget>) cast_check([this$0_ quickConvertWithId:layout withNSString:@"template"], ASIWidget_class_());
    (void) [((id<JavaUtilMap>) nil_chk(templates_)) putWithId:layout withId:template_];
  }
  id<ASIWidget> widget = [((id<ASIWidget>) nil_chk(template_)) loadLazyWidgetsWithASHasWidgets:[this$0_ getParent]];
  return (ADView *) cast_chk([((id<ASIWidget>) nil_chk(widget)) asWidget], [ADView class]);
}

- (void)remeasure {
  if ([this$0_ getFragment] != nil) {
    [((id<ASIFragment>) nil_chk([this$0_ getFragment])) remeasure];
  }
}

- (void)removeFromParent {
  [((id<ASHasWidgets>) nil_chk([this$0_ getParent])) removeWithASIWidget:this$0_];
}

- (void)getLocationOnScreenWithIntArray:(IOSIntArray *)appScreenLocation {
  *IOSIntArray_GetRef(nil_chk(appScreenLocation), 0) = ASViewImpl_getLocationXOnScreenWithId_([this$0_ asNativeWidget]);
  *IOSIntArray_GetRef(appScreenLocation, 1) = ASViewImpl_getLocationYOnScreenWithId_([this$0_ asNativeWidget]);
}

- (void)getWindowVisibleDisplayFrameWithADRect:(ADRect *)displayFrame {
  ((ADRect *) nil_chk(displayFrame))->left_ = ASViewImpl_getLocationXOnScreenWithId_([this$0_ asNativeWidget]);
  displayFrame->top_ = ASViewImpl_getLocationYOnScreenWithId_([this$0_ asNativeWidget]);
  displayFrame->right_ = displayFrame->left_ + [self getWidth];
  displayFrame->bottom_ = displayFrame->top_ + [self getHeight];
}

- (void)offsetTopAndBottomWithInt:(int32_t)offset {
  [super offsetTopAndBottomWithInt:offset];
  ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_([this$0_ asNativeWidget], [self getLeft], [self getTop], [self getRight], [self getBottom]);
}

- (void)offsetLeftAndRightWithInt:(int32_t)offset {
  [super offsetLeftAndRightWithInt:offset];
  ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_([this$0_ asNativeWidget], [self getLeft], [self getTop], [self getRight], [self getBottom]);
}

- (void)setMyAttributeWithNSString:(NSString *)name
                            withId:(id)value {
  if ([((NSString *) nil_chk(name)) isEqual:@"state0"]) {
    [self setState0WithId:value];
    return;
  }
  if ([name isEqual:@"state1"]) {
    [self setState1WithId:value];
    return;
  }
  if ([name isEqual:@"state2"]) {
    [self setState2WithId:value];
    return;
  }
  if ([name isEqual:@"state3"]) {
    [self setState3WithId:value];
    return;
  }
  if ([name isEqual:@"state4"]) {
    [self setState4WithId:value];
    return;
  }
  [this$0_ setAttributeWithNSString:name withId:value withBoolean:!([value isKindOfClass:[NSString class]])];
}

- (void)setVisibilityWithInt:(int32_t)visibility {
  [super setVisibilityWithInt:visibility];
  ASViewImpl_nativeSetVisibilityWithId_withBoolean_([this$0_ asNativeWidget], visibility != ADView_VISIBLE);
}

- (int32_t)nativeMeasureWidthWithId:(id)uiView {
  return ASViewImpl_nativeMeasureWidthWithId_(uiView);
}

- (int32_t)nativeMeasureHeightWithId:(id)uiView
                             withInt:(int32_t)width {
  return ASViewImpl_nativeMeasureHeightWithId_withInt_(uiView, width);
}

- (void)setState0WithId:(id)value {
  ASViewImpl_setStateWithASIWidget_withInt_withId_(this$0_, 0, value);
}

- (void)setState1WithId:(id)value {
  ASViewImpl_setStateWithASIWidget_withInt_withId_(this$0_, 1, value);
}

- (void)setState2WithId:(id)value {
  ASViewImpl_setStateWithASIWidget_withInt_withId_(this$0_, 2, value);
}

- (void)setState3WithId:(id)value {
  ASViewImpl_setStateWithASIWidget_withInt_withId_(this$0_, 3, value);
}

- (void)setState4WithId:(id)value {
  ASViewImpl_setStateWithASIWidget_withInt_withId_(this$0_, 4, value);
}

- (void)state0 {
  ASViewImpl_stateWithASIWidget_withInt_(this$0_, 0);
}

- (void)state1 {
  ASViewImpl_stateWithASIWidget_withInt_(this$0_, 1);
}

- (void)state2 {
  ASViewImpl_stateWithASIWidget_withInt_(this$0_, 2);
}

- (void)state3 {
  ASViewImpl_stateWithASIWidget_withInt_(this$0_, 3);
}

- (void)state4 {
  ASViewImpl_stateWithASIWidget_withInt_(this$0_, 4);
}

- (void)stateYes {
  ASViewImpl_stateYesWithASIWidget_(this$0_);
}

- (void)stateNo {
  ASViewImpl_stateNoWithASIWidget_(this$0_);
}

- (void)__javaClone:(ASUIProgressViewImpl_UIProgressViewExt *)original {
  [super __javaClone:original];
  JreRelease(this$0_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LASIWidget;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x81, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 5, -1, -1, -1, -1 },
    { NULL, "LASILifeCycleDecorator;", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 15, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 16, 17, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADView;", 0x1, 18, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 21, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 22, 23, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 24, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 25, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 26, 27, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 28, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 29, 30, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 31, 32, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 33, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 34, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 35, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 36, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 37, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getWidget);
  methods[1].selector = @selector(setMaxWidthWithInt:);
  methods[2].selector = @selector(setMaxHeightWithInt:);
  methods[3].selector = @selector(getMaxWidth);
  methods[4].selector = @selector(getMaxHeight);
  methods[5].selector = @selector(initWithASUIProgressViewImpl:);
  methods[6].selector = @selector(onMeasureWithInt:withInt:);
  methods[7].selector = @selector(onLayoutWithBoolean:withInt:withInt:withInt:withInt:);
  methods[8].selector = @selector(executeWithNSString:withNSObjectArray:);
  methods[9].selector = @selector(updateMeasuredDimensionWithInt:withInt:);
  methods[10].selector = @selector(newInstanceWithASIWidget:);
  methods[11].selector = @selector(setAttributeWithASWidgetAttribute:withNSString:withId:);
  methods[12].selector = @selector(getMethods);
  methods[13].selector = @selector(initialized);
  methods[14].selector = @selector(getAttributeWithASWidgetAttribute:);
  methods[15].selector = @selector(drawableStateChanged);
  methods[16].selector = @selector(inflateViewWithNSString:);
  methods[17].selector = @selector(remeasure);
  methods[18].selector = @selector(removeFromParent);
  methods[19].selector = @selector(getLocationOnScreenWithIntArray:);
  methods[20].selector = @selector(getWindowVisibleDisplayFrameWithADRect:);
  methods[21].selector = @selector(offsetTopAndBottomWithInt:);
  methods[22].selector = @selector(offsetLeftAndRightWithInt:);
  methods[23].selector = @selector(setMyAttributeWithNSString:withId:);
  methods[24].selector = @selector(setVisibilityWithInt:);
  methods[25].selector = @selector(nativeMeasureWidthWithId:);
  methods[26].selector = @selector(nativeMeasureHeightWithId:withInt:);
  methods[27].selector = @selector(setState0WithId:);
  methods[28].selector = @selector(setState1WithId:);
  methods[29].selector = @selector(setState2WithId:);
  methods[30].selector = @selector(setState3WithId:);
  methods[31].selector = @selector(setState4WithId:);
  methods[32].selector = @selector(state0);
  methods[33].selector = @selector(state1);
  methods[34].selector = @selector(state2);
  methods[35].selector = @selector(state3);
  methods[36].selector = @selector(state4);
  methods[37].selector = @selector(stateYes);
  methods[38].selector = @selector(stateNo);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASUIProgressViewImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "measureFinished_", "LASMeasureEvent;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "onLayoutEvent_", "LASOnLayoutEvent;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "overlays_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 38, -1 },
    { "mMaxWidth_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mMaxHeight_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "templates_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 39, -1 },
  };
  static const void *ptrTable[] = { "setMaxWidth", "I", "setMaxHeight", "LASUIProgressViewImpl;", "onMeasure", "II", "onLayout", "ZIIII", "execute", "LNSString;[LNSObject;", "updateMeasuredDimension", "newInstance", "LASIWidget;", "setAttribute", "LASWidgetAttribute;LNSString;LNSObject;", "()Ljava/util/List<Ljava/lang/String;>;", "getAttribute", "LASWidgetAttribute;", "inflateView", "LNSString;", "getLocationOnScreen", "[I", "getWindowVisibleDisplayFrame", "LADRect;", "offsetTopAndBottom", "offsetLeftAndRight", "setMyAttribute", "LNSString;LNSObject;", "setVisibility", "nativeMeasureWidth", "LNSObject;", "nativeMeasureHeight", "LNSObject;I", "setState0", "setState1", "setState2", "setState3", "setState4", "Ljava/util/List<Lcom/ashera/widget/IWidget;>;", "Ljava/util/Map<Ljava/lang/String;Lcom/ashera/widget/IWidget;>;" };
  static const J2ObjcClassInfo _ASUIProgressViewImpl_UIProgressViewExt = { "UIProgressViewExt", "com.ashera.layout", ptrTable, methods, fields, 7, 0x1, 39, 7, 3, -1, -1, -1, -1 };
  return &_ASUIProgressViewImpl_UIProgressViewExt;
}

@end

void ASUIProgressViewImpl_UIProgressViewExt_initWithASUIProgressViewImpl_(ASUIProgressViewImpl_UIProgressViewExt *self, ASUIProgressViewImpl *outer$) {
  self->this$0_ = outer$;
  ADProgressBar_initWithASIWidget_(self, outer$);
  self->measureFinished_ = new_ASMeasureEvent_init();
  self->onLayoutEvent_ = new_ASOnLayoutEvent_init();
  self->mMaxWidth_ = -1;
  self->mMaxHeight_ = -1;
}

ASUIProgressViewImpl_UIProgressViewExt *new_ASUIProgressViewImpl_UIProgressViewExt_initWithASUIProgressViewImpl_(ASUIProgressViewImpl *outer$) {
  J2OBJC_NEW_IMPL(ASUIProgressViewImpl_UIProgressViewExt, initWithASUIProgressViewImpl_, outer$)
}

ASUIProgressViewImpl_UIProgressViewExt *create_ASUIProgressViewImpl_UIProgressViewExt_initWithASUIProgressViewImpl_(ASUIProgressViewImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASUIProgressViewImpl_UIProgressViewExt, initWithASUIProgressViewImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASUIProgressViewImpl_UIProgressViewExt)
