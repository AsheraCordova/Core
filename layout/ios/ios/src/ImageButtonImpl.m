//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-ios-widgets\ios_widget_library\src\main\java\com\ashera\layout\ImageButtonImpl.java
//

#include "AbstractEnumToIntConverter.h"
#include "BaseWidget.h"
#include "Bitmap.h"
#include "Context.h"
#include "ConverterFactory.h"
#include "Drawable.h"
#include "HasWidgets.h"
#include "IAttributable.h"
#include "IFragment.h"
#include "IImageDownloader.h"
#include "ILifeCycleDecorator.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "IWidget.h"
#include "IWidgetLifeCycleListener.h"
#include "ImageButtonImpl.h"
#include "ImageDownloaderFactory.h"
#include "ImageView.h"
#include "J2ObjC_source.h"
#include "LayoutNativeVars.h"
#include "MeasureEvent.h"
#include "OnLayoutEvent.h"
#include "Rect.h"
#include "View.h"
#include "ViewImpl.h"
#include "WidgetAttribute.h"
#include "WidgetFactory.h"
#include "java/lang/Boolean.h"
#include "java/lang/Integer.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"

#include "java/lang/Integer.h"
#include "java/lang/Float.h"
#include "java/lang/Boolean.h"
#include <UIKit/UIKit.h>
#include "HasLifeCycleDecorators.h"

#include "ASUIButton.h"

@protocol JavaUtilMap;


#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface ASImageButtonImpl () {
 @public
  ADDrawable *imageFromUrlPlaceHolder_;
  jboolean measureCalled_;
  ADDrawable *imageFromUrlError_;
  ASImageButtonImpl_ImageButtonCommandBuilder *builder_;
  ASImageButtonImpl_ImageButtonBean *bean_;
}

- (void)setWidgetOnNativeClass;

- (id)getScaleType;

- (void)setScaleTypeWithNSString:(NSString *)strValue
                          withId:(id)objValue;

- (id)getSrc;

- (jint)getImageHeightWithId:(id)image;

- (jint)getImageWidthWithId:(id)image;

- (void)setImageFromUrlErrorWithId:(id)objValue;

- (void)setImageFromUrlPlaceHolderWithId:(id)objValue;

- (void)setImageFromUrlWithId:(id)objValue;

- (void)postOnMeasureWithInt:(jint)widthMeasureSpec
                     withInt:(jint)heightMeasureSpec;

- (id)getBaselineAlignBottom;

- (void)setBaseLineWithId:(id)objValue;

- (void)setBaselineAlignBottomWithId:(id)objValue;

- (void)setCropToPaddingWithId:(id)objValue;

- (id)getCropToPadding;

- (id)getMaxWidth;

- (id)getMaxHeight;

- (void)setMaxWidthWithId:(id)objValue;

- (void)setMaxHeightWithId:(id)objValue;

- (id)getAdjustViewBounds;

- (void)setAdjustViewBoundsWithId:(id)objValue;

- (id)getPaddingEnd;

- (id)getPaddingStart;

- (void)setPaddingVerticalWithId:(id)objValue;

- (void)setPaddingHorizontalWithId:(id)objValue;

- (void)setPaddingEndWithId:(id)objValue;

- (void)setPaddingStartWithId:(id)objValue;

- (void)setPaddingWithId:(id)objValue;

- (void)nativeSetPaddingBottomWithInt:(jint)value;

- (void)nativeSetPaddingLeftWithInt:(jint)value;

- (void)nativeSetPaddingRightWithInt:(jint)value;

- (void)nativeSetPaddingTopWithInt:(jint)value;

- (void)nativeCreateWithJavaUtilMap:(id<JavaUtilMap>)params;

- (void)createButton;

- (jboolean)isViewWrapped;

- (void)setTintColorWithId:(id)objValue;

- (void)nativeSetTintColorWithId:(id)objValue;

- (id)getTintColor;

- (id)getImageNative;

- (void)setImageNativeWithId:(id)value;

- (void)setImageNativeSimpleWithId:(id)value;

- (void)setImageNativeWithTemplateWithId:(id)value;

- (void)nativeSetContentModeWithInt:(jint)contentMode;

@end

J2OBJC_FIELD_SETTER(ASImageButtonImpl, imageFromUrlPlaceHolder_, ADDrawable *)
J2OBJC_FIELD_SETTER(ASImageButtonImpl, imageFromUrlError_, ADDrawable *)
J2OBJC_FIELD_SETTER(ASImageButtonImpl, builder_, ASImageButtonImpl_ImageButtonCommandBuilder *)
J2OBJC_FIELD_SETTER(ASImageButtonImpl, bean_, ASImageButtonImpl_ImageButtonBean *)

inline id<JavaUtilMap> ASImageButtonImpl_get_scaleTypeToContentModeMapping(void);
inline id<JavaUtilMap> ASImageButtonImpl_set_scaleTypeToContentModeMapping(id<JavaUtilMap> value);
static id<JavaUtilMap> ASImageButtonImpl_scaleTypeToContentModeMapping;
J2OBJC_STATIC_FIELD_OBJ(ASImageButtonImpl, scaleTypeToContentModeMapping, id<JavaUtilMap>)

__attribute__((unused)) static void ASImageButtonImpl_setWidgetOnNativeClass(ASImageButtonImpl *self);

__attribute__((unused)) static id ASImageButtonImpl_getScaleType(ASImageButtonImpl *self);

__attribute__((unused)) static void ASImageButtonImpl_setScaleTypeWithNSString_withId_(ASImageButtonImpl *self, NSString *strValue, id objValue);

__attribute__((unused)) static id ASImageButtonImpl_getSrc(ASImageButtonImpl *self);

__attribute__((unused)) static jint ASImageButtonImpl_getImageHeightWithId_(ASImageButtonImpl *self, id image);

__attribute__((unused)) static jint ASImageButtonImpl_getImageWidthWithId_(ASImageButtonImpl *self, id image);

__attribute__((unused)) static void ASImageButtonImpl_setImageFromUrlErrorWithId_(ASImageButtonImpl *self, id objValue);

__attribute__((unused)) static void ASImageButtonImpl_setImageFromUrlPlaceHolderWithId_(ASImageButtonImpl *self, id objValue);

__attribute__((unused)) static void ASImageButtonImpl_setImageFromUrlWithId_(ASImageButtonImpl *self, id objValue);

__attribute__((unused)) static void ASImageButtonImpl_postOnMeasureWithInt_withInt_(ASImageButtonImpl *self, jint widthMeasureSpec, jint heightMeasureSpec);

__attribute__((unused)) static id ASImageButtonImpl_getBaselineAlignBottom(ASImageButtonImpl *self);

__attribute__((unused)) static void ASImageButtonImpl_setBaseLineWithId_(ASImageButtonImpl *self, id objValue);

__attribute__((unused)) static void ASImageButtonImpl_setBaselineAlignBottomWithId_(ASImageButtonImpl *self, id objValue);

__attribute__((unused)) static void ASImageButtonImpl_setCropToPaddingWithId_(ASImageButtonImpl *self, id objValue);

__attribute__((unused)) static id ASImageButtonImpl_getCropToPadding(ASImageButtonImpl *self);

__attribute__((unused)) static id ASImageButtonImpl_getMaxWidth(ASImageButtonImpl *self);

__attribute__((unused)) static id ASImageButtonImpl_getMaxHeight(ASImageButtonImpl *self);

__attribute__((unused)) static void ASImageButtonImpl_setMaxWidthWithId_(ASImageButtonImpl *self, id objValue);

__attribute__((unused)) static void ASImageButtonImpl_setMaxHeightWithId_(ASImageButtonImpl *self, id objValue);

__attribute__((unused)) static id ASImageButtonImpl_getAdjustViewBounds(ASImageButtonImpl *self);

__attribute__((unused)) static void ASImageButtonImpl_setAdjustViewBoundsWithId_(ASImageButtonImpl *self, id objValue);

__attribute__((unused)) static id ASImageButtonImpl_getPaddingEnd(ASImageButtonImpl *self);

__attribute__((unused)) static id ASImageButtonImpl_getPaddingStart(ASImageButtonImpl *self);

__attribute__((unused)) static void ASImageButtonImpl_setPaddingVerticalWithId_(ASImageButtonImpl *self, id objValue);

__attribute__((unused)) static void ASImageButtonImpl_setPaddingHorizontalWithId_(ASImageButtonImpl *self, id objValue);

__attribute__((unused)) static void ASImageButtonImpl_setPaddingEndWithId_(ASImageButtonImpl *self, id objValue);

__attribute__((unused)) static void ASImageButtonImpl_setPaddingStartWithId_(ASImageButtonImpl *self, id objValue);

__attribute__((unused)) static void ASImageButtonImpl_setPaddingWithId_(ASImageButtonImpl *self, id objValue);

__attribute__((unused)) static void ASImageButtonImpl_nativeSetPaddingBottomWithInt_(ASImageButtonImpl *self, jint value);

__attribute__((unused)) static void ASImageButtonImpl_nativeSetPaddingLeftWithInt_(ASImageButtonImpl *self, jint value);

__attribute__((unused)) static void ASImageButtonImpl_nativeSetPaddingRightWithInt_(ASImageButtonImpl *self, jint value);

__attribute__((unused)) static void ASImageButtonImpl_nativeSetPaddingTopWithInt_(ASImageButtonImpl *self, jint value);

__attribute__((unused)) static void ASImageButtonImpl_nativeCreateWithJavaUtilMap_(ASImageButtonImpl *self, id<JavaUtilMap> params);

__attribute__((unused)) static void ASImageButtonImpl_createButton(ASImageButtonImpl *self);

__attribute__((unused)) static jboolean ASImageButtonImpl_isViewWrapped(ASImageButtonImpl *self);

__attribute__((unused)) static void ASImageButtonImpl_setTintColorWithId_(ASImageButtonImpl *self, id objValue);

__attribute__((unused)) static void ASImageButtonImpl_nativeSetTintColorWithId_(ASImageButtonImpl *self, id objValue);

__attribute__((unused)) static id ASImageButtonImpl_getTintColor(ASImageButtonImpl *self);

__attribute__((unused)) static id ASImageButtonImpl_getImageNative(ASImageButtonImpl *self);

__attribute__((unused)) static void ASImageButtonImpl_setImageNativeWithId_(ASImageButtonImpl *self, id value);

__attribute__((unused)) static void ASImageButtonImpl_setImageNativeSimpleWithId_(ASImageButtonImpl *self, id value);

__attribute__((unused)) static void ASImageButtonImpl_setImageNativeWithTemplateWithId_(ASImageButtonImpl *self, id value);

__attribute__((unused)) static void ASImageButtonImpl_nativeSetContentModeWithInt_(ASImageButtonImpl *self, jint contentMode);

@interface ASImageButtonImpl_ScaleType () {
 @public
  id<JavaUtilMap> mapping_;
}

@end

J2OBJC_FIELD_SETTER(ASImageButtonImpl_ScaleType, mapping_, id<JavaUtilMap>)

@interface ASImageButtonImpl_ImageButtonExt () {
 @public
  __unsafe_unretained ASImageButtonImpl *this$0_;
  ASMeasureEvent *measureFinished_;
  ASOnLayoutEvent *onLayoutEvent_;
  id<JavaUtilMap> templates_;
}

@end

J2OBJC_FIELD_SETTER(ASImageButtonImpl_ImageButtonExt, measureFinished_, ASMeasureEvent *)
J2OBJC_FIELD_SETTER(ASImageButtonImpl_ImageButtonExt, onLayoutEvent_, ASOnLayoutEvent *)
J2OBJC_FIELD_SETTER(ASImageButtonImpl_ImageButtonExt, templates_, id<JavaUtilMap>)

@interface ASImageButtonImpl_ImageButtonCommandBuilder () {
 @public
  ASImageButtonImpl *this$0_;
}

@end

@interface ASImageButtonImpl_ImageButtonBean () {
 @public
  ASImageButtonImpl *this$0_;
}

@end

J2OBJC_INITIALIZED_DEFN(ASImageButtonImpl)

NSString *ASImageButtonImpl_LOCAL_NAME = @"ImageButton";
NSString *ASImageButtonImpl_GROUP_NAME = @"ImageButton";

@implementation ASImageButtonImpl

@synthesize uiView = uiView_;

- (void)loadAttributesWithNSString:(NSString *)attributeName {
  ASViewImpl_register__WithNSString_(attributeName);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"src"])) withTypeWithNSString:@"drawable"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASConverterFactory_register__WithNSString_withASIConverter_(@"ImageButton.scaleType", new_ASImageButtonImpl_ScaleType_init());
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"scaleType"])) withTypeWithNSString:@"ImageButton.scaleType"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"adjustViewBounds"])) withTypeWithNSString:@"boolean"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"maxHeight"])) withTypeWithNSString:@"dimension"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"maxWidth"])) withTypeWithNSString:@"dimension"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"imageFromUrl"])) withTypeWithNSString:@"resourcestring"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"imageFromUrlPlaceHolder"])) withTypeWithNSString:@"drawable"])) withOrderWithInt:-1]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"imageFromUrlError"])) withTypeWithNSString:@"drawable"])) withOrderWithInt:-1]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"padding"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"paddingBottom"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"paddingRight"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"paddingLeft"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"paddingStart"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"paddingEnd"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"paddingTop"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"paddingHorizontal"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"paddingVertical"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"baseline"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"baselineAlignBottom"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"tint"])) withTypeWithNSString:@"color"])) withOrderWithInt:-10]);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASImageButtonImpl_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithNSString:(NSString *)localname {
  ASImageButtonImpl_initWithNSString_(self, localname);
  return self;
}

- (instancetype)initWithNSString:(NSString *)groupName
                    withNSString:(NSString *)localname {
  ASImageButtonImpl_initWithNSString_withNSString_(self, groupName, localname);
  return self;
}

- (IOSClass *)getViewClass {
  return ASImageButtonImpl_ImageButtonExt_class_();
}

- (id<ASIWidget>)newInstance {
  return new_ASImageButtonImpl_initWithNSString_withNSString_(groupName_, localName_);
}

- (void)createWithASIFragment:(id<ASIFragment>)fragment
              withJavaUtilMap:(id<JavaUtilMap>)params {
  [super createWithASIFragment:fragment withJavaUtilMap:params];
  measurableView_ = new_ASImageButtonImpl_ImageButtonExt_initWithASImageButtonImpl_(self);
  ASImageButtonImpl_nativeCreateWithJavaUtilMap_(self, params);
  ASViewImpl_registerCommandConveterWithASIWidget_(self);
  ASImageButtonImpl_setWidgetOnNativeClass(self);
}

- (void)setWidgetOnNativeClass {
  ASImageButtonImpl_setWidgetOnNativeClass(self);
}

- (void)setAttributeWithASWidgetAttribute:(ASWidgetAttribute *)key
                             withNSString:(NSString *)strValue
                                   withId:(id)objValue
                withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  id nativeWidget = [self asNativeWidget];
  ASViewImpl_setAttributeWithASIWidget_withASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(self, key, strValue, objValue, decorator);
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"src", @"scaleType", @"adjustViewBounds", @"maxHeight", @"maxWidth", @"imageFromUrl", @"imageFromUrlPlaceHolder", @"imageFromUrlError", @"padding", @"paddingBottom", @"paddingRight", @"paddingLeft", @"paddingStart", @"paddingEnd", @"paddingTop", @"paddingHorizontal", @"paddingVertical", @"baseline", @"baselineAlignBottom", @"tint" }, 20)) {
    case 0:
    {
      [self setImageWithId:objValue];
    }
    break;
    case 1:
    {
      ASImageButtonImpl_setScaleTypeWithNSString_withId_(self, strValue, objValue);
    }
    break;
    case 2:
    {
      ASImageButtonImpl_setAdjustViewBoundsWithId_(self, objValue);
    }
    break;
    case 3:
    {
      ASImageButtonImpl_setMaxHeightWithId_(self, objValue);
    }
    break;
    case 4:
    {
      ASImageButtonImpl_setMaxWidthWithId_(self, objValue);
    }
    break;
    case 5:
    {
      ASImageButtonImpl_setImageFromUrlWithId_(self, objValue);
    }
    break;
    case 6:
    {
      ASImageButtonImpl_setImageFromUrlPlaceHolderWithId_(self, objValue);
    }
    break;
    case 7:
    {
      ASImageButtonImpl_setImageFromUrlErrorWithId_(self, objValue);
    }
    break;
    case 8:
    {
      ASImageButtonImpl_setPaddingWithId_(self, objValue);
    }
    break;
    case 9:
    {
      [self setPaddingBottomWithId:objValue];
    }
    break;
    case 10:
    {
      [self setPaddingRightWithId:objValue];
    }
    break;
    case 11:
    {
      [self setPaddingLeftWithId:objValue];
    }
    break;
    case 12:
    {
      ASImageButtonImpl_setPaddingStartWithId_(self, objValue);
    }
    break;
    case 13:
    {
      ASImageButtonImpl_setPaddingEndWithId_(self, objValue);
    }
    break;
    case 14:
    {
      [self setPaddingTopWithId:objValue];
    }
    break;
    case 15:
    {
      ASImageButtonImpl_setPaddingHorizontalWithId_(self, objValue);
    }
    break;
    case 16:
    {
      ASImageButtonImpl_setPaddingVerticalWithId_(self, objValue);
    }
    break;
    case 17:
    {
      ASImageButtonImpl_setBaseLineWithId_(self, objValue);
    }
    break;
    case 18:
    {
      ASImageButtonImpl_setBaselineAlignBottomWithId_(self, objValue);
    }
    break;
    case 19:
    {
      ASImageButtonImpl_setTintColorWithId_(self, objValue);
    }
    break;
    default:
    break;
  }
}

- (id)getAttributeWithASWidgetAttribute:(ASWidgetAttribute *)key
              withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  id nativeWidget = [self asNativeWidget];
  id attributeValue = ASViewImpl_getAttributeWithASIWidget_withId_withASWidgetAttribute_withASILifeCycleDecorator_(self, nativeWidget, key, decorator);
  if (attributeValue != nil) {
    return attributeValue;
  }
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"src", @"scaleType", @"adjustViewBounds", @"maxHeight", @"maxWidth", @"paddingBottom", @"paddingRight", @"paddingLeft", @"paddingStart", @"paddingEnd", @"paddingTop", @"baseline", @"baselineAlignBottom", @"tint" }, 14)) {
    case 0:
    {
      return ASImageButtonImpl_getSrc(self);
    }
    case 1:
    {
      return ASImageButtonImpl_getScaleType(self);
    }
    case 2:
    {
      return ASImageButtonImpl_getAdjustViewBounds(self);
    }
    case 3:
    {
      return ASImageButtonImpl_getMaxHeight(self);
    }
    case 4:
    {
      return ASImageButtonImpl_getMaxWidth(self);
    }
    case 5:
    {
      return [self getPaddingBottom];
    }
    case 6:
    {
      return [self getPaddingRight];
    }
    case 7:
    {
      return [self getPaddingLeft];
    }
    case 8:
    {
      return ASImageButtonImpl_getPaddingStart(self);
    }
    case 9:
    {
      return ASImageButtonImpl_getPaddingEnd(self);
    }
    case 10:
    {
      return [self getPaddingTop];
    }
    case 11:
    {
      return JavaLangInteger_valueOfWithInt_([self getBaseLine]);
    }
    case 12:
    {
      return ASImageButtonImpl_getBaselineAlignBottom(self);
    }
    case 13:
    {
      return ASImageButtonImpl_getTintColor(self);
    }
  }
  return nil;
}

- (id)asWidget {
  return measurableView_;
}

- (id)getImage {
  return ASImageButtonImpl_getImageNative(self);
}

- (IOSIntArray *)getImageDimension {
  id image = [self getImage];
  if (image != nil) {
    return [IOSIntArray newArrayWithInts:(jint[]){ ASImageButtonImpl_getImageWidthWithId_(self, image), ASImageButtonImpl_getImageHeightWithId_(self, image) } count:2];
  }
  return [IOSIntArray newArrayWithInts:(jint[]){ 0, 0 } count:2];
}

- (id)getScaleType {
  return ASImageButtonImpl_getScaleType(self);
}

- (void)setScaleTypeWithNSString:(NSString *)strValue
                          withId:(id)objValue {
  ASImageButtonImpl_setScaleTypeWithNSString_withId_(self, strValue, objValue);
}

- (void)setImageWithId:(id)value {
  [((ADImageView *) nil_chk(measurableView_)) setImageDrawableWithADDrawable:(ADDrawable *) cast_chk(value, [ADDrawable class])];
  ASImageButtonImpl_setImageNativeWithId_(self, [((ADDrawable *) nil_chk(((ADDrawable *) cast_chk(value, [ADDrawable class])))) getDrawable]);
}

- (id)getSrc {
  return ASImageButtonImpl_getSrc(self);
}

- (jint)getImageHeightWithId:(id)image {
  return ASImageButtonImpl_getImageHeightWithId_(self, image);
}

- (jint)getImageWidthWithId:(id)image {
  return ASImageButtonImpl_getImageWidthWithId_(self, image);
}

- (void)setImageFromUrlErrorWithId:(id)objValue {
  ASImageButtonImpl_setImageFromUrlErrorWithId_(self, objValue);
}

- (void)setImageFromUrlPlaceHolderWithId:(id)objValue {
  ASImageButtonImpl_setImageFromUrlPlaceHolderWithId_(self, objValue);
}

- (void)setImageFromUrlWithId:(id)objValue {
  ASImageButtonImpl_setImageFromUrlWithId_(self, objValue);
}

- (void)onBitmapFailedWithId:(id)errorDrawable {
  if (imageFromUrlError_ != nil) {
    [self setImageWithId:imageFromUrlError_];
    if (measureCalled_) {
      [self requestLayout];
      [((id<ASIFragment>) nil_chk(fragment_)) remeasure];
    }
  }
}

- (void)onPrepareLoadWithId:(id)placeHolderDrawable {
  if (placeHolderDrawable == nil) {
    [self setImageWithId:new_ADDrawable_init()];
  }
  else {
    [self setImageWithId:placeHolderDrawable];
  }
}

- (void)onBitmapLoadedWithId:(id)bitmap {
  id image = [((id<ADBitmap>) nil_chk(((id<ADBitmap>) cast_check(bitmap, ADBitmap_class_())))) getImage];
  ADDrawable *drawable = new_ADDrawable_init();
  [drawable setDrawableWithId:image];
  [drawable setMinimumHeightWithInt:ASImageButtonImpl_getImageHeightWithId_(self, image)];
  [drawable setMinimumWidthWithInt:ASImageButtonImpl_getImageWidthWithId_(self, image)];
  [self setImageWithId:drawable];
  if (measureCalled_) {
    [self requestLayout];
    [((id<ASIFragment>) nil_chk(fragment_)) remeasure];
  }
}

- (void)postOnMeasureWithInt:(jint)widthMeasureSpec
                     withInt:(jint)heightMeasureSpec {
  ASImageButtonImpl_postOnMeasureWithInt_withInt_(self, widthMeasureSpec, heightMeasureSpec);
}

- (id)getBaselineAlignBottom {
  return ASImageButtonImpl_getBaselineAlignBottom(self);
}

- (jint)getBaseLine {
  return [((ADImageView *) nil_chk(measurableView_)) getBaseline];
}

- (void)setBaseLineWithId:(id)objValue {
  ASImageButtonImpl_setBaseLineWithId_(self, objValue);
}

- (void)setBaselineAlignBottomWithId:(id)objValue {
  ASImageButtonImpl_setBaselineAlignBottomWithId_(self, objValue);
}

- (void)setCropToPaddingWithId:(id)objValue {
  ASImageButtonImpl_setCropToPaddingWithId_(self, objValue);
}

- (id)getCropToPadding {
  return ASImageButtonImpl_getCropToPadding(self);
}

- (id)getMaxWidth {
  return ASImageButtonImpl_getMaxWidth(self);
}

- (id)getMaxHeight {
  return ASImageButtonImpl_getMaxHeight(self);
}

- (void)setMaxWidthWithId:(id)objValue {
  ASImageButtonImpl_setMaxWidthWithId_(self, objValue);
}

- (void)setMaxHeightWithId:(id)objValue {
  ASImageButtonImpl_setMaxHeightWithId_(self, objValue);
}

- (id)getAdjustViewBounds {
  return ASImageButtonImpl_getAdjustViewBounds(self);
}

- (void)setAdjustViewBoundsWithId:(id)objValue {
  ASImageButtonImpl_setAdjustViewBoundsWithId_(self, objValue);
}

- (void)drawableStateChanged {
  [super drawableStateChanged];
  ADDrawable *imageDrawable = [((ADImageView *) nil_chk(measurableView_)) getImageDrawable];
  if (imageDrawable != nil && [imageDrawable isStateful] && [imageDrawable setStateWithIntArray:[((ADImageView *) nil_chk(measurableView_)) getDrawableState]]) {
    [self setImageWithId:imageDrawable];
  }
}

- (id)getPaddingLeft {
  return ASViewImpl_getPaddingLeftWithASIWidget_withADView_(self, measurableView_);
}

- (void)setPaddingLeftWithId:(id)paddingLeft {
  ASViewImpl_setPaddingLeftWithId_withADView_(paddingLeft, measurableView_);
  ASImageButtonImpl_nativeSetPaddingLeftWithInt_(self, [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(paddingLeft, [JavaLangInteger class]))) intValue]);
}

- (id)getPaddingRight {
  return ASViewImpl_getPaddingRightWithASIWidget_withADView_(self, measurableView_);
}

- (void)setPaddingRightWithId:(id)paddingRight {
  ASViewImpl_setPaddingRightWithId_withADView_(paddingRight, measurableView_);
  ASImageButtonImpl_nativeSetPaddingRightWithInt_(self, [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(paddingRight, [JavaLangInteger class]))) intValue]);
}

- (id)getPaddingTop {
  return ASViewImpl_getPaddingTopWithASIWidget_withADView_(self, measurableView_);
}

- (void)setPaddingTopWithId:(id)paddingTop {
  ASViewImpl_setPaddingTopWithId_withADView_(paddingTop, measurableView_);
  ASImageButtonImpl_nativeSetPaddingTopWithInt_(self, [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(paddingTop, [JavaLangInteger class]))) intValue]);
}

- (id)getPaddingBottom {
  return ASViewImpl_getPaddingBottomWithASIWidget_withADView_(self, measurableView_);
}

- (id)getPaddingEnd {
  return ASImageButtonImpl_getPaddingEnd(self);
}

- (id)getPaddingStart {
  return ASImageButtonImpl_getPaddingStart(self);
}

- (void)setPaddingBottomWithId:(id)paddingBottom {
  ASViewImpl_setPaddingBottomWithId_withADView_(paddingBottom, measurableView_);
  ASImageButtonImpl_nativeSetPaddingBottomWithInt_(self, [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(paddingBottom, [JavaLangInteger class]))) intValue]);
}

- (void)setPaddingVerticalWithId:(id)objValue {
  ASImageButtonImpl_setPaddingVerticalWithId_(self, objValue);
}

- (void)setPaddingHorizontalWithId:(id)objValue {
  ASImageButtonImpl_setPaddingHorizontalWithId_(self, objValue);
}

- (void)setPaddingEndWithId:(id)objValue {
  ASImageButtonImpl_setPaddingEndWithId_(self, objValue);
}

- (void)setPaddingStartWithId:(id)objValue {
  ASImageButtonImpl_setPaddingStartWithId_(self, objValue);
}

- (void)setPaddingWithId:(id)objValue {
  ASImageButtonImpl_setPaddingWithId_(self, objValue);
}

- (void)updatePadding {
  [self setPaddingLeftWithId:JavaLangInteger_valueOfWithInt_([((ADImageView *) nil_chk(measurableView_)) getPaddingLeft])];
  [self setPaddingRightWithId:JavaLangInteger_valueOfWithInt_([((ADImageView *) nil_chk(measurableView_)) getPaddingRight])];
  [self setPaddingTopWithId:JavaLangInteger_valueOfWithInt_([((ADImageView *) nil_chk(measurableView_)) getPaddingTop])];
  [self setPaddingBottomWithId:JavaLangInteger_valueOfWithInt_([((ADImageView *) nil_chk(measurableView_)) getPaddingBottom])];
}

- (void)nativeSetPaddingBottomWithInt:(jint)value {
  ASImageButtonImpl_nativeSetPaddingBottomWithInt_(self, value);
}

- (void)nativeSetPaddingLeftWithInt:(jint)value {
  ASImageButtonImpl_nativeSetPaddingLeftWithInt_(self, value);
}

- (void)nativeSetPaddingRightWithInt:(jint)value {
  ASImageButtonImpl_nativeSetPaddingRightWithInt_(self, value);
}

- (void)nativeSetPaddingTopWithInt:(jint)value {
  ASImageButtonImpl_nativeSetPaddingTopWithInt_(self, value);
}

- (jboolean)checkIosVersionWithNSString:(NSString *)v {
  return ([[[UIDevice currentDevice] systemVersion] compare:v options:NSNumericSearch] == NSOrderedDescending);
}

- (void)setIdWithNSString:(NSString *)id_ {
  if (id_ != nil && ![id_ isEqual:@""]) {
    [super setIdWithNSString:id_];
    [((ADImageView *) nil_chk(measurableView_)) setIdWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([self quickConvertWithId:id_ withNSString:@"id"], [JavaLangInteger class]))) intValue]];
  }
}

- (void)setVisibleWithBoolean:(jboolean)b {
  [((ADView *) nil_chk(((ADView *) cast_chk([self asWidget], [ADView class])))) setVisibilityWithInt:b ? ADView_VISIBLE : ADView_GONE];
}

- (void)requestLayout {
  if ([self isInitialised]) {
    ASViewImpl_requestLayoutWithASIWidget_withId_(self, [self asNativeWidget]);
  }
}

- (void)invalidate {
  if ([self isInitialised]) {
    ASViewImpl_invalidateWithASIWidget_withId_(self, [self asNativeWidget]);
  }
}

- (id)getPluginWithNSString:(NSString *)plugin {
  return [((id<ASIAttributable>) nil_chk(ASWidgetFactory_getAttributableWithNSString_(plugin))) newInstanceWithASIWidget:self];
}

- (ASImageButtonImpl_ImageButtonBean *)getBean {
  if (bean_ == nil) {
    bean_ = new_ASImageButtonImpl_ImageButtonBean_initWithASImageButtonImpl_(self);
  }
  return bean_;
}

- (ASImageButtonImpl_ImageButtonCommandBuilder *)getBuilder {
  if (builder_ == nil) {
    builder_ = new_ASImageButtonImpl_ImageButtonCommandBuilder_initWithASImageButtonImpl_(self);
  }
  return builder_;
}

- (void)nativeCreateWithJavaUtilMap:(id<JavaUtilMap>)params {
  ASImageButtonImpl_nativeCreateWithJavaUtilMap_(self, params);
}

- (void)createButton {
  ASImageButtonImpl_createButton(self);
}

- (id)asNativeWidget {
  return uiView_;
}

- (jboolean)isViewWrapped {
  return ASImageButtonImpl_isViewWrapped(self);
}

- (void)setTintColorWithId:(id)objValue {
  ASImageButtonImpl_setTintColorWithId_(self, objValue);
}

- (void)nativeSetTintColorWithId:(id)objValue {
  ASImageButtonImpl_nativeSetTintColorWithId_(self, objValue);
}

- (id)getTintColor {
  return ASImageButtonImpl_getTintColor(self);
}

- (id)getImageNative {
  return ASImageButtonImpl_getImageNative(self);
}

- (void)setImageNativeWithId:(id)value {
  ASImageButtonImpl_setImageNativeWithId_(self, value);
}

- (void)setImageNativeSimpleWithId:(id)value {
  ASImageButtonImpl_setImageNativeSimpleWithId_(self, value);
}

- (void)setImageNativeWithTemplateWithId:(id)value {
  ASImageButtonImpl_setImageNativeWithTemplateWithId_(self, value);
}

- (void)nativeSetContentModeWithInt:(jint)contentMode {
  ASImageButtonImpl_nativeSetContentModeWithInt_(self, contentMode);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "LIOSClass;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASIWidget;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, 5, -1, -1 },
    { NULL, "V", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 13, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x102, 14, 13, -1, -1, -1, -1 },
    { NULL, "I", 0x102, 15, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 16, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 17, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 18, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 21, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 22, 23, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 24, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 25, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 26, 13, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 27, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 28, 13, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 29, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 30, 13, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 31, 13, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 32, 13, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 33, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 34, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 35, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 36, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 37, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 38, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 39, 40, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 41, 40, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 42, 40, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 43, 40, -1, -1, -1, -1 },
    { NULL, "Z", 0x101, 44, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 45, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 46, 47, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 48, 1, -1, -1, -1, -1 },
    { NULL, "LASImageButtonImpl_ImageButtonBean;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASImageButtonImpl_ImageButtonCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 49, 50, -1, 51, -1, -1 },
    { NULL, "V", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 52, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 53, 13, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 54, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 55, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 56, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 57, 40, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(loadAttributesWithNSString:);
  methods[1].selector = @selector(init);
  methods[2].selector = @selector(initWithNSString:);
  methods[3].selector = @selector(initWithNSString:withNSString:);
  methods[4].selector = @selector(getViewClass);
  methods[5].selector = @selector(newInstance);
  methods[6].selector = @selector(createWithASIFragment:withJavaUtilMap:);
  methods[7].selector = @selector(setWidgetOnNativeClass);
  methods[8].selector = @selector(setAttributeWithASWidgetAttribute:withNSString:withId:withASILifeCycleDecorator:);
  methods[9].selector = @selector(getAttributeWithASWidgetAttribute:withASILifeCycleDecorator:);
  methods[10].selector = @selector(asWidget);
  methods[11].selector = @selector(getImage);
  methods[12].selector = @selector(getImageDimension);
  methods[13].selector = @selector(getScaleType);
  methods[14].selector = @selector(setScaleTypeWithNSString:withId:);
  methods[15].selector = @selector(setImageWithId:);
  methods[16].selector = @selector(getSrc);
  methods[17].selector = @selector(getImageHeightWithId:);
  methods[18].selector = @selector(getImageWidthWithId:);
  methods[19].selector = @selector(setImageFromUrlErrorWithId:);
  methods[20].selector = @selector(setImageFromUrlPlaceHolderWithId:);
  methods[21].selector = @selector(setImageFromUrlWithId:);
  methods[22].selector = @selector(onBitmapFailedWithId:);
  methods[23].selector = @selector(onPrepareLoadWithId:);
  methods[24].selector = @selector(onBitmapLoadedWithId:);
  methods[25].selector = @selector(postOnMeasureWithInt:withInt:);
  methods[26].selector = @selector(getBaselineAlignBottom);
  methods[27].selector = @selector(getBaseLine);
  methods[28].selector = @selector(setBaseLineWithId:);
  methods[29].selector = @selector(setBaselineAlignBottomWithId:);
  methods[30].selector = @selector(setCropToPaddingWithId:);
  methods[31].selector = @selector(getCropToPadding);
  methods[32].selector = @selector(getMaxWidth);
  methods[33].selector = @selector(getMaxHeight);
  methods[34].selector = @selector(setMaxWidthWithId:);
  methods[35].selector = @selector(setMaxHeightWithId:);
  methods[36].selector = @selector(getAdjustViewBounds);
  methods[37].selector = @selector(setAdjustViewBoundsWithId:);
  methods[38].selector = @selector(drawableStateChanged);
  methods[39].selector = @selector(getPaddingLeft);
  methods[40].selector = @selector(setPaddingLeftWithId:);
  methods[41].selector = @selector(getPaddingRight);
  methods[42].selector = @selector(setPaddingRightWithId:);
  methods[43].selector = @selector(getPaddingTop);
  methods[44].selector = @selector(setPaddingTopWithId:);
  methods[45].selector = @selector(getPaddingBottom);
  methods[46].selector = @selector(getPaddingEnd);
  methods[47].selector = @selector(getPaddingStart);
  methods[48].selector = @selector(setPaddingBottomWithId:);
  methods[49].selector = @selector(setPaddingVerticalWithId:);
  methods[50].selector = @selector(setPaddingHorizontalWithId:);
  methods[51].selector = @selector(setPaddingEndWithId:);
  methods[52].selector = @selector(setPaddingStartWithId:);
  methods[53].selector = @selector(setPaddingWithId:);
  methods[54].selector = @selector(updatePadding);
  methods[55].selector = @selector(nativeSetPaddingBottomWithInt:);
  methods[56].selector = @selector(nativeSetPaddingLeftWithInt:);
  methods[57].selector = @selector(nativeSetPaddingRightWithInt:);
  methods[58].selector = @selector(nativeSetPaddingTopWithInt:);
  methods[59].selector = @selector(checkIosVersionWithNSString:);
  methods[60].selector = @selector(setIdWithNSString:);
  methods[61].selector = @selector(setVisibleWithBoolean:);
  methods[62].selector = @selector(requestLayout);
  methods[63].selector = @selector(invalidate);
  methods[64].selector = @selector(getPluginWithNSString:);
  methods[65].selector = @selector(getBean);
  methods[66].selector = @selector(getBuilder);
  methods[67].selector = @selector(nativeCreateWithJavaUtilMap:);
  methods[68].selector = @selector(createButton);
  methods[69].selector = @selector(asNativeWidget);
  methods[70].selector = @selector(isViewWrapped);
  methods[71].selector = @selector(setTintColorWithId:);
  methods[72].selector = @selector(nativeSetTintColorWithId:);
  methods[73].selector = @selector(getTintColor);
  methods[74].selector = @selector(getImageNative);
  methods[75].selector = @selector(setImageNativeWithId:);
  methods[76].selector = @selector(setImageNativeSimpleWithId:);
  methods[77].selector = @selector(setImageNativeWithTemplateWithId:);
  methods[78].selector = @selector(nativeSetContentModeWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "LOCAL_NAME", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 58, -1, -1 },
    { "GROUP_NAME", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 59, -1, -1 },
    { "uiView_", "LNSObject;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "measurableView_", "LADImageView;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "scaleTypeToContentModeMapping", "LJavaUtilMap;", .constantValue.asLong = 0, 0xa, -1, 60, 61, -1 },
    { "imageFromUrlPlaceHolder_", "LADDrawable;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "measureCalled_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "imageFromUrlError_", "LADDrawable;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "builder_", "LASImageButtonImpl_ImageButtonCommandBuilder;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "bean_", "LASImageButtonImpl_ImageButtonBean;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "loadAttributes", "LNSString;", "LNSString;LNSString;", "create", "LASIFragment;LJavaUtilMap;", "(Lcom/ashera/core/IFragment;Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;)V", "setAttribute", "LASWidgetAttribute;LNSString;LNSObject;LASILifeCycleDecorator;", "getAttribute", "LASWidgetAttribute;LASILifeCycleDecorator;", "setScaleType", "LNSString;LNSObject;", "setImage", "LNSObject;", "getImageHeight", "getImageWidth", "setImageFromUrlError", "setImageFromUrlPlaceHolder", "setImageFromUrl", "onBitmapFailed", "onPrepareLoad", "onBitmapLoaded", "postOnMeasure", "II", "setBaseLine", "setBaselineAlignBottom", "setCropToPadding", "setMaxWidth", "setMaxHeight", "setAdjustViewBounds", "setPaddingLeft", "setPaddingRight", "setPaddingTop", "setPaddingBottom", "setPaddingVertical", "setPaddingHorizontal", "setPaddingEnd", "setPaddingStart", "setPadding", "nativeSetPaddingBottom", "I", "nativeSetPaddingLeft", "nativeSetPaddingRight", "nativeSetPaddingTop", "checkIosVersion", "setId", "setVisible", "Z", "getPlugin", "nativeCreate", "LJavaUtilMap;", "(Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;)V", "setTintColor", "nativeSetTintColor", "setImageNative", "setImageNativeSimple", "setImageNativeWithTemplate", "nativeSetContentMode", &ASImageButtonImpl_LOCAL_NAME, &ASImageButtonImpl_GROUP_NAME, &ASImageButtonImpl_scaleTypeToContentModeMapping, "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "LASImageButtonImpl_ScaleType;LASImageButtonImpl_ImageButtonExt;LASImageButtonImpl_ImageButtonCommandBuilder;LASImageButtonImpl_ImageButtonBean;" };
  static const J2ObjcClassInfo _ASImageButtonImpl = { "ImageButtonImpl", "com.ashera.layout", ptrTable, methods, fields, 7, 0x1, 79, 10, -1, 62, -1, -1, -1 };
  return &_ASImageButtonImpl;
}

+ (void)initialize {
  if (self == [ASImageButtonImpl class]) {
    ASImageButtonImpl_scaleTypeToContentModeMapping = new_JavaUtilHashMap_init();
    {
      (void) [ASImageButtonImpl_scaleTypeToContentModeMapping putWithId:@"center" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIViewContentModeCenter))];
      (void) [((id<JavaUtilMap>) nil_chk(ASImageButtonImpl_scaleTypeToContentModeMapping)) putWithId:@"centerCrop" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIViewContentModeScaleAspectFill))];
      (void) [((id<JavaUtilMap>) nil_chk(ASImageButtonImpl_scaleTypeToContentModeMapping)) putWithId:@"centerInside" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIViewContentModeScaleAspectFit))];
      (void) [((id<JavaUtilMap>) nil_chk(ASImageButtonImpl_scaleTypeToContentModeMapping)) putWithId:@"fitXY" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIViewContentModeScaleToFill))];
      (void) [((id<JavaUtilMap>) nil_chk(ASImageButtonImpl_scaleTypeToContentModeMapping)) putWithId:@"fitCenter" withId:JavaLangInteger_valueOfWithInt_(-1)];
      (void) [((id<JavaUtilMap>) nil_chk(ASImageButtonImpl_scaleTypeToContentModeMapping)) putWithId:@"fitStart" withId:JavaLangInteger_valueOfWithInt_(-2)];
      (void) [((id<JavaUtilMap>) nil_chk(ASImageButtonImpl_scaleTypeToContentModeMapping)) putWithId:@"fitEnd" withId:JavaLangInteger_valueOfWithInt_(-3)];
    }
    J2OBJC_SET_INITIALIZED(ASImageButtonImpl)
  }
}

@end

void ASImageButtonImpl_init(ASImageButtonImpl *self) {
  ASBaseWidget_initWithNSString_withNSString_(self, ASImageButtonImpl_GROUP_NAME, ASImageButtonImpl_LOCAL_NAME);
  self->measureCalled_ = false;
}

ASImageButtonImpl *new_ASImageButtonImpl_init() {
  J2OBJC_NEW_IMPL(ASImageButtonImpl, init)
}

ASImageButtonImpl *create_ASImageButtonImpl_init() {
  J2OBJC_CREATE_IMPL(ASImageButtonImpl, init)
}

void ASImageButtonImpl_initWithNSString_(ASImageButtonImpl *self, NSString *localname) {
  ASBaseWidget_initWithNSString_withNSString_(self, ASImageButtonImpl_GROUP_NAME, localname);
  self->measureCalled_ = false;
}

ASImageButtonImpl *new_ASImageButtonImpl_initWithNSString_(NSString *localname) {
  J2OBJC_NEW_IMPL(ASImageButtonImpl, initWithNSString_, localname)
}

ASImageButtonImpl *create_ASImageButtonImpl_initWithNSString_(NSString *localname) {
  J2OBJC_CREATE_IMPL(ASImageButtonImpl, initWithNSString_, localname)
}

void ASImageButtonImpl_initWithNSString_withNSString_(ASImageButtonImpl *self, NSString *groupName, NSString *localname) {
  ASBaseWidget_initWithNSString_withNSString_(self, groupName, localname);
  self->measureCalled_ = false;
}

ASImageButtonImpl *new_ASImageButtonImpl_initWithNSString_withNSString_(NSString *groupName, NSString *localname) {
  J2OBJC_NEW_IMPL(ASImageButtonImpl, initWithNSString_withNSString_, groupName, localname)
}

ASImageButtonImpl *create_ASImageButtonImpl_initWithNSString_withNSString_(NSString *groupName, NSString *localname) {
  J2OBJC_CREATE_IMPL(ASImageButtonImpl, initWithNSString_withNSString_, groupName, localname)
}

void ASImageButtonImpl_setWidgetOnNativeClass(ASImageButtonImpl *self) {
  ((ASUIButton*) self.uiView).widget = self;
}

id ASImageButtonImpl_getScaleType(ASImageButtonImpl *self) {
  return JavaLangInteger_valueOfWithInt_([((ADImageView *) nil_chk(self->measurableView_)) getScaleTypeInt]);
}

void ASImageButtonImpl_setScaleTypeWithNSString_withId_(ASImageButtonImpl *self, NSString *strValue, id objValue) {
  [((ADImageView *) nil_chk(self->measurableView_)) setScaleTypeWithNSString:strValue withInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
  if (ASImageButtonImpl_isViewWrapped(self)) {
    if ([@"fitXY" isEqual:strValue]) {
      ASImageButtonImpl_nativeSetContentModeWithInt_(self, [((JavaLangInteger *) nil_chk([((id<JavaUtilMap>) nil_chk(ASImageButtonImpl_scaleTypeToContentModeMapping)) getWithId:strValue])) intValue]);
    }
    else {
      ASImageButtonImpl_nativeSetContentModeWithInt_(self, [((JavaLangInteger *) nil_chk([((id<JavaUtilMap>) nil_chk(ASImageButtonImpl_scaleTypeToContentModeMapping)) getWithId:@"centerInside"])) intValue]);
    }
  }
  else {
    JavaLangInteger *contentMode = [((id<JavaUtilMap>) nil_chk(ASImageButtonImpl_scaleTypeToContentModeMapping)) getWithId:strValue];
    if (contentMode != nil) {
      ASImageButtonImpl_nativeSetContentModeWithInt_(self, [contentMode intValue]);
    }
  }
}

id ASImageButtonImpl_getSrc(ASImageButtonImpl *self) {
  return [((ADImageView *) nil_chk(self->measurableView_)) getImageDrawable];
}

jint ASImageButtonImpl_getImageHeightWithId_(ASImageButtonImpl *self, id image) {
  return ((UIImage*) image).size.height;
}

jint ASImageButtonImpl_getImageWidthWithId_(ASImageButtonImpl *self, id image) {
  return ((UIImage*) image).size.width;
}

void ASImageButtonImpl_setImageFromUrlErrorWithId_(ASImageButtonImpl *self, id objValue) {
  self->imageFromUrlError_ = (ADDrawable *) cast_chk(objValue, [ADDrawable class]);
}

void ASImageButtonImpl_setImageFromUrlPlaceHolderWithId_(ASImageButtonImpl *self, id objValue) {
  self->imageFromUrlPlaceHolder_ = (ADDrawable *) cast_chk(objValue, [ADDrawable class]);
}

void ASImageButtonImpl_setImageFromUrlWithId_(ASImageButtonImpl *self, id objValue) {
  self->measureCalled_ = false;
  [((id<ASIImageDownloader>) nil_chk(ASImageDownloaderFactory_get())) downloadWithId:new_ADContext_init() withNSString:(NSString *) cast_chk(objValue, [NSString class]) withId:self->imageFromUrlPlaceHolder_ withId:self->imageFromUrlError_ withASITarget:self];
}

void ASImageButtonImpl_postOnMeasureWithInt_withInt_(ASImageButtonImpl *self, jint widthMeasureSpec, jint heightMeasureSpec) {
  self->measureCalled_ = true;
}

id ASImageButtonImpl_getBaselineAlignBottom(ASImageButtonImpl *self) {
  return JavaLangBoolean_valueOfWithBoolean_([((ADImageView *) nil_chk(self->measurableView_)) getBaselineAlignBottom]);
}

void ASImageButtonImpl_setBaseLineWithId_(ASImageButtonImpl *self, id objValue) {
  [((ADImageView *) nil_chk(self->measurableView_)) setBaselineWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
}

void ASImageButtonImpl_setBaselineAlignBottomWithId_(ASImageButtonImpl *self, id objValue) {
  [((ADImageView *) nil_chk(self->measurableView_)) setBaselineAlignBottomWithBoolean:[((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]))) booleanValue]];
}

void ASImageButtonImpl_setCropToPaddingWithId_(ASImageButtonImpl *self, id objValue) {
  [((ADImageView *) nil_chk(self->measurableView_)) setCropToPaddingWithBoolean:[((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]))) booleanValue]];
}

id ASImageButtonImpl_getCropToPadding(ASImageButtonImpl *self) {
  return JavaLangBoolean_valueOfWithBoolean_([((ADImageView *) nil_chk(self->measurableView_)) getCropToPadding]);
}

id ASImageButtonImpl_getMaxWidth(ASImageButtonImpl *self) {
  return JavaLangInteger_valueOfWithInt_([((ADImageView *) nil_chk(self->measurableView_)) getMaxWidth]);
}

id ASImageButtonImpl_getMaxHeight(ASImageButtonImpl *self) {
  return JavaLangInteger_valueOfWithInt_([((ADImageView *) nil_chk(self->measurableView_)) getMaxHeight]);
}

void ASImageButtonImpl_setMaxWidthWithId_(ASImageButtonImpl *self, id objValue) {
  [((ADImageView *) nil_chk(self->measurableView_)) setMaxWidthWithInt:[((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class])))) intValue]];
}

void ASImageButtonImpl_setMaxHeightWithId_(ASImageButtonImpl *self, id objValue) {
  [((ADImageView *) nil_chk(self->measurableView_)) setMaxHeightWithInt:[((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class])))) intValue]];
}

id ASImageButtonImpl_getAdjustViewBounds(ASImageButtonImpl *self) {
  return JavaLangBoolean_valueOfWithBoolean_([((ADImageView *) nil_chk(self->measurableView_)) getAdjustViewBounds]);
}

void ASImageButtonImpl_setAdjustViewBoundsWithId_(ASImageButtonImpl *self, id objValue) {
  [((ADImageView *) nil_chk(self->measurableView_)) setAdjustViewBoundsWithBoolean:[((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]))) booleanValue]];
}

id ASImageButtonImpl_getPaddingEnd(ASImageButtonImpl *self) {
  return [self getPaddingRight];
}

id ASImageButtonImpl_getPaddingStart(ASImageButtonImpl *self) {
  return [self getPaddingLeft];
}

void ASImageButtonImpl_setPaddingVerticalWithId_(ASImageButtonImpl *self, id objValue) {
  [self setPaddingTopWithId:objValue];
  [self setPaddingBottomWithId:objValue];
}

void ASImageButtonImpl_setPaddingHorizontalWithId_(ASImageButtonImpl *self, id objValue) {
  [self setPaddingLeftWithId:objValue];
  [self setPaddingRightWithId:objValue];
}

void ASImageButtonImpl_setPaddingEndWithId_(ASImageButtonImpl *self, id objValue) {
  [self setPaddingRightWithId:objValue];
}

void ASImageButtonImpl_setPaddingStartWithId_(ASImageButtonImpl *self, id objValue) {
  [self setPaddingLeftWithId:objValue];
}

void ASImageButtonImpl_setPaddingWithId_(ASImageButtonImpl *self, id objValue) {
  ASImageButtonImpl_setPaddingVerticalWithId_(self, objValue);
  ASImageButtonImpl_setPaddingHorizontalWithId_(self, objValue);
}

void ASImageButtonImpl_nativeSetPaddingBottomWithInt_(ASImageButtonImpl *self, jint value) {
  ASUIButton* label = ((ASUIButton*) self.uiView);
  UIEdgeInsets edgeInsets = label.imageEdgeInsets;
  [label setImageEdgeInsets:UIEdgeInsetsMake(edgeInsets.top, edgeInsets.left, value, edgeInsets.right)];
}

void ASImageButtonImpl_nativeSetPaddingLeftWithInt_(ASImageButtonImpl *self, jint value) {
  ASUIButton* label = ((ASUIButton*) self.uiView);
  UIEdgeInsets edgeInsets = label.imageEdgeInsets;
  [label setImageEdgeInsets:UIEdgeInsetsMake(edgeInsets.top, value, edgeInsets.bottom, edgeInsets.right)];
}

void ASImageButtonImpl_nativeSetPaddingRightWithInt_(ASImageButtonImpl *self, jint value) {
  ASUIButton* label = ((ASUIButton*) self.uiView);
  UIEdgeInsets edgeInsets = label.imageEdgeInsets;
  [label setImageEdgeInsets:UIEdgeInsetsMake(edgeInsets.top, edgeInsets.left, edgeInsets.bottom, value)];
}

void ASImageButtonImpl_nativeSetPaddingTopWithInt_(ASImageButtonImpl *self, jint value) {
  ASUIButton* label = ((ASUIButton*) self.uiView);
  UIEdgeInsets edgeInsets = label.imageEdgeInsets;
  [label setImageEdgeInsets:UIEdgeInsetsMake(value, edgeInsets.left, edgeInsets.bottom, edgeInsets.right)];
}

void ASImageButtonImpl_nativeCreateWithJavaUtilMap_(ASImageButtonImpl *self, id<JavaUtilMap> params) {
  ASImageButtonImpl_createButton(self);
}

void ASImageButtonImpl_createButton(ASImageButtonImpl *self) {
  self.uiView = [ASUIButton buttonWithType:UIButtonTypeCustom];
  ((ASUIButton*)self.uiView).contentEdgeInsets = UIEdgeInsetsMake(0, 0, 0, 0);
  ((ASUIButton*)self.uiView).titleEdgeInsets = UIEdgeInsetsMake(0, 0, 0, 0);
  ((ASUIButton*)self.uiView).clipsToBounds = YES;
  [((ASUIButton*)self.uiView) setTitleColor:[UIColor blackColor] forState:UIControlStateNormal];
  ((ASUIButton*)self.uiView).contentHorizontalAlignment = UIControlContentHorizontalAlignmentFill;
  ((ASUIButton*)self.uiView).contentVerticalAlignment = UIControlContentVerticalAlignmentFill;
  ((ASUIButton*)self.uiView).imageView.contentMode = UIViewContentModeScaleAspectFit;
}

jboolean ASImageButtonImpl_isViewWrapped(ASImageButtonImpl *self) {
  return false;
}

void ASImageButtonImpl_setTintColorWithId_(ASImageButtonImpl *self, id objValue) {
  ASImageButtonImpl_nativeSetTintColorWithId_(self, objValue);
}

void ASImageButtonImpl_nativeSetTintColorWithId_(ASImageButtonImpl *self, id objValue) {
  [((ASUIButton*)self->uiView_).imageView setTintColor:(UIColor*)objValue];
}

id ASImageButtonImpl_getTintColor(ASImageButtonImpl *self) {
  return ((ASUIButton*)self->uiView_).imageView.tintColor;
}

id ASImageButtonImpl_getImageNative(ASImageButtonImpl *self) {
  return [((ASUIButton*)self->uiView_) imageForState:UIControlStateNormal];
}

void ASImageButtonImpl_setImageNativeWithId_(ASImageButtonImpl *self, id value) {
  if ([self hasFeatureWithNSString:@"enableFeatures" withNSString:@"UIImageRenderingModeAlwaysTemplate"]) {
    ASImageButtonImpl_setImageNativeWithTemplateWithId_(self, value);
  }
  else {
    ASImageButtonImpl_setImageNativeSimpleWithId_(self, value);
  }
}

void ASImageButtonImpl_setImageNativeSimpleWithId_(ASImageButtonImpl *self, id value) {
  if ([value isKindOfClass:[UIImage class]]) {
    [((ASUIButton*) self->uiView_) setImage:(UIImage*) value forState:UIControlStateNormal];
    [((ASUIButton*) self->uiView_) setBackgroundColor:[UIColor clearColor]];
  } else if ([value isKindOfClass:[UIColor class]]) {
    [((ASUIButton*) self->uiView_) setBackgroundColor:((UIColor*) value)];
    [((ASUIButton*) self->uiView_) setImage:nil forState:UIControlStateNormal];
  }
}

void ASImageButtonImpl_setImageNativeWithTemplateWithId_(ASImageButtonImpl *self, id value) {
  [((ASUIButton*) self->uiView_) setImage:[(UIImage*) value imageWithRenderingMode:UIImageRenderingModeAlwaysTemplate] forState:UIControlStateNormal];
}

void ASImageButtonImpl_nativeSetContentModeWithInt_(ASImageButtonImpl *self, jint contentMode) {
  [((ASUIButton*)self->uiView_).imageView setContentMode:contentMode];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASImageButtonImpl)

@implementation ASImageButtonImpl_ScaleType

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASImageButtonImpl_ScaleType_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilMap>)getMapping {
  return mapping_;
}

- (JavaLangInteger *)getDefault {
  return JavaLangInteger_valueOfWithInt_(0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMapping);
  methods[2].selector = @selector(getDefault);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapping_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "LASImageButtonImpl;" };
  static const J2ObjcClassInfo _ASImageButtonImpl_ScaleType = { "ScaleType", "com.ashera.layout", ptrTable, methods, fields, 7, 0x18, 3, 1, 2, -1, -1, -1, -1 };
  return &_ASImageButtonImpl_ScaleType;
}

@end

void ASImageButtonImpl_ScaleType_init(ASImageButtonImpl_ScaleType *self) {
  ASAbstractEnumToIntConverter_init(self);
  self->mapping_ = new_JavaUtilHashMap_init();
  {
    (void) [self->mapping_ putWithId:@"center" withId:JavaLangInteger_valueOfWithInt_((jint) 0x5)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"centerCrop" withId:JavaLangInteger_valueOfWithInt_((jint) 0x6)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"centerInside" withId:JavaLangInteger_valueOfWithInt_((jint) 0x7)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"fitCenter" withId:JavaLangInteger_valueOfWithInt_((jint) 0x3)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"fitEnd" withId:JavaLangInteger_valueOfWithInt_((jint) 0x4)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"fitStart" withId:JavaLangInteger_valueOfWithInt_((jint) 0x2)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"fitXY" withId:JavaLangInteger_valueOfWithInt_((jint) 0x1)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"matrix" withId:JavaLangInteger_valueOfWithInt_((jint) 0x0)];
  }
}

ASImageButtonImpl_ScaleType *new_ASImageButtonImpl_ScaleType_init() {
  J2OBJC_NEW_IMPL(ASImageButtonImpl_ScaleType, init)
}

ASImageButtonImpl_ScaleType *create_ASImageButtonImpl_ScaleType_init() {
  J2OBJC_CREATE_IMPL(ASImageButtonImpl_ScaleType, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASImageButtonImpl_ScaleType)

@implementation ASImageButtonImpl_ImageButtonExt

- (id<ASIWidget>)getWidget {
  return this$0_;
}

- (instancetype)initWithASImageButtonImpl:(ASImageButtonImpl *)outer$ {
  ASImageButtonImpl_ImageButtonExt_initWithASImageButtonImpl_(self, outer$);
  return self;
}

- (void)onMeasureWithInt:(jint)widthMeasureSpec
                 withInt:(jint)heightMeasureSpec {
  [super onMeasureWithInt:widthMeasureSpec withInt:heightMeasureSpec];
  id<ASIWidgetLifeCycleListener> listener = [this$0_ getListener];
  if (listener != nil) {
    [((ASMeasureEvent *) nil_chk(measureFinished_)) setWidthWithInt:[self getMeasuredWidth]];
    [((ASMeasureEvent *) nil_chk(measureFinished_)) setHeightWithInt:[self getMeasuredHeight]];
    [listener eventOccurredWithASIWidgetLifeCycleListener_EventId:JreLoadEnum(ASIWidgetLifeCycleListener_EventId, measureFinished) withASWidgetEvent:measureFinished_];
  }
  ASImageButtonImpl_postOnMeasureWithInt_withInt_(this$0_, widthMeasureSpec, heightMeasureSpec);
}

- (void)onLayoutWithBoolean:(jboolean)changed
                    withInt:(jint)l
                    withInt:(jint)t
                    withInt:(jint)r
                    withInt:(jint)b {
  [super onLayoutWithBoolean:changed withInt:l withInt:t withInt:r withInt:b];
  ASViewImpl_setDrawableBoundsWithASIWidget_withInt_withInt_withInt_withInt_(this$0_, l, t, r, b);
  ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_([this$0_ asNativeWidget], l, t, r, b);
  [this$0_ replayBufferedEvents];
  ASViewImpl_redrawDrawablesWithASIWidget_(this$0_);
  id<ASIWidgetLifeCycleListener> listener = [this$0_ getListener];
  if (listener != nil) {
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setBWithInt:b];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setLWithInt:l];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setRWithInt:r];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setTWithInt:t];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setChangedWithBoolean:changed];
    [listener eventOccurredWithASIWidgetLifeCycleListener_EventId:JreLoadEnum(ASIWidgetLifeCycleListener_EventId, onLayout) withASWidgetEvent:onLayoutEvent_];
  }
  if ([this$0_ isInvalidateOnFrameChange] && [this$0_ isInitialised]) {
    [this$0_ invalidate];
  }
}

- (void)executeWithNSString:(NSString *)method
          withNSObjectArray:(IOSObjectArray *)canvas {
}

- (void)updateMeasuredDimensionWithInt:(jint)width
                               withInt:(jint)height {
  [self setMeasuredDimensionWithInt:width withInt:height];
}

- (id<ASILifeCycleDecorator>)newInstanceWithASIWidget:(id<ASIWidget>)widget {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)setAttributeWithASWidgetAttribute:(ASWidgetAttribute *)widgetAttribute
                             withNSString:(NSString *)strValue
                                   withId:(id)objValue {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (id<JavaUtilList>)getMethods {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)initialized {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (id)getAttributeWithASWidgetAttribute:(ASWidgetAttribute *)widgetAttribute {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)drawableStateChanged {
  [super drawableStateChanged];
  ASViewImpl_drawableStateChangedWithASIWidget_(this$0_);
}

- (ADView *)inflateViewWithNSString:(NSString *)layout {
  if (templates_ == nil) {
    templates_ = new_JavaUtilHashMap_init();
  }
  id<ASIWidget> template_ = [templates_ getWithId:layout];
  if (template_ == nil) {
    template_ = (id<ASIWidget>) cast_check([this$0_ quickConvertWithId:layout withNSString:@"template"], ASIWidget_class_());
    (void) [((id<JavaUtilMap>) nil_chk(templates_)) putWithId:layout withId:template_];
  }
  id<ASIWidget> widget = [((id<ASIWidget>) nil_chk(template_)) loadLazyWidgetsWithASHasWidgets:[this$0_ getParent]];
  return (ADView *) cast_chk([((id<ASIWidget>) nil_chk(widget)) asWidget], [ADView class]);
}

- (void)remeasure {
  [((id<ASIFragment>) nil_chk([this$0_ getFragment])) remeasure];
}

- (void)removeFromParent {
  [((id<ASHasWidgets>) nil_chk([this$0_ getParent])) removeWithASIWidget:this$0_];
}

- (void)getLocationOnScreenWithIntArray:(IOSIntArray *)appScreenLocation {
  *IOSIntArray_GetRef(nil_chk(appScreenLocation), 0) = ASViewImpl_getLocationXOnScreenWithId_([this$0_ asNativeWidget]);
  *IOSIntArray_GetRef(appScreenLocation, 1) = ASViewImpl_getLocationYOnScreenWithId_([this$0_ asNativeWidget]);
}

- (void)getWindowVisibleDisplayFrameWithADRect:(ADRect *)displayFrame {
  ((ADRect *) nil_chk(displayFrame))->left_ = ASViewImpl_getLocationXOnScreenWithId_([this$0_ asNativeWidget]);
  displayFrame->top_ = ASViewImpl_getLocationYOnScreenWithId_([this$0_ asNativeWidget]);
  displayFrame->right_ = displayFrame->left_ + [self getWidth];
  displayFrame->bottom_ = displayFrame->top_ + [self getHeight];
}

- (void)offsetTopAndBottomWithInt:(jint)offset {
  [super offsetTopAndBottomWithInt:offset];
  ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_([this$0_ asNativeWidget], [self getLeft], [self getTop], [self getRight], [self getBottom]);
}

- (void)offsetLeftAndRightWithInt:(jint)offset {
  [super offsetLeftAndRightWithInt:offset];
  ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_([this$0_ asNativeWidget], [self getLeft], [self getTop], [self getRight], [self getBottom]);
}

- (void)setMyAttributeWithNSString:(NSString *)name
                            withId:(id)value {
  if ([((NSString *) nil_chk(name)) isEqual:@"state0"]) {
    [self setState0WithId:value];
    return;
  }
  if ([name isEqual:@"state1"]) {
    [self setState1WithId:value];
    return;
  }
  if ([name isEqual:@"state2"]) {
    [self setState2WithId:value];
    return;
  }
  if ([name isEqual:@"state3"]) {
    [self setState3WithId:value];
    return;
  }
  if ([name isEqual:@"state4"]) {
    [self setState4WithId:value];
    return;
  }
  [this$0_ setAttributeWithNSString:name withId:value withBoolean:true];
}

- (void)setVisibilityWithInt:(jint)visibility {
  [super setVisibilityWithInt:visibility];
  ASViewImpl_nativeSetVisibilityWithId_withBoolean_([this$0_ asNativeWidget], visibility != ADView_VISIBLE);
}

- (void)setState0WithId:(id)value {
  ASViewImpl_setStateWithASIWidget_withInt_withId_(this$0_, 0, value);
}

- (void)setState1WithId:(id)value {
  ASViewImpl_setStateWithASIWidget_withInt_withId_(this$0_, 1, value);
}

- (void)setState2WithId:(id)value {
  ASViewImpl_setStateWithASIWidget_withInt_withId_(this$0_, 2, value);
}

- (void)setState3WithId:(id)value {
  ASViewImpl_setStateWithASIWidget_withInt_withId_(this$0_, 3, value);
}

- (void)setState4WithId:(id)value {
  ASViewImpl_setStateWithASIWidget_withInt_withId_(this$0_, 4, value);
}

- (void)state0 {
  ASViewImpl_stateWithASIWidget_withInt_(this$0_, 0);
}

- (void)state1 {
  ASViewImpl_stateWithASIWidget_withInt_(this$0_, 1);
}

- (void)state2 {
  ASViewImpl_stateWithASIWidget_withInt_(this$0_, 2);
}

- (void)state3 {
  ASViewImpl_stateWithASIWidget_withInt_(this$0_, 3);
}

- (void)state4 {
  ASViewImpl_stateWithASIWidget_withInt_(this$0_, 4);
}

- (void)stateYes {
  ASViewImpl_stateYesWithASIWidget_(this$0_);
}

- (void)stateNo {
  ASViewImpl_stateNoWithASIWidget_(this$0_);
}

- (void)__javaClone:(ASImageButtonImpl_ImageButtonExt *)original {
  [super __javaClone:original];
  JreRelease(this$0_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LASIWidget;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x81, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 2, -1, -1, -1, -1 },
    { NULL, "LASILifeCycleDecorator;", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 12, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADView;", 0x1, 15, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 18, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 20, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 21, 22, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 23, 22, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 24, 25, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 26, 22, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 27, 28, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 29, 28, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 30, 28, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 31, 28, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 32, 28, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getWidget);
  methods[1].selector = @selector(initWithASImageButtonImpl:);
  methods[2].selector = @selector(onMeasureWithInt:withInt:);
  methods[3].selector = @selector(onLayoutWithBoolean:withInt:withInt:withInt:withInt:);
  methods[4].selector = @selector(executeWithNSString:withNSObjectArray:);
  methods[5].selector = @selector(updateMeasuredDimensionWithInt:withInt:);
  methods[6].selector = @selector(newInstanceWithASIWidget:);
  methods[7].selector = @selector(setAttributeWithASWidgetAttribute:withNSString:withId:);
  methods[8].selector = @selector(getMethods);
  methods[9].selector = @selector(initialized);
  methods[10].selector = @selector(getAttributeWithASWidgetAttribute:);
  methods[11].selector = @selector(drawableStateChanged);
  methods[12].selector = @selector(inflateViewWithNSString:);
  methods[13].selector = @selector(remeasure);
  methods[14].selector = @selector(removeFromParent);
  methods[15].selector = @selector(getLocationOnScreenWithIntArray:);
  methods[16].selector = @selector(getWindowVisibleDisplayFrameWithADRect:);
  methods[17].selector = @selector(offsetTopAndBottomWithInt:);
  methods[18].selector = @selector(offsetLeftAndRightWithInt:);
  methods[19].selector = @selector(setMyAttributeWithNSString:withId:);
  methods[20].selector = @selector(setVisibilityWithInt:);
  methods[21].selector = @selector(setState0WithId:);
  methods[22].selector = @selector(setState1WithId:);
  methods[23].selector = @selector(setState2WithId:);
  methods[24].selector = @selector(setState3WithId:);
  methods[25].selector = @selector(setState4WithId:);
  methods[26].selector = @selector(state0);
  methods[27].selector = @selector(state1);
  methods[28].selector = @selector(state2);
  methods[29].selector = @selector(state3);
  methods[30].selector = @selector(state4);
  methods[31].selector = @selector(stateYes);
  methods[32].selector = @selector(stateNo);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASImageButtonImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "measureFinished_", "LASMeasureEvent;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "onLayoutEvent_", "LASOnLayoutEvent;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "templates_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 33, -1 },
  };
  static const void *ptrTable[] = { "LASImageButtonImpl;", "onMeasure", "II", "onLayout", "ZIIII", "execute", "LNSString;[LNSObject;", "updateMeasuredDimension", "newInstance", "LASIWidget;", "setAttribute", "LASWidgetAttribute;LNSString;LNSObject;", "()Ljava/util/List<Ljava/lang/String;>;", "getAttribute", "LASWidgetAttribute;", "inflateView", "LNSString;", "getLocationOnScreen", "[I", "getWindowVisibleDisplayFrame", "LADRect;", "offsetTopAndBottom", "I", "offsetLeftAndRight", "setMyAttribute", "LNSString;LNSObject;", "setVisibility", "setState0", "LNSObject;", "setState1", "setState2", "setState3", "setState4", "Ljava/util/Map<Ljava/lang/String;Lcom/ashera/widget/IWidget;>;" };
  static const J2ObjcClassInfo _ASImageButtonImpl_ImageButtonExt = { "ImageButtonExt", "com.ashera.layout", ptrTable, methods, fields, 7, 0x1, 33, 4, 0, -1, -1, -1, -1 };
  return &_ASImageButtonImpl_ImageButtonExt;
}

@end

void ASImageButtonImpl_ImageButtonExt_initWithASImageButtonImpl_(ASImageButtonImpl_ImageButtonExt *self, ASImageButtonImpl *outer$) {
  self->this$0_ = outer$;
  ADImageView_initWithASIWidget_(self, outer$);
  self->measureFinished_ = new_ASMeasureEvent_init();
  self->onLayoutEvent_ = new_ASOnLayoutEvent_init();
}

ASImageButtonImpl_ImageButtonExt *new_ASImageButtonImpl_ImageButtonExt_initWithASImageButtonImpl_(ASImageButtonImpl *outer$) {
  J2OBJC_NEW_IMPL(ASImageButtonImpl_ImageButtonExt, initWithASImageButtonImpl_, outer$)
}

ASImageButtonImpl_ImageButtonExt *create_ASImageButtonImpl_ImageButtonExt_initWithASImageButtonImpl_(ASImageButtonImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASImageButtonImpl_ImageButtonExt, initWithASImageButtonImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASImageButtonImpl_ImageButtonExt)

@implementation ASImageButtonImpl_ImageButtonCommandBuilder

- (instancetype)initWithASImageButtonImpl:(ASImageButtonImpl *)outer$ {
  ASImageButtonImpl_ImageButtonCommandBuilder_initWithASImageButtonImpl_(self, outer$);
  return self;
}

- (ASImageButtonImpl_ImageButtonCommandBuilder *)executeWithBoolean:(jboolean)setter {
  if (setter) {
    [this$0_ executeCommandWithJavaUtilMap:command_ withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_SETTER_METHOD];
    [((id<ASIFragment>) nil_chk([this$0_ getFragment])) remeasure];
  }
  [this$0_ executeCommandWithJavaUtilMap:command_ withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_GETTER_METHOD];
  return self;
}

- (ASImageButtonImpl_ImageButtonCommandBuilder *)tryGetSrc {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"src"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getSrc {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"src"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASImageButtonImpl_ImageButtonCommandBuilder *)setSrcWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"src"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASImageButtonImpl_ImageButtonCommandBuilder *)tryGetScaleType {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"scaleType"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getScaleType {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"scaleType"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASImageButtonImpl_ImageButtonCommandBuilder *)setScaleTypeWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"scaleType"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASImageButtonImpl_ImageButtonCommandBuilder *)tryGetAdjustViewBounds {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"adjustViewBounds"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)isAdjustViewBounds {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"adjustViewBounds"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASImageButtonImpl_ImageButtonCommandBuilder *)setAdjustViewBoundsWithBoolean:(jboolean)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"adjustViewBounds"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangBoolean_valueOfWithBoolean_(value)];
  return self;
}

- (ASImageButtonImpl_ImageButtonCommandBuilder *)tryGetMaxHeight {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"maxHeight"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getMaxHeight {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"maxHeight"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASImageButtonImpl_ImageButtonCommandBuilder *)setMaxHeightWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"maxHeight"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASImageButtonImpl_ImageButtonCommandBuilder *)tryGetMaxWidth {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"maxWidth"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getMaxWidth {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"maxWidth"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASImageButtonImpl_ImageButtonCommandBuilder *)setMaxWidthWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"maxWidth"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASImageButtonImpl_ImageButtonCommandBuilder *)setImageFromUrlWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"imageFromUrl"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASImageButtonImpl_ImageButtonCommandBuilder *)setImageFromUrlPlaceHolderWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"imageFromUrlPlaceHolder"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASImageButtonImpl_ImageButtonCommandBuilder *)setImageFromUrlErrorWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"imageFromUrlError"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASImageButtonImpl_ImageButtonCommandBuilder *)setPaddingWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"padding"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASImageButtonImpl_ImageButtonCommandBuilder *)tryGetPaddingBottom {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingBottom"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getPaddingBottom {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingBottom"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASImageButtonImpl_ImageButtonCommandBuilder *)setPaddingBottomWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingBottom"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASImageButtonImpl_ImageButtonCommandBuilder *)tryGetPaddingRight {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingRight"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getPaddingRight {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingRight"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASImageButtonImpl_ImageButtonCommandBuilder *)setPaddingRightWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingRight"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASImageButtonImpl_ImageButtonCommandBuilder *)tryGetPaddingLeft {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingLeft"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getPaddingLeft {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingLeft"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASImageButtonImpl_ImageButtonCommandBuilder *)setPaddingLeftWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingLeft"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASImageButtonImpl_ImageButtonCommandBuilder *)tryGetPaddingStart {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingStart"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getPaddingStart {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingStart"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASImageButtonImpl_ImageButtonCommandBuilder *)setPaddingStartWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingStart"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASImageButtonImpl_ImageButtonCommandBuilder *)tryGetPaddingEnd {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingEnd"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getPaddingEnd {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingEnd"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASImageButtonImpl_ImageButtonCommandBuilder *)setPaddingEndWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingEnd"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASImageButtonImpl_ImageButtonCommandBuilder *)tryGetPaddingTop {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingTop"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getPaddingTop {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingTop"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASImageButtonImpl_ImageButtonCommandBuilder *)setPaddingTopWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingTop"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASImageButtonImpl_ImageButtonCommandBuilder *)setPaddingHorizontalWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingHorizontal"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASImageButtonImpl_ImageButtonCommandBuilder *)setPaddingVerticalWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingVertical"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASImageButtonImpl_ImageButtonCommandBuilder *)tryGetBaseline {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"baseline"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getBaseline {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"baseline"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASImageButtonImpl_ImageButtonCommandBuilder *)setBaselineWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"baseline"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASImageButtonImpl_ImageButtonCommandBuilder *)tryGetBaselineAlignBottom {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"baselineAlignBottom"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)isBaselineAlignBottom {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"baselineAlignBottom"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASImageButtonImpl_ImageButtonCommandBuilder *)setBaselineAlignBottomWithBoolean:(jboolean)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"baselineAlignBottom"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangBoolean_valueOfWithBoolean_(value)];
  return self;
}

- (ASImageButtonImpl_ImageButtonCommandBuilder *)tryGetTint {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"tint"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getTint {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"tint"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASImageButtonImpl_ImageButtonCommandBuilder *)setTintWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"tint"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LASImageButtonImpl_ImageButtonCommandBuilder;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LASImageButtonImpl_ImageButtonCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASImageButtonImpl_ImageButtonCommandBuilder;", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LASImageButtonImpl_ImageButtonCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASImageButtonImpl_ImageButtonCommandBuilder;", 0x1, 5, 4, -1, -1, -1, -1 },
    { NULL, "LASImageButtonImpl_ImageButtonCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASImageButtonImpl_ImageButtonCommandBuilder;", 0x1, 6, 2, -1, -1, -1, -1 },
    { NULL, "LASImageButtonImpl_ImageButtonCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASImageButtonImpl_ImageButtonCommandBuilder;", 0x1, 7, 4, -1, -1, -1, -1 },
    { NULL, "LASImageButtonImpl_ImageButtonCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASImageButtonImpl_ImageButtonCommandBuilder;", 0x1, 8, 4, -1, -1, -1, -1 },
    { NULL, "LASImageButtonImpl_ImageButtonCommandBuilder;", 0x1, 9, 4, -1, -1, -1, -1 },
    { NULL, "LASImageButtonImpl_ImageButtonCommandBuilder;", 0x1, 10, 4, -1, -1, -1, -1 },
    { NULL, "LASImageButtonImpl_ImageButtonCommandBuilder;", 0x1, 11, 4, -1, -1, -1, -1 },
    { NULL, "LASImageButtonImpl_ImageButtonCommandBuilder;", 0x1, 12, 4, -1, -1, -1, -1 },
    { NULL, "LASImageButtonImpl_ImageButtonCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASImageButtonImpl_ImageButtonCommandBuilder;", 0x1, 13, 4, -1, -1, -1, -1 },
    { NULL, "LASImageButtonImpl_ImageButtonCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASImageButtonImpl_ImageButtonCommandBuilder;", 0x1, 14, 4, -1, -1, -1, -1 },
    { NULL, "LASImageButtonImpl_ImageButtonCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASImageButtonImpl_ImageButtonCommandBuilder;", 0x1, 15, 4, -1, -1, -1, -1 },
    { NULL, "LASImageButtonImpl_ImageButtonCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASImageButtonImpl_ImageButtonCommandBuilder;", 0x1, 16, 4, -1, -1, -1, -1 },
    { NULL, "LASImageButtonImpl_ImageButtonCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASImageButtonImpl_ImageButtonCommandBuilder;", 0x1, 17, 4, -1, -1, -1, -1 },
    { NULL, "LASImageButtonImpl_ImageButtonCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASImageButtonImpl_ImageButtonCommandBuilder;", 0x1, 18, 4, -1, -1, -1, -1 },
    { NULL, "LASImageButtonImpl_ImageButtonCommandBuilder;", 0x1, 19, 4, -1, -1, -1, -1 },
    { NULL, "LASImageButtonImpl_ImageButtonCommandBuilder;", 0x1, 20, 4, -1, -1, -1, -1 },
    { NULL, "LASImageButtonImpl_ImageButtonCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASImageButtonImpl_ImageButtonCommandBuilder;", 0x1, 21, 4, -1, -1, -1, -1 },
    { NULL, "LASImageButtonImpl_ImageButtonCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASImageButtonImpl_ImageButtonCommandBuilder;", 0x1, 22, 2, -1, -1, -1, -1 },
    { NULL, "LASImageButtonImpl_ImageButtonCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASImageButtonImpl_ImageButtonCommandBuilder;", 0x1, 23, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASImageButtonImpl:);
  methods[1].selector = @selector(executeWithBoolean:);
  methods[2].selector = @selector(tryGetSrc);
  methods[3].selector = @selector(getSrc);
  methods[4].selector = @selector(setSrcWithNSString:);
  methods[5].selector = @selector(tryGetScaleType);
  methods[6].selector = @selector(getScaleType);
  methods[7].selector = @selector(setScaleTypeWithNSString:);
  methods[8].selector = @selector(tryGetAdjustViewBounds);
  methods[9].selector = @selector(isAdjustViewBounds);
  methods[10].selector = @selector(setAdjustViewBoundsWithBoolean:);
  methods[11].selector = @selector(tryGetMaxHeight);
  methods[12].selector = @selector(getMaxHeight);
  methods[13].selector = @selector(setMaxHeightWithNSString:);
  methods[14].selector = @selector(tryGetMaxWidth);
  methods[15].selector = @selector(getMaxWidth);
  methods[16].selector = @selector(setMaxWidthWithNSString:);
  methods[17].selector = @selector(setImageFromUrlWithNSString:);
  methods[18].selector = @selector(setImageFromUrlPlaceHolderWithNSString:);
  methods[19].selector = @selector(setImageFromUrlErrorWithNSString:);
  methods[20].selector = @selector(setPaddingWithNSString:);
  methods[21].selector = @selector(tryGetPaddingBottom);
  methods[22].selector = @selector(getPaddingBottom);
  methods[23].selector = @selector(setPaddingBottomWithNSString:);
  methods[24].selector = @selector(tryGetPaddingRight);
  methods[25].selector = @selector(getPaddingRight);
  methods[26].selector = @selector(setPaddingRightWithNSString:);
  methods[27].selector = @selector(tryGetPaddingLeft);
  methods[28].selector = @selector(getPaddingLeft);
  methods[29].selector = @selector(setPaddingLeftWithNSString:);
  methods[30].selector = @selector(tryGetPaddingStart);
  methods[31].selector = @selector(getPaddingStart);
  methods[32].selector = @selector(setPaddingStartWithNSString:);
  methods[33].selector = @selector(tryGetPaddingEnd);
  methods[34].selector = @selector(getPaddingEnd);
  methods[35].selector = @selector(setPaddingEndWithNSString:);
  methods[36].selector = @selector(tryGetPaddingTop);
  methods[37].selector = @selector(getPaddingTop);
  methods[38].selector = @selector(setPaddingTopWithNSString:);
  methods[39].selector = @selector(setPaddingHorizontalWithNSString:);
  methods[40].selector = @selector(setPaddingVerticalWithNSString:);
  methods[41].selector = @selector(tryGetBaseline);
  methods[42].selector = @selector(getBaseline);
  methods[43].selector = @selector(setBaselineWithNSString:);
  methods[44].selector = @selector(tryGetBaselineAlignBottom);
  methods[45].selector = @selector(isBaselineAlignBottom);
  methods[46].selector = @selector(setBaselineAlignBottomWithBoolean:);
  methods[47].selector = @selector(tryGetTint);
  methods[48].selector = @selector(getTint);
  methods[49].selector = @selector(setTintWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASImageButtonImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASImageButtonImpl;", "execute", "Z", "setSrc", "LNSString;", "setScaleType", "setAdjustViewBounds", "setMaxHeight", "setMaxWidth", "setImageFromUrl", "setImageFromUrlPlaceHolder", "setImageFromUrlError", "setPadding", "setPaddingBottom", "setPaddingRight", "setPaddingLeft", "setPaddingStart", "setPaddingEnd", "setPaddingTop", "setPaddingHorizontal", "setPaddingVertical", "setBaseline", "setBaselineAlignBottom", "setTint", "Lcom/ashera/layout/ViewImpl$ViewCommandBuilder<Lcom/ashera/layout/ImageButtonImpl$ImageButtonCommandBuilder;>;" };
  static const J2ObjcClassInfo _ASImageButtonImpl_ImageButtonCommandBuilder = { "ImageButtonCommandBuilder", "com.ashera.layout", ptrTable, methods, fields, 7, 0x1, 50, 1, 0, -1, -1, 24, -1 };
  return &_ASImageButtonImpl_ImageButtonCommandBuilder;
}

@end

void ASImageButtonImpl_ImageButtonCommandBuilder_initWithASImageButtonImpl_(ASImageButtonImpl_ImageButtonCommandBuilder *self, ASImageButtonImpl *outer$) {
  self->this$0_ = outer$;
  ASViewImpl_ViewCommandBuilder_init(self);
}

ASImageButtonImpl_ImageButtonCommandBuilder *new_ASImageButtonImpl_ImageButtonCommandBuilder_initWithASImageButtonImpl_(ASImageButtonImpl *outer$) {
  J2OBJC_NEW_IMPL(ASImageButtonImpl_ImageButtonCommandBuilder, initWithASImageButtonImpl_, outer$)
}

ASImageButtonImpl_ImageButtonCommandBuilder *create_ASImageButtonImpl_ImageButtonCommandBuilder_initWithASImageButtonImpl_(ASImageButtonImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASImageButtonImpl_ImageButtonCommandBuilder, initWithASImageButtonImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASImageButtonImpl_ImageButtonCommandBuilder)

@implementation ASImageButtonImpl_ImageButtonBean

- (instancetype)initWithASImageButtonImpl:(ASImageButtonImpl *)outer$ {
  ASImageButtonImpl_ImageButtonBean_initWithASImageButtonImpl_(self, outer$);
  return self;
}

- (id)getSrc {
  return [((ASImageButtonImpl_ImageButtonCommandBuilder *) nil_chk([((ASImageButtonImpl_ImageButtonCommandBuilder *) nil_chk([((ASImageButtonImpl_ImageButtonCommandBuilder *) nil_chk([((ASImageButtonImpl_ImageButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetSrc])) executeWithBoolean:false])) getSrc];
}

- (void)setSrcWithNSString:(NSString *)value {
  (void) [((ASImageButtonImpl_ImageButtonCommandBuilder *) nil_chk([((ASImageButtonImpl_ImageButtonCommandBuilder *) nil_chk([((ASImageButtonImpl_ImageButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setSrcWithNSString:value])) executeWithBoolean:true];
}

- (id)getScaleType {
  return [((ASImageButtonImpl_ImageButtonCommandBuilder *) nil_chk([((ASImageButtonImpl_ImageButtonCommandBuilder *) nil_chk([((ASImageButtonImpl_ImageButtonCommandBuilder *) nil_chk([((ASImageButtonImpl_ImageButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetScaleType])) executeWithBoolean:false])) getScaleType];
}

- (void)setScaleTypeWithNSString:(NSString *)value {
  (void) [((ASImageButtonImpl_ImageButtonCommandBuilder *) nil_chk([((ASImageButtonImpl_ImageButtonCommandBuilder *) nil_chk([((ASImageButtonImpl_ImageButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setScaleTypeWithNSString:value])) executeWithBoolean:true];
}

- (id)isAdjustViewBounds {
  return [((ASImageButtonImpl_ImageButtonCommandBuilder *) nil_chk([((ASImageButtonImpl_ImageButtonCommandBuilder *) nil_chk([((ASImageButtonImpl_ImageButtonCommandBuilder *) nil_chk([((ASImageButtonImpl_ImageButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetAdjustViewBounds])) executeWithBoolean:false])) isAdjustViewBounds];
}

- (void)setAdjustViewBoundsWithBoolean:(jboolean)value {
  (void) [((ASImageButtonImpl_ImageButtonCommandBuilder *) nil_chk([((ASImageButtonImpl_ImageButtonCommandBuilder *) nil_chk([((ASImageButtonImpl_ImageButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setAdjustViewBoundsWithBoolean:value])) executeWithBoolean:true];
}

- (id)getMaxHeight {
  return [((ASImageButtonImpl_ImageButtonCommandBuilder *) nil_chk([((ASImageButtonImpl_ImageButtonCommandBuilder *) nil_chk([((ASImageButtonImpl_ImageButtonCommandBuilder *) nil_chk([((ASImageButtonImpl_ImageButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetMaxHeight])) executeWithBoolean:false])) getMaxHeight];
}

- (void)setMaxHeightWithNSString:(NSString *)value {
  (void) [((ASImageButtonImpl_ImageButtonCommandBuilder *) nil_chk([((ASImageButtonImpl_ImageButtonCommandBuilder *) nil_chk([((ASImageButtonImpl_ImageButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setMaxHeightWithNSString:value])) executeWithBoolean:true];
}

- (id)getMaxWidth {
  return [((ASImageButtonImpl_ImageButtonCommandBuilder *) nil_chk([((ASImageButtonImpl_ImageButtonCommandBuilder *) nil_chk([((ASImageButtonImpl_ImageButtonCommandBuilder *) nil_chk([((ASImageButtonImpl_ImageButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetMaxWidth])) executeWithBoolean:false])) getMaxWidth];
}

- (void)setMaxWidthWithNSString:(NSString *)value {
  (void) [((ASImageButtonImpl_ImageButtonCommandBuilder *) nil_chk([((ASImageButtonImpl_ImageButtonCommandBuilder *) nil_chk([((ASImageButtonImpl_ImageButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setMaxWidthWithNSString:value])) executeWithBoolean:true];
}

- (void)setImageFromUrlWithNSString:(NSString *)value {
  (void) [((ASImageButtonImpl_ImageButtonCommandBuilder *) nil_chk([((ASImageButtonImpl_ImageButtonCommandBuilder *) nil_chk([((ASImageButtonImpl_ImageButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setImageFromUrlWithNSString:value])) executeWithBoolean:true];
}

- (void)setImageFromUrlPlaceHolderWithNSString:(NSString *)value {
  (void) [((ASImageButtonImpl_ImageButtonCommandBuilder *) nil_chk([((ASImageButtonImpl_ImageButtonCommandBuilder *) nil_chk([((ASImageButtonImpl_ImageButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setImageFromUrlPlaceHolderWithNSString:value])) executeWithBoolean:true];
}

- (void)setImageFromUrlErrorWithNSString:(NSString *)value {
  (void) [((ASImageButtonImpl_ImageButtonCommandBuilder *) nil_chk([((ASImageButtonImpl_ImageButtonCommandBuilder *) nil_chk([((ASImageButtonImpl_ImageButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setImageFromUrlErrorWithNSString:value])) executeWithBoolean:true];
}

- (void)setPaddingWithNSString:(NSString *)value {
  (void) [((ASImageButtonImpl_ImageButtonCommandBuilder *) nil_chk([((ASImageButtonImpl_ImageButtonCommandBuilder *) nil_chk([((ASImageButtonImpl_ImageButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setPaddingWithNSString:value])) executeWithBoolean:true];
}

- (id)getPaddingBottom {
  return [((ASImageButtonImpl_ImageButtonCommandBuilder *) nil_chk([((ASImageButtonImpl_ImageButtonCommandBuilder *) nil_chk([((ASImageButtonImpl_ImageButtonCommandBuilder *) nil_chk([((ASImageButtonImpl_ImageButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetPaddingBottom])) executeWithBoolean:false])) getPaddingBottom];
}

- (void)setPaddingBottomWithNSString:(NSString *)value {
  (void) [((ASImageButtonImpl_ImageButtonCommandBuilder *) nil_chk([((ASImageButtonImpl_ImageButtonCommandBuilder *) nil_chk([((ASImageButtonImpl_ImageButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setPaddingBottomWithNSString:value])) executeWithBoolean:true];
}

- (id)getPaddingRight {
  return [((ASImageButtonImpl_ImageButtonCommandBuilder *) nil_chk([((ASImageButtonImpl_ImageButtonCommandBuilder *) nil_chk([((ASImageButtonImpl_ImageButtonCommandBuilder *) nil_chk([((ASImageButtonImpl_ImageButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetPaddingRight])) executeWithBoolean:false])) getPaddingRight];
}

- (void)setPaddingRightWithNSString:(NSString *)value {
  (void) [((ASImageButtonImpl_ImageButtonCommandBuilder *) nil_chk([((ASImageButtonImpl_ImageButtonCommandBuilder *) nil_chk([((ASImageButtonImpl_ImageButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setPaddingRightWithNSString:value])) executeWithBoolean:true];
}

- (id)getPaddingLeft {
  return [((ASImageButtonImpl_ImageButtonCommandBuilder *) nil_chk([((ASImageButtonImpl_ImageButtonCommandBuilder *) nil_chk([((ASImageButtonImpl_ImageButtonCommandBuilder *) nil_chk([((ASImageButtonImpl_ImageButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetPaddingLeft])) executeWithBoolean:false])) getPaddingLeft];
}

- (void)setPaddingLeftWithNSString:(NSString *)value {
  (void) [((ASImageButtonImpl_ImageButtonCommandBuilder *) nil_chk([((ASImageButtonImpl_ImageButtonCommandBuilder *) nil_chk([((ASImageButtonImpl_ImageButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setPaddingLeftWithNSString:value])) executeWithBoolean:true];
}

- (id)getPaddingStart {
  return [((ASImageButtonImpl_ImageButtonCommandBuilder *) nil_chk([((ASImageButtonImpl_ImageButtonCommandBuilder *) nil_chk([((ASImageButtonImpl_ImageButtonCommandBuilder *) nil_chk([((ASImageButtonImpl_ImageButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetPaddingStart])) executeWithBoolean:false])) getPaddingStart];
}

- (void)setPaddingStartWithNSString:(NSString *)value {
  (void) [((ASImageButtonImpl_ImageButtonCommandBuilder *) nil_chk([((ASImageButtonImpl_ImageButtonCommandBuilder *) nil_chk([((ASImageButtonImpl_ImageButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setPaddingStartWithNSString:value])) executeWithBoolean:true];
}

- (id)getPaddingEnd {
  return [((ASImageButtonImpl_ImageButtonCommandBuilder *) nil_chk([((ASImageButtonImpl_ImageButtonCommandBuilder *) nil_chk([((ASImageButtonImpl_ImageButtonCommandBuilder *) nil_chk([((ASImageButtonImpl_ImageButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetPaddingEnd])) executeWithBoolean:false])) getPaddingEnd];
}

- (void)setPaddingEndWithNSString:(NSString *)value {
  (void) [((ASImageButtonImpl_ImageButtonCommandBuilder *) nil_chk([((ASImageButtonImpl_ImageButtonCommandBuilder *) nil_chk([((ASImageButtonImpl_ImageButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setPaddingEndWithNSString:value])) executeWithBoolean:true];
}

- (id)getPaddingTop {
  return [((ASImageButtonImpl_ImageButtonCommandBuilder *) nil_chk([((ASImageButtonImpl_ImageButtonCommandBuilder *) nil_chk([((ASImageButtonImpl_ImageButtonCommandBuilder *) nil_chk([((ASImageButtonImpl_ImageButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetPaddingTop])) executeWithBoolean:false])) getPaddingTop];
}

- (void)setPaddingTopWithNSString:(NSString *)value {
  (void) [((ASImageButtonImpl_ImageButtonCommandBuilder *) nil_chk([((ASImageButtonImpl_ImageButtonCommandBuilder *) nil_chk([((ASImageButtonImpl_ImageButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setPaddingTopWithNSString:value])) executeWithBoolean:true];
}

- (void)setPaddingHorizontalWithNSString:(NSString *)value {
  (void) [((ASImageButtonImpl_ImageButtonCommandBuilder *) nil_chk([((ASImageButtonImpl_ImageButtonCommandBuilder *) nil_chk([((ASImageButtonImpl_ImageButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setPaddingHorizontalWithNSString:value])) executeWithBoolean:true];
}

- (void)setPaddingVerticalWithNSString:(NSString *)value {
  (void) [((ASImageButtonImpl_ImageButtonCommandBuilder *) nil_chk([((ASImageButtonImpl_ImageButtonCommandBuilder *) nil_chk([((ASImageButtonImpl_ImageButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setPaddingVerticalWithNSString:value])) executeWithBoolean:true];
}

- (id)getBaseline {
  return [((ASImageButtonImpl_ImageButtonCommandBuilder *) nil_chk([((ASImageButtonImpl_ImageButtonCommandBuilder *) nil_chk([((ASImageButtonImpl_ImageButtonCommandBuilder *) nil_chk([((ASImageButtonImpl_ImageButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetBaseline])) executeWithBoolean:false])) getBaseline];
}

- (void)setBaselineWithNSString:(NSString *)value {
  (void) [((ASImageButtonImpl_ImageButtonCommandBuilder *) nil_chk([((ASImageButtonImpl_ImageButtonCommandBuilder *) nil_chk([((ASImageButtonImpl_ImageButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setBaselineWithNSString:value])) executeWithBoolean:true];
}

- (id)isBaselineAlignBottom {
  return [((ASImageButtonImpl_ImageButtonCommandBuilder *) nil_chk([((ASImageButtonImpl_ImageButtonCommandBuilder *) nil_chk([((ASImageButtonImpl_ImageButtonCommandBuilder *) nil_chk([((ASImageButtonImpl_ImageButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetBaselineAlignBottom])) executeWithBoolean:false])) isBaselineAlignBottom];
}

- (void)setBaselineAlignBottomWithBoolean:(jboolean)value {
  (void) [((ASImageButtonImpl_ImageButtonCommandBuilder *) nil_chk([((ASImageButtonImpl_ImageButtonCommandBuilder *) nil_chk([((ASImageButtonImpl_ImageButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setBaselineAlignBottomWithBoolean:value])) executeWithBoolean:true];
}

- (id)getTint {
  return [((ASImageButtonImpl_ImageButtonCommandBuilder *) nil_chk([((ASImageButtonImpl_ImageButtonCommandBuilder *) nil_chk([((ASImageButtonImpl_ImageButtonCommandBuilder *) nil_chk([((ASImageButtonImpl_ImageButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetTint])) executeWithBoolean:false])) getTint];
}

- (void)setTintWithNSString:(NSString *)value {
  (void) [((ASImageButtonImpl_ImageButtonCommandBuilder *) nil_chk([((ASImageButtonImpl_ImageButtonCommandBuilder *) nil_chk([((ASImageButtonImpl_ImageButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setTintWithNSString:value])) executeWithBoolean:true];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 21, 5, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 22, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASImageButtonImpl:);
  methods[1].selector = @selector(getSrc);
  methods[2].selector = @selector(setSrcWithNSString:);
  methods[3].selector = @selector(getScaleType);
  methods[4].selector = @selector(setScaleTypeWithNSString:);
  methods[5].selector = @selector(isAdjustViewBounds);
  methods[6].selector = @selector(setAdjustViewBoundsWithBoolean:);
  methods[7].selector = @selector(getMaxHeight);
  methods[8].selector = @selector(setMaxHeightWithNSString:);
  methods[9].selector = @selector(getMaxWidth);
  methods[10].selector = @selector(setMaxWidthWithNSString:);
  methods[11].selector = @selector(setImageFromUrlWithNSString:);
  methods[12].selector = @selector(setImageFromUrlPlaceHolderWithNSString:);
  methods[13].selector = @selector(setImageFromUrlErrorWithNSString:);
  methods[14].selector = @selector(setPaddingWithNSString:);
  methods[15].selector = @selector(getPaddingBottom);
  methods[16].selector = @selector(setPaddingBottomWithNSString:);
  methods[17].selector = @selector(getPaddingRight);
  methods[18].selector = @selector(setPaddingRightWithNSString:);
  methods[19].selector = @selector(getPaddingLeft);
  methods[20].selector = @selector(setPaddingLeftWithNSString:);
  methods[21].selector = @selector(getPaddingStart);
  methods[22].selector = @selector(setPaddingStartWithNSString:);
  methods[23].selector = @selector(getPaddingEnd);
  methods[24].selector = @selector(setPaddingEndWithNSString:);
  methods[25].selector = @selector(getPaddingTop);
  methods[26].selector = @selector(setPaddingTopWithNSString:);
  methods[27].selector = @selector(setPaddingHorizontalWithNSString:);
  methods[28].selector = @selector(setPaddingVerticalWithNSString:);
  methods[29].selector = @selector(getBaseline);
  methods[30].selector = @selector(setBaselineWithNSString:);
  methods[31].selector = @selector(isBaselineAlignBottom);
  methods[32].selector = @selector(setBaselineAlignBottomWithBoolean:);
  methods[33].selector = @selector(getTint);
  methods[34].selector = @selector(setTintWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASImageButtonImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASImageButtonImpl;", "setSrc", "LNSString;", "setScaleType", "setAdjustViewBounds", "Z", "setMaxHeight", "setMaxWidth", "setImageFromUrl", "setImageFromUrlPlaceHolder", "setImageFromUrlError", "setPadding", "setPaddingBottom", "setPaddingRight", "setPaddingLeft", "setPaddingStart", "setPaddingEnd", "setPaddingTop", "setPaddingHorizontal", "setPaddingVertical", "setBaseline", "setBaselineAlignBottom", "setTint" };
  static const J2ObjcClassInfo _ASImageButtonImpl_ImageButtonBean = { "ImageButtonBean", "com.ashera.layout", ptrTable, methods, fields, 7, 0x1, 35, 1, 0, -1, -1, -1, -1 };
  return &_ASImageButtonImpl_ImageButtonBean;
}

@end

void ASImageButtonImpl_ImageButtonBean_initWithASImageButtonImpl_(ASImageButtonImpl_ImageButtonBean *self, ASImageButtonImpl *outer$) {
  self->this$0_ = outer$;
  ASViewImpl_ViewBean_initWithASIWidget_(self, outer$);
}

ASImageButtonImpl_ImageButtonBean *new_ASImageButtonImpl_ImageButtonBean_initWithASImageButtonImpl_(ASImageButtonImpl *outer$) {
  J2OBJC_NEW_IMPL(ASImageButtonImpl_ImageButtonBean, initWithASImageButtonImpl_, outer$)
}

ASImageButtonImpl_ImageButtonBean *create_ASImageButtonImpl_ImageButtonBean_initWithASImageButtonImpl_(ASImageButtonImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASImageButtonImpl_ImageButtonBean, initWithASImageButtonImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASImageButtonImpl_ImageButtonBean)
