//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-ios-widgets\ios_widget_library\src\main\java\com\ashera\layout\RadioButtonImpl.java
//

#include "AbstractBitFlagConverter.h"
#include "AbstractEnumToIntConverter.h"
#include "AttributeCommand.h"
#include "AttributedString.h"
#include "BaseMeasurableView.h"
#include "BaseWidget.h"
#include "Canvas.h"
#include "Color.h"
#include "ColorStateList.h"
#include "CommonConverters.h"
#include "CompoundButton.h"
#include "ConverterFactory.h"
#include "Drawable.h"
#include "Event.h"
#include "EventBus.h"
#include "EventBusHandler.h"
#include "EventCommand.h"
#include "EventCommandFactory.h"
#include "EventExpressionParser.h"
#include "FontDescriptor.h"
#include "FontMetricsDescriptor.h"
#include "FormElement.h"
#include "GravityConverter.h"
#include "HasWidgets.h"
#include "Html.h"
#include "IActivity.h"
#include "IConverter.h"
#include "IFragment.h"
#include "ILifeCycleDecorator.h"
#include "IListener.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "IWidget.h"
#include "IWidgetLifeCycleListener.h"
#include "J2ObjC_source.h"
#include "Layout.h"
#include "LayoutNativeVars.h"
#include "MarqueeCommandConverter.h"
#include "MeasureEvent.h"
#include "OnLayoutEvent.h"
#include "PluginInvoker.h"
#include "RadioButton.h"
#include "RadioButtonImpl.h"
#include "Rect.h"
#include "TextDirectionHeuristic.h"
#include "TextView.h"
#include "View.h"
#include "ViewImpl.h"
#include "WidgetAttribute.h"
#include "WidgetFactory.h"
#include "java/lang/Boolean.h"
#include "java/lang/Float.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/Runnable.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Locale.h"
#include "java/util/Map.h"

#include "java/lang/Integer.h"
#include "java/lang/Float.h"
#include "java/lang/Boolean.h"
#include <UIKit/UIKit.h>
#include "HasLifeCycleDecorators.h"

#include "ASUILabel.h"

@class ASRadioButtonImpl_DellocHandler;
@class ASRadioButtonImpl_MarqueeTask;
@class JavaLangFloat;
@class JavaLangInteger;
@protocol JavaLangRunnable;
@protocol JavaUtilList;
@protocol JavaUtilMap;


#pragma clang diagnostic ignored "-Wprotocol"

@interface ASRadioButtonImpl () {
 @public
  id<ADCanvas> canvas_;
  NSString *ellipsize_;
  ADColorStateList *drawableTint_;
  id timer_;
  jboolean isDisposed_;
  ASRadioButtonImpl_DellocHandler *dellocHandler_;
  ASRadioButtonImpl_PostMeasureHandler *postMeasureHandler_;
  NSString *POST_MEASURE_EVENT_;
  jboolean html_;
  jboolean escapeHtml_;
  id<JavaUtilMap> htmlConfig_;
  id<JavaUtilMap> fontDescriptors_;
  ASRadioButtonImpl_MarqueeTask *marqueeTask_;
  jint marqueeRepeatLimit_;
  ASMarqueeCommandConverter *marqueeCommandConverter_;
  jint autoSizeMin_;
  jint autoSizeMax_;
  jint autoSizeGranular_;
}

- (void)setWidgetOnNativeClass;

- (void)nativeCreateWithJavaUtilMap:(id<JavaUtilMap>)params;

- (void)handleHtmlTextWithNSString:(NSString *)text;

- (void)nativeSetTextWithNSString:(NSString *)text;

- (void)nativeSetHtmlTextWithId:(id)text;

- (id)getMyText;

- (id)getPaddingTop;

- (id)getPaddingEnd;

- (id)getPaddingStart;

- (id)getPaddingLeft;

- (id)getPaddingRight;

- (id)getPaddingBottom;

- (void)setPaddingVerticalWithId:(id)objValue;

- (void)setPaddingHorizontalWithId:(id)objValue;

- (void)setPaddingEndWithId:(id)objValue;

- (void)setPaddingStartWithId:(id)objValue;

- (id)getTextSize;

- (void)setMyTextSizeWithId:(id)objValue;

- (void)nativeSetTextSizeWithInt:(jint)value;

- (void)setVerticalAligmentCenter;

- (void)setVerticalAligmentBottom;

- (void)setVerticalAligmentTop;

- (void)setHorizontalAligmentCenter;

- (void)setHorizontalAligmentRight;

- (void)setHorizontalAligmentRightInternal;

- (void)setHorizontalAligmentLeft;

- (void)setHorizontalAligmentLeftInternal;

- (jint)getTextAlignment;

- (void)nativeSetVerticalAligmentBottom;

- (void)nativeSetVerticalAligmentTop;

- (void)nativeSetVerticalAligmentCenter;

- (void)addMinMaxListener;

- (jint)getLineHeight;

- (jint)getBorderWidth;

- (id)getEllipsize;

- (void)setEllipsizeWithId:(id)objValue
              withNSString:(NSString *)strValue;

- (JavaLangInteger *)nativeGetLinBreakMode;

- (void)nativeSetLineBreakModeWithInt:(jint)lineBreakMode;

- (void)setJustificationModeWithId:(id)objValue
                      withNSString:(NSString *)strValue;

- (void)nativeSetTextAligmentWithInt:(jint)textAlignment;

- (id)getJustificationMode;

- (JavaLangInteger *)nativeGetTextAligment;

- (void)setShadowDyWithJavaLangFloat:(JavaLangFloat *)objValue
                        withNSString:(NSString *)strValue;

- (void)setShadowDxWithJavaLangFloat:(JavaLangFloat *)objValue
                        withNSString:(NSString *)strValue;

- (id)getShadowDy;

- (id)getShadowDx;

- (void)setSingleLineWithId:(id)objValue;

- (id)getSingleLine;

- (void)setEnabledWithId:(id)objValue;

- (jint)nativeGetFontSize;

- (jint)nativeGetFontStyle;

- (void)nativeSetCustomFontWithInt:(jint)height
              withASFontDescriptor:(ASFontDescriptor *)fontDescriptor;

- (void)nativeSetFontStyleWithInt:(jint)style;

- (void)setDrawablePaddingWithId:(id)objValue;

- (void)setDrawableBottomWithId:(id)objValue;

- (void)setDrawableTopWithId:(id)objValue;

- (void)setDrawableRightWithNSString:(NSString *)originalAttr
                              withId:(id)objValue;

- (void)setDrawableRightInternalWithNSString:(NSString *)originalAttr
                                      withId:(id)objValue;

- (void)setDrawableLeftWithNSString:(NSString *)originalAttr
                             withId:(id)objValue;

- (void)setDrawableLeftInternalWithNSString:(NSString *)originalAttr
                                     withId:(id)objValue;

- (jint)getImageHeightWithId:(id)objValue;

- (jint)getImageWidthWithId:(id)objValue;

- (id)getDrawablePadding;

- (void)setDrawableTintModeWithId:(id)value;

- (void)setDrawableTintWithId:(id)objValue;

- (void)setScrollHorizontallyWithId:(id)objValue;

- (jboolean)canMarquee;

- (void)cancelNativeTimer;

- (jboolean)isDisposed;

- (void)addDeallocHandler;

- (void)schedule;

- (void)executeOnMainThreadWithJavaLangRunnable:(id<JavaLangRunnable>)runnable;

- (void)setTextColorWithId:(id)objValue;

- (id)getTextColorState;

- (void)drawableStateChangeWithNSString:(NSString *)type
                         withADDrawable:(ADDrawable *)dr;

- (void)setHintColorWithInt:(jint)currentHintTextColor;

- (void)syncPlaceholderLabel;

- (jint)nativeGetBaseLine;

- (id)getFont;

- (void)setTextColorLinkWithADColorStateList:(ADColorStateList *)linkTextColors;

- (void)setButtonWithId:(id)objValue;

- (void)setOnCheckedWithId:(id)objValue;

- (void)setCheckedWithId:(id)objValue;

- (void)postSetAttributeWithASWidgetAttribute:(ASWidgetAttribute *)key
                                 withNSString:(NSString *)strValue
                                       withId:(id)objValue
                    withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator;

- (id)getButton;

- (id)getChecked;

- (void)createLabelWithJavaUtilMap:(id<JavaUtilMap>)params
                    withADTextView:(ADTextView *)asWidget;

- (void)createLabelWithJavaUtilMap:(id<JavaUtilMap>)params;

- (void)drawableStateChangedAdditionalAttrs;

- (void)setButtonTintWithId:(id)objValue;

- (void)setButtonTintModeWithId:(id)objValue;

- (void)setGravityWithId:(id)objValue;

- (void)updateTextAlignment;

- (id)getGravity;

- (void)setDrawableIconSizeWithId:(id)objValue;

- (id)getMinHeight;

- (id)getMinWidth;

- (void)setEmsWithId:(id)objValue;

- (void)setMinEmsWithId:(id)objValue;

- (void)setMaxEmsWithId:(id)objValue;

- (void)setWidthWithId:(id)objValue;

- (void)setHeightWithId:(id)objValue;

- (void)setMaxLinesWithId:(id)objValue;

- (void)setLinesWithId:(id)objValue;

- (void)setMinLinesWithId:(id)objValue;

- (void)setMaxHeightWithId:(id)objValue;

- (void)setMaxWidthWithId:(id)objValue;

- (void)setMinHeightWithId:(id)objValue;

- (void)setMinWidthWithId:(id)objValue;

- (id)getWidth;

- (jint)getHeight;

- (jint)getAutoSizeTextTypeWithADTextView:(ADTextView *)measurableView;

- (void)setAutoSizeTextTypeInternalWithInt:(jint)autoTextType;

- (void)setAutoSizePresetSizesWithId:(id)objValue;

- (void)addAutoResizeListener;

- (void)removeResizeListener;

- (void)setMaxLengthWithId:(id)objValue;

- (void)setMyTextWithId:(id)objValue;

- (void)setTextAllCapsWithId:(id)objValue;

- (void)initHtmlWithJavaUtilMap:(id<JavaUtilMap>)params OBJC_METHOD_FAMILY_NONE;

- (void)setTypeFaceWithId:(id)objValue
             withNSString:(NSString *)strValue;

- (void)setFontFamilyWithId:(id)objValue
               withNSString:(NSString *)strValue;

- (void)setTextStyleWithId:(id)objValue;

- (jint)calcNumberOfWhiteSpaces;

- (void)cancelTimer;

- (void)startTimer;

- (id)getMarqueeRepeatLimit;

- (void)setMarqueeRepeatLimitWithId:(id)objValue;

- (void)startOrStopMarqueeWithId:(id)objValue;

- (jint)getLabelWidth;

- (jboolean)isLabelMeasured;

- (void)setPasswordWithId:(id)objValue;

- (void)setFirstBaselineToTopHeightWithId:(id)objValue;

- (jboolean)getIncludeFontPadding;

- (id)getFirstBaselineToTopHeight;

- (void)setLastBaselineToBottomHeightWithId:(id)objValue;

- (id)getLastBaselineToBottomHeight;

- (void)setAutoSizeStepGranularityWithId:(id)objValue;

- (void)setAutoMinTextSizeWithId:(id)objValue;

- (void)setAutoMaxTextSizeWithId:(id)objValue;

- (void)setAutoSizeTextTypeWithId:(id)objValue;

- (id)getAutoSizeStepGranularity;

- (id)getAutoMinTextSize;

- (id)getAutoMaxTextSize;

- (id)getAutoSizeTextType;

- (void)setTextFormatWithId:(id)objValue;

- (jboolean)allowUnCheck;

- (void)setErrorWithId:(id)object;

@end

J2OBJC_FIELD_SETTER(ASRadioButtonImpl, canvas_, id<ADCanvas>)
J2OBJC_FIELD_SETTER(ASRadioButtonImpl, ellipsize_, NSString *)
J2OBJC_FIELD_SETTER(ASRadioButtonImpl, drawableTint_, ADColorStateList *)
J2OBJC_FIELD_SETTER(ASRadioButtonImpl, timer_, id)
J2OBJC_FIELD_SETTER(ASRadioButtonImpl, dellocHandler_, ASRadioButtonImpl_DellocHandler *)
J2OBJC_FIELD_SETTER(ASRadioButtonImpl, postMeasureHandler_, ASRadioButtonImpl_PostMeasureHandler *)
J2OBJC_FIELD_SETTER(ASRadioButtonImpl, POST_MEASURE_EVENT_, NSString *)
J2OBJC_FIELD_SETTER(ASRadioButtonImpl, htmlConfig_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(ASRadioButtonImpl, fontDescriptors_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(ASRadioButtonImpl, marqueeTask_, ASRadioButtonImpl_MarqueeTask *)
J2OBJC_FIELD_SETTER(ASRadioButtonImpl, marqueeCommandConverter_, ASMarqueeCommandConverter *)

inline jint ASRadioButtonImpl_get_TEXT_ALIGN_CENTER(void);
#define ASRadioButtonImpl_TEXT_ALIGN_CENTER 2
J2OBJC_STATIC_FIELD_CONSTANT(ASRadioButtonImpl, TEXT_ALIGN_CENTER, jint)

inline jint ASRadioButtonImpl_get_TEXT_ALIGN_LEFT(void);
#define ASRadioButtonImpl_TEXT_ALIGN_LEFT 0
J2OBJC_STATIC_FIELD_CONSTANT(ASRadioButtonImpl, TEXT_ALIGN_LEFT, jint)

inline jint ASRadioButtonImpl_get_TEXT_ALIGN_RIGHT(void);
#define ASRadioButtonImpl_TEXT_ALIGN_RIGHT 1
J2OBJC_STATIC_FIELD_CONSTANT(ASRadioButtonImpl, TEXT_ALIGN_RIGHT, jint)

inline jint ASRadioButtonImpl_get_ITALIC_FONT_TRAIT(void);
inline jint ASRadioButtonImpl_set_ITALIC_FONT_TRAIT(jint value);
inline jint *ASRadioButtonImpl_getRef_ITALIC_FONT_TRAIT(void);
static jint ASRadioButtonImpl_ITALIC_FONT_TRAIT;
J2OBJC_STATIC_FIELD_PRIMITIVE(ASRadioButtonImpl, ITALIC_FONT_TRAIT, jint)

inline jint ASRadioButtonImpl_get_BOLD_FONT_TRAIT(void);
inline jint ASRadioButtonImpl_set_BOLD_FONT_TRAIT(jint value);
inline jint *ASRadioButtonImpl_getRef_BOLD_FONT_TRAIT(void);
static jint ASRadioButtonImpl_BOLD_FONT_TRAIT;
J2OBJC_STATIC_FIELD_PRIMITIVE(ASRadioButtonImpl, BOLD_FONT_TRAIT, jint)

inline jint ASRadioButtonImpl_get_NORMAL_FONT_TRAIT(void);
#define ASRadioButtonImpl_NORMAL_FONT_TRAIT 0
J2OBJC_STATIC_FIELD_CONSTANT(ASRadioButtonImpl, NORMAL_FONT_TRAIT, jint)

__attribute__((unused)) static void ASRadioButtonImpl_setWidgetOnNativeClass(ASRadioButtonImpl *self);

__attribute__((unused)) static void ASRadioButtonImpl_nativeCreateWithJavaUtilMap_(ASRadioButtonImpl *self, id<JavaUtilMap> params);

__attribute__((unused)) static void ASRadioButtonImpl_handleHtmlTextWithNSString_(ASRadioButtonImpl *self, NSString *text);

__attribute__((unused)) static void ASRadioButtonImpl_nativeSetTextWithNSString_(ASRadioButtonImpl *self, NSString *text);

__attribute__((unused)) static void ASRadioButtonImpl_nativeSetHtmlTextWithId_(ASRadioButtonImpl *self, id text);

__attribute__((unused)) static id ASRadioButtonImpl_getMyText(ASRadioButtonImpl *self);

__attribute__((unused)) static id ASRadioButtonImpl_getPaddingTop(ASRadioButtonImpl *self);

__attribute__((unused)) static id ASRadioButtonImpl_getPaddingEnd(ASRadioButtonImpl *self);

__attribute__((unused)) static id ASRadioButtonImpl_getPaddingStart(ASRadioButtonImpl *self);

__attribute__((unused)) static id ASRadioButtonImpl_getPaddingLeft(ASRadioButtonImpl *self);

__attribute__((unused)) static id ASRadioButtonImpl_getPaddingRight(ASRadioButtonImpl *self);

__attribute__((unused)) static id ASRadioButtonImpl_getPaddingBottom(ASRadioButtonImpl *self);

__attribute__((unused)) static void ASRadioButtonImpl_setPaddingVerticalWithId_(ASRadioButtonImpl *self, id objValue);

__attribute__((unused)) static void ASRadioButtonImpl_setPaddingHorizontalWithId_(ASRadioButtonImpl *self, id objValue);

__attribute__((unused)) static void ASRadioButtonImpl_setPaddingEndWithId_(ASRadioButtonImpl *self, id objValue);

__attribute__((unused)) static void ASRadioButtonImpl_setPaddingStartWithId_(ASRadioButtonImpl *self, id objValue);

__attribute__((unused)) static id ASRadioButtonImpl_getTextSize(ASRadioButtonImpl *self);

__attribute__((unused)) static void ASRadioButtonImpl_setMyTextSizeWithId_(ASRadioButtonImpl *self, id objValue);

__attribute__((unused)) static void ASRadioButtonImpl_nativeSetTextSizeWithInt_(ASRadioButtonImpl *self, jint value);

__attribute__((unused)) static void ASRadioButtonImpl_setVerticalAligmentCenter(ASRadioButtonImpl *self);

__attribute__((unused)) static void ASRadioButtonImpl_setVerticalAligmentBottom(ASRadioButtonImpl *self);

__attribute__((unused)) static void ASRadioButtonImpl_setVerticalAligmentTop(ASRadioButtonImpl *self);

__attribute__((unused)) static void ASRadioButtonImpl_setHorizontalAligmentCenter(ASRadioButtonImpl *self);

__attribute__((unused)) static void ASRadioButtonImpl_setHorizontalAligmentRight(ASRadioButtonImpl *self);

__attribute__((unused)) static void ASRadioButtonImpl_setHorizontalAligmentRightInternal(ASRadioButtonImpl *self);

__attribute__((unused)) static void ASRadioButtonImpl_setHorizontalAligmentLeft(ASRadioButtonImpl *self);

__attribute__((unused)) static void ASRadioButtonImpl_setHorizontalAligmentLeftInternal(ASRadioButtonImpl *self);

__attribute__((unused)) static jint ASRadioButtonImpl_getTextAlignment(ASRadioButtonImpl *self);

__attribute__((unused)) static void ASRadioButtonImpl_nativeSetVerticalAligmentBottom(ASRadioButtonImpl *self);

__attribute__((unused)) static void ASRadioButtonImpl_nativeSetVerticalAligmentTop(ASRadioButtonImpl *self);

__attribute__((unused)) static void ASRadioButtonImpl_nativeSetVerticalAligmentCenter(ASRadioButtonImpl *self);

__attribute__((unused)) static void ASRadioButtonImpl_addMinMaxListener(ASRadioButtonImpl *self);

__attribute__((unused)) static jint ASRadioButtonImpl_getLineHeight(ASRadioButtonImpl *self);

__attribute__((unused)) static jint ASRadioButtonImpl_getBorderWidth(ASRadioButtonImpl *self);

__attribute__((unused)) static id ASRadioButtonImpl_getEllipsize(ASRadioButtonImpl *self);

__attribute__((unused)) static void ASRadioButtonImpl_setEllipsizeWithId_withNSString_(ASRadioButtonImpl *self, id objValue, NSString *strValue);

__attribute__((unused)) static JavaLangInteger *ASRadioButtonImpl_nativeGetLinBreakMode(ASRadioButtonImpl *self);

__attribute__((unused)) static void ASRadioButtonImpl_nativeSetLineBreakModeWithInt_(ASRadioButtonImpl *self, jint lineBreakMode);

__attribute__((unused)) static void ASRadioButtonImpl_setJustificationModeWithId_withNSString_(ASRadioButtonImpl *self, id objValue, NSString *strValue);

__attribute__((unused)) static void ASRadioButtonImpl_nativeSetTextAligmentWithInt_(ASRadioButtonImpl *self, jint textAlignment);

__attribute__((unused)) static id ASRadioButtonImpl_getJustificationMode(ASRadioButtonImpl *self);

__attribute__((unused)) static JavaLangInteger *ASRadioButtonImpl_nativeGetTextAligment(ASRadioButtonImpl *self);

__attribute__((unused)) static void ASRadioButtonImpl_setShadowDyWithJavaLangFloat_withNSString_(ASRadioButtonImpl *self, JavaLangFloat *objValue, NSString *strValue);

__attribute__((unused)) static void ASRadioButtonImpl_setShadowDxWithJavaLangFloat_withNSString_(ASRadioButtonImpl *self, JavaLangFloat *objValue, NSString *strValue);

__attribute__((unused)) static id ASRadioButtonImpl_getShadowDy(ASRadioButtonImpl *self);

__attribute__((unused)) static id ASRadioButtonImpl_getShadowDx(ASRadioButtonImpl *self);

__attribute__((unused)) static void ASRadioButtonImpl_setSingleLineWithId_(ASRadioButtonImpl *self, id objValue);

__attribute__((unused)) static id ASRadioButtonImpl_getSingleLine(ASRadioButtonImpl *self);

__attribute__((unused)) static void ASRadioButtonImpl_setEnabledWithId_(ASRadioButtonImpl *self, id objValue);

__attribute__((unused)) static jint ASRadioButtonImpl_nativeGetFontSize(ASRadioButtonImpl *self);

__attribute__((unused)) static jint ASRadioButtonImpl_nativeGetFontStyle(ASRadioButtonImpl *self);

__attribute__((unused)) static void ASRadioButtonImpl_nativeSetCustomFontWithInt_withASFontDescriptor_(ASRadioButtonImpl *self, jint height, ASFontDescriptor *fontDescriptor);

__attribute__((unused)) static void ASRadioButtonImpl_nativeSetFontStyleWithInt_(ASRadioButtonImpl *self, jint style);

__attribute__((unused)) static void ASRadioButtonImpl_setDrawablePaddingWithId_(ASRadioButtonImpl *self, id objValue);

__attribute__((unused)) static void ASRadioButtonImpl_setDrawableBottomWithId_(ASRadioButtonImpl *self, id objValue);

__attribute__((unused)) static void ASRadioButtonImpl_setDrawableTopWithId_(ASRadioButtonImpl *self, id objValue);

__attribute__((unused)) static void ASRadioButtonImpl_setDrawableRightWithNSString_withId_(ASRadioButtonImpl *self, NSString *originalAttr, id objValue);

__attribute__((unused)) static void ASRadioButtonImpl_setDrawableRightInternalWithNSString_withId_(ASRadioButtonImpl *self, NSString *originalAttr, id objValue);

__attribute__((unused)) static void ASRadioButtonImpl_setDrawableLeftWithNSString_withId_(ASRadioButtonImpl *self, NSString *originalAttr, id objValue);

__attribute__((unused)) static void ASRadioButtonImpl_setDrawableLeftInternalWithNSString_withId_(ASRadioButtonImpl *self, NSString *originalAttr, id objValue);

__attribute__((unused)) static jint ASRadioButtonImpl_getImageHeightWithId_(ASRadioButtonImpl *self, id objValue);

__attribute__((unused)) static jint ASRadioButtonImpl_getImageWidthWithId_(ASRadioButtonImpl *self, id objValue);

__attribute__((unused)) static id ASRadioButtonImpl_getDrawablePadding(ASRadioButtonImpl *self);

__attribute__((unused)) static void ASRadioButtonImpl_setDrawableTintModeWithId_(ASRadioButtonImpl *self, id value);

__attribute__((unused)) static void ASRadioButtonImpl_setDrawableTintWithId_(ASRadioButtonImpl *self, id objValue);

__attribute__((unused)) static void ASRadioButtonImpl_setScrollHorizontallyWithId_(ASRadioButtonImpl *self, id objValue);

__attribute__((unused)) static jboolean ASRadioButtonImpl_canMarquee(ASRadioButtonImpl *self);

__attribute__((unused)) static void ASRadioButtonImpl_cancelNativeTimer(ASRadioButtonImpl *self);

__attribute__((unused)) static jboolean ASRadioButtonImpl_isDisposed(ASRadioButtonImpl *self);

__attribute__((unused)) static void ASRadioButtonImpl_addDeallocHandler(ASRadioButtonImpl *self);

__attribute__((unused)) static void ASRadioButtonImpl_schedule(ASRadioButtonImpl *self);

__attribute__((unused)) static void ASRadioButtonImpl_executeOnMainThreadWithJavaLangRunnable_(ASRadioButtonImpl *self, id<JavaLangRunnable> runnable);

__attribute__((unused)) static void ASRadioButtonImpl_setTextColorWithId_(ASRadioButtonImpl *self, id objValue);

__attribute__((unused)) static id ASRadioButtonImpl_getTextColorState(ASRadioButtonImpl *self);

__attribute__((unused)) static void ASRadioButtonImpl_drawableStateChangeWithNSString_withADDrawable_(ASRadioButtonImpl *self, NSString *type, ADDrawable *dr);

__attribute__((unused)) static void ASRadioButtonImpl_setHintColorWithInt_(ASRadioButtonImpl *self, jint currentHintTextColor);

__attribute__((unused)) static void ASRadioButtonImpl_syncPlaceholderLabel(ASRadioButtonImpl *self);

__attribute__((unused)) static jint ASRadioButtonImpl_nativeGetBaseLine(ASRadioButtonImpl *self);

__attribute__((unused)) static id ASRadioButtonImpl_getFont(ASRadioButtonImpl *self);

__attribute__((unused)) static void ASRadioButtonImpl_setTextColorLinkWithADColorStateList_(ASRadioButtonImpl *self, ADColorStateList *linkTextColors);

__attribute__((unused)) static void ASRadioButtonImpl_setButtonWithId_(ASRadioButtonImpl *self, id objValue);

__attribute__((unused)) static void ASRadioButtonImpl_setOnCheckedWithId_(ASRadioButtonImpl *self, id objValue);

__attribute__((unused)) static void ASRadioButtonImpl_setCheckedWithId_(ASRadioButtonImpl *self, id objValue);

__attribute__((unused)) static void ASRadioButtonImpl_postSetAttributeWithASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(ASRadioButtonImpl *self, ASWidgetAttribute *key, NSString *strValue, id objValue, id<ASILifeCycleDecorator> decorator);

__attribute__((unused)) static id ASRadioButtonImpl_getButton(ASRadioButtonImpl *self);

__attribute__((unused)) static id ASRadioButtonImpl_getChecked(ASRadioButtonImpl *self);

__attribute__((unused)) static void ASRadioButtonImpl_createLabelWithJavaUtilMap_withADTextView_(ASRadioButtonImpl *self, id<JavaUtilMap> params, ADTextView *asWidget);

__attribute__((unused)) static void ASRadioButtonImpl_createLabelWithJavaUtilMap_(ASRadioButtonImpl *self, id<JavaUtilMap> params);

__attribute__((unused)) static void ASRadioButtonImpl_drawableStateChangedAdditionalAttrs(ASRadioButtonImpl *self);

__attribute__((unused)) static void ASRadioButtonImpl_setButtonTintWithId_(ASRadioButtonImpl *self, id objValue);

__attribute__((unused)) static void ASRadioButtonImpl_setButtonTintModeWithId_(ASRadioButtonImpl *self, id objValue);

__attribute__((unused)) static void ASRadioButtonImpl_setGravityWithId_(ASRadioButtonImpl *self, id objValue);

__attribute__((unused)) static void ASRadioButtonImpl_updateTextAlignment(ASRadioButtonImpl *self);

__attribute__((unused)) static id ASRadioButtonImpl_getGravity(ASRadioButtonImpl *self);

__attribute__((unused)) static void ASRadioButtonImpl_setDrawableIconSizeWithId_(ASRadioButtonImpl *self, id objValue);

__attribute__((unused)) static id ASRadioButtonImpl_getMinHeight(ASRadioButtonImpl *self);

__attribute__((unused)) static id ASRadioButtonImpl_getMinWidth(ASRadioButtonImpl *self);

__attribute__((unused)) static void ASRadioButtonImpl_setEmsWithId_(ASRadioButtonImpl *self, id objValue);

__attribute__((unused)) static void ASRadioButtonImpl_setMinEmsWithId_(ASRadioButtonImpl *self, id objValue);

__attribute__((unused)) static void ASRadioButtonImpl_setMaxEmsWithId_(ASRadioButtonImpl *self, id objValue);

__attribute__((unused)) static void ASRadioButtonImpl_setWidthWithId_(ASRadioButtonImpl *self, id objValue);

__attribute__((unused)) static void ASRadioButtonImpl_setHeightWithId_(ASRadioButtonImpl *self, id objValue);

__attribute__((unused)) static void ASRadioButtonImpl_setMaxLinesWithId_(ASRadioButtonImpl *self, id objValue);

__attribute__((unused)) static void ASRadioButtonImpl_setLinesWithId_(ASRadioButtonImpl *self, id objValue);

__attribute__((unused)) static void ASRadioButtonImpl_setMinLinesWithId_(ASRadioButtonImpl *self, id objValue);

__attribute__((unused)) static void ASRadioButtonImpl_setMaxHeightWithId_(ASRadioButtonImpl *self, id objValue);

__attribute__((unused)) static void ASRadioButtonImpl_setMaxWidthWithId_(ASRadioButtonImpl *self, id objValue);

__attribute__((unused)) static void ASRadioButtonImpl_setMinHeightWithId_(ASRadioButtonImpl *self, id objValue);

__attribute__((unused)) static void ASRadioButtonImpl_setMinWidthWithId_(ASRadioButtonImpl *self, id objValue);

__attribute__((unused)) static id ASRadioButtonImpl_getWidth(ASRadioButtonImpl *self);

__attribute__((unused)) static jint ASRadioButtonImpl_getHeight(ASRadioButtonImpl *self);

__attribute__((unused)) static jint ASRadioButtonImpl_getAutoSizeTextTypeWithADTextView_(ASRadioButtonImpl *self, ADTextView *measurableView);

__attribute__((unused)) static void ASRadioButtonImpl_setAutoSizeTextTypeInternalWithInt_(ASRadioButtonImpl *self, jint autoTextType);

__attribute__((unused)) static void ASRadioButtonImpl_setAutoSizePresetSizesWithId_(ASRadioButtonImpl *self, id objValue);

__attribute__((unused)) static void ASRadioButtonImpl_addAutoResizeListener(ASRadioButtonImpl *self);

__attribute__((unused)) static void ASRadioButtonImpl_removeResizeListener(ASRadioButtonImpl *self);

__attribute__((unused)) static void ASRadioButtonImpl_setMaxLengthWithId_(ASRadioButtonImpl *self, id objValue);

__attribute__((unused)) static void ASRadioButtonImpl_setMyTextWithId_(ASRadioButtonImpl *self, id objValue);

__attribute__((unused)) static void ASRadioButtonImpl_setTextAllCapsWithId_(ASRadioButtonImpl *self, id objValue);

__attribute__((unused)) static void ASRadioButtonImpl_initHtmlWithJavaUtilMap_(ASRadioButtonImpl *self, id<JavaUtilMap> params);

__attribute__((unused)) static void ASRadioButtonImpl_setTypeFaceWithId_withNSString_(ASRadioButtonImpl *self, id objValue, NSString *strValue);

__attribute__((unused)) static void ASRadioButtonImpl_setFontFamilyWithId_withNSString_(ASRadioButtonImpl *self, id objValue, NSString *strValue);

__attribute__((unused)) static void ASRadioButtonImpl_setTextStyleWithId_(ASRadioButtonImpl *self, id objValue);

__attribute__((unused)) static jint ASRadioButtonImpl_calcNumberOfWhiteSpaces(ASRadioButtonImpl *self);

__attribute__((unused)) static void ASRadioButtonImpl_cancelTimer(ASRadioButtonImpl *self);

__attribute__((unused)) static void ASRadioButtonImpl_startTimer(ASRadioButtonImpl *self);

__attribute__((unused)) static id ASRadioButtonImpl_getMarqueeRepeatLimit(ASRadioButtonImpl *self);

__attribute__((unused)) static void ASRadioButtonImpl_setMarqueeRepeatLimitWithId_(ASRadioButtonImpl *self, id objValue);

__attribute__((unused)) static void ASRadioButtonImpl_startOrStopMarqueeWithId_(ASRadioButtonImpl *self, id objValue);

__attribute__((unused)) static jint ASRadioButtonImpl_getLabelWidth(ASRadioButtonImpl *self);

__attribute__((unused)) static jboolean ASRadioButtonImpl_isLabelMeasured(ASRadioButtonImpl *self);

__attribute__((unused)) static void ASRadioButtonImpl_setPasswordWithId_(ASRadioButtonImpl *self, id objValue);

__attribute__((unused)) static void ASRadioButtonImpl_setFirstBaselineToTopHeightWithId_(ASRadioButtonImpl *self, id objValue);

__attribute__((unused)) static jboolean ASRadioButtonImpl_getIncludeFontPadding(ASRadioButtonImpl *self);

__attribute__((unused)) static id ASRadioButtonImpl_getFirstBaselineToTopHeight(ASRadioButtonImpl *self);

__attribute__((unused)) static void ASRadioButtonImpl_setLastBaselineToBottomHeightWithId_(ASRadioButtonImpl *self, id objValue);

__attribute__((unused)) static id ASRadioButtonImpl_getLastBaselineToBottomHeight(ASRadioButtonImpl *self);

__attribute__((unused)) static void ASRadioButtonImpl_setAutoSizeStepGranularityWithId_(ASRadioButtonImpl *self, id objValue);

__attribute__((unused)) static void ASRadioButtonImpl_setAutoMinTextSizeWithId_(ASRadioButtonImpl *self, id objValue);

__attribute__((unused)) static void ASRadioButtonImpl_setAutoMaxTextSizeWithId_(ASRadioButtonImpl *self, id objValue);

__attribute__((unused)) static void ASRadioButtonImpl_setAutoSizeTextTypeWithId_(ASRadioButtonImpl *self, id objValue);

__attribute__((unused)) static id ASRadioButtonImpl_getAutoSizeStepGranularity(ASRadioButtonImpl *self);

__attribute__((unused)) static id ASRadioButtonImpl_getAutoMinTextSize(ASRadioButtonImpl *self);

__attribute__((unused)) static id ASRadioButtonImpl_getAutoMaxTextSize(ASRadioButtonImpl *self);

__attribute__((unused)) static id ASRadioButtonImpl_getAutoSizeTextType(ASRadioButtonImpl *self);

__attribute__((unused)) static void ASRadioButtonImpl_setTextFormatWithId_(ASRadioButtonImpl *self, id objValue);

__attribute__((unused)) static jboolean ASRadioButtonImpl_allowUnCheck(ASRadioButtonImpl *self);

__attribute__((unused)) static void ASRadioButtonImpl_setErrorWithId_(ASRadioButtonImpl *self, id object);

@interface ASRadioButtonImpl_ButtonTinttMode () {
 @public
  id<JavaUtilMap> mapping_;
}

@end

J2OBJC_FIELD_SETTER(ASRadioButtonImpl_ButtonTinttMode, mapping_, id<JavaUtilMap>)

@interface ASRadioButtonImpl_Ellipsize () {
 @public
  id<JavaUtilMap> mapping_;
}

@end

J2OBJC_FIELD_SETTER(ASRadioButtonImpl_Ellipsize, mapping_, id<JavaUtilMap>)

@interface ASRadioButtonImpl_MarqueeRepeatLimit () {
 @public
  id<JavaUtilMap> mapping_;
}

@end

J2OBJC_FIELD_SETTER(ASRadioButtonImpl_MarqueeRepeatLimit, mapping_, id<JavaUtilMap>)

@interface ASRadioButtonImpl_JustificationMode () {
 @public
  id<JavaUtilMap> mapping_;
}

@end

J2OBJC_FIELD_SETTER(ASRadioButtonImpl_JustificationMode, mapping_, id<JavaUtilMap>)

@interface ASRadioButtonImpl_Font () {
 @public
  id<JavaUtilMap> mapping_;
}

@end

J2OBJC_FIELD_SETTER(ASRadioButtonImpl_Font, mapping_, id<JavaUtilMap>)

@interface ASRadioButtonImpl_TextStyle () {
 @public
  id<JavaUtilMap> mapping_;
}

@end

J2OBJC_FIELD_SETTER(ASRadioButtonImpl_TextStyle, mapping_, id<JavaUtilMap>)

@interface ASRadioButtonImpl_DrawableTintMode () {
 @public
  id<JavaUtilMap> mapping_;
}

@end

J2OBJC_FIELD_SETTER(ASRadioButtonImpl_DrawableTintMode, mapping_, id<JavaUtilMap>)

@interface ASRadioButtonImpl_RadioButtonExt () {
 @public
  __unsafe_unretained ASRadioButtonImpl *this$0_;
  ASMeasureEvent *measureFinished_;
  ASOnLayoutEvent *onLayoutEvent_;
  id<JavaUtilList> overlays_;
  id<JavaUtilMap> templates_;
}

@end

J2OBJC_FIELD_SETTER(ASRadioButtonImpl_RadioButtonExt, measureFinished_, ASMeasureEvent *)
J2OBJC_FIELD_SETTER(ASRadioButtonImpl_RadioButtonExt, onLayoutEvent_, ASOnLayoutEvent *)
J2OBJC_FIELD_SETTER(ASRadioButtonImpl_RadioButtonExt, overlays_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(ASRadioButtonImpl_RadioButtonExt, templates_, id<JavaUtilMap>)

@interface ASRadioButtonImpl_DellocHandler : ASEventBusHandler {
 @public
  __unsafe_unretained ASRadioButtonImpl *this$0_;
}

- (instancetype)initWithASRadioButtonImpl:(ASRadioButtonImpl *)outer$
                             withNSString:(NSString *)type;

- (void)doPerformWithId:(id)payload;

@end

J2OBJC_EMPTY_STATIC_INIT(ASRadioButtonImpl_DellocHandler)

__attribute__((unused)) static void ASRadioButtonImpl_DellocHandler_initWithASRadioButtonImpl_withNSString_(ASRadioButtonImpl_DellocHandler *self, ASRadioButtonImpl *outer$, NSString *type);

__attribute__((unused)) static ASRadioButtonImpl_DellocHandler *new_ASRadioButtonImpl_DellocHandler_initWithASRadioButtonImpl_withNSString_(ASRadioButtonImpl *outer$, NSString *type) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASRadioButtonImpl_DellocHandler *create_ASRadioButtonImpl_DellocHandler_initWithASRadioButtonImpl_withNSString_(ASRadioButtonImpl *outer$, NSString *type);

J2OBJC_TYPE_LITERAL_HEADER(ASRadioButtonImpl_DellocHandler)

@interface ASRadioButtonImpl_StateToggler : NSObject < ADView_OnClickListener > {
 @public
  __unsafe_unretained ASRadioButtonImpl *this$0_;
}

- (instancetype)initWithASRadioButtonImpl:(ASRadioButtonImpl *)outer$;

- (void)onClickWithADView:(ADView *)v;

@end

J2OBJC_EMPTY_STATIC_INIT(ASRadioButtonImpl_StateToggler)

__attribute__((unused)) static void ASRadioButtonImpl_StateToggler_initWithASRadioButtonImpl_(ASRadioButtonImpl_StateToggler *self, ASRadioButtonImpl *outer$);

__attribute__((unused)) static ASRadioButtonImpl_StateToggler *new_ASRadioButtonImpl_StateToggler_initWithASRadioButtonImpl_(ASRadioButtonImpl *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASRadioButtonImpl_StateToggler *create_ASRadioButtonImpl_StateToggler_initWithASRadioButtonImpl_(ASRadioButtonImpl *outer$);

J2OBJC_TYPE_LITERAL_HEADER(ASRadioButtonImpl_StateToggler)

@interface ASRadioButtonImpl_MyCanvas : NSObject < ADCanvas >

- (instancetype)initWithASRadioButtonImpl:(ASRadioButtonImpl *)outer$;

- (void)drawWithADDrawable:(ADDrawable *)drawable;

- (void)reset;

@end

J2OBJC_EMPTY_STATIC_INIT(ASRadioButtonImpl_MyCanvas)

__attribute__((unused)) static void ASRadioButtonImpl_MyCanvas_initWithASRadioButtonImpl_(ASRadioButtonImpl_MyCanvas *self, ASRadioButtonImpl *outer$);

__attribute__((unused)) static ASRadioButtonImpl_MyCanvas *new_ASRadioButtonImpl_MyCanvas_initWithASRadioButtonImpl_(ASRadioButtonImpl *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASRadioButtonImpl_MyCanvas *create_ASRadioButtonImpl_MyCanvas_initWithASRadioButtonImpl_(ASRadioButtonImpl *outer$);

J2OBJC_TYPE_LITERAL_HEADER(ASRadioButtonImpl_MyCanvas)

@interface ASRadioButtonImpl_PostMeasureHandler () {
 @public
  __unsafe_unretained ASRadioButtonImpl *this$0_;
  jboolean onlyOnce_;
}

@end

@interface ASRadioButtonImpl_MarqueeTask : NSObject < JavaLangRunnable > {
 @public
  __unsafe_unretained ASRadioButtonImpl *this$0_;
  jint slideLength_;
  jint cycles_;
  jboolean cancel_;
  NSString *direction_;
}

- (instancetype)initWithASRadioButtonImpl:(ASRadioButtonImpl *)outer$
                             withNSString:(NSString *)direction;

- (void)cancel;

- (void)restart;

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(ASRadioButtonImpl_MarqueeTask)

J2OBJC_FIELD_SETTER(ASRadioButtonImpl_MarqueeTask, direction_, NSString *)

__attribute__((unused)) static void ASRadioButtonImpl_MarqueeTask_initWithASRadioButtonImpl_withNSString_(ASRadioButtonImpl_MarqueeTask *self, ASRadioButtonImpl *outer$, NSString *direction);

__attribute__((unused)) static ASRadioButtonImpl_MarqueeTask *new_ASRadioButtonImpl_MarqueeTask_initWithASRadioButtonImpl_withNSString_(ASRadioButtonImpl *outer$, NSString *direction) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASRadioButtonImpl_MarqueeTask *create_ASRadioButtonImpl_MarqueeTask_initWithASRadioButtonImpl_withNSString_(ASRadioButtonImpl *outer$, NSString *direction);

J2OBJC_TYPE_LITERAL_HEADER(ASRadioButtonImpl_MarqueeTask)

@interface ASRadioButtonImpl_MarqueeTask_$Lambda$1 : NSObject < JavaLangRunnable > {
 @public
  ASRadioButtonImpl_MarqueeTask *this$0_;
  jint val$numberOfBlankSpaces_;
}

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(ASRadioButtonImpl_MarqueeTask_$Lambda$1)

__attribute__((unused)) static void ASRadioButtonImpl_MarqueeTask_$Lambda$1_initWithASRadioButtonImpl_MarqueeTask_withInt_(ASRadioButtonImpl_MarqueeTask_$Lambda$1 *self, ASRadioButtonImpl_MarqueeTask *outer$, jint capture$0);

__attribute__((unused)) static ASRadioButtonImpl_MarqueeTask_$Lambda$1 *new_ASRadioButtonImpl_MarqueeTask_$Lambda$1_initWithASRadioButtonImpl_MarqueeTask_withInt_(ASRadioButtonImpl_MarqueeTask *outer$, jint capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASRadioButtonImpl_MarqueeTask_$Lambda$1 *create_ASRadioButtonImpl_MarqueeTask_$Lambda$1_initWithASRadioButtonImpl_MarqueeTask_withInt_(ASRadioButtonImpl_MarqueeTask *outer$, jint capture$0);

@interface ASRadioButtonImpl_OnCheckedChangeListener : NSObject < ADCompoundButton_OnCheckedChangeListener, ASIListener > {
 @public
  id<ASIWidget> w_;
  ADView *view_;
  NSString *strValue_;
  NSString *action_;
}

- (NSString *)getAction;

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue;

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue
                     withNSString:(NSString *)action;

- (void)onCheckedChangedWithADCompoundButton:(ADCompoundButton *)buttonView
                                 withBoolean:(jboolean)isChecked;

- (id<JavaUtilMap>)getOnCheckedChangeEventObjWithADCompoundButton:(ADCompoundButton *)buttonView
                                                      withBoolean:(jboolean)isChecked;

@end

J2OBJC_EMPTY_STATIC_INIT(ASRadioButtonImpl_OnCheckedChangeListener)

J2OBJC_FIELD_SETTER(ASRadioButtonImpl_OnCheckedChangeListener, w_, id<ASIWidget>)
J2OBJC_FIELD_SETTER(ASRadioButtonImpl_OnCheckedChangeListener, view_, ADView *)
J2OBJC_FIELD_SETTER(ASRadioButtonImpl_OnCheckedChangeListener, strValue_, NSString *)
J2OBJC_FIELD_SETTER(ASRadioButtonImpl_OnCheckedChangeListener, action_, NSString *)

__attribute__((unused)) static void ASRadioButtonImpl_OnCheckedChangeListener_initWithASIWidget_withNSString_(ASRadioButtonImpl_OnCheckedChangeListener *self, id<ASIWidget> w, NSString *strValue);

__attribute__((unused)) static ASRadioButtonImpl_OnCheckedChangeListener *new_ASRadioButtonImpl_OnCheckedChangeListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASRadioButtonImpl_OnCheckedChangeListener *create_ASRadioButtonImpl_OnCheckedChangeListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue);

__attribute__((unused)) static void ASRadioButtonImpl_OnCheckedChangeListener_initWithASIWidget_withNSString_withNSString_(ASRadioButtonImpl_OnCheckedChangeListener *self, id<ASIWidget> w, NSString *strValue, NSString *action);

__attribute__((unused)) static ASRadioButtonImpl_OnCheckedChangeListener *new_ASRadioButtonImpl_OnCheckedChangeListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASRadioButtonImpl_OnCheckedChangeListener *create_ASRadioButtonImpl_OnCheckedChangeListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action);

J2OBJC_TYPE_LITERAL_HEADER(ASRadioButtonImpl_OnCheckedChangeListener)

J2OBJC_INITIALIZED_DEFN(ASRadioButtonImpl)

NSString *ASRadioButtonImpl_LOCAL_NAME = @"RadioButton";
NSString *ASRadioButtonImpl_GROUP_NAME = @"RadioButton";

@implementation ASRadioButtonImpl

@synthesize uiView = uiView_;

- (void)loadAttributesWithNSString:(NSString *)attributeName {
  ASViewImpl_register__WithNSString_(attributeName);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosText"])) withTypeWithNSString:@"resourcestring"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosTextColor"])) withTypeWithNSString:@"color"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosIsEnabled"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"enabled"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosAdjustsFontSizeToFitWidth"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosAllowsDefaultTighteningForTruncation"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosMinimumScaleFactor"])) withTypeWithNSString:@"float"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosNumberOfLines"])) withTypeWithNSString:@"int"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosHighlightedTextColor"])) withTypeWithNSString:@"color"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"textColorHighlight"])) withTypeWithNSString:@"color"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosIsHighlighted"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosShadowColor"])) withTypeWithNSString:@"color"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"shadowColor"])) withTypeWithNSString:@"color"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosPreferredMaxLayoutWidth"])) withTypeWithNSString:@"float"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosIsUserInteractionEnabled"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"checked"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"onCheckedChange"])) withTypeWithNSString:@"string"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"button"])) withTypeWithNSString:@"drawable"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"buttonTint"])) withTypeWithNSString:@"colorstate"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_INVALIDATE]);
  ASConverterFactory_register__WithNSString_withASIConverter_(@"RadioButton.buttonTinttMode", new_ASRadioButtonImpl_ButtonTinttMode_init());
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"buttonTintMode"])) withTypeWithNSString:@"RadioButton.buttonTinttMode"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"text"])) withTypeWithNSString:@"resourcestring"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"gravity"])) withTypeWithNSString:@"gravity"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"textSize"])) withTypeWithNSString:@"dimensionsp"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"padding"])) withTypeWithNSString:@"dimension"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"paddingBottom"])) withTypeWithNSString:@"dimension"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"paddingRight"])) withTypeWithNSString:@"dimension"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"paddingLeft"])) withTypeWithNSString:@"dimension"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"paddingStart"])) withTypeWithNSString:@"dimension"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"paddingEnd"])) withTypeWithNSString:@"dimension"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"paddingTop"])) withTypeWithNSString:@"dimension"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"paddingHorizontal"])) withTypeWithNSString:@"dimension"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"paddingVertical"])) withTypeWithNSString:@"dimension"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"minLines"])) withTypeWithNSString:@"int"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"lines"])) withTypeWithNSString:@"int"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"maxLines"])) withTypeWithNSString:@"int"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"minWidth"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"minHeight"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"maxWidth"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"maxHeight"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"height"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"width"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"maxEms"])) withTypeWithNSString:@"int"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"minEms"])) withTypeWithNSString:@"int"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"ems"])) withTypeWithNSString:@"int"]);
  ASConverterFactory_register__WithNSString_withASIConverter_(@"RadioButton.ellipsize", new_ASRadioButtonImpl_Ellipsize_init());
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"ellipsize"])) withTypeWithNSString:@"RadioButton.ellipsize"])) withOrderWithInt:100]);
  ASConverterFactory_register__WithNSString_withASIConverter_(@"RadioButton.marqueeRepeatLimit", new_ASRadioButtonImpl_MarqueeRepeatLimit_init());
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"marqueeRepeatLimit"])) withTypeWithNSString:@"RadioButton.marqueeRepeatLimit"])) withOrderWithInt:100]);
  ASConverterFactory_register__WithNSString_withASIConverter_(@"RadioButton.justificationMode", new_ASRadioButtonImpl_JustificationMode_init());
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"justificationMode"])) withTypeWithNSString:@"RadioButton.justificationMode"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"shadowDx"])) withTypeWithNSString:@"float"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"shadowDy"])) withTypeWithNSString:@"float"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"singleLine"])) withTypeWithNSString:@"boolean"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"editable"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"textAllCaps"])) withTypeWithNSString:@"boolean"])) withOrderWithInt:-1])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"maxLength"])) withTypeWithNSString:@"int"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASConverterFactory_register__WithNSString_withASIConverter_(@"RadioButton.font", new_ASRadioButtonImpl_Font_init());
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"typeface"])) withTypeWithNSString:@"RadioButton.font"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASConverterFactory_register__WithNSString_withASIConverter_(@"RadioButton.textStyle", new_ASRadioButtonImpl_TextStyle_init());
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"textStyle"])) withTypeWithNSString:@"RadioButton.textStyle"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"fontFamily"])) withTypeWithNSString:@"font"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"drawableStart"])) withTypeWithNSString:@"drawable"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT_N_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"drawableEnd"])) withTypeWithNSString:@"drawable"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT_N_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"drawableTop"])) withTypeWithNSString:@"drawable"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT_N_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"drawableBottom"])) withTypeWithNSString:@"drawable"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT_N_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"drawablePadding"])) withTypeWithNSString:@"dimension"])) withOrderWithInt:1])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"drawableTint"])) withTypeWithNSString:@"colorstate"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_INVALIDATE]);
  ASConverterFactory_register__WithNSString_withASIConverter_(@"RadioButton.drawableTintMode", new_ASRadioButtonImpl_DrawableTintMode_init());
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"drawableTintMode"])) withTypeWithNSString:@"RadioButton.drawableTintMode"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"scrollHorizontally"])) withTypeWithNSString:@"boolean"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"firstBaselineToTopHeight"])) withTypeWithNSString:@"dimension"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"lastBaselineToBottomHeight"])) withTypeWithNSString:@"dimension"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"textColor"])) withTypeWithNSString:@"colorstate"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"textFormat"])) withTypeWithNSString:@"resourcestring"])) withOrderWithInt:-1]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"textAppearance"])) withTypeWithNSString:@"string"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT])) withStylePriorityWithJavaLangInteger:JavaLangInteger_valueOfWithInt_(1)]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"drawableIconSize"])) withTypeWithNSString:@"dimension"])) withOrderWithInt:-1])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerConstructorAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"html"])) withTypeWithNSString:@"boolean"]);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASRadioButtonImpl_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithNSString:(NSString *)localname {
  ASRadioButtonImpl_initWithNSString_(self, localname);
  return self;
}

- (instancetype)initWithNSString:(NSString *)groupName
                    withNSString:(NSString *)localname {
  ASRadioButtonImpl_initWithNSString_withNSString_(self, groupName, localname);
  return self;
}

- (IOSClass *)getViewClass {
  return ASRadioButtonImpl_RadioButtonExt_class_();
}

- (id<ASIWidget>)newInstance {
  return new_ASRadioButtonImpl_initWithNSString_withNSString_(groupName_, localName_);
}

- (void)createWithASIFragment:(id<ASIFragment>)fragment
              withJavaUtilMap:(id<JavaUtilMap>)params {
  [super createWithASIFragment:fragment withJavaUtilMap:params];
  measurableView_ = new_ASRadioButtonImpl_RadioButtonExt_initWithASRadioButtonImpl_(self);
  ASRadioButtonImpl_nativeCreateWithJavaUtilMap_(self, params);
  ASViewImpl_registerCommandConveterWithASIWidget_(self);
  ASRadioButtonImpl_setWidgetOnNativeClass(self);
}

- (void)setWidgetOnNativeClass {
  ASRadioButtonImpl_setWidgetOnNativeClass(self);
}

- (void)setAttributeWithASWidgetAttribute:(ASWidgetAttribute *)key
                             withNSString:(NSString *)strValue
                                   withId:(id)objValue
                withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  id nativeWidget = [self asNativeWidget];
  ASViewImpl_setAttributeWithASIWidget_withASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(self, key, strValue, objValue, decorator);
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"iosText", @"iosTextColor", @"enabled", @"iosIsEnabled", @"iosAdjustsFontSizeToFitWidth", @"iosAllowsDefaultTighteningForTruncation", @"iosMinimumScaleFactor", @"iosNumberOfLines", @"textColorHighlight", @"iosHighlightedTextColor", @"iosIsHighlighted", @"shadowColor", @"iosShadowColor", @"iosPreferredMaxLayoutWidth", @"iosIsUserInteractionEnabled", @"checked", @"onCheckedChange", @"button", @"buttonTint", @"buttonTintMode", @"text", @"gravity", @"textSize", @"padding", @"paddingBottom", @"paddingRight", @"paddingLeft", @"paddingStart", @"paddingEnd", @"paddingTop", @"paddingHorizontal", @"paddingVertical", @"minLines", @"lines", @"maxLines", @"minWidth", @"minHeight", @"maxWidth", @"maxHeight", @"height", @"width", @"maxEms", @"minEms", @"ems", @"ellipsize", @"marqueeRepeatLimit", @"justificationMode", @"shadowDx", @"shadowDy", @"singleLine", @"editable", @"textAllCaps", @"maxLength", @"typeface", @"textStyle", @"fontFamily", @"drawableStart", @"drawableEnd", @"drawableTop", @"drawableBottom", @"drawablePadding", @"drawableTint", @"drawableTintMode", @"scrollHorizontally", @"firstBaselineToTopHeight", @"lastBaselineToBottomHeight", @"textColor", @"textFormat", @"textAppearance", @"drawableIconSize" }, 70)) {
    case 0:
    {
      [self setTextWithId:nativeWidget withId:objValue];
    }
    break;
    case 1:
    {
      [self setTextColorWithId:nativeWidget withId:objValue];
    }
    break;
    case 2:
    case 3:
    {
      [self setIsEnabledWithId:nativeWidget withId:objValue];
    }
    break;
    case 4:
    {
      [self setAdjustsFontSizeToFitWidthWithId:nativeWidget withId:objValue];
    }
    break;
    case 5:
    {
      [self setAllowsDefaultTighteningForTruncationWithId:nativeWidget withId:objValue];
    }
    break;
    case 6:
    {
      [self setMinimumScaleFactorWithId:nativeWidget withId:objValue];
    }
    break;
    case 7:
    {
      [self setNumberOfLinesWithId:nativeWidget withId:objValue];
    }
    break;
    case 8:
    case 9:
    {
      [self setHighlightedTextColorWithId:nativeWidget withId:objValue];
    }
    break;
    case 10:
    {
      [self setIsHighlightedWithId:nativeWidget withId:objValue];
    }
    break;
    case 11:
    case 12:
    {
      [self setShadowColorWithId:nativeWidget withId:objValue];
    }
    break;
    case 13:
    {
      [self setPreferredMaxLayoutWidthWithId:nativeWidget withId:objValue];
    }
    break;
    case 14:
    {
      [self setIsUserInteractionEnabledWithId:nativeWidget withId:objValue];
    }
    break;
    case 15:
    {
      ASRadioButtonImpl_setCheckedWithId_(self, objValue);
    }
    break;
    case 16:
    {
      ASRadioButtonImpl_setOnCheckedWithId_(self, objValue);
    }
    break;
    case 17:
    {
      ASRadioButtonImpl_setButtonWithId_(self, objValue);
    }
    break;
    case 18:
    {
      ASRadioButtonImpl_setButtonTintWithId_(self, objValue);
    }
    break;
    case 19:
    {
      ASRadioButtonImpl_setButtonTintModeWithId_(self, objValue);
    }
    break;
    case 20:
    {
      ASRadioButtonImpl_setMyTextWithId_(self, objValue);
    }
    break;
    case 21:
    {
      ASRadioButtonImpl_setGravityWithId_(self, objValue);
    }
    break;
    case 22:
    {
      ASRadioButtonImpl_setMyTextSizeWithId_(self, objValue);
    }
    break;
    case 23:
    {
      [self setPaddingWithId:objValue];
    }
    break;
    case 24:
    {
      [self setPaddingBottomWithId:objValue];
    }
    break;
    case 25:
    {
      [self setPaddingRightWithId:objValue];
    }
    break;
    case 26:
    {
      [self setPaddingLeftWithId:objValue];
    }
    break;
    case 27:
    {
      ASRadioButtonImpl_setPaddingStartWithId_(self, objValue);
    }
    break;
    case 28:
    {
      ASRadioButtonImpl_setPaddingEndWithId_(self, objValue);
    }
    break;
    case 29:
    {
      [self setPaddingTopWithId:objValue];
    }
    break;
    case 30:
    {
      ASRadioButtonImpl_setPaddingHorizontalWithId_(self, objValue);
    }
    break;
    case 31:
    {
      ASRadioButtonImpl_setPaddingVerticalWithId_(self, objValue);
    }
    break;
    case 32:
    {
      ASRadioButtonImpl_setMinLinesWithId_(self, objValue);
    }
    break;
    case 33:
    {
      ASRadioButtonImpl_setLinesWithId_(self, objValue);
    }
    break;
    case 34:
    {
      ASRadioButtonImpl_setMaxLinesWithId_(self, objValue);
    }
    break;
    case 35:
    {
      ASRadioButtonImpl_setMinWidthWithId_(self, objValue);
    }
    break;
    case 36:
    {
      ASRadioButtonImpl_setMinHeightWithId_(self, objValue);
    }
    break;
    case 37:
    {
      ASRadioButtonImpl_setMaxWidthWithId_(self, objValue);
    }
    break;
    case 38:
    {
      ASRadioButtonImpl_setMaxHeightWithId_(self, objValue);
    }
    break;
    case 39:
    {
      ASRadioButtonImpl_setHeightWithId_(self, objValue);
    }
    break;
    case 40:
    {
      ASRadioButtonImpl_setWidthWithId_(self, objValue);
    }
    break;
    case 41:
    {
      ASRadioButtonImpl_setMaxEmsWithId_(self, objValue);
    }
    break;
    case 42:
    {
      ASRadioButtonImpl_setMinEmsWithId_(self, objValue);
    }
    break;
    case 43:
    {
      ASRadioButtonImpl_setEmsWithId_(self, objValue);
    }
    break;
    case 44:
    {
      ASRadioButtonImpl_setEllipsizeWithId_withNSString_(self, objValue, strValue);
    }
    break;
    case 45:
    {
      ASRadioButtonImpl_setMarqueeRepeatLimitWithId_(self, objValue);
    }
    break;
    case 46:
    {
      ASRadioButtonImpl_setJustificationModeWithId_withNSString_(self, objValue, strValue);
    }
    break;
    case 47:
    {
      ASRadioButtonImpl_setShadowDxWithJavaLangFloat_withNSString_(self, (JavaLangFloat *) cast_chk(objValue, [JavaLangFloat class]), strValue);
    }
    break;
    case 48:
    {
      ASRadioButtonImpl_setShadowDyWithJavaLangFloat_withNSString_(self, (JavaLangFloat *) cast_chk(objValue, [JavaLangFloat class]), strValue);
    }
    break;
    case 49:
    {
      ASRadioButtonImpl_setSingleLineWithId_(self, objValue);
    }
    break;
    case 50:
    {
      ASRadioButtonImpl_setEnabledWithId_(self, objValue);
    }
    break;
    case 51:
    {
      ASRadioButtonImpl_setTextAllCapsWithId_(self, objValue);
    }
    break;
    case 52:
    {
      ASRadioButtonImpl_setMaxLengthWithId_(self, objValue);
    }
    break;
    case 53:
    {
      ASRadioButtonImpl_setTypeFaceWithId_withNSString_(self, objValue, strValue);
    }
    break;
    case 54:
    {
      ASRadioButtonImpl_setTextStyleWithId_(self, objValue);
    }
    break;
    case 55:
    {
      ASRadioButtonImpl_setFontFamilyWithId_withNSString_(self, objValue, strValue);
    }
    break;
    case 56:
    {
      ASRadioButtonImpl_setDrawableLeftWithNSString_withId_(self, @"drawableStart", objValue);
    }
    break;
    case 57:
    {
      ASRadioButtonImpl_setDrawableRightWithNSString_withId_(self, @"drawableEnd", objValue);
    }
    break;
    case 58:
    {
      ASRadioButtonImpl_setDrawableTopWithId_(self, objValue);
    }
    break;
    case 59:
    {
      ASRadioButtonImpl_setDrawableBottomWithId_(self, objValue);
    }
    break;
    case 60:
    {
      ASRadioButtonImpl_setDrawablePaddingWithId_(self, objValue);
    }
    break;
    case 61:
    {
      ASRadioButtonImpl_setDrawableTintWithId_(self, objValue);
    }
    break;
    case 62:
    {
      ASRadioButtonImpl_setDrawableTintModeWithId_(self, objValue);
    }
    break;
    case 63:
    {
      ASRadioButtonImpl_setScrollHorizontallyWithId_(self, objValue);
    }
    break;
    case 64:
    {
      ASRadioButtonImpl_setFirstBaselineToTopHeightWithId_(self, objValue);
    }
    break;
    case 65:
    {
      ASRadioButtonImpl_setLastBaselineToBottomHeightWithId_(self, objValue);
    }
    break;
    case 66:
    {
      ASRadioButtonImpl_setTextColorWithId_(self, objValue);
    }
    break;
    case 67:
    {
      ASRadioButtonImpl_setTextFormatWithId_(self, objValue);
    }
    break;
    case 68:
    {
      ASViewImpl_setStyleWithASIWidget_withId_(self, objValue);
    }
    break;
    case 69:
    {
      ASRadioButtonImpl_setDrawableIconSizeWithId_(self, objValue);
    }
    break;
    default:
    break;
  }
  ASRadioButtonImpl_postSetAttributeWithASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(self, key, strValue, objValue, decorator);
}

- (id)getAttributeWithASWidgetAttribute:(ASWidgetAttribute *)key
              withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  id nativeWidget = [self asNativeWidget];
  id attributeValue = ASViewImpl_getAttributeWithASIWidget_withId_withASWidgetAttribute_withASILifeCycleDecorator_(self, nativeWidget, key, decorator);
  if (attributeValue != nil) {
    return attributeValue;
  }
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"iosText", @"iosTextColor", @"enabled", @"iosIsEnabled", @"iosAdjustsFontSizeToFitWidth", @"iosAllowsDefaultTighteningForTruncation", @"iosMinimumScaleFactor", @"iosNumberOfLines", @"textColorHighlight", @"iosHighlightedTextColor", @"iosIsHighlighted", @"shadowColor", @"iosShadowColor", @"iosPreferredMaxLayoutWidth", @"iosIsUserInteractionEnabled", @"checked", @"button", @"text", @"gravity", @"textSize", @"paddingBottom", @"paddingRight", @"paddingLeft", @"paddingStart", @"paddingEnd", @"paddingTop", @"minLines", @"maxLines", @"minWidth", @"minHeight", @"maxWidth", @"maxHeight", @"height", @"width", @"maxEms", @"minEms", @"ellipsize", @"marqueeRepeatLimit", @"justificationMode", @"shadowDx", @"shadowDy", @"drawablePadding", @"firstBaselineToTopHeight", @"lastBaselineToBottomHeight", @"textColor" }, 45)) {
    case 0:
    {
      return [self getText];
    }
    case 1:
    {
      return [self getTextColor];
    }
    case 2:
    case 3:
    {
      return [self getIsEnabled];
    }
    case 4:
    {
      return [self getAdjustsFontSizeToFitWidth];
    }
    case 5:
    {
      return [self getAllowsDefaultTighteningForTruncation];
    }
    case 6:
    {
      return [self getMinimumScaleFactor];
    }
    case 7:
    {
      return [self getNumberOfLines];
    }
    case 8:
    case 9:
    {
      return [self getHighlightedTextColor];
    }
    case 10:
    {
      return [self getIsHighlighted];
    }
    case 11:
    case 12:
    {
      return [self getShadowColor];
    }
    case 13:
    {
      return [self getPreferredMaxLayoutWidth];
    }
    case 14:
    {
      return [self getIsUserInteractionEnabled];
    }
    case 15:
    {
      return ASRadioButtonImpl_getChecked(self);
    }
    case 16:
    {
      return ASRadioButtonImpl_getButton(self);
    }
    case 17:
    {
      return ASRadioButtonImpl_getMyText(self);
    }
    case 18:
    {
      return ASRadioButtonImpl_getGravity(self);
    }
    case 19:
    {
      return ASRadioButtonImpl_getTextSize(self);
    }
    case 20:
    {
      return ASRadioButtonImpl_getPaddingBottom(self);
    }
    case 21:
    {
      return ASRadioButtonImpl_getPaddingRight(self);
    }
    case 22:
    {
      return ASRadioButtonImpl_getPaddingLeft(self);
    }
    case 23:
    {
      return ASRadioButtonImpl_getPaddingStart(self);
    }
    case 24:
    {
      return ASRadioButtonImpl_getPaddingEnd(self);
    }
    case 25:
    {
      return ASRadioButtonImpl_getPaddingTop(self);
    }
    case 26:
    {
      return JavaLangInteger_valueOfWithInt_([self getMinLines]);
    }
    case 27:
    {
      return JavaLangInteger_valueOfWithInt_([self getMaxLines]);
    }
    case 28:
    {
      return ASRadioButtonImpl_getMinWidth(self);
    }
    case 29:
    {
      return ASRadioButtonImpl_getMinHeight(self);
    }
    case 30:
    {
      return JavaLangInteger_valueOfWithInt_([self getMaxWidth]);
    }
    case 31:
    {
      return JavaLangInteger_valueOfWithInt_([self getMaxHeight]);
    }
    case 32:
    {
      return JavaLangInteger_valueOfWithInt_(ASRadioButtonImpl_getHeight(self));
    }
    case 33:
    {
      return ASRadioButtonImpl_getWidth(self);
    }
    case 34:
    {
      return JavaLangInteger_valueOfWithInt_([self getMaxEms]);
    }
    case 35:
    {
      return JavaLangInteger_valueOfWithInt_([self getMinEms]);
    }
    case 36:
    {
      return ASRadioButtonImpl_getEllipsize(self);
    }
    case 37:
    {
      return ASRadioButtonImpl_getMarqueeRepeatLimit(self);
    }
    case 38:
    {
      return ASRadioButtonImpl_getJustificationMode(self);
    }
    case 39:
    {
      return ASRadioButtonImpl_getShadowDx(self);
    }
    case 40:
    {
      return ASRadioButtonImpl_getShadowDy(self);
    }
    case 41:
    {
      return ASRadioButtonImpl_getDrawablePadding(self);
    }
    case 42:
    {
      return ASRadioButtonImpl_getFirstBaselineToTopHeight(self);
    }
    case 43:
    {
      return ASRadioButtonImpl_getLastBaselineToBottomHeight(self);
    }
    case 44:
    {
      return ASRadioButtonImpl_getTextColorState(self);
    }
  }
  return nil;
}

- (id)asWidget {
  return measurableView_;
}

- (void)nativeCreateWithJavaUtilMap:(id<JavaUtilMap>)params {
  ASRadioButtonImpl_nativeCreateWithJavaUtilMap_(self, params);
}

- (void)handleHtmlTextWithNSString:(NSString *)text {
  ASRadioButtonImpl_handleHtmlTextWithNSString_(self, text);
}

- (void)nativeSetTextWithNSString:(NSString *)text {
  ASRadioButtonImpl_nativeSetTextWithNSString_(self, text);
}

- (void)nativeSetHtmlTextWithId:(id)text {
  ASRadioButtonImpl_nativeSetHtmlTextWithId_(self, text);
}

- (id)getMyText {
  return ASRadioButtonImpl_getMyText(self);
}

- (void)setPaddingWithId:(id)objValue {
  jint value = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
  ADView *view = (ADView *) cast_chk([self asWidget], [ADView class]);
  ASViewImpl_setPaddingWithId_withADView_(JavaLangInteger_valueOfWithInt_(value), view);
}

- (void)setPaddingBottomWithId:(id)objValue {
  jint value = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
  ADView *view = (ADView *) cast_chk([self asWidget], [ADView class]);
  ASViewImpl_setPaddingBottomWithId_withADView_(JavaLangInteger_valueOfWithInt_(value), view);
}

- (void)setPaddingTopWithId:(id)objValue {
  jint value = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
  ADView *view = (ADView *) cast_chk([self asWidget], [ADView class]);
  ASViewImpl_setPaddingTopWithId_withADView_(JavaLangInteger_valueOfWithInt_(value), view);
}

- (void)setPaddingLeftWithId:(id)objValue {
  jint value = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
  ADView *view = (ADView *) cast_chk([self asWidget], [ADView class]);
  ASViewImpl_setPaddingLeftWithId_withADView_(JavaLangInteger_valueOfWithInt_(value), view);
}

- (void)setPaddingRightWithId:(id)objValue {
  jint value = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
  ADView *view = (ADView *) cast_chk([self asWidget], [ADView class]);
  ASViewImpl_setPaddingRightWithId_withADView_(JavaLangInteger_valueOfWithInt_(value), view);
}

- (id)getPaddingTop {
  return ASRadioButtonImpl_getPaddingTop(self);
}

- (id)getPaddingEnd {
  return ASRadioButtonImpl_getPaddingEnd(self);
}

- (id)getPaddingStart {
  return ASRadioButtonImpl_getPaddingStart(self);
}

- (id)getPaddingLeft {
  return ASRadioButtonImpl_getPaddingLeft(self);
}

- (id)getPaddingRight {
  return ASRadioButtonImpl_getPaddingRight(self);
}

- (id)getPaddingBottom {
  return ASRadioButtonImpl_getPaddingBottom(self);
}

- (void)setPaddingVerticalWithId:(id)objValue {
  ASRadioButtonImpl_setPaddingVerticalWithId_(self, objValue);
}

- (void)setPaddingHorizontalWithId:(id)objValue {
  ASRadioButtonImpl_setPaddingHorizontalWithId_(self, objValue);
}

- (void)setPaddingEndWithId:(id)objValue {
  ASRadioButtonImpl_setPaddingEndWithId_(self, objValue);
}

- (void)setPaddingStartWithId:(id)objValue {
  ASRadioButtonImpl_setPaddingStartWithId_(self, objValue);
}

- (id)getTextSize {
  return ASRadioButtonImpl_getTextSize(self);
}

- (void)setMyTextSizeWithId:(id)objValue {
  ASRadioButtonImpl_setMyTextSizeWithId_(self, objValue);
}

- (void)nativeSetTextSizeWithInt:(jint)value {
  ASRadioButtonImpl_nativeSetTextSizeWithInt_(self, value);
}

- (void)setVerticalAligmentCenter {
  ASRadioButtonImpl_setVerticalAligmentCenter(self);
}

- (void)setVerticalAligmentBottom {
  ASRadioButtonImpl_setVerticalAligmentBottom(self);
}

- (void)setVerticalAligmentTop {
  ASRadioButtonImpl_setVerticalAligmentTop(self);
}

- (void)setHorizontalAligmentCenter {
  ASRadioButtonImpl_setHorizontalAligmentCenter(self);
}

- (void)setHorizontalAligmentRight {
  ASRadioButtonImpl_setHorizontalAligmentRight(self);
}

- (void)setHorizontalAligmentRightInternal {
  ASRadioButtonImpl_setHorizontalAligmentRightInternal(self);
}

- (void)setHorizontalAligmentLeft {
  ASRadioButtonImpl_setHorizontalAligmentLeft(self);
}

- (void)setHorizontalAligmentLeftInternal {
  ASRadioButtonImpl_setHorizontalAligmentLeftInternal(self);
}

- (jint)getTextAlignment {
  return ASRadioButtonImpl_getTextAlignment(self);
}

- (void)nativeSetVerticalAligmentBottom {
  ASRadioButtonImpl_nativeSetVerticalAligmentBottom(self);
}

- (void)nativeSetVerticalAligmentTop {
  ASRadioButtonImpl_nativeSetVerticalAligmentTop(self);
}

- (void)nativeSetVerticalAligmentCenter {
  ASRadioButtonImpl_nativeSetVerticalAligmentCenter(self);
}

- (void)addMinMaxListener {
  ASRadioButtonImpl_addMinMaxListener(self);
}

- (jint)getBorderPadding {
  return 0;
}

- (jint)getLineHeightPadding {
  return 0;
}

- (jint)getLineHeight {
  return ASRadioButtonImpl_getLineHeight(self);
}

- (jint)getBorderWidth {
  return ASRadioButtonImpl_getBorderWidth(self);
}

- (id)getEllipsize {
  return ASRadioButtonImpl_getEllipsize(self);
}

- (void)setEllipsizeWithId:(id)objValue
              withNSString:(NSString *)strValue {
  ASRadioButtonImpl_setEllipsizeWithId_withNSString_(self, objValue, strValue);
}

- (JavaLangInteger *)nativeGetLinBreakMode {
  return ASRadioButtonImpl_nativeGetLinBreakMode(self);
}

- (void)nativeSetLineBreakModeWithInt:(jint)lineBreakMode {
  ASRadioButtonImpl_nativeSetLineBreakModeWithInt_(self, lineBreakMode);
}

- (void)setJustificationModeWithId:(id)objValue
                      withNSString:(NSString *)strValue {
  ASRadioButtonImpl_setJustificationModeWithId_withNSString_(self, objValue, strValue);
}

- (void)nativeSetTextAligmentWithInt:(jint)textAlignment {
  ASRadioButtonImpl_nativeSetTextAligmentWithInt_(self, textAlignment);
}

- (id)getJustificationMode {
  return ASRadioButtonImpl_getJustificationMode(self);
}

- (JavaLangInteger *)nativeGetTextAligment {
  return ASRadioButtonImpl_nativeGetTextAligment(self);
}

- (void)setShadowDyWithJavaLangFloat:(JavaLangFloat *)objValue
                        withNSString:(NSString *)strValue {
  ASRadioButtonImpl_setShadowDyWithJavaLangFloat_withNSString_(self, objValue, strValue);
}

- (void)setShadowDxWithJavaLangFloat:(JavaLangFloat *)objValue
                        withNSString:(NSString *)strValue {
  ASRadioButtonImpl_setShadowDxWithJavaLangFloat_withNSString_(self, objValue, strValue);
}

- (id)getShadowDy {
  return ASRadioButtonImpl_getShadowDy(self);
}

- (id)getShadowDx {
  return ASRadioButtonImpl_getShadowDx(self);
}

- (void)setSingleLineWithId:(id)objValue {
  ASRadioButtonImpl_setSingleLineWithId_(self, objValue);
}

- (id)getSingleLine {
  return ASRadioButtonImpl_getSingleLine(self);
}

- (void)setEnabledWithId:(id)objValue {
  ASRadioButtonImpl_setEnabledWithId_(self, objValue);
}

+ (NSString *)toUpperCaseWithNSString:(NSString *)text {
  return ASRadioButtonImpl_toUpperCaseWithNSString_(text);
}

- (jint)nativeGetFontSize {
  return ASRadioButtonImpl_nativeGetFontSize(self);
}

- (jint)nativeGetFontStyle {
  return ASRadioButtonImpl_nativeGetFontStyle(self);
}

- (void)nativeSetCustomFontWithInt:(jint)height
              withASFontDescriptor:(ASFontDescriptor *)fontDescriptor {
  ASRadioButtonImpl_nativeSetCustomFontWithInt_withASFontDescriptor_(self, height, fontDescriptor);
}

- (void)nativeSetFontStyleWithInt:(jint)style {
  ASRadioButtonImpl_nativeSetFontStyleWithInt_(self, style);
}

- (void)setDrawablePaddingWithId:(id)objValue {
  ASRadioButtonImpl_setDrawablePaddingWithId_(self, objValue);
}

- (void)setDrawableBottomWithId:(id)objValue {
  ASRadioButtonImpl_setDrawableBottomWithId_(self, objValue);
}

- (void)setDrawableTopWithId:(id)objValue {
  ASRadioButtonImpl_setDrawableTopWithId_(self, objValue);
}

- (void)setDrawableRightWithNSString:(NSString *)originalAttr
                              withId:(id)objValue {
  ASRadioButtonImpl_setDrawableRightWithNSString_withId_(self, originalAttr, objValue);
}

- (void)setDrawableRightInternalWithNSString:(NSString *)originalAttr
                                      withId:(id)objValue {
  ASRadioButtonImpl_setDrawableRightInternalWithNSString_withId_(self, originalAttr, objValue);
}

- (void)setDrawableLeftWithNSString:(NSString *)originalAttr
                             withId:(id)objValue {
  ASRadioButtonImpl_setDrawableLeftWithNSString_withId_(self, originalAttr, objValue);
}

- (void)setDrawableLeftInternalWithNSString:(NSString *)originalAttr
                                     withId:(id)objValue {
  ASRadioButtonImpl_setDrawableLeftInternalWithNSString_withId_(self, originalAttr, objValue);
}

- (jint)getImageHeightWithId:(id)objValue {
  return ASRadioButtonImpl_getImageHeightWithId_(self, objValue);
}

- (jint)getImageWidthWithId:(id)objValue {
  return ASRadioButtonImpl_getImageWidthWithId_(self, objValue);
}

- (id)getDrawablePadding {
  return ASRadioButtonImpl_getDrawablePadding(self);
}

- (void)setDrawableTintModeWithId:(id)value {
  ASRadioButtonImpl_setDrawableTintModeWithId_(self, value);
}

- (void)setDrawableTintWithId:(id)objValue {
  ASRadioButtonImpl_setDrawableTintWithId_(self, objValue);
}

- (void)updatePadding {
}

- (void)setScrollHorizontallyWithId:(id)objValue {
  ASRadioButtonImpl_setScrollHorizontallyWithId_(self, objValue);
}

- (jboolean)canMarquee {
  return ASRadioButtonImpl_canMarquee(self);
}

- (void)cancelNativeTimer {
  ASRadioButtonImpl_cancelNativeTimer(self);
}

- (jboolean)isDisposed {
  return ASRadioButtonImpl_isDisposed(self);
}

- (void)addDeallocHandler {
  ASRadioButtonImpl_addDeallocHandler(self);
}

- (void)schedule {
  ASRadioButtonImpl_schedule(self);
}

- (void)onTick:(NSTimer *)timer {
  [self executeOnMainThreadWithJavaLangRunnable:self->marqueeTask_];
}

- (void)executeOnMainThreadWithJavaLangRunnable:(id<JavaLangRunnable>)runnable {
  ASRadioButtonImpl_executeOnMainThreadWithJavaLangRunnable_(self, runnable);
}

- (void)setTextColorWithId:(id)objValue {
  ASRadioButtonImpl_setTextColorWithId_(self, objValue);
}

- (id)getTextColorState {
  return ASRadioButtonImpl_getTextColorState(self);
}

- (void)drawableStateChanged {
  [super drawableStateChanged];
  ASRadioButtonImpl_drawableStateChangeWithNSString_withADDrawable_(self, @"bottom", [((ADRadioButton *) nil_chk(measurableView_)) getBottomDrawable]);
  ASRadioButtonImpl_drawableStateChangeWithNSString_withADDrawable_(self, @"left", [((ADRadioButton *) nil_chk(measurableView_)) getLeftDrawable]);
  ASRadioButtonImpl_drawableStateChangeWithNSString_withADDrawable_(self, @"right", [((ADRadioButton *) nil_chk(measurableView_)) getRightDrawable]);
  ASRadioButtonImpl_drawableStateChangeWithNSString_withADDrawable_(self, @"top", [((ADRadioButton *) nil_chk(measurableView_)) getTopDrawable]);
  ASRadioButtonImpl_drawableStateChangedAdditionalAttrs(self);
  if ([((ADRadioButton *) nil_chk(measurableView_)) getTextColors] != nil && [((ADColorStateList *) nil_chk([((ADRadioButton *) nil_chk(measurableView_)) getTextColors])) isStateful]) {
    ASRadioButtonImpl_setTextColorWithId_(self, JavaLangInteger_valueOfWithInt_([((ADRadioButton *) nil_chk(measurableView_)) getCurrentTextColor]));
  }
  if ([((ADRadioButton *) nil_chk(measurableView_)) getHintTextColors] != nil && [((ADColorStateList *) nil_chk([((ADRadioButton *) nil_chk(measurableView_)) getHintTextColors])) isStateful]) {
    ASRadioButtonImpl_setHintColorWithInt_(self, [((ADRadioButton *) nil_chk(measurableView_)) getCurrentHintTextColor]);
    ASRadioButtonImpl_syncPlaceholderLabel(self);
  }
  if (drawableTint_ != nil && [drawableTint_ isStateful]) {
    ASRadioButtonImpl_setDrawableTintWithId_(self, drawableTint_);
    [self invalidate];
  }
  if ([((ADRadioButton *) nil_chk(measurableView_)) getLinkTextColors] != nil && [((ADColorStateList *) nil_chk([((ADRadioButton *) nil_chk(measurableView_)) getLinkTextColors])) isStateful]) {
    ASRadioButtonImpl_setTextColorLinkWithADColorStateList_(self, [((ADRadioButton *) nil_chk(measurableView_)) getLinkTextColors]);
  }
}

- (void)drawableStateChangeWithNSString:(NSString *)type
                         withADDrawable:(ADDrawable *)dr {
  ASRadioButtonImpl_drawableStateChangeWithNSString_withADDrawable_(self, type, dr);
}

- (void)setHintColorWithInt:(jint)currentHintTextColor {
  ASRadioButtonImpl_setHintColorWithInt_(self, currentHintTextColor);
}

- (void)syncPlaceholderLabel {
  ASRadioButtonImpl_syncPlaceholderLabel(self);
}

- (jint)getBaseLine {
  return ASRadioButtonImpl_nativeGetBaseLine(self) + [((ADRadioButton *) nil_chk(measurableView_)) getPaddingTop];
}

- (jint)nativeGetBaseLine {
  return ASRadioButtonImpl_nativeGetBaseLine(self);
}

- (id)getFont {
  return ASRadioButtonImpl_getFont(self);
}

- (void)setTextColorLinkWithADColorStateList:(ADColorStateList *)linkTextColors {
  ASRadioButtonImpl_setTextColorLinkWithADColorStateList_(self, linkTextColors);
}

- (void)setButtonWithId:(id)objValue {
  ASRadioButtonImpl_setButtonWithId_(self, objValue);
}

- (void)setOnCheckedWithId:(id)objValue {
  ASRadioButtonImpl_setOnCheckedWithId_(self, objValue);
}

- (void)setCheckedWithId:(id)objValue {
  ASRadioButtonImpl_setCheckedWithId_(self, objValue);
}

- (void)postSetAttributeWithASWidgetAttribute:(ASWidgetAttribute *)key
                                 withNSString:(NSString *)strValue
                                       withId:(id)objValue
                    withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  ASRadioButtonImpl_postSetAttributeWithASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(self, key, strValue, objValue, decorator);
}

- (id)getButton {
  return ASRadioButtonImpl_getButton(self);
}

- (id)getChecked {
  return ASRadioButtonImpl_getChecked(self);
}

- (id)asNativeWidget {
  return uiView_;
}

- (void)createLabelWithJavaUtilMap:(id<JavaUtilMap>)params
                    withADTextView:(ADTextView *)asWidget {
  ASRadioButtonImpl_createLabelWithJavaUtilMap_withADTextView_(self, params, asWidget);
}

- (void)createLabelWithJavaUtilMap:(id<JavaUtilMap>)params {
  ASRadioButtonImpl_createLabelWithJavaUtilMap_(self, params);
}

- (void)drawableStateChangedAdditionalAttrs {
  ASRadioButtonImpl_drawableStateChangedAdditionalAttrs(self);
}

- (void)setButtonTintWithId:(id)objValue {
  ASRadioButtonImpl_setButtonTintWithId_(self, objValue);
}

- (void)setButtonTintModeWithId:(id)objValue {
  ASRadioButtonImpl_setButtonTintModeWithId_(self, objValue);
}

- (jint)measureWidth {
  return [((ADRadioButton *) nil_chk(measurableView_)) nativeMeasureWidthWithId:uiView_] + [((ADDrawable *) nil_chk([((ADRadioButton *) nil_chk(measurableView_)) getButtonDrawable])) getMinimumWidth];
}

- (void)resetError {
  jint validationErrorDisplayType = [self getValidationErrorDisplayType];
  if ((validationErrorDisplayType & ASFormElement_ERROR_DISPLAY_TYPE_POPUP) != 0) {
    ASRadioButtonImpl_setErrorWithId_(self, nil);
  }
  if ((validationErrorDisplayType & ASFormElement_ERROR_DISPLAY_TYPE_LABEL) != 0) {
    ASViewImpl_setMessageOnLabelWithASIWidget_withNSString_(self, @"");
  }
  if ((validationErrorDisplayType & ASFormElement_ERROR_DISPLAY_TYPE_STYLE) != 0) {
    ASViewImpl_setStyleWithASIWidget_withId_(self, [self getNormalStyle]);
  }
}

- (void)showErrorWithNSString:(NSString *)message {
  jint validationErrorDisplayType = [self getValidationErrorDisplayType];
  if ((validationErrorDisplayType & ASFormElement_ERROR_DISPLAY_TYPE_POPUP) != 0) {
    ASRadioButtonImpl_setErrorWithId_(self, message);
  }
  if ((validationErrorDisplayType & ASFormElement_ERROR_DISPLAY_TYPE_LABEL) != 0) {
    ASViewImpl_setMessageOnLabelWithASIWidget_withNSString_(self, message);
  }
  if ((validationErrorDisplayType & ASFormElement_ERROR_DISPLAY_TYPE_STYLE) != 0) {
    ASViewImpl_setStyleWithASIWidget_withId_(self, [self getErrorStyle]);
  }
}

- (void)setGravityWithId:(id)objValue {
  ASRadioButtonImpl_setGravityWithId_(self, objValue);
}

- (void)updateTextAlignment {
  ASRadioButtonImpl_updateTextAlignment(self);
}

- (id)getGravity {
  return ASRadioButtonImpl_getGravity(self);
}

- (void)onRtlPropertiesChangedWithInt:(jint)layoutDirection {
  if ([((ADRadioButton *) nil_chk(measurableView_)) getRawTextAlignment] != 0 || [((ADRadioButton *) nil_chk(measurableView_)) getRawLayoutDirection] != 0) {
    ASRadioButtonImpl_updateTextAlignment(self);
  }
}

- (void)setDrawableIconSizeWithId:(id)objValue {
  ASRadioButtonImpl_setDrawableIconSizeWithId_(self, objValue);
}

- (id)getMinHeight {
  return ASRadioButtonImpl_getMinHeight(self);
}

- (id)getMinWidth {
  return ASRadioButtonImpl_getMinWidth(self);
}

- (void)setEmsWithId:(id)objValue {
  ASRadioButtonImpl_setEmsWithId_(self, objValue);
}

- (jint)getMaxEms {
  return [((ADRadioButton *) nil_chk(measurableView_)) getMaxEms];
}

- (jint)getMinEms {
  return [((ADRadioButton *) nil_chk(measurableView_)) getMinEms];
}

- (void)setMinEmsWithId:(id)objValue {
  ASRadioButtonImpl_setMinEmsWithId_(self, objValue);
}

- (jint)getMinLines {
  return [((ADRadioButton *) nil_chk(measurableView_)) getMinLines];
}

- (jint)getMaxLines {
  return [((ADRadioButton *) nil_chk(measurableView_)) getMaxLines];
}

- (void)setMaxEmsWithId:(id)objValue {
  ASRadioButtonImpl_setMaxEmsWithId_(self, objValue);
}

- (void)setWidthWithId:(id)objValue {
  ASRadioButtonImpl_setWidthWithId_(self, objValue);
}

- (void)setHeightWithId:(id)objValue {
  ASRadioButtonImpl_setHeightWithId_(self, objValue);
}

- (void)setMaxLinesWithId:(id)objValue {
  ASRadioButtonImpl_setMaxLinesWithId_(self, objValue);
}

- (void)setLinesWithId:(id)objValue {
  ASRadioButtonImpl_setLinesWithId_(self, objValue);
}

- (void)setMinLinesWithId:(id)objValue {
  ASRadioButtonImpl_setMinLinesWithId_(self, objValue);
}

- (void)setMaxHeightWithId:(id)objValue {
  ASRadioButtonImpl_setMaxHeightWithId_(self, objValue);
}

- (void)setMaxWidthWithId:(id)objValue {
  ASRadioButtonImpl_setMaxWidthWithId_(self, objValue);
}

- (jint)getMaxWidth {
  return [((ADRadioButton *) nil_chk(measurableView_)) getMaxWidth];
}

- (jint)getMaxHeight {
  return [((ADRadioButton *) nil_chk(measurableView_)) getMaxHeight];
}

- (void)setMinHeightWithId:(id)objValue {
  ASRadioButtonImpl_setMinHeightWithId_(self, objValue);
}

- (void)setMinWidthWithId:(id)objValue {
  ASRadioButtonImpl_setMinWidthWithId_(self, objValue);
}

- (id)getWidth {
  return ASRadioButtonImpl_getWidth(self);
}

- (jint)getHeight {
  return ASRadioButtonImpl_getHeight(self);
}

- (jint)getAutoSizeTextTypeWithADTextView:(ADTextView *)measurableView {
  return ASRadioButtonImpl_getAutoSizeTextTypeWithADTextView_(self, measurableView);
}

- (void)setAutoSizeTextTypeInternalWithInt:(jint)autoTextType {
  ASRadioButtonImpl_setAutoSizeTextTypeInternalWithInt_(self, autoTextType);
}

- (void)setAutoSizePresetSizesWithId:(id)objValue {
  ASRadioButtonImpl_setAutoSizePresetSizesWithId_(self, objValue);
}

- (void)addAutoResizeListener {
  ASRadioButtonImpl_addAutoResizeListener(self);
}

- (void)removeResizeListener {
  ASRadioButtonImpl_removeResizeListener(self);
}

- (void)setMaxLengthWithId:(id)objValue {
  ASRadioButtonImpl_setMaxLengthWithId_(self, objValue);
}

- (void)setMyTextWithId:(id)objValue {
  ASRadioButtonImpl_setMyTextWithId_(self, objValue);
}

- (void)setTextAllCapsWithId:(id)objValue {
  ASRadioButtonImpl_setTextAllCapsWithId_(self, objValue);
}

- (void)initHtmlWithJavaUtilMap:(id<JavaUtilMap>)params {
  ASRadioButtonImpl_initHtmlWithJavaUtilMap_(self, params);
}

- (void)setTypeFaceWithId:(id)objValue
             withNSString:(NSString *)strValue {
  ASRadioButtonImpl_setTypeFaceWithId_withNSString_(self, objValue, strValue);
}

- (void)setFontFamilyWithId:(id)objValue
               withNSString:(NSString *)strValue {
  ASRadioButtonImpl_setFontFamilyWithId_withNSString_(self, objValue, strValue);
}

- (void)setTextStyleWithId:(id)objValue {
  ASRadioButtonImpl_setTextStyleWithId_(self, objValue);
}

- (jint)calcNumberOfWhiteSpaces {
  return ASRadioButtonImpl_calcNumberOfWhiteSpaces(self);
}

- (void)cancelTimer {
  ASRadioButtonImpl_cancelTimer(self);
}

- (void)startTimer {
  ASRadioButtonImpl_startTimer(self);
}

- (id)getMarqueeRepeatLimit {
  return ASRadioButtonImpl_getMarqueeRepeatLimit(self);
}

- (void)setMarqueeRepeatLimitWithId:(id)objValue {
  ASRadioButtonImpl_setMarqueeRepeatLimitWithId_(self, objValue);
}

- (void)startOrStopMarqueeWithId:(id)objValue {
  ASRadioButtonImpl_startOrStopMarqueeWithId_(self, objValue);
}

- (jint)getLabelWidth {
  return ASRadioButtonImpl_getLabelWidth(self);
}

- (jboolean)isLabelMeasured {
  return ASRadioButtonImpl_isLabelMeasured(self);
}

- (void)setPasswordWithId:(id)objValue {
  ASRadioButtonImpl_setPasswordWithId_(self, objValue);
}

- (void)setFirstBaselineToTopHeightWithId:(id)objValue {
  ASRadioButtonImpl_setFirstBaselineToTopHeightWithId_(self, objValue);
}

- (jboolean)getIncludeFontPadding {
  return ASRadioButtonImpl_getIncludeFontPadding(self);
}

- (id)getFirstBaselineToTopHeight {
  return ASRadioButtonImpl_getFirstBaselineToTopHeight(self);
}

- (void)setLastBaselineToBottomHeightWithId:(id)objValue {
  ASRadioButtonImpl_setLastBaselineToBottomHeightWithId_(self, objValue);
}

- (id)getLastBaselineToBottomHeight {
  return ASRadioButtonImpl_getLastBaselineToBottomHeight(self);
}

- (void)setAutoSizeStepGranularityWithId:(id)objValue {
  ASRadioButtonImpl_setAutoSizeStepGranularityWithId_(self, objValue);
}

- (void)setAutoMinTextSizeWithId:(id)objValue {
  ASRadioButtonImpl_setAutoMinTextSizeWithId_(self, objValue);
}

- (void)setAutoMaxTextSizeWithId:(id)objValue {
  ASRadioButtonImpl_setAutoMaxTextSizeWithId_(self, objValue);
}

- (void)setAutoSizeTextTypeWithId:(id)objValue {
  ASRadioButtonImpl_setAutoSizeTextTypeWithId_(self, objValue);
}

- (id)getAutoSizeStepGranularity {
  return ASRadioButtonImpl_getAutoSizeStepGranularity(self);
}

- (id)getAutoMinTextSize {
  return ASRadioButtonImpl_getAutoMinTextSize(self);
}

- (id)getAutoMaxTextSize {
  return ASRadioButtonImpl_getAutoMaxTextSize(self);
}

- (id)getAutoSizeTextType {
  return ASRadioButtonImpl_getAutoSizeTextType(self);
}

- (void)setErrorMessageWithNSString:(NSString *)message {
  [self setAttributeWithNSString:@"text" withId:message withBoolean:false];
  [self setAttributeWithNSString:@"visibility" withId:message == nil || [message java_isEmpty] ? @"gone" : @"visible" withBoolean:false];
}

- (void)setTextFormatWithId:(id)objValue {
  ASRadioButtonImpl_setTextFormatWithId_(self, objValue);
}

- (void)setTextWithId:(id)nativeWidget
               withId:(id)value {
  ((ASUILabel*) nativeWidget).text = (NSString*) value;
}

- (id)getText {
  return ((ASUILabel*) uiView_).text;
}

- (void)setTextColorWithId:(id)nativeWidget
                    withId:(id)value {
  ((ASUILabel*) nativeWidget).textColor = (UIColor*) value;
}

- (id)getTextColor {
  return ((ASUILabel*) uiView_).textColor;
}

- (void)setIsEnabledWithId:(id)nativeWidget
                    withId:(id)value {
  ((ASUILabel*) nativeWidget).enabled = [(JavaLangBoolean*) value booleanValue];
}

- (id)getIsEnabled {
  return [JavaLangBoolean valueOfWithBoolean :((ASUILabel*) uiView_).enabled];
}

- (void)setAdjustsFontSizeToFitWidthWithId:(id)nativeWidget
                                    withId:(id)value {
  ((ASUILabel*) nativeWidget).adjustsFontSizeToFitWidth = [(JavaLangBoolean*) value booleanValue];
}

- (id)getAdjustsFontSizeToFitWidth {
  return [JavaLangBoolean valueOfWithBoolean :((ASUILabel*) uiView_).adjustsFontSizeToFitWidth];
}

- (void)setAllowsDefaultTighteningForTruncationWithId:(id)nativeWidget
                                               withId:(id)value {
  ((ASUILabel*) nativeWidget).allowsDefaultTighteningForTruncation = [(JavaLangBoolean*) value booleanValue];
}

- (id)getAllowsDefaultTighteningForTruncation {
  return [JavaLangBoolean valueOfWithBoolean :((ASUILabel*) uiView_).allowsDefaultTighteningForTruncation];
}

- (void)setMinimumScaleFactorWithId:(id)nativeWidget
                             withId:(id)value {
  ((ASUILabel*) nativeWidget).minimumScaleFactor = [(JavaLangFloat*) value floatValue];
}

- (id)getMinimumScaleFactor {
  return [JavaLangFloat valueOfWithFloat :((ASUILabel*) uiView_).minimumScaleFactor];
}

- (void)setNumberOfLinesWithId:(id)nativeWidget
                        withId:(id)value {
  ((ASUILabel*) nativeWidget).numberOfLines = [(JavaLangInteger*) value intValue];
}

- (id)getNumberOfLines {
  return [JavaLangInteger valueOfWithInt :((ASUILabel*) uiView_).numberOfLines];
}

- (void)setHighlightedTextColorWithId:(id)nativeWidget
                               withId:(id)value {
  ((ASUILabel*) nativeWidget).highlightedTextColor = (UIColor*) value;
}

- (id)getHighlightedTextColor {
  return ((ASUILabel*) uiView_).highlightedTextColor;
}

- (void)setIsHighlightedWithId:(id)nativeWidget
                        withId:(id)value {
  ((ASUILabel*) nativeWidget).highlighted = [(JavaLangBoolean*) value booleanValue];
}

- (id)getIsHighlighted {
  return [JavaLangBoolean valueOfWithBoolean :((ASUILabel*) uiView_).highlighted];
}

- (void)setShadowColorWithId:(id)nativeWidget
                      withId:(id)value {
  ((ASUILabel*) nativeWidget).shadowColor = (UIColor*) value;
}

- (id)getShadowColor {
  return ((ASUILabel*) uiView_).shadowColor;
}

- (void)setPreferredMaxLayoutWidthWithId:(id)nativeWidget
                                  withId:(id)value {
  ((ASUILabel*) nativeWidget).preferredMaxLayoutWidth = [(JavaLangFloat*) value floatValue];
}

- (id)getPreferredMaxLayoutWidth {
  return [JavaLangFloat valueOfWithFloat :((ASUILabel*) uiView_).preferredMaxLayoutWidth];
}

- (void)setIsUserInteractionEnabledWithId:(id)nativeWidget
                                   withId:(id)value {
  ((ASUILabel*) nativeWidget).userInteractionEnabled = [(JavaLangBoolean*) value booleanValue];
}

- (id)getIsUserInteractionEnabled {
  return [JavaLangBoolean valueOfWithBoolean :((ASUILabel*) uiView_).userInteractionEnabled];
}

- (jboolean)checkIosVersionWithNSString:(NSString *)v {
  return ([[[UIDevice currentDevice] systemVersion] compare:v options:NSNumericSearch] == NSOrderedDescending);
}

- (void)setIdWithNSString:(NSString *)id_ {
  if (id_ != nil && ![id_ isEqual:@""]) {
    [super setIdWithNSString:id_];
    [((ADRadioButton *) nil_chk(measurableView_)) setIdWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([self quickConvertWithId:id_ withNSString:@"id"], [JavaLangInteger class]))) intValue]];
  }
}

- (void)setVisibleWithBoolean:(jboolean)b {
  [((ADView *) nil_chk(((ADView *) cast_chk([self asWidget], [ADView class])))) setVisibilityWithInt:b ? ADView_VISIBLE : ADView_GONE];
}

- (void)requestLayout {
  if ([self isInitialised]) {
    ASViewImpl_requestLayoutWithASIWidget_withId_(self, [self asNativeWidget]);
  }
}

- (void)invalidate {
  if ([self isInitialised]) {
    ASViewImpl_invalidateWithASIWidget_withId_(self, [self asNativeWidget]);
  }
}

- (jboolean)allowUnCheck {
  return ASRadioButtonImpl_allowUnCheck(self);
}

- (void)setCheckedWithBoolean:(jboolean)checked {
  [((ADRadioButton *) nil_chk(measurableView_)) setCheckedWithBoolean:checked];
}

- (jboolean)isChecked {
  return [((ADRadioButton *) nil_chk(measurableView_)) isChecked];
}

- (void)addCheckedListenerWithId:(id)listener
                    withNSString:(NSString *)id_ {
  ASViewImpl_setOnClickWithASIWidget_withNSString_withId_withADView_OnClickListener_(self, @"statetoggler", [self asNativeWidget], (id<ADView_OnClickListener>) cast_check(listener, ADView_OnClickListener_class_()));
}

- (void)setErrorWithId:(id)object {
  ASRadioButtonImpl_setErrorWithId_(self, object);
}

- (NSString *)getTextEntered {
  return [((ADRadioButton *) nil_chk(measurableView_)) isChecked] ? @"checked" : @"";
}

- (jboolean)isViewVisible {
  return [((ADRadioButton *) nil_chk(measurableView_)) getVisibility] == ADView_VISIBLE;
}

- (void)focus {
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "LIOSClass;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASIWidget;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, 5, -1, -1 },
    { NULL, "V", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 10, 11, -1, 12, -1, -1 },
    { NULL, "V", 0x2, 13, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 14, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 15, 16, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 21, 16, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 22, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 23, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 24, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 25, 16, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 26, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 27, 28, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 29, 30, -1, -1, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 31, 28, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 32, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 33, 28, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 34, 35, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 36, 35, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 37, 16, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 38, 16, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 39, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 40, 41, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 42, 28, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 43, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 44, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 45, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 46, 47, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 48, 47, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 49, 47, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 50, 47, -1, -1, -1, -1 },
    { NULL, "I", 0x102, 51, 16, -1, -1, -1, -1 },
    { NULL, "I", 0x102, 52, 16, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 53, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 54, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 55, 16, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 56, 57, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 58, 16, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 59, 60, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 61, 28, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 62, 63, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 64, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 65, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 66, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 67, 7, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 68, 69, -1, 70, -1, -1 },
    { NULL, "V", 0x102, 68, 11, -1, 12, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 71, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 72, 16, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 73, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 74, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 75, 28, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 76, 16, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 77, 16, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 78, 16, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 79, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 80, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 81, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 82, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 83, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 84, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 85, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 86, 16, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 87, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 88, 16, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 89, 90, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 91, 28, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 92, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 93, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 94, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 95, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 96, 11, -1, 12, -1, -1 },
    { NULL, "V", 0x2, 97, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 98, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 99, 16, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 100, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 101, 16, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 102, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 103, 16, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 104, 16, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 105, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 106, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 107, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 108, 16, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 109, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 110, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 111, 112, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x101, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 58, 112, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x101, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 113, 112, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x101, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 114, 112, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x101, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 115, 112, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x101, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 116, 112, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x101, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 117, 112, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x101, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 118, 112, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x101, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 119, 112, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x101, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 120, 112, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x101, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 121, 112, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x101, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 122, 112, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x101, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x101, 123, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 124, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 125, 126, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 66, 126, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 127, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 128, 16, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(loadAttributesWithNSString:);
  methods[1].selector = @selector(init);
  methods[2].selector = @selector(initWithNSString:);
  methods[3].selector = @selector(initWithNSString:withNSString:);
  methods[4].selector = @selector(getViewClass);
  methods[5].selector = @selector(newInstance);
  methods[6].selector = @selector(createWithASIFragment:withJavaUtilMap:);
  methods[7].selector = @selector(setWidgetOnNativeClass);
  methods[8].selector = @selector(setAttributeWithASWidgetAttribute:withNSString:withId:withASILifeCycleDecorator:);
  methods[9].selector = @selector(getAttributeWithASWidgetAttribute:withASILifeCycleDecorator:);
  methods[10].selector = @selector(asWidget);
  methods[11].selector = @selector(nativeCreateWithJavaUtilMap:);
  methods[12].selector = @selector(handleHtmlTextWithNSString:);
  methods[13].selector = @selector(nativeSetTextWithNSString:);
  methods[14].selector = @selector(nativeSetHtmlTextWithId:);
  methods[15].selector = @selector(getMyText);
  methods[16].selector = @selector(setPaddingWithId:);
  methods[17].selector = @selector(setPaddingBottomWithId:);
  methods[18].selector = @selector(setPaddingTopWithId:);
  methods[19].selector = @selector(setPaddingLeftWithId:);
  methods[20].selector = @selector(setPaddingRightWithId:);
  methods[21].selector = @selector(getPaddingTop);
  methods[22].selector = @selector(getPaddingEnd);
  methods[23].selector = @selector(getPaddingStart);
  methods[24].selector = @selector(getPaddingLeft);
  methods[25].selector = @selector(getPaddingRight);
  methods[26].selector = @selector(getPaddingBottom);
  methods[27].selector = @selector(setPaddingVerticalWithId:);
  methods[28].selector = @selector(setPaddingHorizontalWithId:);
  methods[29].selector = @selector(setPaddingEndWithId:);
  methods[30].selector = @selector(setPaddingStartWithId:);
  methods[31].selector = @selector(getTextSize);
  methods[32].selector = @selector(setMyTextSizeWithId:);
  methods[33].selector = @selector(nativeSetTextSizeWithInt:);
  methods[34].selector = @selector(setVerticalAligmentCenter);
  methods[35].selector = @selector(setVerticalAligmentBottom);
  methods[36].selector = @selector(setVerticalAligmentTop);
  methods[37].selector = @selector(setHorizontalAligmentCenter);
  methods[38].selector = @selector(setHorizontalAligmentRight);
  methods[39].selector = @selector(setHorizontalAligmentRightInternal);
  methods[40].selector = @selector(setHorizontalAligmentLeft);
  methods[41].selector = @selector(setHorizontalAligmentLeftInternal);
  methods[42].selector = @selector(getTextAlignment);
  methods[43].selector = @selector(nativeSetVerticalAligmentBottom);
  methods[44].selector = @selector(nativeSetVerticalAligmentTop);
  methods[45].selector = @selector(nativeSetVerticalAligmentCenter);
  methods[46].selector = @selector(addMinMaxListener);
  methods[47].selector = @selector(getBorderPadding);
  methods[48].selector = @selector(getLineHeightPadding);
  methods[49].selector = @selector(getLineHeight);
  methods[50].selector = @selector(getBorderWidth);
  methods[51].selector = @selector(getEllipsize);
  methods[52].selector = @selector(setEllipsizeWithId:withNSString:);
  methods[53].selector = @selector(nativeGetLinBreakMode);
  methods[54].selector = @selector(nativeSetLineBreakModeWithInt:);
  methods[55].selector = @selector(setJustificationModeWithId:withNSString:);
  methods[56].selector = @selector(nativeSetTextAligmentWithInt:);
  methods[57].selector = @selector(getJustificationMode);
  methods[58].selector = @selector(nativeGetTextAligment);
  methods[59].selector = @selector(setShadowDyWithJavaLangFloat:withNSString:);
  methods[60].selector = @selector(setShadowDxWithJavaLangFloat:withNSString:);
  methods[61].selector = @selector(getShadowDy);
  methods[62].selector = @selector(getShadowDx);
  methods[63].selector = @selector(setSingleLineWithId:);
  methods[64].selector = @selector(getSingleLine);
  methods[65].selector = @selector(setEnabledWithId:);
  methods[66].selector = @selector(toUpperCaseWithNSString:);
  methods[67].selector = @selector(nativeGetFontSize);
  methods[68].selector = @selector(nativeGetFontStyle);
  methods[69].selector = @selector(nativeSetCustomFontWithInt:withASFontDescriptor:);
  methods[70].selector = @selector(nativeSetFontStyleWithInt:);
  methods[71].selector = @selector(setDrawablePaddingWithId:);
  methods[72].selector = @selector(setDrawableBottomWithId:);
  methods[73].selector = @selector(setDrawableTopWithId:);
  methods[74].selector = @selector(setDrawableRightWithNSString:withId:);
  methods[75].selector = @selector(setDrawableRightInternalWithNSString:withId:);
  methods[76].selector = @selector(setDrawableLeftWithNSString:withId:);
  methods[77].selector = @selector(setDrawableLeftInternalWithNSString:withId:);
  methods[78].selector = @selector(getImageHeightWithId:);
  methods[79].selector = @selector(getImageWidthWithId:);
  methods[80].selector = @selector(getDrawablePadding);
  methods[81].selector = @selector(setDrawableTintModeWithId:);
  methods[82].selector = @selector(setDrawableTintWithId:);
  methods[83].selector = @selector(updatePadding);
  methods[84].selector = @selector(setScrollHorizontallyWithId:);
  methods[85].selector = @selector(canMarquee);
  methods[86].selector = @selector(cancelNativeTimer);
  methods[87].selector = @selector(isDisposed);
  methods[88].selector = @selector(addDeallocHandler);
  methods[89].selector = @selector(schedule);
  methods[90].selector = @selector(executeOnMainThreadWithJavaLangRunnable:);
  methods[91].selector = @selector(setTextColorWithId:);
  methods[92].selector = @selector(getTextColorState);
  methods[93].selector = @selector(drawableStateChanged);
  methods[94].selector = @selector(drawableStateChangeWithNSString:withADDrawable:);
  methods[95].selector = @selector(setHintColorWithInt:);
  methods[96].selector = @selector(syncPlaceholderLabel);
  methods[97].selector = @selector(getBaseLine);
  methods[98].selector = @selector(nativeGetBaseLine);
  methods[99].selector = @selector(getFont);
  methods[100].selector = @selector(setTextColorLinkWithADColorStateList:);
  methods[101].selector = @selector(setButtonWithId:);
  methods[102].selector = @selector(setOnCheckedWithId:);
  methods[103].selector = @selector(setCheckedWithId:);
  methods[104].selector = @selector(postSetAttributeWithASWidgetAttribute:withNSString:withId:withASILifeCycleDecorator:);
  methods[105].selector = @selector(getButton);
  methods[106].selector = @selector(getChecked);
  methods[107].selector = @selector(asNativeWidget);
  methods[108].selector = @selector(createLabelWithJavaUtilMap:withADTextView:);
  methods[109].selector = @selector(createLabelWithJavaUtilMap:);
  methods[110].selector = @selector(drawableStateChangedAdditionalAttrs);
  methods[111].selector = @selector(setButtonTintWithId:);
  methods[112].selector = @selector(setButtonTintModeWithId:);
  methods[113].selector = @selector(measureWidth);
  methods[114].selector = @selector(resetError);
  methods[115].selector = @selector(showErrorWithNSString:);
  methods[116].selector = @selector(setGravityWithId:);
  methods[117].selector = @selector(updateTextAlignment);
  methods[118].selector = @selector(getGravity);
  methods[119].selector = @selector(onRtlPropertiesChangedWithInt:);
  methods[120].selector = @selector(setDrawableIconSizeWithId:);
  methods[121].selector = @selector(getMinHeight);
  methods[122].selector = @selector(getMinWidth);
  methods[123].selector = @selector(setEmsWithId:);
  methods[124].selector = @selector(getMaxEms);
  methods[125].selector = @selector(getMinEms);
  methods[126].selector = @selector(setMinEmsWithId:);
  methods[127].selector = @selector(getMinLines);
  methods[128].selector = @selector(getMaxLines);
  methods[129].selector = @selector(setMaxEmsWithId:);
  methods[130].selector = @selector(setWidthWithId:);
  methods[131].selector = @selector(setHeightWithId:);
  methods[132].selector = @selector(setMaxLinesWithId:);
  methods[133].selector = @selector(setLinesWithId:);
  methods[134].selector = @selector(setMinLinesWithId:);
  methods[135].selector = @selector(setMaxHeightWithId:);
  methods[136].selector = @selector(setMaxWidthWithId:);
  methods[137].selector = @selector(getMaxWidth);
  methods[138].selector = @selector(getMaxHeight);
  methods[139].selector = @selector(setMinHeightWithId:);
  methods[140].selector = @selector(setMinWidthWithId:);
  methods[141].selector = @selector(getWidth);
  methods[142].selector = @selector(getHeight);
  methods[143].selector = @selector(getAutoSizeTextTypeWithADTextView:);
  methods[144].selector = @selector(setAutoSizeTextTypeInternalWithInt:);
  methods[145].selector = @selector(setAutoSizePresetSizesWithId:);
  methods[146].selector = @selector(addAutoResizeListener);
  methods[147].selector = @selector(removeResizeListener);
  methods[148].selector = @selector(setMaxLengthWithId:);
  methods[149].selector = @selector(setMyTextWithId:);
  methods[150].selector = @selector(setTextAllCapsWithId:);
  methods[151].selector = @selector(initHtmlWithJavaUtilMap:);
  methods[152].selector = @selector(setTypeFaceWithId:withNSString:);
  methods[153].selector = @selector(setFontFamilyWithId:withNSString:);
  methods[154].selector = @selector(setTextStyleWithId:);
  methods[155].selector = @selector(calcNumberOfWhiteSpaces);
  methods[156].selector = @selector(cancelTimer);
  methods[157].selector = @selector(startTimer);
  methods[158].selector = @selector(getMarqueeRepeatLimit);
  methods[159].selector = @selector(setMarqueeRepeatLimitWithId:);
  methods[160].selector = @selector(startOrStopMarqueeWithId:);
  methods[161].selector = @selector(getLabelWidth);
  methods[162].selector = @selector(isLabelMeasured);
  methods[163].selector = @selector(setPasswordWithId:);
  methods[164].selector = @selector(setFirstBaselineToTopHeightWithId:);
  methods[165].selector = @selector(getIncludeFontPadding);
  methods[166].selector = @selector(getFirstBaselineToTopHeight);
  methods[167].selector = @selector(setLastBaselineToBottomHeightWithId:);
  methods[168].selector = @selector(getLastBaselineToBottomHeight);
  methods[169].selector = @selector(setAutoSizeStepGranularityWithId:);
  methods[170].selector = @selector(setAutoMinTextSizeWithId:);
  methods[171].selector = @selector(setAutoMaxTextSizeWithId:);
  methods[172].selector = @selector(setAutoSizeTextTypeWithId:);
  methods[173].selector = @selector(getAutoSizeStepGranularity);
  methods[174].selector = @selector(getAutoMinTextSize);
  methods[175].selector = @selector(getAutoMaxTextSize);
  methods[176].selector = @selector(getAutoSizeTextType);
  methods[177].selector = @selector(setErrorMessageWithNSString:);
  methods[178].selector = @selector(setTextFormatWithId:);
  methods[179].selector = @selector(setTextWithId:withId:);
  methods[180].selector = @selector(getText);
  methods[181].selector = @selector(setTextColorWithId:withId:);
  methods[182].selector = @selector(getTextColor);
  methods[183].selector = @selector(setIsEnabledWithId:withId:);
  methods[184].selector = @selector(getIsEnabled);
  methods[185].selector = @selector(setAdjustsFontSizeToFitWidthWithId:withId:);
  methods[186].selector = @selector(getAdjustsFontSizeToFitWidth);
  methods[187].selector = @selector(setAllowsDefaultTighteningForTruncationWithId:withId:);
  methods[188].selector = @selector(getAllowsDefaultTighteningForTruncation);
  methods[189].selector = @selector(setMinimumScaleFactorWithId:withId:);
  methods[190].selector = @selector(getMinimumScaleFactor);
  methods[191].selector = @selector(setNumberOfLinesWithId:withId:);
  methods[192].selector = @selector(getNumberOfLines);
  methods[193].selector = @selector(setHighlightedTextColorWithId:withId:);
  methods[194].selector = @selector(getHighlightedTextColor);
  methods[195].selector = @selector(setIsHighlightedWithId:withId:);
  methods[196].selector = @selector(getIsHighlighted);
  methods[197].selector = @selector(setShadowColorWithId:withId:);
  methods[198].selector = @selector(getShadowColor);
  methods[199].selector = @selector(setPreferredMaxLayoutWidthWithId:withId:);
  methods[200].selector = @selector(getPreferredMaxLayoutWidth);
  methods[201].selector = @selector(setIsUserInteractionEnabledWithId:withId:);
  methods[202].selector = @selector(getIsUserInteractionEnabled);
  methods[203].selector = @selector(checkIosVersionWithNSString:);
  methods[204].selector = @selector(setIdWithNSString:);
  methods[205].selector = @selector(setVisibleWithBoolean:);
  methods[206].selector = @selector(requestLayout);
  methods[207].selector = @selector(invalidate);
  methods[208].selector = @selector(allowUnCheck);
  methods[209].selector = @selector(setCheckedWithBoolean:);
  methods[210].selector = @selector(isChecked);
  methods[211].selector = @selector(addCheckedListenerWithId:withNSString:);
  methods[212].selector = @selector(setErrorWithId:);
  methods[213].selector = @selector(getTextEntered);
  methods[214].selector = @selector(isViewVisible);
  methods[215].selector = @selector(focus);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "LOCAL_NAME", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 129, -1, -1 },
    { "GROUP_NAME", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 130, -1, -1 },
    { "uiView_", "LNSObject;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "measurableView_", "LADRadioButton;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "canvas_", "LADCanvas;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "TEXT_ALIGN_CENTER", "I", .constantValue.asInt = ASRadioButtonImpl_TEXT_ALIGN_CENTER, 0x1a, -1, -1, -1, -1 },
    { "TEXT_ALIGN_LEFT", "I", .constantValue.asInt = ASRadioButtonImpl_TEXT_ALIGN_LEFT, 0x1a, -1, -1, -1, -1 },
    { "TEXT_ALIGN_RIGHT", "I", .constantValue.asInt = ASRadioButtonImpl_TEXT_ALIGN_RIGHT, 0x1a, -1, -1, -1, -1 },
    { "ellipsize_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "ITALIC_FONT_TRAIT", "I", .constantValue.asLong = 0, 0xa, -1, 131, -1, -1 },
    { "BOLD_FONT_TRAIT", "I", .constantValue.asLong = 0, 0xa, -1, 132, -1, -1 },
    { "NORMAL_FONT_TRAIT", "I", .constantValue.asInt = ASRadioButtonImpl_NORMAL_FONT_TRAIT, 0x1a, -1, -1, -1, -1 },
    { "drawableTint_", "LADColorStateList;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "timer_", "LNSObject;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "isDisposed_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "dellocHandler_", "LASRadioButtonImpl_DellocHandler;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "postMeasureHandler_", "LASRadioButtonImpl_PostMeasureHandler;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "POST_MEASURE_EVENT_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "html_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "escapeHtml_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "htmlConfig_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 133, -1 },
    { "fontDescriptors_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 134, -1 },
    { "marqueeTask_", "LASRadioButtonImpl_MarqueeTask;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "marqueeRepeatLimit_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "marqueeCommandConverter_", "LASMarqueeCommandConverter;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "autoSizeMin_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "autoSizeMax_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "autoSizeGranular_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "loadAttributes", "LNSString;", "LNSString;LNSString;", "create", "LASIFragment;LJavaUtilMap;", "(Lcom/ashera/core/IFragment;Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;)V", "setAttribute", "LASWidgetAttribute;LNSString;LNSObject;LASILifeCycleDecorator;", "getAttribute", "LASWidgetAttribute;LASILifeCycleDecorator;", "nativeCreate", "LJavaUtilMap;", "(Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;)V", "handleHtmlText", "nativeSetText", "nativeSetHtmlText", "LNSObject;", "setPadding", "setPaddingBottom", "setPaddingTop", "setPaddingLeft", "setPaddingRight", "setPaddingVertical", "setPaddingHorizontal", "setPaddingEnd", "setPaddingStart", "setMyTextSize", "nativeSetTextSize", "I", "setEllipsize", "LNSObject;LNSString;", "nativeSetLineBreakMode", "setJustificationMode", "nativeSetTextAligment", "setShadowDy", "LJavaLangFloat;LNSString;", "setShadowDx", "setSingleLine", "setEnabled", "toUpperCase", "nativeSetCustomFont", "ILASFontDescriptor;", "nativeSetFontStyle", "setDrawablePadding", "setDrawableBottom", "setDrawableTop", "setDrawableRight", "LNSString;LNSObject;", "setDrawableRightInternal", "setDrawableLeft", "setDrawableLeftInternal", "getImageHeight", "getImageWidth", "setDrawableTintMode", "setDrawableTint", "setScrollHorizontally", "executeOnMainThread", "LJavaLangRunnable;", "setTextColor", "drawableStateChange", "LNSString;LADDrawable;", "setHintColor", "setTextColorLink", "LADColorStateList;", "setButton", "setOnChecked", "setChecked", "postSetAttribute", "createLabel", "LJavaUtilMap;LADTextView;", "(Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;Lr/android/widget/TextView;)V", "setButtonTint", "setButtonTintMode", "showError", "setGravity", "onRtlPropertiesChanged", "setDrawableIconSize", "setEms", "setMinEms", "setMaxEms", "setWidth", "setHeight", "setMaxLines", "setLines", "setMinLines", "setMaxHeight", "setMaxWidth", "setMinHeight", "setMinWidth", "getAutoSizeTextType", "LADTextView;", "setAutoSizeTextTypeInternal", "setAutoSizePresetSizes", "setMaxLength", "setMyText", "setTextAllCaps", "initHtml", "setTypeFace", "setFontFamily", "setTextStyle", "setMarqueeRepeatLimit", "startOrStopMarquee", "setPassword", "setFirstBaselineToTopHeight", "setLastBaselineToBottomHeight", "setAutoSizeStepGranularity", "setAutoMinTextSize", "setAutoMaxTextSize", "setAutoSizeTextType", "setErrorMessage", "setTextFormat", "setText", "LNSObject;LNSObject;", "setIsEnabled", "setAdjustsFontSizeToFitWidth", "setAllowsDefaultTighteningForTruncation", "setMinimumScaleFactor", "setNumberOfLines", "setHighlightedTextColor", "setIsHighlighted", "setShadowColor", "setPreferredMaxLayoutWidth", "setIsUserInteractionEnabled", "checkIosVersion", "setId", "setVisible", "Z", "addCheckedListener", "setError", &ASRadioButtonImpl_LOCAL_NAME, &ASRadioButtonImpl_GROUP_NAME, &ASRadioButtonImpl_ITALIC_FONT_TRAIT, &ASRadioButtonImpl_BOLD_FONT_TRAIT, "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", "Ljava/util/Map<Ljava/lang/String;Lcom/ashera/model/FontDescriptor;>;", "LASRadioButtonImpl_ButtonTinttMode;LASRadioButtonImpl_Ellipsize;LASRadioButtonImpl_MarqueeRepeatLimit;LASRadioButtonImpl_JustificationMode;LASRadioButtonImpl_Font;LASRadioButtonImpl_TextStyle;LASRadioButtonImpl_DrawableTintMode;LASRadioButtonImpl_RadioButtonExt;LASRadioButtonImpl_DellocHandler;LASRadioButtonImpl_StateToggler;LASRadioButtonImpl_MyCanvas;LASRadioButtonImpl_PostMeasureHandler;LASRadioButtonImpl_MarqueeTask;LASRadioButtonImpl_OnCheckedChangeListener;" };
  static const J2ObjcClassInfo _ASRadioButtonImpl = { "RadioButtonImpl", "com.ashera.layout", ptrTable, methods, fields, 7, 0x1, 216, 28, -1, 135, -1, -1, -1 };
  return &_ASRadioButtonImpl;
}

+ (void)initialize {
  if (self == [ASRadioButtonImpl class]) {
    ASRadioButtonImpl_ITALIC_FONT_TRAIT = JreLoadStatic(ASLayoutNativeVars, UIFontDescriptorTraitItalic);
    ASRadioButtonImpl_BOLD_FONT_TRAIT = JreLoadStatic(ASLayoutNativeVars, UIFontDescriptorTraitBold);
    J2OBJC_SET_INITIALIZED(ASRadioButtonImpl)
  }
}

@end

void ASRadioButtonImpl_init(ASRadioButtonImpl *self) {
  ASBaseWidget_initWithNSString_withNSString_(self, ASRadioButtonImpl_GROUP_NAME, ASRadioButtonImpl_LOCAL_NAME);
  self->POST_MEASURE_EVENT_ = [((ASEvent_StandardEvents *) nil_chk(JreLoadEnum(ASEvent_StandardEvents, postMeasure))) description];
  self->autoSizeMin_ = -1;
  self->autoSizeMax_ = -1;
  self->autoSizeGranular_ = -1;
}

ASRadioButtonImpl *new_ASRadioButtonImpl_init() {
  J2OBJC_NEW_IMPL(ASRadioButtonImpl, init)
}

ASRadioButtonImpl *create_ASRadioButtonImpl_init() {
  J2OBJC_CREATE_IMPL(ASRadioButtonImpl, init)
}

void ASRadioButtonImpl_initWithNSString_(ASRadioButtonImpl *self, NSString *localname) {
  ASBaseWidget_initWithNSString_withNSString_(self, ASRadioButtonImpl_GROUP_NAME, localname);
  self->POST_MEASURE_EVENT_ = [((ASEvent_StandardEvents *) nil_chk(JreLoadEnum(ASEvent_StandardEvents, postMeasure))) description];
  self->autoSizeMin_ = -1;
  self->autoSizeMax_ = -1;
  self->autoSizeGranular_ = -1;
}

ASRadioButtonImpl *new_ASRadioButtonImpl_initWithNSString_(NSString *localname) {
  J2OBJC_NEW_IMPL(ASRadioButtonImpl, initWithNSString_, localname)
}

ASRadioButtonImpl *create_ASRadioButtonImpl_initWithNSString_(NSString *localname) {
  J2OBJC_CREATE_IMPL(ASRadioButtonImpl, initWithNSString_, localname)
}

void ASRadioButtonImpl_initWithNSString_withNSString_(ASRadioButtonImpl *self, NSString *groupName, NSString *localname) {
  ASBaseWidget_initWithNSString_withNSString_(self, groupName, localname);
  self->POST_MEASURE_EVENT_ = [((ASEvent_StandardEvents *) nil_chk(JreLoadEnum(ASEvent_StandardEvents, postMeasure))) description];
  self->autoSizeMin_ = -1;
  self->autoSizeMax_ = -1;
  self->autoSizeGranular_ = -1;
}

ASRadioButtonImpl *new_ASRadioButtonImpl_initWithNSString_withNSString_(NSString *groupName, NSString *localname) {
  J2OBJC_NEW_IMPL(ASRadioButtonImpl, initWithNSString_withNSString_, groupName, localname)
}

ASRadioButtonImpl *create_ASRadioButtonImpl_initWithNSString_withNSString_(NSString *groupName, NSString *localname) {
  J2OBJC_CREATE_IMPL(ASRadioButtonImpl, initWithNSString_withNSString_, groupName, localname)
}

void ASRadioButtonImpl_setWidgetOnNativeClass(ASRadioButtonImpl *self) {
  ((ASUILabel*) self.uiView).widget = self;
}

void ASRadioButtonImpl_nativeCreateWithJavaUtilMap_(ASRadioButtonImpl *self, id<JavaUtilMap> params) {
  ASRadioButtonImpl_initHtmlWithJavaUtilMap_(self, params);
  ASRadioButtonImpl_createLabelWithJavaUtilMap_withADTextView_(self, params, (ADTextView *) cast_chk([self asWidget], [ADTextView class]));
  [((ADRadioButton *) nil_chk(self->measurableView_)) setVerticalAligmentWithASBaseMeasurableView_VerticalAligment:JreLoadEnum(ASBaseMeasurableView_VerticalAligment, top)];
  [self registerForAttributeCommandChainWithNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"text" } count:1 type:NSString_class_()]];
  [self registerForAttributeCommandChainWithPhaseWithNSString:@"predraw" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableStart", @"drawableEnd", @"drawableLeft", @"drawableTop", @"drawableRight", @"drawableBottom", @"drawablePadding", @"drawableTint", @"drawableTintMode", @"button", @"buttonTint", @"buttonTintMode" } count:12 type:NSString_class_()]];
}

void ASRadioButtonImpl_handleHtmlTextWithNSString_(ASRadioButtonImpl *self, NSString *text) {
  ASRadioButtonImpl_nativeSetHtmlTextWithId_(self, [((id<ASAttributedString>) nil_chk(ASHtml_fromHtmlWithNSString_withJavaUtilMap_withASIFragment_(text, self->htmlConfig_, self->fragment_))) get]);
}

void ASRadioButtonImpl_nativeSetTextWithNSString_(ASRadioButtonImpl *self, NSString *text) {
  [((ASUILabel*)self->uiView_) setText:text];
}

void ASRadioButtonImpl_nativeSetHtmlTextWithId_(ASRadioButtonImpl *self, id text) {
  [((ASUILabel*)self->uiView_) setAttributedText : (NSMutableAttributedString*)text];
}

id ASRadioButtonImpl_getMyText(ASRadioButtonImpl *self) {
  return ((ASUILabel*)self.uiView).text;
}

id ASRadioButtonImpl_getPaddingTop(ASRadioButtonImpl *self) {
  return JavaLangInteger_valueOfWithInt_([((ADView *) nil_chk(((ADView *) cast_chk([self asWidget], [ADView class])))) getPaddingTop]);
}

id ASRadioButtonImpl_getPaddingEnd(ASRadioButtonImpl *self) {
  return JavaLangInteger_valueOfWithInt_([((ADView *) nil_chk(((ADView *) cast_chk([self asWidget], [ADView class])))) getPaddingEnd]);
}

id ASRadioButtonImpl_getPaddingStart(ASRadioButtonImpl *self) {
  return JavaLangInteger_valueOfWithInt_([((ADView *) nil_chk(((ADView *) cast_chk([self asWidget], [ADView class])))) getPaddingStart]);
}

id ASRadioButtonImpl_getPaddingLeft(ASRadioButtonImpl *self) {
  return JavaLangInteger_valueOfWithInt_([((ADView *) nil_chk(((ADView *) cast_chk([self asWidget], [ADView class])))) getPaddingLeft]);
}

id ASRadioButtonImpl_getPaddingRight(ASRadioButtonImpl *self) {
  return JavaLangInteger_valueOfWithInt_([((ADView *) nil_chk(((ADView *) cast_chk([self asWidget], [ADView class])))) getPaddingRight]);
}

id ASRadioButtonImpl_getPaddingBottom(ASRadioButtonImpl *self) {
  return JavaLangInteger_valueOfWithInt_([((ADView *) nil_chk(((ADView *) cast_chk([self asWidget], [ADView class])))) getPaddingBottom]);
}

void ASRadioButtonImpl_setPaddingVerticalWithId_(ASRadioButtonImpl *self, id objValue) {
  [self setPaddingTopWithId:objValue];
  [self setPaddingBottomWithId:objValue];
}

void ASRadioButtonImpl_setPaddingHorizontalWithId_(ASRadioButtonImpl *self, id objValue) {
  [self setPaddingLeftWithId:objValue];
  [self setPaddingRightWithId:objValue];
}

void ASRadioButtonImpl_setPaddingEndWithId_(ASRadioButtonImpl *self, id objValue) {
  [self setPaddingRightWithId:objValue];
}

void ASRadioButtonImpl_setPaddingStartWithId_(ASRadioButtonImpl *self, id objValue) {
  [self setPaddingLeftWithId:objValue];
}

id ASRadioButtonImpl_getTextSize(ASRadioButtonImpl *self) {
  return [JavaLangFloat valueOfWithFloat:((ASUILabel*)self.uiView).font.pointSize];
}

void ASRadioButtonImpl_setMyTextSizeWithId_(ASRadioButtonImpl *self, id objValue) {
  jfloat fontSize = [((JavaLangFloat *) nil_chk(((JavaLangFloat *) cast_chk(objValue, [JavaLangFloat class])))) floatValue] * [((id<ASIActivity>) nil_chk([((id<ASIFragment>) nil_chk([self getFragment])) getRootActivity])) getScaleFactor];
  ASRadioButtonImpl_nativeSetTextSizeWithInt_(self, JreFpToInt(fontSize));
}

void ASRadioButtonImpl_nativeSetTextSizeWithInt_(ASRadioButtonImpl *self, jint value) {
  [((ASUILabel*)self.uiView) setFont: [((ASUILabel*)self.uiView).font fontWithSize: value]];
}

void ASRadioButtonImpl_setVerticalAligmentCenter(ASRadioButtonImpl *self) {
  [((ADRadioButton *) nil_chk(self->measurableView_)) setVerticalAligmentWithASBaseMeasurableView_VerticalAligment:JreLoadEnum(ASBaseMeasurableView_VerticalAligment, middle)];
  ASRadioButtonImpl_nativeSetVerticalAligmentCenter(self);
}

void ASRadioButtonImpl_setVerticalAligmentBottom(ASRadioButtonImpl *self) {
  [((ADRadioButton *) nil_chk(self->measurableView_)) setVerticalAligmentWithASBaseMeasurableView_VerticalAligment:JreLoadEnum(ASBaseMeasurableView_VerticalAligment, bottom)];
  ASRadioButtonImpl_nativeSetVerticalAligmentBottom(self);
}

void ASRadioButtonImpl_setVerticalAligmentTop(ASRadioButtonImpl *self) {
  [((ADRadioButton *) nil_chk(self->measurableView_)) setVerticalAligmentWithASBaseMeasurableView_VerticalAligment:JreLoadEnum(ASBaseMeasurableView_VerticalAligment, top)];
  ASRadioButtonImpl_nativeSetVerticalAligmentTop(self);
}

void ASRadioButtonImpl_setHorizontalAligmentCenter(ASRadioButtonImpl *self) {
  ((ASUILabel*)self.uiView).textAlignment = NSTextAlignmentCenter;
}

void ASRadioButtonImpl_setHorizontalAligmentRight(ASRadioButtonImpl *self) {
  ASRadioButtonImpl_setHorizontalAligmentRightInternal(self);
}

void ASRadioButtonImpl_setHorizontalAligmentRightInternal(ASRadioButtonImpl *self) {
  ((ASUILabel*)self.uiView).textAlignment = NSTextAlignmentRight;
}

void ASRadioButtonImpl_setHorizontalAligmentLeft(ASRadioButtonImpl *self) {
  ASRadioButtonImpl_setHorizontalAligmentLeftInternal(self);
}

void ASRadioButtonImpl_setHorizontalAligmentLeftInternal(ASRadioButtonImpl *self) {
  ((ASUILabel*)self.uiView).textAlignment = NSTextAlignmentLeft;
}

jint ASRadioButtonImpl_getTextAlignment(ASRadioButtonImpl *self) {
  int alignment = (int) ((ASUILabel*)self.uiView).textAlignment;
  
  if (alignment == NSTextAlignmentCenter) {
    return 2;
  }
  
  if (alignment == NSTextAlignmentLeft) {
    return 0;
  }
  
  if (alignment == NSTextAlignmentRight) {
    return 1;
  }
  
  return 0;
}

void ASRadioButtonImpl_nativeSetVerticalAligmentBottom(ASRadioButtonImpl *self) {
}

void ASRadioButtonImpl_nativeSetVerticalAligmentTop(ASRadioButtonImpl *self) {
}

void ASRadioButtonImpl_nativeSetVerticalAligmentCenter(ASRadioButtonImpl *self) {
}

void ASRadioButtonImpl_addMinMaxListener(ASRadioButtonImpl *self) {
}

jint ASRadioButtonImpl_getLineHeight(ASRadioButtonImpl *self) {
  return ceil(((ASUILabel*)self.uiView).font.lineHeight);
}

jint ASRadioButtonImpl_getBorderWidth(ASRadioButtonImpl *self) {
  return 0;
}

id ASRadioButtonImpl_getEllipsize(ASRadioButtonImpl *self) {
  if ([((NSString *) nil_chk(self->ellipsize_)) isEqual:@"marquee"]) {
    return JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, NSLineBreakByMarquee));
  }
  return ASRadioButtonImpl_nativeGetLinBreakMode(self);
}

void ASRadioButtonImpl_setEllipsizeWithId_withNSString_(ASRadioButtonImpl *self, id objValue, NSString *strValue) {
  self->ellipsize_ = strValue;
  jint lineBreakMode = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
  if (lineBreakMode == JreLoadStatic(ASLayoutNativeVars, NSLineBreakByMarquee)) {
    lineBreakMode = JreLoadStatic(ASLayoutNativeVars, NSLineBreakByClipping);
  }
  if (ASViewImpl_isRTLLayoutDirectionWithASIWidget_(self)) {
    if (lineBreakMode == JreLoadStatic(ASLayoutNativeVars, NSLineBreakByTruncatingTail)) {
      lineBreakMode = JreLoadStatic(ASLayoutNativeVars, NSLineBreakByTruncatingHead);
    }
    else if (lineBreakMode == JreLoadStatic(ASLayoutNativeVars, NSLineBreakByTruncatingHead)) {
      lineBreakMode = JreLoadStatic(ASLayoutNativeVars, NSLineBreakByTruncatingTail);
    }
  }
  ASRadioButtonImpl_nativeSetLineBreakModeWithInt_(self, lineBreakMode);
  ASRadioButtonImpl_cancelTimer(self);
  if ([((NSString *) nil_chk(strValue)) isEqual:@"marquee"]) {
    ASRadioButtonImpl_startTimer(self);
  }
}

JavaLangInteger *ASRadioButtonImpl_nativeGetLinBreakMode(ASRadioButtonImpl *self) {
  return [JavaLangInteger valueOfWithInt:(jint) ((ASUILabel*)self->uiView_).lineBreakMode];
}

void ASRadioButtonImpl_nativeSetLineBreakModeWithInt_(ASRadioButtonImpl *self, jint lineBreakMode) {
  [((ASUILabel*)self->uiView_) setLineBreakMode:lineBreakMode];
}

void ASRadioButtonImpl_setJustificationModeWithId_withNSString_(ASRadioButtonImpl *self, id objValue, NSString *strValue) {
  ASRadioButtonImpl_nativeSetTextAligmentWithInt_(self, [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]);
}

void ASRadioButtonImpl_nativeSetTextAligmentWithInt_(ASRadioButtonImpl *self, jint textAlignment) {
  [((ASUILabel*)self->uiView_) setTextAlignment:textAlignment];
}

id ASRadioButtonImpl_getJustificationMode(ASRadioButtonImpl *self) {
  return ASRadioButtonImpl_nativeGetTextAligment(self);
}

JavaLangInteger *ASRadioButtonImpl_nativeGetTextAligment(ASRadioButtonImpl *self) {
  return [JavaLangInteger valueOfWithInt:(jint)((ASUILabel*)self->uiView_).textAlignment];
}

void ASRadioButtonImpl_setShadowDyWithJavaLangFloat_withNSString_(ASRadioButtonImpl *self, JavaLangFloat *objValue, NSString *strValue) {
  ASUILabel* label = ((ASUILabel*)self->uiView_);
  [label setShadowOffset:CGSizeMake(label.shadowOffset.width, [objValue floatValue])];
}

void ASRadioButtonImpl_setShadowDxWithJavaLangFloat_withNSString_(ASRadioButtonImpl *self, JavaLangFloat *objValue, NSString *strValue) {
  ASUILabel* label = ((ASUILabel*)self->uiView_);
  [label setShadowOffset:CGSizeMake([objValue floatValue], label.shadowOffset.height)];
}

id ASRadioButtonImpl_getShadowDy(ASRadioButtonImpl *self) {
  return [JavaLangFloat valueOfWithFloat:(jint)((ASUILabel*)self->uiView_).shadowOffset.height];
}

id ASRadioButtonImpl_getShadowDx(ASRadioButtonImpl *self) {
  return [JavaLangFloat valueOfWithFloat:(jint)((ASUILabel*)self->uiView_).shadowOffset.width];
}

void ASRadioButtonImpl_setSingleLineWithId_(ASRadioButtonImpl *self, id objValue) {
  if (objValue != nil && [(JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]) booleanValue]) {
    [self setNumberOfLinesWithId:[self asNativeWidget] withId:JavaLangInteger_valueOfWithInt_(1)];
  }
  else {
    [self setNumberOfLinesWithId:[self asNativeWidget] withId:JavaLangInteger_valueOfWithInt_(0)];
  }
}

id ASRadioButtonImpl_getSingleLine(ASRadioButtonImpl *self) {
  return [JavaLangBoolean valueOfWithBoolean:((ASUILabel*)self.uiView).numberOfLines == 1];
}

void ASRadioButtonImpl_setEnabledWithId_(ASRadioButtonImpl *self, id objValue) {
  [self setIsEnabledWithId:[self asNativeWidget] withId:objValue];
}

NSString *ASRadioButtonImpl_toUpperCaseWithNSString_(NSString *text) {
  ASRadioButtonImpl_initialize();
  return [((NSString *) nil_chk(text)) java_uppercaseStringWithJRELocale:JavaUtilLocale_getDefault()];
}

jint ASRadioButtonImpl_nativeGetFontSize(ASRadioButtonImpl *self) {
  return JreFpToInt(JavaLangMath_ceilWithDouble_([((JavaLangFloat *) nil_chk((JavaLangFloat *) cast_chk(ASRadioButtonImpl_getTextSize(self), [JavaLangFloat class]))) floatValue]));
}

jint ASRadioButtonImpl_nativeGetFontStyle(ASRadioButtonImpl *self) {
  ASUILabel* label = ((ASUILabel*)self->uiView_);
  return label.font.fontDescriptor.symbolicTraits;
}

void ASRadioButtonImpl_nativeSetCustomFontWithInt_withASFontDescriptor_(ASRadioButtonImpl *self, jint height, ASFontDescriptor *fontDescriptor) {
  ASUILabel* label = ((ASUILabel*)self->uiView_);
  UIFont* font = [UIFont fontWithName:[fontDescriptor getName] size:height];
  if (font == nil) {
    [NSException raise:@"InitNotImplemented" format:@"%@", [NSString stringWithFormat:@"Failed to load the %@ font. Make sure the font file is included in the project and the font name is spelled correctly.", [fontDescriptor getName]]];
  }
  if ([fontDescriptor getStyle] != 0) {
    UIFontDescriptor* fontD = [font.fontDescriptor fontDescriptorWithSymbolicTraits:[fontDescriptor getStyle]];
    ((ASUILabel*)label).font = [UIFont fontWithDescriptor:fontD size:0];
  } else {
    ((ASUILabel*)label).font = font;
  }
}

void ASRadioButtonImpl_nativeSetFontStyleWithInt_(ASRadioButtonImpl *self, jint style) {
  ASUILabel* label = ((ASUILabel*)self->uiView_);
  UIFontDescriptor* fontD = [label.font.fontDescriptor fontDescriptorWithSymbolicTraits:style];
  ((ASUILabel*)label).font = [UIFont fontWithDescriptor:fontD size:0];
}

void ASRadioButtonImpl_setDrawablePaddingWithId_(ASRadioButtonImpl *self, id objValue) {
  [((ADRadioButton *) nil_chk(self->measurableView_)) setDrawablePaddingWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
  [self updatePadding];
}

void ASRadioButtonImpl_setDrawableBottomWithId_(ASRadioButtonImpl *self, id objValue) {
  if ([@"@null" isEqual:objValue]) {
    [((ADRadioButton *) nil_chk(self->measurableView_)) setBottomDrawableWithADDrawable:nil];
    [self applyAttributeCommandWithNSString:@"drawableBottom" withNSString:@"drawDrawableIcon" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){  } count:0 type:NSString_class_()] withBoolean:false withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"bottom" } count:1 type:NSObject_class_()]];
  }
  else if (objValue != nil && [objValue isKindOfClass:[ADDrawable class]]) {
    [((ADRadioButton *) nil_chk(self->measurableView_)) setBottomDrawableWithADDrawable:(ADDrawable *) cast_chk(objValue, [ADDrawable class])];
    [self applyAttributeCommandWithNSString:@"drawableBottom" withNSString:@"drawDrawableIcon" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){  } count:0 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"bottom" } count:1 type:NSObject_class_()]];
    [self updatePadding];
  }
}

void ASRadioButtonImpl_setDrawableTopWithId_(ASRadioButtonImpl *self, id objValue) {
  if ([@"@null" isEqual:objValue]) {
    [((ADRadioButton *) nil_chk(self->measurableView_)) setTopDrawableWithADDrawable:nil];
    [self applyAttributeCommandWithNSString:@"drawableTop" withNSString:@"drawDrawableIcon" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){  } count:0 type:NSString_class_()] withBoolean:false withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"top" } count:1 type:NSObject_class_()]];
  }
  else if (objValue != nil && [objValue isKindOfClass:[ADDrawable class]]) {
    [((ADRadioButton *) nil_chk(self->measurableView_)) setTopDrawableWithADDrawable:(ADDrawable *) cast_chk(objValue, [ADDrawable class])];
    [self applyAttributeCommandWithNSString:@"drawableTop" withNSString:@"drawDrawableIcon" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){  } count:0 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"top" } count:1 type:NSObject_class_()]];
    [self updatePadding];
  }
}

void ASRadioButtonImpl_setDrawableRightWithNSString_withId_(ASRadioButtonImpl *self, NSString *originalAttr, id objValue) {
  if (ASViewImpl_isRTLLayoutWithASIWidget_(self)) {
    ASRadioButtonImpl_setDrawableLeftInternalWithNSString_withId_(self, originalAttr, objValue);
  }
  else {
    ASRadioButtonImpl_setDrawableRightInternalWithNSString_withId_(self, originalAttr, objValue);
  }
}

void ASRadioButtonImpl_setDrawableRightInternalWithNSString_withId_(ASRadioButtonImpl *self, NSString *originalAttr, id objValue) {
  if ([@"@null" isEqual:objValue]) {
    [((ADRadioButton *) nil_chk(self->measurableView_)) setRightDrawableWithADDrawable:nil];
    [self applyAttributeCommandWithNSString:originalAttr withNSString:@"drawDrawableIcon" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){  } count:0 type:NSString_class_()] withBoolean:false withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"right" } count:1 type:NSObject_class_()]];
  }
  else if (objValue != nil && [objValue isKindOfClass:[ADDrawable class]]) {
    [((ADRadioButton *) nil_chk(self->measurableView_)) setRightDrawableWithADDrawable:(ADDrawable *) cast_chk(objValue, [ADDrawable class])];
    [self applyAttributeCommandWithNSString:originalAttr withNSString:@"drawDrawableIcon" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){  } count:0 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"right" } count:1 type:NSObject_class_()]];
    [self updatePadding];
  }
}

void ASRadioButtonImpl_setDrawableLeftWithNSString_withId_(ASRadioButtonImpl *self, NSString *originalAttr, id objValue) {
  if (objValue != nil) {
    if (ASViewImpl_isRTLLayoutWithASIWidget_(self)) {
      ASRadioButtonImpl_setDrawableRightInternalWithNSString_withId_(self, originalAttr, objValue);
    }
    else {
      ASRadioButtonImpl_setDrawableLeftInternalWithNSString_withId_(self, originalAttr, objValue);
    }
  }
}

void ASRadioButtonImpl_setDrawableLeftInternalWithNSString_withId_(ASRadioButtonImpl *self, NSString *originalAttr, id objValue) {
  if ([@"@null" isEqual:objValue]) {
    [((ADRadioButton *) nil_chk(self->measurableView_)) setLeftDrawableWithADDrawable:nil];
    [self applyAttributeCommandWithNSString:originalAttr withNSString:@"drawDrawableIcon" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){  } count:0 type:NSString_class_()] withBoolean:false withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"left" } count:1 type:NSObject_class_()]];
  }
  else if (objValue != nil && [objValue isKindOfClass:[ADDrawable class]]) {
    [((ADRadioButton *) nil_chk(self->measurableView_)) setLeftDrawableWithADDrawable:(ADDrawable *) cast_chk(objValue, [ADDrawable class])];
    [self applyAttributeCommandWithNSString:originalAttr withNSString:@"drawDrawableIcon" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){  } count:0 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"left" } count:1 type:NSObject_class_()]];
    [self updatePadding];
  }
}

jint ASRadioButtonImpl_getImageHeightWithId_(ASRadioButtonImpl *self, id objValue) {
  if ([objValue isKindOfClass:[UIImage class]]) {
    UIImage* image = ((UIImage*) objValue);
    return image.size.height;
  }
  
  return 0;
}

jint ASRadioButtonImpl_getImageWidthWithId_(ASRadioButtonImpl *self, id objValue) {
  if ([objValue isKindOfClass:[UIImage class]]) {
    UIImage* image = ((UIImage*) objValue);
    return image.size.width;
  }
  
  return 0;
}

id ASRadioButtonImpl_getDrawablePadding(ASRadioButtonImpl *self) {
  return JavaLangInteger_valueOfWithInt_([((ADRadioButton *) nil_chk(self->measurableView_)) getDrawablePadding]);
}

void ASRadioButtonImpl_setDrawableTintModeWithId_(ASRadioButtonImpl *self, id value) {
  if ([((ADRadioButton *) nil_chk(self->measurableView_)) getLeftDrawable] != nil) {
    [self applyAttributeCommandWithNSString:@"drawableStart" withNSString:@"cgTintColor" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTintMode" } count:1 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTintMode", value } count:2 type:NSObject_class_()]];
    [self applyAttributeCommandWithNSString:@"drawableLeft" withNSString:@"cgTintColor" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTintMode" } count:1 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTintMode", value } count:2 type:NSObject_class_()]];
  }
  if ([((ADRadioButton *) nil_chk(self->measurableView_)) getRightDrawable] != nil) {
    [self applyAttributeCommandWithNSString:@"drawableRight" withNSString:@"cgTintColor" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTintMode" } count:1 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTintMode", value } count:2 type:NSObject_class_()]];
    [self applyAttributeCommandWithNSString:@"drawableEnd" withNSString:@"cgTintColor" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTintMode" } count:1 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTintMode", value } count:2 type:NSObject_class_()]];
  }
  if ([((ADRadioButton *) nil_chk(self->measurableView_)) getTopDrawable] != nil) {
    [self applyAttributeCommandWithNSString:@"drawableTop" withNSString:@"cgTintColor" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTintMode" } count:1 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTintMode", value } count:2 type:NSObject_class_()]];
  }
  if ([((ADRadioButton *) nil_chk(self->measurableView_)) getBottomDrawable] != nil) {
    [self applyAttributeCommandWithNSString:@"drawableBottom" withNSString:@"cgTintColor" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTintMode" } count:1 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTintMode", value } count:2 type:NSObject_class_()]];
  }
}

void ASRadioButtonImpl_setDrawableTintWithId_(ASRadioButtonImpl *self, id objValue) {
  if ([objValue isKindOfClass:[ADColorStateList class]]) {
    ADColorStateList *colorStateList = (ADColorStateList *) objValue;
    self->drawableTint_ = colorStateList;
    objValue = JavaLangInteger_valueOfWithInt_([((ADColorStateList *) nil_chk(self->drawableTint_)) getColorForStateWithIntArray:[((ADRadioButton *) nil_chk(self->measurableView_)) getDrawableState] withInt:ADColor_RED]);
  }
  if ([((ADRadioButton *) nil_chk(self->measurableView_)) getLeftDrawable] != nil) {
    [self applyAttributeCommandWithNSString:@"drawableLeft" withNSString:@"cgTintColor" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTint" } count:1 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTint", ASViewImpl_getColorWithId_(objValue) } count:2 type:NSObject_class_()]];
    [self applyAttributeCommandWithNSString:@"drawableStart" withNSString:@"cgTintColor" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTint" } count:1 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTint", ASViewImpl_getColorWithId_(objValue) } count:2 type:NSObject_class_()]];
  }
  if ([((ADRadioButton *) nil_chk(self->measurableView_)) getRightDrawable] != nil) {
    [self applyAttributeCommandWithNSString:@"drawableRight" withNSString:@"cgTintColor" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTint" } count:1 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTint", ASViewImpl_getColorWithId_(objValue) } count:2 type:NSObject_class_()]];
    [self applyAttributeCommandWithNSString:@"drawableEnd" withNSString:@"cgTintColor" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTint" } count:1 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTint", ASViewImpl_getColorWithId_(objValue) } count:2 type:NSObject_class_()]];
  }
  if ([((ADRadioButton *) nil_chk(self->measurableView_)) getTopDrawable] != nil) {
    [self applyAttributeCommandWithNSString:@"drawableTop" withNSString:@"cgTintColor" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTint" } count:1 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTint", ASViewImpl_getColorWithId_(objValue) } count:2 type:NSObject_class_()]];
  }
  if ([((ADRadioButton *) nil_chk(self->measurableView_)) getBottomDrawable] != nil) {
    [self applyAttributeCommandWithNSString:@"drawableBottom" withNSString:@"cgTintColor" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTint" } count:1 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTint", ASViewImpl_getColorWithId_(objValue) } count:2 type:NSObject_class_()]];
  }
}

void ASRadioButtonImpl_setScrollHorizontallyWithId_(ASRadioButtonImpl *self, id objValue) {
  [((ADRadioButton *) nil_chk(self->measurableView_)) setHorizontallyScrollingWithBoolean:objValue != nil && [(JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]) booleanValue]];
}

jboolean ASRadioButtonImpl_canMarquee(ASRadioButtonImpl *self) {
  return [nil_chk(ASRadioButtonImpl_getSingleLine(self)) isEqual:JreLoadStatic(JavaLangBoolean, TRUE)];
}

void ASRadioButtonImpl_cancelNativeTimer(ASRadioButtonImpl *self) {
  if (self->timer_ != nil) {
    [(NSTimer*) self->timer_ invalidate];
    self->timer_ = nil;
  }
}

jboolean ASRadioButtonImpl_isDisposed(ASRadioButtonImpl *self) {
  return self->isDisposed_;
}

void ASRadioButtonImpl_addDeallocHandler(ASRadioButtonImpl *self) {
  if (self->dellocHandler_ == nil) {
    NSString *type = [((ASEvent_StandardEvents *) nil_chk(JreLoadEnum(ASEvent_StandardEvents, dealloc))) description];
    self->dellocHandler_ = new_ASRadioButtonImpl_DellocHandler_initWithASRadioButtonImpl_withNSString_(self, type);
    [((ASEventBus *) nil_chk([((id<ASIFragment>) nil_chk(self->fragment_)) getEventBus])) onWithNSString:type withASEventBusHandlerArray:[IOSObjectArray newArrayWithObjects:(id[]){ self->dellocHandler_ } count:1 type:ASEventBusHandler_class_()]];
  }
}

void ASRadioButtonImpl_schedule(ASRadioButtonImpl *self) {
  if (self->timer_ == nil) {
    self->timer_ = [NSTimer scheduledTimerWithTimeInterval:0.1
    target:self
    selector:@selector(onTick:)
    userInfo:nil
    repeats:YES];
    [[NSRunLoop mainRunLoop] addTimer:self->timer_ forMode:NSRunLoopCommonModes];
  }
}

void ASRadioButtonImpl_executeOnMainThreadWithJavaLangRunnable_(ASRadioButtonImpl *self, id<JavaLangRunnable> runnable) {
  [((id<JavaLangRunnable>) nil_chk(runnable)) run];
}

void ASRadioButtonImpl_setTextColorWithId_(ASRadioButtonImpl *self, id objValue) {
  if ([objValue isKindOfClass:[ADColorStateList class]]) {
    ADColorStateList *colorStateList = (ADColorStateList *) objValue;
    [((ADRadioButton *) nil_chk(self->measurableView_)) setTextColorWithADColorStateList:colorStateList];
    objValue = JavaLangInteger_valueOfWithInt_([((ADRadioButton *) nil_chk(self->measurableView_)) getCurrentTextColor]);
  }
  [self setTextColorWithId:self->uiView_ withId:ASViewImpl_getColorWithId_(objValue)];
}

id ASRadioButtonImpl_getTextColorState(ASRadioButtonImpl *self) {
  return [((ADRadioButton *) nil_chk(self->measurableView_)) getTextColors];
}

void ASRadioButtonImpl_drawableStateChangeWithNSString_withADDrawable_(ASRadioButtonImpl *self, NSString *type, ADDrawable *dr) {
  IOSIntArray *state = [((ADRadioButton *) nil_chk(self->measurableView_)) getDrawableState];
  if (dr != nil && [dr isStateful] && [dr setStateWithIntArray:state]) {
    switch (JreIndexOfStr(type, (id[]){ @"bottom", @"top", @"left", @"right" }, 4)) {
      case 0:
      ASRadioButtonImpl_setDrawableBottomWithId_(self, dr);
      break;
      case 1:
      ASRadioButtonImpl_setDrawableTopWithId_(self, dr);
      break;
      case 2:
      ASRadioButtonImpl_setDrawableLeftWithNSString_withId_(self, @"drawableLeft", dr);
      break;
      case 3:
      ASRadioButtonImpl_setDrawableRightWithNSString_withId_(self, @"drawableRight", dr);
      break;
      default:
      break;
    }
  }
  [self invalidate];
}

void ASRadioButtonImpl_setHintColorWithInt_(ASRadioButtonImpl *self, jint currentHintTextColor) {
}

void ASRadioButtonImpl_syncPlaceholderLabel(ASRadioButtonImpl *self) {
}

jint ASRadioButtonImpl_nativeGetBaseLine(ASRadioButtonImpl *self) {
  ASUILabel* label = ((ASUILabel*)self->uiView_);
  return label.font.ascender;
}

id ASRadioButtonImpl_getFont(ASRadioButtonImpl *self) {
  ASUILabel* label = ((ASUILabel*)self->uiView_);
  return label.font;
}

void ASRadioButtonImpl_setTextColorLinkWithADColorStateList_(ASRadioButtonImpl *self, ADColorStateList *linkTextColors) {
}

void ASRadioButtonImpl_setButtonWithId_(ASRadioButtonImpl *self, id objValue) {
  if ([@"@null" isEqual:objValue]) {
    [((ADRadioButton *) nil_chk(self->measurableView_)) setButtonDrawableWithADDrawable:nil];
    [self applyAttributeCommandWithNSString:@"button" withNSString:@"drawDrawableIcon" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){  } count:0 type:NSString_class_()] withBoolean:false withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"button" } count:1 type:NSObject_class_()]];
  }
  else if (objValue != nil && [objValue isKindOfClass:[ADDrawable class]]) {
    [((ADRadioButton *) nil_chk(self->measurableView_)) setButtonDrawableWithADDrawable:(ADDrawable *) cast_chk(objValue, [ADDrawable class])];
    [self applyAttributeCommandWithNSString:@"button" withNSString:@"drawDrawableIcon" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){  } count:0 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"button" } count:1 type:NSObject_class_()]];
  }
}

void ASRadioButtonImpl_setOnCheckedWithId_(ASRadioButtonImpl *self, id objValue) {
  id<ADCompoundButton_OnCheckedChangeListener> onCheckedChangeListener;
  if ([objValue isKindOfClass:[NSString class]]) {
    onCheckedChangeListener = new_ASRadioButtonImpl_OnCheckedChangeListener_initWithASIWidget_withNSString_(self, (NSString *) objValue);
  }
  else {
    onCheckedChangeListener = (id<ADCompoundButton_OnCheckedChangeListener>) cast_check(objValue, ADCompoundButton_OnCheckedChangeListener_class_());
  }
  [((ADRadioButton *) nil_chk(self->measurableView_)) setOnCheckedChangeListenerWithADCompoundButton_OnCheckedChangeListener:onCheckedChangeListener];
}

void ASRadioButtonImpl_setCheckedWithId_(ASRadioButtonImpl *self, id objValue) {
  [((ADRadioButton *) nil_chk(self->measurableView_)) setCheckedWithBoolean:[((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]))) booleanValue]];
}

void ASRadioButtonImpl_postSetAttributeWithASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(ASRadioButtonImpl *self, ASWidgetAttribute *key, NSString *strValue, id objValue, id<ASILifeCycleDecorator> decorator) {
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"editable" }, 1)) {
    case 0:
    [((ADRadioButton *) nil_chk(self->measurableView_)) setEnabledWithBoolean:[((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]))) booleanValue]];
    break;
    default:
    break;
  }
}

id ASRadioButtonImpl_getButton(ASRadioButtonImpl *self) {
  return [((ADRadioButton *) nil_chk(self->measurableView_)) getButtonDrawable];
}

id ASRadioButtonImpl_getChecked(ASRadioButtonImpl *self) {
  return JavaLangBoolean_valueOfWithBoolean_([((ADRadioButton *) nil_chk(self->measurableView_)) isChecked]);
}

void ASRadioButtonImpl_createLabelWithJavaUtilMap_withADTextView_(ASRadioButtonImpl *self, id<JavaUtilMap> params, ADTextView *asWidget) {
  ASRadioButtonImpl_createLabelWithJavaUtilMap_(self, params);
  ASViewImpl_setOnClickWithASIWidget_withNSString_withId_withADView_OnClickListener_(self, @"statetoggler", [self asNativeWidget], new_ASRadioButtonImpl_StateToggler_initWithASRadioButtonImpl_(self));
  self->canvas_ = new_ASRadioButtonImpl_MyCanvas_initWithASRadioButtonImpl_(self);
}

void ASRadioButtonImpl_createLabelWithJavaUtilMap_(ASRadioButtonImpl *self, id<JavaUtilMap> params) {
  self.uiView = [ASUILabel new];
  ((ASUILabel*)self.uiView).numberOfLines = 0;
  ((ASUILabel*)self.uiView).lineBreakMode = NSLineBreakByClipping;
}

void ASRadioButtonImpl_drawableStateChangedAdditionalAttrs(ASRadioButtonImpl *self) {
  ADDrawable *dr = [((ADRadioButton *) nil_chk(self->measurableView_)) getButtonDrawable];
  if (dr != nil && [dr isStateful] && [dr setStateWithIntArray:[((ADRadioButton *) nil_chk(self->measurableView_)) getDrawableState]]) {
    ASRadioButtonImpl_setButtonWithId_(self, dr);
    [self invalidate];
  }
}

void ASRadioButtonImpl_setButtonTintWithId_(ASRadioButtonImpl *self, id objValue) {
  [self applyAttributeCommandWithNSString:@"button" withNSString:@"cgTintColor" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"buttonTint" } count:1 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTint", objValue } count:2 type:NSObject_class_()]];
}

void ASRadioButtonImpl_setButtonTintModeWithId_(ASRadioButtonImpl *self, id objValue) {
  [self applyAttributeCommandWithNSString:@"button" withNSString:@"cgTintColor" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"buttonTintMode" } count:1 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTintMode", objValue } count:2 type:NSObject_class_()]];
}

void ASRadioButtonImpl_setGravityWithId_(ASRadioButtonImpl *self, id objValue) {
  jint value = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
  [((ADRadioButton *) nil_chk(self->measurableView_)) setGravityWithInt:value];
  jint major = value & ASGravityConverter_VERTICAL_GRAVITY_MASK;
  ASRadioButtonImpl_updateTextAlignment(self);
  switch (major) {
    case ASGravityConverter_TOP:
    ASRadioButtonImpl_setVerticalAligmentTop(self);
    break;
    case ASGravityConverter_BOTTOM:
    ASRadioButtonImpl_setVerticalAligmentBottom(self);
    break;
    case ASGravityConverter_CENTER_VERTICAL:
    ASRadioButtonImpl_setVerticalAligmentCenter(self);
    break;
    default:
    ASRadioButtonImpl_setVerticalAligmentTop(self);
    break;
  }
}

void ASRadioButtonImpl_updateTextAlignment(ASRadioButtonImpl *self) {
  ADLayout_Alignment *minor = [((ADRadioButton *) nil_chk(self->measurableView_)) getAlignmentOfLayout];
  jboolean isRtl = false;
  jboolean hasTextDirection = [((ADRadioButton *) nil_chk(self->measurableView_)) getRawTextDirection] != 0;
  if (hasTextDirection) {
    id<ADTextDirectionHeuristic> heuristic = [((ADRadioButton *) nil_chk(self->measurableView_)) getTextDirectionHeuristic];
    NSString *text = (NSString *) cast_chk(ASRadioButtonImpl_getMyText(self), [NSString class]);
    isRtl = [((id<ADTextDirectionHeuristic>) nil_chk(heuristic)) isRtlWithJavaLangCharSequence:text withInt:0 withInt:[((NSString *) nil_chk(text)) java_length]];
  }
  switch ([minor ordinal]) {
    case ADLayout_Alignment_Enum_ALIGN_LEFT:
    ASRadioButtonImpl_setHorizontalAligmentLeft(self);
    break;
    case ADLayout_Alignment_Enum_ALIGN_NORMAL:
    if (hasTextDirection) {
      if (isRtl) {
        ASRadioButtonImpl_setHorizontalAligmentRight(self);
      }
      else {
        ASRadioButtonImpl_setHorizontalAligmentLeft(self);
      }
    }
    else {
      ASRadioButtonImpl_setHorizontalAligmentLeft(self);
    }
    break;
    case ADLayout_Alignment_Enum_ALIGN_RIGHT:
    ASRadioButtonImpl_setHorizontalAligmentRight(self);
    break;
    case ADLayout_Alignment_Enum_ALIGN_OPPOSITE:
    if (hasTextDirection) {
      if (isRtl) {
        ASRadioButtonImpl_setHorizontalAligmentLeft(self);
      }
      else {
        ASRadioButtonImpl_setHorizontalAligmentRight(self);
      }
    }
    else {
      ASRadioButtonImpl_setHorizontalAligmentRight(self);
    }
    break;
    case ADLayout_Alignment_Enum_ALIGN_CENTER:
    ASRadioButtonImpl_setHorizontalAligmentCenter(self);
    break;
    default:
    ASRadioButtonImpl_setHorizontalAligmentLeft(self);
    break;
  }
}

id ASRadioButtonImpl_getGravity(ASRadioButtonImpl *self) {
  ASBaseMeasurableView_VerticalAligment *verticalAligment = [((ADRadioButton *) nil_chk(self->measurableView_)) getVerticalAligment];
  if (verticalAligment == nil) {
    verticalAligment = JreLoadEnum(ASBaseMeasurableView_VerticalAligment, top);
  }
  jint gravityVertical = 0;
  switch ([verticalAligment ordinal]) {
    case ASBaseMeasurableView_VerticalAligment_Enum_top:
    gravityVertical = ASGravityConverter_TOP;
    break;
    case ASBaseMeasurableView_VerticalAligment_Enum_middle:
    gravityVertical = ASGravityConverter_CENTER_VERTICAL;
    break;
    case ASBaseMeasurableView_VerticalAligment_Enum_bottom:
    gravityVertical = ASGravityConverter_BOTTOM;
    break;
    default:
    break;
  }
  jint aligment = ASRadioButtonImpl_getTextAlignment(self);
  jint gravitHorizontal = 0;
  switch (aligment) {
    case ASRadioButtonImpl_TEXT_ALIGN_CENTER:
    gravitHorizontal = ASGravityConverter_CENTER_HORIZONTAL;
    break;
    case ASRadioButtonImpl_TEXT_ALIGN_LEFT:
    gravitHorizontal = ASGravityConverter_LEFT;
    break;
    case ASRadioButtonImpl_TEXT_ALIGN_RIGHT:
    gravitHorizontal = ASGravityConverter_RIGHT;
    break;
    default:
    break;
  }
  jint gravity = gravitHorizontal | gravityVertical;
  return JavaLangInteger_valueOfWithInt_(gravity);
}

void ASRadioButtonImpl_setDrawableIconSizeWithId_(ASRadioButtonImpl *self, id objValue) {
  [self applyAttributeCommandWithNSString:@"drawableStart" withNSString:@"drawableIconSize" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableIconSize" } count:1 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ objValue } count:1 type:NSObject_class_()]];
  [self applyAttributeCommandWithNSString:@"drawableEnd" withNSString:@"drawableIconSize" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableIconSize" } count:1 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ objValue } count:1 type:NSObject_class_()]];
  [self applyAttributeCommandWithNSString:@"drawableTop" withNSString:@"drawableIconSize" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableIconSize" } count:1 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ objValue } count:1 type:NSObject_class_()]];
  [self applyAttributeCommandWithNSString:@"drawableBottom" withNSString:@"drawableIconSize" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableIconSize" } count:1 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ objValue } count:1 type:NSObject_class_()]];
}

id ASRadioButtonImpl_getMinHeight(ASRadioButtonImpl *self) {
  return JavaLangInteger_valueOfWithInt_([((ADRadioButton *) nil_chk(self->measurableView_)) getMinHeight]);
}

id ASRadioButtonImpl_getMinWidth(ASRadioButtonImpl *self) {
  return JavaLangInteger_valueOfWithInt_([((ADRadioButton *) nil_chk(self->measurableView_)) getMinWidth]);
}

void ASRadioButtonImpl_setEmsWithId_(ASRadioButtonImpl *self, id objValue) {
  ASRadioButtonImpl_setMinEmsWithId_(self, objValue);
  ASRadioButtonImpl_setMaxEmsWithId_(self, objValue);
}

void ASRadioButtonImpl_setMinEmsWithId_(ASRadioButtonImpl *self, id objValue) {
  [((ADRadioButton *) nil_chk(self->measurableView_)) setMinEmsWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
  ASRadioButtonImpl_addMinMaxListener(self);
}

void ASRadioButtonImpl_setMaxEmsWithId_(ASRadioButtonImpl *self, id objValue) {
  [((ADRadioButton *) nil_chk(self->measurableView_)) setMaxEmsWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
  ASRadioButtonImpl_addMinMaxListener(self);
}

void ASRadioButtonImpl_setWidthWithId_(ASRadioButtonImpl *self, id objValue) {
  ASRadioButtonImpl_setMinWidthWithId_(self, objValue);
  ASRadioButtonImpl_setMaxWidthWithId_(self, objValue);
}

void ASRadioButtonImpl_setHeightWithId_(ASRadioButtonImpl *self, id objValue) {
  ASRadioButtonImpl_setMinHeightWithId_(self, objValue);
  ASRadioButtonImpl_setMaxHeightWithId_(self, objValue);
}

void ASRadioButtonImpl_setMaxLinesWithId_(ASRadioButtonImpl *self, id objValue) {
  [((ADRadioButton *) nil_chk(self->measurableView_)) setMaxLinesWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
  ASRadioButtonImpl_addMinMaxListener(self);
}

void ASRadioButtonImpl_setLinesWithId_(ASRadioButtonImpl *self, id objValue) {
  ASRadioButtonImpl_setMinLinesWithId_(self, objValue);
  ASRadioButtonImpl_setMaxLinesWithId_(self, objValue);
}

void ASRadioButtonImpl_setMinLinesWithId_(ASRadioButtonImpl *self, id objValue) {
  [((ADRadioButton *) nil_chk(self->measurableView_)) setMinLinesWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
  ASRadioButtonImpl_addMinMaxListener(self);
}

void ASRadioButtonImpl_setMaxHeightWithId_(ASRadioButtonImpl *self, id objValue) {
  [((ADRadioButton *) nil_chk(self->measurableView_)) setMaxHeightWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
  ASRadioButtonImpl_addMinMaxListener(self);
}

void ASRadioButtonImpl_setMaxWidthWithId_(ASRadioButtonImpl *self, id objValue) {
  [((ADRadioButton *) nil_chk(self->measurableView_)) setMaxWidthWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
  ASRadioButtonImpl_addMinMaxListener(self);
}

void ASRadioButtonImpl_setMinHeightWithId_(ASRadioButtonImpl *self, id objValue) {
  [((ADRadioButton *) nil_chk(self->measurableView_)) setMinHeightWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
  ASRadioButtonImpl_addMinMaxListener(self);
}

void ASRadioButtonImpl_setMinWidthWithId_(ASRadioButtonImpl *self, id objValue) {
  [((ADRadioButton *) nil_chk(self->measurableView_)) setMinWidthWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
  ASRadioButtonImpl_addMinMaxListener(self);
}

id ASRadioButtonImpl_getWidth(ASRadioButtonImpl *self) {
  return JavaLangInteger_valueOfWithInt_([((ADRadioButton *) nil_chk(self->measurableView_)) getWidth]);
}

jint ASRadioButtonImpl_getHeight(ASRadioButtonImpl *self) {
  return [((ADRadioButton *) nil_chk(self->measurableView_)) getHeight];
}

jint ASRadioButtonImpl_getAutoSizeTextTypeWithADTextView_(ASRadioButtonImpl *self, ADTextView *measurableView) {
  return [((ADTextView *) nil_chk(measurableView)) getAutoSizeTextType];
}

void ASRadioButtonImpl_setAutoSizeTextTypeInternalWithInt_(ASRadioButtonImpl *self, jint autoTextType) {
  ASRadioButtonImpl_removeResizeListener(self);
  if ([((ADRadioButton *) nil_chk(self->measurableView_)) isAutoSizeTextTypeUniformWithInt:autoTextType]) {
    [((ADRadioButton *) nil_chk(self->measurableView_)) setUpAutoSizeTextTypeUniformWithInt:self->autoSizeMin_ withInt:self->autoSizeMax_ withInt:self->autoSizeGranular_];
    ASRadioButtonImpl_addAutoResizeListener(self);
  }
  else {
    [((ADRadioButton *) nil_chk(self->measurableView_)) clearAutoSizeTypeConfiguration];
  }
}

void ASRadioButtonImpl_setAutoSizePresetSizesWithId_(ASRadioButtonImpl *self, id objValue) {
  [((ADRadioButton *) nil_chk(self->measurableView_)) setAutoSizeTextTypeUniformWithPresetSizesWithIntArray:(IOSIntArray *) cast_chk(objValue, [IOSIntArray class]) withInt:0];
}

void ASRadioButtonImpl_addAutoResizeListener(ASRadioButtonImpl *self) {
  if (self->postMeasureHandler_ == nil) {
    self->postMeasureHandler_ = new_ASRadioButtonImpl_PostMeasureHandler_initWithASRadioButtonImpl_withNSString_(self, self->POST_MEASURE_EVENT_);
    [((ASEventBus *) nil_chk([((id<ASIFragment>) nil_chk(self->fragment_)) getEventBus])) onWithNSString:self->POST_MEASURE_EVENT_ withASEventBusHandlerArray:[IOSObjectArray newArrayWithObjects:(id[]){ self->postMeasureHandler_ } count:1 type:ASEventBusHandler_class_()]];
  }
}

void ASRadioButtonImpl_removeResizeListener(ASRadioButtonImpl *self) {
  if (self->postMeasureHandler_ != nil) {
    [((ASEventBus *) nil_chk([((id<ASIFragment>) nil_chk(self->fragment_)) getEventBus])) offWithASEventBusHandlerArray:[IOSObjectArray newArrayWithObjects:(id[]){ self->postMeasureHandler_ } count:1 type:ASEventBusHandler_class_()]];
    self->postMeasureHandler_ = nil;
  }
}

void ASRadioButtonImpl_setMaxLengthWithId_(ASRadioButtonImpl *self, id objValue) {
  if (!self->html_) {
    [self applyAttributeCommandWithNSString:@"text" withNSString:ASCommonConverters_command_maxlength withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"maxLength" } count:1 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ objValue } count:1 type:NSObject_class_()]];
  }
  else {
    (void) [((id<JavaUtilMap>) nil_chk(self->htmlConfig_)) putWithId:@"maxLength" withId:objValue];
  }
}

void ASRadioButtonImpl_setMyTextWithId_(ASRadioButtonImpl *self, id objValue) {
  NSString *text = (NSString *) cast_chk(objValue, [NSString class]);
  if (text == nil) {
    text = @"";
  }
  if (self->html_) {
    ASRadioButtonImpl_handleHtmlTextWithNSString_(self, text);
  }
  else {
    ASRadioButtonImpl_nativeSetTextWithNSString_(self, text);
  }
}

void ASRadioButtonImpl_setTextAllCapsWithId_(ASRadioButtonImpl *self, id objValue) {
  if (!self->html_) {
    [self applyAttributeCommandWithNSString:@"text" withNSString:ASCommonConverters_command_uppercase withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"textAllCaps" } count:1 type:NSString_class_()] withBoolean:[((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]))) booleanValue] withNSObjectArray:[IOSObjectArray newArrayWithLength:0 type:NSObject_class_()]];
  }
  else {
    (void) [((id<JavaUtilMap>) nil_chk(self->htmlConfig_)) putWithId:@"textAllCaps" withId:objValue];
  }
}

void ASRadioButtonImpl_initHtmlWithJavaUtilMap_(ASRadioButtonImpl *self, id<JavaUtilMap> params) {
  if ([((id<JavaUtilMap>) nil_chk(params)) containsKeyWithId:@"html"]) {
    self->html_ = [nil_chk([params getWithId:@"html"]) isEqual:@"true"];
    if (self->html_) {
      self->htmlConfig_ = new_JavaUtilHashMap_init();
    }
    else {
      if (self->escapeHtml_) {
        [self applyAttributeCommandWithNSString:@"text" withNSString:ASCommonConverters_command_escapehtml withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){  } count:0 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithLength:0 type:NSObject_class_()]];
      }
    }
  }
}

void ASRadioButtonImpl_setTypeFaceWithId_withNSString_(ASRadioButtonImpl *self, id objValue, NSString *strValue) {
  ASRadioButtonImpl_setFontFamilyWithId_withNSString_(self, objValue, strValue);
}

void ASRadioButtonImpl_setFontFamilyWithId_withNSString_(ASRadioButtonImpl *self, id objValue, NSString *strValue) {
  if ([objValue isKindOfClass:[JavaLangInteger class]]) {
    objValue = ASPluginInvoker_convertFromWithASIConverter_withJavaUtilMap_withId_withASIFragment_(ASConverterFactory_getWithNSString_(ASCommonConverters_font), nil, strValue, self->fragment_);
  }
  self->fontDescriptors_ = (id<JavaUtilMap>) cast_check(objValue, JavaUtilMap_class_());
  jint style = ASRadioButtonImpl_nativeGetFontStyle(self);
  jint height = ASRadioButtonImpl_nativeGetFontSize(self);
  NSString *weight = @"400";
  if ((style & ASRadioButtonImpl_BOLD_FONT_TRAIT) != 0) {
    weight = @"700";
  }
  NSString *fontStyle = @"normal";
  if ((style & ASRadioButtonImpl_ITALIC_FONT_TRAIT) != 0) {
    fontStyle = @"italic";
  }
  ASFontDescriptor *fontDescriptor = [((id<JavaUtilMap>) nil_chk(self->fontDescriptors_)) getWithId:JreStrcat("$C$", fontStyle, '_', weight)];
  ASRadioButtonImpl_nativeSetCustomFontWithInt_withASFontDescriptor_(self, height, fontDescriptor);
}

void ASRadioButtonImpl_setTextStyleWithId_(ASRadioButtonImpl *self, id objValue) {
  jint value = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
  if (self->fontDescriptors_ != nil) {
    jint height = ASRadioButtonImpl_nativeGetFontSize(self);
    NSString *weight = @"400";
    if ((value & (jint) 0x1) != 0) {
      weight = @"700";
    }
    NSString *fontStyle = @"normal";
    if ((value & (jint) 0x2) != 0) {
      fontStyle = @"italic";
    }
    ASFontDescriptor *fontDescriptor = [((id<JavaUtilMap>) nil_chk(self->fontDescriptors_)) getWithId:JreStrcat("$C$", fontStyle, '_', weight)];
    ASRadioButtonImpl_nativeSetCustomFontWithInt_withASFontDescriptor_(self, height, fontDescriptor);
  }
  else {
    jint style = ASRadioButtonImpl_NORMAL_FONT_TRAIT;
    if ((value & (jint) 0x1) != 0) {
      style = style | ASRadioButtonImpl_BOLD_FONT_TRAIT;
    }
    if ((value & (jint) 0x2) != 0) {
      style = style | ASRadioButtonImpl_ITALIC_FONT_TRAIT;
    }
    ASRadioButtonImpl_nativeSetFontStyleWithInt_(self, style);
  }
}

jint ASRadioButtonImpl_calcNumberOfWhiteSpaces(ASRadioButtonImpl *self) {
  if (!ASRadioButtonImpl_isLabelMeasured(self)) {
    return 0;
  }
  jfloat blankSpaceWidth = [((NSNumber *) nil_chk(((NSNumber *) cast_chk(ASRadioButtonImpl_getTextSize(self), [NSNumber class])))) floatValue];
  jint width = JreIntDiv(ASRadioButtonImpl_getLabelWidth(self), 3);
  jint numberOfBlankSpaces = JreFpToInt(JavaLangMath_ceilWithDouble_(width / (blankSpaceWidth * 1.0f)));
  return numberOfBlankSpaces;
}

void ASRadioButtonImpl_cancelTimer(ASRadioButtonImpl *self) {
  ASRadioButtonImpl_cancelNativeTimer(self);
  if (self->marqueeTask_ != nil) {
    [self->marqueeTask_ cancel];
  }
  if (self->marqueeCommandConverter_ != nil) {
    [self->marqueeCommandConverter_ updateArgsWithNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(0), JavaLangInteger_valueOfWithInt_(0) } count:2 type:NSObject_class_()]];
  }
}

void ASRadioButtonImpl_startTimer(ASRadioButtonImpl *self) {
  if (ASRadioButtonImpl_canMarquee(self)) {
    ASRadioButtonImpl_addDeallocHandler(self);
    if (self->marqueeTask_ != nil) {
      [self->marqueeTask_ restart];
    }
    else {
      NSString *direction = ASViewImpl_isRTLLayoutDirectionWithASIWidget_(self) ? @"reverse" : @"forward";
      self->marqueeTask_ = new_ASRadioButtonImpl_MarqueeTask_initWithASRadioButtonImpl_withNSString_(self, direction);
    }
    ASRadioButtonImpl_schedule(self);
  }
}

id ASRadioButtonImpl_getMarqueeRepeatLimit(ASRadioButtonImpl *self) {
  return JavaLangInteger_valueOfWithInt_(self->marqueeRepeatLimit_);
}

void ASRadioButtonImpl_setMarqueeRepeatLimitWithId_(ASRadioButtonImpl *self, id objValue) {
  self->marqueeRepeatLimit_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
}

void ASRadioButtonImpl_startOrStopMarqueeWithId_(ASRadioButtonImpl *self, id objValue) {
  ASRadioButtonImpl_cancelTimer(self);
  if (objValue != nil && [(JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]) booleanValue]) {
    ASRadioButtonImpl_startTimer(self);
  }
}

jint ASRadioButtonImpl_getLabelWidth(ASRadioButtonImpl *self) {
  if ([((ADRadioButton *) nil_chk(self->measurableView_)) isIgnoreDrawableHeight]) {
    return [((ADRadioButton *) nil_chk(self->measurableView_)) getMeasuredWidth] - [((ADRadioButton *) nil_chk(self->measurableView_)) getPaddingLeft] - [((ADRadioButton *) nil_chk(self->measurableView_)) getPaddingRight];
  }
  return [((ADRadioButton *) nil_chk(self->measurableView_)) getMeasuredWidth] - [((ADRadioButton *) nil_chk(self->measurableView_)) getCompoundPaddingRight] - [((ADRadioButton *) nil_chk(self->measurableView_)) getCompoundPaddingLeft];
}

jboolean ASRadioButtonImpl_isLabelMeasured(ASRadioButtonImpl *self) {
  return !ASRadioButtonImpl_isDisposed(self) && ASRadioButtonImpl_getLabelWidth(self) > 0;
}

void ASRadioButtonImpl_setPasswordWithId_(ASRadioButtonImpl *self, id objValue) {
  if (!self->html_) {
    [self applyAttributeCommandWithNSString:@"text" withNSString:ASCommonConverters_command_password withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"password" } count:1 type:NSString_class_()] withBoolean:[((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]))) booleanValue] withNSObjectArray:[IOSObjectArray newArrayWithLength:0 type:NSObject_class_()]];
  }
  else {
    (void) [((id<JavaUtilMap>) nil_chk(self->htmlConfig_)) putWithId:@"password" withId:objValue];
  }
}

void ASRadioButtonImpl_setFirstBaselineToTopHeightWithId_(ASRadioButtonImpl *self, id objValue) {
  ASFontMetricsDescriptor *fontMetrics = ASPluginInvoker_getFontMetricsWithId_(ASRadioButtonImpl_getFont(self));
  jint firstBaselineToTopHeight = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
  jint fontMetricsTop;
  if (ASRadioButtonImpl_getIncludeFontPadding(self)) {
    fontMetricsTop = ((ASFontMetricsDescriptor *) nil_chk(fontMetrics))->top_;
  }
  else {
    fontMetricsTop = ((ASFontMetricsDescriptor *) nil_chk(fontMetrics))->ascent_;
  }
  if (firstBaselineToTopHeight > JavaLangMath_absWithInt_(fontMetricsTop)) {
    jint paddingTop = firstBaselineToTopHeight - (-fontMetricsTop);
    [((ADRadioButton *) nil_chk(self->measurableView_)) setPaddingWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(ASRadioButtonImpl_getPaddingLeft(self), [JavaLangInteger class]))) intValue] withInt:paddingTop withInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(ASRadioButtonImpl_getPaddingRight(self), [JavaLangInteger class]))) intValue] withInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(ASRadioButtonImpl_getPaddingBottom(self), [JavaLangInteger class]))) intValue]];
  }
}

jboolean ASRadioButtonImpl_getIncludeFontPadding(ASRadioButtonImpl *self) {
  return false;
}

id ASRadioButtonImpl_getFirstBaselineToTopHeight(ASRadioButtonImpl *self) {
  ASFontMetricsDescriptor *fontMetrics = ASPluginInvoker_getFontMetricsWithId_(ASRadioButtonImpl_getFont(self));
  return JavaLangInteger_valueOfWithInt_([((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(ASRadioButtonImpl_getPaddingTop(self), [JavaLangInteger class]))) intValue] - ((ASFontMetricsDescriptor *) nil_chk(fontMetrics))->top_);
}

void ASRadioButtonImpl_setLastBaselineToBottomHeightWithId_(ASRadioButtonImpl *self, id objValue) {
  ASFontMetricsDescriptor *fontMetrics = ASPluginInvoker_getFontMetricsWithId_(ASRadioButtonImpl_getFont(self));
  jint lastBaselineToBottomHeight = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
  jint fontMetricsBottom;
  if (ASRadioButtonImpl_getIncludeFontPadding(self)) {
    fontMetricsBottom = ((ASFontMetricsDescriptor *) nil_chk(fontMetrics))->bottom_;
  }
  else {
    fontMetricsBottom = ((ASFontMetricsDescriptor *) nil_chk(fontMetrics))->descent_;
  }
  if (lastBaselineToBottomHeight > JavaLangMath_absWithInt_(fontMetricsBottom)) {
    jint paddingBottom = lastBaselineToBottomHeight - fontMetricsBottom;
    [((ADRadioButton *) nil_chk(self->measurableView_)) setPaddingWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(ASRadioButtonImpl_getPaddingLeft(self), [JavaLangInteger class]))) intValue] withInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(ASRadioButtonImpl_getPaddingTop(self), [JavaLangInteger class]))) intValue] withInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(ASRadioButtonImpl_getPaddingRight(self), [JavaLangInteger class]))) intValue] withInt:paddingBottom];
  }
}

id ASRadioButtonImpl_getLastBaselineToBottomHeight(ASRadioButtonImpl *self) {
  ASFontMetricsDescriptor *fontMetrics = ASPluginInvoker_getFontMetricsWithId_(ASRadioButtonImpl_getFont(self));
  return JavaLangInteger_valueOfWithInt_([((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(ASRadioButtonImpl_getPaddingBottom(self), [JavaLangInteger class]))) intValue] + ((ASFontMetricsDescriptor *) nil_chk(fontMetrics))->bottom_);
}

void ASRadioButtonImpl_setAutoSizeStepGranularityWithId_(ASRadioButtonImpl *self, id objValue) {
  self->autoSizeGranular_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
  if ([self isInitialised]) {
    ASRadioButtonImpl_setAutoSizeTextTypeInternalWithInt_(self, ASRadioButtonImpl_getAutoSizeTextTypeWithADTextView_(self, self->measurableView_));
  }
}

void ASRadioButtonImpl_setAutoMinTextSizeWithId_(ASRadioButtonImpl *self, id objValue) {
  self->autoSizeMin_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
  if ([self isInitialised]) {
    ASRadioButtonImpl_setAutoSizeTextTypeInternalWithInt_(self, ASRadioButtonImpl_getAutoSizeTextTypeWithADTextView_(self, self->measurableView_));
  }
}

void ASRadioButtonImpl_setAutoMaxTextSizeWithId_(ASRadioButtonImpl *self, id objValue) {
  self->autoSizeMax_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
  if ([self isInitialised]) {
    ASRadioButtonImpl_setAutoSizeTextTypeInternalWithInt_(self, ASRadioButtonImpl_getAutoSizeTextTypeWithADTextView_(self, self->measurableView_));
  }
}

void ASRadioButtonImpl_setAutoSizeTextTypeWithId_(ASRadioButtonImpl *self, id objValue) {
  jint autoTextType = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
  ASRadioButtonImpl_setAutoSizeTextTypeInternalWithInt_(self, autoTextType);
}

id ASRadioButtonImpl_getAutoSizeStepGranularity(ASRadioButtonImpl *self) {
  return JavaLangInteger_valueOfWithInt_(self->autoSizeGranular_);
}

id ASRadioButtonImpl_getAutoMinTextSize(ASRadioButtonImpl *self) {
  return JavaLangInteger_valueOfWithInt_(self->autoSizeMin_);
}

id ASRadioButtonImpl_getAutoMaxTextSize(ASRadioButtonImpl *self) {
  return JavaLangInteger_valueOfWithInt_(self->autoSizeMax_);
}

id ASRadioButtonImpl_getAutoSizeTextType(ASRadioButtonImpl *self) {
  return JavaLangInteger_valueOfWithInt_(ASRadioButtonImpl_getAutoSizeTextTypeWithADTextView_(self, self->measurableView_));
}

void ASRadioButtonImpl_setTextFormatWithId_(ASRadioButtonImpl *self, id objValue) {
  [self applyAttributeCommandWithNSString:@"text" withNSString:ASCommonConverters_command_textformatter withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"textFormat" } count:1 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ (NSString *) cast_chk(objValue, [NSString class]) } count:1 type:NSObject_class_()]];
}

jboolean ASRadioButtonImpl_allowUnCheck(ASRadioButtonImpl *self) {
  return false;
}

void ASRadioButtonImpl_setErrorWithId_(ASRadioButtonImpl *self, id object) {
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASRadioButtonImpl)

@implementation ASRadioButtonImpl_ButtonTinttMode

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASRadioButtonImpl_ButtonTinttMode_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilMap>)getMapping {
  return mapping_;
}

- (JavaLangInteger *)getDefault {
  return JavaLangInteger_valueOfWithInt_(0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMapping);
  methods[2].selector = @selector(getDefault);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapping_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "LASRadioButtonImpl;" };
  static const J2ObjcClassInfo _ASRadioButtonImpl_ButtonTinttMode = { "ButtonTinttMode", "com.ashera.layout", ptrTable, methods, fields, 7, 0x18, 3, 1, 2, -1, -1, -1, -1 };
  return &_ASRadioButtonImpl_ButtonTinttMode;
}

@end

void ASRadioButtonImpl_ButtonTinttMode_init(ASRadioButtonImpl_ButtonTinttMode *self) {
  ASAbstractEnumToIntConverter_init(self);
  self->mapping_ = new_JavaUtilHashMap_init();
  {
    (void) [self->mapping_ putWithId:@"add" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, kCGBlendModeOverlay))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"multiply" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, kCGBlendModeMultiply))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"screen" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, kCGBlendModeScreen))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"src_atop" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, kCGBlendModeSourceAtop))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"src_in" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, kCGBlendModeSourceIn))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"src_over" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, kCGBlendModeNormal))];
  }
}

ASRadioButtonImpl_ButtonTinttMode *new_ASRadioButtonImpl_ButtonTinttMode_init() {
  J2OBJC_NEW_IMPL(ASRadioButtonImpl_ButtonTinttMode, init)
}

ASRadioButtonImpl_ButtonTinttMode *create_ASRadioButtonImpl_ButtonTinttMode_init() {
  J2OBJC_CREATE_IMPL(ASRadioButtonImpl_ButtonTinttMode, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASRadioButtonImpl_ButtonTinttMode)

@implementation ASRadioButtonImpl_Ellipsize

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASRadioButtonImpl_Ellipsize_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilMap>)getMapping {
  return mapping_;
}

- (JavaLangInteger *)getDefault {
  return JavaLangInteger_valueOfWithInt_(0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMapping);
  methods[2].selector = @selector(getDefault);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapping_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "LASRadioButtonImpl;" };
  static const J2ObjcClassInfo _ASRadioButtonImpl_Ellipsize = { "Ellipsize", "com.ashera.layout", ptrTable, methods, fields, 7, 0x18, 3, 1, 2, -1, -1, -1, -1 };
  return &_ASRadioButtonImpl_Ellipsize;
}

@end

void ASRadioButtonImpl_Ellipsize_init(ASRadioButtonImpl_Ellipsize *self) {
  ASAbstractEnumToIntConverter_init(self);
  self->mapping_ = new_JavaUtilHashMap_init();
  {
    (void) [self->mapping_ putWithId:@"end" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, NSLineBreakByTruncatingTail))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"marquee" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, NSLineBreakByMarquee))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"middle" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, NSLineBreakByTruncatingMiddle))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"none" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, NSLineBreakByClipping))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"start" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, NSLineBreakByTruncatingHead))];
  }
}

ASRadioButtonImpl_Ellipsize *new_ASRadioButtonImpl_Ellipsize_init() {
  J2OBJC_NEW_IMPL(ASRadioButtonImpl_Ellipsize, init)
}

ASRadioButtonImpl_Ellipsize *create_ASRadioButtonImpl_Ellipsize_init() {
  J2OBJC_CREATE_IMPL(ASRadioButtonImpl_Ellipsize, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASRadioButtonImpl_Ellipsize)

@implementation ASRadioButtonImpl_MarqueeRepeatLimit

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASRadioButtonImpl_MarqueeRepeatLimit_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilMap>)getMapping {
  return mapping_;
}

- (JavaLangInteger *)getDefault {
  return JavaLangInteger_valueOfWithInt_(0);
}

- (jboolean)supportsIntAlso {
  return true;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMapping);
  methods[2].selector = @selector(getDefault);
  methods[3].selector = @selector(supportsIntAlso);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapping_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "LASRadioButtonImpl;" };
  static const J2ObjcClassInfo _ASRadioButtonImpl_MarqueeRepeatLimit = { "MarqueeRepeatLimit", "com.ashera.layout", ptrTable, methods, fields, 7, 0x18, 4, 1, 2, -1, -1, -1, -1 };
  return &_ASRadioButtonImpl_MarqueeRepeatLimit;
}

@end

void ASRadioButtonImpl_MarqueeRepeatLimit_init(ASRadioButtonImpl_MarqueeRepeatLimit *self) {
  ASAbstractEnumToIntConverter_init(self);
  self->mapping_ = new_JavaUtilHashMap_init();
  {
    (void) [self->mapping_ putWithId:@"marquee_forever" withId:JavaLangInteger_valueOfWithInt_((jint) 0xffffffff)];
  }
}

ASRadioButtonImpl_MarqueeRepeatLimit *new_ASRadioButtonImpl_MarqueeRepeatLimit_init() {
  J2OBJC_NEW_IMPL(ASRadioButtonImpl_MarqueeRepeatLimit, init)
}

ASRadioButtonImpl_MarqueeRepeatLimit *create_ASRadioButtonImpl_MarqueeRepeatLimit_init() {
  J2OBJC_CREATE_IMPL(ASRadioButtonImpl_MarqueeRepeatLimit, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASRadioButtonImpl_MarqueeRepeatLimit)

@implementation ASRadioButtonImpl_JustificationMode

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASRadioButtonImpl_JustificationMode_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilMap>)getMapping {
  return mapping_;
}

- (JavaLangInteger *)getDefault {
  return JavaLangInteger_valueOfWithInt_(0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMapping);
  methods[2].selector = @selector(getDefault);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapping_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "LASRadioButtonImpl;" };
  static const J2ObjcClassInfo _ASRadioButtonImpl_JustificationMode = { "JustificationMode", "com.ashera.layout", ptrTable, methods, fields, 7, 0x18, 3, 1, 2, -1, -1, -1, -1 };
  return &_ASRadioButtonImpl_JustificationMode;
}

@end

void ASRadioButtonImpl_JustificationMode_init(ASRadioButtonImpl_JustificationMode *self) {
  ASAbstractEnumToIntConverter_init(self);
  self->mapping_ = new_JavaUtilHashMap_init();
  {
    (void) [self->mapping_ putWithId:@"inter_word" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, NSTextAlignmentJustified))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"none" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, NSTextAlignmentLeft))];
  }
}

ASRadioButtonImpl_JustificationMode *new_ASRadioButtonImpl_JustificationMode_init() {
  J2OBJC_NEW_IMPL(ASRadioButtonImpl_JustificationMode, init)
}

ASRadioButtonImpl_JustificationMode *create_ASRadioButtonImpl_JustificationMode_init() {
  J2OBJC_CREATE_IMPL(ASRadioButtonImpl_JustificationMode, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASRadioButtonImpl_JustificationMode)

@implementation ASRadioButtonImpl_Font

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASRadioButtonImpl_Font_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilMap>)getMapping {
  return mapping_;
}

- (JavaLangInteger *)getDefault {
  return JavaLangInteger_valueOfWithInt_(0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMapping);
  methods[2].selector = @selector(getDefault);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapping_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "LASRadioButtonImpl;" };
  static const J2ObjcClassInfo _ASRadioButtonImpl_Font = { "Font", "com.ashera.layout", ptrTable, methods, fields, 7, 0x18, 3, 1, 2, -1, -1, -1, -1 };
  return &_ASRadioButtonImpl_Font;
}

@end

void ASRadioButtonImpl_Font_init(ASRadioButtonImpl_Font *self) {
  ASAbstractEnumToIntConverter_init(self);
  self->mapping_ = new_JavaUtilHashMap_init();
  {
    (void) [self->mapping_ putWithId:@"monospace" withId:JavaLangInteger_valueOfWithInt_((jint) 0x3)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"normal" withId:JavaLangInteger_valueOfWithInt_((jint) 0x0)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"sans" withId:JavaLangInteger_valueOfWithInt_((jint) 0x1)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"serif" withId:JavaLangInteger_valueOfWithInt_((jint) 0x2)];
  }
}

ASRadioButtonImpl_Font *new_ASRadioButtonImpl_Font_init() {
  J2OBJC_NEW_IMPL(ASRadioButtonImpl_Font, init)
}

ASRadioButtonImpl_Font *create_ASRadioButtonImpl_Font_init() {
  J2OBJC_CREATE_IMPL(ASRadioButtonImpl_Font, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASRadioButtonImpl_Font)

@implementation ASRadioButtonImpl_TextStyle

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASRadioButtonImpl_TextStyle_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilMap>)getMapping {
  return mapping_;
}

- (JavaLangInteger *)getDefault {
  return JavaLangInteger_valueOfWithInt_(0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMapping);
  methods[2].selector = @selector(getDefault);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapping_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "LASRadioButtonImpl;" };
  static const J2ObjcClassInfo _ASRadioButtonImpl_TextStyle = { "TextStyle", "com.ashera.layout", ptrTable, methods, fields, 7, 0x18, 3, 1, 2, -1, -1, -1, -1 };
  return &_ASRadioButtonImpl_TextStyle;
}

@end

void ASRadioButtonImpl_TextStyle_init(ASRadioButtonImpl_TextStyle *self) {
  ASAbstractBitFlagConverter_init(self);
  self->mapping_ = new_JavaUtilHashMap_init();
  {
    (void) [self->mapping_ putWithId:@"bold" withId:JavaLangInteger_valueOfWithInt_((jint) 0x1)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"italic" withId:JavaLangInteger_valueOfWithInt_((jint) 0x2)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"normal" withId:JavaLangInteger_valueOfWithInt_((jint) 0x0)];
  }
}

ASRadioButtonImpl_TextStyle *new_ASRadioButtonImpl_TextStyle_init() {
  J2OBJC_NEW_IMPL(ASRadioButtonImpl_TextStyle, init)
}

ASRadioButtonImpl_TextStyle *create_ASRadioButtonImpl_TextStyle_init() {
  J2OBJC_CREATE_IMPL(ASRadioButtonImpl_TextStyle, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASRadioButtonImpl_TextStyle)

@implementation ASRadioButtonImpl_DrawableTintMode

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASRadioButtonImpl_DrawableTintMode_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilMap>)getMapping {
  return mapping_;
}

- (JavaLangInteger *)getDefault {
  return JavaLangInteger_valueOfWithInt_(0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMapping);
  methods[2].selector = @selector(getDefault);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapping_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "LASRadioButtonImpl;" };
  static const J2ObjcClassInfo _ASRadioButtonImpl_DrawableTintMode = { "DrawableTintMode", "com.ashera.layout", ptrTable, methods, fields, 7, 0x18, 3, 1, 2, -1, -1, -1, -1 };
  return &_ASRadioButtonImpl_DrawableTintMode;
}

@end

void ASRadioButtonImpl_DrawableTintMode_init(ASRadioButtonImpl_DrawableTintMode *self) {
  ASAbstractEnumToIntConverter_init(self);
  self->mapping_ = new_JavaUtilHashMap_init();
  {
    (void) [self->mapping_ putWithId:@"add" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, kCGBlendModeOverlay))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"multiply" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, kCGBlendModeMultiply))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"screen" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, kCGBlendModeScreen))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"src_atop" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, kCGBlendModeSourceAtop))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"src_in" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, kCGBlendModeSourceIn))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"src_over" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, kCGBlendModeNormal))];
  }
}

ASRadioButtonImpl_DrawableTintMode *new_ASRadioButtonImpl_DrawableTintMode_init() {
  J2OBJC_NEW_IMPL(ASRadioButtonImpl_DrawableTintMode, init)
}

ASRadioButtonImpl_DrawableTintMode *create_ASRadioButtonImpl_DrawableTintMode_init() {
  J2OBJC_CREATE_IMPL(ASRadioButtonImpl_DrawableTintMode, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASRadioButtonImpl_DrawableTintMode)

@implementation ASRadioButtonImpl_RadioButtonExt

- (id<ASIWidget>)getWidget {
  return this$0_;
}

- (instancetype)initWithASRadioButtonImpl:(ASRadioButtonImpl *)outer$ {
  ASRadioButtonImpl_RadioButtonExt_initWithASRadioButtonImpl_(self, outer$);
  return self;
}

- (void)onMeasureWithInt:(jint)widthMeasureSpec
                 withInt:(jint)heightMeasureSpec {
  [super onMeasureWithInt:widthMeasureSpec withInt:heightMeasureSpec];
  id<ASIWidgetLifeCycleListener> listener = [this$0_ getListener];
  if (listener != nil) {
    [((ASMeasureEvent *) nil_chk(measureFinished_)) setWidthWithInt:[self getMeasuredWidth]];
    [((ASMeasureEvent *) nil_chk(measureFinished_)) setHeightWithInt:[self getMeasuredHeight]];
    [listener eventOccurredWithASIWidgetLifeCycleListener_EventId:JreLoadEnum(ASIWidgetLifeCycleListener_EventId, measureFinished) withASWidgetEvent:measureFinished_];
  }
}

- (void)onLayoutWithBoolean:(jboolean)changed
                    withInt:(jint)l
                    withInt:(jint)t
                    withInt:(jint)r
                    withInt:(jint)b {
  [super onLayoutWithBoolean:changed withInt:l withInt:t withInt:r withInt:b];
  ASViewImpl_setDrawableBoundsWithASIWidget_withInt_withInt_withInt_withInt_(this$0_, l, t, r, b);
  if (![self isOverlay]) {
    ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_([this$0_ asNativeWidget], l, t, r, b);
  }
  [this$0_ replayBufferedEvents];
  [((id<ADCanvas>) nil_chk(this$0_->canvas_)) reset];
  [self onDrawWithADCanvas:this$0_->canvas_];
  ASViewImpl_redrawDrawablesWithASIWidget_(this$0_);
  overlays_ = ASViewImpl_drawOverlayWithASIWidget_withJavaUtilList_(this$0_, overlays_);
  id<ASIWidgetLifeCycleListener> listener = [this$0_ getListener];
  if (listener != nil) {
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setBWithInt:b];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setLWithInt:l];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setRWithInt:r];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setTWithInt:t];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setChangedWithBoolean:changed];
    [listener eventOccurredWithASIWidgetLifeCycleListener_EventId:JreLoadEnum(ASIWidgetLifeCycleListener_EventId, onLayout) withASWidgetEvent:onLayoutEvent_];
  }
  if ([this$0_ isInvalidateOnFrameChange] && [this$0_ isInitialised]) {
    [this$0_ invalidate];
  }
}

- (void)executeWithNSString:(NSString *)method
          withNSObjectArray:(IOSObjectArray *)canvas {
}

- (void)updateMeasuredDimensionWithInt:(jint)width
                               withInt:(jint)height {
  [self setMeasuredDimensionWithInt:width withInt:height];
}

- (id<ASILifeCycleDecorator>)newInstanceWithASIWidget:(id<ASIWidget>)widget {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)setAttributeWithASWidgetAttribute:(ASWidgetAttribute *)widgetAttribute
                             withNSString:(NSString *)strValue
                                   withId:(id)objValue {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (id<JavaUtilList>)getMethods {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)initialized {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (id)getAttributeWithASWidgetAttribute:(ASWidgetAttribute *)widgetAttribute {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)drawableStateChanged {
  [super drawableStateChanged];
  if (![this$0_ isWidgetDisposed]) {
    ASViewImpl_drawableStateChangedWithASIWidget_(this$0_);
  }
}

- (ADView *)inflateViewWithNSString:(NSString *)layout {
  if (templates_ == nil) {
    templates_ = new_JavaUtilHashMap_init();
  }
  id<ASIWidget> template_ = [templates_ getWithId:layout];
  if (template_ == nil) {
    template_ = (id<ASIWidget>) cast_check([this$0_ quickConvertWithId:layout withNSString:@"template"], ASIWidget_class_());
    (void) [((id<JavaUtilMap>) nil_chk(templates_)) putWithId:layout withId:template_];
  }
  id<ASIWidget> widget = [((id<ASIWidget>) nil_chk(template_)) loadLazyWidgetsWithASHasWidgets:[this$0_ getParent]];
  return (ADView *) cast_chk([((id<ASIWidget>) nil_chk(widget)) asWidget], [ADView class]);
}

- (void)remeasure {
  if ([this$0_ getFragment] != nil) {
    [((id<ASIFragment>) nil_chk([this$0_ getFragment])) remeasure];
  }
}

- (void)removeFromParent {
  [((id<ASHasWidgets>) nil_chk([this$0_ getParent])) removeWithASIWidget:this$0_];
}

- (void)getLocationOnScreenWithIntArray:(IOSIntArray *)appScreenLocation {
  *IOSIntArray_GetRef(nil_chk(appScreenLocation), 0) = ASViewImpl_getLocationXOnScreenWithId_([this$0_ asNativeWidget]);
  *IOSIntArray_GetRef(appScreenLocation, 1) = ASViewImpl_getLocationYOnScreenWithId_([this$0_ asNativeWidget]);
}

- (void)getWindowVisibleDisplayFrameWithADRect:(ADRect *)displayFrame {
  ((ADRect *) nil_chk(displayFrame))->left_ = ASViewImpl_getLocationXOnScreenWithId_([this$0_ asNativeWidget]);
  displayFrame->top_ = ASViewImpl_getLocationYOnScreenWithId_([this$0_ asNativeWidget]);
  displayFrame->right_ = displayFrame->left_ + [self getWidth];
  displayFrame->bottom_ = displayFrame->top_ + [self getHeight];
}

- (void)offsetTopAndBottomWithInt:(jint)offset {
  [super offsetTopAndBottomWithInt:offset];
  ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_([this$0_ asNativeWidget], [self getLeft], [self getTop], [self getRight], [self getBottom]);
}

- (void)offsetLeftAndRightWithInt:(jint)offset {
  [super offsetLeftAndRightWithInt:offset];
  ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_([this$0_ asNativeWidget], [self getLeft], [self getTop], [self getRight], [self getBottom]);
}

- (void)setMyAttributeWithNSString:(NSString *)name
                            withId:(id)value {
  if ([((NSString *) nil_chk(name)) isEqual:@"state0"]) {
    [self setState0WithId:value];
    return;
  }
  if ([name isEqual:@"state1"]) {
    [self setState1WithId:value];
    return;
  }
  if ([name isEqual:@"state2"]) {
    [self setState2WithId:value];
    return;
  }
  if ([name isEqual:@"state3"]) {
    [self setState3WithId:value];
    return;
  }
  if ([name isEqual:@"state4"]) {
    [self setState4WithId:value];
    return;
  }
  [this$0_ setAttributeWithNSString:name withId:value withBoolean:!([value isKindOfClass:[NSString class]])];
}

- (void)setVisibilityWithInt:(jint)visibility {
  [super setVisibilityWithInt:visibility];
  ASViewImpl_nativeSetVisibilityWithId_withBoolean_([this$0_ asNativeWidget], visibility != ADView_VISIBLE);
}

- (jint)getBorderPadding {
  return [this$0_ getBorderPadding];
}

- (jint)getLineHeight {
  return ASRadioButtonImpl_getLineHeight(this$0_);
}

- (jint)getBorderWidth {
  return ASRadioButtonImpl_getBorderWidth(this$0_);
}

- (jint)getLineHeightPadding {
  return [this$0_ getLineHeightPadding];
}

- (jint)nativeMeasureWidthWithId:(id)uiView {
  return ASViewImpl_nativeMeasureWidthWithId_(uiView);
}

- (jint)nativeMeasureHeightWithId:(id)uiView
                          withInt:(jint)width {
  return ASViewImpl_nativeMeasureHeightWithId_withInt_(uiView, width);
}

- (jint)computeSizeWithFloat:(jfloat)width {
  return [self nativeMeasureHeightWithId:this$0_->uiView_ withInt:JreFpToInt(width)];
}

- (NSString *)getText {
  return (NSString *) cast_chk(ASRadioButtonImpl_getMyText(this$0_), [NSString class]);
}

- (void)setState0WithId:(id)value {
  ASViewImpl_setStateWithASIWidget_withInt_withId_(this$0_, 0, value);
}

- (void)setState1WithId:(id)value {
  ASViewImpl_setStateWithASIWidget_withInt_withId_(this$0_, 1, value);
}

- (void)setState2WithId:(id)value {
  ASViewImpl_setStateWithASIWidget_withInt_withId_(this$0_, 2, value);
}

- (void)setState3WithId:(id)value {
  ASViewImpl_setStateWithASIWidget_withInt_withId_(this$0_, 3, value);
}

- (void)setState4WithId:(id)value {
  ASViewImpl_setStateWithASIWidget_withInt_withId_(this$0_, 4, value);
}

- (void)state0 {
  ASViewImpl_stateWithASIWidget_withInt_(this$0_, 0);
}

- (void)state1 {
  ASViewImpl_stateWithASIWidget_withInt_(this$0_, 1);
}

- (void)state2 {
  ASViewImpl_stateWithASIWidget_withInt_(this$0_, 2);
}

- (void)state3 {
  ASViewImpl_stateWithASIWidget_withInt_(this$0_, 3);
}

- (void)state4 {
  ASViewImpl_stateWithASIWidget_withInt_(this$0_, 4);
}

- (void)stateYes {
  ASViewImpl_stateYesWithASIWidget_(this$0_);
}

- (void)stateNo {
  ASViewImpl_stateNoWithASIWidget_(this$0_);
}

- (void)__javaClone:(ASRadioButtonImpl_RadioButtonExt *)original {
  [super __javaClone:original];
  JreRelease(this$0_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LASIWidget;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x81, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 2, -1, -1, -1, -1 },
    { NULL, "LASILifeCycleDecorator;", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 12, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADView;", 0x1, 15, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 18, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 20, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 21, 22, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 23, 22, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 24, 25, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 26, 22, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 27, 28, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 29, 30, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 31, 32, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 33, 28, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 34, 28, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 35, 28, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 36, 28, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 37, 28, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getWidget);
  methods[1].selector = @selector(initWithASRadioButtonImpl:);
  methods[2].selector = @selector(onMeasureWithInt:withInt:);
  methods[3].selector = @selector(onLayoutWithBoolean:withInt:withInt:withInt:withInt:);
  methods[4].selector = @selector(executeWithNSString:withNSObjectArray:);
  methods[5].selector = @selector(updateMeasuredDimensionWithInt:withInt:);
  methods[6].selector = @selector(newInstanceWithASIWidget:);
  methods[7].selector = @selector(setAttributeWithASWidgetAttribute:withNSString:withId:);
  methods[8].selector = @selector(getMethods);
  methods[9].selector = @selector(initialized);
  methods[10].selector = @selector(getAttributeWithASWidgetAttribute:);
  methods[11].selector = @selector(drawableStateChanged);
  methods[12].selector = @selector(inflateViewWithNSString:);
  methods[13].selector = @selector(remeasure);
  methods[14].selector = @selector(removeFromParent);
  methods[15].selector = @selector(getLocationOnScreenWithIntArray:);
  methods[16].selector = @selector(getWindowVisibleDisplayFrameWithADRect:);
  methods[17].selector = @selector(offsetTopAndBottomWithInt:);
  methods[18].selector = @selector(offsetLeftAndRightWithInt:);
  methods[19].selector = @selector(setMyAttributeWithNSString:withId:);
  methods[20].selector = @selector(setVisibilityWithInt:);
  methods[21].selector = @selector(getBorderPadding);
  methods[22].selector = @selector(getLineHeight);
  methods[23].selector = @selector(getBorderWidth);
  methods[24].selector = @selector(getLineHeightPadding);
  methods[25].selector = @selector(nativeMeasureWidthWithId:);
  methods[26].selector = @selector(nativeMeasureHeightWithId:withInt:);
  methods[27].selector = @selector(computeSizeWithFloat:);
  methods[28].selector = @selector(getText);
  methods[29].selector = @selector(setState0WithId:);
  methods[30].selector = @selector(setState1WithId:);
  methods[31].selector = @selector(setState2WithId:);
  methods[32].selector = @selector(setState3WithId:);
  methods[33].selector = @selector(setState4WithId:);
  methods[34].selector = @selector(state0);
  methods[35].selector = @selector(state1);
  methods[36].selector = @selector(state2);
  methods[37].selector = @selector(state3);
  methods[38].selector = @selector(state4);
  methods[39].selector = @selector(stateYes);
  methods[40].selector = @selector(stateNo);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASRadioButtonImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "measureFinished_", "LASMeasureEvent;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "onLayoutEvent_", "LASOnLayoutEvent;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "overlays_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 38, -1 },
    { "templates_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 39, -1 },
  };
  static const void *ptrTable[] = { "LASRadioButtonImpl;", "onMeasure", "II", "onLayout", "ZIIII", "execute", "LNSString;[LNSObject;", "updateMeasuredDimension", "newInstance", "LASIWidget;", "setAttribute", "LASWidgetAttribute;LNSString;LNSObject;", "()Ljava/util/List<Ljava/lang/String;>;", "getAttribute", "LASWidgetAttribute;", "inflateView", "LNSString;", "getLocationOnScreen", "[I", "getWindowVisibleDisplayFrame", "LADRect;", "offsetTopAndBottom", "I", "offsetLeftAndRight", "setMyAttribute", "LNSString;LNSObject;", "setVisibility", "nativeMeasureWidth", "LNSObject;", "nativeMeasureHeight", "LNSObject;I", "computeSize", "F", "setState0", "setState1", "setState2", "setState3", "setState4", "Ljava/util/List<Lcom/ashera/widget/IWidget;>;", "Ljava/util/Map<Ljava/lang/String;Lcom/ashera/widget/IWidget;>;" };
  static const J2ObjcClassInfo _ASRadioButtonImpl_RadioButtonExt = { "RadioButtonExt", "com.ashera.layout", ptrTable, methods, fields, 7, 0x1, 41, 5, 0, -1, -1, -1, -1 };
  return &_ASRadioButtonImpl_RadioButtonExt;
}

@end

void ASRadioButtonImpl_RadioButtonExt_initWithASRadioButtonImpl_(ASRadioButtonImpl_RadioButtonExt *self, ASRadioButtonImpl *outer$) {
  self->this$0_ = outer$;
  ADRadioButton_initWithASIWidget_(self, outer$);
  self->measureFinished_ = new_ASMeasureEvent_init();
  self->onLayoutEvent_ = new_ASOnLayoutEvent_init();
}

ASRadioButtonImpl_RadioButtonExt *new_ASRadioButtonImpl_RadioButtonExt_initWithASRadioButtonImpl_(ASRadioButtonImpl *outer$) {
  J2OBJC_NEW_IMPL(ASRadioButtonImpl_RadioButtonExt, initWithASRadioButtonImpl_, outer$)
}

ASRadioButtonImpl_RadioButtonExt *create_ASRadioButtonImpl_RadioButtonExt_initWithASRadioButtonImpl_(ASRadioButtonImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASRadioButtonImpl_RadioButtonExt, initWithASRadioButtonImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASRadioButtonImpl_RadioButtonExt)

@implementation ASRadioButtonImpl_DellocHandler

- (instancetype)initWithASRadioButtonImpl:(ASRadioButtonImpl *)outer$
                             withNSString:(NSString *)type {
  ASRadioButtonImpl_DellocHandler_initWithASRadioButtonImpl_withNSString_(self, outer$, type);
  return self;
}

- (void)doPerformWithId:(id)payload {
  ASRadioButtonImpl_cancelTimer(this$0_);
  this$0_->isDisposed_ = true;
}

- (void)__javaClone:(ASRadioButtonImpl_DellocHandler *)original {
  [super __javaClone:original];
  JreRelease(this$0_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASRadioButtonImpl:withNSString:);
  methods[1].selector = @selector(doPerformWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASRadioButtonImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASRadioButtonImpl;LNSString;", "doPerform", "LNSObject;", "LASRadioButtonImpl;" };
  static const J2ObjcClassInfo _ASRadioButtonImpl_DellocHandler = { "DellocHandler", "com.ashera.layout", ptrTable, methods, fields, 7, 0x12, 2, 1, 3, -1, -1, -1, -1 };
  return &_ASRadioButtonImpl_DellocHandler;
}

@end

void ASRadioButtonImpl_DellocHandler_initWithASRadioButtonImpl_withNSString_(ASRadioButtonImpl_DellocHandler *self, ASRadioButtonImpl *outer$, NSString *type) {
  self->this$0_ = outer$;
  ASEventBusHandler_initWithNSString_(self, type);
}

ASRadioButtonImpl_DellocHandler *new_ASRadioButtonImpl_DellocHandler_initWithASRadioButtonImpl_withNSString_(ASRadioButtonImpl *outer$, NSString *type) {
  J2OBJC_NEW_IMPL(ASRadioButtonImpl_DellocHandler, initWithASRadioButtonImpl_withNSString_, outer$, type)
}

ASRadioButtonImpl_DellocHandler *create_ASRadioButtonImpl_DellocHandler_initWithASRadioButtonImpl_withNSString_(ASRadioButtonImpl *outer$, NSString *type) {
  J2OBJC_CREATE_IMPL(ASRadioButtonImpl_DellocHandler, initWithASRadioButtonImpl_withNSString_, outer$, type)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASRadioButtonImpl_DellocHandler)

@implementation ASRadioButtonImpl_StateToggler

- (instancetype)initWithASRadioButtonImpl:(ASRadioButtonImpl *)outer$ {
  ASRadioButtonImpl_StateToggler_initWithASRadioButtonImpl_(self, outer$);
  return self;
}

- (void)onClickWithADView:(ADView *)v {
  if ([((ADRadioButton *) nil_chk(this$0_->measurableView_)) isEnabled]) {
    jboolean isChecked = [((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(ASRadioButtonImpl_getChecked(this$0_), [JavaLangBoolean class]))) booleanValue];
    if (!isChecked || (isChecked && ASRadioButtonImpl_allowUnCheck(this$0_))) {
      [((ADRadioButton *) nil_chk(this$0_->measurableView_)) toggle];
    }
  }
}

- (void)__javaClone:(ASRadioButtonImpl_StateToggler *)original {
  [super __javaClone:original];
  JreRelease(this$0_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASRadioButtonImpl:);
  methods[1].selector = @selector(onClickWithADView:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASRadioButtonImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASRadioButtonImpl;", "onClick", "LADView;" };
  static const J2ObjcClassInfo _ASRadioButtonImpl_StateToggler = { "StateToggler", "com.ashera.layout", ptrTable, methods, fields, 7, 0x2, 2, 1, 0, -1, -1, -1, -1 };
  return &_ASRadioButtonImpl_StateToggler;
}

@end

void ASRadioButtonImpl_StateToggler_initWithASRadioButtonImpl_(ASRadioButtonImpl_StateToggler *self, ASRadioButtonImpl *outer$) {
  self->this$0_ = outer$;
  NSObject_init(self);
}

ASRadioButtonImpl_StateToggler *new_ASRadioButtonImpl_StateToggler_initWithASRadioButtonImpl_(ASRadioButtonImpl *outer$) {
  J2OBJC_NEW_IMPL(ASRadioButtonImpl_StateToggler, initWithASRadioButtonImpl_, outer$)
}

ASRadioButtonImpl_StateToggler *create_ASRadioButtonImpl_StateToggler_initWithASRadioButtonImpl_(ASRadioButtonImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASRadioButtonImpl_StateToggler, initWithASRadioButtonImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASRadioButtonImpl_StateToggler)

@implementation ASRadioButtonImpl_MyCanvas

- (instancetype)initWithASRadioButtonImpl:(ASRadioButtonImpl *)outer$ {
  ASRadioButtonImpl_MyCanvas_initWithASRadioButtonImpl_(self, outer$);
  return self;
}

- (void)drawWithADDrawable:(ADDrawable *)drawable {
}

- (void)reset {
}

- (void)translateWithInt:(jint)arg0
                 withInt:(jint)arg1 {
  ADCanvas_translateWithInt_withInt_(self, arg0, arg1);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASRadioButtonImpl:);
  methods[1].selector = @selector(drawWithADDrawable:);
  methods[2].selector = @selector(reset);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LASRadioButtonImpl;", "draw", "LADDrawable;" };
  static const J2ObjcClassInfo _ASRadioButtonImpl_MyCanvas = { "MyCanvas", "com.ashera.layout", ptrTable, methods, NULL, 7, 0x2, 3, 0, 0, -1, -1, -1, -1 };
  return &_ASRadioButtonImpl_MyCanvas;
}

@end

void ASRadioButtonImpl_MyCanvas_initWithASRadioButtonImpl_(ASRadioButtonImpl_MyCanvas *self, ASRadioButtonImpl *outer$) {
  NSObject_init(self);
}

ASRadioButtonImpl_MyCanvas *new_ASRadioButtonImpl_MyCanvas_initWithASRadioButtonImpl_(ASRadioButtonImpl *outer$) {
  J2OBJC_NEW_IMPL(ASRadioButtonImpl_MyCanvas, initWithASRadioButtonImpl_, outer$)
}

ASRadioButtonImpl_MyCanvas *create_ASRadioButtonImpl_MyCanvas_initWithASRadioButtonImpl_(ASRadioButtonImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASRadioButtonImpl_MyCanvas, initWithASRadioButtonImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASRadioButtonImpl_MyCanvas)

@implementation ASRadioButtonImpl_PostMeasureHandler

- (instancetype)initWithASRadioButtonImpl:(ASRadioButtonImpl *)outer$
                             withNSString:(NSString *)type {
  ASRadioButtonImpl_PostMeasureHandler_initWithASRadioButtonImpl_withNSString_(self, outer$, type);
  return self;
}

- (void)doPerformWithId:(id)payload {
  if (!onlyOnce_ || [((ADRadioButton *) nil_chk(this$0_->measurableView_)) isLayoutRequested]) {
    [((ADRadioButton *) nil_chk(this$0_->measurableView_)) autoResizeText];
    onlyOnce_ = true;
  }
}

- (void)__javaClone:(ASRadioButtonImpl_PostMeasureHandler *)original {
  [super __javaClone:original];
  JreRelease(this$0_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASRadioButtonImpl:withNSString:);
  methods[1].selector = @selector(doPerformWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASRadioButtonImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "onlyOnce_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASRadioButtonImpl;LNSString;", "doPerform", "LNSObject;", "LASRadioButtonImpl;" };
  static const J2ObjcClassInfo _ASRadioButtonImpl_PostMeasureHandler = { "PostMeasureHandler", "com.ashera.layout", ptrTable, methods, fields, 7, 0x0, 2, 2, 3, -1, -1, -1, -1 };
  return &_ASRadioButtonImpl_PostMeasureHandler;
}

@end

void ASRadioButtonImpl_PostMeasureHandler_initWithASRadioButtonImpl_withNSString_(ASRadioButtonImpl_PostMeasureHandler *self, ASRadioButtonImpl *outer$, NSString *type) {
  self->this$0_ = outer$;
  ASEventBusHandler_initWithNSString_(self, type);
}

ASRadioButtonImpl_PostMeasureHandler *new_ASRadioButtonImpl_PostMeasureHandler_initWithASRadioButtonImpl_withNSString_(ASRadioButtonImpl *outer$, NSString *type) {
  J2OBJC_NEW_IMPL(ASRadioButtonImpl_PostMeasureHandler, initWithASRadioButtonImpl_withNSString_, outer$, type)
}

ASRadioButtonImpl_PostMeasureHandler *create_ASRadioButtonImpl_PostMeasureHandler_initWithASRadioButtonImpl_withNSString_(ASRadioButtonImpl *outer$, NSString *type) {
  J2OBJC_CREATE_IMPL(ASRadioButtonImpl_PostMeasureHandler, initWithASRadioButtonImpl_withNSString_, outer$, type)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASRadioButtonImpl_PostMeasureHandler)

@implementation ASRadioButtonImpl_MarqueeTask

- (instancetype)initWithASRadioButtonImpl:(ASRadioButtonImpl *)outer$
                             withNSString:(NSString *)direction {
  ASRadioButtonImpl_MarqueeTask_initWithASRadioButtonImpl_withNSString_(self, outer$, direction);
  return self;
}

- (void)cancel {
  cancel_ = true;
}

- (void)restart {
  cancel_ = false;
  slideLength_ = 0;
  cycles_ = 0;
}

- (void)run {
  jint numberOfBlankSpaces = ASRadioButtonImpl_calcNumberOfWhiteSpaces(this$0_);
  if (this$0_->marqueeCommandConverter_ == nil) {
    this$0_->marqueeCommandConverter_ = (ASMarqueeCommandConverter *) cast_chk([this$0_ getAttributeCommandWithNSString:@"text" withNSString:ASCommonConverters_command_marquee withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(numberOfBlankSpaces), JavaLangInteger_valueOfWithInt_(0), direction_ } count:3 type:NSObject_class_()]], [ASMarqueeCommandConverter class]);
  }
  slideLength_ = [((ASMarqueeCommandConverter *) nil_chk(this$0_->marqueeCommandConverter_)) getOffset];
  if (numberOfBlankSpaces > 0) {
    NSString *str = (NSString *) cast_chk(ASRadioButtonImpl_getMyText(this$0_), [NSString class]);
    if (slideLength_ == [((NSString *) nil_chk(str)) java_length]) {
      slideLength_ = 0;
      cycles_++;
    }
    if ((this$0_->marqueeRepeatLimit_ > 0 && cycles_ >= this$0_->marqueeRepeatLimit_)) {
      ASRadioButtonImpl_cancelTimer(this$0_);
      return;
    }
    slideLength_++;
    ASRadioButtonImpl_executeOnMainThreadWithJavaLangRunnable_(this$0_, new_ASRadioButtonImpl_MarqueeTask_$Lambda$1_initWithASRadioButtonImpl_MarqueeTask_withInt_(self, numberOfBlankSpaces));
  }
  else {
    ASRadioButtonImpl_schedule(this$0_);
  }
}

- (void)__javaClone:(ASRadioButtonImpl_MarqueeTask *)original {
  [super __javaClone:original];
  JreRelease(this$0_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASRadioButtonImpl:withNSString:);
  methods[1].selector = @selector(cancel);
  methods[2].selector = @selector(restart);
  methods[3].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASRadioButtonImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "slideLength_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "cycles_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "cancel_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "direction_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASRadioButtonImpl;LNSString;", "LASRadioButtonImpl;" };
  static const J2ObjcClassInfo _ASRadioButtonImpl_MarqueeTask = { "MarqueeTask", "com.ashera.layout", ptrTable, methods, fields, 7, 0x12, 4, 5, 1, -1, -1, -1, -1 };
  return &_ASRadioButtonImpl_MarqueeTask;
}

@end

void ASRadioButtonImpl_MarqueeTask_initWithASRadioButtonImpl_withNSString_(ASRadioButtonImpl_MarqueeTask *self, ASRadioButtonImpl *outer$, NSString *direction) {
  self->this$0_ = outer$;
  NSObject_init(self);
  self->slideLength_ = 0;
  self->cycles_ = 0;
  self->cancel_ = false;
  self->direction_ = direction;
}

ASRadioButtonImpl_MarqueeTask *new_ASRadioButtonImpl_MarqueeTask_initWithASRadioButtonImpl_withNSString_(ASRadioButtonImpl *outer$, NSString *direction) {
  J2OBJC_NEW_IMPL(ASRadioButtonImpl_MarqueeTask, initWithASRadioButtonImpl_withNSString_, outer$, direction)
}

ASRadioButtonImpl_MarqueeTask *create_ASRadioButtonImpl_MarqueeTask_initWithASRadioButtonImpl_withNSString_(ASRadioButtonImpl *outer$, NSString *direction) {
  J2OBJC_CREATE_IMPL(ASRadioButtonImpl_MarqueeTask, initWithASRadioButtonImpl_withNSString_, outer$, direction)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASRadioButtonImpl_MarqueeTask)

@implementation ASRadioButtonImpl_MarqueeTask_$Lambda$1

- (void)run {
  if (!this$0_->cancel_) {
    [this$0_->this$0_ applyAttributeCommandWithNSString:@"text" withNSString:ASCommonConverters_command_marquee withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"ellipsize" } count:1 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(val$numberOfBlankSpaces_), JavaLangInteger_valueOfWithInt_(this$0_->slideLength_), this$0_->direction_ } count:3 type:NSObject_class_()]];
    ASRadioButtonImpl_schedule(this$0_->this$0_);
  }
}

@end

void ASRadioButtonImpl_MarqueeTask_$Lambda$1_initWithASRadioButtonImpl_MarqueeTask_withInt_(ASRadioButtonImpl_MarqueeTask_$Lambda$1 *self, ASRadioButtonImpl_MarqueeTask *outer$, jint capture$0) {
  self->this$0_ = outer$;
  self->val$numberOfBlankSpaces_ = capture$0;
  NSObject_init(self);
}

ASRadioButtonImpl_MarqueeTask_$Lambda$1 *new_ASRadioButtonImpl_MarqueeTask_$Lambda$1_initWithASRadioButtonImpl_MarqueeTask_withInt_(ASRadioButtonImpl_MarqueeTask *outer$, jint capture$0) {
  J2OBJC_NEW_IMPL(ASRadioButtonImpl_MarqueeTask_$Lambda$1, initWithASRadioButtonImpl_MarqueeTask_withInt_, outer$, capture$0)
}

ASRadioButtonImpl_MarqueeTask_$Lambda$1 *create_ASRadioButtonImpl_MarqueeTask_$Lambda$1_initWithASRadioButtonImpl_MarqueeTask_withInt_(ASRadioButtonImpl_MarqueeTask *outer$, jint capture$0) {
  J2OBJC_CREATE_IMPL(ASRadioButtonImpl_MarqueeTask_$Lambda$1, initWithASRadioButtonImpl_MarqueeTask_withInt_, outer$, capture$0)
}

@implementation ASRadioButtonImpl_OnCheckedChangeListener

- (NSString *)getAction {
  return action_;
}

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue {
  ASRadioButtonImpl_OnCheckedChangeListener_initWithASIWidget_withNSString_(self, w, strValue);
  return self;
}

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue
                     withNSString:(NSString *)action {
  ASRadioButtonImpl_OnCheckedChangeListener_initWithASIWidget_withNSString_withNSString_(self, w, strValue, action);
  return self;
}

- (void)onCheckedChangedWithADCompoundButton:(ADCompoundButton *)buttonView
                                 withBoolean:(jboolean)isChecked {
  if (action_ == nil || [action_ isEqual:@"onCheckedChange"]) {
    [((id<ASIWidget>) nil_chk(w_)) syncModelFromUiToPojoWithNSString:@"onCheckedChange"];
    id<JavaUtilMap> obj = [self getOnCheckedChangeEventObjWithADCompoundButton:buttonView withBoolean:isChecked];
    NSString *commandName = (NSString *) cast_chk([((id<JavaUtilMap>) nil_chk(obj)) getWithId:ASEventExpressionParser_KEY_COMMAND_NAME], [NSString class]);
    NSString *commandType = (NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_COMMAND_TYPE], [NSString class]);
    switch (JreIndexOfStr(commandType, (id[]){ @"+" }, 1)) {
      case 0:
      if (ASEventCommandFactory_hasCommandWithNSString_(commandName)) {
        (void) [((id<ASEventCommand>) nil_chk(ASEventCommandFactory_getCommandWithNSString_(commandName))) executeCommandWithASIWidget:w_ withJavaUtilMap:obj withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ buttonView, JavaLangBoolean_valueOfWithBoolean_(isChecked) } count:2 type:NSObject_class_()]];
      }
      break;
      default:
      break;
    }
    if ([obj containsKeyWithId:@"refreshUiFromModel"]) {
      id widgets = [obj removeWithId:@"refreshUiFromModel"];
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, widgets, true);
    }
    if ([((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds] != nil) {
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, [((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds], true);
    }
    if (strValue_ != nil && ![strValue_ java_isEmpty] && ![((NSString *) nil_chk([((NSString *) nil_chk(strValue_)) java_trim])) java_hasPrefix:@"+"]) {
      id<ASIActivity> activity = [((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getRootActivity];
      if (activity != nil) {
        [activity sendEventMessageWithJavaUtilMap:obj];
      }
    }
  }
  return;
}

- (id<JavaUtilMap>)getOnCheckedChangeEventObjWithADCompoundButton:(ADCompoundButton *)buttonView
                                                      withBoolean:(jboolean)isChecked {
  id<JavaUtilMap> obj = ASPluginInvoker_getJSONCompatMap();
  (void) [((id<JavaUtilMap>) nil_chk(obj)) putWithId:@"action" withId:@"action"];
  (void) [obj putWithId:@"eventType" withId:@"checkedchange"];
  (void) [obj putWithId:@"fragmentId" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getFragmentId]];
  (void) [obj putWithId:@"actionUrl" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getActionUrl]];
  (void) [obj putWithId:@"namespace" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getNamespace]];
  if ([((id<ASIWidget>) nil_chk(w_)) getComponentId] != nil) {
    (void) [obj putWithId:@"componentId" withId:[((id<ASIWidget>) nil_chk(w_)) getComponentId]];
  }
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"id", [((id<ASIWidget>) nil_chk(w_)) getId]);
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"isChecked", JavaLangBoolean_valueOfWithBoolean_(isChecked));
  (void) ASEventExpressionParser_parseEventExpressionWithNSString_withJavaUtilMap_(strValue_, obj);
  [((id<ASIWidget>) nil_chk(w_)) updateModelToEventMapWithJavaUtilMap:obj withNSString:@"onCheckedChange" withNSString:(NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_EVENT_ARGS], [NSString class])];
  return obj;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, 4, 3, -1, 5, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getAction);
  methods[1].selector = @selector(initWithASIWidget:withNSString:);
  methods[2].selector = @selector(initWithASIWidget:withNSString:withNSString:);
  methods[3].selector = @selector(onCheckedChangedWithADCompoundButton:withBoolean:);
  methods[4].selector = @selector(getOnCheckedChangeEventObjWithADCompoundButton:withBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "w_", "LASIWidget;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "view_", "LADView;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "strValue_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "action_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASIWidget;LNSString;", "LASIWidget;LNSString;LNSString;", "onCheckedChanged", "LADCompoundButton;Z", "getOnCheckedChangeEventObj", "(Lr/android/widget/CompoundButton;Z)Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", "LASRadioButtonImpl;" };
  static const J2ObjcClassInfo _ASRadioButtonImpl_OnCheckedChangeListener = { "OnCheckedChangeListener", "com.ashera.layout", ptrTable, methods, fields, 7, 0xa, 5, 4, 6, -1, -1, -1, -1 };
  return &_ASRadioButtonImpl_OnCheckedChangeListener;
}

@end

void ASRadioButtonImpl_OnCheckedChangeListener_initWithASIWidget_withNSString_(ASRadioButtonImpl_OnCheckedChangeListener *self, id<ASIWidget> w, NSString *strValue) {
  NSObject_init(self);
  self->w_ = w;
  self->strValue_ = strValue;
}

ASRadioButtonImpl_OnCheckedChangeListener *new_ASRadioButtonImpl_OnCheckedChangeListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) {
  J2OBJC_NEW_IMPL(ASRadioButtonImpl_OnCheckedChangeListener, initWithASIWidget_withNSString_, w, strValue)
}

ASRadioButtonImpl_OnCheckedChangeListener *create_ASRadioButtonImpl_OnCheckedChangeListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) {
  J2OBJC_CREATE_IMPL(ASRadioButtonImpl_OnCheckedChangeListener, initWithASIWidget_withNSString_, w, strValue)
}

void ASRadioButtonImpl_OnCheckedChangeListener_initWithASIWidget_withNSString_withNSString_(ASRadioButtonImpl_OnCheckedChangeListener *self, id<ASIWidget> w, NSString *strValue, NSString *action) {
  NSObject_init(self);
  self->w_ = w;
  self->strValue_ = strValue;
  self->action_ = action;
}

ASRadioButtonImpl_OnCheckedChangeListener *new_ASRadioButtonImpl_OnCheckedChangeListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) {
  J2OBJC_NEW_IMPL(ASRadioButtonImpl_OnCheckedChangeListener, initWithASIWidget_withNSString_withNSString_, w, strValue, action)
}

ASRadioButtonImpl_OnCheckedChangeListener *create_ASRadioButtonImpl_OnCheckedChangeListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) {
  J2OBJC_CREATE_IMPL(ASRadioButtonImpl_OnCheckedChangeListener, initWithASIWidget_withNSString_withNSString_, w, strValue, action)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASRadioButtonImpl_OnCheckedChangeListener)
