//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-ios-widgets\ios_widget_library\src\main\java\com\ashera\layout\RadioGroupImpl.java
//

#define J2OBJC_IMPORTED_BY_JAVA_IMPLEMENTATION 1




#include "AbstractBitFlagConverter.h"
#include "AbstractEnumToIntConverter.h"
#include "BaseHasWidgets.h"
#include "Canvas.h"
#include "ConverterFactory.h"
#include "Drawable.h"
#include "EventCommand.h"
#include "EventCommandFactory.h"
#include "EventExpressionParser.h"
#include "FormElement.h"
#include "HasWidgets.h"
#include "IActivity.h"
#include "IFragment.h"
#include "ILifeCycleDecorator.h"
#include "IListener.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "IWidget.h"
#include "IWidgetLifeCycleListener.h"
#include "IsRadioButton.h"
#include "J2ObjC_source.h"
#include "LayoutTransition.h"
#include "LinearLayout.h"
#include "MeasureEvent.h"
#include "OnLayoutEvent.h"
#include "PluginInvoker.h"
#include "RadioGroup.h"
#include "RadioGroupImpl.h"
#include "Rect.h"
#include "View.h"
#include "ViewGroup.h"
#include "ViewGroupImpl.h"
#include "ViewImpl.h"
#include "WidgetAttribute.h"
#include "WidgetFactory.h"
#include "java/lang/Boolean.h"
#include "java/lang/Float.h"
#include "java/lang/Integer.h"
#include "java/lang/Runnable.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/ArrayList.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"

#include <UIKit/UIKit.h>
#include "ASUIView.h"
#include "HasLifeCycleDecorators.h"

#include "ASUIImageView.h"


@class NSString;


#pragma clang diagnostic error "-Wreturn-type"
#pragma clang diagnostic ignored "-Wswitch"


#pragma clang diagnostic ignored "-Wprotocol"

@interface ASRadioGroupImpl () {
 @public
  id uiView_;
  id<ADCanvas> canvas_;
  ADRadioGroup *radioGroup_;
  JavaLangInteger *checked_;
  id<ADRadioGroup_OnCheckedChangeListener> onCheckedChangeListener_;
}

- (void)setWidgetOnNativeClass;

- (void)nativeRemoveViewWithASIWidget:(id<ASIWidget>)widget;

- (void)createLayoutParamsWithADView:(ADView *)view;

- (ADLinearLayout_LayoutParams *)getLayoutParamsWithADView:(ADView *)view;

- (void)createCanvas;

- (void)setDividerPaddingWithId:(id)objValue;

- (void)setShowDividersWithId:(id)objValue;

- (id)getDividerPadding;

- (id)getShowDividers;

- (void)setCheckedWithId:(id)objValue;

- (id)getChecked;

- (void)toggleSelectionWithASIsRadioButton:(id<ASIsRadioButton>)selectedRadioButton;

- (void)setOnCheckedChangeWithId:(id)objValue;

- (void)handleRadioButtonChangeWithASIsRadioButton:(id<ASIsRadioButton>)radioButton;

- (void)setupRadioGroupToggleWithASIsRadioButton:(id<ASIsRadioButton>)radioButton;

- (void)setErrorWithId:(id)object;

- (void)setOnHierarchyChangeListenerWithADRadioGroup:(ADRadioGroup *)radioGroup
                                              withId:(id)objValue;

@end

J2OBJC_FIELD_SETTER(ASRadioGroupImpl, uiView_, id)
J2OBJC_FIELD_SETTER(ASRadioGroupImpl, canvas_, id<ADCanvas>)
J2OBJC_FIELD_SETTER(ASRadioGroupImpl, radioGroup_, ADRadioGroup *)
J2OBJC_FIELD_SETTER(ASRadioGroupImpl, checked_, JavaLangInteger *)
J2OBJC_FIELD_SETTER(ASRadioGroupImpl, onCheckedChangeListener_, id<ADRadioGroup_OnCheckedChangeListener>)

__attribute__((unused)) static void ASRadioGroupImpl_setWidgetOnNativeClass(ASRadioGroupImpl *self);

__attribute__((unused)) static void ASRadioGroupImpl_nativeRemoveViewWithASIWidget_(ASRadioGroupImpl *self, id<ASIWidget> widget);

__attribute__((unused)) static void ASRadioGroupImpl_createLayoutParamsWithADView_(ASRadioGroupImpl *self, ADView *view);

__attribute__((unused)) static ADLinearLayout_LayoutParams *ASRadioGroupImpl_getLayoutParamsWithADView_(ASRadioGroupImpl *self, ADView *view);

__attribute__((unused)) static void ASRadioGroupImpl_createCanvas(ASRadioGroupImpl *self);

__attribute__((unused)) static void ASRadioGroupImpl_setDividerPaddingWithId_(ASRadioGroupImpl *self, id objValue);

__attribute__((unused)) static void ASRadioGroupImpl_setShowDividersWithId_(ASRadioGroupImpl *self, id objValue);

__attribute__((unused)) static id ASRadioGroupImpl_getDividerPadding(ASRadioGroupImpl *self);

__attribute__((unused)) static id ASRadioGroupImpl_getShowDividers(ASRadioGroupImpl *self);

__attribute__((unused)) static void ASRadioGroupImpl_setCheckedWithId_(ASRadioGroupImpl *self, id objValue);

__attribute__((unused)) static id ASRadioGroupImpl_getChecked(ASRadioGroupImpl *self);

__attribute__((unused)) static void ASRadioGroupImpl_toggleSelectionWithASIsRadioButton_(ASRadioGroupImpl *self, id<ASIsRadioButton> selectedRadioButton);

__attribute__((unused)) static void ASRadioGroupImpl_setOnCheckedChangeWithId_(ASRadioGroupImpl *self, id objValue);

__attribute__((unused)) static void ASRadioGroupImpl_handleRadioButtonChangeWithASIsRadioButton_(ASRadioGroupImpl *self, id<ASIsRadioButton> radioButton);

__attribute__((unused)) static void ASRadioGroupImpl_setupRadioGroupToggleWithASIsRadioButton_(ASRadioGroupImpl *self, id<ASIsRadioButton> radioButton);

__attribute__((unused)) static void ASRadioGroupImpl_setErrorWithId_(ASRadioGroupImpl *self, id object);

__attribute__((unused)) static void ASRadioGroupImpl_setOnHierarchyChangeListenerWithADRadioGroup_withId_(ASRadioGroupImpl *self, ADRadioGroup *radioGroup, id objValue);

@interface ASRadioGroupImpl_Orientation () {
 @public
  id<JavaUtilMap> mapping_;
}

@end

J2OBJC_FIELD_SETTER(ASRadioGroupImpl_Orientation, mapping_, id<JavaUtilMap>)

@interface ASRadioGroupImpl_Divider () {
 @public
  id<JavaUtilMap> mapping_;
}

@end

J2OBJC_FIELD_SETTER(ASRadioGroupImpl_Divider, mapping_, id<JavaUtilMap>)

@interface ASRadioGroupImpl_RadioGroupExt () {
 @public
  WEAK_ ASRadioGroupImpl *this$0_;
  ASMeasureEvent *measureFinished_;
  ASOnLayoutEvent *onLayoutEvent_;
  id<JavaUtilList> overlays_;
  int32_t mMaxWidth_;
  int32_t mMaxHeight_;
  id<JavaUtilMap> templates_;
}

@end

J2OBJC_FIELD_SETTER(ASRadioGroupImpl_RadioGroupExt, measureFinished_, ASMeasureEvent *)
J2OBJC_FIELD_SETTER(ASRadioGroupImpl_RadioGroupExt, onLayoutEvent_, ASOnLayoutEvent *)
J2OBJC_FIELD_SETTER(ASRadioGroupImpl_RadioGroupExt, overlays_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(ASRadioGroupImpl_RadioGroupExt, templates_, id<JavaUtilMap>)

@interface ASRadioGroupImpl_CanvasImpl : NSObject < ADCanvas > {
 @public
  bool canvasReset_;
  bool requiresAttrChangeListener_;
  id<JavaUtilList> imageViews_;
  WEAK_ id<ASIWidget> widget_;
}

- (instancetype)initWithASIWidget:(id<ASIWidget>)widget;

- (void)drawWithADDrawable:(ADDrawable *)mDivider;

- (void)reset;

- (id)nativeCreateImageViewWithId:(id)image;

@end

J2OBJC_EMPTY_STATIC_INIT(ASRadioGroupImpl_CanvasImpl)

J2OBJC_FIELD_SETTER(ASRadioGroupImpl_CanvasImpl, imageViews_, id<JavaUtilList>)

__attribute__((unused)) static void ASRadioGroupImpl_CanvasImpl_initWithASIWidget_(ASRadioGroupImpl_CanvasImpl *self, id<ASIWidget> widget);

__attribute__((unused)) static ASRadioGroupImpl_CanvasImpl *new_ASRadioGroupImpl_CanvasImpl_initWithASIWidget_(id<ASIWidget> widget) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASRadioGroupImpl_CanvasImpl *create_ASRadioGroupImpl_CanvasImpl_initWithASIWidget_(id<ASIWidget> widget);

J2OBJC_TYPE_LITERAL_HEADER(ASRadioGroupImpl_CanvasImpl)


@interface ASRadioGroupImpl_CanvasImpl_$Lambda$1 : NSObject < ADDrawable_AttributeChangeListener > {
 @public
  id val$imageView_;
}

- (void)onAttributeChangeWithNSString:(NSString *)name
                               withId:(id)value;

@end

J2OBJC_EMPTY_STATIC_INIT(ASRadioGroupImpl_CanvasImpl_$Lambda$1)

__attribute__((unused)) static void ASRadioGroupImpl_CanvasImpl_$Lambda$1_initWithId_(ASRadioGroupImpl_CanvasImpl_$Lambda$1 *self, id capture$0);

__attribute__((unused)) static ASRadioGroupImpl_CanvasImpl_$Lambda$1 *new_ASRadioGroupImpl_CanvasImpl_$Lambda$1_initWithId_(id capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASRadioGroupImpl_CanvasImpl_$Lambda$1 *create_ASRadioGroupImpl_CanvasImpl_$Lambda$1_initWithId_(id capture$0);


@interface ASRadioGroupImpl_OnHierarchyChangeListener : NSObject < ADViewGroup_OnHierarchyChangeListener, ASIListener > {
 @public
  id<ASIWidget> w_;
  ADView *view_;
  NSString *strValue_;
  NSString *action_;
}

- (NSString *)getAction;

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue;

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue
                     withNSString:(NSString *)action;

- (void)onChildViewAddedWithADView:(ADView *)parent
                        withADView:(ADView *)child;

- (void)onChildViewRemovedWithADView:(ADView *)parent
                          withADView:(ADView *)child;

- (id<JavaUtilMap>)getOnChildViewRemovedEventObjWithADView:(ADView *)parent
                                                withADView:(ADView *)child;

- (id<JavaUtilMap>)getOnChildViewAddedEventObjWithADView:(ADView *)parent
                                              withADView:(ADView *)child;

@end

J2OBJC_EMPTY_STATIC_INIT(ASRadioGroupImpl_OnHierarchyChangeListener)

J2OBJC_FIELD_SETTER(ASRadioGroupImpl_OnHierarchyChangeListener, w_, id<ASIWidget>)
J2OBJC_FIELD_SETTER(ASRadioGroupImpl_OnHierarchyChangeListener, view_, ADView *)
J2OBJC_FIELD_SETTER(ASRadioGroupImpl_OnHierarchyChangeListener, strValue_, NSString *)
J2OBJC_FIELD_SETTER(ASRadioGroupImpl_OnHierarchyChangeListener, action_, NSString *)

__attribute__((unused)) static void ASRadioGroupImpl_OnHierarchyChangeListener_initWithASIWidget_withNSString_(ASRadioGroupImpl_OnHierarchyChangeListener *self, id<ASIWidget> w, NSString *strValue);

__attribute__((unused)) static ASRadioGroupImpl_OnHierarchyChangeListener *new_ASRadioGroupImpl_OnHierarchyChangeListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASRadioGroupImpl_OnHierarchyChangeListener *create_ASRadioGroupImpl_OnHierarchyChangeListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue);

__attribute__((unused)) static void ASRadioGroupImpl_OnHierarchyChangeListener_initWithASIWidget_withNSString_withNSString_(ASRadioGroupImpl_OnHierarchyChangeListener *self, id<ASIWidget> w, NSString *strValue, NSString *action);

__attribute__((unused)) static ASRadioGroupImpl_OnHierarchyChangeListener *new_ASRadioGroupImpl_OnHierarchyChangeListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASRadioGroupImpl_OnHierarchyChangeListener *create_ASRadioGroupImpl_OnHierarchyChangeListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action);

J2OBJC_TYPE_LITERAL_HEADER(ASRadioGroupImpl_OnHierarchyChangeListener)


@interface ASRadioGroupImpl_OnCheckedChangeListener : NSObject < ADRadioGroup_OnCheckedChangeListener, ASIListener > {
 @public
  id<ASIWidget> w_;
  ADView *view_;
  NSString *strValue_;
  NSString *action_;
}

- (NSString *)getAction;

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue;

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue
                     withNSString:(NSString *)action;

- (void)onCheckedChangedWithADRadioGroup:(ADRadioGroup *)group
                                 withInt:(int32_t)checkedId;

- (id<JavaUtilMap>)getOnCheckedChangeEventObjWithADRadioGroup:(ADRadioGroup *)group
                                                      withInt:(int32_t)checkedId;

@end

J2OBJC_EMPTY_STATIC_INIT(ASRadioGroupImpl_OnCheckedChangeListener)

J2OBJC_FIELD_SETTER(ASRadioGroupImpl_OnCheckedChangeListener, w_, id<ASIWidget>)
J2OBJC_FIELD_SETTER(ASRadioGroupImpl_OnCheckedChangeListener, view_, ADView *)
J2OBJC_FIELD_SETTER(ASRadioGroupImpl_OnCheckedChangeListener, strValue_, NSString *)
J2OBJC_FIELD_SETTER(ASRadioGroupImpl_OnCheckedChangeListener, action_, NSString *)

__attribute__((unused)) static void ASRadioGroupImpl_OnCheckedChangeListener_initWithASIWidget_withNSString_(ASRadioGroupImpl_OnCheckedChangeListener *self, id<ASIWidget> w, NSString *strValue);

__attribute__((unused)) static ASRadioGroupImpl_OnCheckedChangeListener *new_ASRadioGroupImpl_OnCheckedChangeListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASRadioGroupImpl_OnCheckedChangeListener *create_ASRadioGroupImpl_OnCheckedChangeListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue);

__attribute__((unused)) static void ASRadioGroupImpl_OnCheckedChangeListener_initWithASIWidget_withNSString_withNSString_(ASRadioGroupImpl_OnCheckedChangeListener *self, id<ASIWidget> w, NSString *strValue, NSString *action);

__attribute__((unused)) static ASRadioGroupImpl_OnCheckedChangeListener *new_ASRadioGroupImpl_OnCheckedChangeListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASRadioGroupImpl_OnCheckedChangeListener *create_ASRadioGroupImpl_OnCheckedChangeListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action);

J2OBJC_TYPE_LITERAL_HEADER(ASRadioGroupImpl_OnCheckedChangeListener)


@interface ASRadioGroupImpl_RadioGroupSelectionListener : NSObject < ADView_OnClickListener > {
 @public
  WEAK_ ASRadioGroupImpl *this$0_;
  id<ASIsRadioButton> radioButton_;
}

- (instancetype)initWithASRadioGroupImpl:(ASRadioGroupImpl *)outer$
                     withASIsRadioButton:(id<ASIsRadioButton>)radioButton;

- (void)onClickWithADView:(ADView *)v;

@end

J2OBJC_EMPTY_STATIC_INIT(ASRadioGroupImpl_RadioGroupSelectionListener)

J2OBJC_FIELD_SETTER(ASRadioGroupImpl_RadioGroupSelectionListener, radioButton_, id<ASIsRadioButton>)

__attribute__((unused)) static void ASRadioGroupImpl_RadioGroupSelectionListener_initWithASRadioGroupImpl_withASIsRadioButton_(ASRadioGroupImpl_RadioGroupSelectionListener *self, ASRadioGroupImpl *outer$, id<ASIsRadioButton> radioButton);

__attribute__((unused)) static ASRadioGroupImpl_RadioGroupSelectionListener *new_ASRadioGroupImpl_RadioGroupSelectionListener_initWithASRadioGroupImpl_withASIsRadioButton_(ASRadioGroupImpl *outer$, id<ASIsRadioButton> radioButton) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASRadioGroupImpl_RadioGroupSelectionListener *create_ASRadioGroupImpl_RadioGroupSelectionListener_initWithASRadioGroupImpl_withASIsRadioButton_(ASRadioGroupImpl *outer$, id<ASIsRadioButton> radioButton);

J2OBJC_TYPE_LITERAL_HEADER(ASRadioGroupImpl_RadioGroupSelectionListener)


@interface ASRadioGroupImpl_$Lambda$1 : NSObject < JavaLangRunnable > {
 @public
  id<ASIWidget> val$widget_;
}

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(ASRadioGroupImpl_$Lambda$1)

__attribute__((unused)) static void ASRadioGroupImpl_$Lambda$1_initWithASIWidget_(ASRadioGroupImpl_$Lambda$1 *self, id<ASIWidget> capture$0);

__attribute__((unused)) static ASRadioGroupImpl_$Lambda$1 *new_ASRadioGroupImpl_$Lambda$1_initWithASIWidget_(id<ASIWidget> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASRadioGroupImpl_$Lambda$1 *create_ASRadioGroupImpl_$Lambda$1_initWithASIWidget_(id<ASIWidget> capture$0);


NSString *ASRadioGroupImpl_LOCAL_NAME = @"RadioGroup";
NSString *ASRadioGroupImpl_GROUP_NAME = @"RadioGroup";

@implementation ASRadioGroupImpl

@synthesize uiView = uiView_;

- (void)loadAttributesWithNSString:(NSString *)localName {
  ASViewGroupImpl_register__WithNSString_(localName);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"baselineAligned"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"baselineAlignedChildIndex"])) withTypeWithNSString:@"int"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"divider"])) withTypeWithNSString:@"drawable"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"gravity"])) withTypeWithNSString:@"gravity"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"measureWithLargestChild"])) withTypeWithNSString:@"boolean"]);
  ASConverterFactory_register__WithNSString_withASIConverter_(@"RadioGroup.orientation", new_ASRadioGroupImpl_Orientation_init());
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"orientation"])) withTypeWithNSString:@"RadioGroup.orientation"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"weightSum"])) withTypeWithNSString:@"float"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"onChildViewAdded"])) withTypeWithNSString:@"String"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"onChildViewRemoved"])) withTypeWithNSString:@"String"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"checkedButton"])) withTypeWithNSString:@"id"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"onCheckedChange"])) withTypeWithNSString:@"string"]);
  ASConverterFactory_register__WithNSString_withASIConverter_(@"RadioGroup.divider", new_ASRadioGroupImpl_Divider_init());
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"showDividers"])) withTypeWithNSString:@"RadioGroup.divider"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"dividerPadding"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_gravity"])) withTypeWithNSString:@"gravity"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_weight"])) withTypeWithNSString:@"float"])) forChild]);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASRadioGroupImpl_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithNSString:(NSString *)localname {
  ASRadioGroupImpl_initWithNSString_(self, localname);
  return self;
}

- (instancetype)initWithNSString:(NSString *)groupName
                    withNSString:(NSString *)localname {
  ASRadioGroupImpl_initWithNSString_withNSString_(self, groupName, localname);
  return self;
}

- (id<ASIWidget>)newInstance {
  return new_ASRadioGroupImpl_initWithNSString_withNSString_(groupName_, localName_);
}

- (void)createWithASIFragment:(id<ASIFragment>)fragment
              withJavaUtilMap:(id<JavaUtilMap>)params {
  [super createWithASIFragment:fragment withJavaUtilMap:params];
  radioGroup_ = new_ASRadioGroupImpl_RadioGroupExt_initWithASRadioGroupImpl_(self);
  [self nativeCreateWithJavaUtilMap:params];
  ASRadioGroupImpl_createCanvas(self);
  ASViewGroupImpl_registerCommandConveterWithASIWidget_(self);
  ASRadioGroupImpl_setWidgetOnNativeClass(self);
}

- (void)setWidgetOnNativeClass {
  ASRadioGroupImpl_setWidgetOnNativeClass(self);
}

- (id)asWidget {
  return radioGroup_;
}

- (bool)removeWithASIWidget:(id<ASIWidget>)w {
  bool remove = [super removeWithASIWidget:w];
  [((ADRadioGroup *) nil_chk(radioGroup_)) removeViewWithADView:(ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class])];
  ASRadioGroupImpl_nativeRemoveViewWithASIWidget_(self, w);
  return remove;
}

- (bool)removeWithInt:(int32_t)index {
  id<ASIWidget> widget = [((id<JavaUtilList>) nil_chk(widgets_)) getWithInt:index];
  bool remove = [super removeWithInt:index];
  if (index + 1 <= [((ADRadioGroup *) nil_chk(radioGroup_)) getChildCount]) {
    [((ADRadioGroup *) nil_chk(radioGroup_)) removeViewAtWithInt:index];
    ASRadioGroupImpl_nativeRemoveViewWithASIWidget_(self, widget);
  }
  return remove;
}

- (void)nativeRemoveViewWithASIWidget:(id<ASIWidget>)widget {
  ASRadioGroupImpl_nativeRemoveViewWithASIWidget_(self, widget);
}

- (void)addWithASIWidget:(id<ASIWidget>)w
                 withInt:(int32_t)index {
  if (index != -2) {
    ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]);
    ASRadioGroupImpl_createLayoutParamsWithADView_(self, view);
    if (index == -1) {
      [((ADRadioGroup *) nil_chk(radioGroup_)) addViewWithADView:view];
    }
    else {
      [((ADRadioGroup *) nil_chk(radioGroup_)) addViewWithADView:view withInt:index];
    }
  }
  ASViewGroupImpl_nativeAddViewWithId_withId_([self asNativeWidget], [((id<ASIWidget>) nil_chk(w)) asNativeWidget]);
  [super addWithASIWidget:w withInt:index];
}

- (void)createLayoutParamsWithADView:(ADView *)view {
  ASRadioGroupImpl_createLayoutParamsWithADView_(self, view);
}

- (ADLinearLayout_LayoutParams *)getLayoutParamsWithADView:(ADView *)view {
  return ASRadioGroupImpl_getLayoutParamsWithADView_(self, view);
}

- (void)setChildAttributeWithASIWidget:(id<ASIWidget>)w
                 withASWidgetAttribute:(ASWidgetAttribute *)key
                          withNSString:(NSString *)strValue
                                withId:(id)objValue {
  ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]);
  ADLinearLayout_LayoutParams *layoutParams = ASRadioGroupImpl_getLayoutParamsWithADView_(self, view);
  ASViewGroupImpl_setChildAttributeWithASIWidget_withASWidgetAttribute_withId_withId_(w, key, objValue, layoutParams);
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"layout_width", @"layout_height", @"layout_gravity", @"layout_weight" }, 4)) {
    case 0:
    ((ADLinearLayout_LayoutParams *) nil_chk(layoutParams))->width_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
    break;
    case 1:
    ((ADLinearLayout_LayoutParams *) nil_chk(layoutParams))->height_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
    break;
    case 2:
    {
      ((ADLinearLayout_LayoutParams *) nil_chk(layoutParams))->gravity_ = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class])))) intValue];
    }
    break;
    case 3:
    {
      ((ADLinearLayout_LayoutParams *) nil_chk(layoutParams))->weight_ = [((JavaLangFloat *) nil_chk(((JavaLangFloat *) cast_chk(objValue, [JavaLangFloat class])))) floatValue];
    }
    break;
    default:
    break;
  }
  [((ADView *) nil_chk(view)) setLayoutParamsWithADViewGroup_LayoutParams:layoutParams];
}

- (id)getChildAttributeWithASIWidget:(id<ASIWidget>)w
               withASWidgetAttribute:(ASWidgetAttribute *)key {
  id attributeValue = ASViewGroupImpl_getChildAttributeWithASIWidget_withASWidgetAttribute_(w, key);
  if (attributeValue != nil) {
    return attributeValue;
  }
  ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]);
  ADLinearLayout_LayoutParams *layoutParams = ASRadioGroupImpl_getLayoutParamsWithADView_(self, view);
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"layout_width", @"layout_height", @"layout_gravity", @"layout_weight" }, 4)) {
    case 0:
    return JavaLangInteger_valueOfWithInt_(((ADLinearLayout_LayoutParams *) nil_chk(layoutParams))->width_);
    case 1:
    return JavaLangInteger_valueOfWithInt_(((ADLinearLayout_LayoutParams *) nil_chk(layoutParams))->height_);
    case 2:
    {
      return JavaLangInteger_valueOfWithInt_(((ADLinearLayout_LayoutParams *) nil_chk(layoutParams))->gravity_);
    }
    case 3:
    {
      return JavaLangFloat_valueOfWithFloat_(((ADLinearLayout_LayoutParams *) nil_chk(layoutParams))->weight_);
    }
  }
  return nil;
}

- (IOSClass *)getViewClass {
  return ASRadioGroupImpl_RadioGroupExt_class_();
}

- (void)setAttributeWithASWidgetAttribute:(ASWidgetAttribute *)key
                             withNSString:(NSString *)strValue
                                   withId:(id)objValue
                withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  ASViewGroupImpl_setAttributeWithASIWidget_withASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(self, key, strValue, objValue, decorator);
  id nativeWidget = [self asNativeWidget];
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"baselineAligned", @"baselineAlignedChildIndex", @"divider", @"gravity", @"measureWithLargestChild", @"orientation", @"weightSum", @"onChildViewAdded", @"onChildViewRemoved", @"checkedButton", @"onCheckedChange", @"showDividers", @"dividerPadding" }, 13)) {
    case 0:
    {
      [((ADRadioGroup *) nil_chk(radioGroup_)) setBaselineAlignedWithBoolean:[((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]))) booleanValue]];
    }
    break;
    case 1:
    {
      [((ADRadioGroup *) nil_chk(radioGroup_)) setBaselineAlignedChildIndexWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
    }
    break;
    case 2:
    {
      {
        [((ADRadioGroup *) nil_chk(radioGroup_)) setDividerDrawableWithADDrawable:(ADDrawable *) cast_chk(objValue, [ADDrawable class])];
      }
    }
    break;
    case 3:
    {
      [((ADRadioGroup *) nil_chk(radioGroup_)) setGravityWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
    }
    break;
    case 4:
    {
      {
        [((ADRadioGroup *) nil_chk(radioGroup_)) setMeasureWithLargestChildEnabledWithBoolean:[((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]))) booleanValue]];
      }
    }
    break;
    case 5:
    {
      [((ADRadioGroup *) nil_chk(radioGroup_)) setOrientationWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
    }
    break;
    case 6:
    {
      [((ADRadioGroup *) nil_chk(radioGroup_)) setWeightSumWithFloat:[((JavaLangFloat *) nil_chk((JavaLangFloat *) cast_chk(objValue, [JavaLangFloat class]))) floatValue]];
    }
    break;
    case 7:
    {
      if ([objValue isKindOfClass:[NSString class]]) {
        [((ADRadioGroup *) nil_chk(radioGroup_)) setOnHierarchyChangeListenerWithADViewGroup_OnHierarchyChangeListener:new_ASRadioGroupImpl_OnHierarchyChangeListener_initWithASIWidget_withNSString_(self, strValue)];
      }
      else {
        ASRadioGroupImpl_setOnHierarchyChangeListenerWithADRadioGroup_withId_(self, radioGroup_, objValue);
      }
    }
    break;
    case 8:
    {
      if ([objValue isKindOfClass:[NSString class]]) {
        [((ADRadioGroup *) nil_chk(radioGroup_)) setOnHierarchyChangeListenerWithADViewGroup_OnHierarchyChangeListener:new_ASRadioGroupImpl_OnHierarchyChangeListener_initWithASIWidget_withNSString_(self, strValue)];
      }
      else {
        ASRadioGroupImpl_setOnHierarchyChangeListenerWithADRadioGroup_withId_(self, radioGroup_, objValue);
      }
    }
    break;
    case 9:
    {
      ASRadioGroupImpl_setCheckedWithId_(self, objValue);
    }
    break;
    case 10:
    {
      ASRadioGroupImpl_setOnCheckedChangeWithId_(self, objValue);
    }
    break;
    case 11:
    {
      ASRadioGroupImpl_setShowDividersWithId_(self, objValue);
    }
    break;
    case 12:
    {
      ASRadioGroupImpl_setDividerPaddingWithId_(self, objValue);
    }
    break;
    default:
    break;
  }
}

- (id)getAttributeWithASWidgetAttribute:(ASWidgetAttribute *)key
              withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  id attributeValue = ASViewGroupImpl_getAttributeWithASIWidget_withASWidgetAttribute_withASILifeCycleDecorator_(self, key, decorator);
  if (attributeValue != nil) {
    return attributeValue;
  }
  id nativeWidget = [self asNativeWidget];
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"baselineAligned", @"baselineAlignedChildIndex", @"divider", @"gravity", @"measureWithLargestChild", @"orientation", @"weightSum", @"checkedButton", @"showDividers", @"dividerPadding" }, 10)) {
    case 0:
    {
      return JavaLangBoolean_valueOfWithBoolean_([((ADRadioGroup *) nil_chk(radioGroup_)) isBaselineAligned]);
    }
    case 1:
    {
      return JavaLangInteger_valueOfWithInt_([((ADRadioGroup *) nil_chk(radioGroup_)) getBaselineAlignedChildIndex]);
    }
    case 2:
    {
      {
        return [((ADRadioGroup *) nil_chk(radioGroup_)) getDividerDrawable];
      }
    }
    case 3:
    {
      {
        return JavaLangInteger_valueOfWithInt_([((ADRadioGroup *) nil_chk(radioGroup_)) getGravity]);
      }
    }
    case 4:
    {
      {
        return JavaLangBoolean_valueOfWithBoolean_([((ADRadioGroup *) nil_chk(radioGroup_)) isMeasureWithLargestChildEnabled]);
      }
    }
    case 5:
    {
      return JavaLangInteger_valueOfWithInt_([((ADRadioGroup *) nil_chk(radioGroup_)) getOrientation]);
    }
    case 6:
    {
      return JavaLangFloat_valueOfWithFloat_([((ADRadioGroup *) nil_chk(radioGroup_)) getWeightSum]);
    }
    case 7:
    {
      return ASRadioGroupImpl_getChecked(self);
    }
    case 8:
    {
      return ASRadioGroupImpl_getShowDividers(self);
    }
    case 9:
    {
      return ASRadioGroupImpl_getDividerPadding(self);
    }
  }
  return nil;
}

- (id)asNativeWidget {
  return uiView_;
}

- (bool)checkIosVersionWithNSString:(NSString *)v {
  return ([[[UIDevice currentDevice] systemVersion] compare:v options:NSNumericSearch] == NSOrderedDescending);
}

- (void)nativeCreateWithJavaUtilMap:(id<JavaUtilMap>)params {
  ASUIView* uiView = [ASUIView new];
  uiView.backgroundColor = [UIColor clearColor];
  uiView_ = uiView;
}

- (void)requestLayout {
  if ([self isInitialised]) {
    ASViewImpl_requestLayoutWithASIWidget_withId_(self, [self asNativeWidget]);
  }
}

- (void)invalidate {
  if ([self isInitialised]) {
    ASViewImpl_invalidateWithASIWidget_withId_(self, [self asNativeWidget]);
  }
}

- (void)createCanvas {
  ASRadioGroupImpl_createCanvas(self);
}

- (void)setDividerPaddingWithId:(id)objValue {
  ASRadioGroupImpl_setDividerPaddingWithId_(self, objValue);
}

- (void)setShowDividersWithId:(id)objValue {
  ASRadioGroupImpl_setShowDividersWithId_(self, objValue);
}

- (id)getDividerPadding {
  return ASRadioGroupImpl_getDividerPadding(self);
}

- (id)getShowDividers {
  return ASRadioGroupImpl_getShowDividers(self);
}

- (void)setCheckedWithId:(id)objValue {
  ASRadioGroupImpl_setCheckedWithId_(self, objValue);
}

- (id)getChecked {
  return ASRadioGroupImpl_getChecked(self);
}

- (void)initialized {
  [super initialized];
  for (id<ASIWidget> __strong widget in nil_chk([self getWidgets])) {
    if ([ASIsRadioButton_class_() isInstance:widget]) {
      id<ASIsRadioButton> radioButton = (id<ASIsRadioButton>) cast_check(widget, ASIsRadioButton_class_());
      ASRadioGroupImpl_setupRadioGroupToggleWithASIsRadioButton_(self, radioButton);
    }
  }
  if (checked_ != nil) {
    ASRadioGroupImpl_setCheckedWithId_(self, checked_);
  }
}

- (void)toggleSelectionWithASIsRadioButton:(id<ASIsRadioButton>)selectedRadioButton {
  ASRadioGroupImpl_toggleSelectionWithASIsRadioButton_(self, selectedRadioButton);
}

- (void)setOnCheckedChangeWithId:(id)objValue {
  ASRadioGroupImpl_setOnCheckedChangeWithId_(self, objValue);
}

- (void)handleRadioButtonChangeWithASIsRadioButton:(id<ASIsRadioButton>)radioButton {
  ASRadioGroupImpl_handleRadioButtonChangeWithASIsRadioButton_(self, radioButton);
}

- (void)resetError {
  int32_t validationErrorDisplayType = [self getValidationErrorDisplayType];
  if ((validationErrorDisplayType & ASFormElement_ERROR_DISPLAY_TYPE_POPUP) != 0) {
    ASRadioGroupImpl_setErrorWithId_(self, nil);
  }
  if ((validationErrorDisplayType & ASFormElement_ERROR_DISPLAY_TYPE_LABEL) != 0) {
    ASViewImpl_setMessageOnLabelWithASIWidget_withNSString_(self, @"");
  }
  if ((validationErrorDisplayType & ASFormElement_ERROR_DISPLAY_TYPE_STYLE) != 0) {
    ASViewImpl_setStyleWithASIWidget_withId_(self, [self getNormalStyle]);
  }
}

- (void)showErrorWithNSString:(NSString *)message {
  int32_t validationErrorDisplayType = [self getValidationErrorDisplayType];
  if ((validationErrorDisplayType & ASFormElement_ERROR_DISPLAY_TYPE_POPUP) != 0) {
    ASRadioGroupImpl_setErrorWithId_(self, message);
  }
  if ((validationErrorDisplayType & ASFormElement_ERROR_DISPLAY_TYPE_LABEL) != 0) {
    ASViewImpl_setMessageOnLabelWithASIWidget_withNSString_(self, message);
  }
  if ((validationErrorDisplayType & ASFormElement_ERROR_DISPLAY_TYPE_STYLE) != 0) {
    ASViewImpl_setStyleWithASIWidget_withId_(self, [self getErrorStyle]);
  }
}

- (void)setIdWithNSString:(NSString *)id_ {
  if (id_ != nil && ![id_ isEqual:@""]) {
    [super setIdWithNSString:id_];
    [((ADRadioGroup *) nil_chk(radioGroup_)) setIdWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([self quickConvertWithId:id_ withNSString:@"id"], [JavaLangInteger class]))) intValue]];
  }
}

- (void)setVisibleWithBoolean:(bool)b {
  [((ADView *) nil_chk(((ADView *) cast_chk([self asWidget], [ADView class])))) setVisibilityWithInt:b ? ADView_VISIBLE : ADView_GONE];
}

- (void)setupRadioGroupToggleWithASIsRadioButton:(id<ASIsRadioButton>)radioButton {
  ASRadioGroupImpl_setupRadioGroupToggleWithASIsRadioButton_(self, radioButton);
}

- (void)setErrorWithId:(id)object {
  ASRadioGroupImpl_setErrorWithId_(self, object);
}

- (NSString *)getTextEntered {
  return ASRadioGroupImpl_getChecked(self) != nil ? @"checked" : @"";
}

- (bool)isViewVisible {
  return [((ADRadioGroup *) nil_chk(radioGroup_)) getVisibility] == ADView_VISIBLE;
}

- (void)focus {
}

- (void)setOnHierarchyChangeListenerWithADRadioGroup:(ADRadioGroup *)radioGroup
                                              withId:(id)objValue {
  ASRadioGroupImpl_setOnHierarchyChangeListenerWithADRadioGroup_withId_(self, radioGroup, objValue);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "LASIWidget;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, 5, -1, -1 },
    { NULL, "V", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 6, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 9, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 12, 13, -1, -1, -1, -1 },
    { NULL, "LADLinearLayout_LayoutParams;", 0x2, 14, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 16, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 17, 18, -1, -1, -1, -1 },
    { NULL, "LIOSClass;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 20, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 21, 22, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x101, 23, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 24, 25, -1, 26, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 27, 28, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 29, 28, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 30, 28, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 31, 32, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 33, 28, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 34, 32, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 35, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 36, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 37, 38, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 39, 32, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 40, 28, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 41, 42, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(loadAttributesWithNSString:);
  methods[1].selector = @selector(init);
  methods[2].selector = @selector(initWithNSString:);
  methods[3].selector = @selector(initWithNSString:withNSString:);
  methods[4].selector = @selector(newInstance);
  methods[5].selector = @selector(createWithASIFragment:withJavaUtilMap:);
  methods[6].selector = @selector(setWidgetOnNativeClass);
  methods[7].selector = @selector(asWidget);
  methods[8].selector = @selector(removeWithASIWidget:);
  methods[9].selector = @selector(removeWithInt:);
  methods[10].selector = @selector(nativeRemoveViewWithASIWidget:);
  methods[11].selector = @selector(addWithASIWidget:withInt:);
  methods[12].selector = @selector(createLayoutParamsWithADView:);
  methods[13].selector = @selector(getLayoutParamsWithADView:);
  methods[14].selector = @selector(setChildAttributeWithASIWidget:withASWidgetAttribute:withNSString:withId:);
  methods[15].selector = @selector(getChildAttributeWithASIWidget:withASWidgetAttribute:);
  methods[16].selector = @selector(getViewClass);
  methods[17].selector = @selector(setAttributeWithASWidgetAttribute:withNSString:withId:withASILifeCycleDecorator:);
  methods[18].selector = @selector(getAttributeWithASWidgetAttribute:withASILifeCycleDecorator:);
  methods[19].selector = @selector(asNativeWidget);
  methods[20].selector = @selector(checkIosVersionWithNSString:);
  methods[21].selector = @selector(nativeCreateWithJavaUtilMap:);
  methods[22].selector = @selector(requestLayout);
  methods[23].selector = @selector(invalidate);
  methods[24].selector = @selector(createCanvas);
  methods[25].selector = @selector(setDividerPaddingWithId:);
  methods[26].selector = @selector(setShowDividersWithId:);
  methods[27].selector = @selector(getDividerPadding);
  methods[28].selector = @selector(getShowDividers);
  methods[29].selector = @selector(setCheckedWithId:);
  methods[30].selector = @selector(getChecked);
  methods[31].selector = @selector(initialized);
  methods[32].selector = @selector(toggleSelectionWithASIsRadioButton:);
  methods[33].selector = @selector(setOnCheckedChangeWithId:);
  methods[34].selector = @selector(handleRadioButtonChangeWithASIsRadioButton:);
  methods[35].selector = @selector(resetError);
  methods[36].selector = @selector(showErrorWithNSString:);
  methods[37].selector = @selector(setIdWithNSString:);
  methods[38].selector = @selector(setVisibleWithBoolean:);
  methods[39].selector = @selector(setupRadioGroupToggleWithASIsRadioButton:);
  methods[40].selector = @selector(setErrorWithId:);
  methods[41].selector = @selector(getTextEntered);
  methods[42].selector = @selector(isViewVisible);
  methods[43].selector = @selector(focus);
  methods[44].selector = @selector(setOnHierarchyChangeListenerWithADRadioGroup:withId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "uiView_", "LNSObject;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "canvas_", "LADCanvas;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "LOCAL_NAME", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 43, -1, -1 },
    { "GROUP_NAME", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 44, -1, -1 },
    { "radioGroup_", "LADRadioGroup;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "checked_", "LJavaLangInteger;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "onCheckedChangeListener_", "LADRadioGroup_OnCheckedChangeListener;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "loadAttributes", "LNSString;", "LNSString;LNSString;", "create", "LASIFragment;LJavaUtilMap;", "(Lcom/ashera/core/IFragment;Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;)V", "remove", "LASIWidget;", "I", "nativeRemoveView", "add", "LASIWidget;I", "createLayoutParams", "LADView;", "getLayoutParams", "setChildAttribute", "LASIWidget;LASWidgetAttribute;LNSString;LNSObject;", "getChildAttribute", "LASIWidget;LASWidgetAttribute;", "setAttribute", "LASWidgetAttribute;LNSString;LNSObject;LASILifeCycleDecorator;", "getAttribute", "LASWidgetAttribute;LASILifeCycleDecorator;", "checkIosVersion", "nativeCreate", "LJavaUtilMap;", "(Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;)V", "setDividerPadding", "LNSObject;", "setShowDividers", "setChecked", "toggleSelection", "LASIsRadioButton;", "setOnCheckedChange", "handleRadioButtonChange", "showError", "setId", "setVisible", "Z", "setupRadioGroupToggle", "setError", "setOnHierarchyChangeListener", "LADRadioGroup;LNSObject;", &ASRadioGroupImpl_LOCAL_NAME, &ASRadioGroupImpl_GROUP_NAME, "LASRadioGroupImpl_Orientation;LASRadioGroupImpl_Divider;LASRadioGroupImpl_RadioGroupExt;LASRadioGroupImpl_CanvasImpl;LASRadioGroupImpl_OnHierarchyChangeListener;LASRadioGroupImpl_OnCheckedChangeListener;LASRadioGroupImpl_RadioGroupSelectionListener;" };
  static const J2ObjcClassInfo _ASRadioGroupImpl = { "RadioGroupImpl", "com.ashera.layout", ptrTable, methods, fields, 7, 0x1, 45, 7, -1, 45, -1, -1, -1 };
  return &_ASRadioGroupImpl;
}

@end

void ASRadioGroupImpl_init(ASRadioGroupImpl *self) {
  ASBaseHasWidgets_initWithNSString_withNSString_(self, ASRadioGroupImpl_GROUP_NAME, ASRadioGroupImpl_LOCAL_NAME);
}

ASRadioGroupImpl *new_ASRadioGroupImpl_init() {
  J2OBJC_NEW_IMPL(ASRadioGroupImpl, init)
}

ASRadioGroupImpl *create_ASRadioGroupImpl_init() {
  J2OBJC_CREATE_IMPL(ASRadioGroupImpl, init)
}

void ASRadioGroupImpl_initWithNSString_(ASRadioGroupImpl *self, NSString *localname) {
  ASBaseHasWidgets_initWithNSString_withNSString_(self, ASRadioGroupImpl_GROUP_NAME, localname);
}

ASRadioGroupImpl *new_ASRadioGroupImpl_initWithNSString_(NSString *localname) {
  J2OBJC_NEW_IMPL(ASRadioGroupImpl, initWithNSString_, localname)
}

ASRadioGroupImpl *create_ASRadioGroupImpl_initWithNSString_(NSString *localname) {
  J2OBJC_CREATE_IMPL(ASRadioGroupImpl, initWithNSString_, localname)
}

void ASRadioGroupImpl_initWithNSString_withNSString_(ASRadioGroupImpl *self, NSString *groupName, NSString *localname) {
  ASBaseHasWidgets_initWithNSString_withNSString_(self, groupName, localname);
}

ASRadioGroupImpl *new_ASRadioGroupImpl_initWithNSString_withNSString_(NSString *groupName, NSString *localname) {
  J2OBJC_NEW_IMPL(ASRadioGroupImpl, initWithNSString_withNSString_, groupName, localname)
}

ASRadioGroupImpl *create_ASRadioGroupImpl_initWithNSString_withNSString_(NSString *groupName, NSString *localname) {
  J2OBJC_CREATE_IMPL(ASRadioGroupImpl, initWithNSString_withNSString_, groupName, localname)
}

void ASRadioGroupImpl_setWidgetOnNativeClass(ASRadioGroupImpl *self) {
  ((ASUIView*) [self asNativeWidget]).widget = self;
}

void ASRadioGroupImpl_nativeRemoveViewWithASIWidget_(ASRadioGroupImpl *self, id<ASIWidget> widget) {
  ADLayoutTransition *layoutTransition = [((ADRadioGroup *) nil_chk(self->radioGroup_)) getLayoutTransition];
  if (layoutTransition != nil && ([layoutTransition isTransitionTypeEnabledWithInt:ADLayoutTransition_CHANGE_DISAPPEARING] || [layoutTransition isTransitionTypeEnabledWithInt:ADLayoutTransition_DISAPPEARING])) {
    [self addToBufferedRunnablesWithJavaLangRunnable:new_ASRadioGroupImpl_$Lambda$1_initWithASIWidget_(widget)];
  }
  else {
    ASViewGroupImpl_nativeRemoveViewWithASIWidget_(widget);
  }
}

void ASRadioGroupImpl_createLayoutParamsWithADView_(ASRadioGroupImpl *self, ADView *view) {
  ADLinearLayout_LayoutParams *layoutParams = (ADLinearLayout_LayoutParams *) cast_chk([((ADView *) nil_chk(view)) getLayoutParams], [ADLinearLayout_LayoutParams class]);
  layoutParams = (ADLinearLayout_LayoutParams *) cast_chk([view getLayoutParams], [ADLinearLayout_LayoutParams class]);
  if (layoutParams == nil) {
    layoutParams = new_ADLinearLayout_LayoutParams_initWithInt_withInt_(-2, -2);
    [view setLayoutParamsWithADViewGroup_LayoutParams:layoutParams];
  }
  else {
    layoutParams->height_ = -2;
    layoutParams->width_ = -2;
  }
}

ADLinearLayout_LayoutParams *ASRadioGroupImpl_getLayoutParamsWithADView_(ASRadioGroupImpl *self, ADView *view) {
  return (ADLinearLayout_LayoutParams *) cast_chk([((ADView *) nil_chk(view)) getLayoutParams], [ADLinearLayout_LayoutParams class]);
}

void ASRadioGroupImpl_createCanvas(ASRadioGroupImpl *self) {
  self->canvas_ = new_ASRadioGroupImpl_CanvasImpl_initWithASIWidget_(self);
}

void ASRadioGroupImpl_setDividerPaddingWithId_(ASRadioGroupImpl *self, id objValue) {
  {
    [((ADRadioGroup *) nil_chk(self->radioGroup_)) setDividerPaddingWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
  }
}

void ASRadioGroupImpl_setShowDividersWithId_(ASRadioGroupImpl *self, id objValue) {
  {
    [((ADRadioGroup *) nil_chk(self->radioGroup_)) setShowDividersWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
  }
}

id ASRadioGroupImpl_getDividerPadding(ASRadioGroupImpl *self) {
  {
    return JavaLangInteger_valueOfWithInt_([((ADRadioGroup *) nil_chk(self->radioGroup_)) getDividerPadding]);
  }
}

id ASRadioGroupImpl_getShowDividers(ASRadioGroupImpl *self) {
  {
    return JavaLangInteger_valueOfWithInt_([((ADRadioGroup *) nil_chk(self->radioGroup_)) getShowDividers]);
  }
}

void ASRadioGroupImpl_setCheckedWithId_(ASRadioGroupImpl *self, id objValue) {
  self->checked_ = (JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]);
  if ([self isInitialised]) {
    for (id<ASIWidget> __strong widget in nil_chk([self getWidgets])) {
      NSString *id_ = [((id<ASIWidget>) nil_chk(widget)) getId];
      if (id_ != nil) {
        int32_t idInt = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([self quickConvertWithId:id_ withNSString:@"id"], [JavaLangInteger class]))) intValue];
        if ([ASIsRadioButton_class_() isInstance:widget]) {
          [((id<ASIsRadioButton>) cast_check(widget, ASIsRadioButton_class_())) setCheckedWithBoolean:idInt == [((JavaLangInteger *) nil_chk(self->checked_)) intValue]];
        }
      }
    }
  }
}

id ASRadioGroupImpl_getChecked(ASRadioGroupImpl *self) {
  for (id<ASIWidget> __strong widget in nil_chk([self getWidgets])) {
    NSString *id_ = [((id<ASIWidget>) nil_chk(widget)) getId];
    if (id_ != nil) {
      if ([ASIsRadioButton_class_() isInstance:widget]) {
        id<ASIsRadioButton> impl = (id<ASIsRadioButton>) cast_check(widget, ASIsRadioButton_class_());
        if ([impl isChecked]) {
          int32_t idInt = [widget getIdAsInt];
          return JavaLangInteger_valueOfWithInt_(idInt);
        }
      }
    }
  }
  return nil;
}

void ASRadioGroupImpl_toggleSelectionWithASIsRadioButton_(ASRadioGroupImpl *self, id<ASIsRadioButton> selectedRadioButton) {
  for (id<ASIWidget> __strong widget in nil_chk([self getWidgets])) {
    if ([ASIsRadioButton_class_() isInstance:widget]) {
      id<ASIsRadioButton> radioButton = (id<ASIsRadioButton>) cast_check(widget, ASIsRadioButton_class_());
      if (!JreObjectEqualsEquals(radioButton, selectedRadioButton)) {
        [((id<ASIsRadioButton>) nil_chk(radioButton)) setCheckedWithBoolean:false];
      }
      else {
        if (![((id<ASIsRadioButton>) nil_chk(radioButton)) isChecked]) {
          [radioButton setCheckedWithBoolean:true];
        }
      }
    }
  }
}

void ASRadioGroupImpl_setOnCheckedChangeWithId_(ASRadioGroupImpl *self, id objValue) {
  if ([objValue isKindOfClass:[NSString class]]) {
    self->onCheckedChangeListener_ = new_ASRadioGroupImpl_OnCheckedChangeListener_initWithASIWidget_withNSString_(self, (NSString *) objValue);
  }
  else {
    self->onCheckedChangeListener_ = (id<ADRadioGroup_OnCheckedChangeListener>) cast_check(objValue, ADRadioGroup_OnCheckedChangeListener_class_());
  }
}

void ASRadioGroupImpl_handleRadioButtonChangeWithASIsRadioButton_(ASRadioGroupImpl *self, id<ASIsRadioButton> radioButton) {
  ASRadioGroupImpl_toggleSelectionWithASIsRadioButton_(self, radioButton);
  if (self->onCheckedChangeListener_ != nil) {
    id checkedId = ASRadioGroupImpl_getChecked(self);
    [((id<ADRadioGroup_OnCheckedChangeListener>) nil_chk(self->onCheckedChangeListener_)) onCheckedChangedWithADRadioGroup:self->radioGroup_ withInt:checkedId == nil ? 0 : [(JavaLangInteger *) cast_chk(checkedId, [JavaLangInteger class]) intValue]];
  }
}

void ASRadioGroupImpl_setupRadioGroupToggleWithASIsRadioButton_(ASRadioGroupImpl *self, id<ASIsRadioButton> radioButton) {
  [((id<ASIsRadioButton>) nil_chk(radioButton)) addCheckedListenerWithId:new_ASRadioGroupImpl_RadioGroupSelectionListener_initWithASRadioGroupImpl_withASIsRadioButton_(self, radioButton) withNSString:@""];
}

void ASRadioGroupImpl_setErrorWithId_(ASRadioGroupImpl *self, id object) {
}

void ASRadioGroupImpl_setOnHierarchyChangeListenerWithADRadioGroup_withId_(ASRadioGroupImpl *self, ADRadioGroup *radioGroup, id objValue) {
  [((ADRadioGroup *) nil_chk(radioGroup)) setOnHierarchyChangeListenerWithADViewGroup_OnHierarchyChangeListener:(id<ADViewGroup_OnHierarchyChangeListener>) cast_check(objValue, ADViewGroup_OnHierarchyChangeListener_class_())];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASRadioGroupImpl)

J2OBJC_NAME_MAPPING(ASRadioGroupImpl, "com.ashera.layout", "AS")

@implementation ASRadioGroupImpl_Orientation

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASRadioGroupImpl_Orientation_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilMap>)getMapping {
  return mapping_;
}

- (JavaLangInteger *)getDefault {
  return JavaLangInteger_valueOfWithInt_(0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMapping);
  methods[2].selector = @selector(getDefault);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapping_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "LASRadioGroupImpl;" };
  static const J2ObjcClassInfo _ASRadioGroupImpl_Orientation = { "Orientation", "com.ashera.layout", ptrTable, methods, fields, 7, 0x18, 3, 1, 2, -1, -1, -1, -1 };
  return &_ASRadioGroupImpl_Orientation;
}

@end

void ASRadioGroupImpl_Orientation_init(ASRadioGroupImpl_Orientation *self) {
  ASAbstractEnumToIntConverter_init(self);
  self->mapping_ = new_JavaUtilHashMap_init();
  {
    (void) [self->mapping_ putWithId:@"horizontal" withId:JavaLangInteger_valueOfWithInt_((int32_t) 0x0)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"vertical" withId:JavaLangInteger_valueOfWithInt_((int32_t) 0x1)];
  }
}

ASRadioGroupImpl_Orientation *new_ASRadioGroupImpl_Orientation_init() {
  J2OBJC_NEW_IMPL(ASRadioGroupImpl_Orientation, init)
}

ASRadioGroupImpl_Orientation *create_ASRadioGroupImpl_Orientation_init() {
  J2OBJC_CREATE_IMPL(ASRadioGroupImpl_Orientation, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASRadioGroupImpl_Orientation)

@implementation ASRadioGroupImpl_Divider

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASRadioGroupImpl_Divider_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilMap>)getMapping {
  return mapping_;
}

- (JavaLangInteger *)getDefault {
  return JavaLangInteger_valueOfWithInt_(0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMapping);
  methods[2].selector = @selector(getDefault);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapping_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "LASRadioGroupImpl;" };
  static const J2ObjcClassInfo _ASRadioGroupImpl_Divider = { "Divider", "com.ashera.layout", ptrTable, methods, fields, 7, 0x18, 3, 1, 2, -1, -1, -1, -1 };
  return &_ASRadioGroupImpl_Divider;
}

@end

void ASRadioGroupImpl_Divider_init(ASRadioGroupImpl_Divider *self) {
  ASAbstractBitFlagConverter_init(self);
  self->mapping_ = new_JavaUtilHashMap_init();
  {
    (void) [self->mapping_ putWithId:@"none" withId:JavaLangInteger_valueOfWithInt_((int32_t) 0x0)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"beginning" withId:JavaLangInteger_valueOfWithInt_((int32_t) 0x1)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"end" withId:JavaLangInteger_valueOfWithInt_((int32_t) 0x4)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"middle" withId:JavaLangInteger_valueOfWithInt_((int32_t) 0x2)];
  }
}

ASRadioGroupImpl_Divider *new_ASRadioGroupImpl_Divider_init() {
  J2OBJC_NEW_IMPL(ASRadioGroupImpl_Divider, init)
}

ASRadioGroupImpl_Divider *create_ASRadioGroupImpl_Divider_init() {
  J2OBJC_CREATE_IMPL(ASRadioGroupImpl_Divider, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASRadioGroupImpl_Divider)

@implementation ASRadioGroupImpl_RadioGroupExt

- (id<ASIWidget>)getWidget {
  return this$0_;
}

- (void)setMaxWidthWithInt:(int32_t)width {
  mMaxWidth_ = width;
}

- (void)setMaxHeightWithInt:(int32_t)height {
  mMaxHeight_ = height;
}

- (int32_t)getMaxWidth {
  return mMaxWidth_;
}

- (int32_t)getMaxHeight {
  return mMaxHeight_;
}

- (instancetype)initWithASRadioGroupImpl:(ASRadioGroupImpl *)outer$ {
  ASRadioGroupImpl_RadioGroupExt_initWithASRadioGroupImpl_(self, outer$);
  return self;
}

- (void)onMeasureWithInt:(int32_t)widthMeasureSpec
                 withInt:(int32_t)heightMeasureSpec {
  if (mMaxWidth_ > 0) {
    widthMeasureSpec = ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_(mMaxWidth_, ADView_MeasureSpec_AT_MOST);
  }
  if (mMaxHeight_ > 0) {
    heightMeasureSpec = ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_(mMaxHeight_, ADView_MeasureSpec_AT_MOST);
  }
  [super onMeasureWithInt:widthMeasureSpec withInt:heightMeasureSpec];
  id<ASIWidgetLifeCycleListener> listener = [this$0_ getListener];
  if (listener != nil) {
    [((ASMeasureEvent *) nil_chk(measureFinished_)) setWidthWithInt:[self getMeasuredWidth]];
    [((ASMeasureEvent *) nil_chk(measureFinished_)) setHeightWithInt:[self getMeasuredHeight]];
    [listener eventOccurredWithASIWidgetLifeCycleListener_EventId:JreLoadEnum(ASIWidgetLifeCycleListener_EventId, measureFinished) withASWidgetEvent:measureFinished_];
  }
}

- (void)onLayoutWithBoolean:(bool)changed
                    withInt:(int32_t)l
                    withInt:(int32_t)t
                    withInt:(int32_t)r
                    withInt:(int32_t)b {
  [super onLayoutWithBoolean:changed withInt:l withInt:t withInt:r withInt:b];
  ASViewImpl_setDrawableBoundsWithASIWidget_withInt_withInt_withInt_withInt_(this$0_, l, t, r, b);
  if (![self isOverlay]) {
    ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_([this$0_ asNativeWidget], l, t, r, b);
  }
  [this$0_ replayBufferedEvents];
  [((id<ADCanvas>) nil_chk(this$0_->canvas_)) reset];
  [self onDrawWithADCanvas:this$0_->canvas_];
  ASViewImpl_redrawDrawablesWithASIWidget_(this$0_);
  overlays_ = ASViewImpl_drawOverlayWithASIWidget_withJavaUtilList_(this$0_, overlays_);
  id<ASIWidgetLifeCycleListener> listener = [this$0_ getListener];
  if (listener != nil) {
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setBWithInt:b];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setLWithInt:l];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setRWithInt:r];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setTWithInt:t];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setChangedWithBoolean:changed];
    [listener eventOccurredWithASIWidgetLifeCycleListener_EventId:JreLoadEnum(ASIWidgetLifeCycleListener_EventId, onLayout) withASWidgetEvent:onLayoutEvent_];
  }
  if ([this$0_ isInvalidateOnFrameChange] && [this$0_ isInitialised]) {
    [this$0_ invalidate];
  }
}

- (void)executeWithNSString:(NSString *)method
          withNSObjectArray:(IOSObjectArray *)canvas {
}

- (void)updateMeasuredDimensionWithInt:(int32_t)width
                               withInt:(int32_t)height {
  [self setMeasuredDimensionWithInt:width withInt:height];
}

- (id<ASILifeCycleDecorator>)newInstanceWithASIWidget:(id<ASIWidget>)widget {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)setAttributeWithASWidgetAttribute:(ASWidgetAttribute *)widgetAttribute
                             withNSString:(NSString *)strValue
                                   withId:(id)objValue {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (id<JavaUtilList>)getMethods {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)initialized {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (id)getAttributeWithASWidgetAttribute:(ASWidgetAttribute *)widgetAttribute {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)drawableStateChanged {
  [super drawableStateChanged];
  if (![this$0_ isWidgetDisposed]) {
    ASViewImpl_drawableStateChangedWithASIWidget_(this$0_);
  }
}

- (ADView *)inflateViewWithNSString:(NSString *)layout {
  if (templates_ == nil) {
    templates_ = new_JavaUtilHashMap_init();
  }
  id<ASIWidget> template_ = [templates_ getWithId:layout];
  if (template_ == nil) {
    template_ = (id<ASIWidget>) cast_check([this$0_ quickConvertWithId:layout withNSString:@"template"], ASIWidget_class_());
    (void) [((id<JavaUtilMap>) nil_chk(templates_)) putWithId:layout withId:template_];
  }
  id<ASIWidget> widget = [((id<ASIWidget>) nil_chk(template_)) loadLazyWidgetsWithASHasWidgets:this$0_];
  return (ADView *) cast_chk([((id<ASIWidget>) nil_chk(widget)) asWidget], [ADView class]);
}

- (void)remeasure {
  if ([this$0_ getFragment] != nil) {
    [((id<ASIFragment>) nil_chk([this$0_ getFragment])) remeasure];
  }
}

- (void)removeFromParent {
  [((id<ASHasWidgets>) nil_chk([this$0_ getParent])) removeWithASIWidget:this$0_];
}

- (void)getLocationOnScreenWithIntArray:(IOSIntArray *)appScreenLocation {
  *IOSIntArray_GetRef(nil_chk(appScreenLocation), 0) = ASViewImpl_getLocationXOnScreenWithId_([this$0_ asNativeWidget]);
  *IOSIntArray_GetRef(appScreenLocation, 1) = ASViewImpl_getLocationYOnScreenWithId_([this$0_ asNativeWidget]);
}

- (void)getWindowVisibleDisplayFrameWithADRect:(ADRect *)displayFrame {
  ((ADRect *) nil_chk(displayFrame))->left_ = ASViewImpl_getLocationXOnScreenWithId_([this$0_ asNativeWidget]);
  displayFrame->top_ = ASViewImpl_getLocationYOnScreenWithId_([this$0_ asNativeWidget]);
  displayFrame->right_ = displayFrame->left_ + [self getWidth];
  displayFrame->bottom_ = displayFrame->top_ + [self getHeight];
}

- (void)offsetTopAndBottomWithInt:(int32_t)offset {
  [super offsetTopAndBottomWithInt:offset];
  ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_([this$0_ asNativeWidget], [self getLeft], [self getTop], [self getRight], [self getBottom]);
}

- (void)offsetLeftAndRightWithInt:(int32_t)offset {
  [super offsetLeftAndRightWithInt:offset];
  ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_([this$0_ asNativeWidget], [self getLeft], [self getTop], [self getRight], [self getBottom]);
}

- (void)setMyAttributeWithNSString:(NSString *)name
                            withId:(id)value {
  if ([((NSString *) nil_chk(name)) isEqual:@"state0"]) {
    [self setState0WithId:value];
    return;
  }
  if ([name isEqual:@"state1"]) {
    [self setState1WithId:value];
    return;
  }
  if ([name isEqual:@"state2"]) {
    [self setState2WithId:value];
    return;
  }
  if ([name isEqual:@"state3"]) {
    [self setState3WithId:value];
    return;
  }
  if ([name isEqual:@"state4"]) {
    [self setState4WithId:value];
    return;
  }
  [this$0_ setAttributeWithNSString:name withId:value withBoolean:!([value isKindOfClass:[NSString class]])];
}

- (void)setVisibilityWithInt:(int32_t)visibility {
  [super setVisibilityWithInt:visibility];
  ASViewImpl_nativeSetVisibilityWithId_withBoolean_([this$0_ asNativeWidget], visibility != ADView_VISIBLE);
}

- (void)setState0WithId:(id)value {
  ASViewImpl_setStateWithASIWidget_withInt_withId_(this$0_, 0, value);
}

- (void)setState1WithId:(id)value {
  ASViewImpl_setStateWithASIWidget_withInt_withId_(this$0_, 1, value);
}

- (void)setState2WithId:(id)value {
  ASViewImpl_setStateWithASIWidget_withInt_withId_(this$0_, 2, value);
}

- (void)setState3WithId:(id)value {
  ASViewImpl_setStateWithASIWidget_withInt_withId_(this$0_, 3, value);
}

- (void)setState4WithId:(id)value {
  ASViewImpl_setStateWithASIWidget_withInt_withId_(this$0_, 4, value);
}

- (void)state0 {
  ASViewImpl_stateWithASIWidget_withInt_(this$0_, 0);
}

- (void)state1 {
  ASViewImpl_stateWithASIWidget_withInt_(this$0_, 1);
}

- (void)state2 {
  ASViewImpl_stateWithASIWidget_withInt_(this$0_, 2);
}

- (void)state3 {
  ASViewImpl_stateWithASIWidget_withInt_(this$0_, 3);
}

- (void)state4 {
  ASViewImpl_stateWithASIWidget_withInt_(this$0_, 4);
}

- (void)stateYes {
  ASViewImpl_stateYesWithASIWidget_(this$0_);
}

- (void)stateNo {
  ASViewImpl_stateNoWithASIWidget_(this$0_);
}

- (void)endViewTransitionWithADView:(ADView *)view {
  [super endViewTransitionWithADView:view];
  [this$0_ runBufferedRunnables];
}

- (void)__javaClone:(ASRadioGroupImpl_RadioGroupExt *)original {
  [super __javaClone:original];
  JreRelease(this$0_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LASIWidget;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x81, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 5, -1, -1, -1, -1 },
    { NULL, "LASILifeCycleDecorator;", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 15, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 16, 17, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADView;", 0x1, 18, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 21, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 22, 23, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 24, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 25, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 26, 27, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 28, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 29, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 31, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 32, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 33, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 34, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 35, 36, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getWidget);
  methods[1].selector = @selector(setMaxWidthWithInt:);
  methods[2].selector = @selector(setMaxHeightWithInt:);
  methods[3].selector = @selector(getMaxWidth);
  methods[4].selector = @selector(getMaxHeight);
  methods[5].selector = @selector(initWithASRadioGroupImpl:);
  methods[6].selector = @selector(onMeasureWithInt:withInt:);
  methods[7].selector = @selector(onLayoutWithBoolean:withInt:withInt:withInt:withInt:);
  methods[8].selector = @selector(executeWithNSString:withNSObjectArray:);
  methods[9].selector = @selector(updateMeasuredDimensionWithInt:withInt:);
  methods[10].selector = @selector(newInstanceWithASIWidget:);
  methods[11].selector = @selector(setAttributeWithASWidgetAttribute:withNSString:withId:);
  methods[12].selector = @selector(getMethods);
  methods[13].selector = @selector(initialized);
  methods[14].selector = @selector(getAttributeWithASWidgetAttribute:);
  methods[15].selector = @selector(drawableStateChanged);
  methods[16].selector = @selector(inflateViewWithNSString:);
  methods[17].selector = @selector(remeasure);
  methods[18].selector = @selector(removeFromParent);
  methods[19].selector = @selector(getLocationOnScreenWithIntArray:);
  methods[20].selector = @selector(getWindowVisibleDisplayFrameWithADRect:);
  methods[21].selector = @selector(offsetTopAndBottomWithInt:);
  methods[22].selector = @selector(offsetLeftAndRightWithInt:);
  methods[23].selector = @selector(setMyAttributeWithNSString:withId:);
  methods[24].selector = @selector(setVisibilityWithInt:);
  methods[25].selector = @selector(setState0WithId:);
  methods[26].selector = @selector(setState1WithId:);
  methods[27].selector = @selector(setState2WithId:);
  methods[28].selector = @selector(setState3WithId:);
  methods[29].selector = @selector(setState4WithId:);
  methods[30].selector = @selector(state0);
  methods[31].selector = @selector(state1);
  methods[32].selector = @selector(state2);
  methods[33].selector = @selector(state3);
  methods[34].selector = @selector(state4);
  methods[35].selector = @selector(stateYes);
  methods[36].selector = @selector(stateNo);
  methods[37].selector = @selector(endViewTransitionWithADView:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASRadioGroupImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "measureFinished_", "LASMeasureEvent;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "onLayoutEvent_", "LASOnLayoutEvent;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "overlays_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 37, -1 },
    { "mMaxWidth_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mMaxHeight_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "templates_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 38, -1 },
  };
  static const void *ptrTable[] = { "setMaxWidth", "I", "setMaxHeight", "LASRadioGroupImpl;", "onMeasure", "II", "onLayout", "ZIIII", "execute", "LNSString;[LNSObject;", "updateMeasuredDimension", "newInstance", "LASIWidget;", "setAttribute", "LASWidgetAttribute;LNSString;LNSObject;", "()Ljava/util/List<Ljava/lang/String;>;", "getAttribute", "LASWidgetAttribute;", "inflateView", "LNSString;", "getLocationOnScreen", "[I", "getWindowVisibleDisplayFrame", "LADRect;", "offsetTopAndBottom", "offsetLeftAndRight", "setMyAttribute", "LNSString;LNSObject;", "setVisibility", "setState0", "LNSObject;", "setState1", "setState2", "setState3", "setState4", "endViewTransition", "LADView;", "Ljava/util/List<Lcom/ashera/widget/IWidget;>;", "Ljava/util/Map<Ljava/lang/String;Lcom/ashera/widget/IWidget;>;" };
  static const J2ObjcClassInfo _ASRadioGroupImpl_RadioGroupExt = { "RadioGroupExt", "com.ashera.layout", ptrTable, methods, fields, 7, 0x1, 38, 7, 3, -1, -1, -1, -1 };
  return &_ASRadioGroupImpl_RadioGroupExt;
}

@end

void ASRadioGroupImpl_RadioGroupExt_initWithASRadioGroupImpl_(ASRadioGroupImpl_RadioGroupExt *self, ASRadioGroupImpl *outer$) {
  self->this$0_ = outer$;
  ADRadioGroup_init(self);
  self->measureFinished_ = new_ASMeasureEvent_init();
  self->onLayoutEvent_ = new_ASOnLayoutEvent_init();
  self->mMaxWidth_ = -1;
  self->mMaxHeight_ = -1;
}

ASRadioGroupImpl_RadioGroupExt *new_ASRadioGroupImpl_RadioGroupExt_initWithASRadioGroupImpl_(ASRadioGroupImpl *outer$) {
  J2OBJC_NEW_IMPL(ASRadioGroupImpl_RadioGroupExt, initWithASRadioGroupImpl_, outer$)
}

ASRadioGroupImpl_RadioGroupExt *create_ASRadioGroupImpl_RadioGroupExt_initWithASRadioGroupImpl_(ASRadioGroupImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASRadioGroupImpl_RadioGroupExt, initWithASRadioGroupImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASRadioGroupImpl_RadioGroupExt)

@implementation ASRadioGroupImpl_CanvasImpl

- (instancetype)initWithASIWidget:(id<ASIWidget>)widget {
  ASRadioGroupImpl_CanvasImpl_initWithASIWidget_(self, widget);
  return self;
}

- (void)drawWithADDrawable:(ADDrawable *)mDivider {
  for (id __strong divider in nil_chk(imageViews_)) {
    if (ASViewImpl_getXWithId_(divider) == [((ADDrawable *) nil_chk(mDivider)) getLeft] && ASViewImpl_getYWithId_(divider) == [mDivider getTop]) {
      return;
    }
  }
  id image = [((ADDrawable *) nil_chk(mDivider)) getDrawable];
  if (image != nil) {
    if ([image isKindOfClass:[JavaLangInteger class]]) {
      image = ASViewImpl_getColorWithId_(image);
    }
    id imageView = [self nativeCreateImageViewWithId:image];
    if (requiresAttrChangeListener_) {
      [mDivider setAttributeChangeListenerWithADDrawable_AttributeChangeListener:new_ASRadioGroupImpl_CanvasImpl_$Lambda$1_initWithId_(imageView)];
    }
    ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_(imageView, [mDivider getLeft], [mDivider getTop], [mDivider getRight], [mDivider getBottom]);
    [((id<JavaUtilList>) nil_chk(imageViews_)) addWithId:imageView];
    ASViewGroupImpl_nativeAddViewWithId_withId_([((id<ASIWidget>) nil_chk(widget_)) asNativeWidget], imageView);
  }
}

- (void)reset {
  if (canvasReset_) {
    for (id __strong imageView in nil_chk(imageViews_)) {
      ASViewGroupImpl_removeViewWithId_(imageView);
    }
    [imageViews_ clear];
  }
}

- (id)nativeCreateImageViewWithId:(id)image {
  ASUIImageView* imageView = [ASUIImageView new];
  if ([image isKindOfClass:[UIImage class]]) {
    imageView.image = image;
    imageView.backgroundColor = nil;
  }else if ([image isKindOfClass:[UIColor class]]) {
    imageView.backgroundColor = image;
    imageView.image = nil;
  }
  return imageView;
}

- (void)translateWithInt:(int32_t)arg0
                 withInt:(int32_t)arg1 {
  ADCanvas_translateWithInt_withInt_(self, arg0, arg1);
}

- (void)__javaClone:(ASRadioGroupImpl_CanvasImpl *)original {
  [super __javaClone:original];
  JreRelease(widget_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x101, 3, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASIWidget:);
  methods[1].selector = @selector(drawWithADDrawable:);
  methods[2].selector = @selector(reset);
  methods[3].selector = @selector(nativeCreateImageViewWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "canvasReset_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "requiresAttrChangeListener_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "imageViews_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 5, -1 },
    { "widget_", "LASIWidget;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASIWidget;", "draw", "LADDrawable;", "nativeCreateImageView", "LNSObject;", "Ljava/util/List<Ljava/lang/Object;>;", "LASRadioGroupImpl;" };
  static const J2ObjcClassInfo _ASRadioGroupImpl_CanvasImpl = { "CanvasImpl", "com.ashera.layout", ptrTable, methods, fields, 7, 0x1a, 4, 4, 6, -1, -1, -1, -1 };
  return &_ASRadioGroupImpl_CanvasImpl;
}

@end

void ASRadioGroupImpl_CanvasImpl_initWithASIWidget_(ASRadioGroupImpl_CanvasImpl *self, id<ASIWidget> widget) {
  NSObject_init(self);
  self->canvasReset_ = true;
  self->requiresAttrChangeListener_ = false;
  self->imageViews_ = new_JavaUtilArrayList_init();
  self->widget_ = widget;
}

ASRadioGroupImpl_CanvasImpl *new_ASRadioGroupImpl_CanvasImpl_initWithASIWidget_(id<ASIWidget> widget) {
  J2OBJC_NEW_IMPL(ASRadioGroupImpl_CanvasImpl, initWithASIWidget_, widget)
}

ASRadioGroupImpl_CanvasImpl *create_ASRadioGroupImpl_CanvasImpl_initWithASIWidget_(id<ASIWidget> widget) {
  J2OBJC_CREATE_IMPL(ASRadioGroupImpl_CanvasImpl, initWithASIWidget_, widget)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASRadioGroupImpl_CanvasImpl)

@implementation ASRadioGroupImpl_CanvasImpl_$Lambda$1

- (void)onAttributeChangeWithNSString:(NSString *)name
                               withId:(id)value {
  {
    ADRect *rect;
    int32_t alpha;
    switch (JreIndexOfStr(name, (id[]){ @"bounds", @"alpha" }, 2)) {
      case 0:
      rect = (ADRect *) cast_chk(value, [ADRect class]);
      ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_(val$imageView_, ((ADRect *) nil_chk(rect))->left_, rect->top_, rect->right_, rect->bottom_);
      break;
      case 1:
      alpha = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(value, [JavaLangInteger class]))) intValue];
      ASViewImpl_setAlphaWithId_withId_(val$imageView_, JavaLangFloat_valueOfWithFloat_(alpha / 255.0f));
      break;
      default:
      break;
    }
  }
}

@end

void ASRadioGroupImpl_CanvasImpl_$Lambda$1_initWithId_(ASRadioGroupImpl_CanvasImpl_$Lambda$1 *self, id capture$0) {
  self->val$imageView_ = capture$0;
  NSObject_init(self);
}

ASRadioGroupImpl_CanvasImpl_$Lambda$1 *new_ASRadioGroupImpl_CanvasImpl_$Lambda$1_initWithId_(id capture$0) {
  J2OBJC_NEW_IMPL(ASRadioGroupImpl_CanvasImpl_$Lambda$1, initWithId_, capture$0)
}

ASRadioGroupImpl_CanvasImpl_$Lambda$1 *create_ASRadioGroupImpl_CanvasImpl_$Lambda$1_initWithId_(id capture$0) {
  J2OBJC_CREATE_IMPL(ASRadioGroupImpl_CanvasImpl_$Lambda$1, initWithId_, capture$0)
}

@implementation ASRadioGroupImpl_OnHierarchyChangeListener

- (NSString *)getAction {
  return action_;
}

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue {
  ASRadioGroupImpl_OnHierarchyChangeListener_initWithASIWidget_withNSString_(self, w, strValue);
  return self;
}

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue
                     withNSString:(NSString *)action {
  ASRadioGroupImpl_OnHierarchyChangeListener_initWithASIWidget_withNSString_withNSString_(self, w, strValue, action);
  return self;
}

- (void)onChildViewAddedWithADView:(ADView *)parent
                        withADView:(ADView *)child {
  if (action_ == nil || [action_ isEqual:@"onChildViewAdded"]) {
    [((id<ASIWidget>) nil_chk(w_)) syncModelFromUiToPojoWithNSString:@"onChildViewAdded"];
    id<JavaUtilMap> obj = [self getOnChildViewAddedEventObjWithADView:parent withADView:child];
    NSString *commandName = (NSString *) cast_chk([((id<JavaUtilMap>) nil_chk(obj)) getWithId:ASEventExpressionParser_KEY_COMMAND_NAME], [NSString class]);
    NSString *commandType = (NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_COMMAND_TYPE], [NSString class]);
    switch (JreIndexOfStr(commandType, (id[]){ @"+" }, 1)) {
      case 0:
      if (ASEventCommandFactory_hasCommandWithNSString_(commandName)) {
        (void) [((id<ASEventCommand>) nil_chk(ASEventCommandFactory_getCommandWithNSString_(commandName))) executeCommandWithASIWidget:w_ withJavaUtilMap:obj withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ parent, child } count:2 type:NSObject_class_()]];
      }
      break;
      default:
      break;
    }
    if ([obj containsKeyWithId:@"refreshUiFromModel"]) {
      id widgets = [obj removeWithId:@"refreshUiFromModel"];
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, widgets, true);
    }
    if ([((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds] != nil) {
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, [((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds], true);
    }
    if (strValue_ != nil && ![strValue_ isEmpty] && ![((NSString *) nil_chk([((NSString *) nil_chk(strValue_)) java_trim])) java_hasPrefix:@"+"]) {
      id<ASIActivity> activity = [((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getRootActivity];
      if (activity != nil) {
        [activity sendEventMessageWithJavaUtilMap:obj];
      }
    }
  }
  return;
}

- (void)onChildViewRemovedWithADView:(ADView *)parent
                          withADView:(ADView *)child {
  if (action_ == nil || [action_ isEqual:@"onChildViewRemoved"]) {
    [((id<ASIWidget>) nil_chk(w_)) syncModelFromUiToPojoWithNSString:@"onChildViewRemoved"];
    id<JavaUtilMap> obj = [self getOnChildViewRemovedEventObjWithADView:parent withADView:child];
    NSString *commandName = (NSString *) cast_chk([((id<JavaUtilMap>) nil_chk(obj)) getWithId:ASEventExpressionParser_KEY_COMMAND_NAME], [NSString class]);
    NSString *commandType = (NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_COMMAND_TYPE], [NSString class]);
    switch (JreIndexOfStr(commandType, (id[]){ @"+" }, 1)) {
      case 0:
      if (ASEventCommandFactory_hasCommandWithNSString_(commandName)) {
        (void) [((id<ASEventCommand>) nil_chk(ASEventCommandFactory_getCommandWithNSString_(commandName))) executeCommandWithASIWidget:w_ withJavaUtilMap:obj withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ parent, child } count:2 type:NSObject_class_()]];
      }
      break;
      default:
      break;
    }
    if ([obj containsKeyWithId:@"refreshUiFromModel"]) {
      id widgets = [obj removeWithId:@"refreshUiFromModel"];
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, widgets, true);
    }
    if ([((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds] != nil) {
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, [((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds], true);
    }
    if (strValue_ != nil && ![strValue_ isEmpty] && ![((NSString *) nil_chk([((NSString *) nil_chk(strValue_)) java_trim])) java_hasPrefix:@"+"]) {
      id<ASIActivity> activity = [((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getRootActivity];
      if (activity != nil) {
        [activity sendEventMessageWithJavaUtilMap:obj];
      }
    }
  }
  return;
}

- (id<JavaUtilMap>)getOnChildViewRemovedEventObjWithADView:(ADView *)parent
                                                withADView:(ADView *)child {
  id<JavaUtilMap> obj = ASPluginInvoker_getJSONCompatMap();
  (void) [((id<JavaUtilMap>) nil_chk(obj)) putWithId:@"action" withId:@"action"];
  (void) [obj putWithId:@"eventType" withId:@"childviewremoved"];
  (void) [obj putWithId:@"fragmentId" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getFragmentId]];
  (void) [obj putWithId:@"actionUrl" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getActionUrl]];
  (void) [obj putWithId:@"namespace" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getNamespace]];
  if ([((id<ASIWidget>) nil_chk(w_)) getComponentId] != nil) {
    (void) [obj putWithId:@"componentId" withId:[((id<ASIWidget>) nil_chk(w_)) getComponentId]];
  }
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"id", [((id<ASIWidget>) nil_chk(w_)) getId]);
  (void) ASEventExpressionParser_parseEventExpressionWithNSString_withJavaUtilMap_(strValue_, obj);
  [((id<ASIWidget>) nil_chk(w_)) updateModelToEventMapWithJavaUtilMap:obj withNSString:@"onChildViewRemoved" withNSString:(NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_EVENT_ARGS], [NSString class])];
  return obj;
}

- (id<JavaUtilMap>)getOnChildViewAddedEventObjWithADView:(ADView *)parent
                                              withADView:(ADView *)child {
  id<JavaUtilMap> obj = ASPluginInvoker_getJSONCompatMap();
  (void) [((id<JavaUtilMap>) nil_chk(obj)) putWithId:@"action" withId:@"action"];
  (void) [obj putWithId:@"eventType" withId:@"childviewadded"];
  (void) [obj putWithId:@"fragmentId" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getFragmentId]];
  (void) [obj putWithId:@"actionUrl" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getActionUrl]];
  (void) [obj putWithId:@"namespace" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getNamespace]];
  if ([((id<ASIWidget>) nil_chk(w_)) getComponentId] != nil) {
    (void) [obj putWithId:@"componentId" withId:[((id<ASIWidget>) nil_chk(w_)) getComponentId]];
  }
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"id", [((id<ASIWidget>) nil_chk(w_)) getId]);
  (void) ASEventExpressionParser_parseEventExpressionWithNSString_withJavaUtilMap_(strValue_, obj);
  [((id<ASIWidget>) nil_chk(w_)) updateModelToEventMapWithJavaUtilMap:obj withNSString:@"onChildViewAdded" withNSString:(NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_EVENT_ARGS], [NSString class])];
  return obj;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 3, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, 5, 3, -1, 6, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, 7, 3, -1, 6, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getAction);
  methods[1].selector = @selector(initWithASIWidget:withNSString:);
  methods[2].selector = @selector(initWithASIWidget:withNSString:withNSString:);
  methods[3].selector = @selector(onChildViewAddedWithADView:withADView:);
  methods[4].selector = @selector(onChildViewRemovedWithADView:withADView:);
  methods[5].selector = @selector(getOnChildViewRemovedEventObjWithADView:withADView:);
  methods[6].selector = @selector(getOnChildViewAddedEventObjWithADView:withADView:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "w_", "LASIWidget;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "view_", "LADView;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "strValue_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "action_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASIWidget;LNSString;", "LASIWidget;LNSString;LNSString;", "onChildViewAdded", "LADView;LADView;", "onChildViewRemoved", "getOnChildViewRemovedEventObj", "(Lr/android/view/View;Lr/android/view/View;)Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", "getOnChildViewAddedEventObj", "LASRadioGroupImpl;" };
  static const J2ObjcClassInfo _ASRadioGroupImpl_OnHierarchyChangeListener = { "OnHierarchyChangeListener", "com.ashera.layout", ptrTable, methods, fields, 7, 0xa, 7, 4, 8, -1, -1, -1, -1 };
  return &_ASRadioGroupImpl_OnHierarchyChangeListener;
}

@end

void ASRadioGroupImpl_OnHierarchyChangeListener_initWithASIWidget_withNSString_(ASRadioGroupImpl_OnHierarchyChangeListener *self, id<ASIWidget> w, NSString *strValue) {
  NSObject_init(self);
  self->w_ = w;
  self->strValue_ = strValue;
}

ASRadioGroupImpl_OnHierarchyChangeListener *new_ASRadioGroupImpl_OnHierarchyChangeListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) {
  J2OBJC_NEW_IMPL(ASRadioGroupImpl_OnHierarchyChangeListener, initWithASIWidget_withNSString_, w, strValue)
}

ASRadioGroupImpl_OnHierarchyChangeListener *create_ASRadioGroupImpl_OnHierarchyChangeListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) {
  J2OBJC_CREATE_IMPL(ASRadioGroupImpl_OnHierarchyChangeListener, initWithASIWidget_withNSString_, w, strValue)
}

void ASRadioGroupImpl_OnHierarchyChangeListener_initWithASIWidget_withNSString_withNSString_(ASRadioGroupImpl_OnHierarchyChangeListener *self, id<ASIWidget> w, NSString *strValue, NSString *action) {
  NSObject_init(self);
  self->w_ = w;
  self->strValue_ = strValue;
  self->action_ = action;
}

ASRadioGroupImpl_OnHierarchyChangeListener *new_ASRadioGroupImpl_OnHierarchyChangeListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) {
  J2OBJC_NEW_IMPL(ASRadioGroupImpl_OnHierarchyChangeListener, initWithASIWidget_withNSString_withNSString_, w, strValue, action)
}

ASRadioGroupImpl_OnHierarchyChangeListener *create_ASRadioGroupImpl_OnHierarchyChangeListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) {
  J2OBJC_CREATE_IMPL(ASRadioGroupImpl_OnHierarchyChangeListener, initWithASIWidget_withNSString_withNSString_, w, strValue, action)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASRadioGroupImpl_OnHierarchyChangeListener)

@implementation ASRadioGroupImpl_OnCheckedChangeListener

- (NSString *)getAction {
  return action_;
}

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue {
  ASRadioGroupImpl_OnCheckedChangeListener_initWithASIWidget_withNSString_(self, w, strValue);
  return self;
}

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue
                     withNSString:(NSString *)action {
  ASRadioGroupImpl_OnCheckedChangeListener_initWithASIWidget_withNSString_withNSString_(self, w, strValue, action);
  return self;
}

- (void)onCheckedChangedWithADRadioGroup:(ADRadioGroup *)group
                                 withInt:(int32_t)checkedId {
  if (action_ == nil || [action_ isEqual:@"onCheckedChange"]) {
    [((id<ASIWidget>) nil_chk(w_)) syncModelFromUiToPojoWithNSString:@"onCheckedChange"];
    id<JavaUtilMap> obj = [self getOnCheckedChangeEventObjWithADRadioGroup:group withInt:checkedId];
    NSString *commandName = (NSString *) cast_chk([((id<JavaUtilMap>) nil_chk(obj)) getWithId:ASEventExpressionParser_KEY_COMMAND_NAME], [NSString class]);
    NSString *commandType = (NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_COMMAND_TYPE], [NSString class]);
    switch (JreIndexOfStr(commandType, (id[]){ @"+" }, 1)) {
      case 0:
      if (ASEventCommandFactory_hasCommandWithNSString_(commandName)) {
        (void) [((id<ASEventCommand>) nil_chk(ASEventCommandFactory_getCommandWithNSString_(commandName))) executeCommandWithASIWidget:w_ withJavaUtilMap:obj withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ group, JavaLangInteger_valueOfWithInt_(checkedId) } count:2 type:NSObject_class_()]];
      }
      break;
      default:
      break;
    }
    if ([obj containsKeyWithId:@"refreshUiFromModel"]) {
      id widgets = [obj removeWithId:@"refreshUiFromModel"];
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, widgets, true);
    }
    if ([((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds] != nil) {
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, [((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds], true);
    }
    if (strValue_ != nil && ![strValue_ isEmpty] && ![((NSString *) nil_chk([((NSString *) nil_chk(strValue_)) java_trim])) java_hasPrefix:@"+"]) {
      id<ASIActivity> activity = [((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getRootActivity];
      if (activity != nil) {
        [activity sendEventMessageWithJavaUtilMap:obj];
      }
    }
  }
  return;
}

- (id<JavaUtilMap>)getOnCheckedChangeEventObjWithADRadioGroup:(ADRadioGroup *)group
                                                      withInt:(int32_t)checkedId {
  id<JavaUtilMap> obj = ASPluginInvoker_getJSONCompatMap();
  (void) [((id<JavaUtilMap>) nil_chk(obj)) putWithId:@"action" withId:@"action"];
  (void) [obj putWithId:@"eventType" withId:@"checkedchange"];
  (void) [obj putWithId:@"fragmentId" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getFragmentId]];
  (void) [obj putWithId:@"actionUrl" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getActionUrl]];
  (void) [obj putWithId:@"namespace" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getNamespace]];
  if ([((id<ASIWidget>) nil_chk(w_)) getComponentId] != nil) {
    (void) [obj putWithId:@"componentId" withId:[((id<ASIWidget>) nil_chk(w_)) getComponentId]];
  }
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"id", [((id<ASIWidget>) nil_chk(w_)) getId]);
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"checkedId", JavaLangInteger_valueOfWithInt_(checkedId));
  (void) ASEventExpressionParser_parseEventExpressionWithNSString_withJavaUtilMap_(strValue_, obj);
  [((id<ASIWidget>) nil_chk(w_)) updateModelToEventMapWithJavaUtilMap:obj withNSString:@"onCheckedChange" withNSString:(NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_EVENT_ARGS], [NSString class])];
  return obj;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, 4, 3, -1, 5, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getAction);
  methods[1].selector = @selector(initWithASIWidget:withNSString:);
  methods[2].selector = @selector(initWithASIWidget:withNSString:withNSString:);
  methods[3].selector = @selector(onCheckedChangedWithADRadioGroup:withInt:);
  methods[4].selector = @selector(getOnCheckedChangeEventObjWithADRadioGroup:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "w_", "LASIWidget;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "view_", "LADView;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "strValue_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "action_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASIWidget;LNSString;", "LASIWidget;LNSString;LNSString;", "onCheckedChanged", "LADRadioGroup;I", "getOnCheckedChangeEventObj", "(Lr/android/widget/RadioGroup;I)Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", "LASRadioGroupImpl;" };
  static const J2ObjcClassInfo _ASRadioGroupImpl_OnCheckedChangeListener = { "OnCheckedChangeListener", "com.ashera.layout", ptrTable, methods, fields, 7, 0xa, 5, 4, 6, -1, -1, -1, -1 };
  return &_ASRadioGroupImpl_OnCheckedChangeListener;
}

@end

void ASRadioGroupImpl_OnCheckedChangeListener_initWithASIWidget_withNSString_(ASRadioGroupImpl_OnCheckedChangeListener *self, id<ASIWidget> w, NSString *strValue) {
  NSObject_init(self);
  self->w_ = w;
  self->strValue_ = strValue;
}

ASRadioGroupImpl_OnCheckedChangeListener *new_ASRadioGroupImpl_OnCheckedChangeListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) {
  J2OBJC_NEW_IMPL(ASRadioGroupImpl_OnCheckedChangeListener, initWithASIWidget_withNSString_, w, strValue)
}

ASRadioGroupImpl_OnCheckedChangeListener *create_ASRadioGroupImpl_OnCheckedChangeListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) {
  J2OBJC_CREATE_IMPL(ASRadioGroupImpl_OnCheckedChangeListener, initWithASIWidget_withNSString_, w, strValue)
}

void ASRadioGroupImpl_OnCheckedChangeListener_initWithASIWidget_withNSString_withNSString_(ASRadioGroupImpl_OnCheckedChangeListener *self, id<ASIWidget> w, NSString *strValue, NSString *action) {
  NSObject_init(self);
  self->w_ = w;
  self->strValue_ = strValue;
  self->action_ = action;
}

ASRadioGroupImpl_OnCheckedChangeListener *new_ASRadioGroupImpl_OnCheckedChangeListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) {
  J2OBJC_NEW_IMPL(ASRadioGroupImpl_OnCheckedChangeListener, initWithASIWidget_withNSString_withNSString_, w, strValue, action)
}

ASRadioGroupImpl_OnCheckedChangeListener *create_ASRadioGroupImpl_OnCheckedChangeListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) {
  J2OBJC_CREATE_IMPL(ASRadioGroupImpl_OnCheckedChangeListener, initWithASIWidget_withNSString_withNSString_, w, strValue, action)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASRadioGroupImpl_OnCheckedChangeListener)

@implementation ASRadioGroupImpl_RadioGroupSelectionListener

- (instancetype)initWithASRadioGroupImpl:(ASRadioGroupImpl *)outer$
                     withASIsRadioButton:(id<ASIsRadioButton>)radioButton {
  ASRadioGroupImpl_RadioGroupSelectionListener_initWithASRadioGroupImpl_withASIsRadioButton_(self, outer$, radioButton);
  return self;
}

- (void)onClickWithADView:(ADView *)v {
  bool isChecked = [((id<ASIsRadioButton>) nil_chk(radioButton_)) isChecked];
  if (!isChecked) {
    ASRadioGroupImpl_handleRadioButtonChangeWithASIsRadioButton_(this$0_, radioButton_);
  }
}

- (void)__javaClone:(ASRadioGroupImpl_RadioGroupSelectionListener *)original {
  [super __javaClone:original];
  JreRelease(this$0_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASRadioGroupImpl:withASIsRadioButton:);
  methods[1].selector = @selector(onClickWithADView:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASRadioGroupImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "radioButton_", "LASIsRadioButton;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASRadioGroupImpl;LASIsRadioButton;", "onClick", "LADView;", "LASRadioGroupImpl;" };
  static const J2ObjcClassInfo _ASRadioGroupImpl_RadioGroupSelectionListener = { "RadioGroupSelectionListener", "com.ashera.layout", ptrTable, methods, fields, 7, 0x12, 2, 2, 3, -1, -1, -1, -1 };
  return &_ASRadioGroupImpl_RadioGroupSelectionListener;
}

@end

void ASRadioGroupImpl_RadioGroupSelectionListener_initWithASRadioGroupImpl_withASIsRadioButton_(ASRadioGroupImpl_RadioGroupSelectionListener *self, ASRadioGroupImpl *outer$, id<ASIsRadioButton> radioButton) {
  self->this$0_ = outer$;
  NSObject_init(self);
  self->radioButton_ = radioButton;
}

ASRadioGroupImpl_RadioGroupSelectionListener *new_ASRadioGroupImpl_RadioGroupSelectionListener_initWithASRadioGroupImpl_withASIsRadioButton_(ASRadioGroupImpl *outer$, id<ASIsRadioButton> radioButton) {
  J2OBJC_NEW_IMPL(ASRadioGroupImpl_RadioGroupSelectionListener, initWithASRadioGroupImpl_withASIsRadioButton_, outer$, radioButton)
}

ASRadioGroupImpl_RadioGroupSelectionListener *create_ASRadioGroupImpl_RadioGroupSelectionListener_initWithASRadioGroupImpl_withASIsRadioButton_(ASRadioGroupImpl *outer$, id<ASIsRadioButton> radioButton) {
  J2OBJC_CREATE_IMPL(ASRadioGroupImpl_RadioGroupSelectionListener, initWithASRadioGroupImpl_withASIsRadioButton_, outer$, radioButton)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASRadioGroupImpl_RadioGroupSelectionListener)

@implementation ASRadioGroupImpl_$Lambda$1

- (void)run {
  ASViewGroupImpl_nativeRemoveViewWithASIWidget_(val$widget_);
}

@end

void ASRadioGroupImpl_$Lambda$1_initWithASIWidget_(ASRadioGroupImpl_$Lambda$1 *self, id<ASIWidget> capture$0) {
  self->val$widget_ = capture$0;
  NSObject_init(self);
}

ASRadioGroupImpl_$Lambda$1 *new_ASRadioGroupImpl_$Lambda$1_initWithASIWidget_(id<ASIWidget> capture$0) {
  J2OBJC_NEW_IMPL(ASRadioGroupImpl_$Lambda$1, initWithASIWidget_, capture$0)
}

ASRadioGroupImpl_$Lambda$1 *create_ASRadioGroupImpl_$Lambda$1_initWithASIWidget_(id<ASIWidget> capture$0) {
  J2OBJC_CREATE_IMPL(ASRadioGroupImpl_$Lambda$1, initWithASIWidget_, capture$0)
}
