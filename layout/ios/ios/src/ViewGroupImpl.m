//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-ios-widgets\ios_widget_library\src\main\java\com\ashera\layout\ViewGroupImpl.java
//

#include "AbstractBitFlagConverter.h"
#include "AbstractEnumToIntConverter.h"
#include "AttributeCommand.h"
#include "BaseAttributeCommand.h"
#include "ConverterFactory.h"
#include "EventCommand.h"
#include "EventCommandFactory.h"
#include "EventExpressionParser.h"
#include "HasWidgets.h"
#include "IActivity.h"
#include "IFragment.h"
#include "ILifeCycleDecorator.h"
#include "IListener.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IWidget.h"
#include "J2ObjC_source.h"
#include "LayoutTransition.h"
#include "PluginInvoker.h"
#include "Rect.h"
#include "View.h"
#include "ViewGroup.h"
#include "ViewGroupImpl.h"
#include "ViewGroupModelImpl.h"
#include "ViewImpl.h"
#include "WidgetAttribute.h"
#include "WidgetFactory.h"
#include "java/lang/Boolean.h"
#include "java/lang/Integer.h"
#include "java/util/HashMap.h"
#include "java/util/Map.h"

@protocol JavaUtilMap;


#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface ASViewGroupImpl ()

- (instancetype)init;

+ (void)setMyAttributeWithASIWidget:(id<ASIWidget>)w
              withASWidgetAttribute:(ASWidgetAttribute *)key
                       withNSString:(NSString *)strValue
                             withId:(id)objValue
          withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator;

+ (void)setVerticalMarginWithId:(id)objValue
                         withId:(id)layoutParams
                  withASIWidget:(id<ASIWidget>)w;

+ (void)setHorizontalMarginWithId:(id)objValue
                           withId:(id)layoutParams
                    withASIWidget:(id<ASIWidget>)w;

+ (id)getRightMarginWithADView:(ADView *)viewGroup;

+ (id)getLeftMarginWithADView:(ADView *)viewGroup;

+ (id)getTopMarginWithADView:(ADView *)viewGroup;

+ (id)getBottomMarginWithADView:(ADView *)viewGroup;

+ (void)addTemplateWithASIWidget:(id<ASIWidget>)w
                          withId:(id)objValue;

+ (void)setChildWithASIWidget:(id<ASIWidget>)w
                       withId:(id)xml;

+ (void)animateLayoutChangesWithId:(id)objValue
                   withADViewGroup:(ADViewGroup *)view;

+ (void)setAnimateParentHierarchyWithId:(id)objValue
                        withADViewGroup:(ADViewGroup *)viewGroup;

+ (void)setLayoutTransitionDurationWithId:(id)objValue
                          withADViewGroup:(ADViewGroup *)viewGroup;

+ (void)setLayoutTransitionWithId:(id)objValue
                  withADViewGroup:(ADViewGroup *)viewGroup;

+ (void)setPaddingVerticalWithASIWidget:(id<ASIWidget>)w
                                 withId:(id)objValue;

+ (void)setPaddingHorizontalWithASIWidget:(id<ASIWidget>)w
                                   withId:(id)objValue;

+ (void)setPaddingTopWithASIWidget:(id<ASIWidget>)w
                            withId:(id)objValue;

+ (void)setPaddingEndWithASIWidget:(id<ASIWidget>)w
                            withId:(id)objValue;

+ (void)setPaddingStartWithASIWidget:(id<ASIWidget>)w
                              withId:(id)objValue;

+ (void)setPaddingLeftWithASIWidget:(id<ASIWidget>)w
                             withId:(id)objValue;

+ (void)setPaddingRightWithASIWidget:(id<ASIWidget>)w
                              withId:(id)objValue;

+ (void)setPaddingBottomWithASIWidget:(id<ASIWidget>)w
                               withId:(id)objValue;

+ (void)setPaddingWithASIWidget:(id<ASIWidget>)w
                         withId:(id)objValue;

+ (id)getPaddingTopWithASIWidget:(id<ASIWidget>)w;

+ (id)getPaddingLeftWithASIWidget:(id<ASIWidget>)w;

+ (id)getPaddingRightWithASIWidget:(id<ASIWidget>)w;

+ (id)getPaddingBottomWithASIWidget:(id<ASIWidget>)w;

+ (void)setOnChildViewRemovedWithADViewGroup:(ADViewGroup *)viewGroup
                               withASIWidget:(id<ASIWidget>)w
                                      withId:(id)objValue;

+ (void)setOnChildViewAddedWithADViewGroup:(ADViewGroup *)viewGroup
                             withASIWidget:(id<ASIWidget>)w
                                    withId:(id)objValue;

+ (void)applyClipToPaddingCommandWithASIWidget:(id<ASIWidget>)w
                                   withBoolean:(jboolean)add;

@end

__attribute__((unused)) static void ASViewGroupImpl_init(ASViewGroupImpl *self);

__attribute__((unused)) static ASViewGroupImpl *new_ASViewGroupImpl_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASViewGroupImpl *create_ASViewGroupImpl_init(void);

__attribute__((unused)) static void ASViewGroupImpl_setMyAttributeWithASIWidget_withASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(id<ASIWidget> w, ASWidgetAttribute *key, NSString *strValue, id objValue, id<ASILifeCycleDecorator> decorator);

__attribute__((unused)) static void ASViewGroupImpl_setVerticalMarginWithId_withId_withASIWidget_(id objValue, id layoutParams, id<ASIWidget> w);

__attribute__((unused)) static void ASViewGroupImpl_setHorizontalMarginWithId_withId_withASIWidget_(id objValue, id layoutParams, id<ASIWidget> w);

__attribute__((unused)) static id ASViewGroupImpl_getRightMarginWithADView_(ADView *viewGroup);

__attribute__((unused)) static id ASViewGroupImpl_getLeftMarginWithADView_(ADView *viewGroup);

__attribute__((unused)) static id ASViewGroupImpl_getTopMarginWithADView_(ADView *viewGroup);

__attribute__((unused)) static id ASViewGroupImpl_getBottomMarginWithADView_(ADView *viewGroup);

__attribute__((unused)) static void ASViewGroupImpl_addTemplateWithASIWidget_withId_(id<ASIWidget> w, id objValue);

__attribute__((unused)) static void ASViewGroupImpl_setChildWithASIWidget_withId_(id<ASIWidget> w, id xml);

__attribute__((unused)) static void ASViewGroupImpl_animateLayoutChangesWithId_withADViewGroup_(id objValue, ADViewGroup *view);

__attribute__((unused)) static void ASViewGroupImpl_setAnimateParentHierarchyWithId_withADViewGroup_(id objValue, ADViewGroup *viewGroup);

__attribute__((unused)) static void ASViewGroupImpl_setLayoutTransitionDurationWithId_withADViewGroup_(id objValue, ADViewGroup *viewGroup);

__attribute__((unused)) static void ASViewGroupImpl_setLayoutTransitionWithId_withADViewGroup_(id objValue, ADViewGroup *viewGroup);

__attribute__((unused)) static void ASViewGroupImpl_setPaddingVerticalWithASIWidget_withId_(id<ASIWidget> w, id objValue);

__attribute__((unused)) static void ASViewGroupImpl_setPaddingHorizontalWithASIWidget_withId_(id<ASIWidget> w, id objValue);

__attribute__((unused)) static void ASViewGroupImpl_setPaddingTopWithASIWidget_withId_(id<ASIWidget> w, id objValue);

__attribute__((unused)) static void ASViewGroupImpl_setPaddingEndWithASIWidget_withId_(id<ASIWidget> w, id objValue);

__attribute__((unused)) static void ASViewGroupImpl_setPaddingStartWithASIWidget_withId_(id<ASIWidget> w, id objValue);

__attribute__((unused)) static void ASViewGroupImpl_setPaddingLeftWithASIWidget_withId_(id<ASIWidget> w, id objValue);

__attribute__((unused)) static void ASViewGroupImpl_setPaddingRightWithASIWidget_withId_(id<ASIWidget> w, id objValue);

__attribute__((unused)) static void ASViewGroupImpl_setPaddingBottomWithASIWidget_withId_(id<ASIWidget> w, id objValue);

__attribute__((unused)) static void ASViewGroupImpl_setPaddingWithASIWidget_withId_(id<ASIWidget> w, id objValue);

__attribute__((unused)) static id ASViewGroupImpl_getPaddingTopWithASIWidget_(id<ASIWidget> w);

__attribute__((unused)) static id ASViewGroupImpl_getPaddingLeftWithASIWidget_(id<ASIWidget> w);

__attribute__((unused)) static id ASViewGroupImpl_getPaddingRightWithASIWidget_(id<ASIWidget> w);

__attribute__((unused)) static id ASViewGroupImpl_getPaddingBottomWithASIWidget_(id<ASIWidget> w);

__attribute__((unused)) static void ASViewGroupImpl_setOnChildViewRemovedWithADViewGroup_withASIWidget_withId_(ADViewGroup *viewGroup, id<ASIWidget> w, id objValue);

__attribute__((unused)) static void ASViewGroupImpl_setOnChildViewAddedWithADViewGroup_withASIWidget_withId_(ADViewGroup *viewGroup, id<ASIWidget> w, id objValue);

__attribute__((unused)) static void ASViewGroupImpl_applyClipToPaddingCommandWithASIWidget_withBoolean_(id<ASIWidget> w, jboolean add);

@interface ASViewGroupImpl_LayoutTransition () {
 @public
  id<JavaUtilMap> mapping_;
}

@end

J2OBJC_FIELD_SETTER(ASViewGroupImpl_LayoutTransition, mapping_, id<JavaUtilMap>)

@interface ASViewGroupImpl_LayoutMode () {
 @public
  id<JavaUtilMap> mapping_;
}

@end

J2OBJC_FIELD_SETTER(ASViewGroupImpl_LayoutMode, mapping_, id<JavaUtilMap>)

@interface ASViewGroupImpl_OnHierarchyChangeListener : NSObject < ADViewGroup_OnHierarchyChangeListener, ASIListener > {
 @public
  id<ASIWidget> w_;
  ADView *view_;
  NSString *strValue_;
  NSString *action_;
}

- (NSString *)getAction;

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue;

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue
                     withNSString:(NSString *)action;

- (void)onChildViewAddedWithADView:(ADView *)parent
                        withADView:(ADView *)child;

- (void)onChildViewRemovedWithADView:(ADView *)parent
                          withADView:(ADView *)child;

- (id<JavaUtilMap>)getOnChildViewRemovedEventObjWithADView:(ADView *)parent
                                                withADView:(ADView *)child;

- (id<JavaUtilMap>)getOnChildViewAddedEventObjWithADView:(ADView *)parent
                                              withADView:(ADView *)child;

@end

J2OBJC_EMPTY_STATIC_INIT(ASViewGroupImpl_OnHierarchyChangeListener)

J2OBJC_FIELD_SETTER(ASViewGroupImpl_OnHierarchyChangeListener, w_, id<ASIWidget>)
J2OBJC_FIELD_SETTER(ASViewGroupImpl_OnHierarchyChangeListener, view_, ADView *)
J2OBJC_FIELD_SETTER(ASViewGroupImpl_OnHierarchyChangeListener, strValue_, NSString *)
J2OBJC_FIELD_SETTER(ASViewGroupImpl_OnHierarchyChangeListener, action_, NSString *)

__attribute__((unused)) static void ASViewGroupImpl_OnHierarchyChangeListener_initWithASIWidget_withNSString_(ASViewGroupImpl_OnHierarchyChangeListener *self, id<ASIWidget> w, NSString *strValue);

__attribute__((unused)) static ASViewGroupImpl_OnHierarchyChangeListener *new_ASViewGroupImpl_OnHierarchyChangeListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASViewGroupImpl_OnHierarchyChangeListener *create_ASViewGroupImpl_OnHierarchyChangeListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue);

__attribute__((unused)) static void ASViewGroupImpl_OnHierarchyChangeListener_initWithASIWidget_withNSString_withNSString_(ASViewGroupImpl_OnHierarchyChangeListener *self, id<ASIWidget> w, NSString *strValue, NSString *action);

__attribute__((unused)) static ASViewGroupImpl_OnHierarchyChangeListener *new_ASViewGroupImpl_OnHierarchyChangeListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASViewGroupImpl_OnHierarchyChangeListener *create_ASViewGroupImpl_OnHierarchyChangeListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action);

J2OBJC_TYPE_LITERAL_HEADER(ASViewGroupImpl_OnHierarchyChangeListener)

@interface ASViewGroupImpl_ViewGroupCommandBuilderInternal () {
 @public
  id<ASIWidget> widget_;
}

@end

J2OBJC_FIELD_SETTER(ASViewGroupImpl_ViewGroupCommandBuilderInternal, widget_, id<ASIWidget>)

@interface ASViewGroupImpl_ViewGroupBean () {
 @public
  ASViewGroupImpl_ViewGroupCommandBuilderInternal *commandBuilder_ViewGroupBean_;
}

- (ASViewGroupImpl_ViewGroupCommandBuilderInternal *)getBuilder;

@end

J2OBJC_FIELD_SETTER(ASViewGroupImpl_ViewGroupBean, commandBuilder_ViewGroupBean_, ASViewGroupImpl_ViewGroupCommandBuilderInternal *)

__attribute__((unused)) static ASViewGroupImpl_ViewGroupCommandBuilderInternal *ASViewGroupImpl_ViewGroupBean_getBuilder(ASViewGroupImpl_ViewGroupBean *self);

@interface ASViewGroupImpl_ViewGroupParamsBean () {
 @public
  ASViewGroupImpl_ViewGroupCommandParamsBuilderInternal *commandBuilder_;
}

- (ASViewGroupImpl_ViewGroupCommandParamsBuilderInternal *)getParamsBuilder;

@end

J2OBJC_FIELD_SETTER(ASViewGroupImpl_ViewGroupParamsBean, commandBuilder_, ASViewGroupImpl_ViewGroupCommandParamsBuilderInternal *)

__attribute__((unused)) static ASViewGroupImpl_ViewGroupCommandParamsBuilderInternal *ASViewGroupImpl_ViewGroupParamsBean_getParamsBuilder(ASViewGroupImpl_ViewGroupParamsBean *self);

@interface ASViewGroupImpl_ClipPaddingMaskCommand ()

- (void)createMaskLayerWithASIWidget:(id<ASIWidget>)w;

- (void)nativeCreateMaskLayerWithId:(id)uiView
                            withInt:(jint)left
                            withInt:(jint)top
                            withInt:(jint)width
                            withInt:(jint)height;

@end

__attribute__((unused)) static void ASViewGroupImpl_ClipPaddingMaskCommand_createMaskLayerWithASIWidget_(ASViewGroupImpl_ClipPaddingMaskCommand *self, id<ASIWidget> w);

__attribute__((unused)) static void ASViewGroupImpl_ClipPaddingMaskCommand_nativeCreateMaskLayerWithId_withInt_withInt_withInt_withInt_(ASViewGroupImpl_ClipPaddingMaskCommand *self, id uiView, jint left, jint top, jint width, jint height);

@implementation ASViewGroupImpl

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASViewGroupImpl_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (void)register__WithNSString:(NSString *)localName {
  ASViewGroupImpl_register__WithNSString_(localName);
}

+ (void)setAttributeWithASIWidget:(id<ASIWidget>)w
            withASWidgetAttribute:(ASWidgetAttribute *)key
                     withNSString:(NSString *)strValue
                           withId:(id)objValue
        withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  ASViewGroupImpl_setAttributeWithASIWidget_withASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(w, key, strValue, objValue, decorator);
}

+ (void)setMyAttributeWithASIWidget:(id<ASIWidget>)w
              withASWidgetAttribute:(ASWidgetAttribute *)key
                       withNSString:(NSString *)strValue
                             withId:(id)objValue
          withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  ASViewGroupImpl_setMyAttributeWithASIWidget_withASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(w, key, strValue, objValue, decorator);
}

+ (void)setChildAttributeWithASIWidget:(id<ASIWidget>)w
                 withASWidgetAttribute:(ASWidgetAttribute *)key
                                withId:(id)objValue
                                withId:(id)layoutParams {
  ASViewGroupImpl_setChildAttributeWithASIWidget_withASWidgetAttribute_withId_withId_(w, key, objValue, layoutParams);
}

+ (id)getAttributeWithASIWidget:(id<ASIWidget>)w
          withASWidgetAttribute:(ASWidgetAttribute *)key
      withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  return ASViewGroupImpl_getAttributeWithASIWidget_withASWidgetAttribute_withASILifeCycleDecorator_(w, key, decorator);
}

+ (id)getChildAttributeWithASIWidget:(id<ASIWidget>)w
               withASWidgetAttribute:(ASWidgetAttribute *)key {
  return ASViewGroupImpl_getChildAttributeWithASIWidget_withASWidgetAttribute_(w, key);
}

+ (void)setMarginWithId:(id)objValue
                 withId:(id)layoutParams
          withASIWidget:(id<ASIWidget>)w {
  ASViewGroupImpl_setMarginWithId_withId_withASIWidget_(objValue, layoutParams, w);
}

+ (void)setBottomMarginWithId:(id)objValue
                       withId:(id)layoutParams {
  ASViewGroupImpl_setBottomMarginWithId_withId_(objValue, layoutParams);
}

+ (void)setTopMarginWithId:(id)objValue
                    withId:(id)layoutParams {
  ASViewGroupImpl_setTopMarginWithId_withId_(objValue, layoutParams);
}

+ (void)setVerticalMarginWithId:(id)objValue
                         withId:(id)layoutParams
                  withASIWidget:(id<ASIWidget>)w {
  ASViewGroupImpl_setVerticalMarginWithId_withId_withASIWidget_(objValue, layoutParams, w);
}

+ (void)setLeftMarginWithId:(id)objValue
                     withId:(id)layoutParams
              withASIWidget:(id<ASIWidget>)w {
  ASViewGroupImpl_setLeftMarginWithId_withId_withASIWidget_(objValue, layoutParams, w);
}

+ (void)setRightMarginWithId:(id)objValue
                      withId:(id)layoutParams
               withASIWidget:(id<ASIWidget>)w {
  ASViewGroupImpl_setRightMarginWithId_withId_withASIWidget_(objValue, layoutParams, w);
}

+ (void)setHorizontalMarginWithId:(id)objValue
                           withId:(id)layoutParams
                    withASIWidget:(id<ASIWidget>)w {
  ASViewGroupImpl_setHorizontalMarginWithId_withId_withASIWidget_(objValue, layoutParams, w);
}

+ (void)setEndMarginWithId:(id)objValue
                    withId:(id)layoutParams
             withASIWidget:(id<ASIWidget>)w {
  ASViewGroupImpl_setEndMarginWithId_withId_withASIWidget_(objValue, layoutParams, w);
}

+ (void)setStartMarginWithId:(id)objValue
                      withId:(id)layoutParams
               withASIWidget:(id<ASIWidget>)w {
  ASViewGroupImpl_setStartMarginWithId_withId_withASIWidget_(objValue, layoutParams, w);
}

+ (id)getRightMarginWithADView:(ADView *)viewGroup {
  return ASViewGroupImpl_getRightMarginWithADView_(viewGroup);
}

+ (id)getLeftMarginWithADView:(ADView *)viewGroup {
  return ASViewGroupImpl_getLeftMarginWithADView_(viewGroup);
}

+ (id)getTopMarginWithADView:(ADView *)viewGroup {
  return ASViewGroupImpl_getTopMarginWithADView_(viewGroup);
}

+ (id)getBottomMarginWithADView:(ADView *)viewGroup {
  return ASViewGroupImpl_getBottomMarginWithADView_(viewGroup);
}

+ (void)addTemplateWithASIWidget:(id<ASIWidget>)w
                          withId:(id)objValue {
  ASViewGroupImpl_addTemplateWithASIWidget_withId_(w, objValue);
}

+ (void)setChildWithASIWidget:(id<ASIWidget>)w
                       withId:(id)xml {
  ASViewGroupImpl_setChildWithASIWidget_withId_(w, xml);
}

+ (void)animateLayoutChangesWithId:(id)objValue
                   withADViewGroup:(ADViewGroup *)view {
  ASViewGroupImpl_animateLayoutChangesWithId_withADViewGroup_(objValue, view);
}

+ (void)setAnimateParentHierarchyWithId:(id)objValue
                        withADViewGroup:(ADViewGroup *)viewGroup {
  ASViewGroupImpl_setAnimateParentHierarchyWithId_withADViewGroup_(objValue, viewGroup);
}

+ (void)setLayoutTransitionDurationWithId:(id)objValue
                          withADViewGroup:(ADViewGroup *)viewGroup {
  ASViewGroupImpl_setLayoutTransitionDurationWithId_withADViewGroup_(objValue, viewGroup);
}

+ (void)setLayoutTransitionWithId:(id)objValue
                  withADViewGroup:(ADViewGroup *)viewGroup {
  ASViewGroupImpl_setLayoutTransitionWithId_withADViewGroup_(objValue, viewGroup);
}

+ (void)setPaddingVerticalWithASIWidget:(id<ASIWidget>)w
                                 withId:(id)objValue {
  ASViewGroupImpl_setPaddingVerticalWithASIWidget_withId_(w, objValue);
}

+ (void)setPaddingHorizontalWithASIWidget:(id<ASIWidget>)w
                                   withId:(id)objValue {
  ASViewGroupImpl_setPaddingHorizontalWithASIWidget_withId_(w, objValue);
}

+ (void)setPaddingTopWithASIWidget:(id<ASIWidget>)w
                            withId:(id)objValue {
  ASViewGroupImpl_setPaddingTopWithASIWidget_withId_(w, objValue);
}

+ (void)setPaddingEndWithASIWidget:(id<ASIWidget>)w
                            withId:(id)objValue {
  ASViewGroupImpl_setPaddingEndWithASIWidget_withId_(w, objValue);
}

+ (void)setPaddingStartWithASIWidget:(id<ASIWidget>)w
                              withId:(id)objValue {
  ASViewGroupImpl_setPaddingStartWithASIWidget_withId_(w, objValue);
}

+ (void)setPaddingLeftWithASIWidget:(id<ASIWidget>)w
                             withId:(id)objValue {
  ASViewGroupImpl_setPaddingLeftWithASIWidget_withId_(w, objValue);
}

+ (void)setPaddingRightWithASIWidget:(id<ASIWidget>)w
                              withId:(id)objValue {
  ASViewGroupImpl_setPaddingRightWithASIWidget_withId_(w, objValue);
}

+ (void)setPaddingBottomWithASIWidget:(id<ASIWidget>)w
                               withId:(id)objValue {
  ASViewGroupImpl_setPaddingBottomWithASIWidget_withId_(w, objValue);
}

+ (void)setPaddingWithASIWidget:(id<ASIWidget>)w
                         withId:(id)objValue {
  ASViewGroupImpl_setPaddingWithASIWidget_withId_(w, objValue);
}

+ (id)getPaddingTopWithASIWidget:(id<ASIWidget>)w {
  return ASViewGroupImpl_getPaddingTopWithASIWidget_(w);
}

+ (id)getPaddingLeftWithASIWidget:(id<ASIWidget>)w {
  return ASViewGroupImpl_getPaddingLeftWithASIWidget_(w);
}

+ (id)getPaddingRightWithASIWidget:(id<ASIWidget>)w {
  return ASViewGroupImpl_getPaddingRightWithASIWidget_(w);
}

+ (id)getPaddingBottomWithASIWidget:(id<ASIWidget>)w {
  return ASViewGroupImpl_getPaddingBottomWithASIWidget_(w);
}

+ (void)setOnChildViewRemovedWithADViewGroup:(ADViewGroup *)viewGroup
                               withASIWidget:(id<ASIWidget>)w
                                      withId:(id)objValue {
  ASViewGroupImpl_setOnChildViewRemovedWithADViewGroup_withASIWidget_withId_(viewGroup, w, objValue);
}

+ (void)setOnChildViewAddedWithADViewGroup:(ADViewGroup *)viewGroup
                             withASIWidget:(id<ASIWidget>)w
                                    withId:(id)objValue {
  ASViewGroupImpl_setOnChildViewAddedWithADViewGroup_withASIWidget_withId_(viewGroup, w, objValue);
}

+ (jboolean)isAttributeSupportedWithASWidgetAttribute:(ASWidgetAttribute *)key {
  return ASViewGroupImpl_isAttributeSupportedWithASWidgetAttribute_(key);
}

+ (void)registerCommandConveterWithASIWidget:(id<ASIWidget>)widget {
  ASViewGroupImpl_registerCommandConveterWithASIWidget_(widget);
}

+ (void)applyClipToPaddingCommandWithASIWidget:(id<ASIWidget>)w
                                   withBoolean:(jboolean)add {
  ASViewGroupImpl_applyClipToPaddingCommandWithASIWidget_withBoolean_(w, add);
}

+ (void)nativeRemoveViewWithASIWidget:(id<ASIWidget>)widget {
  ASViewGroupImpl_nativeRemoveViewWithASIWidget_(widget);
}

+ (void)removeViewWithId:(id)view {
  ASViewGroupImpl_removeViewWithId_(view);
}

+ (void)nativeAddViewWithId:(id)uiView
                     withId:(id)w {
  ASViewGroupImpl_nativeAddViewWithId_withId_(uiView, w);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 4, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 5, 6, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x9, 7, 8, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x9, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 13, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 15, 14, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 16, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 17, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 18, 12, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 19, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 20, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 21, 12, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0xa, 22, 23, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0xa, 24, 23, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0xa, 25, 23, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0xa, 26, 23, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 27, 28, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 29, 28, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 30, 31, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 32, 31, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 33, 31, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 34, 31, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 35, 28, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 36, 28, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 37, 28, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 38, 28, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 39, 28, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 40, 28, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 41, 28, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 42, 28, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 43, 28, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0xa, 44, 45, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0xa, 46, 45, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0xa, 47, 45, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0xa, 48, 45, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 49, 50, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 51, 50, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 52, 53, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 54, 45, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 55, 56, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 57, 45, -1, -1, -1, -1 },
    { NULL, "V", 0x109, 58, 59, -1, -1, -1, -1 },
    { NULL, "V", 0x109, 60, 14, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(register__WithNSString:);
  methods[2].selector = @selector(setAttributeWithASIWidget:withASWidgetAttribute:withNSString:withId:withASILifeCycleDecorator:);
  methods[3].selector = @selector(setMyAttributeWithASIWidget:withASWidgetAttribute:withNSString:withId:withASILifeCycleDecorator:);
  methods[4].selector = @selector(setChildAttributeWithASIWidget:withASWidgetAttribute:withId:withId:);
  methods[5].selector = @selector(getAttributeWithASIWidget:withASWidgetAttribute:withASILifeCycleDecorator:);
  methods[6].selector = @selector(getChildAttributeWithASIWidget:withASWidgetAttribute:);
  methods[7].selector = @selector(setMarginWithId:withId:withASIWidget:);
  methods[8].selector = @selector(setBottomMarginWithId:withId:);
  methods[9].selector = @selector(setTopMarginWithId:withId:);
  methods[10].selector = @selector(setVerticalMarginWithId:withId:withASIWidget:);
  methods[11].selector = @selector(setLeftMarginWithId:withId:withASIWidget:);
  methods[12].selector = @selector(setRightMarginWithId:withId:withASIWidget:);
  methods[13].selector = @selector(setHorizontalMarginWithId:withId:withASIWidget:);
  methods[14].selector = @selector(setEndMarginWithId:withId:withASIWidget:);
  methods[15].selector = @selector(setStartMarginWithId:withId:withASIWidget:);
  methods[16].selector = @selector(getRightMarginWithADView:);
  methods[17].selector = @selector(getLeftMarginWithADView:);
  methods[18].selector = @selector(getTopMarginWithADView:);
  methods[19].selector = @selector(getBottomMarginWithADView:);
  methods[20].selector = @selector(addTemplateWithASIWidget:withId:);
  methods[21].selector = @selector(setChildWithASIWidget:withId:);
  methods[22].selector = @selector(animateLayoutChangesWithId:withADViewGroup:);
  methods[23].selector = @selector(setAnimateParentHierarchyWithId:withADViewGroup:);
  methods[24].selector = @selector(setLayoutTransitionDurationWithId:withADViewGroup:);
  methods[25].selector = @selector(setLayoutTransitionWithId:withADViewGroup:);
  methods[26].selector = @selector(setPaddingVerticalWithASIWidget:withId:);
  methods[27].selector = @selector(setPaddingHorizontalWithASIWidget:withId:);
  methods[28].selector = @selector(setPaddingTopWithASIWidget:withId:);
  methods[29].selector = @selector(setPaddingEndWithASIWidget:withId:);
  methods[30].selector = @selector(setPaddingStartWithASIWidget:withId:);
  methods[31].selector = @selector(setPaddingLeftWithASIWidget:withId:);
  methods[32].selector = @selector(setPaddingRightWithASIWidget:withId:);
  methods[33].selector = @selector(setPaddingBottomWithASIWidget:withId:);
  methods[34].selector = @selector(setPaddingWithASIWidget:withId:);
  methods[35].selector = @selector(getPaddingTopWithASIWidget:);
  methods[36].selector = @selector(getPaddingLeftWithASIWidget:);
  methods[37].selector = @selector(getPaddingRightWithASIWidget:);
  methods[38].selector = @selector(getPaddingBottomWithASIWidget:);
  methods[39].selector = @selector(setOnChildViewRemovedWithADViewGroup:withASIWidget:withId:);
  methods[40].selector = @selector(setOnChildViewAddedWithADViewGroup:withASIWidget:withId:);
  methods[41].selector = @selector(isAttributeSupportedWithASWidgetAttribute:);
  methods[42].selector = @selector(registerCommandConveterWithASIWidget:);
  methods[43].selector = @selector(applyClipToPaddingCommandWithASIWidget:withBoolean:);
  methods[44].selector = @selector(nativeRemoveViewWithASIWidget:);
  methods[45].selector = @selector(removeViewWithId:);
  methods[46].selector = @selector(nativeAddViewWithId:withId:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "register", "LNSString;", "setAttribute", "LASIWidget;LASWidgetAttribute;LNSString;LNSObject;LASILifeCycleDecorator;", "setMyAttribute", "setChildAttribute", "LASIWidget;LASWidgetAttribute;LNSObject;LNSObject;", "getAttribute", "LASIWidget;LASWidgetAttribute;LASILifeCycleDecorator;", "getChildAttribute", "LASIWidget;LASWidgetAttribute;", "setMargin", "LNSObject;LNSObject;LASIWidget;", "setBottomMargin", "LNSObject;LNSObject;", "setTopMargin", "setVerticalMargin", "setLeftMargin", "setRightMargin", "setHorizontalMargin", "setEndMargin", "setStartMargin", "getRightMargin", "LADView;", "getLeftMargin", "getTopMargin", "getBottomMargin", "addTemplate", "LASIWidget;LNSObject;", "setChild", "animateLayoutChanges", "LNSObject;LADViewGroup;", "setAnimateParentHierarchy", "setLayoutTransitionDuration", "setLayoutTransition", "setPaddingVertical", "setPaddingHorizontal", "setPaddingTop", "setPaddingEnd", "setPaddingStart", "setPaddingLeft", "setPaddingRight", "setPaddingBottom", "setPadding", "getPaddingTop", "LASIWidget;", "getPaddingLeft", "getPaddingRight", "getPaddingBottom", "setOnChildViewRemoved", "LADViewGroup;LASIWidget;LNSObject;", "setOnChildViewAdded", "isAttributeSupported", "LASWidgetAttribute;", "registerCommandConveter", "applyClipToPaddingCommand", "LASIWidget;Z", "nativeRemoveView", "removeView", "LNSObject;", "nativeAddView", "LASViewGroupImpl_LayoutTransition;LASViewGroupImpl_LayoutMode;LASViewGroupImpl_OnHierarchyChangeListener;LASViewGroupImpl_ViewGroupCommandBuilder;LASViewGroupImpl_ViewGroupCommandBuilderInternal;LASViewGroupImpl_ViewGroupBean;LASViewGroupImpl_ViewGroupParamsBean;LASViewGroupImpl_ViewGroupCommandParamsBuilderInternal;LASViewGroupImpl_ViewGroupCommandParamsBuilder;LASViewGroupImpl_ClipPaddingMaskCommand;" };
  static const J2ObjcClassInfo _ASViewGroupImpl = { "ViewGroupImpl", "com.ashera.layout", ptrTable, methods, NULL, 7, 0x1, 47, 0, -1, 61, -1, -1, -1 };
  return &_ASViewGroupImpl;
}

@end

void ASViewGroupImpl_init(ASViewGroupImpl *self) {
  NSObject_init(self);
}

ASViewGroupImpl *new_ASViewGroupImpl_init() {
  J2OBJC_NEW_IMPL(ASViewGroupImpl, init)
}

ASViewGroupImpl *create_ASViewGroupImpl_init() {
  J2OBJC_CREATE_IMPL(ASViewGroupImpl, init)
}

void ASViewGroupImpl_register__WithNSString_(NSString *localName) {
  ASViewGroupImpl_initialize();
  ASViewGroupModelImpl_register__WithNSString_(localName);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"animateLayoutChanges"])) withTypeWithNSString:@"boolean"]);
  ASConverterFactory_register__WithNSString_withASIConverter_(@"ViewGroup.layoutTransition", new_ASViewGroupImpl_LayoutTransition_init());
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layoutTransition"])) withTypeWithNSString:@"ViewGroup.layoutTransition"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layoutTransitionDuration"])) withTypeWithNSString:@"int"])) withOrderWithInt:3]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"animateParentHierarchy"])) withTypeWithNSString:@"boolean"])) withOrderWithInt:3]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"listitem"])) withTypeWithNSString:@"template"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"padding"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"paddingBottom"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"paddingRight"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"paddingLeft"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"paddingStart"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"paddingEnd"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"paddingTop"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"paddingHorizontal"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"paddingVertical"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"addStatesFromChildren"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"onChildViewAdded"])) withTypeWithNSString:@"string"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"clipChildren"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"clipToPadding"])) withTypeWithNSString:@"boolean"]);
  ASConverterFactory_register__WithNSString_withASIConverter_(@"ViewGroup.layoutMode", new_ASViewGroupImpl_LayoutMode_init());
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layoutMode"])) withTypeWithNSString:@"ViewGroup.layoutMode"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"onChildViewRemoved"])) withTypeWithNSString:@"string"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"childXml"])) withTypeWithNSString:@"resourcestring"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_marginBottom"])) withTypeWithNSString:@"dimension"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_marginTop"])) withTypeWithNSString:@"dimension"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_marginStart"])) withTypeWithNSString:@"dimension"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_marginEnd"])) withTypeWithNSString:@"dimension"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_marginLeft"])) withTypeWithNSString:@"dimension"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_marginRight"])) withTypeWithNSString:@"dimension"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_margin"])) withTypeWithNSString:@"dimension"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_marginHorizontal"])) withTypeWithNSString:@"dimension"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_marginVertical"])) withTypeWithNSString:@"dimension"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_width"])) withTypeWithNSString:@"dimension"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_height"])) withTypeWithNSString:@"dimension"])) forChild]);
}

void ASViewGroupImpl_setAttributeWithASIWidget_withASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(id<ASIWidget> w, ASWidgetAttribute *key, NSString *strValue, id objValue, id<ASILifeCycleDecorator> decorator) {
  ASViewGroupImpl_initialize();
  ADViewGroup *viewGroup = ((ADViewGroup *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADViewGroup class]));
  ASViewGroupModelImpl_setAttributeWithASIWidget_withASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(w, key, strValue, objValue, decorator);
  ASViewGroupImpl_setMyAttributeWithASIWidget_withASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(w, key, strValue, objValue, decorator);
}

void ASViewGroupImpl_setMyAttributeWithASIWidget_withASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(id<ASIWidget> w, ASWidgetAttribute *key, NSString *strValue, id objValue, id<ASILifeCycleDecorator> decorator) {
  ASViewGroupImpl_initialize();
  ADViewGroup *viewGroup = ((ADViewGroup *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADViewGroup class]));
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"animateLayoutChanges", @"layoutTransition", @"layoutTransitionDuration", @"animateParentHierarchy", @"listitem", @"padding", @"paddingBottom", @"paddingRight", @"paddingLeft", @"paddingStart", @"paddingEnd", @"paddingTop", @"paddingHorizontal", @"paddingVertical", @"addStatesFromChildren", @"onChildViewAdded", @"clipChildren", @"clipToPadding", @"layoutMode", @"onChildViewRemoved", @"childXml" }, 21)) {
    case 0:
    {
      ASViewGroupImpl_animateLayoutChangesWithId_withADViewGroup_(objValue, viewGroup);
    }
    break;
    case 1:
    {
      ASViewGroupImpl_setLayoutTransitionWithId_withADViewGroup_(objValue, viewGroup);
    }
    break;
    case 2:
    {
      ASViewGroupImpl_setLayoutTransitionDurationWithId_withADViewGroup_(objValue, viewGroup);
    }
    break;
    case 3:
    {
      ASViewGroupImpl_setAnimateParentHierarchyWithId_withADViewGroup_(objValue, viewGroup);
    }
    break;
    case 4:
    {
      ASViewGroupImpl_addTemplateWithASIWidget_withId_(w, objValue);
    }
    break;
    case 5:
    {
      ASViewGroupImpl_setPaddingWithASIWidget_withId_(w, objValue);
    }
    break;
    case 6:
    {
      ASViewGroupImpl_setPaddingBottomWithASIWidget_withId_(w, objValue);
    }
    break;
    case 7:
    {
      ASViewGroupImpl_setPaddingRightWithASIWidget_withId_(w, objValue);
    }
    break;
    case 8:
    {
      ASViewGroupImpl_setPaddingLeftWithASIWidget_withId_(w, objValue);
    }
    break;
    case 9:
    {
      ASViewGroupImpl_setPaddingStartWithASIWidget_withId_(w, objValue);
    }
    break;
    case 10:
    {
      ASViewGroupImpl_setPaddingEndWithASIWidget_withId_(w, objValue);
    }
    break;
    case 11:
    {
      ASViewGroupImpl_setPaddingTopWithASIWidget_withId_(w, objValue);
    }
    break;
    case 12:
    {
      ASViewGroupImpl_setPaddingHorizontalWithASIWidget_withId_(w, objValue);
    }
    break;
    case 13:
    {
      ASViewGroupImpl_setPaddingVerticalWithASIWidget_withId_(w, objValue);
    }
    break;
    case 14:
    {
      [((ADViewGroup *) nil_chk(viewGroup)) setAddStatesFromChildrenWithBoolean:[((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]))) booleanValue]];
    }
    break;
    case 15:
    {
      ASViewGroupImpl_setOnChildViewAddedWithADViewGroup_withASIWidget_withId_(viewGroup, w, objValue);
    }
    break;
    case 16:
    {
      ASViewImpl_setClipsToBoundsWithId_withId_([w asNativeWidget], objValue);
    }
    break;
    case 17:
    {
      [((ADViewGroup *) nil_chk(viewGroup)) setClipToPaddingWithBoolean:[((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]))) booleanValue]];
      ASViewGroupImpl_applyClipToPaddingCommandWithASIWidget_withBoolean_(w, [((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]))) booleanValue]);
    }
    break;
    case 18:
    {
      [((ADViewGroup *) nil_chk(viewGroup)) setLayoutModeWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
    }
    break;
    case 19:
    {
      ASViewGroupImpl_setOnChildViewRemovedWithADViewGroup_withASIWidget_withId_(viewGroup, w, objValue);
    }
    break;
    case 20:
    {
      ASViewGroupImpl_setChildWithASIWidget_withId_(w, objValue);
    }
    break;
    default:
    break;
  }
}

void ASViewGroupImpl_setChildAttributeWithASIWidget_withASWidgetAttribute_withId_withId_(id<ASIWidget> w, ASWidgetAttribute *key, id objValue, id layoutParams) {
  ASViewGroupImpl_initialize();
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"layout_marginBottom", @"layout_marginTop", @"layout_marginStart", @"layout_marginEnd", @"layout_marginLeft", @"layout_marginRight", @"layout_margin", @"layout_marginHorizontal", @"layout_marginVertical" }, 9)) {
    case 0:
    {
      ASViewGroupImpl_setBottomMarginWithId_withId_(objValue, layoutParams);
    }
    break;
    case 1:
    {
      ASViewGroupImpl_setTopMarginWithId_withId_(objValue, layoutParams);
    }
    break;
    case 2:
    {
      {
        ASViewGroupImpl_setStartMarginWithId_withId_withASIWidget_(objValue, layoutParams, w);
      }
    }
    break;
    case 3:
    {
      {
        ASViewGroupImpl_setEndMarginWithId_withId_withASIWidget_(objValue, layoutParams, w);
      }
    }
    break;
    case 4:
    {
      ASViewGroupImpl_setLeftMarginWithId_withId_withASIWidget_(objValue, layoutParams, w);
    }
    break;
    case 5:
    {
      ASViewGroupImpl_setRightMarginWithId_withId_withASIWidget_(objValue, layoutParams, w);
    }
    break;
    case 6:
    {
      ASViewGroupImpl_setMarginWithId_withId_withASIWidget_(objValue, layoutParams, w);
    }
    break;
    case 7:
    {
      ASViewGroupImpl_setHorizontalMarginWithId_withId_withASIWidget_(objValue, layoutParams, w);
    }
    break;
    case 8:
    {
      ASViewGroupImpl_setVerticalMarginWithId_withId_withASIWidget_(objValue, layoutParams, w);
    }
    break;
    default:
    break;
  }
}

id ASViewGroupImpl_getAttributeWithASIWidget_withASWidgetAttribute_withASILifeCycleDecorator_(id<ASIWidget> w, ASWidgetAttribute *key, id<ASILifeCycleDecorator> decorator) {
  ASViewGroupImpl_initialize();
  ADViewGroup *viewGroup = ((ADViewGroup *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADViewGroup class]));
  id attributeValue = ASViewGroupModelImpl_getAttributeWithASIWidget_withASWidgetAttribute_withASILifeCycleDecorator_(w, key, decorator);
  if (attributeValue != nil) {
    return attributeValue;
  }
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"paddingBottom", @"paddingRight", @"paddingLeft", @"paddingStart", @"paddingEnd", @"paddingTop", @"addStatesFromChildren", @"clipChildren", @"clipToPadding", @"layoutMode" }, 10)) {
    case 0:
    {
      return ASViewGroupImpl_getPaddingBottomWithASIWidget_(w);
    }
    case 1:
    {
      return ASViewGroupImpl_getPaddingRightWithASIWidget_(w);
    }
    case 2:
    {
      return ASViewGroupImpl_getPaddingLeftWithASIWidget_(w);
    }
    case 3:
    {
      return ASViewGroupImpl_getPaddingLeftWithASIWidget_(w);
    }
    case 4:
    {
      return ASViewGroupImpl_getPaddingRightWithASIWidget_(w);
    }
    case 5:
    {
      return ASViewGroupImpl_getPaddingTopWithASIWidget_(w);
    }
    case 6:
    {
      return JavaLangBoolean_valueOfWithBoolean_([((ADViewGroup *) nil_chk(viewGroup)) addStatesFromChildren]);
    }
    case 7:
    {
      return ASViewImpl_getClipsToBoundsWithId_([w asNativeWidget]);
    }
    case 8:
    {
      return JavaLangBoolean_valueOfWithBoolean_([((ADViewGroup *) nil_chk(viewGroup)) getClipToPadding]);
    }
    case 9:
    {
      return JavaLangInteger_valueOfWithInt_([((ADViewGroup *) nil_chk(viewGroup)) getLayoutMode]);
    }
  }
  return nil;
}

id ASViewGroupImpl_getChildAttributeWithASIWidget_withASWidgetAttribute_(id<ASIWidget> w, ASWidgetAttribute *key) {
  ASViewGroupImpl_initialize();
  ADView *viewGroup = ((ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]));
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"layout_marginBottom", @"layout_marginTop", @"layout_marginStart", @"layout_marginEnd", @"layout_marginLeft", @"layout_marginRight" }, 6)) {
    case 0:
    {
      return ASViewGroupImpl_getBottomMarginWithADView_(viewGroup);
    }
    case 1:
    {
      return ASViewGroupImpl_getTopMarginWithADView_(viewGroup);
    }
    case 2:
    {
      return ASViewGroupImpl_getLeftMarginWithADView_(viewGroup);
    }
    case 3:
    {
      return ASViewGroupImpl_getRightMarginWithADView_(viewGroup);
    }
    case 4:
    {
      return ASViewGroupImpl_getLeftMarginWithADView_(viewGroup);
    }
    case 5:
    {
      return ASViewGroupImpl_getRightMarginWithADView_(viewGroup);
    }
  }
  return nil;
}

void ASViewGroupImpl_setMarginWithId_withId_withASIWidget_(id objValue, id layoutParams, id<ASIWidget> w) {
  ASViewGroupImpl_initialize();
  ASViewGroupImpl_setBottomMarginWithId_withId_(objValue, layoutParams);
  ASViewGroupImpl_setTopMarginWithId_withId_(objValue, layoutParams);
  ASViewGroupImpl_setStartMarginWithId_withId_withASIWidget_(objValue, layoutParams, w);
  ASViewGroupImpl_setEndMarginWithId_withId_withASIWidget_(objValue, layoutParams, w);
}

void ASViewGroupImpl_setBottomMarginWithId_withId_(id objValue, id layoutParams) {
  ASViewGroupImpl_initialize();
  jint valueInt = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
  if ([layoutParams isKindOfClass:[ADViewGroup_MarginLayoutParams class]]) {
    ((ADViewGroup_MarginLayoutParams *) nil_chk(((ADViewGroup_MarginLayoutParams *) layoutParams)))->bottomMargin_ = valueInt;
  }
}

void ASViewGroupImpl_setTopMarginWithId_withId_(id objValue, id layoutParams) {
  ASViewGroupImpl_initialize();
  jint valueInt = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
  if ([layoutParams isKindOfClass:[ADViewGroup_MarginLayoutParams class]]) {
    ((ADViewGroup_MarginLayoutParams *) nil_chk(((ADViewGroup_MarginLayoutParams *) layoutParams)))->topMargin_ = valueInt;
  }
}

void ASViewGroupImpl_setVerticalMarginWithId_withId_withASIWidget_(id objValue, id layoutParams, id<ASIWidget> w) {
  ASViewGroupImpl_initialize();
  jint valueInt = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
  if ([layoutParams isKindOfClass:[ADViewGroup_MarginLayoutParams class]]) {
    ((ADViewGroup_MarginLayoutParams *) nil_chk(((ADViewGroup_MarginLayoutParams *) layoutParams)))->topMargin_ = valueInt;
    ((ADViewGroup_MarginLayoutParams *) nil_chk(((ADViewGroup_MarginLayoutParams *) layoutParams)))->bottomMargin_ = valueInt;
  }
}

void ASViewGroupImpl_setLeftMarginWithId_withId_withASIWidget_(id objValue, id layoutParams, id<ASIWidget> w) {
  ASViewGroupImpl_initialize();
  {
    ASViewGroupImpl_setStartMarginWithId_withId_withASIWidget_(objValue, layoutParams, w);
  }
}

void ASViewGroupImpl_setRightMarginWithId_withId_withASIWidget_(id objValue, id layoutParams, id<ASIWidget> w) {
  ASViewGroupImpl_initialize();
  {
    ASViewGroupImpl_setEndMarginWithId_withId_withASIWidget_(objValue, layoutParams, w);
  }
}

void ASViewGroupImpl_setHorizontalMarginWithId_withId_withASIWidget_(id objValue, id layoutParams, id<ASIWidget> w) {
  ASViewGroupImpl_initialize();
  {
    ASViewGroupImpl_setEndMarginWithId_withId_withASIWidget_(objValue, layoutParams, w);
    ASViewGroupImpl_setStartMarginWithId_withId_withASIWidget_(objValue, layoutParams, w);
  }
}

void ASViewGroupImpl_setEndMarginWithId_withId_withASIWidget_(id objValue, id layoutParams, id<ASIWidget> w) {
  ASViewGroupImpl_initialize();
  jint valueInt = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
  if ([layoutParams isKindOfClass:[ADViewGroup_MarginLayoutParams class]]) {
    ADViewGroup_MarginLayoutParams *marginParams = (ADViewGroup_MarginLayoutParams *) layoutParams;
    [((ADViewGroup_MarginLayoutParams *) nil_chk(marginParams)) setMarginEndWithInt:valueInt];
    [((ADView *) nil_chk(((ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class])))) setLayoutParamsWithADViewGroup_LayoutParams:marginParams];
  }
}

void ASViewGroupImpl_setStartMarginWithId_withId_withASIWidget_(id objValue, id layoutParams, id<ASIWidget> w) {
  ASViewGroupImpl_initialize();
  jint valueInt = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
  if ([layoutParams isKindOfClass:[ADViewGroup_MarginLayoutParams class]]) {
    ADViewGroup_MarginLayoutParams *marginParams = (ADViewGroup_MarginLayoutParams *) layoutParams;
    [((ADViewGroup_MarginLayoutParams *) nil_chk(marginParams)) setMarginStartWithInt:valueInt];
    [((ADView *) nil_chk(((ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class])))) setLayoutParamsWithADViewGroup_LayoutParams:marginParams];
  }
}

id ASViewGroupImpl_getRightMarginWithADView_(ADView *viewGroup) {
  ASViewGroupImpl_initialize();
  return JavaLangInteger_valueOfWithInt_([((ADViewGroup_MarginLayoutParams *) nil_chk(((ADViewGroup_MarginLayoutParams *) cast_chk([((ADView *) nil_chk(viewGroup)) getLayoutParams], [ADViewGroup_MarginLayoutParams class])))) getMarginEnd]);
}

id ASViewGroupImpl_getLeftMarginWithADView_(ADView *viewGroup) {
  ASViewGroupImpl_initialize();
  return JavaLangInteger_valueOfWithInt_([((ADViewGroup_MarginLayoutParams *) nil_chk(((ADViewGroup_MarginLayoutParams *) cast_chk([((ADView *) nil_chk(viewGroup)) getLayoutParams], [ADViewGroup_MarginLayoutParams class])))) getMarginStart]);
}

id ASViewGroupImpl_getTopMarginWithADView_(ADView *viewGroup) {
  ASViewGroupImpl_initialize();
  return JavaLangInteger_valueOfWithInt_(((ADViewGroup_MarginLayoutParams *) nil_chk(((ADViewGroup_MarginLayoutParams *) cast_chk([((ADView *) nil_chk(viewGroup)) getLayoutParams], [ADViewGroup_MarginLayoutParams class]))))->topMargin_);
}

id ASViewGroupImpl_getBottomMarginWithADView_(ADView *viewGroup) {
  ASViewGroupImpl_initialize();
  return JavaLangInteger_valueOfWithInt_(((ADViewGroup_MarginLayoutParams *) nil_chk(((ADViewGroup_MarginLayoutParams *) cast_chk([((ADView *) nil_chk(viewGroup)) getLayoutParams], [ADViewGroup_MarginLayoutParams class]))))->bottomMargin_);
}

void ASViewGroupImpl_addTemplateWithASIWidget_withId_(id<ASIWidget> w, id objValue) {
  ASViewGroupImpl_initialize();
  [((id<ASHasWidgets>) nil_chk(((id<ASHasWidgets>) cast_check(w, ASHasWidgets_class_())))) addTemplateWithId:objValue];
}

void ASViewGroupImpl_setChildWithASIWidget_withId_(id<ASIWidget> w, id xml) {
  ASViewGroupImpl_initialize();
  if ([ASHasWidgets_class_() isInstance:w]) {
    id<ASHasWidgets> hasWidgets = (id<ASHasWidgets>) cast_check(w, ASHasWidgets_class_());
    [((id<ASHasWidgets>) nil_chk(hasWidgets)) clear];
    (void) ASPluginInvoker_parseWithParentWithNSString_withBoolean_withASHasWidgets_withASIFragment_((NSString *) cast_chk(xml, [NSString class]), false, hasWidgets, [((id<ASIWidget>) nil_chk(w)) getFragment]);
    NSString *javascript = [((id<ASIFragment>) nil_chk([w getFragment])) getInlineResourceWithNSString:@"javascript"];
    if (javascript != nil) {
      id<JavaUtilMap> dataMap = ASPluginInvoker_getJSONCompatMap();
      (void) [((id<JavaUtilMap>) nil_chk(dataMap)) putWithId:@"action" withId:@"nativeevent"];
      (void) [dataMap putWithId:@"fragmentId" withId:[((id<ASIFragment>) nil_chk([w getFragment])) getFragmentId]];
      (void) [dataMap putWithId:@"javascript" withId:javascript];
      [((id<ASIActivity>) nil_chk([((id<ASIFragment>) nil_chk([w getFragment])) getRootActivity])) sendEventMessageWithJavaUtilMap:dataMap];
    }
  }
}

void ASViewGroupImpl_animateLayoutChangesWithId_withADViewGroup_(id objValue, ADViewGroup *view) {
  ASViewGroupImpl_initialize();
  {
    if (objValue != nil && [(JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]) booleanValue]) {
      ADLayoutTransition *lt = new_ADLayoutTransition_init();
      [lt setAnimateParentHierarchyWithBoolean:false];
      [((ADViewGroup *) nil_chk(view)) setLayoutTransitionWithADLayoutTransition:lt];
    }
    else {
      [((ADViewGroup *) nil_chk(view)) setLayoutTransitionWithADLayoutTransition:nil];
    }
  }
}

void ASViewGroupImpl_setAnimateParentHierarchyWithId_withADViewGroup_(id objValue, ADViewGroup *viewGroup) {
  ASViewGroupImpl_initialize();
  ADLayoutTransition *layoutTransition = [((ADViewGroup *) nil_chk(viewGroup)) getLayoutTransition];
  if (layoutTransition != nil) {
    [layoutTransition setAnimateParentHierarchyWithBoolean:[((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]))) booleanValue]];
  }
}

void ASViewGroupImpl_setLayoutTransitionDurationWithId_withADViewGroup_(id objValue, ADViewGroup *viewGroup) {
  ASViewGroupImpl_initialize();
  ADLayoutTransition *layoutTransition = [((ADViewGroup *) nil_chk(viewGroup)) getLayoutTransition];
  if (layoutTransition != nil) {
    [layoutTransition setDurationWithLong:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
  }
}

void ASViewGroupImpl_setLayoutTransitionWithId_withADViewGroup_(id objValue, ADViewGroup *viewGroup) {
  ASViewGroupImpl_initialize();
  ADLayoutTransition *lt = new_ADLayoutTransition_init();
  [lt setAnimateParentHierarchyWithBoolean:false];
  [lt disableTransitionTypeWithInt:ADLayoutTransition_CHANGE_APPEARING];
  [lt disableTransitionTypeWithInt:ADLayoutTransition_CHANGE_DISAPPEARING];
  [lt disableTransitionTypeWithInt:ADLayoutTransition_APPEARING];
  [lt disableTransitionTypeWithInt:ADLayoutTransition_DISAPPEARING];
  [lt disableTransitionTypeWithInt:ADLayoutTransition_CHANGING];
  jint flag = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
  if ((flag & (jint) 0x1) != 0) {
    [lt enableTransitionTypeWithInt:ADLayoutTransition_CHANGE_APPEARING];
  }
  if ((flag & (jint) 0x02) != 0) {
    [lt enableTransitionTypeWithInt:ADLayoutTransition_CHANGE_DISAPPEARING];
  }
  if ((flag & (jint) 0x04) != 0) {
    [lt enableTransitionTypeWithInt:ADLayoutTransition_APPEARING];
  }
  if ((flag & (jint) 0x08) != 0) {
    [lt enableTransitionTypeWithInt:ADLayoutTransition_DISAPPEARING];
  }
  if ((flag & (jint) 0x10) != 0) {
    [lt enableTransitionTypeWithInt:ADLayoutTransition_CHANGING];
  }
  [((ADViewGroup *) nil_chk(viewGroup)) setLayoutTransitionWithADLayoutTransition:lt];
}

void ASViewGroupImpl_setPaddingVerticalWithASIWidget_withId_(id<ASIWidget> w, id objValue) {
  ASViewGroupImpl_initialize();
  ASViewImpl_setPaddingVerticalWithId_withADView_(objValue, (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]));
}

void ASViewGroupImpl_setPaddingHorizontalWithASIWidget_withId_(id<ASIWidget> w, id objValue) {
  ASViewGroupImpl_initialize();
  ASViewImpl_setPaddingHorizontalWithId_withADView_(objValue, (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]));
}

void ASViewGroupImpl_setPaddingTopWithASIWidget_withId_(id<ASIWidget> w, id objValue) {
  ASViewGroupImpl_initialize();
  ASViewImpl_setPaddingTopWithId_withADView_(objValue, (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]));
}

void ASViewGroupImpl_setPaddingEndWithASIWidget_withId_(id<ASIWidget> w, id objValue) {
  ASViewGroupImpl_initialize();
  ASViewImpl_setPaddingRightWithId_withADView_(objValue, (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]));
}

void ASViewGroupImpl_setPaddingStartWithASIWidget_withId_(id<ASIWidget> w, id objValue) {
  ASViewGroupImpl_initialize();
  ASViewImpl_setPaddingLeftWithId_withADView_(objValue, (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]));
}

void ASViewGroupImpl_setPaddingLeftWithASIWidget_withId_(id<ASIWidget> w, id objValue) {
  ASViewGroupImpl_initialize();
  ASViewImpl_setPaddingLeftWithId_withADView_(objValue, (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]));
}

void ASViewGroupImpl_setPaddingRightWithASIWidget_withId_(id<ASIWidget> w, id objValue) {
  ASViewGroupImpl_initialize();
  ASViewImpl_setPaddingRightWithId_withADView_(objValue, (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]));
}

void ASViewGroupImpl_setPaddingBottomWithASIWidget_withId_(id<ASIWidget> w, id objValue) {
  ASViewGroupImpl_initialize();
  ASViewImpl_setPaddingBottomWithId_withADView_(objValue, (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]));
}

void ASViewGroupImpl_setPaddingWithASIWidget_withId_(id<ASIWidget> w, id objValue) {
  ASViewGroupImpl_initialize();
  ASViewImpl_setPaddingWithId_withADView_(objValue, (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]));
}

id ASViewGroupImpl_getPaddingTopWithASIWidget_(id<ASIWidget> w) {
  ASViewGroupImpl_initialize();
  return ASViewImpl_getPaddingTopWithASIWidget_withADView_(w, (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]));
}

id ASViewGroupImpl_getPaddingLeftWithASIWidget_(id<ASIWidget> w) {
  ASViewGroupImpl_initialize();
  return ASViewImpl_getPaddingLeftWithASIWidget_withADView_(w, (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]));
}

id ASViewGroupImpl_getPaddingRightWithASIWidget_(id<ASIWidget> w) {
  ASViewGroupImpl_initialize();
  return ASViewImpl_getPaddingRightWithASIWidget_withADView_(w, (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]));
}

id ASViewGroupImpl_getPaddingBottomWithASIWidget_(id<ASIWidget> w) {
  ASViewGroupImpl_initialize();
  return ASViewImpl_getPaddingBottomWithASIWidget_withADView_(w, (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]));
}

void ASViewGroupImpl_setOnChildViewRemovedWithADViewGroup_withASIWidget_withId_(ADViewGroup *viewGroup, id<ASIWidget> w, id objValue) {
  ASViewGroupImpl_initialize();
  id<ADViewGroup_OnHierarchyChangeListener> listener;
  if ([objValue isKindOfClass:[NSString class]]) {
    listener = new_ASViewGroupImpl_OnHierarchyChangeListener_initWithASIWidget_withNSString_(w, (NSString *) objValue);
  }
  else {
    listener = (id<ADViewGroup_OnHierarchyChangeListener>) cast_check(objValue, ADViewGroup_OnHierarchyChangeListener_class_());
  }
  [((ADViewGroup *) nil_chk(viewGroup)) setOnHierarchyChangeListenerWithADViewGroup_OnHierarchyChangeListener:listener];
}

void ASViewGroupImpl_setOnChildViewAddedWithADViewGroup_withASIWidget_withId_(ADViewGroup *viewGroup, id<ASIWidget> w, id objValue) {
  ASViewGroupImpl_initialize();
  id<ADViewGroup_OnHierarchyChangeListener> listener;
  if ([objValue isKindOfClass:[NSString class]]) {
    listener = new_ASViewGroupImpl_OnHierarchyChangeListener_initWithASIWidget_withNSString_(w, (NSString *) objValue);
  }
  else {
    listener = (id<ADViewGroup_OnHierarchyChangeListener>) cast_check(objValue, ADViewGroup_OnHierarchyChangeListener_class_());
  }
  [((ADViewGroup *) nil_chk(viewGroup)) setOnHierarchyChangeListenerWithADViewGroup_OnHierarchyChangeListener:listener];
}

jboolean ASViewGroupImpl_isAttributeSupportedWithASWidgetAttribute_(ASWidgetAttribute *key) {
  ASViewGroupImpl_initialize();
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"animateLayoutChanges", @"layoutTransition", @"layoutTransitionDuration", @"animateParentHierarchy", @"listitem", @"padding", @"paddingBottom", @"paddingRight", @"paddingLeft", @"paddingStart", @"paddingEnd", @"paddingTop", @"paddingHorizontal", @"paddingVertical", @"addStatesFromChildren", @"onChildViewAdded", @"clipChildren", @"clipToPadding", @"layoutMode", @"onChildViewRemoved", @"childXml" }, 21)) {
    case 0:
    {
      return true;
    }
    case 1:
    {
      return true;
    }
    case 2:
    {
      return true;
    }
    case 3:
    {
      return true;
    }
    case 4:
    {
      return true;
    }
    case 5:
    {
      return true;
    }
    case 6:
    {
      return true;
    }
    case 7:
    {
      return true;
    }
    case 8:
    {
      return true;
    }
    case 9:
    {
      return true;
    }
    case 10:
    {
      return true;
    }
    case 11:
    {
      return true;
    }
    case 12:
    {
      return true;
    }
    case 13:
    {
      return true;
    }
    case 14:
    {
      return true;
    }
    case 15:
    {
      return true;
    }
    case 16:
    {
      return true;
    }
    case 17:
    {
      return true;
    }
    case 18:
    {
      return true;
    }
    case 19:
    {
      return true;
    }
    case 20:
    {
      return true;
    }
    default:
    break;
  }
  return false;
}

void ASViewGroupImpl_registerCommandConveterWithASIWidget_(id<ASIWidget> widget) {
  ASViewGroupImpl_initialize();
  ASViewImpl_registerCommandConveterWithASIWidget_(widget);
  [((id<ASIWidget>) nil_chk(widget)) registerForAttributeCommandChainWithPhaseWithNSString:@"predraw" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"clipToPadding" } count:1 type:NSString_class_()]];
}

void ASViewGroupImpl_applyClipToPaddingCommandWithASIWidget_withBoolean_(id<ASIWidget> w, jboolean add) {
  ASViewGroupImpl_initialize();
  [((id<ASIWidget>) nil_chk(w)) applyAttributeCommandWithNSString:@"clipToPadding" withNSString:@"clipToPadding" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){  } count:0 type:NSString_class_()] withBoolean:add withNSObjectArray:[IOSObjectArray newArrayWithLength:0 type:NSObject_class_()]];
}

void ASViewGroupImpl_nativeRemoveViewWithASIWidget_(id<ASIWidget> widget) {
  ASViewGroupImpl_initialize();
  ASViewGroupImpl_removeViewWithId_([((id<ASIWidget>) nil_chk(widget)) asNativeWidget]);
}

void ASViewGroupImpl_removeViewWithId_(id view) {
  ASViewGroupImpl_initialize();
  [(UIView*)view removeFromSuperview];
}

void ASViewGroupImpl_nativeAddViewWithId_withId_(id uiView, id w) {
  ASViewGroupImpl_initialize();
  [((UIView*) uiView) addSubview:w];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASViewGroupImpl)

@implementation ASViewGroupImpl_LayoutTransition

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASViewGroupImpl_LayoutTransition_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilMap>)getMapping {
  return mapping_;
}

- (JavaLangInteger *)getDefault {
  return JavaLangInteger_valueOfWithInt_(0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMapping);
  methods[2].selector = @selector(getDefault);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapping_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "LASViewGroupImpl;" };
  static const J2ObjcClassInfo _ASViewGroupImpl_LayoutTransition = { "LayoutTransition", "com.ashera.layout", ptrTable, methods, fields, 7, 0x18, 3, 1, 2, -1, -1, -1, -1 };
  return &_ASViewGroupImpl_LayoutTransition;
}

@end

void ASViewGroupImpl_LayoutTransition_init(ASViewGroupImpl_LayoutTransition *self) {
  ASAbstractBitFlagConverter_init(self);
  self->mapping_ = new_JavaUtilHashMap_init();
  {
    (void) [self->mapping_ putWithId:@"change_appearing" withId:JavaLangInteger_valueOfWithInt_((jint) 0x01)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"change_disappearing" withId:JavaLangInteger_valueOfWithInt_((jint) 0x02)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"appearing" withId:JavaLangInteger_valueOfWithInt_((jint) 0x04)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"disappearing" withId:JavaLangInteger_valueOfWithInt_((jint) 0x08)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"changing" withId:JavaLangInteger_valueOfWithInt_((jint) 0x10)];
  }
}

ASViewGroupImpl_LayoutTransition *new_ASViewGroupImpl_LayoutTransition_init() {
  J2OBJC_NEW_IMPL(ASViewGroupImpl_LayoutTransition, init)
}

ASViewGroupImpl_LayoutTransition *create_ASViewGroupImpl_LayoutTransition_init() {
  J2OBJC_CREATE_IMPL(ASViewGroupImpl_LayoutTransition, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASViewGroupImpl_LayoutTransition)

@implementation ASViewGroupImpl_LayoutMode

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASViewGroupImpl_LayoutMode_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilMap>)getMapping {
  return mapping_;
}

- (JavaLangInteger *)getDefault {
  return JavaLangInteger_valueOfWithInt_(0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMapping);
  methods[2].selector = @selector(getDefault);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapping_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "LASViewGroupImpl;" };
  static const J2ObjcClassInfo _ASViewGroupImpl_LayoutMode = { "LayoutMode", "com.ashera.layout", ptrTable, methods, fields, 7, 0x18, 3, 1, 2, -1, -1, -1, -1 };
  return &_ASViewGroupImpl_LayoutMode;
}

@end

void ASViewGroupImpl_LayoutMode_init(ASViewGroupImpl_LayoutMode *self) {
  ASAbstractEnumToIntConverter_init(self);
  self->mapping_ = new_JavaUtilHashMap_init();
  {
    (void) [self->mapping_ putWithId:@"clipBounds" withId:JavaLangInteger_valueOfWithInt_((jint) 0x0)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"opticalBounds" withId:JavaLangInteger_valueOfWithInt_((jint) 0x1)];
  }
}

ASViewGroupImpl_LayoutMode *new_ASViewGroupImpl_LayoutMode_init() {
  J2OBJC_NEW_IMPL(ASViewGroupImpl_LayoutMode, init)
}

ASViewGroupImpl_LayoutMode *create_ASViewGroupImpl_LayoutMode_init() {
  J2OBJC_CREATE_IMPL(ASViewGroupImpl_LayoutMode, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASViewGroupImpl_LayoutMode)

@implementation ASViewGroupImpl_OnHierarchyChangeListener

- (NSString *)getAction {
  return action_;
}

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue {
  ASViewGroupImpl_OnHierarchyChangeListener_initWithASIWidget_withNSString_(self, w, strValue);
  return self;
}

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue
                     withNSString:(NSString *)action {
  ASViewGroupImpl_OnHierarchyChangeListener_initWithASIWidget_withNSString_withNSString_(self, w, strValue, action);
  return self;
}

- (void)onChildViewAddedWithADView:(ADView *)parent
                        withADView:(ADView *)child {
  if (action_ == nil || [action_ isEqual:@"onChildViewAdded"]) {
    [((id<ASIWidget>) nil_chk(w_)) syncModelFromUiToPojoWithNSString:@"onChildViewAdded"];
    id<JavaUtilMap> obj = [self getOnChildViewAddedEventObjWithADView:parent withADView:child];
    NSString *commandName = (NSString *) cast_chk([((id<JavaUtilMap>) nil_chk(obj)) getWithId:ASEventExpressionParser_KEY_COMMAND_NAME], [NSString class]);
    NSString *commandType = (NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_COMMAND_TYPE], [NSString class]);
    switch (JreIndexOfStr(commandType, (id[]){ @"+" }, 1)) {
      case 0:
      if (ASEventCommandFactory_hasCommandWithNSString_(commandName)) {
        (void) [((id<ASEventCommand>) nil_chk(ASEventCommandFactory_getCommandWithNSString_(commandName))) executeCommandWithASIWidget:w_ withJavaUtilMap:obj withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ parent, child } count:2 type:NSObject_class_()]];
      }
      break;
      default:
      break;
    }
    if ([obj containsKeyWithId:@"refreshUiFromModel"]) {
      id widgets = [obj removeWithId:@"refreshUiFromModel"];
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, widgets, true);
    }
    if ([((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds] != nil) {
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, [((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds], true);
    }
    if (strValue_ != nil && ![strValue_ java_isEmpty] && ![((NSString *) nil_chk([((NSString *) nil_chk(strValue_)) java_trim])) java_hasPrefix:@"+"]) {
      id<ASIActivity> activity = [((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getRootActivity];
      [((id<ASIActivity>) nil_chk(activity)) sendEventMessageWithJavaUtilMap:obj];
    }
  }
  return;
}

- (void)onChildViewRemovedWithADView:(ADView *)parent
                          withADView:(ADView *)child {
  if (action_ == nil || [action_ isEqual:@"onChildViewRemoved"]) {
    [((id<ASIWidget>) nil_chk(w_)) syncModelFromUiToPojoWithNSString:@"onChildViewRemoved"];
    id<JavaUtilMap> obj = [self getOnChildViewRemovedEventObjWithADView:parent withADView:child];
    NSString *commandName = (NSString *) cast_chk([((id<JavaUtilMap>) nil_chk(obj)) getWithId:ASEventExpressionParser_KEY_COMMAND_NAME], [NSString class]);
    NSString *commandType = (NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_COMMAND_TYPE], [NSString class]);
    switch (JreIndexOfStr(commandType, (id[]){ @"+" }, 1)) {
      case 0:
      if (ASEventCommandFactory_hasCommandWithNSString_(commandName)) {
        (void) [((id<ASEventCommand>) nil_chk(ASEventCommandFactory_getCommandWithNSString_(commandName))) executeCommandWithASIWidget:w_ withJavaUtilMap:obj withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ parent, child } count:2 type:NSObject_class_()]];
      }
      break;
      default:
      break;
    }
    if ([obj containsKeyWithId:@"refreshUiFromModel"]) {
      id widgets = [obj removeWithId:@"refreshUiFromModel"];
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, widgets, true);
    }
    if ([((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds] != nil) {
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, [((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds], true);
    }
    if (strValue_ != nil && ![strValue_ java_isEmpty] && ![((NSString *) nil_chk([((NSString *) nil_chk(strValue_)) java_trim])) java_hasPrefix:@"+"]) {
      id<ASIActivity> activity = [((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getRootActivity];
      [((id<ASIActivity>) nil_chk(activity)) sendEventMessageWithJavaUtilMap:obj];
    }
  }
  return;
}

- (id<JavaUtilMap>)getOnChildViewRemovedEventObjWithADView:(ADView *)parent
                                                withADView:(ADView *)child {
  id<JavaUtilMap> obj = ASPluginInvoker_getJSONCompatMap();
  (void) [((id<JavaUtilMap>) nil_chk(obj)) putWithId:@"action" withId:@"action"];
  (void) [obj putWithId:@"eventType" withId:@"childviewremoved"];
  (void) [obj putWithId:@"fragmentId" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getFragmentId]];
  (void) [obj putWithId:@"actionUrl" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getActionUrl]];
  if ([((id<ASIWidget>) nil_chk(w_)) getComponentId] != nil) {
    (void) [obj putWithId:@"componentId" withId:[((id<ASIWidget>) nil_chk(w_)) getComponentId]];
  }
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"id", [((id<ASIWidget>) nil_chk(w_)) getId]);
  (void) ASEventExpressionParser_parseEventExpressionWithNSString_withJavaUtilMap_(strValue_, obj);
  [((id<ASIWidget>) nil_chk(w_)) updateModelToEventMapWithJavaUtilMap:obj withNSString:@"onChildViewRemoved" withNSString:(NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_EVENT_ARGS], [NSString class])];
  return obj;
}

- (id<JavaUtilMap>)getOnChildViewAddedEventObjWithADView:(ADView *)parent
                                              withADView:(ADView *)child {
  id<JavaUtilMap> obj = ASPluginInvoker_getJSONCompatMap();
  (void) [((id<JavaUtilMap>) nil_chk(obj)) putWithId:@"action" withId:@"action"];
  (void) [obj putWithId:@"eventType" withId:@"childviewadded"];
  (void) [obj putWithId:@"fragmentId" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getFragmentId]];
  (void) [obj putWithId:@"actionUrl" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getActionUrl]];
  if ([((id<ASIWidget>) nil_chk(w_)) getComponentId] != nil) {
    (void) [obj putWithId:@"componentId" withId:[((id<ASIWidget>) nil_chk(w_)) getComponentId]];
  }
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"id", [((id<ASIWidget>) nil_chk(w_)) getId]);
  (void) ASEventExpressionParser_parseEventExpressionWithNSString_withJavaUtilMap_(strValue_, obj);
  [((id<ASIWidget>) nil_chk(w_)) updateModelToEventMapWithJavaUtilMap:obj withNSString:@"onChildViewAdded" withNSString:(NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_EVENT_ARGS], [NSString class])];
  return obj;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 3, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, 5, 3, -1, 6, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, 7, 3, -1, 6, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getAction);
  methods[1].selector = @selector(initWithASIWidget:withNSString:);
  methods[2].selector = @selector(initWithASIWidget:withNSString:withNSString:);
  methods[3].selector = @selector(onChildViewAddedWithADView:withADView:);
  methods[4].selector = @selector(onChildViewRemovedWithADView:withADView:);
  methods[5].selector = @selector(getOnChildViewRemovedEventObjWithADView:withADView:);
  methods[6].selector = @selector(getOnChildViewAddedEventObjWithADView:withADView:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "w_", "LASIWidget;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "view_", "LADView;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "strValue_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "action_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASIWidget;LNSString;", "LASIWidget;LNSString;LNSString;", "onChildViewAdded", "LADView;LADView;", "onChildViewRemoved", "getOnChildViewRemovedEventObj", "(Lr/android/view/View;Lr/android/view/View;)Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", "getOnChildViewAddedEventObj", "LASViewGroupImpl;" };
  static const J2ObjcClassInfo _ASViewGroupImpl_OnHierarchyChangeListener = { "OnHierarchyChangeListener", "com.ashera.layout", ptrTable, methods, fields, 7, 0xa, 7, 4, 8, -1, -1, -1, -1 };
  return &_ASViewGroupImpl_OnHierarchyChangeListener;
}

@end

void ASViewGroupImpl_OnHierarchyChangeListener_initWithASIWidget_withNSString_(ASViewGroupImpl_OnHierarchyChangeListener *self, id<ASIWidget> w, NSString *strValue) {
  NSObject_init(self);
  self->w_ = w;
  self->strValue_ = strValue;
}

ASViewGroupImpl_OnHierarchyChangeListener *new_ASViewGroupImpl_OnHierarchyChangeListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) {
  J2OBJC_NEW_IMPL(ASViewGroupImpl_OnHierarchyChangeListener, initWithASIWidget_withNSString_, w, strValue)
}

ASViewGroupImpl_OnHierarchyChangeListener *create_ASViewGroupImpl_OnHierarchyChangeListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) {
  J2OBJC_CREATE_IMPL(ASViewGroupImpl_OnHierarchyChangeListener, initWithASIWidget_withNSString_, w, strValue)
}

void ASViewGroupImpl_OnHierarchyChangeListener_initWithASIWidget_withNSString_withNSString_(ASViewGroupImpl_OnHierarchyChangeListener *self, id<ASIWidget> w, NSString *strValue, NSString *action) {
  NSObject_init(self);
  self->w_ = w;
  self->strValue_ = strValue;
  self->action_ = action;
}

ASViewGroupImpl_OnHierarchyChangeListener *new_ASViewGroupImpl_OnHierarchyChangeListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) {
  J2OBJC_NEW_IMPL(ASViewGroupImpl_OnHierarchyChangeListener, initWithASIWidget_withNSString_withNSString_, w, strValue, action)
}

ASViewGroupImpl_OnHierarchyChangeListener *create_ASViewGroupImpl_OnHierarchyChangeListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) {
  J2OBJC_CREATE_IMPL(ASViewGroupImpl_OnHierarchyChangeListener, initWithASIWidget_withNSString_withNSString_, w, strValue, action)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASViewGroupImpl_OnHierarchyChangeListener)

@implementation ASViewGroupImpl_ViewGroupCommandBuilder

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASViewGroupImpl_ViewGroupCommandBuilder_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id)setAnimateLayoutChangesWithBoolean:(jboolean)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"animateLayoutChanges"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangBoolean_valueOfWithBoolean_(value)];
  return self;
}

- (id)setLayoutTransitionWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"layoutTransition"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (id)setLayoutTransitionDurationWithInt:(jint)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"layoutTransitionDuration"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangInteger_valueOfWithInt_(value)];
  return self;
}

- (id)setAnimateParentHierarchyWithBoolean:(jboolean)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"animateParentHierarchy"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangBoolean_valueOfWithBoolean_(value)];
  return self;
}

- (id)setListitemWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"listitem"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (id)setPaddingWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"padding"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (id)tryGetPaddingBottom {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingBottom"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getPaddingBottom {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingBottom"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (id)setPaddingBottomWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingBottom"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (id)tryGetPaddingRight {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingRight"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getPaddingRight {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingRight"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (id)setPaddingRightWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingRight"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (id)tryGetPaddingLeft {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingLeft"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getPaddingLeft {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingLeft"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (id)setPaddingLeftWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingLeft"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (id)tryGetPaddingStart {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingStart"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getPaddingStart {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingStart"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (id)setPaddingStartWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingStart"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (id)tryGetPaddingEnd {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingEnd"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getPaddingEnd {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingEnd"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (id)setPaddingEndWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingEnd"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (id)tryGetPaddingTop {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingTop"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getPaddingTop {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingTop"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (id)setPaddingTopWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingTop"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (id)setPaddingHorizontalWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingHorizontal"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (id)setPaddingVerticalWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingVertical"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (id)tryGetAddStatesFromChildren {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"addStatesFromChildren"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)isAddStatesFromChildren {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"addStatesFromChildren"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (id)setAddStatesFromChildrenWithBoolean:(jboolean)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"addStatesFromChildren"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangBoolean_valueOfWithBoolean_(value)];
  return self;
}

- (id)setOnChildViewAddedWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"onChildViewAdded"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (id)tryGetClipChildren {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"clipChildren"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)isClipChildren {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"clipChildren"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (id)setClipChildrenWithBoolean:(jboolean)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"clipChildren"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangBoolean_valueOfWithBoolean_(value)];
  return self;
}

- (id)tryGetClipToPadding {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"clipToPadding"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)isClipToPadding {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"clipToPadding"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (id)setClipToPaddingWithBoolean:(jboolean)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"clipToPadding"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangBoolean_valueOfWithBoolean_(value)];
  return self;
}

- (id)tryGetLayoutMode {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"layoutMode"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getLayoutMode {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"layoutMode"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (id)setLayoutModeWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"layoutMode"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (id)setOnChildViewRemovedWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"onChildViewRemoved"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (id)setChildXmlWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"childXml"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, "LNSObject;", 0x1, 3, 4, -1, 5, -1, -1 },
    { NULL, "LNSObject;", 0x1, 6, 7, -1, 8, -1, -1 },
    { NULL, "LNSObject;", 0x1, 9, 1, -1, 2, -1, -1 },
    { NULL, "LNSObject;", 0x1, 10, 4, -1, 5, -1, -1 },
    { NULL, "LNSObject;", 0x1, 11, 4, -1, 5, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 12, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 13, 4, -1, 5, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 12, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 14, 4, -1, 5, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 12, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 15, 4, -1, 5, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 12, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 16, 4, -1, 5, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 12, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 17, 4, -1, 5, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 12, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 18, 4, -1, 5, -1, -1 },
    { NULL, "LNSObject;", 0x1, 19, 4, -1, 5, -1, -1 },
    { NULL, "LNSObject;", 0x1, 20, 4, -1, 5, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 12, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 21, 1, -1, 2, -1, -1 },
    { NULL, "LNSObject;", 0x1, 22, 4, -1, 5, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 12, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 23, 1, -1, 2, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 12, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 24, 1, -1, 2, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 12, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 25, 4, -1, 5, -1, -1 },
    { NULL, "LNSObject;", 0x1, 26, 4, -1, 5, -1, -1 },
    { NULL, "LNSObject;", 0x1, 27, 4, -1, 5, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(setAnimateLayoutChangesWithBoolean:);
  methods[2].selector = @selector(setLayoutTransitionWithNSString:);
  methods[3].selector = @selector(setLayoutTransitionDurationWithInt:);
  methods[4].selector = @selector(setAnimateParentHierarchyWithBoolean:);
  methods[5].selector = @selector(setListitemWithNSString:);
  methods[6].selector = @selector(setPaddingWithNSString:);
  methods[7].selector = @selector(tryGetPaddingBottom);
  methods[8].selector = @selector(getPaddingBottom);
  methods[9].selector = @selector(setPaddingBottomWithNSString:);
  methods[10].selector = @selector(tryGetPaddingRight);
  methods[11].selector = @selector(getPaddingRight);
  methods[12].selector = @selector(setPaddingRightWithNSString:);
  methods[13].selector = @selector(tryGetPaddingLeft);
  methods[14].selector = @selector(getPaddingLeft);
  methods[15].selector = @selector(setPaddingLeftWithNSString:);
  methods[16].selector = @selector(tryGetPaddingStart);
  methods[17].selector = @selector(getPaddingStart);
  methods[18].selector = @selector(setPaddingStartWithNSString:);
  methods[19].selector = @selector(tryGetPaddingEnd);
  methods[20].selector = @selector(getPaddingEnd);
  methods[21].selector = @selector(setPaddingEndWithNSString:);
  methods[22].selector = @selector(tryGetPaddingTop);
  methods[23].selector = @selector(getPaddingTop);
  methods[24].selector = @selector(setPaddingTopWithNSString:);
  methods[25].selector = @selector(setPaddingHorizontalWithNSString:);
  methods[26].selector = @selector(setPaddingVerticalWithNSString:);
  methods[27].selector = @selector(tryGetAddStatesFromChildren);
  methods[28].selector = @selector(isAddStatesFromChildren);
  methods[29].selector = @selector(setAddStatesFromChildrenWithBoolean:);
  methods[30].selector = @selector(setOnChildViewAddedWithNSString:);
  methods[31].selector = @selector(tryGetClipChildren);
  methods[32].selector = @selector(isClipChildren);
  methods[33].selector = @selector(setClipChildrenWithBoolean:);
  methods[34].selector = @selector(tryGetClipToPadding);
  methods[35].selector = @selector(isClipToPadding);
  methods[36].selector = @selector(setClipToPaddingWithBoolean:);
  methods[37].selector = @selector(tryGetLayoutMode);
  methods[38].selector = @selector(getLayoutMode);
  methods[39].selector = @selector(setLayoutModeWithNSString:);
  methods[40].selector = @selector(setOnChildViewRemovedWithNSString:);
  methods[41].selector = @selector(setChildXmlWithNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "setAnimateLayoutChanges", "Z", "(Z)TT;", "setLayoutTransition", "LNSString;", "(Ljava/lang/String;)TT;", "setLayoutTransitionDuration", "I", "(I)TT;", "setAnimateParentHierarchy", "setListitem", "setPadding", "()TT;", "setPaddingBottom", "setPaddingRight", "setPaddingLeft", "setPaddingStart", "setPaddingEnd", "setPaddingTop", "setPaddingHorizontal", "setPaddingVertical", "setAddStatesFromChildren", "setOnChildViewAdded", "setClipChildren", "setClipToPadding", "setLayoutMode", "setOnChildViewRemoved", "setChildXml", "LASViewGroupImpl;", "<T:Ljava/lang/Object;>Lcom/ashera/layout/ViewGroupModelImpl$ViewGroupModelCommandBuilder<TT;>;" };
  static const J2ObjcClassInfo _ASViewGroupImpl_ViewGroupCommandBuilder = { "ViewGroupCommandBuilder", "com.ashera.layout", ptrTable, methods, NULL, 7, 0x409, 42, 0, 28, -1, -1, 29, -1 };
  return &_ASViewGroupImpl_ViewGroupCommandBuilder;
}

@end

void ASViewGroupImpl_ViewGroupCommandBuilder_init(ASViewGroupImpl_ViewGroupCommandBuilder *self) {
  ASViewGroupModelImpl_ViewGroupModelCommandBuilder_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASViewGroupImpl_ViewGroupCommandBuilder)

@implementation ASViewGroupImpl_ViewGroupCommandBuilderInternal

- (instancetype)initWithASIWidget:(id<ASIWidget>)widget {
  ASViewGroupImpl_ViewGroupCommandBuilderInternal_initWithASIWidget_(self, widget);
  return self;
}

- (ASViewGroupImpl_ViewGroupCommandBuilderInternal *)executeWithBoolean:(jboolean)setter {
  if (setter) {
    [((id<ASIWidget>) nil_chk(widget_)) executeCommandWithJavaUtilMap:command_ withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_SETTER_METHOD];
    [((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(widget_)) getFragment])) remeasure];
  }
  [((id<ASIWidget>) nil_chk(widget_)) executeCommandWithJavaUtilMap:command_ withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_GETTER_METHOD];
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LASViewGroupImpl_ViewGroupCommandBuilderInternal;", 0x4, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASIWidget:);
  methods[1].selector = @selector(executeWithBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "widget_", "LASIWidget;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASIWidget;", "execute", "Z", "LASViewGroupImpl;", "Lcom/ashera/layout/ViewGroupImpl$ViewGroupCommandBuilder<Lcom/ashera/layout/ViewGroupImpl$ViewGroupCommandBuilderInternal;>;" };
  static const J2ObjcClassInfo _ASViewGroupImpl_ViewGroupCommandBuilderInternal = { "ViewGroupCommandBuilderInternal", "com.ashera.layout", ptrTable, methods, fields, 7, 0x8, 2, 1, 3, -1, -1, 4, -1 };
  return &_ASViewGroupImpl_ViewGroupCommandBuilderInternal;
}

@end

void ASViewGroupImpl_ViewGroupCommandBuilderInternal_initWithASIWidget_(ASViewGroupImpl_ViewGroupCommandBuilderInternal *self, id<ASIWidget> widget) {
  ASViewGroupImpl_ViewGroupCommandBuilder_init(self);
  self->widget_ = widget;
}

ASViewGroupImpl_ViewGroupCommandBuilderInternal *new_ASViewGroupImpl_ViewGroupCommandBuilderInternal_initWithASIWidget_(id<ASIWidget> widget) {
  J2OBJC_NEW_IMPL(ASViewGroupImpl_ViewGroupCommandBuilderInternal, initWithASIWidget_, widget)
}

ASViewGroupImpl_ViewGroupCommandBuilderInternal *create_ASViewGroupImpl_ViewGroupCommandBuilderInternal_initWithASIWidget_(id<ASIWidget> widget) {
  J2OBJC_CREATE_IMPL(ASViewGroupImpl_ViewGroupCommandBuilderInternal, initWithASIWidget_, widget)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASViewGroupImpl_ViewGroupCommandBuilderInternal)

@implementation ASViewGroupImpl_ViewGroupBean

- (instancetype)initWithASIWidget:(id<ASIWidget>)widget {
  ASViewGroupImpl_ViewGroupBean_initWithASIWidget_(self, widget);
  return self;
}

- (ASViewGroupImpl_ViewGroupCommandBuilderInternal *)getBuilder {
  return ASViewGroupImpl_ViewGroupBean_getBuilder(self);
}

- (void)setAnimateLayoutChangesWithBoolean:(jboolean)value {
  (void) [((ASViewGroupImpl_ViewGroupCommandBuilderInternal *) nil_chk([((ASViewGroupImpl_ViewGroupCommandBuilderInternal *) nil_chk([((ASViewGroupImpl_ViewGroupCommandBuilderInternal *) nil_chk(ASViewGroupImpl_ViewGroupBean_getBuilder(self))) reset])) setAnimateLayoutChangesWithBoolean:value])) executeWithBoolean:true];
}

- (void)setLayoutTransitionWithNSString:(NSString *)value {
  (void) [((ASViewGroupImpl_ViewGroupCommandBuilderInternal *) nil_chk([((ASViewGroupImpl_ViewGroupCommandBuilderInternal *) nil_chk([((ASViewGroupImpl_ViewGroupCommandBuilderInternal *) nil_chk(ASViewGroupImpl_ViewGroupBean_getBuilder(self))) reset])) setLayoutTransitionWithNSString:value])) executeWithBoolean:true];
}

- (void)setLayoutTransitionDurationWithInt:(jint)value {
  (void) [((ASViewGroupImpl_ViewGroupCommandBuilderInternal *) nil_chk([((ASViewGroupImpl_ViewGroupCommandBuilderInternal *) nil_chk([((ASViewGroupImpl_ViewGroupCommandBuilderInternal *) nil_chk(ASViewGroupImpl_ViewGroupBean_getBuilder(self))) reset])) setLayoutTransitionDurationWithInt:value])) executeWithBoolean:true];
}

- (void)setAnimateParentHierarchyWithBoolean:(jboolean)value {
  (void) [((ASViewGroupImpl_ViewGroupCommandBuilderInternal *) nil_chk([((ASViewGroupImpl_ViewGroupCommandBuilderInternal *) nil_chk([((ASViewGroupImpl_ViewGroupCommandBuilderInternal *) nil_chk(ASViewGroupImpl_ViewGroupBean_getBuilder(self))) reset])) setAnimateParentHierarchyWithBoolean:value])) executeWithBoolean:true];
}

- (void)setListitemWithNSString:(NSString *)value {
  (void) [((ASViewGroupImpl_ViewGroupCommandBuilderInternal *) nil_chk([((ASViewGroupImpl_ViewGroupCommandBuilderInternal *) nil_chk([((ASViewGroupImpl_ViewGroupCommandBuilderInternal *) nil_chk(ASViewGroupImpl_ViewGroupBean_getBuilder(self))) reset])) setListitemWithNSString:value])) executeWithBoolean:true];
}

- (void)setPaddingWithNSString:(NSString *)value {
  (void) [((ASViewGroupImpl_ViewGroupCommandBuilderInternal *) nil_chk([((ASViewGroupImpl_ViewGroupCommandBuilderInternal *) nil_chk([((ASViewGroupImpl_ViewGroupCommandBuilderInternal *) nil_chk(ASViewGroupImpl_ViewGroupBean_getBuilder(self))) reset])) setPaddingWithNSString:value])) executeWithBoolean:true];
}

- (id)getPaddingBottom {
  return [((ASViewGroupImpl_ViewGroupCommandBuilderInternal *) nil_chk([((ASViewGroupImpl_ViewGroupCommandBuilderInternal *) nil_chk([((ASViewGroupImpl_ViewGroupCommandBuilderInternal *) nil_chk([((ASViewGroupImpl_ViewGroupCommandBuilderInternal *) nil_chk(ASViewGroupImpl_ViewGroupBean_getBuilder(self))) reset])) tryGetPaddingBottom])) executeWithBoolean:false])) getPaddingBottom];
}

- (void)setPaddingBottomWithNSString:(NSString *)value {
  (void) [((ASViewGroupImpl_ViewGroupCommandBuilderInternal *) nil_chk([((ASViewGroupImpl_ViewGroupCommandBuilderInternal *) nil_chk([((ASViewGroupImpl_ViewGroupCommandBuilderInternal *) nil_chk(ASViewGroupImpl_ViewGroupBean_getBuilder(self))) reset])) setPaddingBottomWithNSString:value])) executeWithBoolean:true];
}

- (id)getPaddingRight {
  return [((ASViewGroupImpl_ViewGroupCommandBuilderInternal *) nil_chk([((ASViewGroupImpl_ViewGroupCommandBuilderInternal *) nil_chk([((ASViewGroupImpl_ViewGroupCommandBuilderInternal *) nil_chk([((ASViewGroupImpl_ViewGroupCommandBuilderInternal *) nil_chk(ASViewGroupImpl_ViewGroupBean_getBuilder(self))) reset])) tryGetPaddingRight])) executeWithBoolean:false])) getPaddingRight];
}

- (void)setPaddingRightWithNSString:(NSString *)value {
  (void) [((ASViewGroupImpl_ViewGroupCommandBuilderInternal *) nil_chk([((ASViewGroupImpl_ViewGroupCommandBuilderInternal *) nil_chk([((ASViewGroupImpl_ViewGroupCommandBuilderInternal *) nil_chk(ASViewGroupImpl_ViewGroupBean_getBuilder(self))) reset])) setPaddingRightWithNSString:value])) executeWithBoolean:true];
}

- (id)getPaddingLeft {
  return [((ASViewGroupImpl_ViewGroupCommandBuilderInternal *) nil_chk([((ASViewGroupImpl_ViewGroupCommandBuilderInternal *) nil_chk([((ASViewGroupImpl_ViewGroupCommandBuilderInternal *) nil_chk([((ASViewGroupImpl_ViewGroupCommandBuilderInternal *) nil_chk(ASViewGroupImpl_ViewGroupBean_getBuilder(self))) reset])) tryGetPaddingLeft])) executeWithBoolean:false])) getPaddingLeft];
}

- (void)setPaddingLeftWithNSString:(NSString *)value {
  (void) [((ASViewGroupImpl_ViewGroupCommandBuilderInternal *) nil_chk([((ASViewGroupImpl_ViewGroupCommandBuilderInternal *) nil_chk([((ASViewGroupImpl_ViewGroupCommandBuilderInternal *) nil_chk(ASViewGroupImpl_ViewGroupBean_getBuilder(self))) reset])) setPaddingLeftWithNSString:value])) executeWithBoolean:true];
}

- (id)getPaddingStart {
  return [((ASViewGroupImpl_ViewGroupCommandBuilderInternal *) nil_chk([((ASViewGroupImpl_ViewGroupCommandBuilderInternal *) nil_chk([((ASViewGroupImpl_ViewGroupCommandBuilderInternal *) nil_chk([((ASViewGroupImpl_ViewGroupCommandBuilderInternal *) nil_chk(ASViewGroupImpl_ViewGroupBean_getBuilder(self))) reset])) tryGetPaddingStart])) executeWithBoolean:false])) getPaddingStart];
}

- (void)setPaddingStartWithNSString:(NSString *)value {
  (void) [((ASViewGroupImpl_ViewGroupCommandBuilderInternal *) nil_chk([((ASViewGroupImpl_ViewGroupCommandBuilderInternal *) nil_chk([((ASViewGroupImpl_ViewGroupCommandBuilderInternal *) nil_chk(ASViewGroupImpl_ViewGroupBean_getBuilder(self))) reset])) setPaddingStartWithNSString:value])) executeWithBoolean:true];
}

- (id)getPaddingEnd {
  return [((ASViewGroupImpl_ViewGroupCommandBuilderInternal *) nil_chk([((ASViewGroupImpl_ViewGroupCommandBuilderInternal *) nil_chk([((ASViewGroupImpl_ViewGroupCommandBuilderInternal *) nil_chk([((ASViewGroupImpl_ViewGroupCommandBuilderInternal *) nil_chk(ASViewGroupImpl_ViewGroupBean_getBuilder(self))) reset])) tryGetPaddingEnd])) executeWithBoolean:false])) getPaddingEnd];
}

- (void)setPaddingEndWithNSString:(NSString *)value {
  (void) [((ASViewGroupImpl_ViewGroupCommandBuilderInternal *) nil_chk([((ASViewGroupImpl_ViewGroupCommandBuilderInternal *) nil_chk([((ASViewGroupImpl_ViewGroupCommandBuilderInternal *) nil_chk(ASViewGroupImpl_ViewGroupBean_getBuilder(self))) reset])) setPaddingEndWithNSString:value])) executeWithBoolean:true];
}

- (id)getPaddingTop {
  return [((ASViewGroupImpl_ViewGroupCommandBuilderInternal *) nil_chk([((ASViewGroupImpl_ViewGroupCommandBuilderInternal *) nil_chk([((ASViewGroupImpl_ViewGroupCommandBuilderInternal *) nil_chk([((ASViewGroupImpl_ViewGroupCommandBuilderInternal *) nil_chk(ASViewGroupImpl_ViewGroupBean_getBuilder(self))) reset])) tryGetPaddingTop])) executeWithBoolean:false])) getPaddingTop];
}

- (void)setPaddingTopWithNSString:(NSString *)value {
  (void) [((ASViewGroupImpl_ViewGroupCommandBuilderInternal *) nil_chk([((ASViewGroupImpl_ViewGroupCommandBuilderInternal *) nil_chk([((ASViewGroupImpl_ViewGroupCommandBuilderInternal *) nil_chk(ASViewGroupImpl_ViewGroupBean_getBuilder(self))) reset])) setPaddingTopWithNSString:value])) executeWithBoolean:true];
}

- (void)setPaddingHorizontalWithNSString:(NSString *)value {
  (void) [((ASViewGroupImpl_ViewGroupCommandBuilderInternal *) nil_chk([((ASViewGroupImpl_ViewGroupCommandBuilderInternal *) nil_chk([((ASViewGroupImpl_ViewGroupCommandBuilderInternal *) nil_chk(ASViewGroupImpl_ViewGroupBean_getBuilder(self))) reset])) setPaddingHorizontalWithNSString:value])) executeWithBoolean:true];
}

- (void)setPaddingVerticalWithNSString:(NSString *)value {
  (void) [((ASViewGroupImpl_ViewGroupCommandBuilderInternal *) nil_chk([((ASViewGroupImpl_ViewGroupCommandBuilderInternal *) nil_chk([((ASViewGroupImpl_ViewGroupCommandBuilderInternal *) nil_chk(ASViewGroupImpl_ViewGroupBean_getBuilder(self))) reset])) setPaddingVerticalWithNSString:value])) executeWithBoolean:true];
}

- (id)isAddStatesFromChildren {
  return [((ASViewGroupImpl_ViewGroupCommandBuilderInternal *) nil_chk([((ASViewGroupImpl_ViewGroupCommandBuilderInternal *) nil_chk([((ASViewGroupImpl_ViewGroupCommandBuilderInternal *) nil_chk([((ASViewGroupImpl_ViewGroupCommandBuilderInternal *) nil_chk(ASViewGroupImpl_ViewGroupBean_getBuilder(self))) reset])) tryGetAddStatesFromChildren])) executeWithBoolean:false])) isAddStatesFromChildren];
}

- (void)setAddStatesFromChildrenWithBoolean:(jboolean)value {
  (void) [((ASViewGroupImpl_ViewGroupCommandBuilderInternal *) nil_chk([((ASViewGroupImpl_ViewGroupCommandBuilderInternal *) nil_chk([((ASViewGroupImpl_ViewGroupCommandBuilderInternal *) nil_chk(ASViewGroupImpl_ViewGroupBean_getBuilder(self))) reset])) setAddStatesFromChildrenWithBoolean:value])) executeWithBoolean:true];
}

- (void)setOnChildViewAddedWithNSString:(NSString *)value {
  (void) [((ASViewGroupImpl_ViewGroupCommandBuilderInternal *) nil_chk([((ASViewGroupImpl_ViewGroupCommandBuilderInternal *) nil_chk([((ASViewGroupImpl_ViewGroupCommandBuilderInternal *) nil_chk(ASViewGroupImpl_ViewGroupBean_getBuilder(self))) reset])) setOnChildViewAddedWithNSString:value])) executeWithBoolean:true];
}

- (id)isClipChildren {
  return [((ASViewGroupImpl_ViewGroupCommandBuilderInternal *) nil_chk([((ASViewGroupImpl_ViewGroupCommandBuilderInternal *) nil_chk([((ASViewGroupImpl_ViewGroupCommandBuilderInternal *) nil_chk([((ASViewGroupImpl_ViewGroupCommandBuilderInternal *) nil_chk(ASViewGroupImpl_ViewGroupBean_getBuilder(self))) reset])) tryGetClipChildren])) executeWithBoolean:false])) isClipChildren];
}

- (void)setClipChildrenWithBoolean:(jboolean)value {
  (void) [((ASViewGroupImpl_ViewGroupCommandBuilderInternal *) nil_chk([((ASViewGroupImpl_ViewGroupCommandBuilderInternal *) nil_chk([((ASViewGroupImpl_ViewGroupCommandBuilderInternal *) nil_chk(ASViewGroupImpl_ViewGroupBean_getBuilder(self))) reset])) setClipChildrenWithBoolean:value])) executeWithBoolean:true];
}

- (id)isClipToPadding {
  return [((ASViewGroupImpl_ViewGroupCommandBuilderInternal *) nil_chk([((ASViewGroupImpl_ViewGroupCommandBuilderInternal *) nil_chk([((ASViewGroupImpl_ViewGroupCommandBuilderInternal *) nil_chk([((ASViewGroupImpl_ViewGroupCommandBuilderInternal *) nil_chk(ASViewGroupImpl_ViewGroupBean_getBuilder(self))) reset])) tryGetClipToPadding])) executeWithBoolean:false])) isClipToPadding];
}

- (void)setClipToPaddingWithBoolean:(jboolean)value {
  (void) [((ASViewGroupImpl_ViewGroupCommandBuilderInternal *) nil_chk([((ASViewGroupImpl_ViewGroupCommandBuilderInternal *) nil_chk([((ASViewGroupImpl_ViewGroupCommandBuilderInternal *) nil_chk(ASViewGroupImpl_ViewGroupBean_getBuilder(self))) reset])) setClipToPaddingWithBoolean:value])) executeWithBoolean:true];
}

- (id)getLayoutMode {
  return [((ASViewGroupImpl_ViewGroupCommandBuilderInternal *) nil_chk([((ASViewGroupImpl_ViewGroupCommandBuilderInternal *) nil_chk([((ASViewGroupImpl_ViewGroupCommandBuilderInternal *) nil_chk([((ASViewGroupImpl_ViewGroupCommandBuilderInternal *) nil_chk(ASViewGroupImpl_ViewGroupBean_getBuilder(self))) reset])) tryGetLayoutMode])) executeWithBoolean:false])) getLayoutMode];
}

- (void)setLayoutModeWithNSString:(NSString *)value {
  (void) [((ASViewGroupImpl_ViewGroupCommandBuilderInternal *) nil_chk([((ASViewGroupImpl_ViewGroupCommandBuilderInternal *) nil_chk([((ASViewGroupImpl_ViewGroupCommandBuilderInternal *) nil_chk(ASViewGroupImpl_ViewGroupBean_getBuilder(self))) reset])) setLayoutModeWithNSString:value])) executeWithBoolean:true];
}

- (void)setOnChildViewRemovedWithNSString:(NSString *)value {
  (void) [((ASViewGroupImpl_ViewGroupCommandBuilderInternal *) nil_chk([((ASViewGroupImpl_ViewGroupCommandBuilderInternal *) nil_chk([((ASViewGroupImpl_ViewGroupCommandBuilderInternal *) nil_chk(ASViewGroupImpl_ViewGroupBean_getBuilder(self))) reset])) setOnChildViewRemovedWithNSString:value])) executeWithBoolean:true];
}

- (void)setChildXmlWithNSString:(NSString *)value {
  (void) [((ASViewGroupImpl_ViewGroupCommandBuilderInternal *) nil_chk([((ASViewGroupImpl_ViewGroupCommandBuilderInternal *) nil_chk([((ASViewGroupImpl_ViewGroupCommandBuilderInternal *) nil_chk(ASViewGroupImpl_ViewGroupBean_getBuilder(self))) reset])) setChildXmlWithNSString:value])) executeWithBoolean:true];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LASViewGroupImpl_ViewGroupCommandBuilderInternal;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 4, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 4, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 4, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 4, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 4, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 4, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 4, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 4, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 21, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 22, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 23, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 24, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASIWidget:);
  methods[1].selector = @selector(getBuilder);
  methods[2].selector = @selector(setAnimateLayoutChangesWithBoolean:);
  methods[3].selector = @selector(setLayoutTransitionWithNSString:);
  methods[4].selector = @selector(setLayoutTransitionDurationWithInt:);
  methods[5].selector = @selector(setAnimateParentHierarchyWithBoolean:);
  methods[6].selector = @selector(setListitemWithNSString:);
  methods[7].selector = @selector(setPaddingWithNSString:);
  methods[8].selector = @selector(getPaddingBottom);
  methods[9].selector = @selector(setPaddingBottomWithNSString:);
  methods[10].selector = @selector(getPaddingRight);
  methods[11].selector = @selector(setPaddingRightWithNSString:);
  methods[12].selector = @selector(getPaddingLeft);
  methods[13].selector = @selector(setPaddingLeftWithNSString:);
  methods[14].selector = @selector(getPaddingStart);
  methods[15].selector = @selector(setPaddingStartWithNSString:);
  methods[16].selector = @selector(getPaddingEnd);
  methods[17].selector = @selector(setPaddingEndWithNSString:);
  methods[18].selector = @selector(getPaddingTop);
  methods[19].selector = @selector(setPaddingTopWithNSString:);
  methods[20].selector = @selector(setPaddingHorizontalWithNSString:);
  methods[21].selector = @selector(setPaddingVerticalWithNSString:);
  methods[22].selector = @selector(isAddStatesFromChildren);
  methods[23].selector = @selector(setAddStatesFromChildrenWithBoolean:);
  methods[24].selector = @selector(setOnChildViewAddedWithNSString:);
  methods[25].selector = @selector(isClipChildren);
  methods[26].selector = @selector(setClipChildrenWithBoolean:);
  methods[27].selector = @selector(isClipToPadding);
  methods[28].selector = @selector(setClipToPaddingWithBoolean:);
  methods[29].selector = @selector(getLayoutMode);
  methods[30].selector = @selector(setLayoutModeWithNSString:);
  methods[31].selector = @selector(setOnChildViewRemovedWithNSString:);
  methods[32].selector = @selector(setChildXmlWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "commandBuilder_ViewGroupBean_", "LASViewGroupImpl_ViewGroupCommandBuilderInternal;", .constantValue.asLong = 0, 0x2, 25, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASIWidget;", "setAnimateLayoutChanges", "Z", "setLayoutTransition", "LNSString;", "setLayoutTransitionDuration", "I", "setAnimateParentHierarchy", "setListitem", "setPadding", "setPaddingBottom", "setPaddingRight", "setPaddingLeft", "setPaddingStart", "setPaddingEnd", "setPaddingTop", "setPaddingHorizontal", "setPaddingVertical", "setAddStatesFromChildren", "setOnChildViewAdded", "setClipChildren", "setClipToPadding", "setLayoutMode", "setOnChildViewRemoved", "setChildXml", "commandBuilder", "LASViewGroupImpl;" };
  static const J2ObjcClassInfo _ASViewGroupImpl_ViewGroupBean = { "ViewGroupBean", "com.ashera.layout", ptrTable, methods, fields, 7, 0x9, 33, 1, 26, -1, -1, -1, -1 };
  return &_ASViewGroupImpl_ViewGroupBean;
}

@end

void ASViewGroupImpl_ViewGroupBean_initWithASIWidget_(ASViewGroupImpl_ViewGroupBean *self, id<ASIWidget> widget) {
  ASViewGroupModelImpl_ViewGroupModelBean_initWithASIWidget_(self, widget);
  self->commandBuilder_ViewGroupBean_ = new_ASViewGroupImpl_ViewGroupCommandBuilderInternal_initWithASIWidget_(widget);
}

ASViewGroupImpl_ViewGroupBean *new_ASViewGroupImpl_ViewGroupBean_initWithASIWidget_(id<ASIWidget> widget) {
  J2OBJC_NEW_IMPL(ASViewGroupImpl_ViewGroupBean, initWithASIWidget_, widget)
}

ASViewGroupImpl_ViewGroupBean *create_ASViewGroupImpl_ViewGroupBean_initWithASIWidget_(id<ASIWidget> widget) {
  J2OBJC_CREATE_IMPL(ASViewGroupImpl_ViewGroupBean, initWithASIWidget_, widget)
}

ASViewGroupImpl_ViewGroupCommandBuilderInternal *ASViewGroupImpl_ViewGroupBean_getBuilder(ASViewGroupImpl_ViewGroupBean *self) {
  return self->commandBuilder_ViewGroupBean_;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASViewGroupImpl_ViewGroupBean)

@implementation ASViewGroupImpl_ViewGroupParamsBean

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASViewGroupImpl_ViewGroupParamsBean_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (ASViewGroupImpl_ViewGroupCommandParamsBuilderInternal *)getParamsBuilder {
  return ASViewGroupImpl_ViewGroupParamsBean_getParamsBuilder(self);
}

- (id)getLayoutMarginBottomWithASIWidget:(id<ASIWidget>)w {
  id<JavaUtilMap> layoutParams = new_JavaUtilHashMap_init();
  id<JavaUtilMap> command = [((ASViewGroupImpl_ViewGroupCommandParamsBuilderInternal *) nil_chk([((ASViewGroupImpl_ViewGroupCommandParamsBuilderInternal *) nil_chk([((ASViewGroupImpl_ViewGroupCommandParamsBuilderInternal *) nil_chk(ASViewGroupImpl_ViewGroupParamsBean_getParamsBuilder(self))) reset])) tryGetLayoutMarginBottom])) getCommand];
  (void) [layoutParams putWithId:@"layoutParams" withId:command];
  [((id<ASIWidget>) nil_chk(w)) executeCommandWithJavaUtilMap:layoutParams withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_GETTER_METHOD];
  return [((ASViewGroupImpl_ViewGroupCommandParamsBuilderInternal *) nil_chk(ASViewGroupImpl_ViewGroupParamsBean_getParamsBuilder(self))) getLayoutMarginBottom];
}

- (void)setLayoutMarginBottomWithASIWidget:(id<ASIWidget>)w
                              withNSString:(NSString *)value {
  id<JavaUtilMap> layoutParams = new_JavaUtilHashMap_init();
  (void) [layoutParams putWithId:@"layoutParams" withId:[((ASViewGroupImpl_ViewGroupCommandParamsBuilderInternal *) nil_chk([((ASViewGroupImpl_ViewGroupCommandParamsBuilderInternal *) nil_chk([((ASViewGroupImpl_ViewGroupCommandParamsBuilderInternal *) nil_chk(ASViewGroupImpl_ViewGroupParamsBean_getParamsBuilder(self))) reset])) setLayoutMarginBottomWithNSString:value])) getCommand]];
  [((id<ASIWidget>) nil_chk(w)) executeCommandWithJavaUtilMap:layoutParams withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_SETTER_METHOD];
  [((id<ASIFragment>) nil_chk([w getFragment])) remeasure];
}

- (id)getLayoutMarginTopWithASIWidget:(id<ASIWidget>)w {
  id<JavaUtilMap> layoutParams = new_JavaUtilHashMap_init();
  id<JavaUtilMap> command = [((ASViewGroupImpl_ViewGroupCommandParamsBuilderInternal *) nil_chk([((ASViewGroupImpl_ViewGroupCommandParamsBuilderInternal *) nil_chk([((ASViewGroupImpl_ViewGroupCommandParamsBuilderInternal *) nil_chk(ASViewGroupImpl_ViewGroupParamsBean_getParamsBuilder(self))) reset])) tryGetLayoutMarginTop])) getCommand];
  (void) [layoutParams putWithId:@"layoutParams" withId:command];
  [((id<ASIWidget>) nil_chk(w)) executeCommandWithJavaUtilMap:layoutParams withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_GETTER_METHOD];
  return [((ASViewGroupImpl_ViewGroupCommandParamsBuilderInternal *) nil_chk(ASViewGroupImpl_ViewGroupParamsBean_getParamsBuilder(self))) getLayoutMarginTop];
}

- (void)setLayoutMarginTopWithASIWidget:(id<ASIWidget>)w
                           withNSString:(NSString *)value {
  id<JavaUtilMap> layoutParams = new_JavaUtilHashMap_init();
  (void) [layoutParams putWithId:@"layoutParams" withId:[((ASViewGroupImpl_ViewGroupCommandParamsBuilderInternal *) nil_chk([((ASViewGroupImpl_ViewGroupCommandParamsBuilderInternal *) nil_chk([((ASViewGroupImpl_ViewGroupCommandParamsBuilderInternal *) nil_chk(ASViewGroupImpl_ViewGroupParamsBean_getParamsBuilder(self))) reset])) setLayoutMarginTopWithNSString:value])) getCommand]];
  [((id<ASIWidget>) nil_chk(w)) executeCommandWithJavaUtilMap:layoutParams withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_SETTER_METHOD];
  [((id<ASIFragment>) nil_chk([w getFragment])) remeasure];
}

- (id)getLayoutMarginStartWithASIWidget:(id<ASIWidget>)w {
  id<JavaUtilMap> layoutParams = new_JavaUtilHashMap_init();
  id<JavaUtilMap> command = [((ASViewGroupImpl_ViewGroupCommandParamsBuilderInternal *) nil_chk([((ASViewGroupImpl_ViewGroupCommandParamsBuilderInternal *) nil_chk([((ASViewGroupImpl_ViewGroupCommandParamsBuilderInternal *) nil_chk(ASViewGroupImpl_ViewGroupParamsBean_getParamsBuilder(self))) reset])) tryGetLayoutMarginStart])) getCommand];
  (void) [layoutParams putWithId:@"layoutParams" withId:command];
  [((id<ASIWidget>) nil_chk(w)) executeCommandWithJavaUtilMap:layoutParams withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_GETTER_METHOD];
  return [((ASViewGroupImpl_ViewGroupCommandParamsBuilderInternal *) nil_chk(ASViewGroupImpl_ViewGroupParamsBean_getParamsBuilder(self))) getLayoutMarginStart];
}

- (void)setLayoutMarginStartWithASIWidget:(id<ASIWidget>)w
                             withNSString:(NSString *)value {
  id<JavaUtilMap> layoutParams = new_JavaUtilHashMap_init();
  (void) [layoutParams putWithId:@"layoutParams" withId:[((ASViewGroupImpl_ViewGroupCommandParamsBuilderInternal *) nil_chk([((ASViewGroupImpl_ViewGroupCommandParamsBuilderInternal *) nil_chk([((ASViewGroupImpl_ViewGroupCommandParamsBuilderInternal *) nil_chk(ASViewGroupImpl_ViewGroupParamsBean_getParamsBuilder(self))) reset])) setLayoutMarginStartWithNSString:value])) getCommand]];
  [((id<ASIWidget>) nil_chk(w)) executeCommandWithJavaUtilMap:layoutParams withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_SETTER_METHOD];
  [((id<ASIFragment>) nil_chk([w getFragment])) remeasure];
}

- (id)getLayoutMarginEndWithASIWidget:(id<ASIWidget>)w {
  id<JavaUtilMap> layoutParams = new_JavaUtilHashMap_init();
  id<JavaUtilMap> command = [((ASViewGroupImpl_ViewGroupCommandParamsBuilderInternal *) nil_chk([((ASViewGroupImpl_ViewGroupCommandParamsBuilderInternal *) nil_chk([((ASViewGroupImpl_ViewGroupCommandParamsBuilderInternal *) nil_chk(ASViewGroupImpl_ViewGroupParamsBean_getParamsBuilder(self))) reset])) tryGetLayoutMarginEnd])) getCommand];
  (void) [layoutParams putWithId:@"layoutParams" withId:command];
  [((id<ASIWidget>) nil_chk(w)) executeCommandWithJavaUtilMap:layoutParams withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_GETTER_METHOD];
  return [((ASViewGroupImpl_ViewGroupCommandParamsBuilderInternal *) nil_chk(ASViewGroupImpl_ViewGroupParamsBean_getParamsBuilder(self))) getLayoutMarginEnd];
}

- (void)setLayoutMarginEndWithASIWidget:(id<ASIWidget>)w
                           withNSString:(NSString *)value {
  id<JavaUtilMap> layoutParams = new_JavaUtilHashMap_init();
  (void) [layoutParams putWithId:@"layoutParams" withId:[((ASViewGroupImpl_ViewGroupCommandParamsBuilderInternal *) nil_chk([((ASViewGroupImpl_ViewGroupCommandParamsBuilderInternal *) nil_chk([((ASViewGroupImpl_ViewGroupCommandParamsBuilderInternal *) nil_chk(ASViewGroupImpl_ViewGroupParamsBean_getParamsBuilder(self))) reset])) setLayoutMarginEndWithNSString:value])) getCommand]];
  [((id<ASIWidget>) nil_chk(w)) executeCommandWithJavaUtilMap:layoutParams withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_SETTER_METHOD];
  [((id<ASIFragment>) nil_chk([w getFragment])) remeasure];
}

- (id)getLayoutMarginLeftWithASIWidget:(id<ASIWidget>)w {
  id<JavaUtilMap> layoutParams = new_JavaUtilHashMap_init();
  id<JavaUtilMap> command = [((ASViewGroupImpl_ViewGroupCommandParamsBuilderInternal *) nil_chk([((ASViewGroupImpl_ViewGroupCommandParamsBuilderInternal *) nil_chk([((ASViewGroupImpl_ViewGroupCommandParamsBuilderInternal *) nil_chk(ASViewGroupImpl_ViewGroupParamsBean_getParamsBuilder(self))) reset])) tryGetLayoutMarginLeft])) getCommand];
  (void) [layoutParams putWithId:@"layoutParams" withId:command];
  [((id<ASIWidget>) nil_chk(w)) executeCommandWithJavaUtilMap:layoutParams withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_GETTER_METHOD];
  return [((ASViewGroupImpl_ViewGroupCommandParamsBuilderInternal *) nil_chk(ASViewGroupImpl_ViewGroupParamsBean_getParamsBuilder(self))) getLayoutMarginLeft];
}

- (void)setLayoutMarginLeftWithASIWidget:(id<ASIWidget>)w
                            withNSString:(NSString *)value {
  id<JavaUtilMap> layoutParams = new_JavaUtilHashMap_init();
  (void) [layoutParams putWithId:@"layoutParams" withId:[((ASViewGroupImpl_ViewGroupCommandParamsBuilderInternal *) nil_chk([((ASViewGroupImpl_ViewGroupCommandParamsBuilderInternal *) nil_chk([((ASViewGroupImpl_ViewGroupCommandParamsBuilderInternal *) nil_chk(ASViewGroupImpl_ViewGroupParamsBean_getParamsBuilder(self))) reset])) setLayoutMarginLeftWithNSString:value])) getCommand]];
  [((id<ASIWidget>) nil_chk(w)) executeCommandWithJavaUtilMap:layoutParams withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_SETTER_METHOD];
  [((id<ASIFragment>) nil_chk([w getFragment])) remeasure];
}

- (id)getLayoutMarginRightWithASIWidget:(id<ASIWidget>)w {
  id<JavaUtilMap> layoutParams = new_JavaUtilHashMap_init();
  id<JavaUtilMap> command = [((ASViewGroupImpl_ViewGroupCommandParamsBuilderInternal *) nil_chk([((ASViewGroupImpl_ViewGroupCommandParamsBuilderInternal *) nil_chk([((ASViewGroupImpl_ViewGroupCommandParamsBuilderInternal *) nil_chk(ASViewGroupImpl_ViewGroupParamsBean_getParamsBuilder(self))) reset])) tryGetLayoutMarginRight])) getCommand];
  (void) [layoutParams putWithId:@"layoutParams" withId:command];
  [((id<ASIWidget>) nil_chk(w)) executeCommandWithJavaUtilMap:layoutParams withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_GETTER_METHOD];
  return [((ASViewGroupImpl_ViewGroupCommandParamsBuilderInternal *) nil_chk(ASViewGroupImpl_ViewGroupParamsBean_getParamsBuilder(self))) getLayoutMarginRight];
}

- (void)setLayoutMarginRightWithASIWidget:(id<ASIWidget>)w
                             withNSString:(NSString *)value {
  id<JavaUtilMap> layoutParams = new_JavaUtilHashMap_init();
  (void) [layoutParams putWithId:@"layoutParams" withId:[((ASViewGroupImpl_ViewGroupCommandParamsBuilderInternal *) nil_chk([((ASViewGroupImpl_ViewGroupCommandParamsBuilderInternal *) nil_chk([((ASViewGroupImpl_ViewGroupCommandParamsBuilderInternal *) nil_chk(ASViewGroupImpl_ViewGroupParamsBean_getParamsBuilder(self))) reset])) setLayoutMarginRightWithNSString:value])) getCommand]];
  [((id<ASIWidget>) nil_chk(w)) executeCommandWithJavaUtilMap:layoutParams withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_SETTER_METHOD];
  [((id<ASIFragment>) nil_chk([w getFragment])) remeasure];
}

- (void)setLayoutMarginWithASIWidget:(id<ASIWidget>)w
                        withNSString:(NSString *)value {
  id<JavaUtilMap> layoutParams = new_JavaUtilHashMap_init();
  (void) [layoutParams putWithId:@"layoutParams" withId:[((ASViewGroupImpl_ViewGroupCommandParamsBuilderInternal *) nil_chk([((ASViewGroupImpl_ViewGroupCommandParamsBuilderInternal *) nil_chk([((ASViewGroupImpl_ViewGroupCommandParamsBuilderInternal *) nil_chk(ASViewGroupImpl_ViewGroupParamsBean_getParamsBuilder(self))) reset])) setLayoutMarginWithNSString:value])) getCommand]];
  [((id<ASIWidget>) nil_chk(w)) executeCommandWithJavaUtilMap:layoutParams withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_SETTER_METHOD];
  [((id<ASIFragment>) nil_chk([w getFragment])) remeasure];
}

- (void)setLayoutMarginHorizontalWithASIWidget:(id<ASIWidget>)w
                                  withNSString:(NSString *)value {
  id<JavaUtilMap> layoutParams = new_JavaUtilHashMap_init();
  (void) [layoutParams putWithId:@"layoutParams" withId:[((ASViewGroupImpl_ViewGroupCommandParamsBuilderInternal *) nil_chk([((ASViewGroupImpl_ViewGroupCommandParamsBuilderInternal *) nil_chk([((ASViewGroupImpl_ViewGroupCommandParamsBuilderInternal *) nil_chk(ASViewGroupImpl_ViewGroupParamsBean_getParamsBuilder(self))) reset])) setLayoutMarginHorizontalWithNSString:value])) getCommand]];
  [((id<ASIWidget>) nil_chk(w)) executeCommandWithJavaUtilMap:layoutParams withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_SETTER_METHOD];
  [((id<ASIFragment>) nil_chk([w getFragment])) remeasure];
}

- (void)setLayoutMarginVerticalWithASIWidget:(id<ASIWidget>)w
                                withNSString:(NSString *)value {
  id<JavaUtilMap> layoutParams = new_JavaUtilHashMap_init();
  (void) [layoutParams putWithId:@"layoutParams" withId:[((ASViewGroupImpl_ViewGroupCommandParamsBuilderInternal *) nil_chk([((ASViewGroupImpl_ViewGroupCommandParamsBuilderInternal *) nil_chk([((ASViewGroupImpl_ViewGroupCommandParamsBuilderInternal *) nil_chk(ASViewGroupImpl_ViewGroupParamsBean_getParamsBuilder(self))) reset])) setLayoutMarginVerticalWithNSString:value])) getCommand]];
  [((id<ASIWidget>) nil_chk(w)) executeCommandWithJavaUtilMap:layoutParams withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_SETTER_METHOD];
  [((id<ASIFragment>) nil_chk([w getFragment])) remeasure];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASViewGroupImpl_ViewGroupCommandParamsBuilderInternal;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 4, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 3, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 6, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 3, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 8, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 3, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 10, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 3, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 12, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getParamsBuilder);
  methods[2].selector = @selector(getLayoutMarginBottomWithASIWidget:);
  methods[3].selector = @selector(setLayoutMarginBottomWithASIWidget:withNSString:);
  methods[4].selector = @selector(getLayoutMarginTopWithASIWidget:);
  methods[5].selector = @selector(setLayoutMarginTopWithASIWidget:withNSString:);
  methods[6].selector = @selector(getLayoutMarginStartWithASIWidget:);
  methods[7].selector = @selector(setLayoutMarginStartWithASIWidget:withNSString:);
  methods[8].selector = @selector(getLayoutMarginEndWithASIWidget:);
  methods[9].selector = @selector(setLayoutMarginEndWithASIWidget:withNSString:);
  methods[10].selector = @selector(getLayoutMarginLeftWithASIWidget:);
  methods[11].selector = @selector(setLayoutMarginLeftWithASIWidget:withNSString:);
  methods[12].selector = @selector(getLayoutMarginRightWithASIWidget:);
  methods[13].selector = @selector(setLayoutMarginRightWithASIWidget:withNSString:);
  methods[14].selector = @selector(setLayoutMarginWithASIWidget:withNSString:);
  methods[15].selector = @selector(setLayoutMarginHorizontalWithASIWidget:withNSString:);
  methods[16].selector = @selector(setLayoutMarginVerticalWithASIWidget:withNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "commandBuilder_", "LASViewGroupImpl_ViewGroupCommandParamsBuilderInternal;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "getLayoutMarginBottom", "LASIWidget;", "setLayoutMarginBottom", "LASIWidget;LNSString;", "getLayoutMarginTop", "setLayoutMarginTop", "getLayoutMarginStart", "setLayoutMarginStart", "getLayoutMarginEnd", "setLayoutMarginEnd", "getLayoutMarginLeft", "setLayoutMarginLeft", "getLayoutMarginRight", "setLayoutMarginRight", "setLayoutMargin", "setLayoutMarginHorizontal", "setLayoutMarginVertical", "LASViewGroupImpl;" };
  static const J2ObjcClassInfo _ASViewGroupImpl_ViewGroupParamsBean = { "ViewGroupParamsBean", "com.ashera.layout", ptrTable, methods, fields, 7, 0x9, 17, 1, 17, -1, -1, -1, -1 };
  return &_ASViewGroupImpl_ViewGroupParamsBean;
}

@end

void ASViewGroupImpl_ViewGroupParamsBean_init(ASViewGroupImpl_ViewGroupParamsBean *self) {
  NSObject_init(self);
  self->commandBuilder_ = new_ASViewGroupImpl_ViewGroupCommandParamsBuilderInternal_init();
}

ASViewGroupImpl_ViewGroupParamsBean *new_ASViewGroupImpl_ViewGroupParamsBean_init() {
  J2OBJC_NEW_IMPL(ASViewGroupImpl_ViewGroupParamsBean, init)
}

ASViewGroupImpl_ViewGroupParamsBean *create_ASViewGroupImpl_ViewGroupParamsBean_init() {
  J2OBJC_CREATE_IMPL(ASViewGroupImpl_ViewGroupParamsBean, init)
}

ASViewGroupImpl_ViewGroupCommandParamsBuilderInternal *ASViewGroupImpl_ViewGroupParamsBean_getParamsBuilder(ASViewGroupImpl_ViewGroupParamsBean *self) {
  return self->commandBuilder_;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASViewGroupImpl_ViewGroupParamsBean)

@implementation ASViewGroupImpl_ViewGroupCommandParamsBuilder

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASViewGroupImpl_ViewGroupCommandParamsBuilder_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilMap>)getCommand {
  return command_;
}

- (id)reset {
  orderGet_ = 0;
  orderSet_ = 0;
  command_ = new_JavaUtilHashMap_init();
  return self;
}

- (id<JavaUtilMap>)initCommandWithNSString:(NSString *)attributeName {
  id<JavaUtilMap> attrs = (id<JavaUtilMap>) cast_check([((id<JavaUtilMap>) nil_chk(command_)) getWithId:attributeName], JavaUtilMap_class_());
  if (attrs == nil) {
    attrs = new_JavaUtilHashMap_init();
    (void) [((id<JavaUtilMap>) nil_chk(command_)) putWithId:attributeName withId:attrs];
  }
  return attrs;
}

- (id)tryGetLayoutMarginBottom {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"layout_marginBottom"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getLayoutMarginBottom {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"layout_marginBottom"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (id)setLayoutMarginBottomWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"layout_marginBottom"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (id)tryGetLayoutMarginTop {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"layout_marginTop"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getLayoutMarginTop {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"layout_marginTop"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (id)setLayoutMarginTopWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"layout_marginTop"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (id)tryGetLayoutMarginStart {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"layout_marginStart"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getLayoutMarginStart {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"layout_marginStart"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (id)setLayoutMarginStartWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"layout_marginStart"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (id)tryGetLayoutMarginEnd {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"layout_marginEnd"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getLayoutMarginEnd {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"layout_marginEnd"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (id)setLayoutMarginEndWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"layout_marginEnd"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (id)tryGetLayoutMarginLeft {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"layout_marginLeft"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getLayoutMarginLeft {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"layout_marginLeft"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (id)setLayoutMarginLeftWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"layout_marginLeft"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (id)tryGetLayoutMarginRight {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"layout_marginRight"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getLayoutMarginRight {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"layout_marginRight"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (id)setLayoutMarginRightWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"layout_marginRight"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (id)setLayoutMarginWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"layout_margin"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (id)setLayoutMarginHorizontalWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"layout_marginHorizontal"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (id)setLayoutMarginVerticalWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"layout_marginVertical"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, 2, 3, -1, 4, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 5, 3, -1, 6, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 7, 3, -1, 6, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 8, 3, -1, 6, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 9, 3, -1, 6, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 10, 3, -1, 6, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 11, 3, -1, 6, -1, -1 },
    { NULL, "LNSObject;", 0x1, 12, 3, -1, 6, -1, -1 },
    { NULL, "LNSObject;", 0x1, 13, 3, -1, 6, -1, -1 },
    { NULL, "LNSObject;", 0x1, 14, 3, -1, 6, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getCommand);
  methods[2].selector = @selector(reset);
  methods[3].selector = @selector(initCommandWithNSString:);
  methods[4].selector = @selector(tryGetLayoutMarginBottom);
  methods[5].selector = @selector(getLayoutMarginBottom);
  methods[6].selector = @selector(setLayoutMarginBottomWithNSString:);
  methods[7].selector = @selector(tryGetLayoutMarginTop);
  methods[8].selector = @selector(getLayoutMarginTop);
  methods[9].selector = @selector(setLayoutMarginTopWithNSString:);
  methods[10].selector = @selector(tryGetLayoutMarginStart);
  methods[11].selector = @selector(getLayoutMarginStart);
  methods[12].selector = @selector(setLayoutMarginStartWithNSString:);
  methods[13].selector = @selector(tryGetLayoutMarginEnd);
  methods[14].selector = @selector(getLayoutMarginEnd);
  methods[15].selector = @selector(setLayoutMarginEndWithNSString:);
  methods[16].selector = @selector(tryGetLayoutMarginLeft);
  methods[17].selector = @selector(getLayoutMarginLeft);
  methods[18].selector = @selector(setLayoutMarginLeftWithNSString:);
  methods[19].selector = @selector(tryGetLayoutMarginRight);
  methods[20].selector = @selector(getLayoutMarginRight);
  methods[21].selector = @selector(setLayoutMarginRightWithNSString:);
  methods[22].selector = @selector(setLayoutMarginWithNSString:);
  methods[23].selector = @selector(setLayoutMarginHorizontalWithNSString:);
  methods[24].selector = @selector(setLayoutMarginVerticalWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "command_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x4, -1, -1, 15, -1 },
    { "orderGet_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "orderSet_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", "()TT;", "initCommand", "LNSString;", "(Ljava/lang/String;)Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", "setLayoutMarginBottom", "(Ljava/lang/String;)TT;", "setLayoutMarginTop", "setLayoutMarginStart", "setLayoutMarginEnd", "setLayoutMarginLeft", "setLayoutMarginRight", "setLayoutMargin", "setLayoutMarginHorizontal", "setLayoutMarginVertical", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", "LASViewGroupImpl;", "<T:Ljava/lang/Object;>Ljava/lang/Object;" };
  static const J2ObjcClassInfo _ASViewGroupImpl_ViewGroupCommandParamsBuilder = { "ViewGroupCommandParamsBuilder", "com.ashera.layout", ptrTable, methods, fields, 7, 0x9, 25, 3, 16, -1, -1, 17, -1 };
  return &_ASViewGroupImpl_ViewGroupCommandParamsBuilder;
}

@end

void ASViewGroupImpl_ViewGroupCommandParamsBuilder_init(ASViewGroupImpl_ViewGroupCommandParamsBuilder *self) {
  NSObject_init(self);
  self->command_ = new_JavaUtilHashMap_init();
}

ASViewGroupImpl_ViewGroupCommandParamsBuilder *new_ASViewGroupImpl_ViewGroupCommandParamsBuilder_init() {
  J2OBJC_NEW_IMPL(ASViewGroupImpl_ViewGroupCommandParamsBuilder, init)
}

ASViewGroupImpl_ViewGroupCommandParamsBuilder *create_ASViewGroupImpl_ViewGroupCommandParamsBuilder_init() {
  J2OBJC_CREATE_IMPL(ASViewGroupImpl_ViewGroupCommandParamsBuilder, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASViewGroupImpl_ViewGroupCommandParamsBuilder)

@implementation ASViewGroupImpl_ViewGroupCommandParamsBuilderInternal

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASViewGroupImpl_ViewGroupCommandParamsBuilderInternal_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LASViewGroupImpl;", "Lcom/ashera/layout/ViewGroupImpl$ViewGroupCommandParamsBuilder<Lcom/ashera/layout/ViewGroupImpl$ViewGroupCommandParamsBuilderInternal;>;" };
  static const J2ObjcClassInfo _ASViewGroupImpl_ViewGroupCommandParamsBuilderInternal = { "ViewGroupCommandParamsBuilderInternal", "com.ashera.layout", ptrTable, methods, NULL, 7, 0x8, 1, 0, 0, -1, -1, 1, -1 };
  return &_ASViewGroupImpl_ViewGroupCommandParamsBuilderInternal;
}

@end

void ASViewGroupImpl_ViewGroupCommandParamsBuilderInternal_init(ASViewGroupImpl_ViewGroupCommandParamsBuilderInternal *self) {
  ASViewGroupImpl_ViewGroupCommandParamsBuilder_init(self);
}

ASViewGroupImpl_ViewGroupCommandParamsBuilderInternal *new_ASViewGroupImpl_ViewGroupCommandParamsBuilderInternal_init() {
  J2OBJC_NEW_IMPL(ASViewGroupImpl_ViewGroupCommandParamsBuilderInternal, init)
}

ASViewGroupImpl_ViewGroupCommandParamsBuilderInternal *create_ASViewGroupImpl_ViewGroupCommandParamsBuilderInternal_init() {
  J2OBJC_CREATE_IMPL(ASViewGroupImpl_ViewGroupCommandParamsBuilderInternal, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASViewGroupImpl_ViewGroupCommandParamsBuilderInternal)

@implementation ASViewGroupImpl_ClipPaddingMaskCommand

- (instancetype)initWithNSString:(NSString *)id_ {
  ASViewGroupImpl_ClipPaddingMaskCommand_initWithNSString_(self, id_);
  return self;
}

- (void)createMaskLayerWithASIWidget:(id<ASIWidget>)w {
  ASViewGroupImpl_ClipPaddingMaskCommand_createMaskLayerWithASIWidget_(self, w);
}

- (void)nativeCreateMaskLayerWithId:(id)uiView
                            withInt:(jint)left
                            withInt:(jint)top
                            withInt:(jint)width
                            withInt:(jint)height {
  ASViewGroupImpl_ClipPaddingMaskCommand_nativeCreateMaskLayerWithId_withInt_withInt_withInt_withInt_(self, uiView, left, top, width, height);
}

- (id)modifyValueWithASIWidget:(id<ASIWidget>)widget
                        withId:(id)nativeView
                  withNSString:(NSString *)phase
                  withNSString:(NSString *)attributeName
                        withId:(id)value {
  ASViewGroupImpl_ClipPaddingMaskCommand_createMaskLayerWithASIWidget_(self, widget);
  return value;
}

- (id<ASAttributeCommand>)newInstanceWithNSObjectArray:(IOSObjectArray *)args {
  return new_ASViewGroupImpl_ClipPaddingMaskCommand_initWithNSString_(self->id__);
}

- (void)updateArgsWithNSObjectArray:(IOSObjectArray *)args {
}

- (jboolean)executeAfterPostMeasure {
  return true;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 3, 4, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "LASAttributeCommand;", 0x81, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x81, 9, 8, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(createMaskLayerWithASIWidget:);
  methods[2].selector = @selector(nativeCreateMaskLayerWithId:withInt:withInt:withInt:withInt:);
  methods[3].selector = @selector(modifyValueWithASIWidget:withId:withNSString:withNSString:withId:);
  methods[4].selector = @selector(newInstanceWithNSObjectArray:);
  methods[5].selector = @selector(updateArgsWithNSObjectArray:);
  methods[6].selector = @selector(executeAfterPostMeasure);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LNSString;", "createMaskLayer", "LASIWidget;", "nativeCreateMaskLayer", "LNSObject;IIII", "modifyValue", "LASIWidget;LNSObject;LNSString;LNSString;LNSObject;", "newInstance", "[LNSObject;", "updateArgs", "LASViewGroupImpl;" };
  static const J2ObjcClassInfo _ASViewGroupImpl_ClipPaddingMaskCommand = { "ClipPaddingMaskCommand", "com.ashera.layout", ptrTable, methods, NULL, 7, 0x9, 7, 0, 10, -1, -1, -1, -1 };
  return &_ASViewGroupImpl_ClipPaddingMaskCommand;
}

@end

void ASViewGroupImpl_ClipPaddingMaskCommand_initWithNSString_(ASViewGroupImpl_ClipPaddingMaskCommand *self, NSString *id_) {
  ASBaseAttributeCommand_initWithNSString_(self, id_);
}

ASViewGroupImpl_ClipPaddingMaskCommand *new_ASViewGroupImpl_ClipPaddingMaskCommand_initWithNSString_(NSString *id_) {
  J2OBJC_NEW_IMPL(ASViewGroupImpl_ClipPaddingMaskCommand, initWithNSString_, id_)
}

ASViewGroupImpl_ClipPaddingMaskCommand *create_ASViewGroupImpl_ClipPaddingMaskCommand_initWithNSString_(NSString *id_) {
  J2OBJC_CREATE_IMPL(ASViewGroupImpl_ClipPaddingMaskCommand, initWithNSString_, id_)
}

void ASViewGroupImpl_ClipPaddingMaskCommand_createMaskLayerWithASIWidget_(ASViewGroupImpl_ClipPaddingMaskCommand *self, id<ASIWidget> w) {
  ADViewGroup *view = (ADViewGroup *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADViewGroup class]);
  ADRect *rect = [((ADViewGroup *) nil_chk(view)) getPaddingMaskBounds];
  ASViewGroupImpl_ClipPaddingMaskCommand_nativeCreateMaskLayerWithId_withInt_withInt_withInt_withInt_(self, [w asNativeWidget], ((ADRect *) nil_chk(rect))->left_, rect->top_, [rect width], [rect height]);
}

void ASViewGroupImpl_ClipPaddingMaskCommand_nativeCreateMaskLayerWithId_withInt_withInt_withInt_withInt_(ASViewGroupImpl_ClipPaddingMaskCommand *self, id uiView, jint left, jint top, jint width, jint height) {
  // Create a mask layer and the frame to determine what will be visible in the view.
  CAShapeLayer *maskLayer = [[CAShapeLayer alloc] init];
  CGRect maskRect = CGRectMake(left, top, width, height);
  
  // Create a path with the rectangle in it.
  CGPathRef path = CGPathCreateWithRect(maskRect, NULL);
  
  // Set the path to the mask layer.
  maskLayer.path = path;
  
  // Release the path since it's not covered by ARC.
  CGPathRelease(path);
  
  // Set the mask of the view.
  ((UIView*) uiView).layer.mask = maskLayer;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASViewGroupImpl_ClipPaddingMaskCommand)
