//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-widget_library\Plugin_HtmlParser\src\com\ashera\parser\html\Html2JsonSaxHandler.java
//

#include "Html2JsonSaxHandler.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Boolean.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayDeque.h"
#include "java/util/ArrayList.h"
#include "java/util/Deque.h"
#include "java/util/HashMap.h"
#include "java/util/LinkedHashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "org/xml/sax/Attributes.h"
#include "org/xml/sax/Locator.h"

@class JavaLangStringBuilder;
@protocol JavaUtilDeque;
@protocol JavaUtilMap;


@interface ASHtml2JsonSaxHandler () {
 @public
  id<JavaUtilDeque> stack_;
  id<JavaUtilDeque> nameStack_;
  id<JavaUtilMap> root_;
  JavaLangStringBuilder *textBuffer_;
}

- (void)writeJsonWithId:(id)v
withJavaLangStringBuilder:(JavaLangStringBuilder *)sb;

- (NSString *)escapeWithNSString:(NSString *)s;

@end

J2OBJC_FIELD_SETTER(ASHtml2JsonSaxHandler, stack_, id<JavaUtilDeque>)
J2OBJC_FIELD_SETTER(ASHtml2JsonSaxHandler, nameStack_, id<JavaUtilDeque>)
J2OBJC_FIELD_SETTER(ASHtml2JsonSaxHandler, root_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(ASHtml2JsonSaxHandler, textBuffer_, JavaLangStringBuilder *)

__attribute__((unused)) static void ASHtml2JsonSaxHandler_writeJsonWithId_withJavaLangStringBuilder_(ASHtml2JsonSaxHandler *self, id v, JavaLangStringBuilder *sb);

__attribute__((unused)) static NSString *ASHtml2JsonSaxHandler_escapeWithNSString_(ASHtml2JsonSaxHandler *self, NSString *s);

@implementation ASHtml2JsonSaxHandler

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASHtml2JsonSaxHandler_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)startElementWithNSString:(NSString *)uri
                    withNSString:(NSString *)localName
                    withNSString:(NSString *)qName
         withOrgXmlSaxAttributes:(id<OrgXmlSaxAttributes>)attributes {
  if ([((NSString *) nil_chk(localName)) isEqual:@"html"] || [localName isEqual:@"body"]) {
    return;
  }
  [((JavaLangStringBuilder *) nil_chk(textBuffer_)) setLengthWithInt:0];
  id<JavaUtilMap> node = create_JavaUtilLinkedHashMap_init();
  for (jint i = 0; i < [((id<OrgXmlSaxAttributes>) nil_chk(attributes)) getLength]; i++) {
    [node putWithId:JreStrcat("C$", '@', [attributes getQNameWithInt:i]) withId:[attributes getValueWithInt:i]];
  }
  if (![((id<JavaUtilDeque>) nil_chk(stack_)) isEmpty]) {
    id<JavaUtilMap> parent = JreRetainedLocalValue([((id<JavaUtilDeque>) nil_chk(stack_)) peek]);
    id existing = JreRetainedLocalValue([((id<JavaUtilMap>) nil_chk(parent)) getWithId:qName]);
    if (existing == nil) {
      [parent putWithId:qName withId:node];
    }
    else if ([JavaUtilList_class_() isInstance:existing]) {
      [((id<JavaUtilList>) cast_check(existing, JavaUtilList_class_())) addWithId:node];
    }
    else {
      id<JavaUtilList> arr = create_JavaUtilArrayList_init();
      [arr addWithId:existing];
      [arr addWithId:node];
      [parent putWithId:qName withId:arr];
    }
  }
  [((id<JavaUtilDeque>) nil_chk(stack_)) pushWithId:node];
  [((id<JavaUtilDeque>) nil_chk(nameStack_)) pushWithId:qName];
  if (root_ == nil) {
    JreStrongAssignAndConsume(&root_, new_JavaUtilHashMap_init());
    [root_ putWithId:qName withId:node];
  }
}

- (void)charactersWithCharArray:(IOSCharArray *)ch
                        withInt:(jint)start
                        withInt:(jint)length {
  [((JavaLangStringBuilder *) nil_chk(textBuffer_)) appendWithCharArray:ch withInt:start withInt:length];
}

- (void)endElementWithNSString:(NSString *)uri
                  withNSString:(NSString *)localName
                  withNSString:(NSString *)qName {
  if ([((NSString *) nil_chk(localName)) isEqual:@"html"] || [localName isEqual:@"body"]) {
    return;
  }
  NSString *text = [((NSString *) nil_chk([((JavaLangStringBuilder *) nil_chk(textBuffer_)) description])) java_trim];
  if (![((NSString *) nil_chk(text)) java_isEmpty]) {
    id<JavaUtilMap> current = JreRetainedLocalValue([((id<JavaUtilDeque>) nil_chk(stack_)) peek]);
    id existing = JreRetainedLocalValue([((id<JavaUtilMap>) nil_chk(current)) getWithId:@"#text"]);
    if (existing == nil) {
      [current putWithId:@"#text" withId:text];
    }
    else {
      [current putWithId:@"#text" withId:JreStrcat("$$", [existing description], text)];
    }
  }
  [((id<JavaUtilDeque>) nil_chk(stack_)) pop];
  [((id<JavaUtilDeque>) nil_chk(nameStack_)) pop];
  [((JavaLangStringBuilder *) nil_chk(textBuffer_)) setLengthWithInt:0];
}

- (id<JavaUtilMap>)getRoot {
  return root_;
}

- (NSString *)toJson {
  JavaLangStringBuilder *sb = create_JavaLangStringBuilder_init();
  ASHtml2JsonSaxHandler_writeJsonWithId_withJavaLangStringBuilder_(self, root_, sb);
  return [sb description];
}

- (void)writeJsonWithId:(id)v
withJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  ASHtml2JsonSaxHandler_writeJsonWithId_withJavaLangStringBuilder_(self, v, sb);
}

- (NSString *)escapeWithNSString:(NSString *)s {
  return ASHtml2JsonSaxHandler_escapeWithNSString_(self, s);
}

- (void)setDocumentLocatorWithOrgXmlSaxLocator:(id<OrgXmlSaxLocator>)locator {
}

- (void)startDocument {
}

- (void)endDocument {
}

- (void)startPrefixMappingWithNSString:(NSString *)prefix
                          withNSString:(NSString *)uri {
}

- (void)endPrefixMappingWithNSString:(NSString *)prefix {
}

- (void)ignorableWhitespaceWithCharArray:(IOSCharArray *)ch
                                 withInt:(jint)start
                                 withInt:(jint)length {
}

- (void)processingInstructionWithNSString:(NSString *)target
                             withNSString:(NSString *)data {
}

- (void)skippedEntityWithNSString:(NSString *)name {
}

- (void)dealloc {
  RELEASE_(stack_);
  RELEASE_(nameStack_);
  RELEASE_(root_);
  RELEASE_(textBuffer_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 6, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 7, 8, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 13, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 13, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 15, 13, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 10, 13, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 3, 13, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 15, 13, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 10, 13, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(startElementWithNSString:withNSString:withNSString:withOrgXmlSaxAttributes:);
  methods[2].selector = @selector(charactersWithCharArray:withInt:withInt:);
  methods[3].selector = @selector(endElementWithNSString:withNSString:withNSString:);
  methods[4].selector = @selector(getRoot);
  methods[5].selector = @selector(toJson);
  methods[6].selector = @selector(writeJsonWithId:withJavaLangStringBuilder:);
  methods[7].selector = @selector(escapeWithNSString:);
  methods[8].selector = @selector(setDocumentLocatorWithOrgXmlSaxLocator:);
  methods[9].selector = @selector(startDocument);
  methods[10].selector = @selector(endDocument);
  methods[11].selector = @selector(startPrefixMappingWithNSString:withNSString:);
  methods[12].selector = @selector(endPrefixMappingWithNSString:);
  methods[13].selector = @selector(ignorableWhitespaceWithCharArray:withInt:withInt:);
  methods[14].selector = @selector(processingInstructionWithNSString:withNSString:);
  methods[15].selector = @selector(skippedEntityWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "stack_", "LJavaUtilDeque;", .constantValue.asLong = 0, 0x2, -1, -1, 20, -1 },
    { "nameStack_", "LJavaUtilDeque;", .constantValue.asLong = 0, 0x2, -1, -1, 21, -1 },
    { "root_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 22, -1 },
    { "textBuffer_", "LJavaLangStringBuilder;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "startElement", "LNSString;LNSString;LNSString;LOrgXmlSaxAttributes;", "characters", "[CII", "endElement", "LNSString;LNSString;LNSString;", "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", "writeJson", "LNSObject;LJavaLangStringBuilder;", "escape", "LNSString;", "setDocumentLocator", "LOrgXmlSaxLocator;", "LOrgXmlSaxSAXException;", "startPrefixMapping", "LNSString;LNSString;", "endPrefixMapping", "ignorableWhitespace", "processingInstruction", "skippedEntity", "Ljava/util/Deque<Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;>;", "Ljava/util/Deque<Ljava/lang/String;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;" };
  static const J2ObjcClassInfo _ASHtml2JsonSaxHandler = { "Html2JsonSaxHandler", "com.ashera.parser.html", ptrTable, methods, fields, 7, 0x1, 16, 4, -1, -1, -1, -1, -1 };
  return &_ASHtml2JsonSaxHandler;
}

@end

void ASHtml2JsonSaxHandler_init(ASHtml2JsonSaxHandler *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->stack_, new_JavaUtilArrayDeque_init());
  JreStrongAssignAndConsume(&self->nameStack_, new_JavaUtilArrayDeque_init());
  JreStrongAssignAndConsume(&self->textBuffer_, new_JavaLangStringBuilder_init());
}

ASHtml2JsonSaxHandler *new_ASHtml2JsonSaxHandler_init() {
  J2OBJC_NEW_IMPL(ASHtml2JsonSaxHandler, init)
}

ASHtml2JsonSaxHandler *create_ASHtml2JsonSaxHandler_init() {
  J2OBJC_CREATE_IMPL(ASHtml2JsonSaxHandler, init)
}

void ASHtml2JsonSaxHandler_writeJsonWithId_withJavaLangStringBuilder_(ASHtml2JsonSaxHandler *self, id v, JavaLangStringBuilder *sb) {
  if (v == nil) {
    [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:@"null"];
  }
  else if ([v isKindOfClass:[NSString class]]) {
    [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk(sb)) appendWithChar:'"'])) appendWithNSString:ASHtml2JsonSaxHandler_escapeWithNSString_(self, (NSString *) v)])) appendWithChar:'"'];
  }
  else if ([v isKindOfClass:[NSNumber class]] || [v isKindOfClass:[JavaLangBoolean class]]) {
    [((JavaLangStringBuilder *) nil_chk(sb)) appendWithNSString:[v description]];
  }
  else if ([JavaUtilMap_class_() isInstance:v]) {
    [((JavaLangStringBuilder *) nil_chk(sb)) appendWithChar:'{'];
    jboolean first = true;
    for (id<JavaUtilMap_Entry> __strong e in nil_chk([((id<JavaUtilMap>) cast_check(v, JavaUtilMap_class_())) entrySet])) {
      if (!first) [sb appendWithChar:','];
      first = false;
      [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([sb appendWithChar:'"'])) appendWithNSString:ASHtml2JsonSaxHandler_escapeWithNSString_(self, NSString_java_valueOf_([((id<JavaUtilMap_Entry>) nil_chk(e)) getKey]))])) appendWithChar:'"'])) appendWithChar:':'];
      ASHtml2JsonSaxHandler_writeJsonWithId_withJavaLangStringBuilder_(self, [e getValue], sb);
    }
    [sb appendWithChar:'}'];
  }
  else if ([JavaUtilList_class_() isInstance:v]) {
    [((JavaLangStringBuilder *) nil_chk(sb)) appendWithChar:'['];
    jboolean first = true;
    for (id __strong item in (id<JavaUtilList>) cast_check(v, JavaUtilList_class_())) {
      if (!first) [sb appendWithChar:','];
      first = false;
      ASHtml2JsonSaxHandler_writeJsonWithId_withJavaLangStringBuilder_(self, item, sb);
    }
    [sb appendWithChar:']'];
  }
  else {
    [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk(sb)) appendWithChar:'"'])) appendWithNSString:ASHtml2JsonSaxHandler_escapeWithNSString_(self, NSString_java_valueOf_(v))])) appendWithChar:'"'];
  }
}

NSString *ASHtml2JsonSaxHandler_escapeWithNSString_(ASHtml2JsonSaxHandler *self, NSString *s) {
  JavaLangStringBuilder *out = create_JavaLangStringBuilder_initWithInt_([((NSString *) nil_chk(s)) java_length] + 16);
  for (jint i = 0; i < [s java_length]; i++) {
    jchar c = [s charAtWithInt:i];
    switch (c) {
      case '"':
      [out appendWithNSString:@"\\\""];
      break;
      case '\\':
      [out appendWithNSString:@"\\\\"];
      break;
      case 0x0008:
      [out appendWithNSString:@"\\b"];
      break;
      case 0x000c:
      [out appendWithNSString:@"\\f"];
      break;
      case 0x000a:
      [out appendWithNSString:@"\\n"];
      break;
      case 0x000d:
      [out appendWithNSString:@"\\r"];
      break;
      case 0x0009:
      [out appendWithNSString:@"\\t"];
      break;
      default:
      if (c < (jint) 0x20) [out appendWithNSString:NSString_java_formatWithNSString_withNSObjectArray_(@"\\u%04x", [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_((jint) c) } count:1 type:NSObject_class_()])];
      else [out appendWithChar:c];
    }
  }
  return [out description];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASHtml2JsonSaxHandler)
