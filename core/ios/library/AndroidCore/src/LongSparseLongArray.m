//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroid\src\main\java\r\android\util\LongSparseLongArray.java
//

#define J2OBJC_IMPORTED_BY_JAVA_IMPLEMENTATION 1




#include "ContainerHelpers.h"
#include "GrowingArrayUtils.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "LongSparseLongArray.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/System.h"




#pragma clang diagnostic error "-Wreturn-type"
#pragma clang diagnostic ignored "-Wswitch"


@interface ADLongSparseLongArray () {
 @public
  IOSLongArray *mKeys_;
  IOSLongArray *mValues_;
  int32_t mSize_;
}

@end

J2OBJC_FIELD_SETTER(ADLongSparseLongArray, mKeys_, IOSLongArray *)
J2OBJC_FIELD_SETTER(ADLongSparseLongArray, mValues_, IOSLongArray *)

@implementation ADLongSparseLongArray

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADLongSparseLongArray_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithInt:(int32_t)initialCapacity {
  ADLongSparseLongArray_initWithInt_(self, initialCapacity);
  return self;
}

- (int64_t)getWithLong:(int64_t)key {
  return [self getWithLong:key withLong:0];
}

- (int64_t)getWithLong:(int64_t)key
              withLong:(int64_t)valueIfKeyNotFound {
  int32_t i = ADContainerHelpers_binarySearchWithLongArray_withInt_withLong_(mKeys_, mSize_, key);
  if (i < 0) {
    return valueIfKeyNotFound;
  }
  else {
    return IOSLongArray_Get(nil_chk(mValues_), i);
  }
}

- (void)delete__WithLong:(int64_t)key {
  int32_t i = ADContainerHelpers_binarySearchWithLongArray_withInt_withLong_(mKeys_, mSize_, key);
  if (i >= 0) {
    [self removeAtWithInt:i];
  }
}

- (void)removeAtWithInt:(int32_t)index {
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(mKeys_, index + 1, mKeys_, index, mSize_ - (index + 1));
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(mValues_, index + 1, mValues_, index, mSize_ - (index + 1));
  mSize_--;
}

- (void)putWithLong:(int64_t)key
           withLong:(int64_t)value {
  int32_t i = ADContainerHelpers_binarySearchWithLongArray_withInt_withLong_(mKeys_, mSize_, key);
  if (i >= 0) {
    *IOSLongArray_GetRef(nil_chk(mValues_), i) = value;
  }
  else {
    i = ~i;
    JreStrongAssign(&mKeys_, ADGrowingArrayUtils_insertWithLongArray_withInt_withInt_withLong_(mKeys_, mSize_, i, key));
    JreStrongAssign(&mValues_, ADGrowingArrayUtils_insertWithLongArray_withInt_withInt_withLong_(mValues_, mSize_, i, value));
    mSize_++;
  }
}

- (int32_t)size {
  return mSize_;
}

- (int64_t)keyAtWithInt:(int32_t)index {
  return IOSLongArray_Get(nil_chk(mKeys_), index);
}

- (int64_t)valueAtWithInt:(int32_t)index {
  return IOSLongArray_Get(nil_chk(mValues_), index);
}

- (int32_t)indexOfKeyWithLong:(int64_t)key {
  return ADContainerHelpers_binarySearchWithLongArray_withInt_withLong_(mKeys_, mSize_, key);
}

- (int32_t)indexOfValueWithLong:(int64_t)value {
  for (int32_t i = 0; i < mSize_; i++) if (IOSLongArray_Get(nil_chk(mValues_), i) == value) return i;
  return -1;
}

- (void)clear {
  mSize_ = 0;
}

- (void)dealloc {
  RELEASE_(mKeys_);
  RELEASE_(mValues_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 1, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 7, 0, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 8, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 9, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 10, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithInt:);
  methods[2].selector = @selector(getWithLong:);
  methods[3].selector = @selector(getWithLong:withLong:);
  methods[4].selector = @selector(delete__WithLong:);
  methods[5].selector = @selector(removeAtWithInt:);
  methods[6].selector = @selector(putWithLong:withLong:);
  methods[7].selector = @selector(size);
  methods[8].selector = @selector(keyAtWithInt:);
  methods[9].selector = @selector(valueAtWithInt:);
  methods[10].selector = @selector(indexOfKeyWithLong:);
  methods[11].selector = @selector(indexOfValueWithLong:);
  methods[12].selector = @selector(clear);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mKeys_", "[J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mValues_", "[J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mSize_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "get", "J", "JJ", "delete", "removeAt", "put", "keyAt", "valueAt", "indexOfKey", "indexOfValue" };
  static const J2ObjcClassInfo _ADLongSparseLongArray = { "LongSparseLongArray", "r.android.util", ptrTable, methods, fields, 7, 0x1, 13, 3, -1, -1, -1, -1, -1 };
  return &_ADLongSparseLongArray;
}

@end

void ADLongSparseLongArray_init(ADLongSparseLongArray *self) {
  ADLongSparseLongArray_initWithInt_(self, 10);
}

ADLongSparseLongArray *new_ADLongSparseLongArray_init() {
  J2OBJC_NEW_IMPL(ADLongSparseLongArray, init)
}

ADLongSparseLongArray *create_ADLongSparseLongArray_init() {
  J2OBJC_CREATE_IMPL(ADLongSparseLongArray, init)
}

void ADLongSparseLongArray_initWithInt_(ADLongSparseLongArray *self, int32_t initialCapacity) {
  NSObject_init(self);
  if (initialCapacity == 0) {
    JreStrongAssignAndConsume(&self->mKeys_, [IOSLongArray newArrayWithLength:0]);
    JreStrongAssignAndConsume(&self->mValues_, [IOSLongArray newArrayWithLength:0]);
  }
  else {
    JreStrongAssignAndConsume(&self->mKeys_, [IOSLongArray newArrayWithLength:initialCapacity]);
    JreStrongAssignAndConsume(&self->mValues_, [IOSLongArray newArrayWithLength:self->mKeys_->size_]);
  }
  self->mSize_ = 0;
}

ADLongSparseLongArray *new_ADLongSparseLongArray_initWithInt_(int32_t initialCapacity) {
  J2OBJC_NEW_IMPL(ADLongSparseLongArray, initWithInt_, initialCapacity)
}

ADLongSparseLongArray *create_ADLongSparseLongArray_initWithInt_(int32_t initialCapacity) {
  J2OBJC_CREATE_IMPL(ADLongSparseLongArray, initWithInt_, initialCapacity)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADLongSparseLongArray)

J2OBJC_NAME_MAPPING(ADLongSparseLongArray, "r.android.util", "AD")
