//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroid\src\main\java\r\android\animation\PointFEvaluator.java
//

#define J2OBJC_IMPORTED_BY_JAVA_IMPLEMENTATION 1




#include "J2ObjC_source.h"
#include "PointF.h"
#include "PointFEvaluator.h"
#include "java/lang/Float.h"




#pragma clang diagnostic error "-Wreturn-type"
#pragma clang diagnostic ignored "-Wswitch"


@interface ADPointFEvaluator () {
 @public
  /*!
   @brief When null, a new PointF is returned on every evaluate call.When non-null,
  mPoint will be modified and returned on every evaluate.
   */
  ADPointF *mPoint_;
}

@end

J2OBJC_FIELD_SETTER(ADPointFEvaluator, mPoint_, ADPointF *)

@implementation ADPointFEvaluator

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADPointFEvaluator_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithADPointF:(ADPointF *)reuse {
  ADPointFEvaluator_initWithADPointF_(self, reuse);
  return self;
}

- (ADPointF *)evaluateWithFloat:(float)fraction
                         withId:(ADPointF *)startValue
                         withId:(ADPointF *)endValue {
  float x = ((ADPointF *) nil_chk(startValue))->x_ + (fraction * (((ADPointF *) nil_chk(endValue))->x_ - startValue->x_));
  float y = startValue->y_ + (fraction * (endValue->y_ - startValue->y_));
  if (mPoint_ != nil) {
    [mPoint_ setWithFloat:x withFloat:y];
    return mPoint_;
  }
  else {
    return create_ADPointF_initWithFloat_withFloat_(x, y);
  }
}

- (void)dealloc {
  RELEASE_(mPoint_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LADPointF;", 0x1, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithADPointF:);
  methods[2].selector = @selector(evaluateWithFloat:withId:withId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mPoint_", "LADPointF;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LADPointF;", "evaluate", "FLADPointF;LADPointF;", "Ljava/lang/Object;Lr/android/animation/TypeEvaluator<Lr/android/graphics/PointF;>;" };
  static const J2ObjcClassInfo _ADPointFEvaluator = { "PointFEvaluator", "r.android.animation", ptrTable, methods, fields, 7, 0x1, 3, 1, -1, -1, -1, 3, -1 };
  return &_ADPointFEvaluator;
}

@end

void ADPointFEvaluator_init(ADPointFEvaluator *self) {
  NSObject_init(self);
}

ADPointFEvaluator *new_ADPointFEvaluator_init() {
  J2OBJC_NEW_IMPL(ADPointFEvaluator, init)
}

ADPointFEvaluator *create_ADPointFEvaluator_init() {
  J2OBJC_CREATE_IMPL(ADPointFEvaluator, init)
}

void ADPointFEvaluator_initWithADPointF_(ADPointFEvaluator *self, ADPointF *reuse) {
  NSObject_init(self);
  JreStrongAssign(&self->mPoint_, reuse);
}

ADPointFEvaluator *new_ADPointFEvaluator_initWithADPointF_(ADPointF *reuse) {
  J2OBJC_NEW_IMPL(ADPointFEvaluator, initWithADPointF_, reuse)
}

ADPointFEvaluator *create_ADPointFEvaluator_initWithADPointF_(ADPointF *reuse) {
  J2OBJC_CREATE_IMPL(ADPointFEvaluator, initWithADPointF_, reuse)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADPointFEvaluator)

J2OBJC_NAME_MAPPING(ADPointFEvaluator, "r.android.animation", "AD")
