//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroid\src\main\java\r\android\animation\ObjectAnimator.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ObjectAnimator")
#ifdef RESTRICT_ObjectAnimator
#define INCLUDE_ALL_ObjectAnimator 0
#else
#define INCLUDE_ALL_ObjectAnimator 1
#endif
#undef RESTRICT_ObjectAnimator

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ADObjectAnimator_) && (INCLUDE_ALL_ObjectAnimator || defined(INCLUDE_ADObjectAnimator))
#define ADObjectAnimator_

#define RESTRICT_ValueAnimator 1
#define INCLUDE_ADValueAnimator 1
#include "ValueAnimator.h"

@class ADPath;
@class ADProperty;
@class ADTypeConverter;
@class IOSFloatArray;
@class IOSIntArray;
@class IOSObjectArray;
@protocol ADAnimationHandler_AnimationFrameCallback;
@protocol ADTypeEvaluator;

/*!
 @brief This subclass of <code>ValueAnimator</code> provides support for animating properties on target objects.
 The constructors of this class take parameters to define the target object that will be animated
  as well as the name of the property that will be animated. Appropriate set/get functions
  are then determined internally and the animation will call these functions as necessary to
  animate the property. 
 <p>Animators can be created from either code or resource files, as shown here:</p>
  
 development/samples/ApiDemos/res/anim/object_animator.xml ObjectAnimatorResources
  
 <p>Starting from API 23, it is possible to use <code>PropertyValuesHolder</code> and 
 <code>Keyframe</code> in resource files to create more complex animations. Using PropertyValuesHolders
  allows animators to animate several properties in parallel, as shown in this sample:</p>
  
 development/samples/ApiDemos/res/anim/object_animator_pvh.xml
  PropertyValuesHolderResources
  
 <p>Using IKeyframes allows animations to follow more complex paths from the start
  to the end values. Note that you can specify explicit fractional values (from 0 to 1) for
  each keyframe to determine when, in the overall duration, the animation should arrive at that
  value. Alternatively, you can leave the fractions off and the keyframes will be equally
  distributed within the total duration. Also, a keyframe with no value will derive its value
  from the target object when the animator starts, just like animators with only one
  value specified. In addition, an optional interpolator can be specified. The interpolator will
  be applied on the interval between the keyframe that the interpolator is set on and the previous
  keyframe. When no interpolator is supplied, the default <code>AccelerateDecelerateInterpolator</code>
  will be used. </p>
  
 development/samples/ApiDemos/res/anim/object_animator_pvh_kf_interpolated.xml KeyframeResources
  
 <div class="special reference">
  <h3>Developer Guides</h3>
  <p>For more information about animating with <code>ObjectAnimator</code>, read the 
 <a href="{@@docRoot}guide/topics/graphics/prop-animation.html#object-animator">Property
  Animation</a> developer guide.</p>
  </div>
 - seealso: #setPropertyName(String)
 */
@interface ADObjectAnimator : ADValueAnimator

#pragma mark Public

/*!
 @brief Creates a new ObjectAnimator object.This default constructor is primarily for
  use internally; the other constructors which take parameters are more generally
  useful.
 */
- (instancetype)init;

- (ADObjectAnimator *)java_clone;

/*!
 @brief Gets the name of the property that will be animated.This name will be used to derive
  a setter function that will be called to set animated values.
 For example, a property name of <code>foo</code> will result
  in a call to the function <code>setFoo()</code> on the target object. If either 
 <code>valueFrom</code> or <code>valueTo</code> is null, then a getter function will
  also be derived and called. 
 <p>If this animator was created with a <code>Property</code> object instead of the
  string name of a property, then this method will return the <code>name</code>
  of that Property object instead. If this animator was
  created with one or more <code>PropertyValuesHolder</code> objects, then this method
  will return the <code>name</code> of that
  object (if there was just one) or a comma-separated list of all of the
  names (if there are more than one).</p>
 */
- (NSString *)getPropertyName;

/*!
 @brief The target object whose property will be animated by this animation
 @return The object being animated
 */
- (id)getTarget;

/*!
 @brief Constructs and returns an ObjectAnimator that animates between color values.A single
  value implies that that value is the one being animated to, in which case the start value
  will be derived from the property being animated and the target object when <code>start()</code>
  is called for the first time.
 Two values imply starting and ending values. More than two
  values imply a starting value, values to animate through along the way, and an ending value
  (these values will be distributed evenly across the duration of the animation).
 @param target The object whose property is to be animated. This object should  have a public method on it called 
  <code> setName() </code> , where  <code> name </code>  is
   the value of the  <code> propertyName </code>  parameter.
 @param propertyName The name of the property being animated.
 @param values A set of values that the animation will animate between over time.
 @return An ObjectAnimator object that is set up to animate between the given values.
 */
+ (ADObjectAnimator *)ofArgbWithId:(id)target
                      withNSString:(NSString *)propertyName
                      withIntArray:(IOSIntArray *)values;

/*!
 @brief Constructs and returns an ObjectAnimator that animates between color values.A single
  value implies that that value is the one being animated to, in which case the start value
  will be derived from the property being animated and the target object when <code>start()</code>
  is called for the first time.
 Two values imply starting and ending values. More than two
  values imply a starting value, values to animate through along the way, and an ending value
  (these values will be distributed evenly across the duration of the animation).
 @param target The object whose property is to be animated.
 @param property The property being animated.
 @param values A set of values that the animation will animate between over time.
 @return An ObjectAnimator object that is set up to animate between the given values.
 */
+ (ADObjectAnimator *)ofArgbWithId:(id)target
                    withADProperty:(ADProperty *)property
                      withIntArray:(IOSIntArray *)values;

/*!
 @brief Constructs and returns an ObjectAnimator that animates between float values.A single
  value implies that that value is the one being animated to, in which case the start value
  will be derived from the property being animated and the target object when <code>start()</code>
  is called for the first time.
 Two values imply starting and ending values. More than two
  values imply a starting value, values to animate through along the way, and an ending value
  (these values will be distributed evenly across the duration of the animation).
 @param target The object whose property is to be animated. This object should  have a public method on it called 
  <code> setName() </code> , where  <code> name </code>  is
   the value of the  <code> propertyName </code>  parameter.
 @param propertyName The name of the property being animated.
 @param values A set of values that the animation will animate between over time.
 @return An ObjectAnimator object that is set up to animate between the given values.
 */
+ (ADObjectAnimator *)ofFloatWithId:(id)target
                       withNSString:(NSString *)propertyName
                     withFloatArray:(IOSFloatArray *)values;

/*!
 @brief Constructs and returns an ObjectAnimator that animates coordinates along a <code>Path</code>
  using two properties.A <code>Path</code></> animation moves in two dimensions, animating
  coordinates <code>(x, y)</code> together to follow the line.
 In this variation, the
  coordinates are floats that are set to separate properties designated by 
 <code>xPropertyName</code> and <code>yPropertyName</code>.
 @param target The object whose properties are to be animated. This object should                have public methods on it called 
  <code> setNameX() </code>  and                
  <code> setNameY </code> , where  <code> nameX </code>  and  <code> nameY </code>
                 are the value of the  <code> xPropertyName </code>  and  <code> yPropertyName </code>
                 parameters, respectively.
 @param xPropertyName The name of the property for the x coordinate being animated.
 @param yPropertyName The name of the property for the y coordinate being animated.
 @param path The  <code> Path </code>  to animate values along.
 @return An ObjectAnimator object that is set up to animate along <code>path</code>.
 */
+ (ADObjectAnimator *)ofFloatWithId:(id)target
                       withNSString:(NSString *)xPropertyName
                       withNSString:(NSString *)yPropertyName
                         withADPath:(ADPath *)path;

/*!
 @brief Constructs and returns an ObjectAnimator that animates between float values.A single
  value implies that that value is the one being animated to, in which case the start value
  will be derived from the property being animated and the target object when <code>start()</code>
  is called for the first time.
 Two values imply starting and ending values. More than two
  values imply a starting value, values to animate through along the way, and an ending value
  (these values will be distributed evenly across the duration of the animation).
 @param target The object whose property is to be animated.
 @param property The property being animated.
 @param values A set of values that the animation will animate between over time.
 @return An ObjectAnimator object that is set up to animate between the given values.
 */
+ (ADObjectAnimator *)ofFloatWithId:(id)target
                     withADProperty:(ADProperty *)property
                     withFloatArray:(IOSFloatArray *)values;

/*!
 @brief Constructs and returns an ObjectAnimator that animates coordinates along a <code>Path</code>
  using two properties.A <code>Path</code></> animation moves in two dimensions, animating
  coordinates <code>(x, y)</code> together to follow the line.
 In this variation, the
  coordinates are floats that are set to separate properties, <code>xProperty</code> and 
 <code>yProperty</code>.
 @param target The object whose properties are to be animated.
 @param xProperty The property for the x coordinate being animated.
 @param yProperty The property for the y coordinate being animated.
 @param path The  <code> Path </code>  to animate values along.
 @return An ObjectAnimator object that is set up to animate along <code>path</code>.
 */
+ (ADObjectAnimator *)ofFloatWithId:(id)target
                     withADProperty:(ADProperty *)xProperty
                     withADProperty:(ADProperty *)yProperty
                         withADPath:(ADPath *)path;

/*!
 @brief Constructs and returns an ObjectAnimator that animates between int values.A single
  value implies that that value is the one being animated to, in which case the start value
  will be derived from the property being animated and the target object when <code>start()</code>
  is called for the first time.
 Two values imply starting and ending values. More than two
  values imply a starting value, values to animate through along the way, and an ending value
  (these values will be distributed evenly across the duration of the animation).
 @param target The object whose property is to be animated. This object should  have a public method on it called 
  <code> setName() </code> , where  <code> name </code>  is
   the value of the  <code> propertyName </code>  parameter.
 @param propertyName The name of the property being animated.
 @param values A set of values that the animation will animate between over time.
 @return An ObjectAnimator object that is set up to animate between the given values.
 */
+ (ADObjectAnimator *)ofIntWithId:(id)target
                     withNSString:(NSString *)propertyName
                     withIntArray:(IOSIntArray *)values;

/*!
 @brief Constructs and returns an ObjectAnimator that animates coordinates along a <code>Path</code>
  using two properties.A <code>Path</code></> animation moves in two dimensions, animating
  coordinates <code>(x, y)</code> together to follow the line.
 In this variation, the
  coordinates are integers that are set to separate properties designated by 
 <code>xPropertyName</code> and <code>yPropertyName</code>.
 @param target The object whose properties are to be animated. This object should                have public methods on it called 
  <code> setNameX() </code>  and                
  <code> setNameY </code> , where  <code> nameX </code>  and  <code> nameY </code>
                 are the value of  <code> xPropertyName </code>  and  <code> yPropertyName </code>
                 parameters, respectively.
 @param xPropertyName The name of the property for the x coordinate being animated.
 @param yPropertyName The name of the property for the y coordinate being animated.
 @param path The  <code> Path </code>  to animate values along.
 @return An ObjectAnimator object that is set up to animate along <code>path</code>.
 */
+ (ADObjectAnimator *)ofIntWithId:(id)target
                     withNSString:(NSString *)xPropertyName
                     withNSString:(NSString *)yPropertyName
                       withADPath:(ADPath *)path;

/*!
 @brief Constructs and returns an ObjectAnimator that animates between int values.A single
  value implies that that value is the one being animated to, in which case the start value
  will be derived from the property being animated and the target object when <code>start()</code>
  is called for the first time.
 Two values imply starting and ending values. More than two
  values imply a starting value, values to animate through along the way, and an ending value
  (these values will be distributed evenly across the duration of the animation).
 @param target The object whose property is to be animated.
 @param property The property being animated.
 @param values A set of values that the animation will animate between over time.
 @return An ObjectAnimator object that is set up to animate between the given values.
 */
+ (ADObjectAnimator *)ofIntWithId:(id)target
                   withADProperty:(ADProperty *)property
                     withIntArray:(IOSIntArray *)values;

/*!
 @brief Constructs and returns an ObjectAnimator that animates coordinates along a <code>Path</code>
  using two properties.A <code>Path</code></> animation moves in two dimensions, animating
  coordinates <code>(x, y)</code> together to follow the line.
 In this variation, the
  coordinates are integers that are set to separate properties, <code>xProperty</code> and 
 <code>yProperty</code>.
 @param target The object whose properties are to be animated.
 @param xProperty The property for the x coordinate being animated.
 @param yProperty The property for the y coordinate being animated.
 @param path The  <code> Path </code>  to animate values along.
 @return An ObjectAnimator object that is set up to animate along <code>path</code>.
 */
+ (ADObjectAnimator *)ofIntWithId:(id)target
                   withADProperty:(ADProperty *)xProperty
                   withADProperty:(ADProperty *)yProperty
                       withADPath:(ADPath *)path;

/*!
 @brief Constructs and returns an ObjectAnimator that animates over float values for a multiple
  parameters setter.Only public methods that take only float parameters are supported.
 Each <code>float[]</code> contains a complete set of parameters to the setter method.
  At least two <code>float[]</code> values must be provided, a start and end. More than two
  values imply a starting value, values to animate through along the way, and an ending
  value (these values will be distributed evenly across the duration of the animation).
 @param target The object whose property is to be animated. This object may  have a public method on it called 
  <code> setName() </code> , where  <code> name </code>  is
   the value of the  <code> propertyName </code>  parameter.  <code> propertyName </code>  may also
   be the case-sensitive complete name of the public setter method.
 @param propertyName The name of the property being animated or the name of the setter method.
 @param values A set of values that the animation will animate between over time.
 @return An ObjectAnimator object that is set up to animate between the given values.
 */
+ (ADObjectAnimator *)ofMultiFloatWithId:(id)target
                            withNSString:(NSString *)propertyName
                         withFloatArray2:(IOSObjectArray *)values;

/*!
 @brief Constructs and returns an ObjectAnimator that animates the target using a multi-float setter
  along the given <code>Path</code>.A <code>Path</code></> animation moves in two dimensions,
  animating coordinates <code>(x, y)</code> together to follow the line.
 In this variation, the
  coordinates are float x and y coordinates used in the first and second parameter of the
  setter, respectively.
 @param target The object whose property is to be animated. This object may  have a public method on it called 
  <code> setName() </code> , where  <code> name </code>  is
   the value of the  <code> propertyName </code>  parameter.  <code> propertyName </code>  may also
   be the case-sensitive complete name of the public setter method.
 @param propertyName The name of the property being animated or the name of the setter method.
 @param path The  <code> Path </code>  to animate values along.
 @return An ObjectAnimator object that is set up to animate along <code>path</code>.
 */
+ (ADObjectAnimator *)ofMultiFloatWithId:(id)target
                            withNSString:(NSString *)propertyName
                              withADPath:(ADPath *)path;

/*!
 @brief Constructs and returns an ObjectAnimator that animates over values for a multiple float
  parameters setter.Only public methods that take only float parameters are supported.
 <p>At least two values must be provided, a start and end. More than two
  values imply a starting value, values to animate through along the way, and an ending
  value (these values will be distributed evenly across the duration of the animation).</p>
 @param target The object whose property is to be animated. This object may  have a public method on it called 
  <code> setName() </code> , where  <code> name </code>  is
   the value of the  <code> propertyName </code>  parameter.  <code> propertyName </code>  may also
   be the case-sensitive complete name of the public setter method.
 @param propertyName The name of the property being animated or the name of the setter method.
 @param converter Converts T objects into float parameters for the multi-value setter.
 @param evaluator A TypeEvaluator that will be called on each animation frame to  provide the necessary interpolation between the Object values to derive the animated
   value.
 @param values A set of values that the animation will animate between over time.
 @return An ObjectAnimator object that is set up to animate between the given values.
 */
+ (ADObjectAnimator *)ofMultiFloatWithId:(id)target
                            withNSString:(NSString *)propertyName
                     withADTypeConverter:(ADTypeConverter *)converter
                     withADTypeEvaluator:(id<ADTypeEvaluator>)evaluator
                       withNSObjectArray:(IOSObjectArray *)values;

/*!
 @brief Constructs and returns an ObjectAnimator that animates over int values for a multiple
  parameters setter.Only public methods that take only int parameters are supported.
 Each <code>int[]</code> contains a complete set of parameters to the setter method.
  At least two <code>int[]</code> values must be provided, a start and end. More than two
  values imply a starting value, values to animate through along the way, and an ending
  value (these values will be distributed evenly across the duration of the animation).
 @param target The object whose property is to be animated. This object may  have a public method on it called 
  <code> setName() </code> , where  <code> name </code>  is
   the value of the  <code> propertyName </code>  parameter.  <code> propertyName </code>  may also
   be the case-sensitive complete name of the public setter method.
 @param propertyName The name of the property being animated or the name of the setter method.
 @param values A set of values that the animation will animate between over time.
 @return An ObjectAnimator object that is set up to animate between the given values.
 */
+ (ADObjectAnimator *)ofMultiIntWithId:(id)target
                          withNSString:(NSString *)propertyName
                         withIntArray2:(IOSObjectArray *)values;

/*!
 @brief Constructs and returns an ObjectAnimator that animates the target using a multi-int setter
  along the given <code>Path</code>.A <code>Path</code></> animation moves in two dimensions,
  animating coordinates <code>(x, y)</code> together to follow the line.
 In this variation, the
  coordinates are integer x and y coordinates used in the first and second parameter of the
  setter, respectively.
 @param target The object whose property is to be animated. This object may  have a public method on it called 
  <code> setName() </code> , where  <code> name </code>  is
   the value of the  <code> propertyName </code>  parameter.  <code> propertyName </code>  may also
   be the case-sensitive complete name of the public setter method.
 @param propertyName The name of the property being animated or the name of the setter method.
 @param path The  <code> Path </code>  to animate values along.
 @return An ObjectAnimator object that is set up to animate along <code>path</code>.
 */
+ (ADObjectAnimator *)ofMultiIntWithId:(id)target
                          withNSString:(NSString *)propertyName
                            withADPath:(ADPath *)path;

/*!
 @brief Constructs and returns an ObjectAnimator that animates over values for a multiple int
  parameters setter.Only public methods that take only int parameters are supported.
 <p>At least two values must be provided, a start and end. More than two
  values imply a starting value, values to animate through along the way, and an ending
  value (these values will be distributed evenly across the duration of the animation).</p>
 @param target The object whose property is to be animated. This object may  have a public method on it called 
  <code> setName() </code> , where  <code> name </code>  is
   the value of the  <code> propertyName </code>  parameter.  <code> propertyName </code>  may also
   be the case-sensitive complete name of the public setter method.
 @param propertyName The name of the property being animated or the name of the setter method.
 @param converter Converts T objects into int parameters for the multi-value setter.
 @param evaluator A TypeEvaluator that will be called on each animation frame to  provide the necessary interpolation between the Object values to derive the animated
   value.
 @param values A set of values that the animation will animate between over time.
 @return An ObjectAnimator object that is set up to animate between the given values.
 */
+ (ADObjectAnimator *)ofMultiIntWithId:(id)target
                          withNSString:(NSString *)propertyName
                   withADTypeConverter:(ADTypeConverter *)converter
                   withADTypeEvaluator:(id<ADTypeEvaluator>)evaluator
                     withNSObjectArray:(IOSObjectArray *)values;

/*!
 @brief Constructs and returns an ObjectAnimator that animates a property along a <code>Path</code>.
 A <code>Path</code></> animation moves in two dimensions, animating coordinates 
 <code>(x, y)</code> together to follow the line. This variant animates the coordinates
  in a <code>PointF</code> to follow the <code>Path</code>. If the <code>Property</code>
  associated with <code>propertyName</code> uses a type other than <code>PointF</code>,
  <code>converter</code> can be used to change from <code>PointF</code> to the type
  associated with the <code>Property</code>.
 @param target The object whose property is to be animated. This object should  have a public method on it called 
  <code> setName() </code> , where  <code> name </code>  is
   the value of the  <code> propertyName </code>  parameter.
 @param propertyName The name of the property being animated.
 @param converter Converts a PointF to the type associated with the setter. May be                   null if conversion is unnecessary.
 @param path The  <code> Path </code>  to animate values along.
 @return An ObjectAnimator object that is set up to animate along <code>path</code>.
 */
+ (ADObjectAnimator *)ofObjectWithId:(id)target
                        withNSString:(NSString *)propertyName
                 withADTypeConverter:(ADTypeConverter *)converter
                          withADPath:(ADPath *)path;

/*!
 @brief Constructs and returns an ObjectAnimator that animates between Object values.A single
  value implies that that value is the one being animated to, in which case the start value
  will be derived from the property being animated and the target object when <code>start()</code>
  is called for the first time.
 Two values imply starting and ending values. More than two
  values imply a starting value, values to animate through along the way, and an ending value
  (these values will be distributed evenly across the duration of the animation). 
 <p><strong>Note:</strong> The values are stored as references to the original
  objects, which means that changes to those objects after this method is called will
  affect the values on the animator. If the objects will be mutated externally after
  this method is called, callers should pass a copy of those objects instead.
 @param target The object whose property is to be animated. This object should  have a public method on it called 
  <code> setName() </code> , where  <code> name </code>  is
   the value of the  <code> propertyName </code>  parameter.
 @param propertyName The name of the property being animated.
 @param evaluator A TypeEvaluator that will be called on each animation frame to  provide the necessary interpolation between the Object values to derive the animated
   value.
 @param values A set of values that the animation will animate between over time.
 @return An ObjectAnimator object that is set up to animate between the given values.
 */
+ (ADObjectAnimator *)ofObjectWithId:(id)target
                        withNSString:(NSString *)propertyName
                 withADTypeEvaluator:(id<ADTypeEvaluator>)evaluator
                   withNSObjectArray:(IOSObjectArray *)values;

/*!
 @brief Constructs and returns an ObjectAnimator that animates a property along a <code>Path</code>.
 A <code>Path</code></> animation moves in two dimensions, animating coordinates 
 <code>(x, y)</code> together to follow the line. This variant animates the coordinates
  in a <code>PointF</code> to follow the <code>Path</code>. If <code>property</code>
  uses a type other than <code>PointF</code>, <code>converter</code> can be used to change
  from <code>PointF</code> to the type associated with the <code>Property</code>.
  
 <p>The PointF passed to <code>converter</code> or <code>property</code>, if 
 <code>converter</code> is <code>null</code>, is reused on each animation frame and should
  not be stored by the setter or TypeConverter.</p>
 @param target The object whose property is to be animated.
 @param property The property being animated. Should not be null.
 @param converter Converts a PointF to the type associated with the setter. May be                   null if conversion is unnecessary.
 @param path The  <code> Path </code>  to animate values along.
 @return An ObjectAnimator object that is set up to animate along <code>path</code>.
 */
+ (ADObjectAnimator *)ofObjectWithId:(id)target
                      withADProperty:(ADProperty *)property
                 withADTypeConverter:(ADTypeConverter *)converter
                          withADPath:(ADPath *)path;

/*!
 @brief Constructs and returns an ObjectAnimator that animates between Object values.A single
  value implies that that value is the one being animated to, in which case the start value
  will be derived from the property being animated and the target object when <code>start()</code>
  is called for the first time.
 Two values imply starting and ending values. More than two
  values imply a starting value, values to animate through along the way, and an ending value
  (these values will be distributed evenly across the duration of the animation).
  This variant supplies a <code>TypeConverter</code> to convert from the animated values to the
  type of the property. If only one value is supplied, the <code>TypeConverter</code> must be a 
 <code>r.android.animation.BidirectionalTypeConverter</code> to retrieve the current value. 
 <p><strong>Note:</strong> The values are stored as references to the original
  objects, which means that changes to those objects after this method is called will
  affect the values on the animator. If the objects will be mutated externally after
  this method is called, callers should pass a copy of those objects instead.
 @param target The object whose property is to be animated.
 @param property The property being animated.
 @param converter Converts the animated object to the Property type.
 @param evaluator A TypeEvaluator that will be called on each animation frame to  provide the necessary interpolation between the Object values to derive the animated
   value.
 @param values A set of values that the animation will animate between over time.
 @return An ObjectAnimator object that is set up to animate between the given values.
 */
+ (ADObjectAnimator *)ofObjectWithId:(id)target
                      withADProperty:(ADProperty *)property
                 withADTypeConverter:(ADTypeConverter *)converter
                 withADTypeEvaluator:(id<ADTypeEvaluator>)evaluator
                   withNSObjectArray:(IOSObjectArray *)values;

/*!
 @brief Constructs and returns an ObjectAnimator that animates between Object values.A single
  value implies that that value is the one being animated to, in which case the start value
  will be derived from the property being animated and the target object when <code>start()</code>
  is called for the first time.
 Two values imply starting and ending values. More than two
  values imply a starting value, values to animate through along the way, and an ending value
  (these values will be distributed evenly across the duration of the animation). 
 <p><strong>Note:</strong> The values are stored as references to the original
  objects, which means that changes to those objects after this method is called will
  affect the values on the animator. If the objects will be mutated externally after
  this method is called, callers should pass a copy of those objects instead.
 @param target The object whose property is to be animated.
 @param property The property being animated.
 @param evaluator A TypeEvaluator that will be called on each animation frame to  provide the necessary interpolation between the Object values to derive the animated
   value.
 @param values A set of values that the animation will animate between over time.
 @return An ObjectAnimator object that is set up to animate between the given values.
 */
+ (ADObjectAnimator *)ofObjectWithId:(id)target
                      withADProperty:(ADProperty *)property
                 withADTypeEvaluator:(id<ADTypeEvaluator>)evaluator
                   withNSObjectArray:(IOSObjectArray *)values;

/*!
 @brief Constructs and returns an ObjectAnimator that animates between the sets of values specified
  in <code>PropertyValueHolder</code> objects.This variant should be used when animating
  several properties at once with the same ObjectAnimator, since PropertyValuesHolder allows
  you to associate a set of animation values with a property name.
 @param target The object whose property is to be animated. Depending on how the  PropertyValuesObjects were constructed, the target object should either have the 
 <code>r.android.util.Property</code>
   objects used to construct the PropertyValuesHolder objects or (if the  PropertyValuesHOlder objects were created with property names) the target object should have
   public methods on it called 
  <code> setName() </code> , where  <code> name </code>  is the name of  the property passed in as the 
  <code> propertyName </code>  parameter for each of the  PropertyValuesHolder objects.
 @param values A set of PropertyValuesHolder objects whose values will be animated between  over time.
 @return An ObjectAnimator object that is set up to animate between the given values.
 */
+ (ADObjectAnimator *)ofPropertyValuesHolderWithId:(id)target
                   withADPropertyValuesHolderArray:(IOSObjectArray *)values;

/*!
 @brief autoCancel controls whether an ObjectAnimator will be canceled automatically
  when any other ObjectAnimator with the same target and properties is started.
 Setting this flag may make it easier to run different animators on the same target
  object without having to keep track of whether there are conflicting animators that
  need to be manually canceled. Canceling animators must have the same exact set of
  target properties, in the same order.
 @param cancel Whether future ObjectAnimators with the same target and properties  as this ObjectAnimator will cause this ObjectAnimator to be canceled.
 */
- (void)setAutoCancelWithBoolean:(jboolean)cancel;

/*!
 @brief Sets the length of the animation.The default duration is 300 milliseconds.
 @param duration The length of the animation, in milliseconds.
 @return ObjectAnimator The object called with setDuration(). This return
  value makes it easier to compose statements together that construct and then set the
  duration, as in 
 <code>ObjectAnimator.ofInt(target, propertyName, 0, 10).setDuration(500).start()</code>.
 */
- (ADObjectAnimator *)setDurationWithLong:(jlong)duration;

- (void)setFloatValuesWithFloatArray:(IOSFloatArray *)values;

- (void)setIntValuesWithIntArray:(IOSIntArray *)values;

- (void)setObjectValuesWithNSObjectArray:(IOSObjectArray *)values;

/*!
 @brief Sets the property that will be animated.Property objects will take precedence over
  properties specified by the <code>setPropertyName(String)</code> method.
 Animations should
  be set up to use one or the other, not both.
 @param property The property being animated. Should not be null.
 */
- (void)setPropertyWithADProperty:(ADProperty *)property;

/*!
 @brief Sets the name of the property that will be animated.This name is used to derive
  a setter function that will be called to set animated values.
 For example, a property name of <code>foo</code> will result
  in a call to the function <code>setFoo()</code> on the target object. If either 
 <code>valueFrom</code> or <code>valueTo</code> is null, then a getter function will
  also be derived and called. 
 <p>For best performance of the mechanism that calls the setter function determined by the
  name of the property being animated, use <code>float</code> or <code>int</code> typed values,
  and make the setter function for those properties have a <code>void</code> return value. This
  will cause the code to take an optimized path for these constrained circumstances. Other
  property types and return types will work, but will have more overhead in processing
  the requests due to normal reflection mechanisms.</p>
  
 <p>Note that the setter function derived from this property name
  must take the same parameter type as the 
 <code>valueFrom</code> and <code>valueTo</code> properties, otherwise the call to
  the setter function will fail.</p>
  
 <p>If this ObjectAnimator has been set up to animate several properties together,
  using more than one PropertyValuesHolder objects, then setting the propertyName simply
  sets the propertyName in the first of those PropertyValuesHolder objects.</p>
 @param propertyName The name of the property being animated. Should not be null.
 */
- (void)setPropertyNameWithNSString:(NSString *)propertyName;

- (void)setTargetWithId:(id)target;

- (void)setupEndValues;

- (void)setupStartValues;

- (void)start;

- (NSString *)description;

#pragma mark Package-Private

/*!
 @brief This method is called with the elapsed fraction of the animation during every
  animation frame.This function turns the elapsed fraction into an interpolated fraction
  and then into an animated value (from the evaluator.
 The function is called mostly during
  animation updates, but it is also called when the <code>end()</code>
  function is called, to set the final value on the property. 
 <p>Overrides of this method must call the superclass to perform the calculation
  of the animated value.</p>
 @param fraction The elapsed fraction of the animation.
 */
- (void)animateValueWithFloat:(jfloat)fraction;

- (NSString *)getNameForTrace;

/*!
 @brief This function is called immediately before processing the first animation
  frame of an animation.If there is a nonzero <code>startDelay</code>, the
  function is called after that delay ends.
 It takes care of the final initialization steps for the
  animation. This includes setting mEvaluator, if the user has not yet
  set it up, and the setter/getter methods, if the user did not supply
  them.
   
 <p>Overriders of this method should call the superclass method to cause
   internal mechanisms to be set up correctly.</p>
 */
- (void)initAnimation OBJC_METHOD_FAMILY_NONE;

- (jboolean)isInitialized;

- (jboolean)shouldAutoCancelWithADAnimationHandler_AnimationFrameCallback:(id<ADAnimationHandler_AnimationFrameCallback>)anim;

@end

J2OBJC_EMPTY_STATIC_INIT(ADObjectAnimator)

FOUNDATION_EXPORT void ADObjectAnimator_init(ADObjectAnimator *self);

FOUNDATION_EXPORT ADObjectAnimator *new_ADObjectAnimator_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ADObjectAnimator *create_ADObjectAnimator_init(void);

FOUNDATION_EXPORT ADObjectAnimator *ADObjectAnimator_ofIntWithId_withNSString_withIntArray_(id target, NSString *propertyName, IOSIntArray *values);

FOUNDATION_EXPORT ADObjectAnimator *ADObjectAnimator_ofIntWithId_withNSString_withNSString_withADPath_(id target, NSString *xPropertyName, NSString *yPropertyName, ADPath *path);

FOUNDATION_EXPORT ADObjectAnimator *ADObjectAnimator_ofIntWithId_withADProperty_withIntArray_(id target, ADProperty *property, IOSIntArray *values);

FOUNDATION_EXPORT ADObjectAnimator *ADObjectAnimator_ofIntWithId_withADProperty_withADProperty_withADPath_(id target, ADProperty *xProperty, ADProperty *yProperty, ADPath *path);

FOUNDATION_EXPORT ADObjectAnimator *ADObjectAnimator_ofMultiIntWithId_withNSString_withIntArray2_(id target, NSString *propertyName, IOSObjectArray *values);

FOUNDATION_EXPORT ADObjectAnimator *ADObjectAnimator_ofMultiIntWithId_withNSString_withADPath_(id target, NSString *propertyName, ADPath *path);

FOUNDATION_EXPORT ADObjectAnimator *ADObjectAnimator_ofMultiIntWithId_withNSString_withADTypeConverter_withADTypeEvaluator_withNSObjectArray_(id target, NSString *propertyName, ADTypeConverter *converter, id<ADTypeEvaluator> evaluator, IOSObjectArray *values);

FOUNDATION_EXPORT ADObjectAnimator *ADObjectAnimator_ofArgbWithId_withNSString_withIntArray_(id target, NSString *propertyName, IOSIntArray *values);

FOUNDATION_EXPORT ADObjectAnimator *ADObjectAnimator_ofArgbWithId_withADProperty_withIntArray_(id target, ADProperty *property, IOSIntArray *values);

FOUNDATION_EXPORT ADObjectAnimator *ADObjectAnimator_ofFloatWithId_withNSString_withFloatArray_(id target, NSString *propertyName, IOSFloatArray *values);

FOUNDATION_EXPORT ADObjectAnimator *ADObjectAnimator_ofFloatWithId_withNSString_withNSString_withADPath_(id target, NSString *xPropertyName, NSString *yPropertyName, ADPath *path);

FOUNDATION_EXPORT ADObjectAnimator *ADObjectAnimator_ofFloatWithId_withADProperty_withFloatArray_(id target, ADProperty *property, IOSFloatArray *values);

FOUNDATION_EXPORT ADObjectAnimator *ADObjectAnimator_ofFloatWithId_withADProperty_withADProperty_withADPath_(id target, ADProperty *xProperty, ADProperty *yProperty, ADPath *path);

FOUNDATION_EXPORT ADObjectAnimator *ADObjectAnimator_ofMultiFloatWithId_withNSString_withFloatArray2_(id target, NSString *propertyName, IOSObjectArray *values);

FOUNDATION_EXPORT ADObjectAnimator *ADObjectAnimator_ofMultiFloatWithId_withNSString_withADPath_(id target, NSString *propertyName, ADPath *path);

FOUNDATION_EXPORT ADObjectAnimator *ADObjectAnimator_ofMultiFloatWithId_withNSString_withADTypeConverter_withADTypeEvaluator_withNSObjectArray_(id target, NSString *propertyName, ADTypeConverter *converter, id<ADTypeEvaluator> evaluator, IOSObjectArray *values);

FOUNDATION_EXPORT ADObjectAnimator *ADObjectAnimator_ofObjectWithId_withNSString_withADTypeEvaluator_withNSObjectArray_(id target, NSString *propertyName, id<ADTypeEvaluator> evaluator, IOSObjectArray *values);

FOUNDATION_EXPORT ADObjectAnimator *ADObjectAnimator_ofObjectWithId_withNSString_withADTypeConverter_withADPath_(id target, NSString *propertyName, ADTypeConverter *converter, ADPath *path);

FOUNDATION_EXPORT ADObjectAnimator *ADObjectAnimator_ofObjectWithId_withADProperty_withADTypeEvaluator_withNSObjectArray_(id target, ADProperty *property, id<ADTypeEvaluator> evaluator, IOSObjectArray *values);

FOUNDATION_EXPORT ADObjectAnimator *ADObjectAnimator_ofObjectWithId_withADProperty_withADTypeConverter_withADTypeEvaluator_withNSObjectArray_(id target, ADProperty *property, ADTypeConverter *converter, id<ADTypeEvaluator> evaluator, IOSObjectArray *values);

FOUNDATION_EXPORT ADObjectAnimator *ADObjectAnimator_ofObjectWithId_withADProperty_withADTypeConverter_withADPath_(id target, ADProperty *property, ADTypeConverter *converter, ADPath *path);

FOUNDATION_EXPORT ADObjectAnimator *ADObjectAnimator_ofPropertyValuesHolderWithId_withADPropertyValuesHolderArray_(id target, IOSObjectArray *values);

J2OBJC_TYPE_LITERAL_HEADER(ADObjectAnimator)

@compatibility_alias RAndroidAnimationObjectAnimator ADObjectAnimator;

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ObjectAnimator")
