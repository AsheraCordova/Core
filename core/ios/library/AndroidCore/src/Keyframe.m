//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroid\src\main\java\r\android\animation\Keyframe.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "Keyframe.h"
#include "TimeInterpolator.h"
#include "java/lang/Float.h"
#include "java/lang/Integer.h"


@interface ADKeyframe () {
 @public
  /*!
   @brief The optional time interpolator for the interval preceding this keyframe.A null interpolator
  (the default) results in linear interpolation over the interval.
   */
  id<ADTimeInterpolator> mInterpolator_;
}

@end

J2OBJC_FIELD_SETTER(ADKeyframe, mInterpolator_, id<ADTimeInterpolator>)

@implementation ADKeyframe

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADKeyframe_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (ADKeyframe *)ofIntWithFloat:(jfloat)fraction
                       withInt:(jint)value {
  return ADKeyframe_ofIntWithFloat_withInt_(fraction, value);
}

+ (ADKeyframe *)ofIntWithFloat:(jfloat)fraction {
  return ADKeyframe_ofIntWithFloat_(fraction);
}

+ (ADKeyframe *)ofFloatWithFloat:(jfloat)fraction
                       withFloat:(jfloat)value {
  return ADKeyframe_ofFloatWithFloat_withFloat_(fraction, value);
}

+ (ADKeyframe *)ofFloatWithFloat:(jfloat)fraction {
  return ADKeyframe_ofFloatWithFloat_(fraction);
}

+ (ADKeyframe *)ofObjectWithFloat:(jfloat)fraction
                           withId:(id)value {
  return ADKeyframe_ofObjectWithFloat_withId_(fraction, value);
}

+ (ADKeyframe *)ofObjectWithFloat:(jfloat)fraction {
  return ADKeyframe_ofObjectWithFloat_(fraction);
}

- (jboolean)hasValue {
  return mHasValue_;
}

- (jboolean)valueWasSetOnStart {
  return mValueWasSetOnStart_;
}

- (void)setValueWasSetOnStartWithBoolean:(jboolean)valueWasSetOnStart {
  mValueWasSetOnStart_ = valueWasSetOnStart;
}

- (id)getValue {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)setValueWithId:(id)value {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (jfloat)getFraction {
  return mFraction_;
}

- (void)setFractionWithFloat:(jfloat)fraction {
  mFraction_ = fraction;
}

- (id<ADTimeInterpolator>)getInterpolator {
  return mInterpolator_;
}

- (void)setInterpolatorWithADTimeInterpolator:(id<ADTimeInterpolator>)interpolator {
  JreStrongAssign(&mInterpolator_, interpolator);
}

- (IOSClass *)getType {
  return mValueType_;
}

- (ADKeyframe *)java_clone {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)dealloc {
  RELEASE_(mValueType_);
  RELEASE_(mInterpolator_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADKeyframe;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LADKeyframe;", 0x9, 0, 2, -1, -1, -1, -1 },
    { NULL, "LADKeyframe;", 0x9, 3, 4, -1, -1, -1, -1 },
    { NULL, "LADKeyframe;", 0x9, 3, 2, -1, -1, -1, -1 },
    { NULL, "LADKeyframe;", 0x9, 5, 6, -1, -1, -1, -1 },
    { NULL, "LADKeyframe;", 0x9, 5, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 7, 8, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 9, 10, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 2, -1, -1, -1, -1 },
    { NULL, "LADTimeInterpolator;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 13, -1, -1, -1, -1 },
    { NULL, "LIOSClass;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADKeyframe;", 0x401, 14, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(ofIntWithFloat:withInt:);
  methods[2].selector = @selector(ofIntWithFloat:);
  methods[3].selector = @selector(ofFloatWithFloat:withFloat:);
  methods[4].selector = @selector(ofFloatWithFloat:);
  methods[5].selector = @selector(ofObjectWithFloat:withId:);
  methods[6].selector = @selector(ofObjectWithFloat:);
  methods[7].selector = @selector(hasValue);
  methods[8].selector = @selector(valueWasSetOnStart);
  methods[9].selector = @selector(setValueWasSetOnStartWithBoolean:);
  methods[10].selector = @selector(getValue);
  methods[11].selector = @selector(setValueWithId:);
  methods[12].selector = @selector(getFraction);
  methods[13].selector = @selector(setFractionWithFloat:);
  methods[14].selector = @selector(getInterpolator);
  methods[15].selector = @selector(setInterpolatorWithADTimeInterpolator:);
  methods[16].selector = @selector(getType);
  methods[17].selector = @selector(java_clone);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mHasValue_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mValueWasSetOnStart_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mFraction_", "F", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mValueType_", "LIOSClass;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mInterpolator_", "LADTimeInterpolator;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "ofInt", "FI", "F", "ofFloat", "FF", "ofObject", "FLNSObject;", "setValueWasSetOnStart", "Z", "setValue", "LNSObject;", "setFraction", "setInterpolator", "LADTimeInterpolator;", "clone", "LADKeyframe_ObjectKeyframe;LADKeyframe_IntKeyframe;LADKeyframe_FloatKeyframe;" };
  static const J2ObjcClassInfo _ADKeyframe = { "Keyframe", "r.android.animation", ptrTable, methods, fields, 7, 0x401, 18, 5, -1, 15, -1, -1, -1 };
  return &_ADKeyframe;
}

- (id)copyWithZone:(NSZone *)zone {
  return [[self java_clone] retain];
}

@end

void ADKeyframe_init(ADKeyframe *self) {
  NSObject_init(self);
  JreStrongAssign(&self->mInterpolator_, nil);
}

ADKeyframe *ADKeyframe_ofIntWithFloat_withInt_(jfloat fraction, jint value) {
  ADKeyframe_initialize();
  return create_ADKeyframe_IntKeyframe_initWithFloat_withInt_(fraction, value);
}

ADKeyframe *ADKeyframe_ofIntWithFloat_(jfloat fraction) {
  ADKeyframe_initialize();
  return create_ADKeyframe_IntKeyframe_initWithFloat_(fraction);
}

ADKeyframe *ADKeyframe_ofFloatWithFloat_withFloat_(jfloat fraction, jfloat value) {
  ADKeyframe_initialize();
  return create_ADKeyframe_FloatKeyframe_initWithFloat_withFloat_(fraction, value);
}

ADKeyframe *ADKeyframe_ofFloatWithFloat_(jfloat fraction) {
  ADKeyframe_initialize();
  return create_ADKeyframe_FloatKeyframe_initWithFloat_(fraction);
}

ADKeyframe *ADKeyframe_ofObjectWithFloat_withId_(jfloat fraction, id value) {
  ADKeyframe_initialize();
  return create_ADKeyframe_ObjectKeyframe_initWithFloat_withId_(fraction, value);
}

ADKeyframe *ADKeyframe_ofObjectWithFloat_(jfloat fraction) {
  ADKeyframe_initialize();
  return create_ADKeyframe_ObjectKeyframe_initWithFloat_withId_(fraction, nil);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADKeyframe)

@implementation ADKeyframe_ObjectKeyframe

- (instancetype)initWithFloat:(jfloat)fraction
                       withId:(id)value {
  ADKeyframe_ObjectKeyframe_initWithFloat_withId_(self, fraction, value);
  return self;
}

- (id)getValue {
  return mValue_;
}

- (void)setValueWithId:(id)value {
  JreStrongAssign(&mValue_, value);
  mHasValue_ = (value != nil);
}

- (ADKeyframe_ObjectKeyframe *)java_clone {
  ADKeyframe_ObjectKeyframe *kfClone = create_ADKeyframe_ObjectKeyframe_initWithFloat_withId_([self getFraction], [self hasValue] ? mValue_ : nil);
  kfClone->mValueWasSetOnStart_ = mValueWasSetOnStart_;
  [kfClone setInterpolatorWithADTimeInterpolator:[self getInterpolator]];
  return kfClone;
}

- (void)dealloc {
  RELEASE_(mValue_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LADKeyframe_ObjectKeyframe;", 0x1, 3, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithFloat:withId:);
  methods[1].selector = @selector(getValue);
  methods[2].selector = @selector(setValueWithId:);
  methods[3].selector = @selector(java_clone);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mValue_", "LNSObject;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "FLNSObject;", "setValue", "LNSObject;", "clone", "LADKeyframe;" };
  static const J2ObjcClassInfo _ADKeyframe_ObjectKeyframe = { "ObjectKeyframe", "r.android.animation", ptrTable, methods, fields, 7, 0x8, 4, 1, 4, -1, -1, -1, -1 };
  return &_ADKeyframe_ObjectKeyframe;
}

@end

void ADKeyframe_ObjectKeyframe_initWithFloat_withId_(ADKeyframe_ObjectKeyframe *self, jfloat fraction, id value) {
  ADKeyframe_init(self);
  self->mFraction_ = fraction;
  JreStrongAssign(&self->mValue_, value);
  self->mHasValue_ = (value != nil);
  JreStrongAssign(&self->mValueType_, self->mHasValue_ ? [nil_chk(value) java_getClass] : NSObject_class_());
}

ADKeyframe_ObjectKeyframe *new_ADKeyframe_ObjectKeyframe_initWithFloat_withId_(jfloat fraction, id value) {
  J2OBJC_NEW_IMPL(ADKeyframe_ObjectKeyframe, initWithFloat_withId_, fraction, value)
}

ADKeyframe_ObjectKeyframe *create_ADKeyframe_ObjectKeyframe_initWithFloat_withId_(jfloat fraction, id value) {
  J2OBJC_CREATE_IMPL(ADKeyframe_ObjectKeyframe, initWithFloat_withId_, fraction, value)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADKeyframe_ObjectKeyframe)

@implementation ADKeyframe_IntKeyframe

- (instancetype)initWithFloat:(jfloat)fraction
                      withInt:(jint)value {
  ADKeyframe_IntKeyframe_initWithFloat_withInt_(self, fraction, value);
  return self;
}

- (instancetype)initWithFloat:(jfloat)fraction {
  ADKeyframe_IntKeyframe_initWithFloat_(self, fraction);
  return self;
}

- (jint)getIntValue {
  return mValue_;
}

- (id)getValue {
  return JavaLangInteger_valueOfWithInt_(mValue_);
}

- (void)setValueWithId:(id)value {
  if (value != nil && [value java_getClass] == JavaLangInteger_class_()) {
    mValue_ = [((JavaLangInteger *) cast_chk(value, [JavaLangInteger class])) intValue];
    mHasValue_ = true;
  }
}

- (ADKeyframe_IntKeyframe *)java_clone {
  ADKeyframe_IntKeyframe *kfClone = mHasValue_ ? create_ADKeyframe_IntKeyframe_initWithFloat_withInt_([self getFraction], mValue_) : create_ADKeyframe_IntKeyframe_initWithFloat_([self getFraction]);
  [kfClone setInterpolatorWithADTimeInterpolator:[self getInterpolator]];
  kfClone->mValueWasSetOnStart_ = mValueWasSetOnStart_;
  return kfClone;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LADKeyframe_IntKeyframe;", 0x1, 4, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithFloat:withInt:);
  methods[1].selector = @selector(initWithFloat:);
  methods[2].selector = @selector(getIntValue);
  methods[3].selector = @selector(getValue);
  methods[4].selector = @selector(setValueWithId:);
  methods[5].selector = @selector(java_clone);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mValue_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "FI", "F", "setValue", "LNSObject;", "clone", "LADKeyframe;" };
  static const J2ObjcClassInfo _ADKeyframe_IntKeyframe = { "IntKeyframe", "r.android.animation", ptrTable, methods, fields, 7, 0x8, 6, 1, 5, -1, -1, -1, -1 };
  return &_ADKeyframe_IntKeyframe;
}

@end

void ADKeyframe_IntKeyframe_initWithFloat_withInt_(ADKeyframe_IntKeyframe *self, jfloat fraction, jint value) {
  ADKeyframe_init(self);
  self->mFraction_ = fraction;
  self->mValue_ = value;
  JreStrongAssign(&self->mValueType_, [IOSClass intClass]);
  self->mHasValue_ = true;
}

ADKeyframe_IntKeyframe *new_ADKeyframe_IntKeyframe_initWithFloat_withInt_(jfloat fraction, jint value) {
  J2OBJC_NEW_IMPL(ADKeyframe_IntKeyframe, initWithFloat_withInt_, fraction, value)
}

ADKeyframe_IntKeyframe *create_ADKeyframe_IntKeyframe_initWithFloat_withInt_(jfloat fraction, jint value) {
  J2OBJC_CREATE_IMPL(ADKeyframe_IntKeyframe, initWithFloat_withInt_, fraction, value)
}

void ADKeyframe_IntKeyframe_initWithFloat_(ADKeyframe_IntKeyframe *self, jfloat fraction) {
  ADKeyframe_init(self);
  self->mFraction_ = fraction;
  JreStrongAssign(&self->mValueType_, [IOSClass intClass]);
}

ADKeyframe_IntKeyframe *new_ADKeyframe_IntKeyframe_initWithFloat_(jfloat fraction) {
  J2OBJC_NEW_IMPL(ADKeyframe_IntKeyframe, initWithFloat_, fraction)
}

ADKeyframe_IntKeyframe *create_ADKeyframe_IntKeyframe_initWithFloat_(jfloat fraction) {
  J2OBJC_CREATE_IMPL(ADKeyframe_IntKeyframe, initWithFloat_, fraction)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADKeyframe_IntKeyframe)

@implementation ADKeyframe_FloatKeyframe

- (instancetype)initWithFloat:(jfloat)fraction
                    withFloat:(jfloat)value {
  ADKeyframe_FloatKeyframe_initWithFloat_withFloat_(self, fraction, value);
  return self;
}

- (instancetype)initWithFloat:(jfloat)fraction {
  ADKeyframe_FloatKeyframe_initWithFloat_(self, fraction);
  return self;
}

- (jfloat)getFloatValue {
  return mValue_;
}

- (id)getValue {
  return JavaLangFloat_valueOfWithFloat_(mValue_);
}

- (void)setValueWithId:(id)value {
  if (value != nil && [value java_getClass] == JavaLangFloat_class_()) {
    mValue_ = [((JavaLangFloat *) cast_chk(value, [JavaLangFloat class])) floatValue];
    mHasValue_ = true;
  }
}

- (ADKeyframe_FloatKeyframe *)java_clone {
  ADKeyframe_FloatKeyframe *kfClone = mHasValue_ ? create_ADKeyframe_FloatKeyframe_initWithFloat_withFloat_([self getFraction], mValue_) : create_ADKeyframe_FloatKeyframe_initWithFloat_([self getFraction]);
  [kfClone setInterpolatorWithADTimeInterpolator:[self getInterpolator]];
  kfClone->mValueWasSetOnStart_ = mValueWasSetOnStart_;
  return kfClone;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LADKeyframe_FloatKeyframe;", 0x1, 4, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithFloat:withFloat:);
  methods[1].selector = @selector(initWithFloat:);
  methods[2].selector = @selector(getFloatValue);
  methods[3].selector = @selector(getValue);
  methods[4].selector = @selector(setValueWithId:);
  methods[5].selector = @selector(java_clone);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mValue_", "F", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "FF", "F", "setValue", "LNSObject;", "clone", "LADKeyframe;" };
  static const J2ObjcClassInfo _ADKeyframe_FloatKeyframe = { "FloatKeyframe", "r.android.animation", ptrTable, methods, fields, 7, 0x8, 6, 1, 5, -1, -1, -1, -1 };
  return &_ADKeyframe_FloatKeyframe;
}

@end

void ADKeyframe_FloatKeyframe_initWithFloat_withFloat_(ADKeyframe_FloatKeyframe *self, jfloat fraction, jfloat value) {
  ADKeyframe_init(self);
  self->mFraction_ = fraction;
  self->mValue_ = value;
  JreStrongAssign(&self->mValueType_, [IOSClass floatClass]);
  self->mHasValue_ = true;
}

ADKeyframe_FloatKeyframe *new_ADKeyframe_FloatKeyframe_initWithFloat_withFloat_(jfloat fraction, jfloat value) {
  J2OBJC_NEW_IMPL(ADKeyframe_FloatKeyframe, initWithFloat_withFloat_, fraction, value)
}

ADKeyframe_FloatKeyframe *create_ADKeyframe_FloatKeyframe_initWithFloat_withFloat_(jfloat fraction, jfloat value) {
  J2OBJC_CREATE_IMPL(ADKeyframe_FloatKeyframe, initWithFloat_withFloat_, fraction, value)
}

void ADKeyframe_FloatKeyframe_initWithFloat_(ADKeyframe_FloatKeyframe *self, jfloat fraction) {
  ADKeyframe_init(self);
  self->mFraction_ = fraction;
  JreStrongAssign(&self->mValueType_, [IOSClass floatClass]);
}

ADKeyframe_FloatKeyframe *new_ADKeyframe_FloatKeyframe_initWithFloat_(jfloat fraction) {
  J2OBJC_NEW_IMPL(ADKeyframe_FloatKeyframe, initWithFloat_, fraction)
}

ADKeyframe_FloatKeyframe *create_ADKeyframe_FloatKeyframe_initWithFloat_(jfloat fraction) {
  J2OBJC_CREATE_IMPL(ADKeyframe_FloatKeyframe, initWithFloat_, fraction)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADKeyframe_FloatKeyframe)
