//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroid\src\main\java\r\android\widget\PopupWindow.java
//

#include "ApplicationInfo.h"
#include "Build.h"
#include "Context.h"
#include "Drawable.h"
#include "Gravity.h"
#include "IBinder.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "PopupWindow.h"
#include "Rect.h"
#include "RelativeLayout.h"
#include "View.h"
#include "ViewGroup.h"
#include "ViewParent.h"
#include "ViewTreeObserver.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Math.h"
#include "java/lang/ref/WeakReference.h"

@class JavaLangRefWeakReference;


#pragma clang diagnostic ignored "-Wprotocol"

@interface ADPopupWindow () {
 @public
  IOSIntArray *mTmpDrawingLocation_;
  IOSIntArray *mTmpScreenLocation_;
  IOSIntArray *mTmpAppLocation_;
  ADRect *mTempRect_;
  ADContext *mContext_;
  JavaLangRefWeakReference *mParentRootView_;
  jboolean mIsShowing_;
  jboolean mIsTransitioningToDismiss_;
  jboolean mIsDropdown_;
  ADView *mDecorView_;
  ADView *mBackgroundView_;
  ADView *mContentView_;
  jboolean mFocusable_;
  jint mInputMethodMode_;
  jboolean mTouchable_;
  jboolean mOutsideTouchable_;
  jboolean mClippingEnabled_;
  jint mSplitTouchEnabled_;
  jboolean mLayoutInScreen_;
  jboolean mClipToScreen_;
  jboolean mAllowScrollingAnchorParent_;
  jboolean mLayoutInsetDecor_;
  jboolean mNotTouchModal_;
  jboolean mAttachedInDecor_;
  jboolean mAttachedInDecorSet_;
  jint mWidthMode_;
  jint mWidth_;
  jint mLastWidth_;
  jint mHeightMode_;
  jint mHeight_;
  jint mLastHeight_;
  jfloat mElevation_;
  ADDrawable *mBackground_;
  ADDrawable *mAboveAnchorBackgroundDrawable_;
  ADDrawable *mBelowAnchorBackgroundDrawable_;
  ADPopupWindow_Transition *mEnterTransition_;
  jboolean mAboveAnchor_;
  id<ADPopupWindow_OnDismissListener> mOnDismissListener_;
  jboolean mIgnoreCheekPress_;
  jint mAnimationStyle_;
  jint mGravity_;
  id<ADView_OnAttachStateChangeListener> mOnAnchorDetachedListener_;
  id<ADView_OnAttachStateChangeListener> mOnAnchorRootDetachedListener_;
  JavaLangRefWeakReference *mAnchor_;
  JavaLangRefWeakReference *mAnchorRoot_;
  jboolean mIsAnchorRootAttached_;
  id<ADViewTreeObserver_OnScrollChangedListener> mOnScrollChangedListener_;
  id<ADView_OnLayoutChangeListener> mOnLayoutChangeListener_;
  jint mAnchorXoff_;
  jint mAnchorYoff_;
  jint mAnchoredGravity_;
  jboolean mOverlapAnchor_;
  jboolean mPopupViewInitialLayoutDirectionInherited_;
  ADRelativeLayout_LayoutParams *mOutParams_;
  jboolean aligningAnchor_;
}

- (void)preparePopupWithADRelativeLayout_LayoutParams:(ADRelativeLayout_LayoutParams *)p;

- (void)invokePopupWithADRelativeLayout_LayoutParams:(ADRelativeLayout_LayoutParams *)p;

- (void)setLayoutDirectionFromAnchor;

- (jint)computeGravity;

- (jboolean)tryFitVerticalWithADRelativeLayout_LayoutParams:(ADRelativeLayout_LayoutParams *)outParams
                                                    withInt:(jint)yOffset
                                                    withInt:(jint)height
                                                    withInt:(jint)anchorHeight
                                                    withInt:(jint)drawingLocationY
                                                    withInt:(jint)screenLocationY
                                                    withInt:(jint)displayFrameTop
                                                    withInt:(jint)displayFrameBottom
                                                withBoolean:(jboolean)allowResize;

- (jboolean)positionInDisplayVerticalWithADRelativeLayout_LayoutParams:(ADRelativeLayout_LayoutParams *)outParams
                                                               withInt:(jint)height
                                                               withInt:(jint)drawingLocationY
                                                               withInt:(jint)screenLocationY
                                                               withInt:(jint)displayFrameTop
                                                               withInt:(jint)displayFrameBottom
                                                           withBoolean:(jboolean)canResize;

- (jboolean)tryFitHorizontalWithADRelativeLayout_LayoutParams:(ADRelativeLayout_LayoutParams *)outParams
                                                      withInt:(jint)xOffset
                                                      withInt:(jint)width
                                                      withInt:(jint)anchorWidth
                                                      withInt:(jint)drawingLocationX
                                                      withInt:(jint)screenLocationX
                                                      withInt:(jint)displayFrameLeft
                                                      withInt:(jint)displayFrameRight
                                                  withBoolean:(jboolean)allowResize;

- (jboolean)positionInDisplayHorizontalWithADRelativeLayout_LayoutParams:(ADRelativeLayout_LayoutParams *)outParams
                                                                 withInt:(jint)width
                                                                 withInt:(jint)drawingLocationX
                                                                 withInt:(jint)screenLocationX
                                                                 withInt:(jint)displayFrameLeft
                                                                 withInt:(jint)displayFrameRight
                                                             withBoolean:(jboolean)canResize;

- (void)dismissImmediateWithADView:(ADView *)decorView
                   withADViewGroup:(ADViewGroup *)contentHolder
                        withADView:(ADView *)contentView;

- (void)updateWithADView:(ADView *)anchor
             withBoolean:(jboolean)updateLocation
                 withInt:(jint)xoff
                 withInt:(jint)yoff
                 withInt:(jint)width
                 withInt:(jint)height;

- (void)alignToAnchor;

- (ADView *)createDecorViewWithADView:(ADView *)mBackgroundView;

- (ADView *)createBackgroundViewWithADView:(ADView *)mContentView;

- (jboolean)isTransitioningToDismiss;

- (void)safeAlignToAnchor;

- (ADView *)getAppRootViewWithADView:(ADView *)anchor;

- (jint)computeAnimationResource;

@end

J2OBJC_FIELD_SETTER(ADPopupWindow, mTmpDrawingLocation_, IOSIntArray *)
J2OBJC_FIELD_SETTER(ADPopupWindow, mTmpScreenLocation_, IOSIntArray *)
J2OBJC_FIELD_SETTER(ADPopupWindow, mTmpAppLocation_, IOSIntArray *)
J2OBJC_FIELD_SETTER(ADPopupWindow, mTempRect_, ADRect *)
J2OBJC_FIELD_SETTER(ADPopupWindow, mContext_, ADContext *)
J2OBJC_FIELD_SETTER(ADPopupWindow, mParentRootView_, JavaLangRefWeakReference *)
J2OBJC_FIELD_SETTER(ADPopupWindow, mDecorView_, ADView *)
J2OBJC_FIELD_SETTER(ADPopupWindow, mBackgroundView_, ADView *)
J2OBJC_FIELD_SETTER(ADPopupWindow, mContentView_, ADView *)
J2OBJC_FIELD_SETTER(ADPopupWindow, mBackground_, ADDrawable *)
J2OBJC_FIELD_SETTER(ADPopupWindow, mAboveAnchorBackgroundDrawable_, ADDrawable *)
J2OBJC_FIELD_SETTER(ADPopupWindow, mBelowAnchorBackgroundDrawable_, ADDrawable *)
J2OBJC_FIELD_SETTER(ADPopupWindow, mEnterTransition_, ADPopupWindow_Transition *)
J2OBJC_FIELD_SETTER(ADPopupWindow, mOnDismissListener_, id<ADPopupWindow_OnDismissListener>)
J2OBJC_FIELD_SETTER(ADPopupWindow, mOnAnchorDetachedListener_, id<ADView_OnAttachStateChangeListener>)
J2OBJC_FIELD_SETTER(ADPopupWindow, mOnAnchorRootDetachedListener_, id<ADView_OnAttachStateChangeListener>)
J2OBJC_FIELD_SETTER(ADPopupWindow, mAnchor_, JavaLangRefWeakReference *)
J2OBJC_FIELD_SETTER(ADPopupWindow, mAnchorRoot_, JavaLangRefWeakReference *)
J2OBJC_FIELD_SETTER(ADPopupWindow, mOnScrollChangedListener_, id<ADViewTreeObserver_OnScrollChangedListener>)
J2OBJC_FIELD_SETTER(ADPopupWindow, mOnLayoutChangeListener_, id<ADView_OnLayoutChangeListener>)
J2OBJC_FIELD_SETTER(ADPopupWindow, mOutParams_, ADRelativeLayout_LayoutParams *)

inline jint ADPopupWindow_get_DEFAULT_ANCHORED_GRAVITY(void);
#define ADPopupWindow_DEFAULT_ANCHORED_GRAVITY 8388659
J2OBJC_STATIC_FIELD_CONSTANT(ADPopupWindow, DEFAULT_ANCHORED_GRAVITY, jint)

inline jint ADPopupWindow_get_ANIMATION_STYLE_DEFAULT(void);
#define ADPopupWindow_ANIMATION_STYLE_DEFAULT -1
J2OBJC_STATIC_FIELD_CONSTANT(ADPopupWindow, ANIMATION_STYLE_DEFAULT, jint)

__attribute__((unused)) static void ADPopupWindow_updateAboveAnchorWithBoolean_(ADPopupWindow *self, jboolean aboveAnchor);

__attribute__((unused)) static void ADPopupWindow_preparePopupWithADRelativeLayout_LayoutParams_(ADPopupWindow *self, ADRelativeLayout_LayoutParams *p);

__attribute__((unused)) static void ADPopupWindow_invokePopupWithADRelativeLayout_LayoutParams_(ADPopupWindow *self, ADRelativeLayout_LayoutParams *p);

__attribute__((unused)) static void ADPopupWindow_setLayoutDirectionFromAnchor(ADPopupWindow *self);

__attribute__((unused)) static jint ADPopupWindow_computeGravity(ADPopupWindow *self);

__attribute__((unused)) static jboolean ADPopupWindow_tryFitVerticalWithADRelativeLayout_LayoutParams_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withBoolean_(ADPopupWindow *self, ADRelativeLayout_LayoutParams *outParams, jint yOffset, jint height, jint anchorHeight, jint drawingLocationY, jint screenLocationY, jint displayFrameTop, jint displayFrameBottom, jboolean allowResize);

__attribute__((unused)) static jboolean ADPopupWindow_positionInDisplayVerticalWithADRelativeLayout_LayoutParams_withInt_withInt_withInt_withInt_withInt_withBoolean_(ADPopupWindow *self, ADRelativeLayout_LayoutParams *outParams, jint height, jint drawingLocationY, jint screenLocationY, jint displayFrameTop, jint displayFrameBottom, jboolean canResize);

__attribute__((unused)) static jboolean ADPopupWindow_tryFitHorizontalWithADRelativeLayout_LayoutParams_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withBoolean_(ADPopupWindow *self, ADRelativeLayout_LayoutParams *outParams, jint xOffset, jint width, jint anchorWidth, jint drawingLocationX, jint screenLocationX, jint displayFrameLeft, jint displayFrameRight, jboolean allowResize);

__attribute__((unused)) static jboolean ADPopupWindow_positionInDisplayHorizontalWithADRelativeLayout_LayoutParams_withInt_withInt_withInt_withInt_withInt_withBoolean_(ADPopupWindow *self, ADRelativeLayout_LayoutParams *outParams, jint width, jint drawingLocationX, jint screenLocationX, jint displayFrameLeft, jint displayFrameRight, jboolean canResize);

__attribute__((unused)) static void ADPopupWindow_dismissImmediateWithADView_withADViewGroup_withADView_(ADPopupWindow *self, ADView *decorView, ADViewGroup *contentHolder, ADView *contentView);

__attribute__((unused)) static void ADPopupWindow_updateWithADView_withBoolean_withInt_withInt_withInt_withInt_(ADPopupWindow *self, ADView *anchor, jboolean updateLocation, jint xoff, jint yoff, jint width, jint height);

__attribute__((unused)) static void ADPopupWindow_alignToAnchor(ADPopupWindow *self);

__attribute__((unused)) static ADRelativeLayout_LayoutParams *ADPopupWindow_createPopupLayoutParamsWithADIBinder_(ADPopupWindow *self, id<ADIBinder> token);

__attribute__((unused)) static ADView *ADPopupWindow_createDecorViewWithADView_(ADPopupWindow *self, ADView *mBackgroundView);

__attribute__((unused)) static ADView *ADPopupWindow_createBackgroundViewWithADView_(ADPopupWindow *self, ADView *mContentView);

__attribute__((unused)) static jboolean ADPopupWindow_isTransitioningToDismiss(ADPopupWindow *self);

__attribute__((unused)) static void ADPopupWindow_safeAlignToAnchor(ADPopupWindow *self);

__attribute__((unused)) static ADView *ADPopupWindow_getAppRootViewWithADView_(ADPopupWindow *self, ADView *anchor);

__attribute__((unused)) static jint ADPopupWindow_computeAnimationResource(ADPopupWindow *self);

@interface ADPopupWindow_1 : NSObject < ADView_OnAttachStateChangeListener > {
 @public
  ADPopupWindow *this$0_;
}

- (instancetype)initWithADPopupWindow:(ADPopupWindow *)outer$;

- (void)onViewAttachedToWindowWithADView:(ADView *)v;

- (void)onViewDetachedFromWindowWithADView:(ADView *)v;

@end

J2OBJC_EMPTY_STATIC_INIT(ADPopupWindow_1)

__attribute__((unused)) static void ADPopupWindow_1_initWithADPopupWindow_(ADPopupWindow_1 *self, ADPopupWindow *outer$);

__attribute__((unused)) static ADPopupWindow_1 *new_ADPopupWindow_1_initWithADPopupWindow_(ADPopupWindow *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static ADPopupWindow_1 *create_ADPopupWindow_1_initWithADPopupWindow_(ADPopupWindow *outer$);

@interface ADPopupWindow_2 : NSObject < ADView_OnAttachStateChangeListener > {
 @public
  ADPopupWindow *this$0_;
}

- (instancetype)initWithADPopupWindow:(ADPopupWindow *)outer$;

- (void)onViewAttachedToWindowWithADView:(ADView *)v;

- (void)onViewDetachedFromWindowWithADView:(ADView *)v;

@end

J2OBJC_EMPTY_STATIC_INIT(ADPopupWindow_2)

__attribute__((unused)) static void ADPopupWindow_2_initWithADPopupWindow_(ADPopupWindow_2 *self, ADPopupWindow *outer$);

__attribute__((unused)) static ADPopupWindow_2 *new_ADPopupWindow_2_initWithADPopupWindow_(ADPopupWindow *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static ADPopupWindow_2 *create_ADPopupWindow_2_initWithADPopupWindow_(ADPopupWindow *outer$);

@interface ADPopupWindow_OnDismissListener : NSObject

@end

@interface ADPopupWindow_$Lambda$1 : NSObject < ADViewTreeObserver_OnScrollChangedListener > {
 @public
  ADPopupWindow *target$_;
}

- (void)onScrollChanged;

@end

J2OBJC_EMPTY_STATIC_INIT(ADPopupWindow_$Lambda$1)

__attribute__((unused)) static void ADPopupWindow_$Lambda$1_initWithADPopupWindow_(ADPopupWindow_$Lambda$1 *self, ADPopupWindow *outer$);

__attribute__((unused)) static ADPopupWindow_$Lambda$1 *new_ADPopupWindow_$Lambda$1_initWithADPopupWindow_(ADPopupWindow *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static ADPopupWindow_$Lambda$1 *create_ADPopupWindow_$Lambda$1_initWithADPopupWindow_(ADPopupWindow *outer$);

@interface ADPopupWindow_$Lambda$2 : NSObject < ADView_OnLayoutChangeListener > {
 @public
  ADPopupWindow *this$0_;
}

- (void)onLayoutChangeWithADView:(ADView *)v
                         withInt:(jint)left
                         withInt:(jint)top
                         withInt:(jint)right
                         withInt:(jint)bottom
                         withInt:(jint)oldLeft
                         withInt:(jint)oldTop
                         withInt:(jint)oldRight
                         withInt:(jint)oldBottom;

@end

J2OBJC_EMPTY_STATIC_INIT(ADPopupWindow_$Lambda$2)

__attribute__((unused)) static void ADPopupWindow_$Lambda$2_initWithADPopupWindow_(ADPopupWindow_$Lambda$2 *self, ADPopupWindow *outer$);

__attribute__((unused)) static ADPopupWindow_$Lambda$2 *new_ADPopupWindow_$Lambda$2_initWithADPopupWindow_(ADPopupWindow *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static ADPopupWindow_$Lambda$2 *create_ADPopupWindow_$Lambda$2_initWithADPopupWindow_(ADPopupWindow *outer$);

@implementation ADPopupWindow

- (void)setContentViewWithADView:(ADView *)contentView {
  [self initOutParamsWithADView:contentView];
  if ([self isShowing]) {
    return;
  }
  JreStrongAssign(&mContentView_, contentView);
  if (mContext_ == nil && mContentView_ != nil) {
    JreStrongAssign(&mContext_, [mContentView_ getContext]);
  }
  if (mContext_ != nil && !mAttachedInDecorSet_) {
    [self setAttachedInDecorWithBoolean:((ADApplicationInfo *) nil_chk([mContext_ getApplicationInfo]))->targetSdkVersion_ >= ADBuild_VERSION_CODES_LOLLIPOP_MR1];
  }
}

- (void)setAttachedInDecorWithBoolean:(jboolean)enabled {
  mAttachedInDecor_ = enabled;
  mAttachedInDecorSet_ = true;
}

- (void)setHeightWithInt:(jint)height {
  mHeight_ = height;
  ((ADRelativeLayout_LayoutParams *) nil_chk(mOutParams_))->height_ = height;
}

- (void)setWidthWithInt:(jint)width {
  mWidth_ = width;
  ((ADRelativeLayout_LayoutParams *) nil_chk(mOutParams_))->width_ = width;
}

- (void)setOverlapAnchorWithBoolean:(jboolean)overlapAnchor {
  mOverlapAnchor_ = overlapAnchor;
}

- (jboolean)isShowing {
  return mIsShowing_;
}

- (void)showAtLocationWithADView:(ADView *)parent
                         withInt:(jint)gravity
                         withInt:(jint)x
                         withInt:(jint)y {
  JreStrongAssignAndConsume(&mParentRootView_, new_JavaLangRefWeakReference_initWithId_([((ADView *) nil_chk(parent)) getRootView]));
  [self showAtLocationWithADIBinder:[parent getWindowToken] withInt:gravity withInt:x withInt:y];
}

- (void)showAtLocationWithADIBinder:(id<ADIBinder>)token
                            withInt:(jint)gravity
                            withInt:(jint)x
                            withInt:(jint)y {
  if ([self isShowing] || mContentView_ == nil) {
    return;
  }
  ADPopupWindow_TransitionManager_endTransitionsWithADView_(mDecorView_);
  [self detachFromAnchor];
  mIsShowing_ = true;
  mIsDropdown_ = false;
  mGravity_ = gravity;
  ADRelativeLayout_LayoutParams *p = ADPopupWindow_createPopupLayoutParamsWithADIBinder_(self, token);
  ADPopupWindow_preparePopupWithADRelativeLayout_LayoutParams_(self, p);
  ((ADRelativeLayout_LayoutParams *) nil_chk(p))->leftMargin_ = x;
  p->topMargin_ = y;
  ADPopupWindow_invokePopupWithADRelativeLayout_LayoutParams_(self, p);
}

- (void)showAsDropDownWithADView:(ADView *)anchor {
  [self showAsDropDownWithADView:anchor withInt:0 withInt:0];
}

- (void)showAsDropDownWithADView:(ADView *)anchor
                         withInt:(jint)xoff
                         withInt:(jint)yoff {
  [self showAsDropDownWithADView:anchor withInt:xoff withInt:yoff withInt:ADPopupWindow_DEFAULT_ANCHORED_GRAVITY];
}

- (void)showAsDropDownWithADView:(ADView *)anchor
                         withInt:(jint)xoff
                         withInt:(jint)yoff
                         withInt:(jint)gravity {
  if ([self isShowing] || ![self hasContentView]) {
    return;
  }
  ADPopupWindow_TransitionManager_endTransitionsWithADView_(mDecorView_);
  [self attachToAnchorWithADView:anchor withInt:xoff withInt:yoff withInt:gravity];
  mIsShowing_ = true;
  mIsDropdown_ = true;
  ADRelativeLayout_LayoutParams *p = ADPopupWindow_createPopupLayoutParamsWithADIBinder_(self, [((ADView *) nil_chk(anchor)) getApplicationWindowToken]);
  ADPopupWindow_preparePopupWithADRelativeLayout_LayoutParams_(self, p);
  jboolean aboveAnchor = [self findDropDownPositionWithADView:anchor withADRelativeLayout_LayoutParams:p withInt:xoff withInt:yoff withInt:((ADRelativeLayout_LayoutParams *) nil_chk(p))->width_ withInt:p->height_ withInt:gravity withBoolean:mAllowScrollingAnchorParent_];
  ADPopupWindow_updateAboveAnchorWithBoolean_(self, aboveAnchor);
  ADPopupWindow_invokePopupWithADRelativeLayout_LayoutParams_(self, p);
}

- (void)updateAboveAnchorWithBoolean:(jboolean)aboveAnchor {
  ADPopupWindow_updateAboveAnchorWithBoolean_(self, aboveAnchor);
}

- (jboolean)isAboveAnchor {
  return mAboveAnchor_;
}

- (void)preparePopupWithADRelativeLayout_LayoutParams:(ADRelativeLayout_LayoutParams *)p {
  ADPopupWindow_preparePopupWithADRelativeLayout_LayoutParams_(self, p);
}

- (void)invokePopupWithADRelativeLayout_LayoutParams:(ADRelativeLayout_LayoutParams *)p {
  ADPopupWindow_invokePopupWithADRelativeLayout_LayoutParams_(self, p);
}

- (void)setLayoutDirectionFromAnchor {
  ADPopupWindow_setLayoutDirectionFromAnchor(self);
}

- (jint)computeGravity {
  return ADPopupWindow_computeGravity(self);
}

- (jboolean)findDropDownPositionWithADView:(ADView *)anchor
         withADRelativeLayout_LayoutParams:(ADRelativeLayout_LayoutParams *)outParams
                                   withInt:(jint)xOffset
                                   withInt:(jint)yOffset
                                   withInt:(jint)width
                                   withInt:(jint)height
                                   withInt:(jint)gravity
                               withBoolean:(jboolean)allowScroll {
  jint anchorHeight = [((ADView *) nil_chk(anchor)) getHeight];
  jint anchorWidth = [anchor getWidth];
  if (mOverlapAnchor_) {
    yOffset -= anchorHeight;
  }
  IOSIntArray *appScreenLocation = mTmpAppLocation_;
  ADView *appRootView = ADPopupWindow_getAppRootViewWithADView_(self, anchor);
  [((ADView *) nil_chk(appRootView)) getLocationOnScreenWithIntArray:appScreenLocation];
  IOSIntArray *screenLocation = mTmpScreenLocation_;
  [anchor getLocationOnScreenWithIntArray:screenLocation];
  IOSIntArray *drawingLocation = mTmpDrawingLocation_;
  *IOSIntArray_GetRef(nil_chk(drawingLocation), 0) = IOSIntArray_Get(nil_chk(screenLocation), 0) - IOSIntArray_Get(nil_chk(appScreenLocation), 0);
  *IOSIntArray_GetRef(drawingLocation, 1) = IOSIntArray_Get(screenLocation, 1) - IOSIntArray_Get(appScreenLocation, 1);
  ((ADRelativeLayout_LayoutParams *) nil_chk(outParams))->leftMargin_ = IOSIntArray_Get(drawingLocation, 0) + xOffset;
  outParams->topMargin_ = IOSIntArray_Get(drawingLocation, 1) + anchorHeight + yOffset;
  ADRect *displayFrame = create_ADRect_init();
  [appRootView getWindowVisibleDisplayFrameWithADRect:displayFrame];
  if (width == ADViewGroup_LayoutParams_MATCH_PARENT) {
    width = displayFrame->right_ - displayFrame->left_;
  }
  if (height == ADViewGroup_LayoutParams_MATCH_PARENT) {
    height = displayFrame->bottom_ - displayFrame->top_;
  }
  outParams->width_ = width;
  outParams->height_ = height;
  jint hgrav = ADGravity_getAbsoluteGravityWithInt_withInt_(gravity, [anchor getLayoutDirection]) & ADGravity_HORIZONTAL_GRAVITY_MASK;
  if (hgrav == ADGravity_RIGHT) {
    [outParams addRuleWithInt:ADRelativeLayout_ALIGN_PARENT_RIGHT withInt:ADRelativeLayout_TRUE];
  }
  jboolean fitsVertical = ADPopupWindow_tryFitVerticalWithADRelativeLayout_LayoutParams_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withBoolean_(self, outParams, yOffset, height, anchorHeight, IOSIntArray_Get(drawingLocation, 1), IOSIntArray_Get(screenLocation, 1), displayFrame->top_, displayFrame->bottom_, false);
  jboolean fitsHorizontal = ADPopupWindow_tryFitHorizontalWithADRelativeLayout_LayoutParams_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withBoolean_(self, outParams, xOffset, width, anchorWidth, IOSIntArray_Get(drawingLocation, 0), IOSIntArray_Get(screenLocation, 0), displayFrame->left_, displayFrame->right_, false);
  if (!fitsVertical || !fitsHorizontal) {
    jint scrollX = [anchor getScrollX];
    jint scrollY = [anchor getScrollY];
    ADRect *r = create_ADRect_initWithInt_withInt_withInt_withInt_(scrollX, scrollY, scrollX + width + xOffset, scrollY + height + anchorHeight + yOffset);
    if (allowScroll && [anchor requestRectangleOnScreenWithADRect:r withBoolean:true]) {
      [anchor getLocationOnScreenWithIntArray:screenLocation];
      *IOSIntArray_GetRef(drawingLocation, 0) = IOSIntArray_Get(screenLocation, 0) - IOSIntArray_Get(appScreenLocation, 0);
      *IOSIntArray_GetRef(drawingLocation, 1) = IOSIntArray_Get(screenLocation, 1) - IOSIntArray_Get(appScreenLocation, 1);
      outParams->leftMargin_ = IOSIntArray_Get(drawingLocation, 0) + xOffset;
      outParams->topMargin_ = IOSIntArray_Get(drawingLocation, 1) + anchorHeight + yOffset;
      if (hgrav == ADGravity_RIGHT) {
        [outParams addRuleWithInt:ADRelativeLayout_ALIGN_PARENT_RIGHT withInt:ADRelativeLayout_TRUE];
      }
    }
    ADPopupWindow_tryFitVerticalWithADRelativeLayout_LayoutParams_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withBoolean_(self, outParams, yOffset, height, anchorHeight, IOSIntArray_Get(drawingLocation, 1), IOSIntArray_Get(screenLocation, 1), displayFrame->top_, displayFrame->bottom_, mClipToScreen_);
    ADPopupWindow_tryFitHorizontalWithADRelativeLayout_LayoutParams_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withBoolean_(self, outParams, xOffset, width, anchorWidth, IOSIntArray_Get(drawingLocation, 0), IOSIntArray_Get(screenLocation, 0), displayFrame->left_, displayFrame->right_, mClipToScreen_);
  }
  return outParams->topMargin_ < IOSIntArray_Get(drawingLocation, 1);
}

- (jboolean)tryFitVerticalWithADRelativeLayout_LayoutParams:(ADRelativeLayout_LayoutParams *)outParams
                                                    withInt:(jint)yOffset
                                                    withInt:(jint)height
                                                    withInt:(jint)anchorHeight
                                                    withInt:(jint)drawingLocationY
                                                    withInt:(jint)screenLocationY
                                                    withInt:(jint)displayFrameTop
                                                    withInt:(jint)displayFrameBottom
                                                withBoolean:(jboolean)allowResize {
  return ADPopupWindow_tryFitVerticalWithADRelativeLayout_LayoutParams_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withBoolean_(self, outParams, yOffset, height, anchorHeight, drawingLocationY, screenLocationY, displayFrameTop, displayFrameBottom, allowResize);
}

- (jboolean)positionInDisplayVerticalWithADRelativeLayout_LayoutParams:(ADRelativeLayout_LayoutParams *)outParams
                                                               withInt:(jint)height
                                                               withInt:(jint)drawingLocationY
                                                               withInt:(jint)screenLocationY
                                                               withInt:(jint)displayFrameTop
                                                               withInt:(jint)displayFrameBottom
                                                           withBoolean:(jboolean)canResize {
  return ADPopupWindow_positionInDisplayVerticalWithADRelativeLayout_LayoutParams_withInt_withInt_withInt_withInt_withInt_withBoolean_(self, outParams, height, drawingLocationY, screenLocationY, displayFrameTop, displayFrameBottom, canResize);
}

- (jboolean)tryFitHorizontalWithADRelativeLayout_LayoutParams:(ADRelativeLayout_LayoutParams *)outParams
                                                      withInt:(jint)xOffset
                                                      withInt:(jint)width
                                                      withInt:(jint)anchorWidth
                                                      withInt:(jint)drawingLocationX
                                                      withInt:(jint)screenLocationX
                                                      withInt:(jint)displayFrameLeft
                                                      withInt:(jint)displayFrameRight
                                                  withBoolean:(jboolean)allowResize {
  return ADPopupWindow_tryFitHorizontalWithADRelativeLayout_LayoutParams_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withBoolean_(self, outParams, xOffset, width, anchorWidth, drawingLocationX, screenLocationX, displayFrameLeft, displayFrameRight, allowResize);
}

- (jboolean)positionInDisplayHorizontalWithADRelativeLayout_LayoutParams:(ADRelativeLayout_LayoutParams *)outParams
                                                                 withInt:(jint)width
                                                                 withInt:(jint)drawingLocationX
                                                                 withInt:(jint)screenLocationX
                                                                 withInt:(jint)displayFrameLeft
                                                                 withInt:(jint)displayFrameRight
                                                             withBoolean:(jboolean)canResize {
  return ADPopupWindow_positionInDisplayHorizontalWithADRelativeLayout_LayoutParams_withInt_withInt_withInt_withInt_withInt_withBoolean_(self, outParams, width, drawingLocationX, screenLocationX, displayFrameLeft, displayFrameRight, canResize);
}

- (jint)getMaxAvailableHeightWithADView:(ADView *)anchor {
  return [self getMaxAvailableHeightWithADView:anchor withInt:0];
}

- (jint)getMaxAvailableHeightWithADView:(ADView *)anchor
                                withInt:(jint)yOffset {
  return [self getMaxAvailableHeightWithADView:anchor withInt:yOffset withBoolean:false];
}

- (jint)getMaxAvailableHeightWithADView:(ADView *)anchor
                                withInt:(jint)yOffset
                            withBoolean:(jboolean)ignoreBottomDecorations {
  ADRect *displayFrame = nil;
  ADRect *visibleDisplayFrame = create_ADRect_init();
  ADView *appView = ADPopupWindow_getAppRootViewWithADView_(self, anchor);
  [((ADView *) nil_chk(appView)) getWindowVisibleDisplayFrameWithADRect:visibleDisplayFrame];
  if (ignoreBottomDecorations) {
    displayFrame = create_ADRect_init();
    [((ADView *) nil_chk(anchor)) getWindowDisplayFrameWithADRect:displayFrame];
    displayFrame->top_ = visibleDisplayFrame->top_;
    displayFrame->right_ = visibleDisplayFrame->right_;
    displayFrame->left_ = visibleDisplayFrame->left_;
  }
  else {
    displayFrame = visibleDisplayFrame;
  }
  IOSIntArray *anchorPos = mTmpDrawingLocation_;
  [((ADView *) nil_chk(anchor)) getLocationOnScreenWithIntArray:anchorPos];
  jint bottomEdge = displayFrame->bottom_;
  jint distanceToBottom;
  if (mOverlapAnchor_) {
    distanceToBottom = bottomEdge - IOSIntArray_Get(nil_chk(anchorPos), 1) - yOffset;
  }
  else {
    distanceToBottom = bottomEdge - (IOSIntArray_Get(nil_chk(anchorPos), 1) + [anchor getHeight]) - yOffset;
  }
  jint distanceToTop = IOSIntArray_Get(anchorPos, 1) - displayFrame->top_ + yOffset;
  jint returnedHeight = JavaLangMath_maxWithInt_withInt_(distanceToBottom, distanceToTop);
  if (mBackground_ != nil) {
    [mBackground_ getPaddingWithADRect:mTempRect_];
    returnedHeight -= ((ADRect *) nil_chk(mTempRect_))->top_ + mTempRect_->bottom_;
  }
  return returnedHeight;
}

- (void)dismiss {
  if (![self isShowing] || ADPopupWindow_isTransitioningToDismiss(self)) {
    return;
  }
  ADView *decorView = mDecorView_;
  ADView *contentView = mContentView_;
  ADViewGroup *contentHolder;
  id<ADViewParent> contentParent = [((ADView *) nil_chk(contentView)) getParent];
  if ([contentParent isKindOfClass:[ADViewGroup class]]) {
    contentHolder = ((ADViewGroup *) contentParent);
  }
  else {
    contentHolder = nil;
  }
  mIsShowing_ = false;
  mIsTransitioningToDismiss_ = true;
  ADPopupWindow_Transition *exitTransition = nil;
  if (exitTransition != nil && [((ADView *) nil_chk(decorView)) isLaidOut] && (mIsAnchorRootAttached_ || mAnchorRoot_ == nil)) {
    ADRelativeLayout_LayoutParams *p = (ADRelativeLayout_LayoutParams *) cast_chk([((ADView *) nil_chk(decorView)) getLayoutParams], [ADRelativeLayout_LayoutParams class]);
    [((ADView *) nil_chk(self->mContentView_)) requestLayout];
    [((ADView *) nil_chk([((ADView *) nil_chk(self->mContentView_)) getRootView])) remeasure];
    ADView *anchorRoot = mAnchorRoot_ != nil ? [mAnchorRoot_ get] : nil;
  }
  else {
    ADPopupWindow_dismissImmediateWithADView_withADViewGroup_withADView_(self, decorView, contentHolder, contentView);
  }
  [self detachFromAnchor];
  if (mOnDismissListener_ != nil) {
    [mOnDismissListener_ onDismiss];
  }
}

- (void)dismissImmediateWithADView:(ADView *)decorView
                   withADViewGroup:(ADViewGroup *)contentHolder
                        withADView:(ADView *)contentView {
  ADPopupWindow_dismissImmediateWithADView_withADViewGroup_withADView_(self, decorView, contentHolder, contentView);
}

- (void)setOnDismissListenerWithADPopupWindow_OnDismissListener:(id<ADPopupWindow_OnDismissListener>)onDismissListener {
  JreStrongAssign(&mOnDismissListener_, onDismissListener);
}

- (void)update {
  if (![self isShowing] || ![self hasContentView]) {
    return;
  }
  ADRelativeLayout_LayoutParams *p = [self getDecorViewLayoutParams];
  jboolean update = false;
  jint newAnim = ADPopupWindow_computeAnimationResource(self);
  jint newGravity = ADPopupWindow_computeGravity(self);
  if (update) {
    [self updateWithADView:mAnchor_ != nil ? [mAnchor_ get] : nil withADRelativeLayout_LayoutParams:p];
  }
}

- (void)updateWithADView:(ADView *)anchor
withADRelativeLayout_LayoutParams:(ADRelativeLayout_LayoutParams *)params {
  ADPopupWindow_setLayoutDirectionFromAnchor(self);
  [self remeasure];
}

- (void)updateWithInt:(jint)width
              withInt:(jint)height {
  ADRelativeLayout_LayoutParams *p = [self getDecorViewLayoutParams];
  [self updateWithInt:((ADRelativeLayout_LayoutParams *) nil_chk(p))->leftMargin_ withInt:p->topMargin_ withInt:width withInt:height withBoolean:false];
}

- (void)updateWithInt:(jint)x
              withInt:(jint)y
              withInt:(jint)width
              withInt:(jint)height {
  [self updateWithInt:x withInt:y withInt:width withInt:height withBoolean:false];
}

- (void)updateWithInt:(jint)x
              withInt:(jint)y
              withInt:(jint)width
              withInt:(jint)height
          withBoolean:(jboolean)force {
  if (width >= 0) {
    mLastWidth_ = width;
    [self setWidthWithInt:width];
  }
  if (height >= 0) {
    mLastHeight_ = height;
    [self setHeightWithInt:height];
  }
  if (![self isShowing] || ![self hasContentView]) {
    return;
  }
  ADRelativeLayout_LayoutParams *p = [self getDecorViewLayoutParams];
  jboolean update = force;
  jint finalWidth = mWidthMode_ < 0 ? mWidthMode_ : mLastWidth_;
  if (width != -1 && ((ADRelativeLayout_LayoutParams *) nil_chk(p))->width_ != finalWidth) {
    ((ADRelativeLayout_LayoutParams *) nil_chk(p))->width_ = mLastWidth_ = finalWidth;
    update = true;
  }
  jint finalHeight = mHeightMode_ < 0 ? mHeightMode_ : mLastHeight_;
  if (height != -1 && ((ADRelativeLayout_LayoutParams *) nil_chk(p))->height_ != finalHeight) {
    ((ADRelativeLayout_LayoutParams *) nil_chk(p))->height_ = mLastHeight_ = finalHeight;
    update = true;
  }
  if (((ADRelativeLayout_LayoutParams *) nil_chk(p))->leftMargin_ != x) {
    p->leftMargin_ = x;
    update = true;
  }
  if (p->topMargin_ != y) {
    p->topMargin_ = y;
    update = true;
  }
  jint newAnim = ADPopupWindow_computeAnimationResource(self);
  jint newGravity = ADPopupWindow_computeGravity(self);
  ADView *anchor = nil;
  jint newAccessibilityIdOfAnchor = -1;
  if (mAnchor_ != nil && [mAnchor_ get] != nil) {
    anchor = [mAnchor_ get];
    newAccessibilityIdOfAnchor = [((ADView *) nil_chk(anchor)) getAccessibilityViewId];
  }
  if (update) {
    [self updateWithADView:anchor withADRelativeLayout_LayoutParams:p];
  }
}

- (jboolean)hasContentView {
  return mContentView_ != nil;
}

- (jboolean)hasDecorView {
  return mDecorView_ != nil;
}

- (ADRelativeLayout_LayoutParams *)getDecorViewLayoutParams {
  return (ADRelativeLayout_LayoutParams *) cast_chk([((ADView *) nil_chk(mDecorView_)) getLayoutParams], [ADRelativeLayout_LayoutParams class]);
}

- (void)updateWithADView:(ADView *)anchor
                 withInt:(jint)width
                 withInt:(jint)height {
  ADPopupWindow_updateWithADView_withBoolean_withInt_withInt_withInt_withInt_(self, anchor, false, 0, 0, width, height);
}

- (void)updateWithADView:(ADView *)anchor
                 withInt:(jint)xoff
                 withInt:(jint)yoff
                 withInt:(jint)width
                 withInt:(jint)height {
  ADPopupWindow_updateWithADView_withBoolean_withInt_withInt_withInt_withInt_(self, anchor, true, xoff, yoff, width, height);
}

- (void)updateWithADView:(ADView *)anchor
             withBoolean:(jboolean)updateLocation
                 withInt:(jint)xoff
                 withInt:(jint)yoff
                 withInt:(jint)width
                 withInt:(jint)height {
  ADPopupWindow_updateWithADView_withBoolean_withInt_withInt_withInt_withInt_(self, anchor, updateLocation, xoff, yoff, width, height);
}

- (void)detachFromAnchor {
  ADView *anchor = [self getAnchor];
  if (anchor != nil) {
    ADViewTreeObserver *vto = [anchor getViewTreeObserver];
    [((ADViewTreeObserver *) nil_chk(vto)) removeOnScrollChangedListenerWithADViewTreeObserver_OnScrollChangedListener:mOnScrollChangedListener_];
    [anchor removeOnAttachStateChangeListenerWithADView_OnAttachStateChangeListener:mOnAnchorDetachedListener_];
  }
  ADView *anchorRoot = mAnchorRoot_ != nil ? [mAnchorRoot_ get] : nil;
  if (anchorRoot != nil) {
    [anchorRoot removeOnAttachStateChangeListenerWithADView_OnAttachStateChangeListener:mOnAnchorRootDetachedListener_];
    [anchorRoot removeOnLayoutChangeListenerWithADView_OnLayoutChangeListener:mOnLayoutChangeListener_];
  }
  JreStrongAssign(&mAnchor_, nil);
  JreStrongAssign(&mAnchorRoot_, nil);
  mIsAnchorRootAttached_ = false;
}

- (void)attachToAnchorWithADView:(ADView *)anchor
                         withInt:(jint)xoff
                         withInt:(jint)yoff
                         withInt:(jint)gravity {
  [self detachFromAnchor];
  ADViewTreeObserver *vto = [((ADView *) nil_chk(anchor)) getViewTreeObserver];
  if (vto != nil) {
    [vto addOnScrollChangedListenerWithADViewTreeObserver_OnScrollChangedListener:mOnScrollChangedListener_];
  }
  [anchor addOnAttachStateChangeListenerWithADView_OnAttachStateChangeListener:mOnAnchorDetachedListener_];
  ADView *anchorRoot = [anchor getRootView];
  [((ADView *) nil_chk(anchorRoot)) addOnAttachStateChangeListenerWithADView_OnAttachStateChangeListener:mOnAnchorRootDetachedListener_];
  [anchorRoot addOnLayoutChangeListenerWithADView_OnLayoutChangeListener:mOnLayoutChangeListener_];
  JreStrongAssignAndConsume(&mAnchor_, new_JavaLangRefWeakReference_initWithId_(anchor));
  JreStrongAssignAndConsume(&mAnchorRoot_, new_JavaLangRefWeakReference_initWithId_(anchorRoot));
  mIsAnchorRootAttached_ = [anchorRoot isAttachedToWindow];
  JreStrongAssign(&mParentRootView_, mAnchorRoot_);
  mAnchorXoff_ = xoff;
  mAnchorYoff_ = yoff;
  mAnchoredGravity_ = gravity;
}

- (ADView *)getAnchor {
  return mAnchor_ != nil ? [mAnchor_ get] : nil;
}

- (void)alignToAnchor {
  ADPopupWindow_alignToAnchor(self);
}

- (void)initOutParamsWithADView:(ADView *)contentView {
  if (contentView != nil) {
    id<ADViewParent> parent = JreRetainedLocalValue([contentView getParent]);
    while (!([[((ADViewGroup *) nil_chk(((ADViewGroup *) cast_chk(parent, [ADViewGroup class])))) getLayoutParams] isKindOfClass:[ADRelativeLayout_LayoutParams class]])) {
      parent = [((id<ADViewParent>) nil_chk(parent)) getParent];
    }
    JreStrongAssign(&mOutParams_, (ADRelativeLayout_LayoutParams *) cast_chk([((ADViewGroup *) nil_chk(((ADViewGroup *) cast_chk(parent, [ADViewGroup class])))) getLayoutParams], [ADRelativeLayout_LayoutParams class]));
  }
}

- (void)remeasure {
  if (self->mContentView_ != nil) {
    [((ADView *) nil_chk([self->mContentView_ getRootView])) forceLayout];
    [((ADView *) nil_chk(self->mContentView_)) requestLayout];
    [((ADView *) nil_chk([((ADView *) nil_chk(self->mContentView_)) getRootView])) remeasure];
  }
}

- (void)showAsDropDownWithADView:(ADView *)decorView
                      withADView:(ADView *)anchor
withADRelativeLayout_LayoutParams:(ADRelativeLayout_LayoutParams *)outParams
                         withInt:(jint)xOffset
                         withInt:(jint)yOffset
                         withInt:(jint)gravity {
  JreStrongAssign(&mDecorView_, decorView);
  JreStrongAssign(&mOutParams_, outParams);
  [self showAsDropDownWithADView:anchor withInt:xOffset withInt:yOffset withInt:gravity];
}

- (void)showAtLocationWithADView:(ADView *)decorView
withADRelativeLayout_LayoutParams:(ADRelativeLayout_LayoutParams *)outParams
                         withInt:(jint)x
                         withInt:(jint)y
                         withInt:(jint)gravity {
  JreStrongAssign(&mDecorView_, decorView);
  JreStrongAssign(&mOutParams_, outParams);
  [self showAtLocationWithADView:decorView withInt:x withInt:y withInt:gravity];
}

- (ADRelativeLayout_LayoutParams *)createPopupLayoutParamsWithADIBinder:(id<ADIBinder>)token {
  return ADPopupWindow_createPopupLayoutParamsWithADIBinder_(self, token);
}

- (ADView *)createDecorViewWithADView:(ADView *)mBackgroundView {
  return ADPopupWindow_createDecorViewWithADView_(self, mBackgroundView);
}

- (ADView *)createBackgroundViewWithADView:(ADView *)mContentView {
  return ADPopupWindow_createBackgroundViewWithADView_(self, mContentView);
}

- (jboolean)isTransitioningToDismiss {
  return ADPopupWindow_isTransitioningToDismiss(self);
}

- (void)safeAlignToAnchor {
  ADPopupWindow_safeAlignToAnchor(self);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADPopupWindow_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (ADView *)getAppRootViewWithADView:(ADView *)anchor {
  return ADPopupWindow_getAppRootViewWithADView_(self, anchor);
}

- (jint)computeFlagsWithInt:(jint)curFlags {
  return curFlags;
}

- (jint)computeAnimationResource {
  return ADPopupWindow_computeAnimationResource(self);
}

- (void)dealloc {
  RELEASE_(mTmpDrawingLocation_);
  RELEASE_(mTmpScreenLocation_);
  RELEASE_(mTmpAppLocation_);
  RELEASE_(mTempRect_);
  RELEASE_(mContext_);
  RELEASE_(mParentRootView_);
  RELEASE_(mDecorView_);
  RELEASE_(mBackgroundView_);
  RELEASE_(mContentView_);
  RELEASE_(mBackground_);
  RELEASE_(mAboveAnchorBackgroundDrawable_);
  RELEASE_(mBelowAnchorBackgroundDrawable_);
  RELEASE_(mEnterTransition_);
  RELEASE_(mOnDismissListener_);
  RELEASE_(mOnAnchorDetachedListener_);
  RELEASE_(mOnAnchorRootDetachedListener_);
  RELEASE_(mAnchor_);
  RELEASE_(mAnchorRoot_);
  RELEASE_(mOnScrollChangedListener_);
  RELEASE_(mOnLayoutChangeListener_);
  RELEASE_(mOutParams_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x14, 13, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 14, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 16, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, 17, 18, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 19, 20, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 21, 22, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 23, 20, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 24, 22, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 25, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 25, 26, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 25, 27, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 28, 29, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 30, 31, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 32, 33, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 32, 34, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 32, 35, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 32, 36, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADRelativeLayout_LayoutParams;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 32, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 32, 37, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 32, 38, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 39, 9, -1, -1, -1, -1 },
    { NULL, "LADView;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 40, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 41, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 42, -1, -1, -1, -1 },
    { NULL, "LADRelativeLayout_LayoutParams;", 0x14, 43, 44, -1, -1, -1, -1 },
    { NULL, "LADView;", 0x2, 45, 1, -1, -1, -1, -1 },
    { NULL, "LADView;", 0x2, 46, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADView;", 0x2, 47, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 48, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(setContentViewWithADView:);
  methods[1].selector = @selector(setAttachedInDecorWithBoolean:);
  methods[2].selector = @selector(setHeightWithInt:);
  methods[3].selector = @selector(setWidthWithInt:);
  methods[4].selector = @selector(setOverlapAnchorWithBoolean:);
  methods[5].selector = @selector(isShowing);
  methods[6].selector = @selector(showAtLocationWithADView:withInt:withInt:withInt:);
  methods[7].selector = @selector(showAtLocationWithADIBinder:withInt:withInt:withInt:);
  methods[8].selector = @selector(showAsDropDownWithADView:);
  methods[9].selector = @selector(showAsDropDownWithADView:withInt:withInt:);
  methods[10].selector = @selector(showAsDropDownWithADView:withInt:withInt:withInt:);
  methods[11].selector = @selector(updateAboveAnchorWithBoolean:);
  methods[12].selector = @selector(isAboveAnchor);
  methods[13].selector = @selector(preparePopupWithADRelativeLayout_LayoutParams:);
  methods[14].selector = @selector(invokePopupWithADRelativeLayout_LayoutParams:);
  methods[15].selector = @selector(setLayoutDirectionFromAnchor);
  methods[16].selector = @selector(computeGravity);
  methods[17].selector = @selector(findDropDownPositionWithADView:withADRelativeLayout_LayoutParams:withInt:withInt:withInt:withInt:withInt:withBoolean:);
  methods[18].selector = @selector(tryFitVerticalWithADRelativeLayout_LayoutParams:withInt:withInt:withInt:withInt:withInt:withInt:withInt:withBoolean:);
  methods[19].selector = @selector(positionInDisplayVerticalWithADRelativeLayout_LayoutParams:withInt:withInt:withInt:withInt:withInt:withBoolean:);
  methods[20].selector = @selector(tryFitHorizontalWithADRelativeLayout_LayoutParams:withInt:withInt:withInt:withInt:withInt:withInt:withInt:withBoolean:);
  methods[21].selector = @selector(positionInDisplayHorizontalWithADRelativeLayout_LayoutParams:withInt:withInt:withInt:withInt:withInt:withBoolean:);
  methods[22].selector = @selector(getMaxAvailableHeightWithADView:);
  methods[23].selector = @selector(getMaxAvailableHeightWithADView:withInt:);
  methods[24].selector = @selector(getMaxAvailableHeightWithADView:withInt:withBoolean:);
  methods[25].selector = @selector(dismiss);
  methods[26].selector = @selector(dismissImmediateWithADView:withADViewGroup:withADView:);
  methods[27].selector = @selector(setOnDismissListenerWithADPopupWindow_OnDismissListener:);
  methods[28].selector = @selector(update);
  methods[29].selector = @selector(updateWithADView:withADRelativeLayout_LayoutParams:);
  methods[30].selector = @selector(updateWithInt:withInt:);
  methods[31].selector = @selector(updateWithInt:withInt:withInt:withInt:);
  methods[32].selector = @selector(updateWithInt:withInt:withInt:withInt:withBoolean:);
  methods[33].selector = @selector(hasContentView);
  methods[34].selector = @selector(hasDecorView);
  methods[35].selector = @selector(getDecorViewLayoutParams);
  methods[36].selector = @selector(updateWithADView:withInt:withInt:);
  methods[37].selector = @selector(updateWithADView:withInt:withInt:withInt:withInt:);
  methods[38].selector = @selector(updateWithADView:withBoolean:withInt:withInt:withInt:withInt:);
  methods[39].selector = @selector(detachFromAnchor);
  methods[40].selector = @selector(attachToAnchorWithADView:withInt:withInt:withInt:);
  methods[41].selector = @selector(getAnchor);
  methods[42].selector = @selector(alignToAnchor);
  methods[43].selector = @selector(initOutParamsWithADView:);
  methods[44].selector = @selector(remeasure);
  methods[45].selector = @selector(showAsDropDownWithADView:withADView:withADRelativeLayout_LayoutParams:withInt:withInt:withInt:);
  methods[46].selector = @selector(showAtLocationWithADView:withADRelativeLayout_LayoutParams:withInt:withInt:withInt:);
  methods[47].selector = @selector(createPopupLayoutParamsWithADIBinder:);
  methods[48].selector = @selector(createDecorViewWithADView:);
  methods[49].selector = @selector(createBackgroundViewWithADView:);
  methods[50].selector = @selector(isTransitioningToDismiss);
  methods[51].selector = @selector(safeAlignToAnchor);
  methods[52].selector = @selector(init);
  methods[53].selector = @selector(getAppRootViewWithADView:);
  methods[54].selector = @selector(computeFlagsWithInt:);
  methods[55].selector = @selector(computeAnimationResource);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "INPUT_METHOD_FROM_FOCUSABLE", "I", .constantValue.asInt = ADPopupWindow_INPUT_METHOD_FROM_FOCUSABLE, 0x19, -1, -1, -1, -1 },
    { "INPUT_METHOD_NEEDED", "I", .constantValue.asInt = ADPopupWindow_INPUT_METHOD_NEEDED, 0x19, -1, -1, -1, -1 },
    { "INPUT_METHOD_NOT_NEEDED", "I", .constantValue.asInt = ADPopupWindow_INPUT_METHOD_NOT_NEEDED, 0x19, -1, -1, -1, -1 },
    { "DEFAULT_ANCHORED_GRAVITY", "I", .constantValue.asInt = ADPopupWindow_DEFAULT_ANCHORED_GRAVITY, 0x1a, -1, -1, -1, -1 },
    { "ANIMATION_STYLE_DEFAULT", "I", .constantValue.asInt = ADPopupWindow_ANIMATION_STYLE_DEFAULT, 0x1a, -1, -1, -1, -1 },
    { "mTmpDrawingLocation_", "[I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mTmpScreenLocation_", "[I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mTmpAppLocation_", "[I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mTempRect_", "LADRect;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mContext_", "LADContext;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mParentRootView_", "LJavaLangRefWeakReference;", .constantValue.asLong = 0, 0x2, -1, -1, 49, -1 },
    { "mIsShowing_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mIsTransitioningToDismiss_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mIsDropdown_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mDecorView_", "LADView;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mBackgroundView_", "LADView;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mContentView_", "LADView;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mFocusable_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mInputMethodMode_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mTouchable_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mOutsideTouchable_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mClippingEnabled_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mSplitTouchEnabled_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mLayoutInScreen_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mClipToScreen_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mAllowScrollingAnchorParent_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mLayoutInsetDecor_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mNotTouchModal_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mAttachedInDecor_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mAttachedInDecorSet_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mWidthMode_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mWidth_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mLastWidth_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mHeightMode_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mHeight_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mLastHeight_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mElevation_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mBackground_", "LADDrawable;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mAboveAnchorBackgroundDrawable_", "LADDrawable;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mBelowAnchorBackgroundDrawable_", "LADDrawable;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mEnterTransition_", "LADPopupWindow_Transition;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mAboveAnchor_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mOnDismissListener_", "LADPopupWindow_OnDismissListener;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mIgnoreCheekPress_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mAnimationStyle_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mGravity_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mOnAnchorDetachedListener_", "LADView_OnAttachStateChangeListener;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mOnAnchorRootDetachedListener_", "LADView_OnAttachStateChangeListener;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mAnchor_", "LJavaLangRefWeakReference;", .constantValue.asLong = 0, 0x2, -1, -1, 49, -1 },
    { "mAnchorRoot_", "LJavaLangRefWeakReference;", .constantValue.asLong = 0, 0x2, -1, -1, 49, -1 },
    { "mIsAnchorRootAttached_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mOnScrollChangedListener_", "LADViewTreeObserver_OnScrollChangedListener;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mOnLayoutChangeListener_", "LADView_OnLayoutChangeListener;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mAnchorXoff_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mAnchorYoff_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mAnchoredGravity_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mOverlapAnchor_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mPopupViewInitialLayoutDirectionInherited_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mOutParams_", "LADRelativeLayout_LayoutParams;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "aligningAnchor_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setContentView", "LADView;", "setAttachedInDecor", "Z", "setHeight", "I", "setWidth", "setOverlapAnchor", "showAtLocation", "LADView;III", "LADIBinder;III", "showAsDropDown", "LADView;II", "updateAboveAnchor", "preparePopup", "LADRelativeLayout_LayoutParams;", "invokePopup", "findDropDownPosition", "LADView;LADRelativeLayout_LayoutParams;IIIIIZ", "tryFitVertical", "LADRelativeLayout_LayoutParams;IIIIIIIZ", "positionInDisplayVertical", "LADRelativeLayout_LayoutParams;IIIIIZ", "tryFitHorizontal", "positionInDisplayHorizontal", "getMaxAvailableHeight", "LADView;I", "LADView;IZ", "dismissImmediate", "LADView;LADViewGroup;LADView;", "setOnDismissListener", "LADPopupWindow_OnDismissListener;", "update", "LADView;LADRelativeLayout_LayoutParams;", "II", "IIII", "IIIIZ", "LADView;IIII", "LADView;ZIIII", "attachToAnchor", "initOutParams", "LADView;LADView;LADRelativeLayout_LayoutParams;III", "LADView;LADRelativeLayout_LayoutParams;III", "createPopupLayoutParams", "LADIBinder;", "createDecorView", "createBackgroundView", "getAppRootView", "computeFlags", "Ljava/lang/ref/WeakReference<Lr/android/view/View;>;", "LADPopupWindow_OnDismissListener;LADPopupWindow_TransitionManager;LADPopupWindow_Transition;" };
  static const J2ObjcClassInfo _ADPopupWindow = { "PopupWindow", "r.android.widget", ptrTable, methods, fields, 7, 0x1, 56, 60, -1, 50, -1, -1, -1 };
  return &_ADPopupWindow;
}

@end

void ADPopupWindow_updateAboveAnchorWithBoolean_(ADPopupWindow *self, jboolean aboveAnchor) {
  if (aboveAnchor != self->mAboveAnchor_) {
    self->mAboveAnchor_ = aboveAnchor;
    if (self->mBackground_ != nil && self->mBackgroundView_ != nil) {
      if (self->mAboveAnchorBackgroundDrawable_ != nil) {
        if (self->mAboveAnchor_) {
          [self->mBackgroundView_ setBackgroundWithADDrawable:self->mAboveAnchorBackgroundDrawable_];
        }
        else {
          [self->mBackgroundView_ setBackgroundWithADDrawable:self->mBelowAnchorBackgroundDrawable_];
        }
      }
      else {
        [self->mBackgroundView_ refreshDrawableState];
      }
    }
  }
}

void ADPopupWindow_preparePopupWithADRelativeLayout_LayoutParams_(ADPopupWindow *self, ADRelativeLayout_LayoutParams *p) {
  if (self->mContentView_ == nil || self->mContext_ == nil) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(@"You must specify a valid content view by calling setContentView() before attempting to show the popup.");
  }
  if (self->mDecorView_ != nil) {
  }
  if (self->mBackground_ != nil) {
    JreStrongAssign(&self->mBackgroundView_, ADPopupWindow_createBackgroundViewWithADView_(self, self->mContentView_));
    [((ADView *) nil_chk(self->mBackgroundView_)) setBackgroundWithADDrawable:self->mBackground_];
  }
  else {
    JreStrongAssign(&self->mBackgroundView_, self->mContentView_);
  }
  JreStrongAssign(&self->mDecorView_, ADPopupWindow_createDecorViewWithADView_(self, self->mBackgroundView_));
  [((ADView *) nil_chk(self->mBackgroundView_)) setElevationWithFloat:self->mElevation_];
  self->mPopupViewInitialLayoutDirectionInherited_ = ([((ADView *) nil_chk(self->mContentView_)) getRawLayoutDirection] == ADView_LAYOUT_DIRECTION_INHERIT);
}

void ADPopupWindow_invokePopupWithADRelativeLayout_LayoutParams_(ADPopupWindow *self, ADRelativeLayout_LayoutParams *p) {
  if (self->mContext_ != nil) {
  }
  ADView *decorView = self->mDecorView_;
  ADPopupWindow_setLayoutDirectionFromAnchor(self);
  if (self->mEnterTransition_ != nil) {
  }
}

void ADPopupWindow_setLayoutDirectionFromAnchor(ADPopupWindow *self) {
  if (self->mAnchor_ != nil) {
    ADView *anchor = JreRetainedLocalValue([self->mAnchor_ get]);
    if (anchor != nil && self->mPopupViewInitialLayoutDirectionInherited_) {
      [((ADView *) nil_chk(self->mDecorView_)) setLayoutDirectionWithInt:[anchor getLayoutDirection]];
    }
  }
}

jint ADPopupWindow_computeGravity(ADPopupWindow *self) {
  jint gravity = self->mGravity_ == ADGravity_NO_GRAVITY ? ADGravity_START | ADGravity_TOP : self->mGravity_;
  if (self->mIsDropdown_ && (self->mClipToScreen_ || self->mClippingEnabled_)) {
    gravity |= ADGravity_DISPLAY_CLIP_VERTICAL;
  }
  return gravity;
}

jboolean ADPopupWindow_tryFitVerticalWithADRelativeLayout_LayoutParams_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withBoolean_(ADPopupWindow *self, ADRelativeLayout_LayoutParams *outParams, jint yOffset, jint height, jint anchorHeight, jint drawingLocationY, jint screenLocationY, jint displayFrameTop, jint displayFrameBottom, jboolean allowResize) {
  jint winOffsetY = screenLocationY - drawingLocationY;
  jint anchorTopInScreen = ((ADRelativeLayout_LayoutParams *) nil_chk(outParams))->topMargin_ + winOffsetY;
  jint spaceBelow = displayFrameBottom - anchorTopInScreen;
  if (height < 0) {
    height = 0;
  }
  if (anchorTopInScreen >= displayFrameTop && height <= spaceBelow) {
    return true;
  }
  jint spaceAbove = anchorTopInScreen - anchorHeight - displayFrameTop;
  if (height <= spaceAbove) {
    if (self->mOverlapAnchor_) {
      yOffset += anchorHeight;
    }
    outParams->topMargin_ = drawingLocationY - height + yOffset;
    return true;
  }
  if (ADPopupWindow_positionInDisplayVerticalWithADRelativeLayout_LayoutParams_withInt_withInt_withInt_withInt_withInt_withBoolean_(self, outParams, height, drawingLocationY, screenLocationY, displayFrameTop, displayFrameBottom, allowResize)) {
    return true;
  }
  return false;
}

jboolean ADPopupWindow_positionInDisplayVerticalWithADRelativeLayout_LayoutParams_withInt_withInt_withInt_withInt_withInt_withBoolean_(ADPopupWindow *self, ADRelativeLayout_LayoutParams *outParams, jint height, jint drawingLocationY, jint screenLocationY, jint displayFrameTop, jint displayFrameBottom, jboolean canResize) {
  jboolean fitsInDisplay = true;
  jint winOffsetY = screenLocationY - drawingLocationY;
  ((ADRelativeLayout_LayoutParams *) nil_chk(outParams))->topMargin_ += winOffsetY;
  outParams->height_ = height;
  jint bottom = outParams->topMargin_ + height;
  if (bottom > displayFrameBottom) {
    outParams->topMargin_ -= bottom - displayFrameBottom;
  }
  if (outParams->topMargin_ < displayFrameTop) {
    outParams->topMargin_ = displayFrameTop;
    jint displayFrameHeight = displayFrameBottom - displayFrameTop;
    if (canResize && height > displayFrameHeight) {
      outParams->height_ = displayFrameHeight;
    }
    else {
      fitsInDisplay = false;
    }
  }
  outParams->topMargin_ -= winOffsetY;
  return fitsInDisplay;
}

jboolean ADPopupWindow_tryFitHorizontalWithADRelativeLayout_LayoutParams_withInt_withInt_withInt_withInt_withInt_withInt_withInt_withBoolean_(ADPopupWindow *self, ADRelativeLayout_LayoutParams *outParams, jint xOffset, jint width, jint anchorWidth, jint drawingLocationX, jint screenLocationX, jint displayFrameLeft, jint displayFrameRight, jboolean allowResize) {
  jint winOffsetX = screenLocationX - drawingLocationX;
  jint anchorLeftInScreen = ((ADRelativeLayout_LayoutParams *) nil_chk(outParams))->leftMargin_ + winOffsetX;
  jint spaceRight = displayFrameRight - anchorLeftInScreen;
  if (anchorLeftInScreen >= displayFrameLeft && width <= spaceRight) {
    return true;
  }
  if (ADPopupWindow_positionInDisplayHorizontalWithADRelativeLayout_LayoutParams_withInt_withInt_withInt_withInt_withInt_withBoolean_(self, outParams, width, drawingLocationX, screenLocationX, displayFrameLeft, displayFrameRight, allowResize)) {
    return true;
  }
  return false;
}

jboolean ADPopupWindow_positionInDisplayHorizontalWithADRelativeLayout_LayoutParams_withInt_withInt_withInt_withInt_withInt_withBoolean_(ADPopupWindow *self, ADRelativeLayout_LayoutParams *outParams, jint width, jint drawingLocationX, jint screenLocationX, jint displayFrameLeft, jint displayFrameRight, jboolean canResize) {
  jboolean fitsInDisplay = true;
  jint winOffsetX = screenLocationX - drawingLocationX;
  ((ADRelativeLayout_LayoutParams *) nil_chk(outParams))->leftMargin_ += winOffsetX;
  jint right = outParams->leftMargin_ + width;
  if (right > displayFrameRight) {
    outParams->leftMargin_ -= right - displayFrameRight;
  }
  if (outParams->leftMargin_ < displayFrameLeft) {
    outParams->leftMargin_ = displayFrameLeft;
    jint displayFrameWidth = displayFrameRight - displayFrameLeft;
    if (canResize && width > displayFrameWidth) {
      outParams->width_ = displayFrameWidth;
    }
    else {
      fitsInDisplay = false;
    }
  }
  outParams->leftMargin_ -= winOffsetX;
  return fitsInDisplay;
}

void ADPopupWindow_dismissImmediateWithADView_withADViewGroup_withADView_(ADPopupWindow *self, ADView *decorView, ADViewGroup *contentHolder, ADView *contentView) {
  if ([((ADView *) nil_chk(decorView)) getParent] != nil) {
    [decorView removeFromParent];
  }
  if (contentHolder != nil) {
    [contentHolder removeViewWithADView:contentView];
  }
  JreStrongAssign(&self->mDecorView_, nil);
  JreStrongAssign(&self->mBackgroundView_, nil);
  self->mIsTransitioningToDismiss_ = false;
}

void ADPopupWindow_updateWithADView_withBoolean_withInt_withInt_withInt_withInt_(ADPopupWindow *self, ADView *anchor, jboolean updateLocation, jint xoff, jint yoff, jint width, jint height) {
  if (![self isShowing] || ![self hasContentView]) {
    return;
  }
  JavaLangRefWeakReference *oldAnchor = self->mAnchor_;
  jint gravity = self->mAnchoredGravity_;
  jboolean needsUpdate = updateLocation && (self->mAnchorXoff_ != xoff || self->mAnchorYoff_ != yoff);
  if (oldAnchor == nil || [oldAnchor get] != anchor || (needsUpdate && !self->mIsDropdown_)) {
    [self attachToAnchorWithADView:anchor withInt:xoff withInt:yoff withInt:gravity];
  }
  else if (needsUpdate) {
    self->mAnchorXoff_ = xoff;
    self->mAnchorYoff_ = yoff;
  }
  ADRelativeLayout_LayoutParams *p = [self getDecorViewLayoutParams];
  jint oldWidth = ((ADRelativeLayout_LayoutParams *) nil_chk(p))->width_;
  jint oldHeight = p->height_;
  jint oldX = p->leftMargin_;
  jint oldY = p->topMargin_;
  if (width < 0) {
    width = self->mWidth_;
  }
  if (height < 0) {
    height = self->mHeight_;
  }
  jboolean aboveAnchor = [self findDropDownPositionWithADView:anchor withADRelativeLayout_LayoutParams:p withInt:self->mAnchorXoff_ withInt:self->mAnchorYoff_ withInt:width withInt:height withInt:gravity withBoolean:self->mAllowScrollingAnchorParent_];
  ADPopupWindow_updateAboveAnchorWithBoolean_(self, aboveAnchor);
  jboolean paramsChanged = true;
  jint newWidth = width < 0 ? width : p->width_;
  jint newHeight = height < 0 ? height : p->height_;
  [self updateWithInt:p->leftMargin_ withInt:p->topMargin_ withInt:newWidth withInt:newHeight withBoolean:paramsChanged];
}

void ADPopupWindow_alignToAnchor(ADPopupWindow *self) {
  ADView *anchor = self->mAnchor_ != nil ? [self->mAnchor_ get] : nil;
  if (anchor != nil && [anchor isAttachedToWindow] && [self hasDecorView]) {
    ADRelativeLayout_LayoutParams *p = [self getDecorViewLayoutParams];
    ADPopupWindow_updateAboveAnchorWithBoolean_(self, [self findDropDownPositionWithADView:anchor withADRelativeLayout_LayoutParams:p withInt:self->mAnchorXoff_ withInt:self->mAnchorYoff_ withInt:((ADRelativeLayout_LayoutParams *) nil_chk(p))->width_ withInt:p->height_ withInt:self->mAnchoredGravity_ withBoolean:false]);
    [self updateWithInt:p->leftMargin_ withInt:p->topMargin_ withInt:-1 withInt:-1 withBoolean:true];
  }
}

ADRelativeLayout_LayoutParams *ADPopupWindow_createPopupLayoutParamsWithADIBinder_(ADPopupWindow *self, id<ADIBinder> token) {
  return self->mOutParams_;
}

ADView *ADPopupWindow_createDecorViewWithADView_(ADPopupWindow *self, ADView *mBackgroundView) {
  return self->mDecorView_;
}

ADView *ADPopupWindow_createBackgroundViewWithADView_(ADPopupWindow *self, ADView *mContentView) {
  return self->mBackgroundView_;
}

jboolean ADPopupWindow_isTransitioningToDismiss(ADPopupWindow *self) {
  return false;
}

void ADPopupWindow_safeAlignToAnchor(ADPopupWindow *self) {
  if (!self->aligningAnchor_) {
    self->aligningAnchor_ = true;
    ADPopupWindow_alignToAnchor(self);
    self->aligningAnchor_ = false;
  }
}

void ADPopupWindow_init(ADPopupWindow *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->mTmpDrawingLocation_, [IOSIntArray newArrayWithLength:2]);
  JreStrongAssignAndConsume(&self->mTmpScreenLocation_, [IOSIntArray newArrayWithLength:2]);
  JreStrongAssignAndConsume(&self->mTmpAppLocation_, [IOSIntArray newArrayWithLength:2]);
  JreStrongAssignAndConsume(&self->mTempRect_, new_ADRect_init());
  self->mInputMethodMode_ = ADPopupWindow_INPUT_METHOD_FROM_FOCUSABLE;
  self->mTouchable_ = true;
  self->mOutsideTouchable_ = false;
  self->mClippingEnabled_ = true;
  self->mSplitTouchEnabled_ = -1;
  self->mAllowScrollingAnchorParent_ = true;
  self->mLayoutInsetDecor_ = false;
  self->mAttachedInDecor_ = true;
  self->mAttachedInDecorSet_ = false;
  self->mWidth_ = ADViewGroup_LayoutParams_WRAP_CONTENT;
  self->mHeight_ = ADViewGroup_LayoutParams_WRAP_CONTENT;
  self->mIgnoreCheekPress_ = false;
  self->mAnimationStyle_ = ADPopupWindow_ANIMATION_STYLE_DEFAULT;
  self->mGravity_ = ADGravity_NO_GRAVITY;
  JreStrongAssignAndConsume(&self->mOnAnchorDetachedListener_, new_ADPopupWindow_1_initWithADPopupWindow_(self));
  JreStrongAssignAndConsume(&self->mOnAnchorRootDetachedListener_, new_ADPopupWindow_2_initWithADPopupWindow_(self));
  JreStrongAssignAndConsume(&self->mOnScrollChangedListener_, new_ADPopupWindow_$Lambda$1_initWithADPopupWindow_(self));
  JreStrongAssignAndConsume(&self->mOnLayoutChangeListener_, new_ADPopupWindow_$Lambda$2_initWithADPopupWindow_(self));
}

ADPopupWindow *new_ADPopupWindow_init() {
  J2OBJC_NEW_IMPL(ADPopupWindow, init)
}

ADPopupWindow *create_ADPopupWindow_init() {
  J2OBJC_CREATE_IMPL(ADPopupWindow, init)
}

ADView *ADPopupWindow_getAppRootViewWithADView_(ADPopupWindow *self, ADView *anchor) {
  return [((ADView *) nil_chk(anchor)) getRootView];
}

jint ADPopupWindow_computeAnimationResource(ADPopupWindow *self) {
  return 0;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADPopupWindow)

@implementation ADPopupWindow_1

- (instancetype)initWithADPopupWindow:(ADPopupWindow *)outer$ {
  ADPopupWindow_1_initWithADPopupWindow_(self, outer$);
  return self;
}

- (void)onViewAttachedToWindowWithADView:(ADView *)v {
  ADPopupWindow_safeAlignToAnchor(this$0_);
}

- (void)onViewDetachedFromWindowWithADView:(ADView *)v {
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithADPopupWindow:);
  methods[1].selector = @selector(onViewAttachedToWindowWithADView:);
  methods[2].selector = @selector(onViewDetachedFromWindowWithADView:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LADPopupWindow;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LADPopupWindow;", "onViewAttachedToWindow", "LADView;", "onViewDetachedFromWindow" };
  static const J2ObjcClassInfo _ADPopupWindow_1 = { "", "r.android.widget", ptrTable, methods, fields, 7, 0x8010, 3, 1, 0, -1, -1, -1, -1 };
  return &_ADPopupWindow_1;
}

@end

void ADPopupWindow_1_initWithADPopupWindow_(ADPopupWindow_1 *self, ADPopupWindow *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

ADPopupWindow_1 *new_ADPopupWindow_1_initWithADPopupWindow_(ADPopupWindow *outer$) {
  J2OBJC_NEW_IMPL(ADPopupWindow_1, initWithADPopupWindow_, outer$)
}

ADPopupWindow_1 *create_ADPopupWindow_1_initWithADPopupWindow_(ADPopupWindow *outer$) {
  J2OBJC_CREATE_IMPL(ADPopupWindow_1, initWithADPopupWindow_, outer$)
}

@implementation ADPopupWindow_2

- (instancetype)initWithADPopupWindow:(ADPopupWindow *)outer$ {
  ADPopupWindow_2_initWithADPopupWindow_(self, outer$);
  return self;
}

- (void)onViewAttachedToWindowWithADView:(ADView *)v {
}

- (void)onViewDetachedFromWindowWithADView:(ADView *)v {
  this$0_->mIsAnchorRootAttached_ = false;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithADPopupWindow:);
  methods[1].selector = @selector(onViewAttachedToWindowWithADView:);
  methods[2].selector = @selector(onViewDetachedFromWindowWithADView:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LADPopupWindow;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LADPopupWindow;", "onViewAttachedToWindow", "LADView;", "onViewDetachedFromWindow" };
  static const J2ObjcClassInfo _ADPopupWindow_2 = { "", "r.android.widget", ptrTable, methods, fields, 7, 0x8010, 3, 1, 0, -1, -1, -1, -1 };
  return &_ADPopupWindow_2;
}

@end

void ADPopupWindow_2_initWithADPopupWindow_(ADPopupWindow_2 *self, ADPopupWindow *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

ADPopupWindow_2 *new_ADPopupWindow_2_initWithADPopupWindow_(ADPopupWindow *outer$) {
  J2OBJC_NEW_IMPL(ADPopupWindow_2, initWithADPopupWindow_, outer$)
}

ADPopupWindow_2 *create_ADPopupWindow_2_initWithADPopupWindow_(ADPopupWindow *outer$) {
  J2OBJC_CREATE_IMPL(ADPopupWindow_2, initWithADPopupWindow_, outer$)
}

@implementation ADPopupWindow_OnDismissListener

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x401, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(onDismiss);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LADPopupWindow;" };
  static const J2ObjcClassInfo _ADPopupWindow_OnDismissListener = { "OnDismissListener", "r.android.widget", ptrTable, methods, NULL, 7, 0x609, 1, 0, 0, -1, -1, -1, -1 };
  return &_ADPopupWindow_OnDismissListener;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(ADPopupWindow_OnDismissListener)

@implementation ADPopupWindow_TransitionManager

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADPopupWindow_TransitionManager_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (void)endTransitionsWithADView:(ADView *)mDecorView {
  ADPopupWindow_TransitionManager_endTransitionsWithADView_(mDecorView);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(endTransitionsWithADView:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "endTransitions", "LADView;", "LADPopupWindow;" };
  static const J2ObjcClassInfo _ADPopupWindow_TransitionManager = { "TransitionManager", "r.android.widget", ptrTable, methods, NULL, 7, 0x8, 2, 0, 2, -1, -1, -1, -1 };
  return &_ADPopupWindow_TransitionManager;
}

@end

void ADPopupWindow_TransitionManager_init(ADPopupWindow_TransitionManager *self) {
  NSObject_init(self);
}

ADPopupWindow_TransitionManager *new_ADPopupWindow_TransitionManager_init() {
  J2OBJC_NEW_IMPL(ADPopupWindow_TransitionManager, init)
}

ADPopupWindow_TransitionManager *create_ADPopupWindow_TransitionManager_init() {
  J2OBJC_CREATE_IMPL(ADPopupWindow_TransitionManager, init)
}

void ADPopupWindow_TransitionManager_endTransitionsWithADView_(ADView *mDecorView) {
  ADPopupWindow_TransitionManager_initialize();
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADPopupWindow_TransitionManager)

@implementation ADPopupWindow_Transition

- (instancetype)initWithADPopupWindow:(ADPopupWindow *)outer$ {
  ADPopupWindow_Transition_initWithADPopupWindow_(self, outer$);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithADPopupWindow:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LADPopupWindow;" };
  static const J2ObjcClassInfo _ADPopupWindow_Transition = { "Transition", "r.android.widget", ptrTable, methods, NULL, 7, 0x0, 1, 0, 0, -1, -1, -1, -1 };
  return &_ADPopupWindow_Transition;
}

@end

void ADPopupWindow_Transition_initWithADPopupWindow_(ADPopupWindow_Transition *self, ADPopupWindow *outer$) {
  NSObject_init(self);
}

ADPopupWindow_Transition *new_ADPopupWindow_Transition_initWithADPopupWindow_(ADPopupWindow *outer$) {
  J2OBJC_NEW_IMPL(ADPopupWindow_Transition, initWithADPopupWindow_, outer$)
}

ADPopupWindow_Transition *create_ADPopupWindow_Transition_initWithADPopupWindow_(ADPopupWindow *outer$) {
  J2OBJC_CREATE_IMPL(ADPopupWindow_Transition, initWithADPopupWindow_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADPopupWindow_Transition)

@implementation ADPopupWindow_$Lambda$1

- (void)onScrollChanged {
  ADPopupWindow_safeAlignToAnchor(target$_);
}

- (void)dealloc {
  RELEASE_(target$_);
  [super dealloc];
}

@end

void ADPopupWindow_$Lambda$1_initWithADPopupWindow_(ADPopupWindow_$Lambda$1 *self, ADPopupWindow *outer$) {
  JreStrongAssign(&self->target$_, outer$);
  NSObject_init(self);
}

ADPopupWindow_$Lambda$1 *new_ADPopupWindow_$Lambda$1_initWithADPopupWindow_(ADPopupWindow *outer$) {
  J2OBJC_NEW_IMPL(ADPopupWindow_$Lambda$1, initWithADPopupWindow_, outer$)
}

ADPopupWindow_$Lambda$1 *create_ADPopupWindow_$Lambda$1_initWithADPopupWindow_(ADPopupWindow *outer$) {
  J2OBJC_CREATE_IMPL(ADPopupWindow_$Lambda$1, initWithADPopupWindow_, outer$)
}

@implementation ADPopupWindow_$Lambda$2

- (void)onLayoutChangeWithADView:(ADView *)v
                         withInt:(jint)left
                         withInt:(jint)top
                         withInt:(jint)right
                         withInt:(jint)bottom
                         withInt:(jint)oldLeft
                         withInt:(jint)oldTop
                         withInt:(jint)oldRight
                         withInt:(jint)oldBottom {
  ADPopupWindow_safeAlignToAnchor(this$0_);
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

@end

void ADPopupWindow_$Lambda$2_initWithADPopupWindow_(ADPopupWindow_$Lambda$2 *self, ADPopupWindow *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

ADPopupWindow_$Lambda$2 *new_ADPopupWindow_$Lambda$2_initWithADPopupWindow_(ADPopupWindow *outer$) {
  J2OBJC_NEW_IMPL(ADPopupWindow_$Lambda$2, initWithADPopupWindow_, outer$)
}

ADPopupWindow_$Lambda$2 *create_ADPopupWindow_$Lambda$2_initWithADPopupWindow_(ADPopupWindow *outer$) {
  J2OBJC_CREATE_IMPL(ADPopupWindow_$Lambda$2, initWithADPopupWindow_, outer$)
}
