//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroid\src\main\java\r\android\animation\AnimationHandler.java
//

#include "AnimationHandler.h"
#include "Animator.h"
#include "ArrayMap.h"
#include "Choreographer.h"
#include "J2ObjC_source.h"
#include "ObjectAnimator.h"
#include "SystemClock.h"
#include "SystemProperties.h"
#include "java/lang/Long.h"
#include "java/lang/Runnable.h"
#include "java/lang/ThreadLocal.h"
#include "java/lang/ref/WeakReference.h"
#include "java/util/ArrayList.h"

@class JavaUtilArrayList;
@protocol JavaLangRunnable;


#pragma clang diagnostic ignored "-Wprotocol"

@interface ADAnimationHandler () {
 @public
  /*!
   @brief Internal per-thread collections used to avoid set collisions as animations start and end
  while being processed.
   */
  ADArrayMap *mDelayedCallbackStartTime_;
  JavaUtilArrayList *mAnimationCallbacks_;
  JavaUtilArrayList *mCommitCallbacks_;
  id<ADAnimationHandler_AnimationFrameCallbackProvider> mProvider_;
  /*!
   @brief This paused list is used to store animators forcibly paused when the activity
  went into the background (to avoid unnecessary background processing work).
   These animators should be resume()'d when the activity returns to the foreground.
   */
  JavaUtilArrayList *mPausedAnimators_;
  /*!
   @brief This structure is used to store the currently active objects (ViewRootImpls or
  WallpaperService.Engines) in the process.Each of these objects sends a request to
  AnimationHandler when it goes into the background (request to pause) or foreground
  (request to resume).
   Because all animators are managed by AnimationHandler on the same
  thread, it should only ever pause animators when *all* requestors are in the background.
  This list tracks the background/foreground state of all requestors and only ever
  pauses animators when all items are in the background (false). To simplify, we only ever
  store visible (foreground) requestors; if the set size reaches zero, there are no
  objects in the foreground and it is time to pause animators.
   */
  JavaUtilArrayList *mAnimatorRequestors_;
  id<ADChoreographer_FrameCallback> mFrameCallback_;
  jboolean mListDirty_;
  id<ADChoreographer_FrameCallback> mPauser_;
}

/*!
 @brief System property that controls the behavior of pausing infinite animators when an app
  is moved to the background.
 @return the value of 'framework.pause_bg_animations.enabled' system property
 */
+ (jboolean)isPauseBgAnimationsEnabledInSystemProperties;

- (void)requestAnimatorsEnabledImplWithBoolean:(jboolean)enable
                                        withId:(id)requestor;

- (void)resumeAnimators;

- (id<ADAnimationHandler_AnimationFrameCallbackProvider>)getProvider;

- (void)doAnimationFrameWithLong:(jlong)frameTime;

- (void)commitAnimationFrameWithADAnimationHandler_AnimationFrameCallback:(id<ADAnimationHandler_AnimationFrameCallback>)callback
                                                                 withLong:(jlong)frameTime;

/*!
 @brief Remove the callbacks from mDelayedCallbackStartTime once they have passed the initial delay
  so that they can start getting frame callbacks.
 @return true if they have passed the initial delay or have no delay, false otherwise.
 */
- (jboolean)isCallbackDueWithADAnimationHandler_AnimationFrameCallback:(id<ADAnimationHandler_AnimationFrameCallback>)callback
                                                              withLong:(jlong)currentTime;

- (void)cleanUpList;

- (jint)getCallbackSize;

@end

J2OBJC_FIELD_SETTER(ADAnimationHandler, mDelayedCallbackStartTime_, ADArrayMap *)
J2OBJC_FIELD_SETTER(ADAnimationHandler, mAnimationCallbacks_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(ADAnimationHandler, mCommitCallbacks_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(ADAnimationHandler, mProvider_, id<ADAnimationHandler_AnimationFrameCallbackProvider>)
J2OBJC_FIELD_SETTER(ADAnimationHandler, mPausedAnimators_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(ADAnimationHandler, mAnimatorRequestors_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(ADAnimationHandler, mFrameCallback_, id<ADChoreographer_FrameCallback>)
J2OBJC_FIELD_SETTER(ADAnimationHandler, mPauser_, id<ADChoreographer_FrameCallback>)

inline NSString *ADAnimationHandler_get_TAG(void);
static NSString *ADAnimationHandler_TAG = @"AnimationHandler";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADAnimationHandler, TAG, NSString *)

inline jboolean ADAnimationHandler_get_LOCAL_LOGV(void);
#define ADAnimationHandler_LOCAL_LOGV false
J2OBJC_STATIC_FIELD_CONSTANT(ADAnimationHandler, LOCAL_LOGV, jboolean)

inline jboolean ADAnimationHandler_get_sAnimatorPausingEnabled(void);
inline jboolean ADAnimationHandler_set_sAnimatorPausingEnabled(jboolean value);
inline jboolean *ADAnimationHandler_getRef_sAnimatorPausingEnabled(void);
static jboolean ADAnimationHandler_sAnimatorPausingEnabled;
J2OBJC_STATIC_FIELD_PRIMITIVE(ADAnimationHandler, sAnimatorPausingEnabled, jboolean)

inline jboolean ADAnimationHandler_get_sOverrideAnimatorPausingSystemProperty(void);
inline jboolean ADAnimationHandler_set_sOverrideAnimatorPausingSystemProperty(jboolean value);
inline jboolean *ADAnimationHandler_getRef_sOverrideAnimatorPausingSystemProperty(void);
static jboolean ADAnimationHandler_sOverrideAnimatorPausingSystemProperty = false;
J2OBJC_STATIC_FIELD_PRIMITIVE(ADAnimationHandler, sOverrideAnimatorPausingSystemProperty, jboolean)

inline ADAnimationHandler *ADAnimationHandler_get_sTestHandler(void);
inline ADAnimationHandler *ADAnimationHandler_set_sTestHandler(ADAnimationHandler *value);
static ADAnimationHandler *ADAnimationHandler_sTestHandler;
J2OBJC_STATIC_FIELD_OBJ(ADAnimationHandler, sTestHandler, ADAnimationHandler *)

__attribute__((unused)) static jboolean ADAnimationHandler_isPauseBgAnimationsEnabledInSystemProperties(void);

__attribute__((unused)) static void ADAnimationHandler_requestAnimatorsEnabledImplWithBoolean_withId_(ADAnimationHandler *self, jboolean enable, id requestor);

__attribute__((unused)) static void ADAnimationHandler_resumeAnimators(ADAnimationHandler *self);

__attribute__((unused)) static id<ADAnimationHandler_AnimationFrameCallbackProvider> ADAnimationHandler_getProvider(ADAnimationHandler *self);

__attribute__((unused)) static void ADAnimationHandler_doAnimationFrameWithLong_(ADAnimationHandler *self, jlong frameTime);

__attribute__((unused)) static void ADAnimationHandler_commitAnimationFrameWithADAnimationHandler_AnimationFrameCallback_withLong_(ADAnimationHandler *self, id<ADAnimationHandler_AnimationFrameCallback> callback, jlong frameTime);

__attribute__((unused)) static jboolean ADAnimationHandler_isCallbackDueWithADAnimationHandler_AnimationFrameCallback_withLong_(ADAnimationHandler *self, id<ADAnimationHandler_AnimationFrameCallback> callback, jlong currentTime);

__attribute__((unused)) static void ADAnimationHandler_cleanUpList(ADAnimationHandler *self);

__attribute__((unused)) static jint ADAnimationHandler_getCallbackSize(ADAnimationHandler *self);

@interface ADAnimationHandler_1 : NSObject < ADChoreographer_FrameCallback > {
 @public
  ADAnimationHandler *this$0_;
}

- (instancetype)initWithADAnimationHandler:(ADAnimationHandler *)outer$;

- (void)doFrameWithLong:(jlong)frameTimeNanos;

@end

J2OBJC_EMPTY_STATIC_INIT(ADAnimationHandler_1)

__attribute__((unused)) static void ADAnimationHandler_1_initWithADAnimationHandler_(ADAnimationHandler_1 *self, ADAnimationHandler *outer$);

__attribute__((unused)) static ADAnimationHandler_1 *new_ADAnimationHandler_1_initWithADAnimationHandler_(ADAnimationHandler *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static ADAnimationHandler_1 *create_ADAnimationHandler_1_initWithADAnimationHandler_(ADAnimationHandler *outer$);

@interface ADAnimationHandler_2 : NSObject < JavaLangRunnable > {
 @public
  ADAnimationHandler *this$0_;
  id<ADAnimationHandler_AnimationFrameCallback> val$callback_;
}

- (instancetype)initWithADAnimationHandler:(ADAnimationHandler *)outer$
withADAnimationHandler_AnimationFrameCallback:(id<ADAnimationHandler_AnimationFrameCallback>)capture$0;

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(ADAnimationHandler_2)

__attribute__((unused)) static void ADAnimationHandler_2_initWithADAnimationHandler_withADAnimationHandler_AnimationFrameCallback_(ADAnimationHandler_2 *self, ADAnimationHandler *outer$, id<ADAnimationHandler_AnimationFrameCallback> capture$0);

__attribute__((unused)) static ADAnimationHandler_2 *new_ADAnimationHandler_2_initWithADAnimationHandler_withADAnimationHandler_AnimationFrameCallback_(ADAnimationHandler *outer$, id<ADAnimationHandler_AnimationFrameCallback> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static ADAnimationHandler_2 *create_ADAnimationHandler_2_initWithADAnimationHandler_withADAnimationHandler_AnimationFrameCallback_(ADAnimationHandler *outer$, id<ADAnimationHandler_AnimationFrameCallback> capture$0);

@interface ADAnimationHandler_AnimationFrameCallbackProvider : NSObject

@end

/*!
 @brief Default provider of timing pulse that uses Choreographer for frame callbacks.
 */
@interface ADAnimationHandler_MyFrameCallbackProvider : NSObject < ADAnimationHandler_AnimationFrameCallbackProvider > {
 @public
  ADChoreographer *mChoreographer_;
}

- (instancetype)initWithADAnimationHandler:(ADAnimationHandler *)outer$;

- (void)postFrameCallbackWithADChoreographer_FrameCallback:(id<ADChoreographer_FrameCallback>)callback;

- (void)postCommitCallbackWithJavaLangRunnable:(id<JavaLangRunnable>)runnable;

- (jlong)getFrameTime;

- (jlong)getFrameDelay;

- (void)setFrameDelayWithLong:(jlong)delay;

@end

J2OBJC_EMPTY_STATIC_INIT(ADAnimationHandler_MyFrameCallbackProvider)

J2OBJC_FIELD_SETTER(ADAnimationHandler_MyFrameCallbackProvider, mChoreographer_, ADChoreographer *)

__attribute__((unused)) static void ADAnimationHandler_MyFrameCallbackProvider_initWithADAnimationHandler_(ADAnimationHandler_MyFrameCallbackProvider *self, ADAnimationHandler *outer$);

__attribute__((unused)) static ADAnimationHandler_MyFrameCallbackProvider *new_ADAnimationHandler_MyFrameCallbackProvider_initWithADAnimationHandler_(ADAnimationHandler *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static ADAnimationHandler_MyFrameCallbackProvider *create_ADAnimationHandler_MyFrameCallbackProvider_initWithADAnimationHandler_(ADAnimationHandler *outer$);

J2OBJC_TYPE_LITERAL_HEADER(ADAnimationHandler_MyFrameCallbackProvider)

@interface ADAnimationHandler_AnimationFrameCallback : NSObject

@end

@interface ADAnimationHandler_$Lambda$1 : NSObject < ADChoreographer_FrameCallback > {
 @public
  ADAnimationHandler *this$0_;
}

- (void)doFrameWithLong:(jlong)frameTimeNanos;

@end

J2OBJC_EMPTY_STATIC_INIT(ADAnimationHandler_$Lambda$1)

__attribute__((unused)) static void ADAnimationHandler_$Lambda$1_initWithADAnimationHandler_(ADAnimationHandler_$Lambda$1 *self, ADAnimationHandler *outer$);

__attribute__((unused)) static ADAnimationHandler_$Lambda$1 *new_ADAnimationHandler_$Lambda$1_initWithADAnimationHandler_(ADAnimationHandler *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static ADAnimationHandler_$Lambda$1 *create_ADAnimationHandler_$Lambda$1_initWithADAnimationHandler_(ADAnimationHandler *outer$);

J2OBJC_INITIALIZED_DEFN(ADAnimationHandler)

JavaLangThreadLocal *ADAnimationHandler_sAnimatorHandler;

@implementation ADAnimationHandler

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADAnimationHandler_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (ADAnimationHandler *)getInstance {
  return ADAnimationHandler_getInstance();
}

+ (ADAnimationHandler *)setTestHandlerWithADAnimationHandler:(ADAnimationHandler *)handler {
  return ADAnimationHandler_setTestHandlerWithADAnimationHandler_(handler);
}

+ (jboolean)isPauseBgAnimationsEnabledInSystemProperties {
  return ADAnimationHandler_isPauseBgAnimationsEnabledInSystemProperties();
}

+ (void)setAnimatorPausingEnabledWithBoolean:(jboolean)enable {
  ADAnimationHandler_setAnimatorPausingEnabledWithBoolean_(enable);
}

+ (void)setOverrideAnimatorPausingSystemPropertyWithBoolean:(jboolean)enable {
  ADAnimationHandler_setOverrideAnimatorPausingSystemPropertyWithBoolean_(enable);
}

+ (void)removeRequestorWithId:(id)requestor {
  ADAnimationHandler_removeRequestorWithId_(requestor);
}

+ (void)requestAnimatorsEnabledWithBoolean:(jboolean)enable
                                    withId:(id)requestor {
  ADAnimationHandler_requestAnimatorsEnabledWithBoolean_withId_(enable, requestor);
}

- (void)requestAnimatorsEnabledImplWithBoolean:(jboolean)enable
                                        withId:(id)requestor {
  ADAnimationHandler_requestAnimatorsEnabledImplWithBoolean_withId_(self, enable, requestor);
}

- (void)resumeAnimators {
  ADAnimationHandler_resumeAnimators(self);
}

- (void)setProviderWithADAnimationHandler_AnimationFrameCallbackProvider:(id<ADAnimationHandler_AnimationFrameCallbackProvider>)provider {
  if (provider == nil) {
    JreStrongAssignAndConsume(&mProvider_, new_ADAnimationHandler_MyFrameCallbackProvider_initWithADAnimationHandler_(self));
  }
  else {
    JreStrongAssign(&mProvider_, provider);
  }
}

- (id<ADAnimationHandler_AnimationFrameCallbackProvider>)getProvider {
  return ADAnimationHandler_getProvider(self);
}

- (void)addAnimationFrameCallbackWithADAnimationHandler_AnimationFrameCallback:(id<ADAnimationHandler_AnimationFrameCallback>)callback
                                                                      withLong:(jlong)delay {
  if ([((JavaUtilArrayList *) nil_chk(mAnimationCallbacks_)) size] == 0) {
    [((id<ADAnimationHandler_AnimationFrameCallbackProvider>) nil_chk(ADAnimationHandler_getProvider(self))) postFrameCallbackWithADChoreographer_FrameCallback:mFrameCallback_];
  }
  if (![mAnimationCallbacks_ containsWithId:callback]) {
    [mAnimationCallbacks_ addWithId:callback];
  }
  if (delay > 0) {
    [((ADArrayMap *) nil_chk(mDelayedCallbackStartTime_)) putWithId:callback withId:JavaLangLong_valueOfWithLong_((ADSystemClock_uptimeMillis() + delay))];
  }
}

- (void)addOneShotCommitCallbackWithADAnimationHandler_AnimationFrameCallback:(id<ADAnimationHandler_AnimationFrameCallback>)callback {
  if (![((JavaUtilArrayList *) nil_chk(mCommitCallbacks_)) containsWithId:callback]) {
    [mCommitCallbacks_ addWithId:callback];
  }
}

- (void)removeCallbackWithADAnimationHandler_AnimationFrameCallback:(id<ADAnimationHandler_AnimationFrameCallback>)callback {
  [((JavaUtilArrayList *) nil_chk(mCommitCallbacks_)) removeWithId:callback];
  [((ADArrayMap *) nil_chk(mDelayedCallbackStartTime_)) removeWithId:callback];
  jint id_ = [((JavaUtilArrayList *) nil_chk(mAnimationCallbacks_)) indexOfWithId:callback];
  if (id_ >= 0) {
    [mAnimationCallbacks_ setWithInt:id_ withId:nil];
    mListDirty_ = true;
  }
}

- (void)doAnimationFrameWithLong:(jlong)frameTime {
  ADAnimationHandler_doAnimationFrameWithLong_(self, frameTime);
}

- (void)commitAnimationFrameWithADAnimationHandler_AnimationFrameCallback:(id<ADAnimationHandler_AnimationFrameCallback>)callback
                                                                 withLong:(jlong)frameTime {
  ADAnimationHandler_commitAnimationFrameWithADAnimationHandler_AnimationFrameCallback_withLong_(self, callback, frameTime);
}

- (jboolean)isCallbackDueWithADAnimationHandler_AnimationFrameCallback:(id<ADAnimationHandler_AnimationFrameCallback>)callback
                                                              withLong:(jlong)currentTime {
  return ADAnimationHandler_isCallbackDueWithADAnimationHandler_AnimationFrameCallback_withLong_(self, callback, currentTime);
}

+ (jint)getAnimationCount {
  return ADAnimationHandler_getAnimationCount();
}

+ (void)setFrameDelayWithLong:(jlong)delay {
  ADAnimationHandler_setFrameDelayWithLong_(delay);
}

+ (jlong)getFrameDelay {
  return ADAnimationHandler_getFrameDelay();
}

- (void)autoCancelBasedOnWithADObjectAnimator:(ADObjectAnimator *)objectAnimator {
  for (jint i = [((JavaUtilArrayList *) nil_chk(mAnimationCallbacks_)) size] - 1; i >= 0; i--) {
    id<ADAnimationHandler_AnimationFrameCallback> cb = JreRetainedLocalValue([mAnimationCallbacks_ getWithInt:i]);
    if (cb == nil) {
      continue;
    }
    if ([((ADObjectAnimator *) nil_chk(objectAnimator)) shouldAutoCancelWithADAnimationHandler_AnimationFrameCallback:cb]) {
      [((ADAnimator *) nil_chk(((ADAnimator *) cast_chk([mAnimationCallbacks_ getWithInt:i], [ADAnimator class])))) cancel];
    }
  }
}

- (void)cleanUpList {
  ADAnimationHandler_cleanUpList(self);
}

- (jint)getCallbackSize {
  return ADAnimationHandler_getCallbackSize(self);
}

- (void)dealloc {
  RELEASE_(mDelayedCallbackStartTime_);
  RELEASE_(mAnimationCallbacks_);
  RELEASE_(mCommitCallbacks_);
  RELEASE_(mProvider_);
  RELEASE_(mPausedAnimators_);
  RELEASE_(mAnimatorRequestors_);
  RELEASE_(mFrameCallback_);
  RELEASE_(mPauser_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADAnimationHandler;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADAnimationHandler;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 4, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 9, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "LADAnimationHandler_AnimationFrameCallbackProvider;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 17, 18, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 19, 13, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 20, 13, -1, -1, -1, -1 },
    { NULL, "I", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 21, 18, -1, -1, -1, -1 },
    { NULL, "J", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 22, 23, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getInstance);
  methods[2].selector = @selector(setTestHandlerWithADAnimationHandler:);
  methods[3].selector = @selector(isPauseBgAnimationsEnabledInSystemProperties);
  methods[4].selector = @selector(setAnimatorPausingEnabledWithBoolean:);
  methods[5].selector = @selector(setOverrideAnimatorPausingSystemPropertyWithBoolean:);
  methods[6].selector = @selector(removeRequestorWithId:);
  methods[7].selector = @selector(requestAnimatorsEnabledWithBoolean:withId:);
  methods[8].selector = @selector(requestAnimatorsEnabledImplWithBoolean:withId:);
  methods[9].selector = @selector(resumeAnimators);
  methods[10].selector = @selector(setProviderWithADAnimationHandler_AnimationFrameCallbackProvider:);
  methods[11].selector = @selector(getProvider);
  methods[12].selector = @selector(addAnimationFrameCallbackWithADAnimationHandler_AnimationFrameCallback:withLong:);
  methods[13].selector = @selector(addOneShotCommitCallbackWithADAnimationHandler_AnimationFrameCallback:);
  methods[14].selector = @selector(removeCallbackWithADAnimationHandler_AnimationFrameCallback:);
  methods[15].selector = @selector(doAnimationFrameWithLong:);
  methods[16].selector = @selector(commitAnimationFrameWithADAnimationHandler_AnimationFrameCallback:withLong:);
  methods[17].selector = @selector(isCallbackDueWithADAnimationHandler_AnimationFrameCallback:withLong:);
  methods[18].selector = @selector(getAnimationCount);
  methods[19].selector = @selector(setFrameDelayWithLong:);
  methods[20].selector = @selector(getFrameDelay);
  methods[21].selector = @selector(autoCancelBasedOnWithADObjectAnimator:);
  methods[22].selector = @selector(cleanUpList);
  methods[23].selector = @selector(getCallbackSize);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "TAG", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 24, -1, -1 },
    { "LOCAL_LOGV", "Z", .constantValue.asBOOL = ADAnimationHandler_LOCAL_LOGV, 0x1a, -1, -1, -1, -1 },
    { "mDelayedCallbackStartTime_", "LADArrayMap;", .constantValue.asLong = 0, 0x12, -1, -1, 25, -1 },
    { "mAnimationCallbacks_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x12, -1, -1, 26, -1 },
    { "mCommitCallbacks_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x12, -1, -1, 26, -1 },
    { "mProvider_", "LADAnimationHandler_AnimationFrameCallbackProvider;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "sAnimatorPausingEnabled", "Z", .constantValue.asLong = 0, 0xa, -1, 27, -1, -1 },
    { "sOverrideAnimatorPausingSystemProperty", "Z", .constantValue.asLong = 0, 0xa, -1, 28, -1, -1 },
    { "mPausedAnimators_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x12, -1, -1, 29, -1 },
    { "mAnimatorRequestors_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x12, -1, -1, 30, -1 },
    { "mFrameCallback_", "LADChoreographer_FrameCallback;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "sAnimatorHandler", "LJavaLangThreadLocal;", .constantValue.asLong = 0, 0x19, -1, 31, 32, -1 },
    { "sTestHandler", "LADAnimationHandler;", .constantValue.asLong = 0, 0xa, -1, 33, -1, -1 },
    { "mListDirty_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mPauser_", "LADChoreographer_FrameCallback;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setTestHandler", "LADAnimationHandler;", "setAnimatorPausingEnabled", "Z", "setOverrideAnimatorPausingSystemProperty", "removeRequestor", "LNSObject;", "requestAnimatorsEnabled", "ZLNSObject;", "requestAnimatorsEnabledImpl", "setProvider", "LADAnimationHandler_AnimationFrameCallbackProvider;", "addAnimationFrameCallback", "LADAnimationHandler_AnimationFrameCallback;J", "addOneShotCommitCallback", "LADAnimationHandler_AnimationFrameCallback;", "removeCallback", "doAnimationFrame", "J", "commitAnimationFrame", "isCallbackDue", "setFrameDelay", "autoCancelBasedOn", "LADObjectAnimator;", &ADAnimationHandler_TAG, "Lr/android/util/ArrayMap<Lr/android/animation/AnimationHandler$AnimationFrameCallback;Ljava/lang/Long;>;", "Ljava/util/ArrayList<Lr/android/animation/AnimationHandler$AnimationFrameCallback;>;", &ADAnimationHandler_sAnimatorPausingEnabled, &ADAnimationHandler_sOverrideAnimatorPausingSystemProperty, "Ljava/util/ArrayList<Lr/android/animation/Animator;>;", "Ljava/util/ArrayList<Ljava/lang/ref/WeakReference<Ljava/lang/Object;>;>;", &ADAnimationHandler_sAnimatorHandler, "Ljava/lang/ThreadLocal<Lr/android/animation/AnimationHandler;>;", &ADAnimationHandler_sTestHandler, "LADAnimationHandler_MyFrameCallbackProvider;LADAnimationHandler_AnimationFrameCallback;LADAnimationHandler_AnimationFrameCallbackProvider;" };
  static const J2ObjcClassInfo _ADAnimationHandler = { "AnimationHandler", "r.android.animation", ptrTable, methods, fields, 7, 0x1, 24, 15, -1, 34, -1, -1, -1 };
  return &_ADAnimationHandler;
}

+ (void)initialize {
  if (self == [ADAnimationHandler class]) {
    ADAnimationHandler_sAnimatorPausingEnabled = ADAnimationHandler_isPauseBgAnimationsEnabledInSystemProperties();
    JreStrongAssignAndConsume(&ADAnimationHandler_sAnimatorHandler, new_JavaLangThreadLocal_init());
    J2OBJC_SET_INITIALIZED(ADAnimationHandler)
  }
}

@end

void ADAnimationHandler_init(ADAnimationHandler *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->mDelayedCallbackStartTime_, new_ADArrayMap_init());
  JreStrongAssignAndConsume(&self->mAnimationCallbacks_, new_JavaUtilArrayList_init());
  JreStrongAssignAndConsume(&self->mCommitCallbacks_, new_JavaUtilArrayList_init());
  JreStrongAssignAndConsume(&self->mPausedAnimators_, new_JavaUtilArrayList_init());
  JreStrongAssignAndConsume(&self->mAnimatorRequestors_, new_JavaUtilArrayList_init());
  JreStrongAssignAndConsume(&self->mFrameCallback_, new_ADAnimationHandler_1_initWithADAnimationHandler_(self));
  self->mListDirty_ = false;
  JreStrongAssignAndConsume(&self->mPauser_, new_ADAnimationHandler_$Lambda$1_initWithADAnimationHandler_(self));
}

ADAnimationHandler *new_ADAnimationHandler_init() {
  J2OBJC_NEW_IMPL(ADAnimationHandler, init)
}

ADAnimationHandler *create_ADAnimationHandler_init() {
  J2OBJC_CREATE_IMPL(ADAnimationHandler, init)
}

ADAnimationHandler *ADAnimationHandler_getInstance() {
  ADAnimationHandler_initialize();
  if (ADAnimationHandler_sTestHandler != nil) {
    return ADAnimationHandler_sTestHandler;
  }
  if ([((JavaLangThreadLocal *) nil_chk(ADAnimationHandler_sAnimatorHandler)) get] == nil) {
    [ADAnimationHandler_sAnimatorHandler setWithId:create_ADAnimationHandler_init()];
  }
  return [ADAnimationHandler_sAnimatorHandler get];
}

ADAnimationHandler *ADAnimationHandler_setTestHandlerWithADAnimationHandler_(ADAnimationHandler *handler) {
  ADAnimationHandler_initialize();
  ADAnimationHandler *oldHandler = JreRetainedLocalValue(ADAnimationHandler_sTestHandler);
  JreStrongAssign(&ADAnimationHandler_sTestHandler, handler);
  return oldHandler;
}

jboolean ADAnimationHandler_isPauseBgAnimationsEnabledInSystemProperties() {
  ADAnimationHandler_initialize();
  if (ADAnimationHandler_sOverrideAnimatorPausingSystemProperty) return ADAnimationHandler_sAnimatorPausingEnabled;
  return ADSystemProperties_getBooleanWithNSString_withBoolean_(@"framework.pause_bg_animations.enabled", true);
}

void ADAnimationHandler_setAnimatorPausingEnabledWithBoolean_(jboolean enable) {
  ADAnimationHandler_initialize();
  ADAnimationHandler_sAnimatorPausingEnabled = enable;
}

void ADAnimationHandler_setOverrideAnimatorPausingSystemPropertyWithBoolean_(jboolean enable) {
  ADAnimationHandler_initialize();
  ADAnimationHandler_sOverrideAnimatorPausingSystemProperty = enable;
}

void ADAnimationHandler_removeRequestorWithId_(id requestor) {
  ADAnimationHandler_initialize();
  ADAnimationHandler_requestAnimatorsEnabledImplWithBoolean_withId_(nil_chk(ADAnimationHandler_getInstance()), false, requestor);
}

void ADAnimationHandler_requestAnimatorsEnabledWithBoolean_withId_(jboolean enable, id requestor) {
  ADAnimationHandler_initialize();
  ADAnimationHandler_requestAnimatorsEnabledImplWithBoolean_withId_(nil_chk(ADAnimationHandler_getInstance()), enable, requestor);
}

void ADAnimationHandler_requestAnimatorsEnabledImplWithBoolean_withId_(ADAnimationHandler *self, jboolean enable, id requestor) {
  jboolean wasEmpty = [((JavaUtilArrayList *) nil_chk(self->mAnimatorRequestors_)) isEmpty];
  ADAnimationHandler_setAnimatorPausingEnabledWithBoolean_(ADAnimationHandler_isPauseBgAnimationsEnabledInSystemProperties());
  @synchronized(self->mAnimatorRequestors_) {
    if (enable) {
      JavaLangRefWeakReference *weakRef = nil;
      for (jint i = [self->mAnimatorRequestors_ size] - 1; i >= 0; --i) {
        JavaLangRefWeakReference *ref = JreRetainedLocalValue([self->mAnimatorRequestors_ getWithInt:i]);
        id referent = JreRetainedLocalValue([((JavaLangRefWeakReference *) nil_chk(ref)) get]);
        if (referent == requestor) {
          weakRef = ref;
        }
        else if (referent == nil) {
          [self->mAnimatorRequestors_ removeWithInt:i];
        }
      }
      if (weakRef == nil) {
        weakRef = create_JavaLangRefWeakReference_initWithId_(requestor);
        [self->mAnimatorRequestors_ addWithId:weakRef];
      }
    }
    else {
      for (jint i = [self->mAnimatorRequestors_ size] - 1; i >= 0; --i) {
        JavaLangRefWeakReference *ref = JreRetainedLocalValue([self->mAnimatorRequestors_ getWithInt:i]);
        id referent = JreRetainedLocalValue([((JavaLangRefWeakReference *) nil_chk(ref)) get]);
        if (referent == requestor || referent == nil) {
          [self->mAnimatorRequestors_ removeWithInt:i];
        }
      }
    }
  }
  if (!ADAnimationHandler_sAnimatorPausingEnabled) {
    ADAnimationHandler_resumeAnimators(self);
    return;
  }
  jboolean isEmpty = [self->mAnimatorRequestors_ isEmpty];
  if (wasEmpty != isEmpty) {
    if (!isEmpty) {
      ADAnimationHandler_resumeAnimators(self);
    }
    else {
      [((ADChoreographer *) nil_chk(ADChoreographer_getInstance())) postFrameCallbackDelayedWithADChoreographer_FrameCallback:self->mPauser_ withLong:ADAnimator_getBackgroundPauseDelay()];
    }
  }
}

void ADAnimationHandler_resumeAnimators(ADAnimationHandler *self) {
  [((ADChoreographer *) nil_chk(ADChoreographer_getInstance())) removeFrameCallbackWithADChoreographer_FrameCallback:self->mPauser_];
  for (jint i = [((JavaUtilArrayList *) nil_chk(self->mPausedAnimators_)) size] - 1; i >= 0; --i) {
    [((ADAnimator *) nil_chk([self->mPausedAnimators_ getWithInt:i])) resume];
  }
  [self->mPausedAnimators_ clear];
}

id<ADAnimationHandler_AnimationFrameCallbackProvider> ADAnimationHandler_getProvider(ADAnimationHandler *self) {
  if (self->mProvider_ == nil) {
    JreStrongAssignAndConsume(&self->mProvider_, new_ADAnimationHandler_MyFrameCallbackProvider_initWithADAnimationHandler_(self));
  }
  return self->mProvider_;
}

void ADAnimationHandler_doAnimationFrameWithLong_(ADAnimationHandler *self, jlong frameTime) {
  jlong currentTime = ADSystemClock_uptimeMillis();
  jint size = [((JavaUtilArrayList *) nil_chk(self->mAnimationCallbacks_)) size];
  for (jint i = 0; i < size; i++) {
    id<ADAnimationHandler_AnimationFrameCallback> callback = [self->mAnimationCallbacks_ getWithInt:i];
    if (callback == nil) {
      continue;
    }
    if (ADAnimationHandler_isCallbackDueWithADAnimationHandler_AnimationFrameCallback_withLong_(self, callback, currentTime)) {
      [callback doAnimationFrameWithLong:frameTime];
      if ([((JavaUtilArrayList *) nil_chk(self->mCommitCallbacks_)) containsWithId:callback]) {
        [((id<ADAnimationHandler_AnimationFrameCallbackProvider>) nil_chk(ADAnimationHandler_getProvider(self))) postCommitCallbackWithJavaLangRunnable:create_ADAnimationHandler_2_initWithADAnimationHandler_withADAnimationHandler_AnimationFrameCallback_(self, callback)];
      }
    }
  }
  ADAnimationHandler_cleanUpList(self);
}

void ADAnimationHandler_commitAnimationFrameWithADAnimationHandler_AnimationFrameCallback_withLong_(ADAnimationHandler *self, id<ADAnimationHandler_AnimationFrameCallback> callback, jlong frameTime) {
  if (![((ADArrayMap *) nil_chk(self->mDelayedCallbackStartTime_)) containsKeyWithId:callback] && [((JavaUtilArrayList *) nil_chk(self->mCommitCallbacks_)) containsWithId:callback]) {
    [((id<ADAnimationHandler_AnimationFrameCallback>) nil_chk(callback)) commitAnimationFrameWithLong:frameTime];
    [((JavaUtilArrayList *) nil_chk(self->mCommitCallbacks_)) removeWithId:callback];
  }
}

jboolean ADAnimationHandler_isCallbackDueWithADAnimationHandler_AnimationFrameCallback_withLong_(ADAnimationHandler *self, id<ADAnimationHandler_AnimationFrameCallback> callback, jlong currentTime) {
  JavaLangLong *startTime = JreRetainedLocalValue([((ADArrayMap *) nil_chk(self->mDelayedCallbackStartTime_)) getWithId:callback]);
  if (startTime == nil) {
    return true;
  }
  if ([startTime longLongValue] < currentTime) {
    [self->mDelayedCallbackStartTime_ removeWithId:callback];
    return true;
  }
  return false;
}

jint ADAnimationHandler_getAnimationCount() {
  ADAnimationHandler_initialize();
  ADAnimationHandler *handler = JreRetainedLocalValue(ADAnimationHandler_sTestHandler);
  if (handler == nil) {
    handler = [((JavaLangThreadLocal *) nil_chk(ADAnimationHandler_sAnimatorHandler)) get];
  }
  if (handler == nil) {
    return 0;
  }
  return ADAnimationHandler_getCallbackSize(handler);
}

void ADAnimationHandler_setFrameDelayWithLong_(jlong delay) {
  ADAnimationHandler_initialize();
  [((id<ADAnimationHandler_AnimationFrameCallbackProvider>) nil_chk(ADAnimationHandler_getProvider(nil_chk(ADAnimationHandler_getInstance())))) setFrameDelayWithLong:delay];
}

jlong ADAnimationHandler_getFrameDelay() {
  ADAnimationHandler_initialize();
  return [((id<ADAnimationHandler_AnimationFrameCallbackProvider>) nil_chk(ADAnimationHandler_getProvider(nil_chk(ADAnimationHandler_getInstance())))) getFrameDelay];
}

void ADAnimationHandler_cleanUpList(ADAnimationHandler *self) {
  if (self->mListDirty_) {
    for (jint i = [((JavaUtilArrayList *) nil_chk(self->mAnimationCallbacks_)) size] - 1; i >= 0; i--) {
      if ([self->mAnimationCallbacks_ getWithInt:i] == nil) {
        [self->mAnimationCallbacks_ removeWithInt:i];
      }
    }
    self->mListDirty_ = false;
  }
}

jint ADAnimationHandler_getCallbackSize(ADAnimationHandler *self) {
  jint count = 0;
  jint size = [((JavaUtilArrayList *) nil_chk(self->mAnimationCallbacks_)) size];
  for (jint i = size - 1; i >= 0; i--) {
    if ([self->mAnimationCallbacks_ getWithInt:i] != nil) {
      count++;
    }
  }
  return count;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADAnimationHandler)

@implementation ADAnimationHandler_1

- (instancetype)initWithADAnimationHandler:(ADAnimationHandler *)outer$ {
  ADAnimationHandler_1_initWithADAnimationHandler_(self, outer$);
  return self;
}

- (void)doFrameWithLong:(jlong)frameTimeNanos {
  ADAnimationHandler_doAnimationFrameWithLong_(this$0_, [((id<ADAnimationHandler_AnimationFrameCallbackProvider>) nil_chk(ADAnimationHandler_getProvider(this$0_))) getFrameTime]);
  if ([((JavaUtilArrayList *) nil_chk(this$0_->mAnimationCallbacks_)) size] > 0) {
    [((id<ADAnimationHandler_AnimationFrameCallbackProvider>) nil_chk(ADAnimationHandler_getProvider(this$0_))) postFrameCallbackWithADChoreographer_FrameCallback:self];
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithADAnimationHandler:);
  methods[1].selector = @selector(doFrameWithLong:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LADAnimationHandler;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LADAnimationHandler;", "doFrame", "J" };
  static const J2ObjcClassInfo _ADAnimationHandler_1 = { "", "r.android.animation", ptrTable, methods, fields, 7, 0x8010, 2, 1, 0, -1, -1, -1, -1 };
  return &_ADAnimationHandler_1;
}

@end

void ADAnimationHandler_1_initWithADAnimationHandler_(ADAnimationHandler_1 *self, ADAnimationHandler *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

ADAnimationHandler_1 *new_ADAnimationHandler_1_initWithADAnimationHandler_(ADAnimationHandler *outer$) {
  J2OBJC_NEW_IMPL(ADAnimationHandler_1, initWithADAnimationHandler_, outer$)
}

ADAnimationHandler_1 *create_ADAnimationHandler_1_initWithADAnimationHandler_(ADAnimationHandler *outer$) {
  J2OBJC_CREATE_IMPL(ADAnimationHandler_1, initWithADAnimationHandler_, outer$)
}

@implementation ADAnimationHandler_2

- (instancetype)initWithADAnimationHandler:(ADAnimationHandler *)outer$
withADAnimationHandler_AnimationFrameCallback:(id<ADAnimationHandler_AnimationFrameCallback>)capture$0 {
  ADAnimationHandler_2_initWithADAnimationHandler_withADAnimationHandler_AnimationFrameCallback_(self, outer$, capture$0);
  return self;
}

- (void)run {
  ADAnimationHandler_commitAnimationFrameWithADAnimationHandler_AnimationFrameCallback_withLong_(this$0_, val$callback_, [((id<ADAnimationHandler_AnimationFrameCallbackProvider>) nil_chk(ADAnimationHandler_getProvider(this$0_))) getFrameTime]);
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$callback_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithADAnimationHandler:withADAnimationHandler_AnimationFrameCallback:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LADAnimationHandler;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$callback_", "LADAnimationHandler_AnimationFrameCallback;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LADAnimationHandler;LADAnimationHandler_AnimationFrameCallback;", "LADAnimationHandler;", "doAnimationFrameWithLong:" };
  static const J2ObjcClassInfo _ADAnimationHandler_2 = { "", "r.android.animation", ptrTable, methods, fields, 7, 0x8010, 2, 2, 1, -1, 2, -1, -1 };
  return &_ADAnimationHandler_2;
}

@end

void ADAnimationHandler_2_initWithADAnimationHandler_withADAnimationHandler_AnimationFrameCallback_(ADAnimationHandler_2 *self, ADAnimationHandler *outer$, id<ADAnimationHandler_AnimationFrameCallback> capture$0) {
  JreStrongAssign(&self->this$0_, outer$);
  JreStrongAssign(&self->val$callback_, capture$0);
  NSObject_init(self);
}

ADAnimationHandler_2 *new_ADAnimationHandler_2_initWithADAnimationHandler_withADAnimationHandler_AnimationFrameCallback_(ADAnimationHandler *outer$, id<ADAnimationHandler_AnimationFrameCallback> capture$0) {
  J2OBJC_NEW_IMPL(ADAnimationHandler_2, initWithADAnimationHandler_withADAnimationHandler_AnimationFrameCallback_, outer$, capture$0)
}

ADAnimationHandler_2 *create_ADAnimationHandler_2_initWithADAnimationHandler_withADAnimationHandler_AnimationFrameCallback_(ADAnimationHandler *outer$, id<ADAnimationHandler_AnimationFrameCallback> capture$0) {
  J2OBJC_CREATE_IMPL(ADAnimationHandler_2, initWithADAnimationHandler_withADAnimationHandler_AnimationFrameCallback_, outer$, capture$0)
}

@implementation ADAnimationHandler_AnimationFrameCallbackProvider

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x401, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 2, 3, -1, -1, -1, -1 },
    { NULL, "J", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 4, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(postFrameCallbackWithADChoreographer_FrameCallback:);
  methods[1].selector = @selector(postCommitCallbackWithJavaLangRunnable:);
  methods[2].selector = @selector(getFrameTime);
  methods[3].selector = @selector(getFrameDelay);
  methods[4].selector = @selector(setFrameDelayWithLong:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "postFrameCallback", "LADChoreographer_FrameCallback;", "postCommitCallback", "LJavaLangRunnable;", "setFrameDelay", "J", "LADAnimationHandler;" };
  static const J2ObjcClassInfo _ADAnimationHandler_AnimationFrameCallbackProvider = { "AnimationFrameCallbackProvider", "r.android.animation", ptrTable, methods, NULL, 7, 0x609, 5, 0, 6, -1, -1, -1, -1 };
  return &_ADAnimationHandler_AnimationFrameCallbackProvider;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(ADAnimationHandler_AnimationFrameCallbackProvider)

@implementation ADAnimationHandler_MyFrameCallbackProvider

- (instancetype)initWithADAnimationHandler:(ADAnimationHandler *)outer$ {
  ADAnimationHandler_MyFrameCallbackProvider_initWithADAnimationHandler_(self, outer$);
  return self;
}

- (void)postFrameCallbackWithADChoreographer_FrameCallback:(id<ADChoreographer_FrameCallback>)callback {
  [((ADChoreographer *) nil_chk(mChoreographer_)) postFrameCallbackWithADChoreographer_FrameCallback:callback];
}

- (void)postCommitCallbackWithJavaLangRunnable:(id<JavaLangRunnable>)runnable {
  [((ADChoreographer *) nil_chk(mChoreographer_)) postCallbackWithInt:ADChoreographer_CALLBACK_COMMIT withJavaLangRunnable:runnable withId:nil];
}

- (jlong)getFrameTime {
  return [((ADChoreographer *) nil_chk(mChoreographer_)) getFrameTime];
}

- (jlong)getFrameDelay {
  return ADChoreographer_getFrameDelay();
}

- (void)setFrameDelayWithLong:(jlong)delay {
  ADChoreographer_setFrameDelayWithLong_(delay);
}

- (void)dealloc {
  RELEASE_(mChoreographer_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithADAnimationHandler:);
  methods[1].selector = @selector(postFrameCallbackWithADChoreographer_FrameCallback:);
  methods[2].selector = @selector(postCommitCallbackWithJavaLangRunnable:);
  methods[3].selector = @selector(getFrameTime);
  methods[4].selector = @selector(getFrameDelay);
  methods[5].selector = @selector(setFrameDelayWithLong:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mChoreographer_", "LADChoreographer;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LADAnimationHandler;", "postFrameCallback", "LADChoreographer_FrameCallback;", "postCommitCallback", "LJavaLangRunnable;", "setFrameDelay", "J" };
  static const J2ObjcClassInfo _ADAnimationHandler_MyFrameCallbackProvider = { "MyFrameCallbackProvider", "r.android.animation", ptrTable, methods, fields, 7, 0x2, 6, 1, 0, -1, -1, -1, -1 };
  return &_ADAnimationHandler_MyFrameCallbackProvider;
}

@end

void ADAnimationHandler_MyFrameCallbackProvider_initWithADAnimationHandler_(ADAnimationHandler_MyFrameCallbackProvider *self, ADAnimationHandler *outer$) {
  NSObject_init(self);
  JreStrongAssign(&self->mChoreographer_, ADChoreographer_getInstance());
}

ADAnimationHandler_MyFrameCallbackProvider *new_ADAnimationHandler_MyFrameCallbackProvider_initWithADAnimationHandler_(ADAnimationHandler *outer$) {
  J2OBJC_NEW_IMPL(ADAnimationHandler_MyFrameCallbackProvider, initWithADAnimationHandler_, outer$)
}

ADAnimationHandler_MyFrameCallbackProvider *create_ADAnimationHandler_MyFrameCallbackProvider_initWithADAnimationHandler_(ADAnimationHandler *outer$) {
  J2OBJC_CREATE_IMPL(ADAnimationHandler_MyFrameCallbackProvider, initWithADAnimationHandler_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADAnimationHandler_MyFrameCallbackProvider)

@implementation ADAnimationHandler_AnimationFrameCallback

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "Z", 0x401, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 2, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(doAnimationFrameWithLong:);
  methods[1].selector = @selector(commitAnimationFrameWithLong:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "doAnimationFrame", "J", "commitAnimationFrame", "LADAnimationHandler;" };
  static const J2ObjcClassInfo _ADAnimationHandler_AnimationFrameCallback = { "AnimationFrameCallback", "r.android.animation", ptrTable, methods, NULL, 7, 0x609, 2, 0, 3, -1, -1, -1, -1 };
  return &_ADAnimationHandler_AnimationFrameCallback;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(ADAnimationHandler_AnimationFrameCallback)

@implementation ADAnimationHandler_$Lambda$1

- (void)doFrameWithLong:(jlong)frameTimeNanos {
  if ([((JavaUtilArrayList *) nil_chk(this$0_->mAnimatorRequestors_)) size] > 0) {
    return;
  }
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(this$0_->mAnimationCallbacks_)) size]; ++i) {
    id<ADAnimationHandler_AnimationFrameCallback> callback = JreRetainedLocalValue([this$0_->mAnimationCallbacks_ getWithInt:i]);
    if ([callback isKindOfClass:[ADAnimator class]]) {
      ADAnimator *animator = ((ADAnimator *) callback);
      if ([((ADAnimator *) nil_chk(animator)) getTotalDuration] == ADAnimator_DURATION_INFINITE && ![animator isPaused]) {
        [((JavaUtilArrayList *) nil_chk(this$0_->mPausedAnimators_)) addWithId:animator];
        [animator pause];
      }
    }
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

@end

void ADAnimationHandler_$Lambda$1_initWithADAnimationHandler_(ADAnimationHandler_$Lambda$1 *self, ADAnimationHandler *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

ADAnimationHandler_$Lambda$1 *new_ADAnimationHandler_$Lambda$1_initWithADAnimationHandler_(ADAnimationHandler *outer$) {
  J2OBJC_NEW_IMPL(ADAnimationHandler_$Lambda$1, initWithADAnimationHandler_, outer$)
}

ADAnimationHandler_$Lambda$1 *create_ADAnimationHandler_$Lambda$1_initWithADAnimationHandler_(ADAnimationHandler *outer$) {
  J2OBJC_CREATE_IMPL(ADAnimationHandler_$Lambda$1, initWithADAnimationHandler_, outer$)
}
