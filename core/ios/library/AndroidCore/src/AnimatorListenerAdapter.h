//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroid\src\main\java\r\android\animation\AnimatorListenerAdapter.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_AnimatorListenerAdapter")
#ifdef RESTRICT_AnimatorListenerAdapter
#define INCLUDE_ALL_AnimatorListenerAdapter 0
#else
#define INCLUDE_ALL_AnimatorListenerAdapter 1
#endif
#undef RESTRICT_AnimatorListenerAdapter

#if !defined (ADAnimatorListenerAdapter_) && (INCLUDE_ALL_AnimatorListenerAdapter || defined(INCLUDE_ADAnimatorListenerAdapter))
#define ADAnimatorListenerAdapter_

#define RESTRICT_Animator 1
#define INCLUDE_ADAnimator_AnimatorListener 1
#include "Animator.h"

#define RESTRICT_Animator 1
#define INCLUDE_ADAnimator_AnimatorPauseListener 1
#include "Animator.h"

@class ADAnimator;

/*!
 @brief This adapter class provides empty implementations of the methods from <code>r.android.animation.Animator.AnimatorListener</code>.
 Any custom listener that cares only about a subset of the methods of this listener can
  simply subclass this adapter class instead of implementing the interface directly.
 */
@interface ADAnimatorListenerAdapter : NSObject < ADAnimator_AnimatorListener, ADAnimator_AnimatorPauseListener >

#pragma mark Public

- (instancetype)init;

/*!
 */
- (void)onAnimationCancelWithADAnimator:(ADAnimator *)animation;

/*!
 */
- (void)onAnimationEndWithADAnimator:(ADAnimator *)animation;

/*!
 */
- (void)onAnimationPauseWithADAnimator:(ADAnimator *)animation;

/*!
 */
- (void)onAnimationRepeatWithADAnimator:(ADAnimator *)animation;

/*!
 */
- (void)onAnimationResumeWithADAnimator:(ADAnimator *)animation;

/*!
 */
- (void)onAnimationStartWithADAnimator:(ADAnimator *)animation;

@end

J2OBJC_EMPTY_STATIC_INIT(ADAnimatorListenerAdapter)

FOUNDATION_EXPORT void ADAnimatorListenerAdapter_init(ADAnimatorListenerAdapter *self);

J2OBJC_TYPE_LITERAL_HEADER(ADAnimatorListenerAdapter)

@compatibility_alias RAndroidAnimationAnimatorListenerAdapter ADAnimatorListenerAdapter;

#endif

#pragma pop_macro("INCLUDE_ALL_AnimatorListenerAdapter")
