//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroid\src\main\java\r\android\animation\LayoutTransition.java
//

#define J2OBJC_IMPORTED_BY_JAVA_IMPLEMENTATION 1




#include "AccelerateDecelerateInterpolator.h"
#include "Animator.h"
#include "AnimatorListenerAdapter.h"
#include "DecelerateInterpolator.h"
#include "IKeyframes.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "Keyframe.h"
#include "KeyframeSet.h"
#include "LayoutTransition.h"
#include "ObjectAnimator.h"
#include "PropertyValuesHolder.h"
#include "TimeInterpolator.h"
#include "ValueAnimator.h"
#include "View.h"
#include "ViewGroup.h"
#include "ViewParent.h"
#include "ViewTreeObserver.h"
#include "java/lang/Boolean.h"
#include "java/lang/Float.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/HashMap.h"
#include "java/util/LinkedHashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"




#pragma clang diagnostic error "-Wreturn-type"
#pragma clang diagnostic ignored "-Wswitch"


@interface ADLayoutTransition () {
 @public
  /*!
   @brief These variables hold the animations that are currently used to run the transition effects.
   These animations are set to defaults, but can be changed to custom animations by
  calls to setAnimator().
   */
  ADAnimator *mDisappearingAnim_;
  ADAnimator *mAppearingAnim_;
  ADAnimator *mChangingAppearingAnim_;
  ADAnimator *mChangingDisappearingAnim_;
  ADAnimator *mChangingAnim_;
  /*!
   @brief The durations of the different animations
   */
  int64_t mChangingAppearingDuration_;
  int64_t mChangingDisappearingDuration_;
  int64_t mChangingDuration_;
  int64_t mAppearingDuration_;
  int64_t mDisappearingDuration_;
  /*!
   @brief The start delays of the different animations.Note that the default behavior of
  the appearing item is the default duration, since it should wait for the items to move
  before fading it.
   Same for the changing animation when disappearing; it waits for the item
  to fade out before moving the other items.
   */
  int64_t mAppearingDelay_;
  int64_t mDisappearingDelay_;
  int64_t mChangingAppearingDelay_;
  int64_t mChangingDisappearingDelay_;
  int64_t mChangingDelay_;
  /*!
   @brief The inter-animation delays used on the changing animations
   */
  int64_t mChangingAppearingStagger_;
  int64_t mChangingDisappearingStagger_;
  int64_t mChangingStagger_;
  /*!
   @brief The default interpolators used for the animations
   */
  id<ADTimeInterpolator> mAppearingInterpolator_;
  id<ADTimeInterpolator> mDisappearingInterpolator_;
  id<ADTimeInterpolator> mChangingAppearingInterpolator_;
  id<ADTimeInterpolator> mChangingDisappearingInterpolator_;
  id<ADTimeInterpolator> mChangingInterpolator_;
  /*!
   @brief These hashmaps are used to store the animations that are currently running as part of
  the transition.The reason for this is that a further layout event should cause
  existing animations to stop where they are prior to starting new animations.
   So
  we cache all of the current animations in this map for possible cancellation on
  another layout event. LinkedHashMaps are used to preserve the order in which animations
  are inserted, so that we process events (such as setting up start values) in the same order.
   */
  JavaUtilHashMap *pendingAnimations_;
  JavaUtilLinkedHashMap *currentAppearingAnimations_;
  JavaUtilLinkedHashMap *currentDisappearingAnimations_;
  /*!
   @brief This hashmap is used to track the listeners that have been added to the children of
  a container.When a layout change occurs, an animation is created for each View, so that
  the pre-layout values can be cached in that animation.
   Then a listener is added to the
  view to see whether the layout changes the bounds of that view. If so, the animation
  is set with the final values and then run. If not, the animation is not started. When
  the process of setting up and running all appropriate animations is done, we need to
  remove these listeners and clear out the map.
   */
  JavaUtilHashMap *layoutChangeListenerMap_;
  /*!
   @brief Used to track the current delay being assigned to successive animations as they are
  started.This value is incremented for each new animation, then zeroed before the next
  transition begins.
   */
  int64_t staggerDelay_;
  /*!
   @brief These are the types of transition animations that the LayoutTransition is reacting
  to.By default, appearing/disappearing and the change animations related to them are
  enabled (not CHANGING).
   */
  int32_t mTransitionTypes_;
  /*!
   @brief The set of listeners that should be notified when APPEARING/DISAPPEARING transitions
  start and end.
   */
  JavaUtilArrayList *mListeners_;
  /*!
   @brief Controls whether changing animations automatically animate the parent hierarchy as well.
   This behavior prevents artifacts when wrap_content layouts snap to the end state as the
  transition begins, causing visual glitches and clipping.
  Default value is true.
   */
  bool mAnimateParentHierarchy_;
}

/*!
 @brief This function sets up animations on all of the views that change during layout.
 For every child in the parent, we create a change animation of the appropriate
  type (appearing, disappearing, or changing) and ask it to populate its start values from its
  target view. We add layout listeners to all child views and listen for changes. For
  those views that change, we populate the end values for those animations and start them.
  Animations are not run on unchanging views.
 @param parent The container which is undergoing a change.
 @param newView The view being added to or removed from the parent. May be null if the  changeReason is CHANGING.
 @param changeReason A value of APPEARING, DISAPPEARING, or CHANGING, indicating whether the  transition is occurring because an item is being added to or removed from the parent, or
   if it is running in response to a layout operation (that is, if the value is CHANGING).
 */
- (void)runChangeTransitionWithADViewGroup:(ADViewGroup *)parent
                                withADView:(ADView *)newView
                                   withInt:(int32_t)changeReason;

/*!
 @brief Utility function called by runChangingTransition for both the children and the parent
  hierarchy.
 */
- (void)setupChangeAnimationWithADViewGroup:(ADViewGroup *)parent
                                    withInt:(int32_t)changeReason
                             withADAnimator:(ADAnimator *)baseAnimator
                                   withLong:(int64_t)duration
                                 withADView:(ADView *)child;

/*!
 @brief This method runs the animation that makes an added item appear.
 @param parent The ViewGroup to which the View is being added.
 @param child The View being added to the ViewGroup.
 */
- (void)runAppearingTransitionWithADViewGroup:(ADViewGroup *)parent
                                   withADView:(ADView *)child;

/*!
 @brief This method runs the animation that makes a removed item disappear.
 @param parent The ViewGroup from which the View is being removed.
 @param child The View being removed from the ViewGroup.
 */
- (void)runDisappearingTransitionWithADViewGroup:(ADViewGroup *)parent
                                      withADView:(ADView *)child;

/*!
 @brief This method is called by ViewGroup when a child view is about to be added to the
  container.This callback starts the process of a transition; we grab the starting
  values, listen for changes to all of the children of the container, and start appropriate
  animations.
 @param parent The ViewGroup to which the View is being added.
 @param child The View being added to the ViewGroup.
 @param changesLayout Whether the removal will cause changes in the layout of other views  in the container. INVISIBLE views becoming VISIBLE will not cause changes and thus will not
   affect CHANGE_APPEARING or CHANGE_DISAPPEARING animations.
 */
- (void)addChildWithADViewGroup:(ADViewGroup *)parent
                     withADView:(ADView *)child
                    withBoolean:(bool)changesLayout;

- (bool)hasListeners;

/*!
 @brief This method is called by ViewGroup when a child view is about to be removed from the
  container.This callback starts the process of a transition; we grab the starting
  values, listen for changes to all of the children of the container, and start appropriate
  animations.
 @param parent The ViewGroup from which the View is being removed.
 @param child The View being removed from the ViewGroup.
 @param changesLayout Whether the removal will cause changes in the layout of other views  in the container. Views becoming INVISIBLE will not cause changes and thus will not
   affect CHANGE_APPEARING or CHANGE_DISAPPEARING animations.
 */
- (void)removeChildWithADViewGroup:(ADViewGroup *)parent
                        withADView:(ADView *)child
                       withBoolean:(bool)changesLayout;

@end

J2OBJC_FIELD_SETTER(ADLayoutTransition, mDisappearingAnim_, ADAnimator *)
J2OBJC_FIELD_SETTER(ADLayoutTransition, mAppearingAnim_, ADAnimator *)
J2OBJC_FIELD_SETTER(ADLayoutTransition, mChangingAppearingAnim_, ADAnimator *)
J2OBJC_FIELD_SETTER(ADLayoutTransition, mChangingDisappearingAnim_, ADAnimator *)
J2OBJC_FIELD_SETTER(ADLayoutTransition, mChangingAnim_, ADAnimator *)
J2OBJC_FIELD_SETTER(ADLayoutTransition, mAppearingInterpolator_, id<ADTimeInterpolator>)
J2OBJC_FIELD_SETTER(ADLayoutTransition, mDisappearingInterpolator_, id<ADTimeInterpolator>)
J2OBJC_FIELD_SETTER(ADLayoutTransition, mChangingAppearingInterpolator_, id<ADTimeInterpolator>)
J2OBJC_FIELD_SETTER(ADLayoutTransition, mChangingDisappearingInterpolator_, id<ADTimeInterpolator>)
J2OBJC_FIELD_SETTER(ADLayoutTransition, mChangingInterpolator_, id<ADTimeInterpolator>)
J2OBJC_FIELD_SETTER(ADLayoutTransition, pendingAnimations_, JavaUtilHashMap *)
J2OBJC_FIELD_SETTER(ADLayoutTransition, currentAppearingAnimations_, JavaUtilLinkedHashMap *)
J2OBJC_FIELD_SETTER(ADLayoutTransition, currentDisappearingAnimations_, JavaUtilLinkedHashMap *)
J2OBJC_FIELD_SETTER(ADLayoutTransition, layoutChangeListenerMap_, JavaUtilHashMap *)
J2OBJC_FIELD_SETTER(ADLayoutTransition, mListeners_, JavaUtilArrayList *)

/*!
 @brief Private bit fields used to set the collection of enabled transition types for
  mTransitionTypes.
 */
inline int32_t ADLayoutTransition_get_FLAG_APPEARING(void);
#define ADLayoutTransition_FLAG_APPEARING 1
J2OBJC_STATIC_FIELD_CONSTANT(ADLayoutTransition, FLAG_APPEARING, int32_t)

inline int32_t ADLayoutTransition_get_FLAG_DISAPPEARING(void);
#define ADLayoutTransition_FLAG_DISAPPEARING 2
J2OBJC_STATIC_FIELD_CONSTANT(ADLayoutTransition, FLAG_DISAPPEARING, int32_t)

inline int32_t ADLayoutTransition_get_FLAG_CHANGE_APPEARING(void);
#define ADLayoutTransition_FLAG_CHANGE_APPEARING 4
J2OBJC_STATIC_FIELD_CONSTANT(ADLayoutTransition, FLAG_CHANGE_APPEARING, int32_t)

inline int32_t ADLayoutTransition_get_FLAG_CHANGE_DISAPPEARING(void);
#define ADLayoutTransition_FLAG_CHANGE_DISAPPEARING 8
J2OBJC_STATIC_FIELD_CONSTANT(ADLayoutTransition, FLAG_CHANGE_DISAPPEARING, int32_t)

inline int32_t ADLayoutTransition_get_FLAG_CHANGING(void);
#define ADLayoutTransition_FLAG_CHANGING 16
J2OBJC_STATIC_FIELD_CONSTANT(ADLayoutTransition, FLAG_CHANGING, int32_t)

/*!
 @brief These are the default animations, defined in the constructor, that will be used
  unless the user specifies custom animations.
 */
inline ADObjectAnimator *ADLayoutTransition_get_defaultChange(void);
inline ADObjectAnimator *ADLayoutTransition_set_defaultChange(ADObjectAnimator *value);
static ADObjectAnimator *ADLayoutTransition_defaultChange;
J2OBJC_STATIC_FIELD_OBJ(ADLayoutTransition, defaultChange, ADObjectAnimator *)

inline ADObjectAnimator *ADLayoutTransition_get_defaultChangeIn(void);
inline ADObjectAnimator *ADLayoutTransition_set_defaultChangeIn(ADObjectAnimator *value);
static ADObjectAnimator *ADLayoutTransition_defaultChangeIn;
J2OBJC_STATIC_FIELD_OBJ(ADLayoutTransition, defaultChangeIn, ADObjectAnimator *)

inline ADObjectAnimator *ADLayoutTransition_get_defaultChangeOut(void);
inline ADObjectAnimator *ADLayoutTransition_set_defaultChangeOut(ADObjectAnimator *value);
static ADObjectAnimator *ADLayoutTransition_defaultChangeOut;
J2OBJC_STATIC_FIELD_OBJ(ADLayoutTransition, defaultChangeOut, ADObjectAnimator *)

inline ADObjectAnimator *ADLayoutTransition_get_defaultFadeIn(void);
inline ADObjectAnimator *ADLayoutTransition_set_defaultFadeIn(ADObjectAnimator *value);
static ADObjectAnimator *ADLayoutTransition_defaultFadeIn;
J2OBJC_STATIC_FIELD_OBJ(ADLayoutTransition, defaultFadeIn, ADObjectAnimator *)

inline ADObjectAnimator *ADLayoutTransition_get_defaultFadeOut(void);
inline ADObjectAnimator *ADLayoutTransition_set_defaultFadeOut(ADObjectAnimator *value);
static ADObjectAnimator *ADLayoutTransition_defaultFadeOut;
J2OBJC_STATIC_FIELD_OBJ(ADLayoutTransition, defaultFadeOut, ADObjectAnimator *)

/*!
 @brief The default duration used by all animations.
 */
inline int64_t ADLayoutTransition_get_DEFAULT_DURATION(void);
inline int64_t ADLayoutTransition_set_DEFAULT_DURATION(int64_t value);
inline int64_t *ADLayoutTransition_getRef_DEFAULT_DURATION(void);
static int64_t ADLayoutTransition_DEFAULT_DURATION = 300;
J2OBJC_STATIC_FIELD_PRIMITIVE(ADLayoutTransition, DEFAULT_DURATION, int64_t)

/*!
 @brief Static interpolators - these are stateless and can be shared across the instances
 */
inline id<ADTimeInterpolator> ADLayoutTransition_get_ACCEL_DECEL_INTERPOLATOR(void);
inline id<ADTimeInterpolator> ADLayoutTransition_set_ACCEL_DECEL_INTERPOLATOR(id<ADTimeInterpolator> value);
static id<ADTimeInterpolator> ADLayoutTransition_ACCEL_DECEL_INTERPOLATOR;
J2OBJC_STATIC_FIELD_OBJ(ADLayoutTransition, ACCEL_DECEL_INTERPOLATOR, id<ADTimeInterpolator>)

inline id<ADTimeInterpolator> ADLayoutTransition_get_DECEL_INTERPOLATOR(void);
inline id<ADTimeInterpolator> ADLayoutTransition_set_DECEL_INTERPOLATOR(id<ADTimeInterpolator> value);
static id<ADTimeInterpolator> ADLayoutTransition_DECEL_INTERPOLATOR;
J2OBJC_STATIC_FIELD_OBJ(ADLayoutTransition, DECEL_INTERPOLATOR, id<ADTimeInterpolator>)

inline id<ADTimeInterpolator> ADLayoutTransition_get_sAppearingInterpolator(void);
inline id<ADTimeInterpolator> ADLayoutTransition_set_sAppearingInterpolator(id<ADTimeInterpolator> value);
static id<ADTimeInterpolator> ADLayoutTransition_sAppearingInterpolator;
J2OBJC_STATIC_FIELD_OBJ(ADLayoutTransition, sAppearingInterpolator, id<ADTimeInterpolator>)

inline id<ADTimeInterpolator> ADLayoutTransition_get_sDisappearingInterpolator(void);
inline id<ADTimeInterpolator> ADLayoutTransition_set_sDisappearingInterpolator(id<ADTimeInterpolator> value);
static id<ADTimeInterpolator> ADLayoutTransition_sDisappearingInterpolator;
J2OBJC_STATIC_FIELD_OBJ(ADLayoutTransition, sDisappearingInterpolator, id<ADTimeInterpolator>)

inline id<ADTimeInterpolator> ADLayoutTransition_get_sChangingAppearingInterpolator(void);
inline id<ADTimeInterpolator> ADLayoutTransition_set_sChangingAppearingInterpolator(id<ADTimeInterpolator> value);
static id<ADTimeInterpolator> ADLayoutTransition_sChangingAppearingInterpolator;
J2OBJC_STATIC_FIELD_OBJ(ADLayoutTransition, sChangingAppearingInterpolator, id<ADTimeInterpolator>)

inline id<ADTimeInterpolator> ADLayoutTransition_get_sChangingDisappearingInterpolator(void);
inline id<ADTimeInterpolator> ADLayoutTransition_set_sChangingDisappearingInterpolator(id<ADTimeInterpolator> value);
static id<ADTimeInterpolator> ADLayoutTransition_sChangingDisappearingInterpolator;
J2OBJC_STATIC_FIELD_OBJ(ADLayoutTransition, sChangingDisappearingInterpolator, id<ADTimeInterpolator>)

inline id<ADTimeInterpolator> ADLayoutTransition_get_sChangingInterpolator(void);
inline id<ADTimeInterpolator> ADLayoutTransition_set_sChangingInterpolator(id<ADTimeInterpolator> value);
static id<ADTimeInterpolator> ADLayoutTransition_sChangingInterpolator;
J2OBJC_STATIC_FIELD_OBJ(ADLayoutTransition, sChangingInterpolator, id<ADTimeInterpolator>)

__attribute__((unused)) static void ADLayoutTransition_runChangeTransitionWithADViewGroup_withADView_withInt_(ADLayoutTransition *self, ADViewGroup *parent, ADView *newView, int32_t changeReason);

__attribute__((unused)) static void ADLayoutTransition_setupChangeAnimationWithADViewGroup_withInt_withADAnimator_withLong_withADView_(ADLayoutTransition *self, ADViewGroup *parent, int32_t changeReason, ADAnimator *baseAnimator, int64_t duration, ADView *child);

__attribute__((unused)) static void ADLayoutTransition_runAppearingTransitionWithADViewGroup_withADView_(ADLayoutTransition *self, ADViewGroup *parent, ADView *child);

__attribute__((unused)) static void ADLayoutTransition_runDisappearingTransitionWithADViewGroup_withADView_(ADLayoutTransition *self, ADViewGroup *parent, ADView *child);

__attribute__((unused)) static void ADLayoutTransition_addChildWithADViewGroup_withADView_withBoolean_(ADLayoutTransition *self, ADViewGroup *parent, ADView *child, bool changesLayout);

__attribute__((unused)) static bool ADLayoutTransition_hasListeners(ADLayoutTransition *self);

__attribute__((unused)) static void ADLayoutTransition_removeChildWithADViewGroup_withADView_withBoolean_(ADLayoutTransition *self, ADViewGroup *parent, ADView *child, bool changesLayout);

@interface ADLayoutTransition_1 : ADAnimatorListenerAdapter {
 @public
  ADLayoutTransition *this$0_;
  ADView *val$child_;
}

- (instancetype)initWithADLayoutTransition:(ADLayoutTransition *)outer$
                                withADView:(ADView *)capture$0;

- (void)onAnimationEndWithADAnimator:(ADAnimator *)animation;

@end

J2OBJC_EMPTY_STATIC_INIT(ADLayoutTransition_1)

__attribute__((unused)) static void ADLayoutTransition_1_initWithADLayoutTransition_withADView_(ADLayoutTransition_1 *self, ADLayoutTransition *outer$, ADView *capture$0);

__attribute__((unused)) static ADLayoutTransition_1 *new_ADLayoutTransition_1_initWithADLayoutTransition_withADView_(ADLayoutTransition *outer$, ADView *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static ADLayoutTransition_1 *create_ADLayoutTransition_1_initWithADLayoutTransition_withADView_(ADLayoutTransition *outer$, ADView *capture$0);


@interface ADLayoutTransition_2 : NSObject < ADView_OnLayoutChangeListener > {
 @public
  ADLayoutTransition *this$0_;
  ADAnimator *val$anim_;
  int32_t val$changeReason_;
  int64_t val$duration_;
  ADView *val$child_;
  ADViewGroup *val$parent_;
}

- (instancetype)initWithADLayoutTransition:(ADLayoutTransition *)outer$
                            withADAnimator:(ADAnimator *)capture$0
                                   withInt:(int32_t)capture$1
                                  withLong:(int64_t)capture$2
                                withADView:(ADView *)capture$3
                           withADViewGroup:(ADViewGroup *)capture$4;

- (void)onLayoutChangeWithADView:(ADView *)v
                         withInt:(int32_t)left
                         withInt:(int32_t)top
                         withInt:(int32_t)right
                         withInt:(int32_t)bottom
                         withInt:(int32_t)oldLeft
                         withInt:(int32_t)oldTop
                         withInt:(int32_t)oldRight
                         withInt:(int32_t)oldBottom;

@end

J2OBJC_EMPTY_STATIC_INIT(ADLayoutTransition_2)

__attribute__((unused)) static void ADLayoutTransition_2_initWithADLayoutTransition_withADAnimator_withInt_withLong_withADView_withADViewGroup_(ADLayoutTransition_2 *self, ADLayoutTransition *outer$, ADAnimator *capture$0, int32_t capture$1, int64_t capture$2, ADView *capture$3, ADViewGroup *capture$4);

__attribute__((unused)) static ADLayoutTransition_2 *new_ADLayoutTransition_2_initWithADLayoutTransition_withADAnimator_withInt_withLong_withADView_withADViewGroup_(ADLayoutTransition *outer$, ADAnimator *capture$0, int32_t capture$1, int64_t capture$2, ADView *capture$3, ADViewGroup *capture$4) NS_RETURNS_RETAINED;

__attribute__((unused)) static ADLayoutTransition_2 *create_ADLayoutTransition_2_initWithADLayoutTransition_withADAnimator_withInt_withLong_withADView_withADViewGroup_(ADLayoutTransition *outer$, ADAnimator *capture$0, int32_t capture$1, int64_t capture$2, ADView *capture$3, ADViewGroup *capture$4);


@interface ADLayoutTransition_3 : ADAnimatorListenerAdapter {
 @public
  ADLayoutTransition *this$0_;
  ADViewGroup *val$parent_;
  ADView *val$child_;
  int32_t val$changeReason_;
  id<ADView_OnLayoutChangeListener> val$listener_;
}

- (instancetype)initWithADLayoutTransition:(ADLayoutTransition *)outer$
                           withADViewGroup:(ADViewGroup *)capture$0
                                withADView:(ADView *)capture$1
                                   withInt:(int32_t)capture$2
         withADView_OnLayoutChangeListener:(id<ADView_OnLayoutChangeListener>)capture$3;

- (void)onAnimationStartWithADAnimator:(ADAnimator *)animator;

- (void)onAnimationCancelWithADAnimator:(ADAnimator *)animator;

- (void)onAnimationEndWithADAnimator:(ADAnimator *)animator;

@end

J2OBJC_EMPTY_STATIC_INIT(ADLayoutTransition_3)

__attribute__((unused)) static void ADLayoutTransition_3_initWithADLayoutTransition_withADViewGroup_withADView_withInt_withADView_OnLayoutChangeListener_(ADLayoutTransition_3 *self, ADLayoutTransition *outer$, ADViewGroup *capture$0, ADView *capture$1, int32_t capture$2, id<ADView_OnLayoutChangeListener> capture$3);

__attribute__((unused)) static ADLayoutTransition_3 *new_ADLayoutTransition_3_initWithADLayoutTransition_withADViewGroup_withADView_withInt_withADView_OnLayoutChangeListener_(ADLayoutTransition *outer$, ADViewGroup *capture$0, ADView *capture$1, int32_t capture$2, id<ADView_OnLayoutChangeListener> capture$3) NS_RETURNS_RETAINED;

__attribute__((unused)) static ADLayoutTransition_3 *create_ADLayoutTransition_3_initWithADLayoutTransition_withADViewGroup_withADView_withInt_withADView_OnLayoutChangeListener_(ADLayoutTransition *outer$, ADViewGroup *capture$0, ADView *capture$1, int32_t capture$2, id<ADView_OnLayoutChangeListener> capture$3);


@interface ADLayoutTransition_4 : ADAnimatorListenerAdapter {
 @public
  ADLayoutTransition *this$0_;
  ADView *val$child_;
  ADViewGroup *val$parent_;
}

- (instancetype)initWithADLayoutTransition:(ADLayoutTransition *)outer$
                                withADView:(ADView *)capture$0
                           withADViewGroup:(ADViewGroup *)capture$1;

- (void)onAnimationEndWithADAnimator:(ADAnimator *)anim;

@end

J2OBJC_EMPTY_STATIC_INIT(ADLayoutTransition_4)

__attribute__((unused)) static void ADLayoutTransition_4_initWithADLayoutTransition_withADView_withADViewGroup_(ADLayoutTransition_4 *self, ADLayoutTransition *outer$, ADView *capture$0, ADViewGroup *capture$1);

__attribute__((unused)) static ADLayoutTransition_4 *new_ADLayoutTransition_4_initWithADLayoutTransition_withADView_withADViewGroup_(ADLayoutTransition *outer$, ADView *capture$0, ADViewGroup *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static ADLayoutTransition_4 *create_ADLayoutTransition_4_initWithADLayoutTransition_withADView_withADViewGroup_(ADLayoutTransition *outer$, ADView *capture$0, ADViewGroup *capture$1);


@interface ADLayoutTransition_5 : ADAnimatorListenerAdapter {
 @public
  ADLayoutTransition *this$0_;
  ADView *val$child_;
  float val$preAnimAlpha_;
  ADViewGroup *val$parent_;
}

- (instancetype)initWithADLayoutTransition:(ADLayoutTransition *)outer$
                                withADView:(ADView *)capture$0
                                 withFloat:(float)capture$1
                           withADViewGroup:(ADViewGroup *)capture$2;

- (void)onAnimationEndWithADAnimator:(ADAnimator *)anim;

@end

J2OBJC_EMPTY_STATIC_INIT(ADLayoutTransition_5)

__attribute__((unused)) static void ADLayoutTransition_5_initWithADLayoutTransition_withADView_withFloat_withADViewGroup_(ADLayoutTransition_5 *self, ADLayoutTransition *outer$, ADView *capture$0, float capture$1, ADViewGroup *capture$2);

__attribute__((unused)) static ADLayoutTransition_5 *new_ADLayoutTransition_5_initWithADLayoutTransition_withADView_withFloat_withADViewGroup_(ADLayoutTransition *outer$, ADView *capture$0, float capture$1, ADViewGroup *capture$2) NS_RETURNS_RETAINED;

__attribute__((unused)) static ADLayoutTransition_5 *create_ADLayoutTransition_5_initWithADLayoutTransition_withADView_withFloat_withADViewGroup_(ADLayoutTransition *outer$, ADView *capture$0, float capture$1, ADViewGroup *capture$2);


@interface ADLayoutTransition_TransitionListener : NSObject

@end

/*!
 @brief Utility class to clean up listeners after animations are setup.Cleanup happens
  when either the OnPreDrawListener method is called or when the parent is detached,
  whichever comes first.
 */
@interface ADLayoutTransition_CleanupCallback : NSObject < ADViewTreeObserver_OnPreDrawListener, ADView_OnAttachStateChangeListener > {
 @public
  id<JavaUtilMap> layoutChangeListenerMap_;
  ADViewGroup *parent_;
}

- (instancetype)initWithJavaUtilMap:(id<JavaUtilMap>)listenerMap
                    withADViewGroup:(ADViewGroup *)parent;

- (void)cleanup;

- (void)onViewAttachedToWindowWithADView:(ADView *)v;

- (void)onViewDetachedFromWindowWithADView:(ADView *)v;

- (bool)onPreDraw;

@end

J2OBJC_EMPTY_STATIC_INIT(ADLayoutTransition_CleanupCallback)

J2OBJC_FIELD_SETTER(ADLayoutTransition_CleanupCallback, layoutChangeListenerMap_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(ADLayoutTransition_CleanupCallback, parent_, ADViewGroup *)

__attribute__((unused)) static void ADLayoutTransition_CleanupCallback_initWithJavaUtilMap_withADViewGroup_(ADLayoutTransition_CleanupCallback *self, id<JavaUtilMap> listenerMap, ADViewGroup *parent);

__attribute__((unused)) static ADLayoutTransition_CleanupCallback *new_ADLayoutTransition_CleanupCallback_initWithJavaUtilMap_withADViewGroup_(id<JavaUtilMap> listenerMap, ADViewGroup *parent) NS_RETURNS_RETAINED;

__attribute__((unused)) static ADLayoutTransition_CleanupCallback *create_ADLayoutTransition_CleanupCallback_initWithJavaUtilMap_withADViewGroup_(id<JavaUtilMap> listenerMap, ADViewGroup *parent);

__attribute__((unused)) static void ADLayoutTransition_CleanupCallback_cleanup(ADLayoutTransition_CleanupCallback *self);

J2OBJC_TYPE_LITERAL_HEADER(ADLayoutTransition_CleanupCallback)


J2OBJC_INITIALIZED_DEFN(ADLayoutTransition)

@implementation ADLayoutTransition

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADLayoutTransition_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)setDurationWithLong:(int64_t)duration {
  mChangingAppearingDuration_ = duration;
  mChangingDisappearingDuration_ = duration;
  mChangingDuration_ = duration;
  mAppearingDuration_ = duration;
  mDisappearingDuration_ = duration;
}

- (void)enableTransitionTypeWithInt:(int32_t)transitionType {
  switch (transitionType) {
    case ADLayoutTransition_APPEARING:
    mTransitionTypes_ |= ADLayoutTransition_FLAG_APPEARING;
    break;
    case ADLayoutTransition_DISAPPEARING:
    mTransitionTypes_ |= ADLayoutTransition_FLAG_DISAPPEARING;
    break;
    case ADLayoutTransition_CHANGE_APPEARING:
    mTransitionTypes_ |= ADLayoutTransition_FLAG_CHANGE_APPEARING;
    break;
    case ADLayoutTransition_CHANGE_DISAPPEARING:
    mTransitionTypes_ |= ADLayoutTransition_FLAG_CHANGE_DISAPPEARING;
    break;
    case ADLayoutTransition_CHANGING:
    mTransitionTypes_ |= ADLayoutTransition_FLAG_CHANGING;
    break;
  }
}

- (void)disableTransitionTypeWithInt:(int32_t)transitionType {
  switch (transitionType) {
    case ADLayoutTransition_APPEARING:
    mTransitionTypes_ &= ~ADLayoutTransition_FLAG_APPEARING;
    break;
    case ADLayoutTransition_DISAPPEARING:
    mTransitionTypes_ &= ~ADLayoutTransition_FLAG_DISAPPEARING;
    break;
    case ADLayoutTransition_CHANGE_APPEARING:
    mTransitionTypes_ &= ~ADLayoutTransition_FLAG_CHANGE_APPEARING;
    break;
    case ADLayoutTransition_CHANGE_DISAPPEARING:
    mTransitionTypes_ &= ~ADLayoutTransition_FLAG_CHANGE_DISAPPEARING;
    break;
    case ADLayoutTransition_CHANGING:
    mTransitionTypes_ &= ~ADLayoutTransition_FLAG_CHANGING;
    break;
  }
}

- (bool)isTransitionTypeEnabledWithInt:(int32_t)transitionType {
  switch (transitionType) {
    case ADLayoutTransition_APPEARING:
    return (mTransitionTypes_ & ADLayoutTransition_FLAG_APPEARING) == ADLayoutTransition_FLAG_APPEARING;
    case ADLayoutTransition_DISAPPEARING:
    return (mTransitionTypes_ & ADLayoutTransition_FLAG_DISAPPEARING) == ADLayoutTransition_FLAG_DISAPPEARING;
    case ADLayoutTransition_CHANGE_APPEARING:
    return (mTransitionTypes_ & ADLayoutTransition_FLAG_CHANGE_APPEARING) == ADLayoutTransition_FLAG_CHANGE_APPEARING;
    case ADLayoutTransition_CHANGE_DISAPPEARING:
    return (mTransitionTypes_ & ADLayoutTransition_FLAG_CHANGE_DISAPPEARING) == ADLayoutTransition_FLAG_CHANGE_DISAPPEARING;
    case ADLayoutTransition_CHANGING:
    return (mTransitionTypes_ & ADLayoutTransition_FLAG_CHANGING) == ADLayoutTransition_FLAG_CHANGING;
  }
  return false;
}

- (void)setStartDelayWithInt:(int32_t)transitionType
                    withLong:(int64_t)delay {
  switch (transitionType) {
    case ADLayoutTransition_CHANGE_APPEARING:
    mChangingAppearingDelay_ = delay;
    break;
    case ADLayoutTransition_CHANGE_DISAPPEARING:
    mChangingDisappearingDelay_ = delay;
    break;
    case ADLayoutTransition_CHANGING:
    mChangingDelay_ = delay;
    break;
    case ADLayoutTransition_APPEARING:
    mAppearingDelay_ = delay;
    break;
    case ADLayoutTransition_DISAPPEARING:
    mDisappearingDelay_ = delay;
    break;
  }
}

- (int64_t)getStartDelayWithInt:(int32_t)transitionType {
  switch (transitionType) {
    case ADLayoutTransition_CHANGE_APPEARING:
    return mChangingAppearingDelay_;
    case ADLayoutTransition_CHANGE_DISAPPEARING:
    return mChangingDisappearingDelay_;
    case ADLayoutTransition_CHANGING:
    return mChangingDelay_;
    case ADLayoutTransition_APPEARING:
    return mAppearingDelay_;
    case ADLayoutTransition_DISAPPEARING:
    return mDisappearingDelay_;
  }
  return 0;
}

- (void)setDurationWithInt:(int32_t)transitionType
                  withLong:(int64_t)duration {
  switch (transitionType) {
    case ADLayoutTransition_CHANGE_APPEARING:
    mChangingAppearingDuration_ = duration;
    break;
    case ADLayoutTransition_CHANGE_DISAPPEARING:
    mChangingDisappearingDuration_ = duration;
    break;
    case ADLayoutTransition_CHANGING:
    mChangingDuration_ = duration;
    break;
    case ADLayoutTransition_APPEARING:
    mAppearingDuration_ = duration;
    break;
    case ADLayoutTransition_DISAPPEARING:
    mDisappearingDuration_ = duration;
    break;
  }
}

- (int64_t)getDurationWithInt:(int32_t)transitionType {
  switch (transitionType) {
    case ADLayoutTransition_CHANGE_APPEARING:
    return mChangingAppearingDuration_;
    case ADLayoutTransition_CHANGE_DISAPPEARING:
    return mChangingDisappearingDuration_;
    case ADLayoutTransition_CHANGING:
    return mChangingDuration_;
    case ADLayoutTransition_APPEARING:
    return mAppearingDuration_;
    case ADLayoutTransition_DISAPPEARING:
    return mDisappearingDuration_;
  }
  return 0;
}

- (void)setStaggerWithInt:(int32_t)transitionType
                 withLong:(int64_t)duration {
  switch (transitionType) {
    case ADLayoutTransition_CHANGE_APPEARING:
    mChangingAppearingStagger_ = duration;
    break;
    case ADLayoutTransition_CHANGE_DISAPPEARING:
    mChangingDisappearingStagger_ = duration;
    break;
    case ADLayoutTransition_CHANGING:
    mChangingStagger_ = duration;
    break;
  }
}

- (int64_t)getStaggerWithInt:(int32_t)transitionType {
  switch (transitionType) {
    case ADLayoutTransition_CHANGE_APPEARING:
    return mChangingAppearingStagger_;
    case ADLayoutTransition_CHANGE_DISAPPEARING:
    return mChangingDisappearingStagger_;
    case ADLayoutTransition_CHANGING:
    return mChangingStagger_;
  }
  return 0;
}

- (void)setInterpolatorWithInt:(int32_t)transitionType
        withADTimeInterpolator:(id<ADTimeInterpolator>)interpolator {
  switch (transitionType) {
    case ADLayoutTransition_CHANGE_APPEARING:
    JreStrongAssign(&mChangingAppearingInterpolator_, interpolator);
    break;
    case ADLayoutTransition_CHANGE_DISAPPEARING:
    JreStrongAssign(&mChangingDisappearingInterpolator_, interpolator);
    break;
    case ADLayoutTransition_CHANGING:
    JreStrongAssign(&mChangingInterpolator_, interpolator);
    break;
    case ADLayoutTransition_APPEARING:
    JreStrongAssign(&mAppearingInterpolator_, interpolator);
    break;
    case ADLayoutTransition_DISAPPEARING:
    JreStrongAssign(&mDisappearingInterpolator_, interpolator);
    break;
  }
}

- (id<ADTimeInterpolator>)getInterpolatorWithInt:(int32_t)transitionType {
  switch (transitionType) {
    case ADLayoutTransition_CHANGE_APPEARING:
    return mChangingAppearingInterpolator_;
    case ADLayoutTransition_CHANGE_DISAPPEARING:
    return mChangingDisappearingInterpolator_;
    case ADLayoutTransition_CHANGING:
    return mChangingInterpolator_;
    case ADLayoutTransition_APPEARING:
    return mAppearingInterpolator_;
    case ADLayoutTransition_DISAPPEARING:
    return mDisappearingInterpolator_;
  }
  return nil;
}

- (void)setAnimatorWithInt:(int32_t)transitionType
            withADAnimator:(ADAnimator *)animator {
  switch (transitionType) {
    case ADLayoutTransition_CHANGE_APPEARING:
    JreStrongAssign(&mChangingAppearingAnim_, animator);
    break;
    case ADLayoutTransition_CHANGE_DISAPPEARING:
    JreStrongAssign(&mChangingDisappearingAnim_, animator);
    break;
    case ADLayoutTransition_CHANGING:
    JreStrongAssign(&mChangingAnim_, animator);
    break;
    case ADLayoutTransition_APPEARING:
    JreStrongAssign(&mAppearingAnim_, animator);
    break;
    case ADLayoutTransition_DISAPPEARING:
    JreStrongAssign(&mDisappearingAnim_, animator);
    break;
  }
}

- (ADAnimator *)getAnimatorWithInt:(int32_t)transitionType {
  switch (transitionType) {
    case ADLayoutTransition_CHANGE_APPEARING:
    return mChangingAppearingAnim_;
    case ADLayoutTransition_CHANGE_DISAPPEARING:
    return mChangingDisappearingAnim_;
    case ADLayoutTransition_CHANGING:
    return mChangingAnim_;
    case ADLayoutTransition_APPEARING:
    return mAppearingAnim_;
    case ADLayoutTransition_DISAPPEARING:
    return mDisappearingAnim_;
  }
  return nil;
}

- (void)runChangeTransitionWithADViewGroup:(ADViewGroup *)parent
                                withADView:(ADView *)newView
                                   withInt:(int32_t)changeReason {
  ADLayoutTransition_runChangeTransitionWithADViewGroup_withADView_withInt_(self, parent, newView, changeReason);
}

- (void)setAnimateParentHierarchyWithBoolean:(bool)animateParentHierarchy {
  mAnimateParentHierarchy_ = animateParentHierarchy;
}

- (void)setupChangeAnimationWithADViewGroup:(ADViewGroup *)parent
                                    withInt:(int32_t)changeReason
                             withADAnimator:(ADAnimator *)baseAnimator
                                   withLong:(int64_t)duration
                                 withADView:(ADView *)child {
  ADLayoutTransition_setupChangeAnimationWithADViewGroup_withInt_withADAnimator_withLong_withADView_(self, parent, changeReason, baseAnimator, duration, child);
}

- (void)startChangingAnimations {
  JavaUtilLinkedHashMap *currentAnimCopy = (JavaUtilLinkedHashMap *) cast_chk([((JavaUtilLinkedHashMap *) nil_chk(currentChangingAnimations_)) java_clone], [JavaUtilLinkedHashMap class]);
  for (ADAnimator * __strong anim in nil_chk([((JavaUtilLinkedHashMap *) nil_chk(currentAnimCopy)) values])) {
    if ([anim isKindOfClass:[ADObjectAnimator class]]) {
      [((ADObjectAnimator *) nil_chk(((ADObjectAnimator *) anim))) setCurrentPlayTimeWithLong:0];
    }
    [((ADAnimator *) nil_chk(anim)) start];
  }
}

- (void)endChangingAnimations {
  JavaUtilLinkedHashMap *currentAnimCopy = (JavaUtilLinkedHashMap *) cast_chk([((JavaUtilLinkedHashMap *) nil_chk(currentChangingAnimations_)) java_clone], [JavaUtilLinkedHashMap class]);
  for (ADAnimator * __strong anim in nil_chk([((JavaUtilLinkedHashMap *) nil_chk(currentAnimCopy)) values])) {
    [((ADAnimator *) nil_chk(anim)) start];
    [anim end];
  }
  [currentChangingAnimations_ clear];
}

- (bool)isChangingLayout {
  return ([((JavaUtilLinkedHashMap *) nil_chk(currentChangingAnimations_)) size] > 0);
}

- (bool)isRunning {
  return ([((JavaUtilLinkedHashMap *) nil_chk(currentChangingAnimations_)) size] > 0 || [((JavaUtilLinkedHashMap *) nil_chk(currentAppearingAnimations_)) size] > 0 || [((JavaUtilLinkedHashMap *) nil_chk(currentDisappearingAnimations_)) size] > 0);
}

- (void)cancel {
  if ([((JavaUtilLinkedHashMap *) nil_chk(currentChangingAnimations_)) size] > 0) {
    JavaUtilLinkedHashMap *currentAnimCopy = (JavaUtilLinkedHashMap *) cast_chk([currentChangingAnimations_ java_clone], [JavaUtilLinkedHashMap class]);
    for (ADAnimator * __strong anim in nil_chk([((JavaUtilLinkedHashMap *) nil_chk(currentAnimCopy)) values])) {
      [((ADAnimator *) nil_chk(anim)) cancel];
    }
    [currentChangingAnimations_ clear];
  }
  if ([((JavaUtilLinkedHashMap *) nil_chk(currentAppearingAnimations_)) size] > 0) {
    JavaUtilLinkedHashMap *currentAnimCopy = (JavaUtilLinkedHashMap *) cast_chk([currentAppearingAnimations_ java_clone], [JavaUtilLinkedHashMap class]);
    for (ADAnimator * __strong anim in nil_chk([((JavaUtilLinkedHashMap *) nil_chk(currentAnimCopy)) values])) {
      [((ADAnimator *) nil_chk(anim)) end];
    }
    [currentAppearingAnimations_ clear];
  }
  if ([((JavaUtilLinkedHashMap *) nil_chk(currentDisappearingAnimations_)) size] > 0) {
    JavaUtilLinkedHashMap *currentAnimCopy = (JavaUtilLinkedHashMap *) cast_chk([currentDisappearingAnimations_ java_clone], [JavaUtilLinkedHashMap class]);
    for (ADAnimator * __strong anim in nil_chk([((JavaUtilLinkedHashMap *) nil_chk(currentAnimCopy)) values])) {
      [((ADAnimator *) nil_chk(anim)) end];
    }
    [currentDisappearingAnimations_ clear];
  }
}

- (void)cancelWithInt:(int32_t)transitionType {
  switch (transitionType) {
    case ADLayoutTransition_CHANGE_APPEARING:
    case ADLayoutTransition_CHANGE_DISAPPEARING:
    case ADLayoutTransition_CHANGING:
    if ([((JavaUtilLinkedHashMap *) nil_chk(currentChangingAnimations_)) size] > 0) {
      JavaUtilLinkedHashMap *currentAnimCopy = (JavaUtilLinkedHashMap *) cast_chk([currentChangingAnimations_ java_clone], [JavaUtilLinkedHashMap class]);
      for (ADAnimator * __strong anim in nil_chk([((JavaUtilLinkedHashMap *) nil_chk(currentAnimCopy)) values])) {
        [((ADAnimator *) nil_chk(anim)) cancel];
      }
      [currentChangingAnimations_ clear];
    }
    break;
    case ADLayoutTransition_APPEARING:
    if ([((JavaUtilLinkedHashMap *) nil_chk(currentAppearingAnimations_)) size] > 0) {
      JavaUtilLinkedHashMap *currentAnimCopy = (JavaUtilLinkedHashMap *) cast_chk([currentAppearingAnimations_ java_clone], [JavaUtilLinkedHashMap class]);
      for (ADAnimator * __strong anim in nil_chk([((JavaUtilLinkedHashMap *) nil_chk(currentAnimCopy)) values])) {
        [((ADAnimator *) nil_chk(anim)) end];
      }
      [currentAppearingAnimations_ clear];
    }
    break;
    case ADLayoutTransition_DISAPPEARING:
    if ([((JavaUtilLinkedHashMap *) nil_chk(currentDisappearingAnimations_)) size] > 0) {
      JavaUtilLinkedHashMap *currentAnimCopy = (JavaUtilLinkedHashMap *) cast_chk([currentDisappearingAnimations_ java_clone], [JavaUtilLinkedHashMap class]);
      for (ADAnimator * __strong anim in nil_chk([((JavaUtilLinkedHashMap *) nil_chk(currentAnimCopy)) values])) {
        [((ADAnimator *) nil_chk(anim)) end];
      }
      [currentDisappearingAnimations_ clear];
    }
    break;
  }
}

- (void)runAppearingTransitionWithADViewGroup:(ADViewGroup *)parent
                                   withADView:(ADView *)child {
  ADLayoutTransition_runAppearingTransitionWithADViewGroup_withADView_(self, parent, child);
}

- (void)runDisappearingTransitionWithADViewGroup:(ADViewGroup *)parent
                                      withADView:(ADView *)child {
  ADLayoutTransition_runDisappearingTransitionWithADViewGroup_withADView_(self, parent, child);
}

- (void)addChildWithADViewGroup:(ADViewGroup *)parent
                     withADView:(ADView *)child
                    withBoolean:(bool)changesLayout {
  ADLayoutTransition_addChildWithADViewGroup_withADView_withBoolean_(self, parent, child, changesLayout);
}

- (bool)hasListeners {
  return ADLayoutTransition_hasListeners(self);
}

- (void)layoutChangeWithADViewGroup:(ADViewGroup *)parent {
  if ([((ADViewGroup *) nil_chk(parent)) getWindowVisibility] != ADView_VISIBLE) {
    return;
  }
  if ((mTransitionTypes_ & ADLayoutTransition_FLAG_CHANGING) == ADLayoutTransition_FLAG_CHANGING && ![self isRunning]) {
    ADLayoutTransition_runChangeTransitionWithADViewGroup_withADView_withInt_(self, parent, nil, ADLayoutTransition_CHANGING);
  }
}

- (void)addChildWithADViewGroup:(ADViewGroup *)parent
                     withADView:(ADView *)child {
  ADLayoutTransition_addChildWithADViewGroup_withADView_withBoolean_(self, parent, child, true);
}

- (void)showChildWithADViewGroup:(ADViewGroup *)parent
                      withADView:(ADView *)child {
  ADLayoutTransition_addChildWithADViewGroup_withADView_withBoolean_(self, parent, child, true);
}

- (void)showChildWithADViewGroup:(ADViewGroup *)parent
                      withADView:(ADView *)child
                         withInt:(int32_t)oldVisibility {
  ADLayoutTransition_addChildWithADViewGroup_withADView_withBoolean_(self, parent, child, oldVisibility == ADView_GONE);
}

- (void)removeChildWithADViewGroup:(ADViewGroup *)parent
                        withADView:(ADView *)child
                       withBoolean:(bool)changesLayout {
  ADLayoutTransition_removeChildWithADViewGroup_withADView_withBoolean_(self, parent, child, changesLayout);
}

- (void)removeChildWithADViewGroup:(ADViewGroup *)parent
                        withADView:(ADView *)child {
  ADLayoutTransition_removeChildWithADViewGroup_withADView_withBoolean_(self, parent, child, true);
}

- (void)hideChildWithADViewGroup:(ADViewGroup *)parent
                      withADView:(ADView *)child {
  ADLayoutTransition_removeChildWithADViewGroup_withADView_withBoolean_(self, parent, child, true);
}

- (void)hideChildWithADViewGroup:(ADViewGroup *)parent
                      withADView:(ADView *)child
                         withInt:(int32_t)newVisibility {
  ADLayoutTransition_removeChildWithADViewGroup_withADView_withBoolean_(self, parent, child, newVisibility == ADView_GONE);
}

- (void)addTransitionListenerWithADLayoutTransition_TransitionListener:(id<ADLayoutTransition_TransitionListener>)listener {
  if (mListeners_ == nil) {
    JreStrongAssignAndConsume(&mListeners_, new_JavaUtilArrayList_init());
  }
  [mListeners_ addWithId:listener];
}

- (void)removeTransitionListenerWithADLayoutTransition_TransitionListener:(id<ADLayoutTransition_TransitionListener>)listener {
  if (mListeners_ == nil) {
    return;
  }
  [mListeners_ removeWithId:listener];
}

- (id<JavaUtilList>)getTransitionListeners {
  return mListeners_;
}

- (void)dealloc {
  RELEASE_(mDisappearingAnim_);
  RELEASE_(mAppearingAnim_);
  RELEASE_(mChangingAppearingAnim_);
  RELEASE_(mChangingDisappearingAnim_);
  RELEASE_(mChangingAnim_);
  RELEASE_(mAppearingInterpolator_);
  RELEASE_(mDisappearingInterpolator_);
  RELEASE_(mChangingAppearingInterpolator_);
  RELEASE_(mChangingDisappearingInterpolator_);
  RELEASE_(mChangingInterpolator_);
  RELEASE_(pendingAnimations_);
  RELEASE_(currentChangingAnimations_);
  RELEASE_(currentAppearingAnimations_);
  RELEASE_(currentDisappearingAnimations_);
  RELEASE_(layoutChangeListenerMap_);
  RELEASE_(mListeners_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 5, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 8, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 7, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 9, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 7, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 11, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 13, -1, -1, -1, -1 },
    { NULL, "LADTimeInterpolator;", 0x1, 14, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 16, -1, -1, -1, -1 },
    { NULL, "LADAnimator;", 0x1, 17, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 18, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 21, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 22, 23, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 24, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 25, 26, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 27, 26, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 28, 29, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 30, 31, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 28, 26, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 32, 26, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 32, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 33, 29, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 33, 26, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 34, 26, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 34, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 35, 36, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 37, 36, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 38, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(setDurationWithLong:);
  methods[2].selector = @selector(enableTransitionTypeWithInt:);
  methods[3].selector = @selector(disableTransitionTypeWithInt:);
  methods[4].selector = @selector(isTransitionTypeEnabledWithInt:);
  methods[5].selector = @selector(setStartDelayWithInt:withLong:);
  methods[6].selector = @selector(getStartDelayWithInt:);
  methods[7].selector = @selector(setDurationWithInt:withLong:);
  methods[8].selector = @selector(getDurationWithInt:);
  methods[9].selector = @selector(setStaggerWithInt:withLong:);
  methods[10].selector = @selector(getStaggerWithInt:);
  methods[11].selector = @selector(setInterpolatorWithInt:withADTimeInterpolator:);
  methods[12].selector = @selector(getInterpolatorWithInt:);
  methods[13].selector = @selector(setAnimatorWithInt:withADAnimator:);
  methods[14].selector = @selector(getAnimatorWithInt:);
  methods[15].selector = @selector(runChangeTransitionWithADViewGroup:withADView:withInt:);
  methods[16].selector = @selector(setAnimateParentHierarchyWithBoolean:);
  methods[17].selector = @selector(setupChangeAnimationWithADViewGroup:withInt:withADAnimator:withLong:withADView:);
  methods[18].selector = @selector(startChangingAnimations);
  methods[19].selector = @selector(endChangingAnimations);
  methods[20].selector = @selector(isChangingLayout);
  methods[21].selector = @selector(isRunning);
  methods[22].selector = @selector(cancel);
  methods[23].selector = @selector(cancelWithInt:);
  methods[24].selector = @selector(runAppearingTransitionWithADViewGroup:withADView:);
  methods[25].selector = @selector(runDisappearingTransitionWithADViewGroup:withADView:);
  methods[26].selector = @selector(addChildWithADViewGroup:withADView:withBoolean:);
  methods[27].selector = @selector(hasListeners);
  methods[28].selector = @selector(layoutChangeWithADViewGroup:);
  methods[29].selector = @selector(addChildWithADViewGroup:withADView:);
  methods[30].selector = @selector(showChildWithADViewGroup:withADView:);
  methods[31].selector = @selector(showChildWithADViewGroup:withADView:withInt:);
  methods[32].selector = @selector(removeChildWithADViewGroup:withADView:withBoolean:);
  methods[33].selector = @selector(removeChildWithADViewGroup:withADView:);
  methods[34].selector = @selector(hideChildWithADViewGroup:withADView:);
  methods[35].selector = @selector(hideChildWithADViewGroup:withADView:withInt:);
  methods[36].selector = @selector(addTransitionListenerWithADLayoutTransition_TransitionListener:);
  methods[37].selector = @selector(removeTransitionListenerWithADLayoutTransition_TransitionListener:);
  methods[38].selector = @selector(getTransitionListeners);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "CHANGE_APPEARING", "I", .constantValue.asInt = ADLayoutTransition_CHANGE_APPEARING, 0x19, -1, -1, -1, -1 },
    { "CHANGE_DISAPPEARING", "I", .constantValue.asInt = ADLayoutTransition_CHANGE_DISAPPEARING, 0x19, -1, -1, -1, -1 },
    { "APPEARING", "I", .constantValue.asInt = ADLayoutTransition_APPEARING, 0x19, -1, -1, -1, -1 },
    { "DISAPPEARING", "I", .constantValue.asInt = ADLayoutTransition_DISAPPEARING, 0x19, -1, -1, -1, -1 },
    { "CHANGING", "I", .constantValue.asInt = ADLayoutTransition_CHANGING, 0x19, -1, -1, -1, -1 },
    { "FLAG_APPEARING", "I", .constantValue.asInt = ADLayoutTransition_FLAG_APPEARING, 0x1a, -1, -1, -1, -1 },
    { "FLAG_DISAPPEARING", "I", .constantValue.asInt = ADLayoutTransition_FLAG_DISAPPEARING, 0x1a, -1, -1, -1, -1 },
    { "FLAG_CHANGE_APPEARING", "I", .constantValue.asInt = ADLayoutTransition_FLAG_CHANGE_APPEARING, 0x1a, -1, -1, -1, -1 },
    { "FLAG_CHANGE_DISAPPEARING", "I", .constantValue.asInt = ADLayoutTransition_FLAG_CHANGE_DISAPPEARING, 0x1a, -1, -1, -1, -1 },
    { "FLAG_CHANGING", "I", .constantValue.asInt = ADLayoutTransition_FLAG_CHANGING, 0x1a, -1, -1, -1, -1 },
    { "mDisappearingAnim_", "LADAnimator;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mAppearingAnim_", "LADAnimator;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mChangingAppearingAnim_", "LADAnimator;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mChangingDisappearingAnim_", "LADAnimator;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mChangingAnim_", "LADAnimator;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "defaultChange", "LADObjectAnimator;", .constantValue.asLong = 0, 0xa, -1, 39, -1, -1 },
    { "defaultChangeIn", "LADObjectAnimator;", .constantValue.asLong = 0, 0xa, -1, 40, -1, -1 },
    { "defaultChangeOut", "LADObjectAnimator;", .constantValue.asLong = 0, 0xa, -1, 41, -1, -1 },
    { "defaultFadeIn", "LADObjectAnimator;", .constantValue.asLong = 0, 0xa, -1, 42, -1, -1 },
    { "defaultFadeOut", "LADObjectAnimator;", .constantValue.asLong = 0, 0xa, -1, 43, -1, -1 },
    { "DEFAULT_DURATION", "J", .constantValue.asLong = 0, 0xa, -1, 44, -1, -1 },
    { "mChangingAppearingDuration_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mChangingDisappearingDuration_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mChangingDuration_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mAppearingDuration_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mDisappearingDuration_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mAppearingDelay_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mDisappearingDelay_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mChangingAppearingDelay_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mChangingDisappearingDelay_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mChangingDelay_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mChangingAppearingStagger_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mChangingDisappearingStagger_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mChangingStagger_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "ACCEL_DECEL_INTERPOLATOR", "LADTimeInterpolator;", .constantValue.asLong = 0, 0xa, -1, 45, -1, -1 },
    { "DECEL_INTERPOLATOR", "LADTimeInterpolator;", .constantValue.asLong = 0, 0xa, -1, 46, -1, -1 },
    { "sAppearingInterpolator", "LADTimeInterpolator;", .constantValue.asLong = 0, 0xa, -1, 47, -1, -1 },
    { "sDisappearingInterpolator", "LADTimeInterpolator;", .constantValue.asLong = 0, 0xa, -1, 48, -1, -1 },
    { "sChangingAppearingInterpolator", "LADTimeInterpolator;", .constantValue.asLong = 0, 0xa, -1, 49, -1, -1 },
    { "sChangingDisappearingInterpolator", "LADTimeInterpolator;", .constantValue.asLong = 0, 0xa, -1, 50, -1, -1 },
    { "sChangingInterpolator", "LADTimeInterpolator;", .constantValue.asLong = 0, 0xa, -1, 51, -1, -1 },
    { "mAppearingInterpolator_", "LADTimeInterpolator;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mDisappearingInterpolator_", "LADTimeInterpolator;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mChangingAppearingInterpolator_", "LADTimeInterpolator;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mChangingDisappearingInterpolator_", "LADTimeInterpolator;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mChangingInterpolator_", "LADTimeInterpolator;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "pendingAnimations_", "LJavaUtilHashMap;", .constantValue.asLong = 0, 0x12, -1, -1, 52, -1 },
    { "currentChangingAnimations_", "LJavaUtilLinkedHashMap;", .constantValue.asLong = 0, 0x11, -1, -1, 53, -1 },
    { "currentAppearingAnimations_", "LJavaUtilLinkedHashMap;", .constantValue.asLong = 0, 0x12, -1, -1, 53, -1 },
    { "currentDisappearingAnimations_", "LJavaUtilLinkedHashMap;", .constantValue.asLong = 0, 0x12, -1, -1, 53, -1 },
    { "layoutChangeListenerMap_", "LJavaUtilHashMap;", .constantValue.asLong = 0, 0x12, -1, -1, 54, -1 },
    { "staggerDelay_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mTransitionTypes_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mListeners_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x2, -1, -1, 55, -1 },
    { "mAnimateParentHierarchy_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setDuration", "J", "enableTransitionType", "I", "disableTransitionType", "isTransitionTypeEnabled", "setStartDelay", "IJ", "getStartDelay", "getDuration", "setStagger", "getStagger", "setInterpolator", "ILADTimeInterpolator;", "getInterpolator", "setAnimator", "ILADAnimator;", "getAnimator", "runChangeTransition", "LADViewGroup;LADView;I", "setAnimateParentHierarchy", "Z", "setupChangeAnimation", "LADViewGroup;ILADAnimator;JLADView;", "cancel", "runAppearingTransition", "LADViewGroup;LADView;", "runDisappearingTransition", "addChild", "LADViewGroup;LADView;Z", "layoutChange", "LADViewGroup;", "showChild", "removeChild", "hideChild", "addTransitionListener", "LADLayoutTransition_TransitionListener;", "removeTransitionListener", "()Ljava/util/List<Lr/android/animation/LayoutTransition$TransitionListener;>;", &ADLayoutTransition_defaultChange, &ADLayoutTransition_defaultChangeIn, &ADLayoutTransition_defaultChangeOut, &ADLayoutTransition_defaultFadeIn, &ADLayoutTransition_defaultFadeOut, &ADLayoutTransition_DEFAULT_DURATION, &ADLayoutTransition_ACCEL_DECEL_INTERPOLATOR, &ADLayoutTransition_DECEL_INTERPOLATOR, &ADLayoutTransition_sAppearingInterpolator, &ADLayoutTransition_sDisappearingInterpolator, &ADLayoutTransition_sChangingAppearingInterpolator, &ADLayoutTransition_sChangingDisappearingInterpolator, &ADLayoutTransition_sChangingInterpolator, "Ljava/util/HashMap<Lr/android/view/View;Lr/android/animation/Animator;>;", "Ljava/util/LinkedHashMap<Lr/android/view/View;Lr/android/animation/Animator;>;", "Ljava/util/HashMap<Lr/android/view/View;Lr/android/view/View$OnLayoutChangeListener;>;", "Ljava/util/ArrayList<Lr/android/animation/LayoutTransition$TransitionListener;>;", "LADLayoutTransition_TransitionListener;LADLayoutTransition_CleanupCallback;" };
  static const J2ObjcClassInfo _ADLayoutTransition = { "LayoutTransition", "r.android.animation", ptrTable, methods, fields, 7, 0x1, 39, 55, -1, 56, -1, -1, -1 };
  return &_ADLayoutTransition;
}

+ (void)initialize {
  if (self == [ADLayoutTransition class]) {
    JreStrongAssignAndConsume(&ADLayoutTransition_ACCEL_DECEL_INTERPOLATOR, new_ADAccelerateDecelerateInterpolator_init());
    JreStrongAssignAndConsume(&ADLayoutTransition_DECEL_INTERPOLATOR, new_ADDecelerateInterpolator_init());
    JreStrongAssign(&ADLayoutTransition_sAppearingInterpolator, ADLayoutTransition_ACCEL_DECEL_INTERPOLATOR);
    JreStrongAssign(&ADLayoutTransition_sDisappearingInterpolator, ADLayoutTransition_ACCEL_DECEL_INTERPOLATOR);
    JreStrongAssign(&ADLayoutTransition_sChangingAppearingInterpolator, ADLayoutTransition_DECEL_INTERPOLATOR);
    JreStrongAssign(&ADLayoutTransition_sChangingDisappearingInterpolator, ADLayoutTransition_DECEL_INTERPOLATOR);
    JreStrongAssign(&ADLayoutTransition_sChangingInterpolator, ADLayoutTransition_DECEL_INTERPOLATOR);
    J2OBJC_SET_INITIALIZED(ADLayoutTransition)
  }
}

@end

void ADLayoutTransition_init(ADLayoutTransition *self) {
  NSObject_init(self);
  JreStrongAssign(&self->mDisappearingAnim_, nil);
  JreStrongAssign(&self->mAppearingAnim_, nil);
  JreStrongAssign(&self->mChangingAppearingAnim_, nil);
  JreStrongAssign(&self->mChangingDisappearingAnim_, nil);
  JreStrongAssign(&self->mChangingAnim_, nil);
  self->mChangingAppearingDuration_ = ADLayoutTransition_DEFAULT_DURATION;
  self->mChangingDisappearingDuration_ = ADLayoutTransition_DEFAULT_DURATION;
  self->mChangingDuration_ = ADLayoutTransition_DEFAULT_DURATION;
  self->mAppearingDuration_ = ADLayoutTransition_DEFAULT_DURATION;
  self->mDisappearingDuration_ = ADLayoutTransition_DEFAULT_DURATION;
  self->mAppearingDelay_ = ADLayoutTransition_DEFAULT_DURATION;
  self->mDisappearingDelay_ = 0;
  self->mChangingAppearingDelay_ = 0;
  self->mChangingDisappearingDelay_ = ADLayoutTransition_DEFAULT_DURATION;
  self->mChangingDelay_ = 0;
  self->mChangingAppearingStagger_ = 0;
  self->mChangingDisappearingStagger_ = 0;
  self->mChangingStagger_ = 0;
  JreStrongAssign(&self->mAppearingInterpolator_, ADLayoutTransition_sAppearingInterpolator);
  JreStrongAssign(&self->mDisappearingInterpolator_, ADLayoutTransition_sDisappearingInterpolator);
  JreStrongAssign(&self->mChangingAppearingInterpolator_, ADLayoutTransition_sChangingAppearingInterpolator);
  JreStrongAssign(&self->mChangingDisappearingInterpolator_, ADLayoutTransition_sChangingDisappearingInterpolator);
  JreStrongAssign(&self->mChangingInterpolator_, ADLayoutTransition_sChangingInterpolator);
  JreStrongAssignAndConsume(&self->pendingAnimations_, new_JavaUtilHashMap_init());
  JreStrongAssignAndConsume(&self->currentChangingAnimations_, new_JavaUtilLinkedHashMap_init());
  JreStrongAssignAndConsume(&self->currentAppearingAnimations_, new_JavaUtilLinkedHashMap_init());
  JreStrongAssignAndConsume(&self->currentDisappearingAnimations_, new_JavaUtilLinkedHashMap_init());
  JreStrongAssignAndConsume(&self->layoutChangeListenerMap_, new_JavaUtilHashMap_init());
  self->mTransitionTypes_ = ADLayoutTransition_FLAG_CHANGE_APPEARING | ADLayoutTransition_FLAG_CHANGE_DISAPPEARING | ADLayoutTransition_FLAG_APPEARING | ADLayoutTransition_FLAG_DISAPPEARING;
  self->mAnimateParentHierarchy_ = true;
  if (ADLayoutTransition_defaultChangeIn == nil) {
    ADPropertyValuesHolder *pvhLeft = ADPropertyValuesHolder_ofIntWithNSString_withIntArray_(@"left", [IOSIntArray arrayWithInts:(int32_t[]){ 0, 1 } count:2]);
    ADPropertyValuesHolder *pvhTop = ADPropertyValuesHolder_ofIntWithNSString_withIntArray_(@"top", [IOSIntArray arrayWithInts:(int32_t[]){ 0, 1 } count:2]);
    ADPropertyValuesHolder *pvhRight = ADPropertyValuesHolder_ofIntWithNSString_withIntArray_(@"right", [IOSIntArray arrayWithInts:(int32_t[]){ 0, 1 } count:2]);
    ADPropertyValuesHolder *pvhBottom = ADPropertyValuesHolder_ofIntWithNSString_withIntArray_(@"bottom", [IOSIntArray arrayWithInts:(int32_t[]){ 0, 1 } count:2]);
    ADPropertyValuesHolder *pvhScrollX = ADPropertyValuesHolder_ofIntWithNSString_withIntArray_(@"scrollX", [IOSIntArray arrayWithInts:(int32_t[]){ 0, 1 } count:2]);
    ADPropertyValuesHolder *pvhScrollY = ADPropertyValuesHolder_ofIntWithNSString_withIntArray_(@"scrollY", [IOSIntArray arrayWithInts:(int32_t[]){ 0, 1 } count:2]);
    JreStrongAssign(&ADLayoutTransition_defaultChangeIn, ADObjectAnimator_ofPropertyValuesHolderWithId_withADPropertyValuesHolderArray_(nil, [IOSObjectArray arrayWithObjects:(id[]){ pvhLeft, pvhTop, pvhRight, pvhBottom, pvhScrollX, pvhScrollY } count:6 type:ADPropertyValuesHolder_class_()]));
    [((ADObjectAnimator *) nil_chk(ADLayoutTransition_defaultChangeIn)) setDurationWithLong:ADLayoutTransition_DEFAULT_DURATION];
    [((ADObjectAnimator *) nil_chk(ADLayoutTransition_defaultChangeIn)) setStartDelayWithLong:self->mChangingAppearingDelay_];
    [((ADObjectAnimator *) nil_chk(ADLayoutTransition_defaultChangeIn)) setInterpolatorWithADTimeInterpolator:self->mChangingAppearingInterpolator_];
    JreStrongAssign(&ADLayoutTransition_defaultChangeOut, [((ADObjectAnimator *) nil_chk(ADLayoutTransition_defaultChangeIn)) java_clone]);
    [((ADObjectAnimator *) nil_chk(ADLayoutTransition_defaultChangeOut)) setStartDelayWithLong:self->mChangingDisappearingDelay_];
    [((ADObjectAnimator *) nil_chk(ADLayoutTransition_defaultChangeOut)) setInterpolatorWithADTimeInterpolator:self->mChangingDisappearingInterpolator_];
    JreStrongAssign(&ADLayoutTransition_defaultChange, [((ADObjectAnimator *) nil_chk(ADLayoutTransition_defaultChangeIn)) java_clone]);
    [((ADObjectAnimator *) nil_chk(ADLayoutTransition_defaultChange)) setStartDelayWithLong:self->mChangingDelay_];
    [((ADObjectAnimator *) nil_chk(ADLayoutTransition_defaultChange)) setInterpolatorWithADTimeInterpolator:self->mChangingInterpolator_];
    JreStrongAssign(&ADLayoutTransition_defaultFadeIn, ADObjectAnimator_ofFloatWithId_withNSString_withFloatArray_(nil, @"alpha", [IOSFloatArray arrayWithFloats:(float[]){ 0.0f, 1.0f } count:2]));
    [((ADObjectAnimator *) nil_chk(ADLayoutTransition_defaultFadeIn)) setDurationWithLong:ADLayoutTransition_DEFAULT_DURATION];
    [((ADObjectAnimator *) nil_chk(ADLayoutTransition_defaultFadeIn)) setStartDelayWithLong:self->mAppearingDelay_];
    [((ADObjectAnimator *) nil_chk(ADLayoutTransition_defaultFadeIn)) setInterpolatorWithADTimeInterpolator:self->mAppearingInterpolator_];
    JreStrongAssign(&ADLayoutTransition_defaultFadeOut, ADObjectAnimator_ofFloatWithId_withNSString_withFloatArray_(nil, @"alpha", [IOSFloatArray arrayWithFloats:(float[]){ 1.0f, 0.0f } count:2]));
    [((ADObjectAnimator *) nil_chk(ADLayoutTransition_defaultFadeOut)) setDurationWithLong:ADLayoutTransition_DEFAULT_DURATION];
    [((ADObjectAnimator *) nil_chk(ADLayoutTransition_defaultFadeOut)) setStartDelayWithLong:self->mDisappearingDelay_];
    [((ADObjectAnimator *) nil_chk(ADLayoutTransition_defaultFadeOut)) setInterpolatorWithADTimeInterpolator:self->mDisappearingInterpolator_];
  }
  JreStrongAssign(&self->mChangingAppearingAnim_, ADLayoutTransition_defaultChangeIn);
  JreStrongAssign(&self->mChangingDisappearingAnim_, ADLayoutTransition_defaultChangeOut);
  JreStrongAssign(&self->mChangingAnim_, ADLayoutTransition_defaultChange);
  JreStrongAssign(&self->mAppearingAnim_, ADLayoutTransition_defaultFadeIn);
  JreStrongAssign(&self->mDisappearingAnim_, ADLayoutTransition_defaultFadeOut);
}

ADLayoutTransition *new_ADLayoutTransition_init() {
  J2OBJC_NEW_IMPL(ADLayoutTransition, init)
}

ADLayoutTransition *create_ADLayoutTransition_init() {
  J2OBJC_CREATE_IMPL(ADLayoutTransition, init)
}

void ADLayoutTransition_runChangeTransitionWithADViewGroup_withADView_withInt_(ADLayoutTransition *self, ADViewGroup *parent, ADView *newView, int32_t changeReason) {
  ADAnimator *baseAnimator = nil;
  ADAnimator *parentAnimator = nil;
  int64_t duration;
  switch (changeReason) {
    case ADLayoutTransition_APPEARING:
    baseAnimator = self->mChangingAppearingAnim_;
    duration = self->mChangingAppearingDuration_;
    parentAnimator = ADLayoutTransition_defaultChangeIn;
    break;
    case ADLayoutTransition_DISAPPEARING:
    baseAnimator = self->mChangingDisappearingAnim_;
    duration = self->mChangingDisappearingDuration_;
    parentAnimator = ADLayoutTransition_defaultChangeOut;
    break;
    case ADLayoutTransition_CHANGING:
    baseAnimator = self->mChangingAnim_;
    duration = self->mChangingDuration_;
    parentAnimator = ADLayoutTransition_defaultChange;
    break;
    default:
    duration = 0;
    break;
  }
  if (baseAnimator == nil) {
    return;
  }
  self->staggerDelay_ = 0;
  ADViewTreeObserver *observer = [((ADViewGroup *) nil_chk(parent)) getViewTreeObserver];
  if (![((ADViewTreeObserver *) nil_chk(observer)) isAlive]) {
    return;
  }
  int32_t numChildren = [parent getChildCount];
  for (int32_t i = 0; i < numChildren; ++i) {
    ADView *child = [parent getChildAtWithInt:i];
    if (!JreObjectEqualsEquals(child, newView)) {
      ADLayoutTransition_setupChangeAnimationWithADViewGroup_withInt_withADAnimator_withLong_withADView_(self, parent, changeReason, baseAnimator, duration, child);
    }
  }
  if (self->mAnimateParentHierarchy_) {
    ADViewGroup *tempParent = JreRetainedLocalValue(parent);
    while (tempParent != nil) {
      id<ADViewParent> parentParent = JreRetainedLocalValue([tempParent getParent]);
      if ([parentParent isKindOfClass:[ADViewGroup class]]) {
        ADLayoutTransition_setupChangeAnimationWithADViewGroup_withInt_withADAnimator_withLong_withADView_(self, (ADViewGroup *) parentParent, changeReason, parentAnimator, duration, tempParent);
        tempParent = (ADViewGroup *) parentParent;
      }
      else {
        tempParent = nil;
      }
    }
  }
  ADLayoutTransition_CleanupCallback *callback = create_ADLayoutTransition_CleanupCallback_initWithJavaUtilMap_withADViewGroup_(self->layoutChangeListenerMap_, parent);
  [observer addOnPreDrawListenerWithADViewTreeObserver_OnPreDrawListener:callback];
  [parent addOnAttachStateChangeListenerWithADView_OnAttachStateChangeListener:callback];
}

void ADLayoutTransition_setupChangeAnimationWithADViewGroup_withInt_withADAnimator_withLong_withADView_(ADLayoutTransition *self, ADViewGroup *parent, int32_t changeReason, ADAnimator *baseAnimator, int64_t duration, ADView *child) {
  if ([((JavaUtilHashMap *) nil_chk(self->layoutChangeListenerMap_)) getWithId:child] != nil) {
    return;
  }
  if ([((ADView *) nil_chk(child)) getWidth] == 0 && [child getHeight] == 0) {
    return;
  }
  ADAnimator *anim = [((ADAnimator *) nil_chk(baseAnimator)) java_clone];
  [((ADAnimator *) nil_chk(anim)) setTargetWithId:child];
  [anim setupStartValues];
  ADAnimator *currentAnimation = JreRetainedLocalValue([((JavaUtilHashMap *) nil_chk(self->pendingAnimations_)) getWithId:child]);
  if (currentAnimation != nil) {
    [currentAnimation cancel];
    [self->pendingAnimations_ removeWithId:child];
  }
  [self->pendingAnimations_ putWithId:child withId:anim];
  ADValueAnimator *pendingAnimRemover = JreRetainedLocalValue([((ADValueAnimator *) nil_chk(ADValueAnimator_ofFloatWithFloatArray_([IOSFloatArray arrayWithFloats:(float[]){ 0.0f, 1.0f } count:2]))) setDurationWithLong:duration + 100]);
  [((ADValueAnimator *) nil_chk(pendingAnimRemover)) addListenerWithADAnimator_AnimatorListener:create_ADLayoutTransition_1_initWithADLayoutTransition_withADView_(self, child)];
  [pendingAnimRemover start];
  id<ADView_OnLayoutChangeListener> listener = create_ADLayoutTransition_2_initWithADLayoutTransition_withADAnimator_withInt_withLong_withADView_withADViewGroup_(self, anim, changeReason, duration, child, parent);
  [anim addListenerWithADAnimator_AnimatorListener:create_ADLayoutTransition_3_initWithADLayoutTransition_withADViewGroup_withADView_withInt_withADView_OnLayoutChangeListener_(self, parent, child, changeReason, listener)];
  [child addOnLayoutChangeListenerWithADView_OnLayoutChangeListener:listener];
  [self->layoutChangeListenerMap_ putWithId:child withId:listener];
}

void ADLayoutTransition_runAppearingTransitionWithADViewGroup_withADView_(ADLayoutTransition *self, ADViewGroup *parent, ADView *child) {
  ADAnimator *currentAnimation = JreRetainedLocalValue([((JavaUtilLinkedHashMap *) nil_chk(self->currentDisappearingAnimations_)) getWithId:child]);
  if (currentAnimation != nil) {
    [currentAnimation cancel];
  }
  if (self->mAppearingAnim_ == nil) {
    if (ADLayoutTransition_hasListeners(self)) {
      JavaUtilArrayList *listeners = (JavaUtilArrayList *) cast_chk([((JavaUtilArrayList *) nil_chk(self->mListeners_)) java_clone], [JavaUtilArrayList class]);
      for (id<ADLayoutTransition_TransitionListener> __strong listener in nil_chk(listeners)) {
        [((id<ADLayoutTransition_TransitionListener>) nil_chk(listener)) endTransitionWithADLayoutTransition:self withADViewGroup:parent withADView:child withInt:ADLayoutTransition_APPEARING];
      }
    }
    return;
  }
  ADAnimator *anim = JreRetainedLocalValue([self->mAppearingAnim_ java_clone]);
  [((ADAnimator *) nil_chk(anim)) setTargetWithId:child];
  [anim setStartDelayWithLong:self->mAppearingDelay_];
  [anim setDurationWithLong:self->mAppearingDuration_];
  if (!JreObjectEqualsEquals(self->mAppearingInterpolator_, ADLayoutTransition_sAppearingInterpolator)) {
    [anim setInterpolatorWithADTimeInterpolator:self->mAppearingInterpolator_];
  }
  if ([anim isKindOfClass:[ADObjectAnimator class]]) {
    [((ADObjectAnimator *) anim) setCurrentPlayTimeWithLong:0];
  }
  [anim addListenerWithADAnimator_AnimatorListener:create_ADLayoutTransition_4_initWithADLayoutTransition_withADView_withADViewGroup_(self, child, parent)];
  [((JavaUtilLinkedHashMap *) nil_chk(self->currentAppearingAnimations_)) putWithId:child withId:anim];
  [anim start];
}

void ADLayoutTransition_runDisappearingTransitionWithADViewGroup_withADView_(ADLayoutTransition *self, ADViewGroup *parent, ADView *child) {
  ADAnimator *currentAnimation = JreRetainedLocalValue([((JavaUtilLinkedHashMap *) nil_chk(self->currentAppearingAnimations_)) getWithId:child]);
  if (currentAnimation != nil) {
    [currentAnimation cancel];
  }
  if (self->mDisappearingAnim_ == nil) {
    if (ADLayoutTransition_hasListeners(self)) {
      JavaUtilArrayList *listeners = (JavaUtilArrayList *) cast_chk([((JavaUtilArrayList *) nil_chk(self->mListeners_)) java_clone], [JavaUtilArrayList class]);
      for (id<ADLayoutTransition_TransitionListener> __strong listener in nil_chk(listeners)) {
        [((id<ADLayoutTransition_TransitionListener>) nil_chk(listener)) endTransitionWithADLayoutTransition:self withADViewGroup:parent withADView:child withInt:ADLayoutTransition_DISAPPEARING];
      }
    }
    return;
  }
  ADAnimator *anim = JreRetainedLocalValue([self->mDisappearingAnim_ java_clone]);
  [((ADAnimator *) nil_chk(anim)) setStartDelayWithLong:self->mDisappearingDelay_];
  [anim setDurationWithLong:self->mDisappearingDuration_];
  if (!JreObjectEqualsEquals(self->mDisappearingInterpolator_, ADLayoutTransition_sDisappearingInterpolator)) {
    [anim setInterpolatorWithADTimeInterpolator:self->mDisappearingInterpolator_];
  }
  [anim setTargetWithId:child];
  float preAnimAlpha = [((ADView *) nil_chk(child)) getAlpha];
  [anim addListenerWithADAnimator_AnimatorListener:create_ADLayoutTransition_5_initWithADLayoutTransition_withADView_withFloat_withADViewGroup_(self, child, preAnimAlpha, parent)];
  if ([anim isKindOfClass:[ADObjectAnimator class]]) {
    [((ADObjectAnimator *) anim) setCurrentPlayTimeWithLong:0];
  }
  [((JavaUtilLinkedHashMap *) nil_chk(self->currentDisappearingAnimations_)) putWithId:child withId:anim];
  [anim start];
}

void ADLayoutTransition_addChildWithADViewGroup_withADView_withBoolean_(ADLayoutTransition *self, ADViewGroup *parent, ADView *child, bool changesLayout) {
  if ([((ADViewGroup *) nil_chk(parent)) getWindowVisibility] != ADView_VISIBLE) {
    return;
  }
  if ((self->mTransitionTypes_ & ADLayoutTransition_FLAG_APPEARING) == ADLayoutTransition_FLAG_APPEARING) {
    [self cancelWithInt:ADLayoutTransition_DISAPPEARING];
  }
  if (changesLayout && (self->mTransitionTypes_ & ADLayoutTransition_FLAG_CHANGE_APPEARING) == ADLayoutTransition_FLAG_CHANGE_APPEARING) {
    [self cancelWithInt:ADLayoutTransition_CHANGE_APPEARING];
    [self cancelWithInt:ADLayoutTransition_CHANGING];
  }
  if (ADLayoutTransition_hasListeners(self) && (self->mTransitionTypes_ & ADLayoutTransition_FLAG_APPEARING) == ADLayoutTransition_FLAG_APPEARING) {
    JavaUtilArrayList *listeners = (JavaUtilArrayList *) cast_chk([((JavaUtilArrayList *) nil_chk(self->mListeners_)) java_clone], [JavaUtilArrayList class]);
    for (id<ADLayoutTransition_TransitionListener> __strong listener in nil_chk(listeners)) {
      [((id<ADLayoutTransition_TransitionListener>) nil_chk(listener)) startTransitionWithADLayoutTransition:self withADViewGroup:parent withADView:child withInt:ADLayoutTransition_APPEARING];
    }
  }
  if (changesLayout && (self->mTransitionTypes_ & ADLayoutTransition_FLAG_CHANGE_APPEARING) == ADLayoutTransition_FLAG_CHANGE_APPEARING) {
    ADLayoutTransition_runChangeTransitionWithADViewGroup_withADView_withInt_(self, parent, child, ADLayoutTransition_APPEARING);
  }
  if ((self->mTransitionTypes_ & ADLayoutTransition_FLAG_APPEARING) == ADLayoutTransition_FLAG_APPEARING) {
    ADLayoutTransition_runAppearingTransitionWithADViewGroup_withADView_(self, parent, child);
  }
}

bool ADLayoutTransition_hasListeners(ADLayoutTransition *self) {
  return self->mListeners_ != nil && [self->mListeners_ size] > 0;
}

void ADLayoutTransition_removeChildWithADViewGroup_withADView_withBoolean_(ADLayoutTransition *self, ADViewGroup *parent, ADView *child, bool changesLayout) {
  if ([((ADViewGroup *) nil_chk(parent)) getWindowVisibility] != ADView_VISIBLE) {
    return;
  }
  if ((self->mTransitionTypes_ & ADLayoutTransition_FLAG_DISAPPEARING) == ADLayoutTransition_FLAG_DISAPPEARING) {
    [self cancelWithInt:ADLayoutTransition_APPEARING];
  }
  if (changesLayout && (self->mTransitionTypes_ & ADLayoutTransition_FLAG_CHANGE_DISAPPEARING) == ADLayoutTransition_FLAG_CHANGE_DISAPPEARING) {
    [self cancelWithInt:ADLayoutTransition_CHANGE_DISAPPEARING];
    [self cancelWithInt:ADLayoutTransition_CHANGING];
  }
  if (ADLayoutTransition_hasListeners(self) && (self->mTransitionTypes_ & ADLayoutTransition_FLAG_DISAPPEARING) == ADLayoutTransition_FLAG_DISAPPEARING) {
    JavaUtilArrayList *listeners = (JavaUtilArrayList *) cast_chk([((JavaUtilArrayList *) nil_chk(self->mListeners_)) java_clone], [JavaUtilArrayList class]);
    for (id<ADLayoutTransition_TransitionListener> __strong listener in nil_chk(listeners)) {
      [((id<ADLayoutTransition_TransitionListener>) nil_chk(listener)) startTransitionWithADLayoutTransition:self withADViewGroup:parent withADView:child withInt:ADLayoutTransition_DISAPPEARING];
    }
  }
  if (changesLayout && (self->mTransitionTypes_ & ADLayoutTransition_FLAG_CHANGE_DISAPPEARING) == ADLayoutTransition_FLAG_CHANGE_DISAPPEARING) {
    ADLayoutTransition_runChangeTransitionWithADViewGroup_withADView_withInt_(self, parent, child, ADLayoutTransition_DISAPPEARING);
  }
  if ((self->mTransitionTypes_ & ADLayoutTransition_FLAG_DISAPPEARING) == ADLayoutTransition_FLAG_DISAPPEARING) {
    ADLayoutTransition_runDisappearingTransitionWithADViewGroup_withADView_(self, parent, child);
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADLayoutTransition)

J2OBJC_NAME_MAPPING(ADLayoutTransition, "r.android.animation", "AD")

@implementation ADLayoutTransition_1

- (instancetype)initWithADLayoutTransition:(ADLayoutTransition *)outer$
                                withADView:(ADView *)capture$0 {
  ADLayoutTransition_1_initWithADLayoutTransition_withADView_(self, outer$, capture$0);
  return self;
}

- (void)onAnimationEndWithADAnimator:(ADAnimator *)animation {
  [((JavaUtilHashMap *) nil_chk(this$0_->pendingAnimations_)) removeWithId:val$child_];
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$child_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithADLayoutTransition:withADView:);
  methods[1].selector = @selector(onAnimationEndWithADAnimator:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LADLayoutTransition;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$child_", "LADView;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LADLayoutTransition;LADView;", "onAnimationEnd", "LADAnimator;", "LADLayoutTransition;", "setupChangeAnimationWithADViewGroup:withInt:withADAnimator:withLong:withADView:" };
  static const J2ObjcClassInfo _ADLayoutTransition_1 = { "", "r.android.animation", ptrTable, methods, fields, 7, 0x8000, 2, 2, 3, -1, 4, -1, -1 };
  return &_ADLayoutTransition_1;
}

@end

void ADLayoutTransition_1_initWithADLayoutTransition_withADView_(ADLayoutTransition_1 *self, ADLayoutTransition *outer$, ADView *capture$0) {
  JreStrongAssign(&self->this$0_, outer$);
  JreStrongAssign(&self->val$child_, capture$0);
  ADAnimatorListenerAdapter_init(self);
}

ADLayoutTransition_1 *new_ADLayoutTransition_1_initWithADLayoutTransition_withADView_(ADLayoutTransition *outer$, ADView *capture$0) {
  J2OBJC_NEW_IMPL(ADLayoutTransition_1, initWithADLayoutTransition_withADView_, outer$, capture$0)
}

ADLayoutTransition_1 *create_ADLayoutTransition_1_initWithADLayoutTransition_withADView_(ADLayoutTransition *outer$, ADView *capture$0) {
  J2OBJC_CREATE_IMPL(ADLayoutTransition_1, initWithADLayoutTransition_withADView_, outer$, capture$0)
}

@implementation ADLayoutTransition_2

- (instancetype)initWithADLayoutTransition:(ADLayoutTransition *)outer$
                            withADAnimator:(ADAnimator *)capture$0
                                   withInt:(int32_t)capture$1
                                  withLong:(int64_t)capture$2
                                withADView:(ADView *)capture$3
                           withADViewGroup:(ADViewGroup *)capture$4 {
  ADLayoutTransition_2_initWithADLayoutTransition_withADAnimator_withInt_withLong_withADView_withADViewGroup_(self, outer$, capture$0, capture$1, capture$2, capture$3, capture$4);
  return self;
}

- (void)onLayoutChangeWithADView:(ADView *)v
                         withInt:(int32_t)left
                         withInt:(int32_t)top
                         withInt:(int32_t)right
                         withInt:(int32_t)bottom
                         withInt:(int32_t)oldLeft
                         withInt:(int32_t)oldTop
                         withInt:(int32_t)oldRight
                         withInt:(int32_t)oldBottom {
  [((ADAnimator *) nil_chk(val$anim_)) setupEndValues];
  if ([val$anim_ isKindOfClass:[ADValueAnimator class]]) {
    bool valuesDiffer = false;
    ADValueAnimator *valueAnim = (ADValueAnimator *) val$anim_;
    IOSObjectArray *oldValues = [valueAnim getValues];
    for (int32_t i = 0; i < ((IOSObjectArray *) nil_chk(oldValues))->size_; ++i) {
      ADPropertyValuesHolder *pvh = IOSObjectArray_Get(oldValues, i);
      if ([((ADPropertyValuesHolder *) nil_chk(pvh))->mKeyframes_ isKindOfClass:[ADKeyframeSet class]]) {
        ADKeyframeSet *keyframeSet = (ADKeyframeSet *) pvh->mKeyframes_;
        if (((ADKeyframeSet *) nil_chk(keyframeSet))->mFirstKeyframe_ == nil || keyframeSet->mLastKeyframe_ == nil || ![nil_chk([keyframeSet->mFirstKeyframe_ getValue]) isEqual:[((ADKeyframe *) nil_chk(keyframeSet->mLastKeyframe_)) getValue]]) {
          valuesDiffer = true;
        }
      }
      else if (![nil_chk([((id<ADIKeyframes>) nil_chk(pvh->mKeyframes_)) getValueWithFloat:0]) isEqual:[((id<ADIKeyframes>) nil_chk(pvh->mKeyframes_)) getValueWithFloat:1]]) {
        valuesDiffer = true;
      }
    }
    if (!valuesDiffer) {
      return;
    }
  }
  int64_t startDelay = 0;
  switch (val$changeReason_) {
    case ADLayoutTransition_APPEARING:
    startDelay = this$0_->mChangingAppearingDelay_ + this$0_->staggerDelay_;
    this$0_->staggerDelay_ += this$0_->mChangingAppearingStagger_;
    if (!JreObjectEqualsEquals(this$0_->mChangingAppearingInterpolator_, JreLoadStatic(ADLayoutTransition, sChangingAppearingInterpolator))) {
      [val$anim_ setInterpolatorWithADTimeInterpolator:this$0_->mChangingAppearingInterpolator_];
    }
    break;
    case ADLayoutTransition_DISAPPEARING:
    startDelay = this$0_->mChangingDisappearingDelay_ + this$0_->staggerDelay_;
    this$0_->staggerDelay_ += this$0_->mChangingDisappearingStagger_;
    if (!JreObjectEqualsEquals(this$0_->mChangingDisappearingInterpolator_, JreLoadStatic(ADLayoutTransition, sChangingDisappearingInterpolator))) {
      [val$anim_ setInterpolatorWithADTimeInterpolator:this$0_->mChangingDisappearingInterpolator_];
    }
    break;
    case ADLayoutTransition_CHANGING:
    startDelay = this$0_->mChangingDelay_ + this$0_->staggerDelay_;
    this$0_->staggerDelay_ += this$0_->mChangingStagger_;
    if (!JreObjectEqualsEquals(this$0_->mChangingInterpolator_, JreLoadStatic(ADLayoutTransition, sChangingInterpolator))) {
      [val$anim_ setInterpolatorWithADTimeInterpolator:this$0_->mChangingInterpolator_];
    }
    break;
  }
  [val$anim_ setStartDelayWithLong:startDelay];
  [val$anim_ setDurationWithLong:val$duration_];
  ADAnimator *prevAnimation = JreRetainedLocalValue([((JavaUtilLinkedHashMap *) nil_chk(this$0_->currentChangingAnimations_)) getWithId:val$child_]);
  if (prevAnimation != nil) {
    [prevAnimation cancel];
  }
  ADAnimator *pendingAnimation = JreRetainedLocalValue([((JavaUtilHashMap *) nil_chk(this$0_->pendingAnimations_)) getWithId:val$child_]);
  if (pendingAnimation != nil) {
    [this$0_->pendingAnimations_ removeWithId:val$child_];
  }
  [this$0_->currentChangingAnimations_ putWithId:val$child_ withId:val$anim_];
  [((ADViewGroup *) nil_chk(val$parent_)) requestTransitionStartWithADLayoutTransition:this$0_];
  [((ADView *) nil_chk(val$child_)) removeOnLayoutChangeListenerWithADView_OnLayoutChangeListener:self];
  [((JavaUtilHashMap *) nil_chk(this$0_->layoutChangeListenerMap_)) removeWithId:val$child_];
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$anim_);
  RELEASE_(val$child_);
  RELEASE_(val$parent_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithADLayoutTransition:withADAnimator:withInt:withLong:withADView:withADViewGroup:);
  methods[1].selector = @selector(onLayoutChangeWithADView:withInt:withInt:withInt:withInt:withInt:withInt:withInt:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LADLayoutTransition;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$anim_", "LADAnimator;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$changeReason_", "I", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$duration_", "J", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$child_", "LADView;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$parent_", "LADViewGroup;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LADLayoutTransition;LADAnimator;IJLADView;LADViewGroup;", "onLayoutChange", "LADView;IIIIIIII", "LADLayoutTransition;", "setupChangeAnimationWithADViewGroup:withInt:withADAnimator:withLong:withADView:" };
  static const J2ObjcClassInfo _ADLayoutTransition_2 = { "", "r.android.animation", ptrTable, methods, fields, 7, 0x8000, 2, 6, 3, -1, 4, -1, -1 };
  return &_ADLayoutTransition_2;
}

@end

void ADLayoutTransition_2_initWithADLayoutTransition_withADAnimator_withInt_withLong_withADView_withADViewGroup_(ADLayoutTransition_2 *self, ADLayoutTransition *outer$, ADAnimator *capture$0, int32_t capture$1, int64_t capture$2, ADView *capture$3, ADViewGroup *capture$4) {
  JreStrongAssign(&self->this$0_, outer$);
  JreStrongAssign(&self->val$anim_, capture$0);
  self->val$changeReason_ = capture$1;
  self->val$duration_ = capture$2;
  JreStrongAssign(&self->val$child_, capture$3);
  JreStrongAssign(&self->val$parent_, capture$4);
  NSObject_init(self);
}

ADLayoutTransition_2 *new_ADLayoutTransition_2_initWithADLayoutTransition_withADAnimator_withInt_withLong_withADView_withADViewGroup_(ADLayoutTransition *outer$, ADAnimator *capture$0, int32_t capture$1, int64_t capture$2, ADView *capture$3, ADViewGroup *capture$4) {
  J2OBJC_NEW_IMPL(ADLayoutTransition_2, initWithADLayoutTransition_withADAnimator_withInt_withLong_withADView_withADViewGroup_, outer$, capture$0, capture$1, capture$2, capture$3, capture$4)
}

ADLayoutTransition_2 *create_ADLayoutTransition_2_initWithADLayoutTransition_withADAnimator_withInt_withLong_withADView_withADViewGroup_(ADLayoutTransition *outer$, ADAnimator *capture$0, int32_t capture$1, int64_t capture$2, ADView *capture$3, ADViewGroup *capture$4) {
  J2OBJC_CREATE_IMPL(ADLayoutTransition_2, initWithADLayoutTransition_withADAnimator_withInt_withLong_withADView_withADViewGroup_, outer$, capture$0, capture$1, capture$2, capture$3, capture$4)
}

@implementation ADLayoutTransition_3

- (instancetype)initWithADLayoutTransition:(ADLayoutTransition *)outer$
                           withADViewGroup:(ADViewGroup *)capture$0
                                withADView:(ADView *)capture$1
                                   withInt:(int32_t)capture$2
         withADView_OnLayoutChangeListener:(id<ADView_OnLayoutChangeListener>)capture$3 {
  ADLayoutTransition_3_initWithADLayoutTransition_withADViewGroup_withADView_withInt_withADView_OnLayoutChangeListener_(self, outer$, capture$0, capture$1, capture$2, capture$3);
  return self;
}

- (void)onAnimationStartWithADAnimator:(ADAnimator *)animator {
  if (ADLayoutTransition_hasListeners(this$0_)) {
    JavaUtilArrayList *listeners = (JavaUtilArrayList *) cast_chk([((JavaUtilArrayList *) nil_chk(this$0_->mListeners_)) java_clone], [JavaUtilArrayList class]);
    for (id<ADLayoutTransition_TransitionListener> __strong listener in nil_chk(listeners)) {
      [((id<ADLayoutTransition_TransitionListener>) nil_chk(listener)) startTransitionWithADLayoutTransition:this$0_ withADViewGroup:val$parent_ withADView:val$child_ withInt:val$changeReason_ == ADLayoutTransition_APPEARING ? ADLayoutTransition_CHANGE_APPEARING : val$changeReason_ == ADLayoutTransition_DISAPPEARING ? ADLayoutTransition_CHANGE_DISAPPEARING : ADLayoutTransition_CHANGING];
    }
  }
}

- (void)onAnimationCancelWithADAnimator:(ADAnimator *)animator {
  [((ADView *) nil_chk(val$child_)) removeOnLayoutChangeListenerWithADView_OnLayoutChangeListener:val$listener_];
  [((JavaUtilHashMap *) nil_chk(this$0_->layoutChangeListenerMap_)) removeWithId:val$child_];
}

- (void)onAnimationEndWithADAnimator:(ADAnimator *)animator {
  [((JavaUtilLinkedHashMap *) nil_chk(this$0_->currentChangingAnimations_)) removeWithId:val$child_];
  if (ADLayoutTransition_hasListeners(this$0_)) {
    JavaUtilArrayList *listeners = (JavaUtilArrayList *) cast_chk([((JavaUtilArrayList *) nil_chk(this$0_->mListeners_)) java_clone], [JavaUtilArrayList class]);
    for (id<ADLayoutTransition_TransitionListener> __strong listener in nil_chk(listeners)) {
      [((id<ADLayoutTransition_TransitionListener>) nil_chk(listener)) endTransitionWithADLayoutTransition:this$0_ withADViewGroup:val$parent_ withADView:val$child_ withInt:val$changeReason_ == ADLayoutTransition_APPEARING ? ADLayoutTransition_CHANGE_APPEARING : val$changeReason_ == ADLayoutTransition_DISAPPEARING ? ADLayoutTransition_CHANGE_DISAPPEARING : ADLayoutTransition_CHANGING];
    }
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$parent_);
  RELEASE_(val$child_);
  RELEASE_(val$listener_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithADLayoutTransition:withADViewGroup:withADView:withInt:withADView_OnLayoutChangeListener:);
  methods[1].selector = @selector(onAnimationStartWithADAnimator:);
  methods[2].selector = @selector(onAnimationCancelWithADAnimator:);
  methods[3].selector = @selector(onAnimationEndWithADAnimator:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LADLayoutTransition;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$parent_", "LADViewGroup;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$child_", "LADView;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$changeReason_", "I", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$listener_", "LADView_OnLayoutChangeListener;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LADLayoutTransition;LADViewGroup;LADView;ILADView_OnLayoutChangeListener;", "onAnimationStart", "LADAnimator;", "onAnimationCancel", "onAnimationEnd", "LADLayoutTransition;", "setupChangeAnimationWithADViewGroup:withInt:withADAnimator:withLong:withADView:" };
  static const J2ObjcClassInfo _ADLayoutTransition_3 = { "", "r.android.animation", ptrTable, methods, fields, 7, 0x8000, 4, 5, 5, -1, 6, -1, -1 };
  return &_ADLayoutTransition_3;
}

@end

void ADLayoutTransition_3_initWithADLayoutTransition_withADViewGroup_withADView_withInt_withADView_OnLayoutChangeListener_(ADLayoutTransition_3 *self, ADLayoutTransition *outer$, ADViewGroup *capture$0, ADView *capture$1, int32_t capture$2, id<ADView_OnLayoutChangeListener> capture$3) {
  JreStrongAssign(&self->this$0_, outer$);
  JreStrongAssign(&self->val$parent_, capture$0);
  JreStrongAssign(&self->val$child_, capture$1);
  self->val$changeReason_ = capture$2;
  JreStrongAssign(&self->val$listener_, capture$3);
  ADAnimatorListenerAdapter_init(self);
}

ADLayoutTransition_3 *new_ADLayoutTransition_3_initWithADLayoutTransition_withADViewGroup_withADView_withInt_withADView_OnLayoutChangeListener_(ADLayoutTransition *outer$, ADViewGroup *capture$0, ADView *capture$1, int32_t capture$2, id<ADView_OnLayoutChangeListener> capture$3) {
  J2OBJC_NEW_IMPL(ADLayoutTransition_3, initWithADLayoutTransition_withADViewGroup_withADView_withInt_withADView_OnLayoutChangeListener_, outer$, capture$0, capture$1, capture$2, capture$3)
}

ADLayoutTransition_3 *create_ADLayoutTransition_3_initWithADLayoutTransition_withADViewGroup_withADView_withInt_withADView_OnLayoutChangeListener_(ADLayoutTransition *outer$, ADViewGroup *capture$0, ADView *capture$1, int32_t capture$2, id<ADView_OnLayoutChangeListener> capture$3) {
  J2OBJC_CREATE_IMPL(ADLayoutTransition_3, initWithADLayoutTransition_withADViewGroup_withADView_withInt_withADView_OnLayoutChangeListener_, outer$, capture$0, capture$1, capture$2, capture$3)
}

@implementation ADLayoutTransition_4

- (instancetype)initWithADLayoutTransition:(ADLayoutTransition *)outer$
                                withADView:(ADView *)capture$0
                           withADViewGroup:(ADViewGroup *)capture$1 {
  ADLayoutTransition_4_initWithADLayoutTransition_withADView_withADViewGroup_(self, outer$, capture$0, capture$1);
  return self;
}

- (void)onAnimationEndWithADAnimator:(ADAnimator *)anim {
  [((JavaUtilLinkedHashMap *) nil_chk(this$0_->currentAppearingAnimations_)) removeWithId:val$child_];
  if (ADLayoutTransition_hasListeners(this$0_)) {
    JavaUtilArrayList *listeners = (JavaUtilArrayList *) cast_chk([((JavaUtilArrayList *) nil_chk(this$0_->mListeners_)) java_clone], [JavaUtilArrayList class]);
    for (id<ADLayoutTransition_TransitionListener> __strong listener in nil_chk(listeners)) {
      [((id<ADLayoutTransition_TransitionListener>) nil_chk(listener)) endTransitionWithADLayoutTransition:this$0_ withADViewGroup:val$parent_ withADView:val$child_ withInt:ADLayoutTransition_APPEARING];
    }
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$child_);
  RELEASE_(val$parent_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithADLayoutTransition:withADView:withADViewGroup:);
  methods[1].selector = @selector(onAnimationEndWithADAnimator:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LADLayoutTransition;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$child_", "LADView;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$parent_", "LADViewGroup;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LADLayoutTransition;LADView;LADViewGroup;", "onAnimationEnd", "LADAnimator;", "LADLayoutTransition;", "runAppearingTransitionWithADViewGroup:withADView:" };
  static const J2ObjcClassInfo _ADLayoutTransition_4 = { "", "r.android.animation", ptrTable, methods, fields, 7, 0x8000, 2, 3, 3, -1, 4, -1, -1 };
  return &_ADLayoutTransition_4;
}

@end

void ADLayoutTransition_4_initWithADLayoutTransition_withADView_withADViewGroup_(ADLayoutTransition_4 *self, ADLayoutTransition *outer$, ADView *capture$0, ADViewGroup *capture$1) {
  JreStrongAssign(&self->this$0_, outer$);
  JreStrongAssign(&self->val$child_, capture$0);
  JreStrongAssign(&self->val$parent_, capture$1);
  ADAnimatorListenerAdapter_init(self);
}

ADLayoutTransition_4 *new_ADLayoutTransition_4_initWithADLayoutTransition_withADView_withADViewGroup_(ADLayoutTransition *outer$, ADView *capture$0, ADViewGroup *capture$1) {
  J2OBJC_NEW_IMPL(ADLayoutTransition_4, initWithADLayoutTransition_withADView_withADViewGroup_, outer$, capture$0, capture$1)
}

ADLayoutTransition_4 *create_ADLayoutTransition_4_initWithADLayoutTransition_withADView_withADViewGroup_(ADLayoutTransition *outer$, ADView *capture$0, ADViewGroup *capture$1) {
  J2OBJC_CREATE_IMPL(ADLayoutTransition_4, initWithADLayoutTransition_withADView_withADViewGroup_, outer$, capture$0, capture$1)
}

@implementation ADLayoutTransition_5

- (instancetype)initWithADLayoutTransition:(ADLayoutTransition *)outer$
                                withADView:(ADView *)capture$0
                                 withFloat:(float)capture$1
                           withADViewGroup:(ADViewGroup *)capture$2 {
  ADLayoutTransition_5_initWithADLayoutTransition_withADView_withFloat_withADViewGroup_(self, outer$, capture$0, capture$1, capture$2);
  return self;
}

- (void)onAnimationEndWithADAnimator:(ADAnimator *)anim {
  [((JavaUtilLinkedHashMap *) nil_chk(this$0_->currentDisappearingAnimations_)) removeWithId:val$child_];
  [((ADView *) nil_chk(val$child_)) setAlphaWithFloat:val$preAnimAlpha_];
  if (ADLayoutTransition_hasListeners(this$0_)) {
    JavaUtilArrayList *listeners = (JavaUtilArrayList *) cast_chk([((JavaUtilArrayList *) nil_chk(this$0_->mListeners_)) java_clone], [JavaUtilArrayList class]);
    for (id<ADLayoutTransition_TransitionListener> __strong listener in nil_chk(listeners)) {
      [((id<ADLayoutTransition_TransitionListener>) nil_chk(listener)) endTransitionWithADLayoutTransition:this$0_ withADViewGroup:val$parent_ withADView:val$child_ withInt:ADLayoutTransition_DISAPPEARING];
    }
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$child_);
  RELEASE_(val$parent_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithADLayoutTransition:withADView:withFloat:withADViewGroup:);
  methods[1].selector = @selector(onAnimationEndWithADAnimator:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LADLayoutTransition;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$child_", "LADView;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$preAnimAlpha_", "F", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$parent_", "LADViewGroup;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LADLayoutTransition;LADView;FLADViewGroup;", "onAnimationEnd", "LADAnimator;", "LADLayoutTransition;", "runDisappearingTransitionWithADViewGroup:withADView:" };
  static const J2ObjcClassInfo _ADLayoutTransition_5 = { "", "r.android.animation", ptrTable, methods, fields, 7, 0x8000, 2, 4, 3, -1, 4, -1, -1 };
  return &_ADLayoutTransition_5;
}

@end

void ADLayoutTransition_5_initWithADLayoutTransition_withADView_withFloat_withADViewGroup_(ADLayoutTransition_5 *self, ADLayoutTransition *outer$, ADView *capture$0, float capture$1, ADViewGroup *capture$2) {
  JreStrongAssign(&self->this$0_, outer$);
  JreStrongAssign(&self->val$child_, capture$0);
  self->val$preAnimAlpha_ = capture$1;
  JreStrongAssign(&self->val$parent_, capture$2);
  ADAnimatorListenerAdapter_init(self);
}

ADLayoutTransition_5 *new_ADLayoutTransition_5_initWithADLayoutTransition_withADView_withFloat_withADViewGroup_(ADLayoutTransition *outer$, ADView *capture$0, float capture$1, ADViewGroup *capture$2) {
  J2OBJC_NEW_IMPL(ADLayoutTransition_5, initWithADLayoutTransition_withADView_withFloat_withADViewGroup_, outer$, capture$0, capture$1, capture$2)
}

ADLayoutTransition_5 *create_ADLayoutTransition_5_initWithADLayoutTransition_withADView_withFloat_withADViewGroup_(ADLayoutTransition *outer$, ADView *capture$0, float capture$1, ADViewGroup *capture$2) {
  J2OBJC_CREATE_IMPL(ADLayoutTransition_5, initWithADLayoutTransition_withADView_withFloat_withADViewGroup_, outer$, capture$0, capture$1, capture$2)
}

@implementation ADLayoutTransition_TransitionListener

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x401, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 2, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(startTransitionWithADLayoutTransition:withADViewGroup:withADView:withInt:);
  methods[1].selector = @selector(endTransitionWithADLayoutTransition:withADViewGroup:withADView:withInt:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "startTransition", "LADLayoutTransition;LADViewGroup;LADView;I", "endTransition", "LADLayoutTransition;" };
  static const J2ObjcClassInfo _ADLayoutTransition_TransitionListener = { "TransitionListener", "r.android.animation", ptrTable, methods, NULL, 7, 0x609, 2, 0, 3, -1, -1, -1, -1 };
  return &_ADLayoutTransition_TransitionListener;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(ADLayoutTransition_TransitionListener)

@implementation ADLayoutTransition_CleanupCallback

- (instancetype)initWithJavaUtilMap:(id<JavaUtilMap>)listenerMap
                    withADViewGroup:(ADViewGroup *)parent {
  ADLayoutTransition_CleanupCallback_initWithJavaUtilMap_withADViewGroup_(self, listenerMap, parent);
  return self;
}

- (void)cleanup {
  ADLayoutTransition_CleanupCallback_cleanup(self);
}

- (void)onViewAttachedToWindowWithADView:(ADView *)v {
}

- (void)onViewDetachedFromWindowWithADView:(ADView *)v {
  ADLayoutTransition_CleanupCallback_cleanup(self);
}

- (bool)onPreDraw {
  ADLayoutTransition_CleanupCallback_cleanup(self);
  return true;
}

- (void)dealloc {
  RELEASE_(layoutChangeListenerMap_);
  RELEASE_(parent_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaUtilMap:withADViewGroup:);
  methods[1].selector = @selector(cleanup);
  methods[2].selector = @selector(onViewAttachedToWindowWithADView:);
  methods[3].selector = @selector(onViewDetachedFromWindowWithADView:);
  methods[4].selector = @selector(onPreDraw);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "layoutChangeListenerMap_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x10, -1, -1, 5, -1 },
    { "parent_", "LADViewGroup;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilMap;LADViewGroup;", "(Ljava/util/Map<Lr/android/view/View;Lr/android/view/View$OnLayoutChangeListener;>;Lr/android/view/ViewGroup;)V", "onViewAttachedToWindow", "LADView;", "onViewDetachedFromWindow", "Ljava/util/Map<Lr/android/view/View;Lr/android/view/View$OnLayoutChangeListener;>;", "LADLayoutTransition;" };
  static const J2ObjcClassInfo _ADLayoutTransition_CleanupCallback = { "CleanupCallback", "r.android.animation", ptrTable, methods, fields, 7, 0x1a, 5, 2, 6, -1, -1, -1, -1 };
  return &_ADLayoutTransition_CleanupCallback;
}

@end

void ADLayoutTransition_CleanupCallback_initWithJavaUtilMap_withADViewGroup_(ADLayoutTransition_CleanupCallback *self, id<JavaUtilMap> listenerMap, ADViewGroup *parent) {
  NSObject_init(self);
  JreStrongAssign(&self->layoutChangeListenerMap_, listenerMap);
  JreStrongAssign(&self->parent_, parent);
}

ADLayoutTransition_CleanupCallback *new_ADLayoutTransition_CleanupCallback_initWithJavaUtilMap_withADViewGroup_(id<JavaUtilMap> listenerMap, ADViewGroup *parent) {
  J2OBJC_NEW_IMPL(ADLayoutTransition_CleanupCallback, initWithJavaUtilMap_withADViewGroup_, listenerMap, parent)
}

ADLayoutTransition_CleanupCallback *create_ADLayoutTransition_CleanupCallback_initWithJavaUtilMap_withADViewGroup_(id<JavaUtilMap> listenerMap, ADViewGroup *parent) {
  J2OBJC_CREATE_IMPL(ADLayoutTransition_CleanupCallback, initWithJavaUtilMap_withADViewGroup_, listenerMap, parent)
}

void ADLayoutTransition_CleanupCallback_cleanup(ADLayoutTransition_CleanupCallback *self) {
  [((ADViewTreeObserver *) nil_chk([((ADViewGroup *) nil_chk(self->parent_)) getViewTreeObserver])) removeOnPreDrawListenerWithADViewTreeObserver_OnPreDrawListener:self];
  [self->parent_ removeOnAttachStateChangeListenerWithADView_OnAttachStateChangeListener:self];
  int32_t count = [((id<JavaUtilMap>) nil_chk(self->layoutChangeListenerMap_)) size];
  if (count > 0) {
    id<JavaUtilCollection> views = JreRetainedLocalValue([self->layoutChangeListenerMap_ keySet]);
    for (ADView * __strong view in nil_chk(views)) {
      id<ADView_OnLayoutChangeListener> listener = JreRetainedLocalValue([self->layoutChangeListenerMap_ getWithId:view]);
      [((ADView *) nil_chk(view)) removeOnLayoutChangeListenerWithADView_OnLayoutChangeListener:listener];
    }
    [self->layoutChangeListenerMap_ clear];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADLayoutTransition_CleanupCallback)
