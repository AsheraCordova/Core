//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroid\src\main\java\r\android\animation\PropertyValuesHolder.java
//

#define J2OBJC_IMPORTED_BY_JAVA_IMPLEMENTATION 1




#include "BidirectionalTypeConverter.h"
#include "FloatArrayEvaluator.h"
#include "FloatEvaluator.h"
#include "FloatProperty.h"
#include "IKeyframes.h"
#include "ILifeCycleDecorator.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "IWidget.h"
#include "IntArrayEvaluator.h"
#include "IntEvaluator.h"
#include "IntProperty.h"
#include "J2ObjC_source.h"
#include "Keyframe.h"
#include "KeyframeSet.h"
#include "Log.h"
#include "Path.h"
#include "PathKeyframes.h"
#include "PathParser.h"
#include "PointF.h"
#include "Property.h"
#include "PropertyValuesHolder.h"
#include "TypeConverter.h"
#include "TypeEvaluator.h"
#include "View.h"
#include "java/lang/Boolean.h"
#include "java/lang/Character.h"
#include "java/lang/ClassCastException.h"
#include "java/lang/CloneNotSupportedException.h"
#include "java/lang/Double.h"
#include "java/lang/Float.h"
#include "java/lang/IllegalAccessException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/NoSuchMethodError.h"
#include "java/lang/NoSuchMethodException.h"
#include "java/lang/SafeVarargs.h"
#include "java/lang/annotation/Annotation.h"
#include "java/lang/reflect/InvocationTargetException.h"
#include "java/lang/reflect/Method.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"


@class NSString;


#pragma clang diagnostic error "-Wreturn-type"
#pragma clang diagnostic ignored "-Wswitch"


@interface ADPropertyValuesHolder () {
 @public
  /*!
   @brief The getter function, if needed.ObjectAnimator hands off this functionality to
  PropertyValuesHolder, since it holds all of the per-property information.
   This
  property is automatically
  derived when the animation starts in setupSetterAndGetter() if using ObjectAnimator.
  The getter is only derived and used if one of the values is null.
   */
  JavaLangReflectMethod *mGetter_;
  /*!
   @brief The type evaluator used to calculate the animated values.This evaluator is determined
  automatically based on the type of the start/end objects passed into the constructor,
  but the system only knows about the primitive types int and float.
   Any other
  type will need to set the evaluator to a custom evaluator for that type.
   */
  id<ADTypeEvaluator> mEvaluator_;
  /*!
   @brief The value most recently calculated by calculateValue().This is set during
  that function and might be retrieved later either by ValueAnimator.animatedValue() or
  by the property-setting logic in ObjectAnimator.animatedValue().
   */
  id mAnimatedValue_;
  /*!
   @brief Converts from the source Object type to the setter Object type.
   */
  ADTypeConverter *mConverter_;
}

/*!
 @brief Internal utility constructor, used by the factory methods to set the property name.
 @param propertyName The name of the property for this holder.
 */
- (instancetype)initWithNSString:(NSString *)propertyName;

/*!
 @brief Internal utility constructor, used by the factory methods to set the property.
 @param property The property for this holder.
 */
- (instancetype)initWithADProperty:(ADProperty *)property;

/*!
 @brief Determine the setter or getter function using the JavaBeans convention of setFoo or
  getFoo for a property named 'foo'.This function figures out what the name of the
  function should be and uses reflection to find the Method with that name on the
  target object.
 @param targetClass The class to search for the method
 @param prefix "set" or "get", depending on whether we need a setter or getter.
 @param valueType The type of the parameter (in the case of a setter). This type  is derived from the values set on this PropertyValuesHolder. This type is used as
   a first guess at the parameter type, but we check for methods with several different
   types to avoid problems with slight mis-matches between supplied values and actual
   value types used on the setter.
 @return Method the method associated with mPropertyName.
 */
- (JavaLangReflectMethod *)getPropertyFunctionWithIOSClass:(IOSClass *)targetClass
                                              withNSString:(NSString *)prefix
                                              withIOSClass:(IOSClass *)valueType;

/*!
 @brief Returns the setter or getter requested.This utility function checks whether the
  requested method exists in the propertyMapMap cache.
 If not, it calls another
  utility function to request the Method from the targetClass directly.
 @param targetClass The Class on which the requested method should exist.
 @param propertyMapMap The cache of setters/getters derived so far.
 @param prefix "set" or "get", for the setter or getter.
 @param valueType The type of parameter passed into the method (null for getter).
 @return Method the method associated with mPropertyName.
 */
- (JavaLangReflectMethod *)setupSetterOrGetterWithIOSClass:(IOSClass *)targetClass
                                       withJavaUtilHashMap:(JavaUtilHashMap *)propertyMapMap
                                              withNSString:(NSString *)prefix
                                              withIOSClass:(IOSClass *)valueType;

/*!
 @brief Utility function to get the getter from targetClass
 */
- (void)setupGetterWithIOSClass:(IOSClass *)targetClass;

- (id)convertBackWithId:(id)value;

/*!
 @brief Utility function to set the value stored in a particular Keyframe.The value used is
  whatever the value is for the property name specified in the keyframe on the target object.
 @param target The target object from which the current value should be extracted.
 @param kf The keyframe which holds the property name and value.
 */
- (void)setupValueWithId:(id)target
          withADKeyframe:(ADKeyframe *)kf;

+ (NSString *)nGetIntMethodWithIOSClass:(IOSClass *)targetClass
                           withNSString:(NSString *)methodName;

+ (NSString *)nGetFloatMethodWithIOSClass:(IOSClass *)targetClass
                             withNSString:(NSString *)methodName;

+ (NSString *)nGetMultipleIntMethodWithIOSClass:(IOSClass *)targetClass
                                   withNSString:(NSString *)methodName
                                        withInt:(int32_t)numParams;

+ (NSString *)nGetMultipleFloatMethodWithIOSClass:(IOSClass *)targetClass
                                     withNSString:(NSString *)methodName
                                          withInt:(int32_t)numParams;

+ (void)nCallIntMethodWithId:(id)target
                withNSString:(NSString *)methodID
                     withInt:(int32_t)arg;

+ (void)nCallFloatMethodWithId:(id)target
                  withNSString:(NSString *)methodID
                     withFloat:(float)arg;

+ (void)nCallTwoIntMethodWithId:(id)target
                   withNSString:(NSString *)methodID
                        withInt:(int32_t)arg1
                        withInt:(int32_t)arg2;

+ (void)nCallFourIntMethodWithId:(id)target
                    withNSString:(NSString *)methodID
                         withInt:(int32_t)arg1
                         withInt:(int32_t)arg2
                         withInt:(int32_t)arg3
                         withInt:(int32_t)arg4;

+ (void)nCallMultipleIntMethodWithId:(id)target
                        withNSString:(NSString *)methodID
                        withIntArray:(IOSIntArray *)args;

+ (void)nCallTwoFloatMethodWithId:(id)target
                     withNSString:(NSString *)methodID
                        withFloat:(float)arg1
                        withFloat:(float)arg2;

+ (void)nCallFourFloatMethodWithId:(id)target
                      withNSString:(NSString *)methodID
                         withFloat:(float)arg1
                         withFloat:(float)arg2
                         withFloat:(float)arg3
                         withFloat:(float)arg4;

+ (void)nCallMultipleFloatMethodWithId:(id)target
                          withNSString:(NSString *)methodID
                        withFloatArray:(IOSFloatArray *)args;

@end

J2OBJC_FIELD_SETTER(ADPropertyValuesHolder, mGetter_, JavaLangReflectMethod *)
J2OBJC_FIELD_SETTER(ADPropertyValuesHolder, mEvaluator_, id<ADTypeEvaluator>)
J2OBJC_FIELD_SETTER(ADPropertyValuesHolder, mAnimatedValue_, id)
J2OBJC_FIELD_SETTER(ADPropertyValuesHolder, mConverter_, ADTypeConverter *)

inline id<ADTypeEvaluator> ADPropertyValuesHolder_get_sIntEvaluator(void);
static id<ADTypeEvaluator> ADPropertyValuesHolder_sIntEvaluator;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADPropertyValuesHolder, sIntEvaluator, id<ADTypeEvaluator>)

inline id<ADTypeEvaluator> ADPropertyValuesHolder_get_sFloatEvaluator(void);
static id<ADTypeEvaluator> ADPropertyValuesHolder_sFloatEvaluator;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADPropertyValuesHolder, sFloatEvaluator, id<ADTypeEvaluator>)

inline IOSObjectArray *ADPropertyValuesHolder_get_FLOAT_VARIANTS(void);
inline IOSObjectArray *ADPropertyValuesHolder_set_FLOAT_VARIANTS(IOSObjectArray *value);
static IOSObjectArray *ADPropertyValuesHolder_FLOAT_VARIANTS;
J2OBJC_STATIC_FIELD_OBJ(ADPropertyValuesHolder, FLOAT_VARIANTS, IOSObjectArray *)

inline IOSObjectArray *ADPropertyValuesHolder_get_INTEGER_VARIANTS(void);
inline IOSObjectArray *ADPropertyValuesHolder_set_INTEGER_VARIANTS(IOSObjectArray *value);
static IOSObjectArray *ADPropertyValuesHolder_INTEGER_VARIANTS;
J2OBJC_STATIC_FIELD_OBJ(ADPropertyValuesHolder, INTEGER_VARIANTS, IOSObjectArray *)

inline IOSObjectArray *ADPropertyValuesHolder_get_DOUBLE_VARIANTS(void);
inline IOSObjectArray *ADPropertyValuesHolder_set_DOUBLE_VARIANTS(IOSObjectArray *value);
static IOSObjectArray *ADPropertyValuesHolder_DOUBLE_VARIANTS;
J2OBJC_STATIC_FIELD_OBJ(ADPropertyValuesHolder, DOUBLE_VARIANTS, IOSObjectArray *)

inline JavaUtilHashMap *ADPropertyValuesHolder_get_sSetterPropertyMap(void);
static JavaUtilHashMap *ADPropertyValuesHolder_sSetterPropertyMap;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADPropertyValuesHolder, sSetterPropertyMap, JavaUtilHashMap *)

inline JavaUtilHashMap *ADPropertyValuesHolder_get_sGetterPropertyMap(void);
static JavaUtilHashMap *ADPropertyValuesHolder_sGetterPropertyMap;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADPropertyValuesHolder, sGetterPropertyMap, JavaUtilHashMap *)

__attribute__((unused)) static void ADPropertyValuesHolder_initWithNSString_(ADPropertyValuesHolder *self, NSString *propertyName);

__attribute__((unused)) static ADPropertyValuesHolder *new_ADPropertyValuesHolder_initWithNSString_(NSString *propertyName) NS_RETURNS_RETAINED;

__attribute__((unused)) static ADPropertyValuesHolder *create_ADPropertyValuesHolder_initWithNSString_(NSString *propertyName);

__attribute__((unused)) static void ADPropertyValuesHolder_initWithADProperty_(ADPropertyValuesHolder *self, ADProperty *property);

__attribute__((unused)) static ADPropertyValuesHolder *new_ADPropertyValuesHolder_initWithADProperty_(ADProperty *property) NS_RETURNS_RETAINED;

__attribute__((unused)) static ADPropertyValuesHolder *create_ADPropertyValuesHolder_initWithADProperty_(ADProperty *property);

__attribute__((unused)) static void ADPropertyValuesHolder_setIntValuesWithIntArray_(ADPropertyValuesHolder *self, IOSIntArray *values);

__attribute__((unused)) static void ADPropertyValuesHolder_setFloatValuesWithFloatArray_(ADPropertyValuesHolder *self, IOSFloatArray *values);

__attribute__((unused)) static JavaLangReflectMethod *ADPropertyValuesHolder_getPropertyFunctionWithIOSClass_withNSString_withIOSClass_(ADPropertyValuesHolder *self, IOSClass *targetClass, NSString *prefix, IOSClass *valueType);

__attribute__((unused)) static JavaLangReflectMethod *ADPropertyValuesHolder_setupSetterOrGetterWithIOSClass_withJavaUtilHashMap_withNSString_withIOSClass_(ADPropertyValuesHolder *self, IOSClass *targetClass, JavaUtilHashMap *propertyMapMap, NSString *prefix, IOSClass *valueType);

__attribute__((unused)) static void ADPropertyValuesHolder_setupSetterWithIOSClass_(ADPropertyValuesHolder *self, IOSClass *targetClass);

__attribute__((unused)) static void ADPropertyValuesHolder_setupGetterWithIOSClass_(ADPropertyValuesHolder *self, IOSClass *targetClass);

__attribute__((unused)) static id ADPropertyValuesHolder_convertBackWithId_(ADPropertyValuesHolder *self, id value);

__attribute__((unused)) static void ADPropertyValuesHolder_setupValueWithId_withADKeyframe_(ADPropertyValuesHolder *self, id target, ADKeyframe *kf);

__attribute__((unused)) static void ADPropertyValuesHolder_setPropertyWithADProperty_(ADPropertyValuesHolder *self, ADProperty *property);

__attribute__((unused)) static NSString *ADPropertyValuesHolder_nGetIntMethodWithIOSClass_withNSString_(IOSClass *targetClass, NSString *methodName);

__attribute__((unused)) static NSString *ADPropertyValuesHolder_nGetFloatMethodWithIOSClass_withNSString_(IOSClass *targetClass, NSString *methodName);

__attribute__((unused)) static NSString *ADPropertyValuesHolder_nGetMultipleIntMethodWithIOSClass_withNSString_withInt_(IOSClass *targetClass, NSString *methodName, int32_t numParams);

__attribute__((unused)) static NSString *ADPropertyValuesHolder_nGetMultipleFloatMethodWithIOSClass_withNSString_withInt_(IOSClass *targetClass, NSString *methodName, int32_t numParams);

__attribute__((unused)) static void ADPropertyValuesHolder_nCallIntMethodWithId_withNSString_withInt_(id target, NSString *methodID, int32_t arg);

__attribute__((unused)) static void ADPropertyValuesHolder_nCallFloatMethodWithId_withNSString_withFloat_(id target, NSString *methodID, float arg);

__attribute__((unused)) static void ADPropertyValuesHolder_nCallTwoIntMethodWithId_withNSString_withInt_withInt_(id target, NSString *methodID, int32_t arg1, int32_t arg2);

__attribute__((unused)) static void ADPropertyValuesHolder_nCallFourIntMethodWithId_withNSString_withInt_withInt_withInt_withInt_(id target, NSString *methodID, int32_t arg1, int32_t arg2, int32_t arg3, int32_t arg4);

__attribute__((unused)) static void ADPropertyValuesHolder_nCallMultipleIntMethodWithId_withNSString_withIntArray_(id target, NSString *methodID, IOSIntArray *args);

__attribute__((unused)) static void ADPropertyValuesHolder_nCallTwoFloatMethodWithId_withNSString_withFloat_withFloat_(id target, NSString *methodID, float arg1, float arg2);

__attribute__((unused)) static void ADPropertyValuesHolder_nCallFourFloatMethodWithId_withNSString_withFloat_withFloat_withFloat_withFloat_(id target, NSString *methodID, float arg1, float arg2, float arg3, float arg4);

__attribute__((unused)) static void ADPropertyValuesHolder_nCallMultipleFloatMethodWithId_withNSString_withFloatArray_(id target, NSString *methodID, IOSFloatArray *args);

__attribute__((unused)) static IOSObjectArray *ADPropertyValuesHolder__Annotations$0(void);

__attribute__((unused)) static IOSObjectArray *ADPropertyValuesHolder__Annotations$1(void);

__attribute__((unused)) static IOSObjectArray *ADPropertyValuesHolder__Annotations$2(void);

__attribute__((unused)) static IOSObjectArray *ADPropertyValuesHolder__Annotations$3(void);

@interface ADPropertyValuesHolder_PropertyValues_DataSource : NSObject

@end

@interface ADPropertyValuesHolder_1 : NSObject < ADPropertyValuesHolder_PropertyValues_DataSource > {
 @public
  ADPropertyValuesHolder *this$0_;
}

- (instancetype)initWithADPropertyValuesHolder:(ADPropertyValuesHolder *)outer$;

- (id)getValueAtFractionWithFloat:(float)fraction;

@end

J2OBJC_EMPTY_STATIC_INIT(ADPropertyValuesHolder_1)

__attribute__((unused)) static void ADPropertyValuesHolder_1_initWithADPropertyValuesHolder_(ADPropertyValuesHolder_1 *self, ADPropertyValuesHolder *outer$);

__attribute__((unused)) static ADPropertyValuesHolder_1 *new_ADPropertyValuesHolder_1_initWithADPropertyValuesHolder_(ADPropertyValuesHolder *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static ADPropertyValuesHolder_1 *create_ADPropertyValuesHolder_1_initWithADPropertyValuesHolder_(ADPropertyValuesHolder *outer$);


@interface ADPropertyValuesHolder_IntPropertyValuesHolder () {
 @public
  ADIntProperty *mIntProperty_;
}

@end

J2OBJC_FIELD_SETTER(ADPropertyValuesHolder_IntPropertyValuesHolder, mIntProperty_, ADIntProperty *)

inline JavaUtilHashMap *ADPropertyValuesHolder_IntPropertyValuesHolder_get_sJNISetterPropertyMap(void);
static JavaUtilHashMap *ADPropertyValuesHolder_IntPropertyValuesHolder_sJNISetterPropertyMap;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADPropertyValuesHolder_IntPropertyValuesHolder, sJNISetterPropertyMap, JavaUtilHashMap *)

@interface ADPropertyValuesHolder_FloatPropertyValuesHolder () {
 @public
  ADFloatProperty *mFloatProperty_;
}

@end

J2OBJC_FIELD_SETTER(ADPropertyValuesHolder_FloatPropertyValuesHolder, mFloatProperty_, ADFloatProperty *)

inline JavaUtilHashMap *ADPropertyValuesHolder_FloatPropertyValuesHolder_get_sJNISetterPropertyMap(void);
static JavaUtilHashMap *ADPropertyValuesHolder_FloatPropertyValuesHolder_sJNISetterPropertyMap;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADPropertyValuesHolder_FloatPropertyValuesHolder, sJNISetterPropertyMap, JavaUtilHashMap *)

@interface ADPropertyValuesHolder_MultiFloatValuesHolder () {
 @public
  NSString *mJniSetter_;
}

@end

J2OBJC_FIELD_SETTER(ADPropertyValuesHolder_MultiFloatValuesHolder, mJniSetter_, NSString *)

inline JavaUtilHashMap *ADPropertyValuesHolder_MultiFloatValuesHolder_get_sJNISetterPropertyMap(void);
static JavaUtilHashMap *ADPropertyValuesHolder_MultiFloatValuesHolder_sJNISetterPropertyMap;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADPropertyValuesHolder_MultiFloatValuesHolder, sJNISetterPropertyMap, JavaUtilHashMap *)

@interface ADPropertyValuesHolder_MultiIntValuesHolder () {
 @public
  NSString *mJniSetter_;
}

@end

J2OBJC_FIELD_SETTER(ADPropertyValuesHolder_MultiIntValuesHolder, mJniSetter_, NSString *)

inline JavaUtilHashMap *ADPropertyValuesHolder_MultiIntValuesHolder_get_sJNISetterPropertyMap(void);
static JavaUtilHashMap *ADPropertyValuesHolder_MultiIntValuesHolder_sJNISetterPropertyMap;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADPropertyValuesHolder_MultiIntValuesHolder, sJNISetterPropertyMap, JavaUtilHashMap *)

/*!
 @brief Convert from PointF to float[] for multi-float setters a String a Path.
 */
@interface ADPropertyValuesHolder_PointFToFloatArray : ADTypeConverter {
 @public
  IOSFloatArray *mCoordinates_;
}

- (instancetype)init;

- (IOSFloatArray *)convertWithId:(ADPointF *)value;

@end

J2OBJC_EMPTY_STATIC_INIT(ADPropertyValuesHolder_PointFToFloatArray)

J2OBJC_FIELD_SETTER(ADPropertyValuesHolder_PointFToFloatArray, mCoordinates_, IOSFloatArray *)

__attribute__((unused)) static void ADPropertyValuesHolder_PointFToFloatArray_init(ADPropertyValuesHolder_PointFToFloatArray *self);

__attribute__((unused)) static ADPropertyValuesHolder_PointFToFloatArray *new_ADPropertyValuesHolder_PointFToFloatArray_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static ADPropertyValuesHolder_PointFToFloatArray *create_ADPropertyValuesHolder_PointFToFloatArray_init(void);

J2OBJC_TYPE_LITERAL_HEADER(ADPropertyValuesHolder_PointFToFloatArray)


/*!
 @brief Convert from PointF to int[] for multi-int setters a String a Path.
 */
@interface ADPropertyValuesHolder_PointFToIntArray : ADTypeConverter {
 @public
  IOSIntArray *mCoordinates_;
}

- (instancetype)init;

- (IOSIntArray *)convertWithId:(ADPointF *)value;

@end

J2OBJC_EMPTY_STATIC_INIT(ADPropertyValuesHolder_PointFToIntArray)

J2OBJC_FIELD_SETTER(ADPropertyValuesHolder_PointFToIntArray, mCoordinates_, IOSIntArray *)

__attribute__((unused)) static void ADPropertyValuesHolder_PointFToIntArray_init(ADPropertyValuesHolder_PointFToIntArray *self);

__attribute__((unused)) static ADPropertyValuesHolder_PointFToIntArray *new_ADPropertyValuesHolder_PointFToIntArray_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static ADPropertyValuesHolder_PointFToIntArray *create_ADPropertyValuesHolder_PointFToIntArray_init(void);

J2OBJC_TYPE_LITERAL_HEADER(ADPropertyValuesHolder_PointFToIntArray)


J2OBJC_INITIALIZED_DEFN(ADPropertyValuesHolder)

@implementation ADPropertyValuesHolder

- (instancetype)initWithNSString:(NSString *)propertyName {
  ADPropertyValuesHolder_initWithNSString_(self, propertyName);
  return self;
}

- (instancetype)initWithADProperty:(ADProperty *)property {
  ADPropertyValuesHolder_initWithADProperty_(self, property);
  return self;
}

+ (ADPropertyValuesHolder *)ofIntWithNSString:(NSString *)propertyName
                                 withIntArray:(IOSIntArray *)values {
  return ADPropertyValuesHolder_ofIntWithNSString_withIntArray_(propertyName, values);
}

+ (ADPropertyValuesHolder *)ofIntWithADProperty:(ADProperty *)property
                                   withIntArray:(IOSIntArray *)values {
  return ADPropertyValuesHolder_ofIntWithADProperty_withIntArray_(property, values);
}

+ (ADPropertyValuesHolder *)ofMultiIntWithNSString:(NSString *)propertyName
                                     withIntArray2:(IOSObjectArray *)values {
  return ADPropertyValuesHolder_ofMultiIntWithNSString_withIntArray2_(propertyName, values);
}

+ (ADPropertyValuesHolder *)ofMultiIntWithNSString:(NSString *)propertyName
                                        withADPath:(ADPath *)path {
  return ADPropertyValuesHolder_ofMultiIntWithNSString_withADPath_(propertyName, path);
}

+ (ADPropertyValuesHolder *)ofMultiIntWithNSString:(NSString *)propertyName
                               withADTypeConverter:(ADTypeConverter *)converter
                               withADTypeEvaluator:(id<ADTypeEvaluator>)evaluator
                                 withNSObjectArray:(IOSObjectArray *)values {
  return ADPropertyValuesHolder_ofMultiIntWithNSString_withADTypeConverter_withADTypeEvaluator_withNSObjectArray_(propertyName, converter, evaluator, values);
}

+ (ADPropertyValuesHolder *)ofMultiIntWithNSString:(NSString *)propertyName
                               withADTypeConverter:(ADTypeConverter *)converter
                               withADTypeEvaluator:(id<ADTypeEvaluator>)evaluator
                               withADKeyframeArray:(IOSObjectArray *)values {
  return ADPropertyValuesHolder_ofMultiIntWithNSString_withADTypeConverter_withADTypeEvaluator_withADKeyframeArray_(propertyName, converter, evaluator, values);
}

+ (ADPropertyValuesHolder *)ofFloatWithNSString:(NSString *)propertyName
                                 withFloatArray:(IOSFloatArray *)values {
  return ADPropertyValuesHolder_ofFloatWithNSString_withFloatArray_(propertyName, values);
}

+ (ADPropertyValuesHolder *)ofFloatWithADProperty:(ADProperty *)property
                                   withFloatArray:(IOSFloatArray *)values {
  return ADPropertyValuesHolder_ofFloatWithADProperty_withFloatArray_(property, values);
}

+ (ADPropertyValuesHolder *)ofMultiFloatWithNSString:(NSString *)propertyName
                                     withFloatArray2:(IOSObjectArray *)values {
  return ADPropertyValuesHolder_ofMultiFloatWithNSString_withFloatArray2_(propertyName, values);
}

+ (ADPropertyValuesHolder *)ofMultiFloatWithNSString:(NSString *)propertyName
                                          withADPath:(ADPath *)path {
  return ADPropertyValuesHolder_ofMultiFloatWithNSString_withADPath_(propertyName, path);
}

+ (ADPropertyValuesHolder *)ofMultiFloatWithNSString:(NSString *)propertyName
                                 withADTypeConverter:(ADTypeConverter *)converter
                                 withADTypeEvaluator:(id<ADTypeEvaluator>)evaluator
                                   withNSObjectArray:(IOSObjectArray *)values {
  return ADPropertyValuesHolder_ofMultiFloatWithNSString_withADTypeConverter_withADTypeEvaluator_withNSObjectArray_(propertyName, converter, evaluator, values);
}

+ (ADPropertyValuesHolder *)ofMultiFloatWithNSString:(NSString *)propertyName
                                 withADTypeConverter:(ADTypeConverter *)converter
                                 withADTypeEvaluator:(id<ADTypeEvaluator>)evaluator
                                 withADKeyframeArray:(IOSObjectArray *)values {
  return ADPropertyValuesHolder_ofMultiFloatWithNSString_withADTypeConverter_withADTypeEvaluator_withADKeyframeArray_(propertyName, converter, evaluator, values);
}

+ (ADPropertyValuesHolder *)ofObjectWithNSString:(NSString *)propertyName
                             withADTypeEvaluator:(id<ADTypeEvaluator>)evaluator
                               withNSObjectArray:(IOSObjectArray *)values {
  return ADPropertyValuesHolder_ofObjectWithNSString_withADTypeEvaluator_withNSObjectArray_(propertyName, evaluator, values);
}

+ (ADPropertyValuesHolder *)ofObjectWithNSString:(NSString *)propertyName
                             withADTypeConverter:(ADTypeConverter *)converter
                                      withADPath:(ADPath *)path {
  return ADPropertyValuesHolder_ofObjectWithNSString_withADTypeConverter_withADPath_(propertyName, converter, path);
}

+ (ADPropertyValuesHolder *)ofObjectWithADProperty:(ADProperty *)property
                               withADTypeEvaluator:(id<ADTypeEvaluator>)evaluator
                                 withNSObjectArray:(IOSObjectArray *)values {
  return ADPropertyValuesHolder_ofObjectWithADProperty_withADTypeEvaluator_withNSObjectArray_(property, evaluator, values);
}

+ (ADPropertyValuesHolder *)ofObjectWithADProperty:(ADProperty *)property
                               withADTypeConverter:(ADTypeConverter *)converter
                               withADTypeEvaluator:(id<ADTypeEvaluator>)evaluator
                                 withNSObjectArray:(IOSObjectArray *)values {
  return ADPropertyValuesHolder_ofObjectWithADProperty_withADTypeConverter_withADTypeEvaluator_withNSObjectArray_(property, converter, evaluator, values);
}

+ (ADPropertyValuesHolder *)ofObjectWithADProperty:(ADProperty *)property
                               withADTypeConverter:(ADTypeConverter *)converter
                                        withADPath:(ADPath *)path {
  return ADPropertyValuesHolder_ofObjectWithADProperty_withADTypeConverter_withADPath_(property, converter, path);
}

+ (ADPropertyValuesHolder *)ofKeyframeWithNSString:(NSString *)propertyName
                               withADKeyframeArray:(IOSObjectArray *)values {
  return ADPropertyValuesHolder_ofKeyframeWithNSString_withADKeyframeArray_(propertyName, values);
}

+ (ADPropertyValuesHolder *)ofKeyframeWithADProperty:(ADProperty *)property
                                 withADKeyframeArray:(IOSObjectArray *)values {
  return ADPropertyValuesHolder_ofKeyframeWithADProperty_withADKeyframeArray_(property, values);
}

+ (ADPropertyValuesHolder *)ofKeyframesWithNSString:(NSString *)propertyName
                                   withADIKeyframes:(id<ADIKeyframes>)keyframes {
  return ADPropertyValuesHolder_ofKeyframesWithNSString_withADIKeyframes_(propertyName, keyframes);
}

+ (ADPropertyValuesHolder *)ofKeyframesWithADProperty:(ADProperty *)property
                                     withADIKeyframes:(id<ADIKeyframes>)keyframes {
  return ADPropertyValuesHolder_ofKeyframesWithADProperty_withADIKeyframes_(property, keyframes);
}

- (void)setIntValuesWithIntArray:(IOSIntArray *)values {
  ADPropertyValuesHolder_setIntValuesWithIntArray_(self, values);
}

- (void)setFloatValuesWithFloatArray:(IOSFloatArray *)values {
  ADPropertyValuesHolder_setFloatValuesWithFloatArray_(self, values);
}

- (void)setIKeyframesWithADKeyframeArray:(IOSObjectArray *)values {
  int32_t numKeyframes = ((IOSObjectArray *) nil_chk(values))->size_;
  IOSObjectArray *keyframes = [IOSObjectArray arrayWithLength:JavaLangMath_maxWithInt_withInt_(numKeyframes, 2) type:ADKeyframe_class_()];
  JreStrongAssign(&mValueType_, [((ADKeyframe *) nil_chk((IOSObjectArray_Get(values, 0)))) getType]);
  for (int32_t i = 0; i < numKeyframes; ++i) {
    IOSObjectArray_Set(keyframes, i, IOSObjectArray_Get(values, i));
  }
  JreStrongAssignAndConsume(&mKeyframes_, new_ADKeyframeSet_initWithADKeyframeArray_(keyframes));
}

- (void)setObjectValuesWithNSObjectArray:(IOSObjectArray *)values {
  JreStrongAssign(&mValueType_, [nil_chk(IOSObjectArray_Get(nil_chk(values), 0)) java_getClass]);
  JreStrongAssign(&mKeyframes_, ADKeyframeSet_ofObjectWithNSObjectArray_(values));
  if (mEvaluator_ != nil) {
    [((id<ADIKeyframes>) nil_chk(mKeyframes_)) setEvaluatorWithADTypeEvaluator:mEvaluator_];
  }
}

- (void)setConverterWithADTypeConverter:(ADTypeConverter *)converter {
  JreStrongAssign(&mConverter_, converter);
}

- (JavaLangReflectMethod *)getPropertyFunctionWithIOSClass:(IOSClass *)targetClass
                                              withNSString:(NSString *)prefix
                                              withIOSClass:(IOSClass *)valueType {
  return ADPropertyValuesHolder_getPropertyFunctionWithIOSClass_withNSString_withIOSClass_(self, targetClass, prefix, valueType);
}

- (JavaLangReflectMethod *)setupSetterOrGetterWithIOSClass:(IOSClass *)targetClass
                                       withJavaUtilHashMap:(JavaUtilHashMap *)propertyMapMap
                                              withNSString:(NSString *)prefix
                                              withIOSClass:(IOSClass *)valueType {
  return ADPropertyValuesHolder_setupSetterOrGetterWithIOSClass_withJavaUtilHashMap_withNSString_withIOSClass_(self, targetClass, propertyMapMap, prefix, valueType);
}

- (void)setupSetterWithIOSClass:(IOSClass *)targetClass {
  ADPropertyValuesHolder_setupSetterWithIOSClass_(self, targetClass);
}

- (void)setupGetterWithIOSClass:(IOSClass *)targetClass {
  ADPropertyValuesHolder_setupGetterWithIOSClass_(self, targetClass);
}

- (void)setupSetterAndGetterWithId:(id)target {
  if (mProperty_ != nil) {
    @try {
      id testValue = nil;
      id<JavaUtilList> keyframes = JreRetainedLocalValue([((id<ADIKeyframes>) nil_chk(mKeyframes_)) getIKeyframes]);
      int32_t keyframeCount = keyframes == nil ? 0 : [keyframes size];
      for (int32_t i = 0; i < keyframeCount; i++) {
        ADKeyframe *kf = JreRetainedLocalValue([((id<JavaUtilList>) nil_chk(keyframes)) getWithInt:i]);
        if (![((ADKeyframe *) nil_chk(kf)) hasValue] || [kf valueWasSetOnStart]) {
          if (testValue == nil) {
            testValue = ADPropertyValuesHolder_convertBackWithId_(self, [((ADProperty *) nil_chk(mProperty_)) getWithId:target]);
          }
          [kf setValueWithId:testValue];
          [kf setValueWasSetOnStartWithBoolean:true];
        }
      }
      return;
    }
    @catch (JavaLangClassCastException *e) {
      ADLog_wWithNSString_withNSString_(@"PropertyValuesHolder", JreStrcat("$$$@$", @"No such property (", [((ADProperty *) nil_chk(mProperty_)) getName], @") on target object ", target, @". Trying reflection instead"));
      JreStrongAssign(&mProperty_, nil);
    }
  }
  if (mProperty_ == nil) {
    IOSClass *targetClass = [nil_chk(target) java_getClass];
    if (mSetter_ == nil) {
      [self setupSetterWithIOSClass:targetClass];
    }
    id<JavaUtilList> keyframes = JreRetainedLocalValue([((id<ADIKeyframes>) nil_chk(mKeyframes_)) getIKeyframes]);
    int32_t keyframeCount = keyframes == nil ? 0 : [keyframes size];
    for (int32_t i = 0; i < keyframeCount; i++) {
      ADKeyframe *kf = JreRetainedLocalValue([((id<JavaUtilList>) nil_chk(keyframes)) getWithInt:i]);
      if (![((ADKeyframe *) nil_chk(kf)) hasValue] || [kf valueWasSetOnStart]) {
        if (mGetter_ == nil) {
          ADPropertyValuesHolder_setupGetterWithIOSClass_(self, targetClass);
          if (mGetter_ == nil) {
            return;
          }
        }
        @try {
          id value = ADPropertyValuesHolder_convertBackWithId_(self, [mGetter_ invokeWithId:target withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:NSObject_class_()]]);
          [kf setValueWithId:value];
          [kf setValueWasSetOnStartWithBoolean:true];
        }
        @catch (JavaLangReflectInvocationTargetException *e) {
          ADLog_eWithNSString_withNSString_(@"PropertyValuesHolder", [e description]);
        }
        @catch (JavaLangIllegalAccessException *e) {
          ADLog_eWithNSString_withNSString_(@"PropertyValuesHolder", [e description]);
        }
      }
    }
  }
}

- (id)convertBackWithId:(id)value {
  return ADPropertyValuesHolder_convertBackWithId_(self, value);
}

- (void)setupValueWithId:(id)target
          withADKeyframe:(ADKeyframe *)kf {
  ADPropertyValuesHolder_setupValueWithId_withADKeyframe_(self, target, kf);
}

- (void)setupStartValueWithId:(id)target {
  id<JavaUtilList> keyframes = JreRetainedLocalValue([((id<ADIKeyframes>) nil_chk(mKeyframes_)) getIKeyframes]);
  if (![((id<JavaUtilList>) nil_chk(keyframes)) isEmpty]) {
    ADPropertyValuesHolder_setupValueWithId_withADKeyframe_(self, target, [keyframes getWithInt:0]);
  }
}

- (void)setupEndValueWithId:(id)target {
  id<JavaUtilList> keyframes = JreRetainedLocalValue([((id<ADIKeyframes>) nil_chk(mKeyframes_)) getIKeyframes]);
  if (![((id<JavaUtilList>) nil_chk(keyframes)) isEmpty]) {
    ADPropertyValuesHolder_setupValueWithId_withADKeyframe_(self, target, [keyframes getWithInt:[keyframes size] - 1]);
  }
}

- (ADPropertyValuesHolder *)java_clone {
  @try {
    ADPropertyValuesHolder *newPVH = (ADPropertyValuesHolder *) cast_chk([super java_clone], [ADPropertyValuesHolder class]);
    JreStrongAssign(&((ADPropertyValuesHolder *) nil_chk(newPVH))->mPropertyName_, mPropertyName_);
    JreStrongAssign(&newPVH->mProperty_, mProperty_);
    JreStrongAssign(&newPVH->mKeyframes_, [((id<ADIKeyframes>) nil_chk(mKeyframes_)) clone]);
    JreStrongAssign(&newPVH->mEvaluator_, mEvaluator_);
    return newPVH;
  }
  @catch (JavaLangCloneNotSupportedException *e) {
    return nil;
  }
}

- (void)setAnimatedValueWithId:(id)target {
  if (mProperty_ != nil) {
    [mProperty_ setWithId:target withId:[self getAnimatedValue]];
  }
  if (mSetter_ != nil) {
    @try {
      IOSObjectArray_Set(nil_chk(mTmpValueArray_), 0, [self getAnimatedValue]);
      [((JavaLangReflectMethod *) nil_chk(mSetter_)) invokeWithId:target withNSObjectArray:mTmpValueArray_];
    }
    @catch (JavaLangReflectInvocationTargetException *e) {
      ADLog_eWithNSString_withNSString_(@"PropertyValuesHolder", [e description]);
    }
    @catch (JavaLangIllegalAccessException *e) {
      ADLog_eWithNSString_withNSString_(@"PropertyValuesHolder", [e description]);
    }
  }
}

- (void)init__ {
  if (mEvaluator_ == nil) {
    JreStrongAssign(&mEvaluator_, (JreObjectEqualsEquals(mValueType_, JavaLangInteger_class_())) ? ADPropertyValuesHolder_sIntEvaluator : (JreObjectEqualsEquals(mValueType_, JavaLangFloat_class_())) ? ADPropertyValuesHolder_sFloatEvaluator : nil);
  }
  if (mEvaluator_ != nil) {
    [((id<ADIKeyframes>) nil_chk(mKeyframes_)) setEvaluatorWithADTypeEvaluator:mEvaluator_];
  }
}

- (void)setEvaluatorWithADTypeEvaluator:(id<ADTypeEvaluator>)evaluator {
  JreStrongAssign(&mEvaluator_, evaluator);
  [((id<ADIKeyframes>) nil_chk(mKeyframes_)) setEvaluatorWithADTypeEvaluator:evaluator];
}

- (void)calculateValueWithFloat:(float)fraction {
  id value = JreRetainedLocalValue([((id<ADIKeyframes>) nil_chk(mKeyframes_)) getValueWithFloat:fraction]);
  JreStrongAssign(&mAnimatedValue_, mConverter_ == nil ? value : [mConverter_ convertWithId:value]);
}

- (void)setPropertyNameWithNSString:(NSString *)propertyName {
  JreStrongAssign(&mPropertyName_, propertyName);
}

- (void)setPropertyWithADProperty:(ADProperty *)property {
  ADPropertyValuesHolder_setPropertyWithADProperty_(self, property);
}

- (NSString *)getPropertyName {
  return mPropertyName_;
}

- (id)getAnimatedValue {
  return mAnimatedValue_;
}

- (void)getPropertyValuesWithADPropertyValuesHolder_PropertyValues:(ADPropertyValuesHolder_PropertyValues *)values {
  [self init__];
  JreStrongAssign(&((ADPropertyValuesHolder_PropertyValues *) nil_chk(values))->propertyName_, mPropertyName_);
  JreStrongAssign(&values->type_, mValueType_);
  JreStrongAssign(&values->startValue_, [((id<ADIKeyframes>) nil_chk(mKeyframes_)) getValueWithFloat:0]);
  if ([values->startValue_ isKindOfClass:[ADPathParser_PathData class]]) {
    JreStrongAssignAndConsume(&values->startValue_, new_ADPathParser_PathData_initWithADPathParser_PathData_((ADPathParser_PathData *) values->startValue_));
  }
  JreStrongAssign(&values->endValue_, [((id<ADIKeyframes>) nil_chk(mKeyframes_)) getValueWithFloat:1]);
  if ([values->endValue_ isKindOfClass:[ADPathParser_PathData class]]) {
    JreStrongAssignAndConsume(&values->endValue_, new_ADPathParser_PathData_initWithADPathParser_PathData_((ADPathParser_PathData *) values->endValue_));
  }
  if ([mKeyframes_ isKindOfClass:[ADPathKeyframes_FloatIKeyframesBase class]] || [mKeyframes_ isKindOfClass:[ADPathKeyframes_IntIKeyframesBase class]] || ([((id<ADIKeyframes>) nil_chk(mKeyframes_)) getIKeyframes] != nil && [((id<JavaUtilList>) nil_chk([((id<ADIKeyframes>) nil_chk(mKeyframes_)) getIKeyframes])) size] > 2)) {
    JreStrongAssignAndConsume(&values->dataSource_, new_ADPropertyValuesHolder_1_initWithADPropertyValuesHolder_(self));
  }
  else {
    JreStrongAssign(&values->dataSource_, nil);
  }
}

- (IOSClass *)getValueType {
  return mValueType_;
}

- (NSString *)description {
  return JreStrcat("$$$", mPropertyName_, @": ", [((id<ADIKeyframes>) nil_chk(mKeyframes_)) description]);
}

+ (NSString *)getMethodNameWithNSString:(NSString *)prefix
                           withNSString:(NSString *)propertyName {
  return ADPropertyValuesHolder_getMethodNameWithNSString_withNSString_(prefix, propertyName);
}

+ (NSString *)nGetIntMethodWithIOSClass:(IOSClass *)targetClass
                           withNSString:(NSString *)methodName {
  return ADPropertyValuesHolder_nGetIntMethodWithIOSClass_withNSString_(targetClass, methodName);
}

+ (NSString *)nGetFloatMethodWithIOSClass:(IOSClass *)targetClass
                             withNSString:(NSString *)methodName {
  return ADPropertyValuesHolder_nGetFloatMethodWithIOSClass_withNSString_(targetClass, methodName);
}

+ (NSString *)nGetMultipleIntMethodWithIOSClass:(IOSClass *)targetClass
                                   withNSString:(NSString *)methodName
                                        withInt:(int32_t)numParams {
  return ADPropertyValuesHolder_nGetMultipleIntMethodWithIOSClass_withNSString_withInt_(targetClass, methodName, numParams);
}

+ (NSString *)nGetMultipleFloatMethodWithIOSClass:(IOSClass *)targetClass
                                     withNSString:(NSString *)methodName
                                          withInt:(int32_t)numParams {
  return ADPropertyValuesHolder_nGetMultipleFloatMethodWithIOSClass_withNSString_withInt_(targetClass, methodName, numParams);
}

+ (void)nCallIntMethodWithId:(id)target
                withNSString:(NSString *)methodID
                     withInt:(int32_t)arg {
  ADPropertyValuesHolder_nCallIntMethodWithId_withNSString_withInt_(target, methodID, arg);
}

+ (void)nCallFloatMethodWithId:(id)target
                  withNSString:(NSString *)methodID
                     withFloat:(float)arg {
  ADPropertyValuesHolder_nCallFloatMethodWithId_withNSString_withFloat_(target, methodID, arg);
}

+ (void)nCallTwoIntMethodWithId:(id)target
                   withNSString:(NSString *)methodID
                        withInt:(int32_t)arg1
                        withInt:(int32_t)arg2 {
  ADPropertyValuesHolder_nCallTwoIntMethodWithId_withNSString_withInt_withInt_(target, methodID, arg1, arg2);
}

+ (void)nCallFourIntMethodWithId:(id)target
                    withNSString:(NSString *)methodID
                         withInt:(int32_t)arg1
                         withInt:(int32_t)arg2
                         withInt:(int32_t)arg3
                         withInt:(int32_t)arg4 {
  ADPropertyValuesHolder_nCallFourIntMethodWithId_withNSString_withInt_withInt_withInt_withInt_(target, methodID, arg1, arg2, arg3, arg4);
}

+ (void)nCallMultipleIntMethodWithId:(id)target
                        withNSString:(NSString *)methodID
                        withIntArray:(IOSIntArray *)args {
  ADPropertyValuesHolder_nCallMultipleIntMethodWithId_withNSString_withIntArray_(target, methodID, args);
}

+ (void)nCallTwoFloatMethodWithId:(id)target
                     withNSString:(NSString *)methodID
                        withFloat:(float)arg1
                        withFloat:(float)arg2 {
  ADPropertyValuesHolder_nCallTwoFloatMethodWithId_withNSString_withFloat_withFloat_(target, methodID, arg1, arg2);
}

+ (void)nCallFourFloatMethodWithId:(id)target
                      withNSString:(NSString *)methodID
                         withFloat:(float)arg1
                         withFloat:(float)arg2
                         withFloat:(float)arg3
                         withFloat:(float)arg4 {
  ADPropertyValuesHolder_nCallFourFloatMethodWithId_withNSString_withFloat_withFloat_withFloat_withFloat_(target, methodID, arg1, arg2, arg3, arg4);
}

+ (void)nCallMultipleFloatMethodWithId:(id)target
                          withNSString:(NSString *)methodID
                        withFloatArray:(IOSFloatArray *)args {
  ADPropertyValuesHolder_nCallMultipleFloatMethodWithId_withNSString_withFloatArray_(target, methodID, args);
}

- (void)dealloc {
  RELEASE_(mPropertyName_);
  RELEASE_(mProperty_);
  RELEASE_(mSetter_);
  RELEASE_(mGetter_);
  RELEASE_(mValueType_);
  RELEASE_(mKeyframes_);
  RELEASE_(mTmpValueArray_);
  RELEASE_(mEvaluator_);
  RELEASE_(mAnimatedValue_);
  RELEASE_(mConverter_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 1, -1, -1, -1, -1 },
    { NULL, "LADPropertyValuesHolder;", 0x89, 2, 3, -1, -1, -1, -1 },
    { NULL, "LADPropertyValuesHolder;", 0x89, 2, 4, -1, 5, -1, -1 },
    { NULL, "LADPropertyValuesHolder;", 0x9, 6, 7, -1, -1, -1, -1 },
    { NULL, "LADPropertyValuesHolder;", 0x9, 6, 8, -1, -1, -1, -1 },
    { NULL, "LADPropertyValuesHolder;", 0x89, 6, 9, -1, 10, 11, -1 },
    { NULL, "LADPropertyValuesHolder;", 0x89, 6, 12, -1, 13, -1, -1 },
    { NULL, "LADPropertyValuesHolder;", 0x89, 14, 15, -1, -1, -1, -1 },
    { NULL, "LADPropertyValuesHolder;", 0x89, 14, 16, -1, 17, -1, -1 },
    { NULL, "LADPropertyValuesHolder;", 0x9, 18, 19, -1, -1, -1, -1 },
    { NULL, "LADPropertyValuesHolder;", 0x9, 18, 8, -1, -1, -1, -1 },
    { NULL, "LADPropertyValuesHolder;", 0x89, 18, 9, -1, 20, 21, -1 },
    { NULL, "LADPropertyValuesHolder;", 0x89, 18, 12, -1, 22, -1, -1 },
    { NULL, "LADPropertyValuesHolder;", 0x89, 23, 24, -1, -1, -1, -1 },
    { NULL, "LADPropertyValuesHolder;", 0x9, 23, 25, -1, 26, -1, -1 },
    { NULL, "LADPropertyValuesHolder;", 0x89, 23, 27, -1, 28, 29, -1 },
    { NULL, "LADPropertyValuesHolder;", 0x89, 23, 30, -1, 31, 32, -1 },
    { NULL, "LADPropertyValuesHolder;", 0x9, 23, 33, -1, 34, -1, -1 },
    { NULL, "LADPropertyValuesHolder;", 0x89, 35, 36, -1, -1, -1, -1 },
    { NULL, "LADPropertyValuesHolder;", 0x89, 35, 37, -1, -1, -1, -1 },
    { NULL, "LADPropertyValuesHolder;", 0x9, 38, 39, -1, -1, -1, -1 },
    { NULL, "LADPropertyValuesHolder;", 0x9, 38, 40, -1, -1, -1, -1 },
    { NULL, "V", 0x81, 41, 42, -1, -1, -1, -1 },
    { NULL, "V", 0x81, 43, 44, -1, -1, -1, -1 },
    { NULL, "V", 0x81, 45, 46, -1, -1, -1, -1 },
    { NULL, "V", 0x81, 47, 48, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 49, 50, -1, -1, -1, -1 },
    { NULL, "LJavaLangReflectMethod;", 0x2, 51, 52, -1, -1, -1, -1 },
    { NULL, "LJavaLangReflectMethod;", 0x2, 53, 54, -1, 55, -1, -1 },
    { NULL, "V", 0x0, 56, 57, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 58, 57, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 59, 60, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, 61, 60, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 62, 63, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 64, 60, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 65, 60, -1, -1, -1, -1 },
    { NULL, "LADPropertyValuesHolder;", 0x1, 66, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 67, 60, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 68, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 69, 70, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 71, 72, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 73, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 74, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 75, 76, -1, -1, -1, -1 },
    { NULL, "LIOSClass;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 77, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x8, 78, 79, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 80, 81, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 82, 81, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 83, 84, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 85, 84, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 86, 87, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 88, 89, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 90, 91, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 92, 93, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 94, 95, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 96, 97, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 98, 99, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 100, 101, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(initWithADProperty:);
  methods[2].selector = @selector(ofIntWithNSString:withIntArray:);
  methods[3].selector = @selector(ofIntWithADProperty:withIntArray:);
  methods[4].selector = @selector(ofMultiIntWithNSString:withIntArray2:);
  methods[5].selector = @selector(ofMultiIntWithNSString:withADPath:);
  methods[6].selector = @selector(ofMultiIntWithNSString:withADTypeConverter:withADTypeEvaluator:withNSObjectArray:);
  methods[7].selector = @selector(ofMultiIntWithNSString:withADTypeConverter:withADTypeEvaluator:withADKeyframeArray:);
  methods[8].selector = @selector(ofFloatWithNSString:withFloatArray:);
  methods[9].selector = @selector(ofFloatWithADProperty:withFloatArray:);
  methods[10].selector = @selector(ofMultiFloatWithNSString:withFloatArray2:);
  methods[11].selector = @selector(ofMultiFloatWithNSString:withADPath:);
  methods[12].selector = @selector(ofMultiFloatWithNSString:withADTypeConverter:withADTypeEvaluator:withNSObjectArray:);
  methods[13].selector = @selector(ofMultiFloatWithNSString:withADTypeConverter:withADTypeEvaluator:withADKeyframeArray:);
  methods[14].selector = @selector(ofObjectWithNSString:withADTypeEvaluator:withNSObjectArray:);
  methods[15].selector = @selector(ofObjectWithNSString:withADTypeConverter:withADPath:);
  methods[16].selector = @selector(ofObjectWithADProperty:withADTypeEvaluator:withNSObjectArray:);
  methods[17].selector = @selector(ofObjectWithADProperty:withADTypeConverter:withADTypeEvaluator:withNSObjectArray:);
  methods[18].selector = @selector(ofObjectWithADProperty:withADTypeConverter:withADPath:);
  methods[19].selector = @selector(ofKeyframeWithNSString:withADKeyframeArray:);
  methods[20].selector = @selector(ofKeyframeWithADProperty:withADKeyframeArray:);
  methods[21].selector = @selector(ofKeyframesWithNSString:withADIKeyframes:);
  methods[22].selector = @selector(ofKeyframesWithADProperty:withADIKeyframes:);
  methods[23].selector = @selector(setIntValuesWithIntArray:);
  methods[24].selector = @selector(setFloatValuesWithFloatArray:);
  methods[25].selector = @selector(setIKeyframesWithADKeyframeArray:);
  methods[26].selector = @selector(setObjectValuesWithNSObjectArray:);
  methods[27].selector = @selector(setConverterWithADTypeConverter:);
  methods[28].selector = @selector(getPropertyFunctionWithIOSClass:withNSString:withIOSClass:);
  methods[29].selector = @selector(setupSetterOrGetterWithIOSClass:withJavaUtilHashMap:withNSString:withIOSClass:);
  methods[30].selector = @selector(setupSetterWithIOSClass:);
  methods[31].selector = @selector(setupGetterWithIOSClass:);
  methods[32].selector = @selector(setupSetterAndGetterWithId:);
  methods[33].selector = @selector(convertBackWithId:);
  methods[34].selector = @selector(setupValueWithId:withADKeyframe:);
  methods[35].selector = @selector(setupStartValueWithId:);
  methods[36].selector = @selector(setupEndValueWithId:);
  methods[37].selector = @selector(java_clone);
  methods[38].selector = @selector(setAnimatedValueWithId:);
  methods[39].selector = @selector(init__);
  methods[40].selector = @selector(setEvaluatorWithADTypeEvaluator:);
  methods[41].selector = @selector(calculateValueWithFloat:);
  methods[42].selector = @selector(setPropertyNameWithNSString:);
  methods[43].selector = @selector(setPropertyWithADProperty:);
  methods[44].selector = @selector(getPropertyName);
  methods[45].selector = @selector(getAnimatedValue);
  methods[46].selector = @selector(getPropertyValuesWithADPropertyValuesHolder_PropertyValues:);
  methods[47].selector = @selector(getValueType);
  methods[48].selector = @selector(description);
  methods[49].selector = @selector(getMethodNameWithNSString:withNSString:);
  methods[50].selector = @selector(nGetIntMethodWithIOSClass:withNSString:);
  methods[51].selector = @selector(nGetFloatMethodWithIOSClass:withNSString:);
  methods[52].selector = @selector(nGetMultipleIntMethodWithIOSClass:withNSString:withInt:);
  methods[53].selector = @selector(nGetMultipleFloatMethodWithIOSClass:withNSString:withInt:);
  methods[54].selector = @selector(nCallIntMethodWithId:withNSString:withInt:);
  methods[55].selector = @selector(nCallFloatMethodWithId:withNSString:withFloat:);
  methods[56].selector = @selector(nCallTwoIntMethodWithId:withNSString:withInt:withInt:);
  methods[57].selector = @selector(nCallFourIntMethodWithId:withNSString:withInt:withInt:withInt:withInt:);
  methods[58].selector = @selector(nCallMultipleIntMethodWithId:withNSString:withIntArray:);
  methods[59].selector = @selector(nCallTwoFloatMethodWithId:withNSString:withFloat:withFloat:);
  methods[60].selector = @selector(nCallFourFloatMethodWithId:withNSString:withFloat:withFloat:withFloat:withFloat:);
  methods[61].selector = @selector(nCallMultipleFloatMethodWithId:withNSString:withFloatArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mPropertyName_", "LNSString;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mProperty_", "LADProperty;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mSetter_", "LJavaLangReflectMethod;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mGetter_", "LJavaLangReflectMethod;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mValueType_", "LIOSClass;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mKeyframes_", "LADIKeyframes;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "sIntEvaluator", "LADTypeEvaluator;", .constantValue.asLong = 0, 0x1a, -1, 102, -1, -1 },
    { "sFloatEvaluator", "LADTypeEvaluator;", .constantValue.asLong = 0, 0x1a, -1, 103, -1, -1 },
    { "FLOAT_VARIANTS", "[LIOSClass;", .constantValue.asLong = 0, 0xa, -1, 104, -1, -1 },
    { "INTEGER_VARIANTS", "[LIOSClass;", .constantValue.asLong = 0, 0xa, -1, 105, -1, -1 },
    { "DOUBLE_VARIANTS", "[LIOSClass;", .constantValue.asLong = 0, 0xa, -1, 106, -1, -1 },
    { "sSetterPropertyMap", "LJavaUtilHashMap;", .constantValue.asLong = 0, 0x1a, -1, 107, 108, -1 },
    { "sGetterPropertyMap", "LJavaUtilHashMap;", .constantValue.asLong = 0, 0x1a, -1, 109, 108, -1 },
    { "mTmpValueArray_", "[LNSObject;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "mEvaluator_", "LADTypeEvaluator;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mAnimatedValue_", "LNSObject;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mConverter_", "LADTypeConverter;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "LADProperty;", "ofInt", "LNSString;[I", "LADProperty;[I", "(Lr/android/util/Property<*Ljava/lang/Integer;>;[I)Lr/android/animation/PropertyValuesHolder;", "ofMultiInt", "LNSString;[[I", "LNSString;LADPath;", "LNSString;LADTypeConverter;LADTypeEvaluator;[LNSObject;", "<V:Ljava/lang/Object;>(Ljava/lang/String;Lr/android/animation/TypeConverter<TV;[I>;Lr/android/animation/TypeEvaluator<TV;>;[TV;)Lr/android/animation/PropertyValuesHolder;", (void *)&ADPropertyValuesHolder__Annotations$0, "LNSString;LADTypeConverter;LADTypeEvaluator;[LADKeyframe;", "<T:Ljava/lang/Object;>(Ljava/lang/String;Lr/android/animation/TypeConverter<TT;[I>;Lr/android/animation/TypeEvaluator<TT;>;[Lr/android/animation/Keyframe;)Lr/android/animation/PropertyValuesHolder;", "ofFloat", "LNSString;[F", "LADProperty;[F", "(Lr/android/util/Property<*Ljava/lang/Float;>;[F)Lr/android/animation/PropertyValuesHolder;", "ofMultiFloat", "LNSString;[[F", "<V:Ljava/lang/Object;>(Ljava/lang/String;Lr/android/animation/TypeConverter<TV;[F>;Lr/android/animation/TypeEvaluator<TV;>;[TV;)Lr/android/animation/PropertyValuesHolder;", (void *)&ADPropertyValuesHolder__Annotations$1, "<T:Ljava/lang/Object;>(Ljava/lang/String;Lr/android/animation/TypeConverter<TT;[F>;Lr/android/animation/TypeEvaluator<TT;>;[Lr/android/animation/Keyframe;)Lr/android/animation/PropertyValuesHolder;", "ofObject", "LNSString;LADTypeEvaluator;[LNSObject;", "LNSString;LADTypeConverter;LADPath;", "(Ljava/lang/String;Lr/android/animation/TypeConverter<Lr/android/graphics/PointF;*>;Lr/android/graphics/Path;)Lr/android/animation/PropertyValuesHolder;", "LADProperty;LADTypeEvaluator;[LNSObject;", "<V:Ljava/lang/Object;>(Lr/android/util/Property;Lr/android/animation/TypeEvaluator<TV;>;[TV;)Lr/android/animation/PropertyValuesHolder;", (void *)&ADPropertyValuesHolder__Annotations$2, "LADProperty;LADTypeConverter;LADTypeEvaluator;[LNSObject;", "<T:Ljava/lang/Object;V:Ljava/lang/Object;>(Lr/android/util/Property<*TV;>;Lr/android/animation/TypeConverter<TT;TV;>;Lr/android/animation/TypeEvaluator<TT;>;[TT;)Lr/android/animation/PropertyValuesHolder;", (void *)&ADPropertyValuesHolder__Annotations$3, "LADProperty;LADTypeConverter;LADPath;", "<V:Ljava/lang/Object;>(Lr/android/util/Property<*TV;>;Lr/android/animation/TypeConverter<Lr/android/graphics/PointF;TV;>;Lr/android/graphics/Path;)Lr/android/animation/PropertyValuesHolder;", "ofKeyframe", "LNSString;[LADKeyframe;", "LADProperty;[LADKeyframe;", "ofKeyframes", "LNSString;LADIKeyframes;", "LADProperty;LADIKeyframes;", "setIntValues", "[I", "setFloatValues", "[F", "setIKeyframes", "[LADKeyframe;", "setObjectValues", "[LNSObject;", "setConverter", "LADTypeConverter;", "getPropertyFunction", "LIOSClass;LNSString;LIOSClass;", "setupSetterOrGetter", "LIOSClass;LJavaUtilHashMap;LNSString;LIOSClass;", "(Ljava/lang/Class;Ljava/util/HashMap<Ljava/lang/Class;Ljava/util/HashMap<Ljava/lang/String;Ljava/lang/reflect/Method;>;>;Ljava/lang/String;Ljava/lang/Class;)Ljava/lang/reflect/Method;", "setupSetter", "LIOSClass;", "setupGetter", "setupSetterAndGetter", "LNSObject;", "convertBack", "setupValue", "LNSObject;LADKeyframe;", "setupStartValue", "setupEndValue", "clone", "setAnimatedValue", "init", "setEvaluator", "LADTypeEvaluator;", "calculateValue", "F", "setPropertyName", "setProperty", "getPropertyValues", "LADPropertyValuesHolder_PropertyValues;", "toString", "getMethodName", "LNSString;LNSString;", "nGetIntMethod", "LIOSClass;LNSString;", "nGetFloatMethod", "nGetMultipleIntMethod", "LIOSClass;LNSString;I", "nGetMultipleFloatMethod", "nCallIntMethod", "LNSObject;LNSString;I", "nCallFloatMethod", "LNSObject;LNSString;F", "nCallTwoIntMethod", "LNSObject;LNSString;II", "nCallFourIntMethod", "LNSObject;LNSString;IIII", "nCallMultipleIntMethod", "LNSObject;LNSString;[I", "nCallTwoFloatMethod", "LNSObject;LNSString;FF", "nCallFourFloatMethod", "LNSObject;LNSString;FFFF", "nCallMultipleFloatMethod", "LNSObject;LNSString;[F", &ADPropertyValuesHolder_sIntEvaluator, &ADPropertyValuesHolder_sFloatEvaluator, &ADPropertyValuesHolder_FLOAT_VARIANTS, &ADPropertyValuesHolder_INTEGER_VARIANTS, &ADPropertyValuesHolder_DOUBLE_VARIANTS, &ADPropertyValuesHolder_sSetterPropertyMap, "Ljava/util/HashMap<Ljava/lang/Class;Ljava/util/HashMap<Ljava/lang/String;Ljava/lang/reflect/Method;>;>;", &ADPropertyValuesHolder_sGetterPropertyMap, "LADPropertyValuesHolder_IntPropertyValuesHolder;LADPropertyValuesHolder_FloatPropertyValuesHolder;LADPropertyValuesHolder_MultiFloatValuesHolder;LADPropertyValuesHolder_MultiIntValuesHolder;LADPropertyValuesHolder_PointFToFloatArray;LADPropertyValuesHolder_PointFToIntArray;LADPropertyValuesHolder_PropertyValues;" };
  static const J2ObjcClassInfo _ADPropertyValuesHolder = { "PropertyValuesHolder", "r.android.animation", ptrTable, methods, fields, 7, 0x1, 62, 17, -1, 110, -1, -1, -1 };
  return &_ADPropertyValuesHolder;
}

- (id)copyWithZone:(NSZone *)zone {
  return [[self java_clone] retain];
}

+ (void)initialize {
  if (self == [ADPropertyValuesHolder class]) {
    JreStrongAssignAndConsume(&ADPropertyValuesHolder_sIntEvaluator, new_ADIntEvaluator_init());
    JreStrongAssignAndConsume(&ADPropertyValuesHolder_sFloatEvaluator, new_ADFloatEvaluator_init());
    JreStrongAssignAndConsume(&ADPropertyValuesHolder_FLOAT_VARIANTS, [IOSObjectArray newArrayWithObjects:(id[]){ [IOSClass floatClass], JavaLangFloat_class_(), [IOSClass doubleClass], [IOSClass intClass], JavaLangDouble_class_(), JavaLangInteger_class_() } count:6 type:IOSClass_class_()]);
    JreStrongAssignAndConsume(&ADPropertyValuesHolder_INTEGER_VARIANTS, [IOSObjectArray newArrayWithObjects:(id[]){ [IOSClass intClass], JavaLangInteger_class_(), [IOSClass floatClass], [IOSClass doubleClass], JavaLangFloat_class_(), JavaLangDouble_class_() } count:6 type:IOSClass_class_()]);
    JreStrongAssignAndConsume(&ADPropertyValuesHolder_DOUBLE_VARIANTS, [IOSObjectArray newArrayWithObjects:(id[]){ [IOSClass doubleClass], JavaLangDouble_class_(), [IOSClass floatClass], [IOSClass intClass], JavaLangFloat_class_(), JavaLangInteger_class_() } count:6 type:IOSClass_class_()]);
    JreStrongAssignAndConsume(&ADPropertyValuesHolder_sSetterPropertyMap, new_JavaUtilHashMap_init());
    JreStrongAssignAndConsume(&ADPropertyValuesHolder_sGetterPropertyMap, new_JavaUtilHashMap_init());
    J2OBJC_SET_INITIALIZED(ADPropertyValuesHolder)
  }
}

@end

void ADPropertyValuesHolder_initWithNSString_(ADPropertyValuesHolder *self, NSString *propertyName) {
  NSObject_init(self);
  JreStrongAssign(&self->mSetter_, nil);
  JreStrongAssign(&self->mGetter_, nil);
  JreStrongAssign(&self->mKeyframes_, nil);
  JreStrongAssignAndConsume(&self->mTmpValueArray_, [IOSObjectArray newArrayWithLength:1 type:NSObject_class_()]);
  JreStrongAssign(&self->mPropertyName_, propertyName);
}

ADPropertyValuesHolder *new_ADPropertyValuesHolder_initWithNSString_(NSString *propertyName) {
  J2OBJC_NEW_IMPL(ADPropertyValuesHolder, initWithNSString_, propertyName)
}

ADPropertyValuesHolder *create_ADPropertyValuesHolder_initWithNSString_(NSString *propertyName) {
  J2OBJC_CREATE_IMPL(ADPropertyValuesHolder, initWithNSString_, propertyName)
}

void ADPropertyValuesHolder_initWithADProperty_(ADPropertyValuesHolder *self, ADProperty *property) {
  NSObject_init(self);
  JreStrongAssign(&self->mSetter_, nil);
  JreStrongAssign(&self->mGetter_, nil);
  JreStrongAssign(&self->mKeyframes_, nil);
  JreStrongAssignAndConsume(&self->mTmpValueArray_, [IOSObjectArray newArrayWithLength:1 type:NSObject_class_()]);
  JreStrongAssign(&self->mProperty_, property);
  if (property != nil) {
    JreStrongAssign(&self->mPropertyName_, [property getName]);
  }
}

ADPropertyValuesHolder *new_ADPropertyValuesHolder_initWithADProperty_(ADProperty *property) {
  J2OBJC_NEW_IMPL(ADPropertyValuesHolder, initWithADProperty_, property)
}

ADPropertyValuesHolder *create_ADPropertyValuesHolder_initWithADProperty_(ADProperty *property) {
  J2OBJC_CREATE_IMPL(ADPropertyValuesHolder, initWithADProperty_, property)
}

ADPropertyValuesHolder *ADPropertyValuesHolder_ofIntWithNSString_withIntArray_(NSString *propertyName, IOSIntArray *values) {
  ADPropertyValuesHolder_initialize();
  return create_ADPropertyValuesHolder_IntPropertyValuesHolder_initWithNSString_withIntArray_(propertyName, values);
}

ADPropertyValuesHolder *ADPropertyValuesHolder_ofIntWithADProperty_withIntArray_(ADProperty *property, IOSIntArray *values) {
  ADPropertyValuesHolder_initialize();
  return create_ADPropertyValuesHolder_IntPropertyValuesHolder_initWithADProperty_withIntArray_(property, values);
}

ADPropertyValuesHolder *ADPropertyValuesHolder_ofMultiIntWithNSString_withIntArray2_(NSString *propertyName, IOSObjectArray *values) {
  ADPropertyValuesHolder_initialize();
  if (((IOSObjectArray *) nil_chk(values))->size_ < 2) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"At least 2 values must be supplied");
  }
  int32_t numParameters = 0;
  for (int32_t i = 0; i < values->size_; i++) {
    if (IOSObjectArray_Get(values, i) == nil) {
      @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"values must not be null");
    }
    int32_t length = ((IOSIntArray *) nil_chk(IOSObjectArray_Get(values, i)))->size_;
    if (i == 0) {
      numParameters = length;
    }
    else if (length != numParameters) {
      @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Values must all have the same length");
    }
  }
  ADIntArrayEvaluator *evaluator = create_ADIntArrayEvaluator_initWithIntArray_([IOSIntArray arrayWithLength:numParameters]);
  return create_ADPropertyValuesHolder_MultiIntValuesHolder_initWithNSString_withADTypeConverter_withADTypeEvaluator_withNSObjectArray_(propertyName, nil, evaluator, values);
}

ADPropertyValuesHolder *ADPropertyValuesHolder_ofMultiIntWithNSString_withADPath_(NSString *propertyName, ADPath *path) {
  ADPropertyValuesHolder_initialize();
  id<ADIKeyframes> keyframes = ADKeyframeSet_ofPathWithADPath_(path);
  ADPropertyValuesHolder_PointFToIntArray *converter = create_ADPropertyValuesHolder_PointFToIntArray_init();
  return create_ADPropertyValuesHolder_MultiIntValuesHolder_initWithNSString_withADTypeConverter_withADTypeEvaluator_withADIKeyframes_(propertyName, converter, nil, keyframes);
}

ADPropertyValuesHolder *ADPropertyValuesHolder_ofMultiIntWithNSString_withADTypeConverter_withADTypeEvaluator_withNSObjectArray_(NSString *propertyName, ADTypeConverter *converter, id<ADTypeEvaluator> evaluator, IOSObjectArray *values) {
  ADPropertyValuesHolder_initialize();
  return create_ADPropertyValuesHolder_MultiIntValuesHolder_initWithNSString_withADTypeConverter_withADTypeEvaluator_withNSObjectArray_(propertyName, converter, evaluator, values);
}

ADPropertyValuesHolder *ADPropertyValuesHolder_ofMultiIntWithNSString_withADTypeConverter_withADTypeEvaluator_withADKeyframeArray_(NSString *propertyName, ADTypeConverter *converter, id<ADTypeEvaluator> evaluator, IOSObjectArray *values) {
  ADPropertyValuesHolder_initialize();
  ADKeyframeSet *keyframeSet = ADKeyframeSet_ofKeyframeWithADKeyframeArray_(values);
  return create_ADPropertyValuesHolder_MultiIntValuesHolder_initWithNSString_withADTypeConverter_withADTypeEvaluator_withADIKeyframes_(propertyName, converter, evaluator, keyframeSet);
}

ADPropertyValuesHolder *ADPropertyValuesHolder_ofFloatWithNSString_withFloatArray_(NSString *propertyName, IOSFloatArray *values) {
  ADPropertyValuesHolder_initialize();
  return create_ADPropertyValuesHolder_FloatPropertyValuesHolder_initWithNSString_withFloatArray_(propertyName, values);
}

ADPropertyValuesHolder *ADPropertyValuesHolder_ofFloatWithADProperty_withFloatArray_(ADProperty *property, IOSFloatArray *values) {
  ADPropertyValuesHolder_initialize();
  return create_ADPropertyValuesHolder_FloatPropertyValuesHolder_initWithADProperty_withFloatArray_(property, values);
}

ADPropertyValuesHolder *ADPropertyValuesHolder_ofMultiFloatWithNSString_withFloatArray2_(NSString *propertyName, IOSObjectArray *values) {
  ADPropertyValuesHolder_initialize();
  if (((IOSObjectArray *) nil_chk(values))->size_ < 2) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"At least 2 values must be supplied");
  }
  int32_t numParameters = 0;
  for (int32_t i = 0; i < values->size_; i++) {
    if (IOSObjectArray_Get(values, i) == nil) {
      @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"values must not be null");
    }
    int32_t length = ((IOSFloatArray *) nil_chk(IOSObjectArray_Get(values, i)))->size_;
    if (i == 0) {
      numParameters = length;
    }
    else if (length != numParameters) {
      @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Values must all have the same length");
    }
  }
  ADFloatArrayEvaluator *evaluator = create_ADFloatArrayEvaluator_initWithFloatArray_([IOSFloatArray arrayWithLength:numParameters]);
  return create_ADPropertyValuesHolder_MultiFloatValuesHolder_initWithNSString_withADTypeConverter_withADTypeEvaluator_withNSObjectArray_(propertyName, nil, evaluator, values);
}

ADPropertyValuesHolder *ADPropertyValuesHolder_ofMultiFloatWithNSString_withADPath_(NSString *propertyName, ADPath *path) {
  ADPropertyValuesHolder_initialize();
  id<ADIKeyframes> keyframes = ADKeyframeSet_ofPathWithADPath_(path);
  ADPropertyValuesHolder_PointFToFloatArray *converter = create_ADPropertyValuesHolder_PointFToFloatArray_init();
  return create_ADPropertyValuesHolder_MultiFloatValuesHolder_initWithNSString_withADTypeConverter_withADTypeEvaluator_withADIKeyframes_(propertyName, converter, nil, keyframes);
}

ADPropertyValuesHolder *ADPropertyValuesHolder_ofMultiFloatWithNSString_withADTypeConverter_withADTypeEvaluator_withNSObjectArray_(NSString *propertyName, ADTypeConverter *converter, id<ADTypeEvaluator> evaluator, IOSObjectArray *values) {
  ADPropertyValuesHolder_initialize();
  return create_ADPropertyValuesHolder_MultiFloatValuesHolder_initWithNSString_withADTypeConverter_withADTypeEvaluator_withNSObjectArray_(propertyName, converter, evaluator, values);
}

ADPropertyValuesHolder *ADPropertyValuesHolder_ofMultiFloatWithNSString_withADTypeConverter_withADTypeEvaluator_withADKeyframeArray_(NSString *propertyName, ADTypeConverter *converter, id<ADTypeEvaluator> evaluator, IOSObjectArray *values) {
  ADPropertyValuesHolder_initialize();
  ADKeyframeSet *keyframeSet = ADKeyframeSet_ofKeyframeWithADKeyframeArray_(values);
  return create_ADPropertyValuesHolder_MultiFloatValuesHolder_initWithNSString_withADTypeConverter_withADTypeEvaluator_withADIKeyframes_(propertyName, converter, evaluator, keyframeSet);
}

ADPropertyValuesHolder *ADPropertyValuesHolder_ofObjectWithNSString_withADTypeEvaluator_withNSObjectArray_(NSString *propertyName, id<ADTypeEvaluator> evaluator, IOSObjectArray *values) {
  ADPropertyValuesHolder_initialize();
  ADPropertyValuesHolder *pvh = create_ADPropertyValuesHolder_initWithNSString_(propertyName);
  [pvh setObjectValuesWithNSObjectArray:values];
  [pvh setEvaluatorWithADTypeEvaluator:evaluator];
  return pvh;
}

ADPropertyValuesHolder *ADPropertyValuesHolder_ofObjectWithNSString_withADTypeConverter_withADPath_(NSString *propertyName, ADTypeConverter *converter, ADPath *path) {
  ADPropertyValuesHolder_initialize();
  ADPropertyValuesHolder *pvh = create_ADPropertyValuesHolder_initWithNSString_(propertyName);
  JreStrongAssign(&pvh->mKeyframes_, ADKeyframeSet_ofPathWithADPath_(path));
  JreStrongAssign(&pvh->mValueType_, ADPointF_class_());
  [pvh setConverterWithADTypeConverter:converter];
  return pvh;
}

ADPropertyValuesHolder *ADPropertyValuesHolder_ofObjectWithADProperty_withADTypeEvaluator_withNSObjectArray_(ADProperty *property, id<ADTypeEvaluator> evaluator, IOSObjectArray *values) {
  ADPropertyValuesHolder_initialize();
  ADPropertyValuesHolder *pvh = create_ADPropertyValuesHolder_initWithADProperty_(property);
  [pvh setObjectValuesWithNSObjectArray:values];
  [pvh setEvaluatorWithADTypeEvaluator:evaluator];
  return pvh;
}

ADPropertyValuesHolder *ADPropertyValuesHolder_ofObjectWithADProperty_withADTypeConverter_withADTypeEvaluator_withNSObjectArray_(ADProperty *property, ADTypeConverter *converter, id<ADTypeEvaluator> evaluator, IOSObjectArray *values) {
  ADPropertyValuesHolder_initialize();
  ADPropertyValuesHolder *pvh = create_ADPropertyValuesHolder_initWithADProperty_(property);
  [pvh setConverterWithADTypeConverter:converter];
  [pvh setObjectValuesWithNSObjectArray:values];
  [pvh setEvaluatorWithADTypeEvaluator:evaluator];
  return pvh;
}

ADPropertyValuesHolder *ADPropertyValuesHolder_ofObjectWithADProperty_withADTypeConverter_withADPath_(ADProperty *property, ADTypeConverter *converter, ADPath *path) {
  ADPropertyValuesHolder_initialize();
  ADPropertyValuesHolder *pvh = create_ADPropertyValuesHolder_initWithADProperty_(property);
  JreStrongAssign(&pvh->mKeyframes_, ADKeyframeSet_ofPathWithADPath_(path));
  JreStrongAssign(&pvh->mValueType_, ADPointF_class_());
  [pvh setConverterWithADTypeConverter:converter];
  return pvh;
}

ADPropertyValuesHolder *ADPropertyValuesHolder_ofKeyframeWithNSString_withADKeyframeArray_(NSString *propertyName, IOSObjectArray *values) {
  ADPropertyValuesHolder_initialize();
  ADKeyframeSet *keyframeSet = ADKeyframeSet_ofKeyframeWithADKeyframeArray_(values);
  return ADPropertyValuesHolder_ofKeyframesWithNSString_withADIKeyframes_(propertyName, keyframeSet);
}

ADPropertyValuesHolder *ADPropertyValuesHolder_ofKeyframeWithADProperty_withADKeyframeArray_(ADProperty *property, IOSObjectArray *values) {
  ADPropertyValuesHolder_initialize();
  ADKeyframeSet *keyframeSet = ADKeyframeSet_ofKeyframeWithADKeyframeArray_(values);
  return ADPropertyValuesHolder_ofKeyframesWithADProperty_withADIKeyframes_(property, keyframeSet);
}

ADPropertyValuesHolder *ADPropertyValuesHolder_ofKeyframesWithNSString_withADIKeyframes_(NSString *propertyName, id<ADIKeyframes> keyframes) {
  ADPropertyValuesHolder_initialize();
  if ([ADIKeyframes_IntIKeyframes_class_() isInstance:keyframes]) {
    return create_ADPropertyValuesHolder_IntPropertyValuesHolder_initWithNSString_withADIKeyframes_IntIKeyframes_(propertyName, (id<ADIKeyframes_IntIKeyframes>) cast_check(keyframes, ADIKeyframes_IntIKeyframes_class_()));
  }
  else if ([ADIKeyframes_FloatIKeyframes_class_() isInstance:keyframes]) {
    return create_ADPropertyValuesHolder_FloatPropertyValuesHolder_initWithNSString_withADIKeyframes_FloatIKeyframes_(propertyName, (id<ADIKeyframes_FloatIKeyframes>) cast_check(keyframes, ADIKeyframes_FloatIKeyframes_class_()));
  }
  else {
    ADPropertyValuesHolder *pvh = create_ADPropertyValuesHolder_initWithNSString_(propertyName);
    JreStrongAssign(&pvh->mKeyframes_, keyframes);
    JreStrongAssign(&pvh->mValueType_, [((id<ADIKeyframes>) nil_chk(keyframes)) getType]);
    return pvh;
  }
}

ADPropertyValuesHolder *ADPropertyValuesHolder_ofKeyframesWithADProperty_withADIKeyframes_(ADProperty *property, id<ADIKeyframes> keyframes) {
  ADPropertyValuesHolder_initialize();
  if ([ADIKeyframes_IntIKeyframes_class_() isInstance:keyframes]) {
    return create_ADPropertyValuesHolder_IntPropertyValuesHolder_initWithADProperty_withADIKeyframes_IntIKeyframes_(property, (id<ADIKeyframes_IntIKeyframes>) cast_check(keyframes, ADIKeyframes_IntIKeyframes_class_()));
  }
  else if ([ADIKeyframes_FloatIKeyframes_class_() isInstance:keyframes]) {
    return create_ADPropertyValuesHolder_FloatPropertyValuesHolder_initWithADProperty_withADIKeyframes_FloatIKeyframes_(property, (id<ADIKeyframes_FloatIKeyframes>) cast_check(keyframes, ADIKeyframes_FloatIKeyframes_class_()));
  }
  else {
    ADPropertyValuesHolder *pvh = create_ADPropertyValuesHolder_initWithADProperty_(property);
    JreStrongAssign(&pvh->mKeyframes_, keyframes);
    JreStrongAssign(&pvh->mValueType_, [((id<ADIKeyframes>) nil_chk(keyframes)) getType]);
    return pvh;
  }
}

void ADPropertyValuesHolder_setIntValuesWithIntArray_(ADPropertyValuesHolder *self, IOSIntArray *values) {
  JreStrongAssign(&self->mValueType_, [IOSClass intClass]);
  JreStrongAssign(&self->mKeyframes_, ADKeyframeSet_ofIntWithIntArray_(values));
}

void ADPropertyValuesHolder_setFloatValuesWithFloatArray_(ADPropertyValuesHolder *self, IOSFloatArray *values) {
  JreStrongAssign(&self->mValueType_, [IOSClass floatClass]);
  JreStrongAssign(&self->mKeyframes_, ADKeyframeSet_ofFloatWithFloatArray_(values));
}

JavaLangReflectMethod *ADPropertyValuesHolder_getPropertyFunctionWithIOSClass_withNSString_withIOSClass_(ADPropertyValuesHolder *self, IOSClass *targetClass, NSString *prefix, IOSClass *valueType) {
  JavaLangReflectMethod *returnVal = nil;
  NSString *methodName = ADPropertyValuesHolder_getMethodNameWithNSString_withNSString_(prefix, self->mPropertyName_);
  IOSObjectArray *args = nil;
  if (valueType == nil) {
    @try {
      returnVal = [((IOSClass *) nil_chk(targetClass)) getMethod:methodName parameterTypes:args];
    }
    @catch (JavaLangNoSuchMethodException *e) {
    }
  }
  else {
    args = [IOSObjectArray arrayWithLength:1 type:IOSClass_class_()];
    IOSObjectArray *typeVariants;
    if ([valueType isEqual:JavaLangFloat_class_()]) {
      typeVariants = ADPropertyValuesHolder_FLOAT_VARIANTS;
    }
    else if ([valueType isEqual:JavaLangInteger_class_()]) {
      typeVariants = ADPropertyValuesHolder_INTEGER_VARIANTS;
    }
    else if ([valueType isEqual:JavaLangDouble_class_()]) {
      typeVariants = ADPropertyValuesHolder_DOUBLE_VARIANTS;
    }
    else {
      typeVariants = [IOSObjectArray arrayWithLength:1 type:IOSClass_class_()];
      IOSObjectArray_Set(typeVariants, 0, valueType);
    }
    {
      IOSObjectArray *a__ = typeVariants;
      IOSClass * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      IOSClass * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        IOSClass *typeVariant = RETAIN_AND_AUTORELEASE(*b__++);
        IOSObjectArray_Set(args, 0, typeVariant);
        @try {
          returnVal = [((IOSClass *) nil_chk(targetClass)) getMethod:methodName parameterTypes:args];
          if (self->mConverter_ == nil) {
            JreStrongAssign(&self->mValueType_, typeVariant);
          }
          return returnVal;
        }
        @catch (JavaLangNoSuchMethodException *e) {
        }
      }
    }
  }
  if (returnVal == nil) {
    ADLog_wWithNSString_withNSString_(@"PropertyValuesHolder", JreStrcat("$$$@$@", @"Method ", ADPropertyValuesHolder_getMethodNameWithNSString_withNSString_(prefix, self->mPropertyName_), @"() with type ", valueType, @" not found on target class ", targetClass));
  }
  return returnVal;
}

JavaLangReflectMethod *ADPropertyValuesHolder_setupSetterOrGetterWithIOSClass_withJavaUtilHashMap_withNSString_withIOSClass_(ADPropertyValuesHolder *self, IOSClass *targetClass, JavaUtilHashMap *propertyMapMap, NSString *prefix, IOSClass *valueType) {
  JavaLangReflectMethod *setterOrGetter = nil;
  @synchronized(propertyMapMap) {
    JavaUtilHashMap *propertyMap = JreRetainedLocalValue([((JavaUtilHashMap *) nil_chk(propertyMapMap)) getWithId:targetClass]);
    bool wasInMap = false;
    if (propertyMap != nil) {
      wasInMap = [propertyMap containsKeyWithId:self->mPropertyName_];
      if (wasInMap) {
        setterOrGetter = JreRetainedLocalValue([propertyMap getWithId:self->mPropertyName_]);
      }
    }
    if (!wasInMap) {
      setterOrGetter = ADPropertyValuesHolder_getPropertyFunctionWithIOSClass_withNSString_withIOSClass_(self, targetClass, prefix, valueType);
      if (propertyMap == nil) {
        propertyMap = create_JavaUtilHashMap_init();
        [propertyMapMap putWithId:targetClass withId:propertyMap];
      }
      [propertyMap putWithId:self->mPropertyName_ withId:setterOrGetter];
    }
  }
  return setterOrGetter;
}

void ADPropertyValuesHolder_setupSetterWithIOSClass_(ADPropertyValuesHolder *self, IOSClass *targetClass) {
  IOSClass *propertyType = self->mConverter_ == nil ? self->mValueType_ : [self->mConverter_ getTargetType];
  JreStrongAssign(&self->mSetter_, ADPropertyValuesHolder_setupSetterOrGetterWithIOSClass_withJavaUtilHashMap_withNSString_withIOSClass_(self, targetClass, ADPropertyValuesHolder_sSetterPropertyMap, @"set", propertyType));
}

void ADPropertyValuesHolder_setupGetterWithIOSClass_(ADPropertyValuesHolder *self, IOSClass *targetClass) {
  JreStrongAssign(&self->mGetter_, ADPropertyValuesHolder_setupSetterOrGetterWithIOSClass_withJavaUtilHashMap_withNSString_withIOSClass_(self, targetClass, ADPropertyValuesHolder_sGetterPropertyMap, @"get", nil));
}

id ADPropertyValuesHolder_convertBackWithId_(ADPropertyValuesHolder *self, id value) {
  if (self->mConverter_ != nil) {
    if (!([self->mConverter_ isKindOfClass:[ADBidirectionalTypeConverter class]])) {
      @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$$", @"Converter ", [[self->mConverter_ java_getClass] getName], @" must be a BidirectionalTypeConverter"));
    }
    value = [((ADBidirectionalTypeConverter *) cast_chk(self->mConverter_, [ADBidirectionalTypeConverter class])) convertBackWithId:value];
  }
  return value;
}

void ADPropertyValuesHolder_setupValueWithId_withADKeyframe_(ADPropertyValuesHolder *self, id target, ADKeyframe *kf) {
  if ([ASILifeCycleDecorator_class_() isInstance:target]) {
    id value = JreRetainedLocalValue([((id<ASIWidget>) nil_chk([((id<ASILifeCycleDecorator>) nil_chk(((id<ASILifeCycleDecorator>) cast_check(target, ASILifeCycleDecorator_class_())))) getWidget])) getAttributeWithNSString:self->mPropertyName_ withBoolean:true]);
    [((ADKeyframe *) nil_chk(kf)) setValueWithId:value];
    return;
  }
  if (self->mProperty_ != nil) {
    id value = ADPropertyValuesHolder_convertBackWithId_(self, [self->mProperty_ getWithId:target]);
    [((ADKeyframe *) nil_chk(kf)) setValueWithId:value];
  }
  else {
    @try {
      if (self->mGetter_ == nil) {
        IOSClass *targetClass = [nil_chk(target) java_getClass];
        ADPropertyValuesHolder_setupGetterWithIOSClass_(self, targetClass);
        if (self->mGetter_ == nil) {
          return;
        }
      }
      id value = ADPropertyValuesHolder_convertBackWithId_(self, [self->mGetter_ invokeWithId:target withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:NSObject_class_()]]);
      [((ADKeyframe *) nil_chk(kf)) setValueWithId:value];
    }
    @catch (JavaLangReflectInvocationTargetException *e) {
      ADLog_eWithNSString_withNSString_(@"PropertyValuesHolder", [e description]);
    }
    @catch (JavaLangIllegalAccessException *e) {
      ADLog_eWithNSString_withNSString_(@"PropertyValuesHolder", [e description]);
    }
  }
}

void ADPropertyValuesHolder_setPropertyWithADProperty_(ADPropertyValuesHolder *self, ADProperty *property) {
  JreStrongAssign(&self->mProperty_, property);
}

NSString *ADPropertyValuesHolder_getMethodNameWithNSString_withNSString_(NSString *prefix, NSString *propertyName) {
  ADPropertyValuesHolder_initialize();
  if (propertyName == nil || [propertyName java_length] == 0) {
    return prefix;
  }
  unichar firstLetter = JavaLangCharacter_toUpperCaseWithChar_([propertyName charAtWithInt:0]);
  NSString *theRest = [propertyName java_substring:1];
  return JreStrcat("$C$", prefix, firstLetter, theRest);
}

NSString *ADPropertyValuesHolder_nGetIntMethodWithIOSClass_withNSString_(IOSClass *targetClass, NSString *methodName) {
  ADPropertyValuesHolder_initialize();
  return methodName;
}

NSString *ADPropertyValuesHolder_nGetFloatMethodWithIOSClass_withNSString_(IOSClass *targetClass, NSString *methodName) {
  ADPropertyValuesHolder_initialize();
  return methodName;
}

NSString *ADPropertyValuesHolder_nGetMultipleIntMethodWithIOSClass_withNSString_withInt_(IOSClass *targetClass, NSString *methodName, int32_t numParams) {
  ADPropertyValuesHolder_initialize();
  return methodName;
}

NSString *ADPropertyValuesHolder_nGetMultipleFloatMethodWithIOSClass_withNSString_withInt_(IOSClass *targetClass, NSString *methodName, int32_t numParams) {
  ADPropertyValuesHolder_initialize();
  return methodName;
}

void ADPropertyValuesHolder_nCallIntMethodWithId_withNSString_withInt_(id target, NSString *methodID, int32_t arg) {
  ADPropertyValuesHolder_initialize();
  if ([target isKindOfClass:[ADView class]]) {
    if ([((NSString *) nil_chk(methodID)) java_hasPrefix:@"scroll"]) {
      return;
    }
    [((ADView *) nil_chk(((ADView *) target))) setMyAttributeWithNSString:methodID withId:JavaLangInteger_valueOfWithInt_(arg)];
  }
}

void ADPropertyValuesHolder_nCallFloatMethodWithId_withNSString_withFloat_(id target, NSString *methodID, float arg) {
  ADPropertyValuesHolder_initialize();
  if ([target isKindOfClass:[ADView class]]) {
    [((ADView *) nil_chk(((ADView *) target))) setMyAttributeWithNSString:methodID withId:JavaLangFloat_valueOfWithFloat_(arg)];
  }
}

void ADPropertyValuesHolder_nCallTwoIntMethodWithId_withNSString_withInt_withInt_(id target, NSString *methodID, int32_t arg1, int32_t arg2) {
  ADPropertyValuesHolder_initialize();
}

void ADPropertyValuesHolder_nCallFourIntMethodWithId_withNSString_withInt_withInt_withInt_withInt_(id target, NSString *methodID, int32_t arg1, int32_t arg2, int32_t arg3, int32_t arg4) {
  ADPropertyValuesHolder_initialize();
}

void ADPropertyValuesHolder_nCallMultipleIntMethodWithId_withNSString_withIntArray_(id target, NSString *methodID, IOSIntArray *args) {
  ADPropertyValuesHolder_initialize();
}

void ADPropertyValuesHolder_nCallTwoFloatMethodWithId_withNSString_withFloat_withFloat_(id target, NSString *methodID, float arg1, float arg2) {
  ADPropertyValuesHolder_initialize();
}

void ADPropertyValuesHolder_nCallFourFloatMethodWithId_withNSString_withFloat_withFloat_withFloat_withFloat_(id target, NSString *methodID, float arg1, float arg2, float arg3, float arg4) {
  ADPropertyValuesHolder_initialize();
}

void ADPropertyValuesHolder_nCallMultipleFloatMethodWithId_withNSString_withFloatArray_(id target, NSString *methodID, IOSFloatArray *args) {
  ADPropertyValuesHolder_initialize();
}

IOSObjectArray *ADPropertyValuesHolder__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangSafeVarargs() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *ADPropertyValuesHolder__Annotations$1() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangSafeVarargs() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *ADPropertyValuesHolder__Annotations$2() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangSafeVarargs() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

IOSObjectArray *ADPropertyValuesHolder__Annotations$3() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangSafeVarargs() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADPropertyValuesHolder)

J2OBJC_NAME_MAPPING(ADPropertyValuesHolder, "r.android.animation", "AD")

@implementation ADPropertyValuesHolder_PropertyValues_DataSource

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSObject;", 0x401, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getValueAtFractionWithFloat:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "getValueAtFraction", "F", "LADPropertyValuesHolder_PropertyValues;" };
  static const J2ObjcClassInfo _ADPropertyValuesHolder_PropertyValues_DataSource = { "DataSource", "r.android.animation", ptrTable, methods, NULL, 7, 0x609, 1, 0, 2, -1, -1, -1, -1 };
  return &_ADPropertyValuesHolder_PropertyValues_DataSource;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(ADPropertyValuesHolder_PropertyValues_DataSource)

@implementation ADPropertyValuesHolder_1

- (instancetype)initWithADPropertyValuesHolder:(ADPropertyValuesHolder *)outer$ {
  ADPropertyValuesHolder_1_initWithADPropertyValuesHolder_(self, outer$);
  return self;
}

- (id)getValueAtFractionWithFloat:(float)fraction {
  return JreRetainedLocalValue([((id<ADIKeyframes>) nil_chk(this$0_->mKeyframes_)) getValueWithFloat:fraction]);
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithADPropertyValuesHolder:);
  methods[1].selector = @selector(getValueAtFractionWithFloat:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LADPropertyValuesHolder;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LADPropertyValuesHolder;", "getValueAtFraction", "F", "getPropertyValuesWithADPropertyValuesHolder_PropertyValues:" };
  static const J2ObjcClassInfo _ADPropertyValuesHolder_1 = { "", "r.android.animation", ptrTable, methods, fields, 7, 0x8000, 2, 1, 0, -1, 3, -1, -1 };
  return &_ADPropertyValuesHolder_1;
}

@end

void ADPropertyValuesHolder_1_initWithADPropertyValuesHolder_(ADPropertyValuesHolder_1 *self, ADPropertyValuesHolder *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

ADPropertyValuesHolder_1 *new_ADPropertyValuesHolder_1_initWithADPropertyValuesHolder_(ADPropertyValuesHolder *outer$) {
  J2OBJC_NEW_IMPL(ADPropertyValuesHolder_1, initWithADPropertyValuesHolder_, outer$)
}

ADPropertyValuesHolder_1 *create_ADPropertyValuesHolder_1_initWithADPropertyValuesHolder_(ADPropertyValuesHolder *outer$) {
  J2OBJC_CREATE_IMPL(ADPropertyValuesHolder_1, initWithADPropertyValuesHolder_, outer$)
}

J2OBJC_INITIALIZED_DEFN(ADPropertyValuesHolder_IntPropertyValuesHolder)

@implementation ADPropertyValuesHolder_IntPropertyValuesHolder

- (instancetype)initWithNSString:(NSString *)propertyName
  withADIKeyframes_IntIKeyframes:(id<ADIKeyframes_IntIKeyframes>)keyframes {
  ADPropertyValuesHolder_IntPropertyValuesHolder_initWithNSString_withADIKeyframes_IntIKeyframes_(self, propertyName, keyframes);
  return self;
}

- (instancetype)initWithADProperty:(ADProperty *)property
    withADIKeyframes_IntIKeyframes:(id<ADIKeyframes_IntIKeyframes>)keyframes {
  ADPropertyValuesHolder_IntPropertyValuesHolder_initWithADProperty_withADIKeyframes_IntIKeyframes_(self, property, keyframes);
  return self;
}

- (instancetype)initWithNSString:(NSString *)propertyName
                    withIntArray:(IOSIntArray *)values {
  ADPropertyValuesHolder_IntPropertyValuesHolder_initWithNSString_withIntArray_(self, propertyName, values);
  return self;
}

- (instancetype)initWithADProperty:(ADProperty *)property
                      withIntArray:(IOSIntArray *)values {
  ADPropertyValuesHolder_IntPropertyValuesHolder_initWithADProperty_withIntArray_(self, property, values);
  return self;
}

- (void)setPropertyWithADProperty:(ADProperty *)property {
  if ([property isKindOfClass:[ADIntProperty class]]) {
    JreStrongAssign(&mIntProperty_, (ADIntProperty *) property);
  }
  else {
    ADPropertyValuesHolder_setPropertyWithADProperty_(self, property);
  }
}

- (void)setIntValuesWithIntArray:(IOSIntArray *)values {
  ADPropertyValuesHolder_setIntValuesWithIntArray_(self, values);
  JreStrongAssign(&mIntIKeyframes_, (id<ADIKeyframes_IntIKeyframes>) cast_check(mKeyframes_, ADIKeyframes_IntIKeyframes_class_()));
}

- (void)calculateValueWithFloat:(float)fraction {
  mIntAnimatedValue_ = [((id<ADIKeyframes_IntIKeyframes>) nil_chk(mIntIKeyframes_)) getIntValueWithFloat:fraction];
}

- (id)getAnimatedValue {
  return JavaLangInteger_valueOfWithInt_(mIntAnimatedValue_);
}

- (ADPropertyValuesHolder_IntPropertyValuesHolder *)java_clone {
  ADPropertyValuesHolder_IntPropertyValuesHolder *newPVH = (ADPropertyValuesHolder_IntPropertyValuesHolder *) cast_chk([super java_clone], [ADPropertyValuesHolder_IntPropertyValuesHolder class]);
  JreStrongAssign(&((ADPropertyValuesHolder_IntPropertyValuesHolder *) nil_chk(newPVH))->mIntIKeyframes_, (id<ADIKeyframes_IntIKeyframes>) cast_check(newPVH->mKeyframes_, ADIKeyframes_IntIKeyframes_class_()));
  return newPVH;
}

- (void)setAnimatedValueWithId:(id)target {
  if (mIntProperty_ != nil) {
    [mIntProperty_ setValueWithId:target withInt:mIntAnimatedValue_];
    return;
  }
  if (mProperty_ != nil) {
    [mProperty_ setWithId:target withId:JavaLangInteger_valueOfWithInt_(mIntAnimatedValue_)];
    return;
  }
  if (mJniSetter_ != nil) {
    ADPropertyValuesHolder_nCallIntMethodWithId_withNSString_withInt_(target, mJniSetter_, mIntAnimatedValue_);
    return;
  }
  if (mSetter_ != nil) {
    @try {
      IOSObjectArray_Set(nil_chk(mTmpValueArray_), 0, JavaLangInteger_valueOfWithInt_(mIntAnimatedValue_));
      [mSetter_ invokeWithId:target withNSObjectArray:mTmpValueArray_];
    }
    @catch (JavaLangReflectInvocationTargetException *e) {
      ADLog_eWithNSString_withNSString_(@"PropertyValuesHolder", [e description]);
    }
    @catch (JavaLangIllegalAccessException *e) {
      ADLog_eWithNSString_withNSString_(@"PropertyValuesHolder", [e description]);
    }
  }
}

- (void)setupSetterWithIOSClass:(IOSClass *)targetClass {
  if (mProperty_ != nil) {
    return;
  }
  @synchronized(ADPropertyValuesHolder_IntPropertyValuesHolder_sJNISetterPropertyMap) {
    JavaUtilHashMap *propertyMap = JreRetainedLocalValue([((JavaUtilHashMap *) nil_chk(ADPropertyValuesHolder_IntPropertyValuesHolder_sJNISetterPropertyMap)) getWithId:targetClass]);
    bool wasInMap = false;
    if (propertyMap != nil) {
      wasInMap = [propertyMap containsKeyWithId:mPropertyName_];
      if (wasInMap) {
        NSString *jniSetter = JreRetainedLocalValue([propertyMap getWithId:mPropertyName_]);
        if (jniSetter != nil) {
          JreStrongAssign(&mJniSetter_, jniSetter);
        }
      }
    }
    if (!wasInMap) {
      NSString *methodName = ADPropertyValuesHolder_getMethodNameWithNSString_withNSString_(@"set", mPropertyName_);
      @try {
        JreStrongAssign(&mJniSetter_, ADPropertyValuesHolder_nGetIntMethodWithIOSClass_withNSString_(targetClass, mPropertyName_));
      }
      @catch (JavaLangNoSuchMethodError *e) {
      }
      if (propertyMap == nil) {
        propertyMap = create_JavaUtilHashMap_init();
        [ADPropertyValuesHolder_IntPropertyValuesHolder_sJNISetterPropertyMap putWithId:targetClass withId:propertyMap];
      }
      [propertyMap putWithId:mPropertyName_ withId:mJniSetter_];
    }
  }
  if (mJniSetter_ == nil) {
    ADPropertyValuesHolder_setupSetterWithIOSClass_(self, targetClass);
  }
}

- (void)dealloc {
  RELEASE_(mJniSetter_);
  RELEASE_(mIntProperty_);
  RELEASE_(mIntIKeyframes_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x81, -1, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x81, -1, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x81, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 8, 9, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADPropertyValuesHolder_IntPropertyValuesHolder;", 0x1, 10, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 13, 14, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:withADIKeyframes_IntIKeyframes:);
  methods[1].selector = @selector(initWithADProperty:withADIKeyframes_IntIKeyframes:);
  methods[2].selector = @selector(initWithNSString:withIntArray:);
  methods[3].selector = @selector(initWithADProperty:withIntArray:);
  methods[4].selector = @selector(setPropertyWithADProperty:);
  methods[5].selector = @selector(setIntValuesWithIntArray:);
  methods[6].selector = @selector(calculateValueWithFloat:);
  methods[7].selector = @selector(getAnimatedValue);
  methods[8].selector = @selector(java_clone);
  methods[9].selector = @selector(setAnimatedValueWithId:);
  methods[10].selector = @selector(setupSetterWithIOSClass:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "sJNISetterPropertyMap", "LJavaUtilHashMap;", .constantValue.asLong = 0, 0x1a, -1, 15, 16, -1 },
    { "mJniSetter_", "LNSString;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mIntProperty_", "LADIntProperty;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mIntIKeyframes_", "LADIKeyframes_IntIKeyframes;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mIntAnimatedValue_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LADIKeyframes_IntIKeyframes;", "LADProperty;LADIKeyframes_IntIKeyframes;", "LNSString;[I", "LADProperty;[I", "setProperty", "LADProperty;", "setIntValues", "[I", "calculateValue", "F", "clone", "setAnimatedValue", "LNSObject;", "setupSetter", "LIOSClass;", &ADPropertyValuesHolder_IntPropertyValuesHolder_sJNISetterPropertyMap, "Ljava/util/HashMap<Ljava/lang/Class;Ljava/util/HashMap<Ljava/lang/String;Ljava/lang/String;>;>;", "LADPropertyValuesHolder;" };
  static const J2ObjcClassInfo _ADPropertyValuesHolder_IntPropertyValuesHolder = { "IntPropertyValuesHolder", "r.android.animation", ptrTable, methods, fields, 7, 0x8, 11, 5, 17, -1, -1, -1, -1 };
  return &_ADPropertyValuesHolder_IntPropertyValuesHolder;
}

+ (void)initialize {
  if (self == [ADPropertyValuesHolder_IntPropertyValuesHolder class]) {
    JreStrongAssignAndConsume(&ADPropertyValuesHolder_IntPropertyValuesHolder_sJNISetterPropertyMap, new_JavaUtilHashMap_init());
    J2OBJC_SET_INITIALIZED(ADPropertyValuesHolder_IntPropertyValuesHolder)
  }
}

@end

void ADPropertyValuesHolder_IntPropertyValuesHolder_initWithNSString_withADIKeyframes_IntIKeyframes_(ADPropertyValuesHolder_IntPropertyValuesHolder *self, NSString *propertyName, id<ADIKeyframes_IntIKeyframes> keyframes) {
  ADPropertyValuesHolder_initWithNSString_(self, propertyName);
  JreStrongAssign(&self->mValueType_, [IOSClass intClass]);
  JreStrongAssign(&self->mKeyframes_, keyframes);
  JreStrongAssign(&self->mIntIKeyframes_, keyframes);
}

ADPropertyValuesHolder_IntPropertyValuesHolder *new_ADPropertyValuesHolder_IntPropertyValuesHolder_initWithNSString_withADIKeyframes_IntIKeyframes_(NSString *propertyName, id<ADIKeyframes_IntIKeyframes> keyframes) {
  J2OBJC_NEW_IMPL(ADPropertyValuesHolder_IntPropertyValuesHolder, initWithNSString_withADIKeyframes_IntIKeyframes_, propertyName, keyframes)
}

ADPropertyValuesHolder_IntPropertyValuesHolder *create_ADPropertyValuesHolder_IntPropertyValuesHolder_initWithNSString_withADIKeyframes_IntIKeyframes_(NSString *propertyName, id<ADIKeyframes_IntIKeyframes> keyframes) {
  J2OBJC_CREATE_IMPL(ADPropertyValuesHolder_IntPropertyValuesHolder, initWithNSString_withADIKeyframes_IntIKeyframes_, propertyName, keyframes)
}

void ADPropertyValuesHolder_IntPropertyValuesHolder_initWithADProperty_withADIKeyframes_IntIKeyframes_(ADPropertyValuesHolder_IntPropertyValuesHolder *self, ADProperty *property, id<ADIKeyframes_IntIKeyframes> keyframes) {
  ADPropertyValuesHolder_initWithADProperty_(self, property);
  JreStrongAssign(&self->mValueType_, [IOSClass intClass]);
  JreStrongAssign(&self->mKeyframes_, keyframes);
  JreStrongAssign(&self->mIntIKeyframes_, keyframes);
  if ([property isKindOfClass:[ADIntProperty class]]) {
    JreStrongAssign(&self->mIntProperty_, (ADIntProperty *) cast_chk(self->mProperty_, [ADIntProperty class]));
  }
}

ADPropertyValuesHolder_IntPropertyValuesHolder *new_ADPropertyValuesHolder_IntPropertyValuesHolder_initWithADProperty_withADIKeyframes_IntIKeyframes_(ADProperty *property, id<ADIKeyframes_IntIKeyframes> keyframes) {
  J2OBJC_NEW_IMPL(ADPropertyValuesHolder_IntPropertyValuesHolder, initWithADProperty_withADIKeyframes_IntIKeyframes_, property, keyframes)
}

ADPropertyValuesHolder_IntPropertyValuesHolder *create_ADPropertyValuesHolder_IntPropertyValuesHolder_initWithADProperty_withADIKeyframes_IntIKeyframes_(ADProperty *property, id<ADIKeyframes_IntIKeyframes> keyframes) {
  J2OBJC_CREATE_IMPL(ADPropertyValuesHolder_IntPropertyValuesHolder, initWithADProperty_withADIKeyframes_IntIKeyframes_, property, keyframes)
}

void ADPropertyValuesHolder_IntPropertyValuesHolder_initWithNSString_withIntArray_(ADPropertyValuesHolder_IntPropertyValuesHolder *self, NSString *propertyName, IOSIntArray *values) {
  ADPropertyValuesHolder_initWithNSString_(self, propertyName);
  [self setIntValuesWithIntArray:values];
}

ADPropertyValuesHolder_IntPropertyValuesHolder *new_ADPropertyValuesHolder_IntPropertyValuesHolder_initWithNSString_withIntArray_(NSString *propertyName, IOSIntArray *values) {
  J2OBJC_NEW_IMPL(ADPropertyValuesHolder_IntPropertyValuesHolder, initWithNSString_withIntArray_, propertyName, values)
}

ADPropertyValuesHolder_IntPropertyValuesHolder *create_ADPropertyValuesHolder_IntPropertyValuesHolder_initWithNSString_withIntArray_(NSString *propertyName, IOSIntArray *values) {
  J2OBJC_CREATE_IMPL(ADPropertyValuesHolder_IntPropertyValuesHolder, initWithNSString_withIntArray_, propertyName, values)
}

void ADPropertyValuesHolder_IntPropertyValuesHolder_initWithADProperty_withIntArray_(ADPropertyValuesHolder_IntPropertyValuesHolder *self, ADProperty *property, IOSIntArray *values) {
  ADPropertyValuesHolder_initWithADProperty_(self, property);
  [self setIntValuesWithIntArray:values];
  if ([property isKindOfClass:[ADIntProperty class]]) {
    JreStrongAssign(&self->mIntProperty_, (ADIntProperty *) cast_chk(self->mProperty_, [ADIntProperty class]));
  }
}

ADPropertyValuesHolder_IntPropertyValuesHolder *new_ADPropertyValuesHolder_IntPropertyValuesHolder_initWithADProperty_withIntArray_(ADProperty *property, IOSIntArray *values) {
  J2OBJC_NEW_IMPL(ADPropertyValuesHolder_IntPropertyValuesHolder, initWithADProperty_withIntArray_, property, values)
}

ADPropertyValuesHolder_IntPropertyValuesHolder *create_ADPropertyValuesHolder_IntPropertyValuesHolder_initWithADProperty_withIntArray_(ADProperty *property, IOSIntArray *values) {
  J2OBJC_CREATE_IMPL(ADPropertyValuesHolder_IntPropertyValuesHolder, initWithADProperty_withIntArray_, property, values)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADPropertyValuesHolder_IntPropertyValuesHolder)

J2OBJC_INITIALIZED_DEFN(ADPropertyValuesHolder_FloatPropertyValuesHolder)

@implementation ADPropertyValuesHolder_FloatPropertyValuesHolder

- (instancetype)initWithNSString:(NSString *)propertyName
withADIKeyframes_FloatIKeyframes:(id<ADIKeyframes_FloatIKeyframes>)keyframes {
  ADPropertyValuesHolder_FloatPropertyValuesHolder_initWithNSString_withADIKeyframes_FloatIKeyframes_(self, propertyName, keyframes);
  return self;
}

- (instancetype)initWithADProperty:(ADProperty *)property
  withADIKeyframes_FloatIKeyframes:(id<ADIKeyframes_FloatIKeyframes>)keyframes {
  ADPropertyValuesHolder_FloatPropertyValuesHolder_initWithADProperty_withADIKeyframes_FloatIKeyframes_(self, property, keyframes);
  return self;
}

- (instancetype)initWithNSString:(NSString *)propertyName
                  withFloatArray:(IOSFloatArray *)values {
  ADPropertyValuesHolder_FloatPropertyValuesHolder_initWithNSString_withFloatArray_(self, propertyName, values);
  return self;
}

- (instancetype)initWithADProperty:(ADProperty *)property
                    withFloatArray:(IOSFloatArray *)values {
  ADPropertyValuesHolder_FloatPropertyValuesHolder_initWithADProperty_withFloatArray_(self, property, values);
  return self;
}

- (void)setPropertyWithADProperty:(ADProperty *)property {
  if ([property isKindOfClass:[ADFloatProperty class]]) {
    JreStrongAssign(&mFloatProperty_, (ADFloatProperty *) property);
  }
  else {
    ADPropertyValuesHolder_setPropertyWithADProperty_(self, property);
  }
}

- (void)setFloatValuesWithFloatArray:(IOSFloatArray *)values {
  ADPropertyValuesHolder_setFloatValuesWithFloatArray_(self, values);
  JreStrongAssign(&mFloatIKeyframes_, (id<ADIKeyframes_FloatIKeyframes>) cast_check(mKeyframes_, ADIKeyframes_FloatIKeyframes_class_()));
}

- (void)calculateValueWithFloat:(float)fraction {
  mFloatAnimatedValue_ = [((id<ADIKeyframes_FloatIKeyframes>) nil_chk(mFloatIKeyframes_)) getFloatValueWithFloat:fraction];
}

- (id)getAnimatedValue {
  return JavaLangFloat_valueOfWithFloat_(mFloatAnimatedValue_);
}

- (ADPropertyValuesHolder_FloatPropertyValuesHolder *)java_clone {
  ADPropertyValuesHolder_FloatPropertyValuesHolder *newPVH = (ADPropertyValuesHolder_FloatPropertyValuesHolder *) cast_chk([super java_clone], [ADPropertyValuesHolder_FloatPropertyValuesHolder class]);
  JreStrongAssign(&((ADPropertyValuesHolder_FloatPropertyValuesHolder *) nil_chk(newPVH))->mFloatIKeyframes_, (id<ADIKeyframes_FloatIKeyframes>) cast_check(newPVH->mKeyframes_, ADIKeyframes_FloatIKeyframes_class_()));
  return newPVH;
}

- (void)setAnimatedValueWithId:(id)target {
  if (mFloatProperty_ != nil) {
    [mFloatProperty_ setValueWithId:target withFloat:mFloatAnimatedValue_];
    return;
  }
  if (mProperty_ != nil) {
    [mProperty_ setWithId:target withId:JavaLangFloat_valueOfWithFloat_(mFloatAnimatedValue_)];
    return;
  }
  if (mJniSetter_ != nil) {
    ADPropertyValuesHolder_nCallFloatMethodWithId_withNSString_withFloat_(target, mJniSetter_, mFloatAnimatedValue_);
    return;
  }
  if (mSetter_ != nil) {
    @try {
      IOSObjectArray_Set(nil_chk(mTmpValueArray_), 0, JavaLangFloat_valueOfWithFloat_(mFloatAnimatedValue_));
      [mSetter_ invokeWithId:target withNSObjectArray:mTmpValueArray_];
    }
    @catch (JavaLangReflectInvocationTargetException *e) {
      ADLog_eWithNSString_withNSString_(@"PropertyValuesHolder", [e description]);
    }
    @catch (JavaLangIllegalAccessException *e) {
      ADLog_eWithNSString_withNSString_(@"PropertyValuesHolder", [e description]);
    }
  }
}

- (void)setupSetterWithIOSClass:(IOSClass *)targetClass {
  if (mProperty_ != nil) {
    return;
  }
  @synchronized(ADPropertyValuesHolder_FloatPropertyValuesHolder_sJNISetterPropertyMap) {
    JavaUtilHashMap *propertyMap = JreRetainedLocalValue([((JavaUtilHashMap *) nil_chk(ADPropertyValuesHolder_FloatPropertyValuesHolder_sJNISetterPropertyMap)) getWithId:targetClass]);
    bool wasInMap = false;
    if (propertyMap != nil) {
      wasInMap = [propertyMap containsKeyWithId:mPropertyName_];
      if (wasInMap) {
        NSString *jniSetter = JreRetainedLocalValue([propertyMap getWithId:mPropertyName_]);
        if (jniSetter != nil) {
          JreStrongAssign(&mJniSetter_, jniSetter);
        }
      }
    }
    if (!wasInMap) {
      NSString *methodName = ADPropertyValuesHolder_getMethodNameWithNSString_withNSString_(@"set", mPropertyName_);
      @try {
        JreStrongAssign(&mJniSetter_, ADPropertyValuesHolder_nGetFloatMethodWithIOSClass_withNSString_(targetClass, mPropertyName_));
      }
      @catch (JavaLangNoSuchMethodError *e) {
      }
      if (propertyMap == nil) {
        propertyMap = create_JavaUtilHashMap_init();
        [ADPropertyValuesHolder_FloatPropertyValuesHolder_sJNISetterPropertyMap putWithId:targetClass withId:propertyMap];
      }
      [propertyMap putWithId:mPropertyName_ withId:mJniSetter_];
    }
  }
  if (mJniSetter_ == nil) {
    ADPropertyValuesHolder_setupSetterWithIOSClass_(self, targetClass);
  }
}

- (void)dealloc {
  RELEASE_(mJniSetter_);
  RELEASE_(mFloatProperty_);
  RELEASE_(mFloatIKeyframes_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x81, -1, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x81, -1, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x81, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 8, 9, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADPropertyValuesHolder_FloatPropertyValuesHolder;", 0x1, 10, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 13, 14, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:withADIKeyframes_FloatIKeyframes:);
  methods[1].selector = @selector(initWithADProperty:withADIKeyframes_FloatIKeyframes:);
  methods[2].selector = @selector(initWithNSString:withFloatArray:);
  methods[3].selector = @selector(initWithADProperty:withFloatArray:);
  methods[4].selector = @selector(setPropertyWithADProperty:);
  methods[5].selector = @selector(setFloatValuesWithFloatArray:);
  methods[6].selector = @selector(calculateValueWithFloat:);
  methods[7].selector = @selector(getAnimatedValue);
  methods[8].selector = @selector(java_clone);
  methods[9].selector = @selector(setAnimatedValueWithId:);
  methods[10].selector = @selector(setupSetterWithIOSClass:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "sJNISetterPropertyMap", "LJavaUtilHashMap;", .constantValue.asLong = 0, 0x1a, -1, 15, 16, -1 },
    { "mJniSetter_", "LNSString;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mFloatProperty_", "LADFloatProperty;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mFloatIKeyframes_", "LADIKeyframes_FloatIKeyframes;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mFloatAnimatedValue_", "F", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LADIKeyframes_FloatIKeyframes;", "LADProperty;LADIKeyframes_FloatIKeyframes;", "LNSString;[F", "LADProperty;[F", "setProperty", "LADProperty;", "setFloatValues", "[F", "calculateValue", "F", "clone", "setAnimatedValue", "LNSObject;", "setupSetter", "LIOSClass;", &ADPropertyValuesHolder_FloatPropertyValuesHolder_sJNISetterPropertyMap, "Ljava/util/HashMap<Ljava/lang/Class;Ljava/util/HashMap<Ljava/lang/String;Ljava/lang/String;>;>;", "LADPropertyValuesHolder;" };
  static const J2ObjcClassInfo _ADPropertyValuesHolder_FloatPropertyValuesHolder = { "FloatPropertyValuesHolder", "r.android.animation", ptrTable, methods, fields, 7, 0x8, 11, 5, 17, -1, -1, -1, -1 };
  return &_ADPropertyValuesHolder_FloatPropertyValuesHolder;
}

+ (void)initialize {
  if (self == [ADPropertyValuesHolder_FloatPropertyValuesHolder class]) {
    JreStrongAssignAndConsume(&ADPropertyValuesHolder_FloatPropertyValuesHolder_sJNISetterPropertyMap, new_JavaUtilHashMap_init());
    J2OBJC_SET_INITIALIZED(ADPropertyValuesHolder_FloatPropertyValuesHolder)
  }
}

@end

void ADPropertyValuesHolder_FloatPropertyValuesHolder_initWithNSString_withADIKeyframes_FloatIKeyframes_(ADPropertyValuesHolder_FloatPropertyValuesHolder *self, NSString *propertyName, id<ADIKeyframes_FloatIKeyframes> keyframes) {
  ADPropertyValuesHolder_initWithNSString_(self, propertyName);
  JreStrongAssign(&self->mValueType_, [IOSClass floatClass]);
  JreStrongAssign(&self->mKeyframes_, keyframes);
  JreStrongAssign(&self->mFloatIKeyframes_, keyframes);
}

ADPropertyValuesHolder_FloatPropertyValuesHolder *new_ADPropertyValuesHolder_FloatPropertyValuesHolder_initWithNSString_withADIKeyframes_FloatIKeyframes_(NSString *propertyName, id<ADIKeyframes_FloatIKeyframes> keyframes) {
  J2OBJC_NEW_IMPL(ADPropertyValuesHolder_FloatPropertyValuesHolder, initWithNSString_withADIKeyframes_FloatIKeyframes_, propertyName, keyframes)
}

ADPropertyValuesHolder_FloatPropertyValuesHolder *create_ADPropertyValuesHolder_FloatPropertyValuesHolder_initWithNSString_withADIKeyframes_FloatIKeyframes_(NSString *propertyName, id<ADIKeyframes_FloatIKeyframes> keyframes) {
  J2OBJC_CREATE_IMPL(ADPropertyValuesHolder_FloatPropertyValuesHolder, initWithNSString_withADIKeyframes_FloatIKeyframes_, propertyName, keyframes)
}

void ADPropertyValuesHolder_FloatPropertyValuesHolder_initWithADProperty_withADIKeyframes_FloatIKeyframes_(ADPropertyValuesHolder_FloatPropertyValuesHolder *self, ADProperty *property, id<ADIKeyframes_FloatIKeyframes> keyframes) {
  ADPropertyValuesHolder_initWithADProperty_(self, property);
  JreStrongAssign(&self->mValueType_, [IOSClass floatClass]);
  JreStrongAssign(&self->mKeyframes_, keyframes);
  JreStrongAssign(&self->mFloatIKeyframes_, keyframes);
  if ([property isKindOfClass:[ADFloatProperty class]]) {
    JreStrongAssign(&self->mFloatProperty_, (ADFloatProperty *) cast_chk(self->mProperty_, [ADFloatProperty class]));
  }
}

ADPropertyValuesHolder_FloatPropertyValuesHolder *new_ADPropertyValuesHolder_FloatPropertyValuesHolder_initWithADProperty_withADIKeyframes_FloatIKeyframes_(ADProperty *property, id<ADIKeyframes_FloatIKeyframes> keyframes) {
  J2OBJC_NEW_IMPL(ADPropertyValuesHolder_FloatPropertyValuesHolder, initWithADProperty_withADIKeyframes_FloatIKeyframes_, property, keyframes)
}

ADPropertyValuesHolder_FloatPropertyValuesHolder *create_ADPropertyValuesHolder_FloatPropertyValuesHolder_initWithADProperty_withADIKeyframes_FloatIKeyframes_(ADProperty *property, id<ADIKeyframes_FloatIKeyframes> keyframes) {
  J2OBJC_CREATE_IMPL(ADPropertyValuesHolder_FloatPropertyValuesHolder, initWithADProperty_withADIKeyframes_FloatIKeyframes_, property, keyframes)
}

void ADPropertyValuesHolder_FloatPropertyValuesHolder_initWithNSString_withFloatArray_(ADPropertyValuesHolder_FloatPropertyValuesHolder *self, NSString *propertyName, IOSFloatArray *values) {
  ADPropertyValuesHolder_initWithNSString_(self, propertyName);
  [self setFloatValuesWithFloatArray:values];
}

ADPropertyValuesHolder_FloatPropertyValuesHolder *new_ADPropertyValuesHolder_FloatPropertyValuesHolder_initWithNSString_withFloatArray_(NSString *propertyName, IOSFloatArray *values) {
  J2OBJC_NEW_IMPL(ADPropertyValuesHolder_FloatPropertyValuesHolder, initWithNSString_withFloatArray_, propertyName, values)
}

ADPropertyValuesHolder_FloatPropertyValuesHolder *create_ADPropertyValuesHolder_FloatPropertyValuesHolder_initWithNSString_withFloatArray_(NSString *propertyName, IOSFloatArray *values) {
  J2OBJC_CREATE_IMPL(ADPropertyValuesHolder_FloatPropertyValuesHolder, initWithNSString_withFloatArray_, propertyName, values)
}

void ADPropertyValuesHolder_FloatPropertyValuesHolder_initWithADProperty_withFloatArray_(ADPropertyValuesHolder_FloatPropertyValuesHolder *self, ADProperty *property, IOSFloatArray *values) {
  ADPropertyValuesHolder_initWithADProperty_(self, property);
  [self setFloatValuesWithFloatArray:values];
  if ([property isKindOfClass:[ADFloatProperty class]]) {
    JreStrongAssign(&self->mFloatProperty_, (ADFloatProperty *) cast_chk(self->mProperty_, [ADFloatProperty class]));
  }
}

ADPropertyValuesHolder_FloatPropertyValuesHolder *new_ADPropertyValuesHolder_FloatPropertyValuesHolder_initWithADProperty_withFloatArray_(ADProperty *property, IOSFloatArray *values) {
  J2OBJC_NEW_IMPL(ADPropertyValuesHolder_FloatPropertyValuesHolder, initWithADProperty_withFloatArray_, property, values)
}

ADPropertyValuesHolder_FloatPropertyValuesHolder *create_ADPropertyValuesHolder_FloatPropertyValuesHolder_initWithADProperty_withFloatArray_(ADProperty *property, IOSFloatArray *values) {
  J2OBJC_CREATE_IMPL(ADPropertyValuesHolder_FloatPropertyValuesHolder, initWithADProperty_withFloatArray_, property, values)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADPropertyValuesHolder_FloatPropertyValuesHolder)

J2OBJC_INITIALIZED_DEFN(ADPropertyValuesHolder_MultiFloatValuesHolder)

@implementation ADPropertyValuesHolder_MultiFloatValuesHolder

- (instancetype)initWithNSString:(NSString *)propertyName
             withADTypeConverter:(ADTypeConverter *)converter
             withADTypeEvaluator:(id<ADTypeEvaluator>)evaluator
               withNSObjectArray:(IOSObjectArray *)values {
  ADPropertyValuesHolder_MultiFloatValuesHolder_initWithNSString_withADTypeConverter_withADTypeEvaluator_withNSObjectArray_(self, propertyName, converter, evaluator, values);
  return self;
}

- (instancetype)initWithNSString:(NSString *)propertyName
             withADTypeConverter:(ADTypeConverter *)converter
             withADTypeEvaluator:(id<ADTypeEvaluator>)evaluator
                withADIKeyframes:(id<ADIKeyframes>)keyframes {
  ADPropertyValuesHolder_MultiFloatValuesHolder_initWithNSString_withADTypeConverter_withADTypeEvaluator_withADIKeyframes_(self, propertyName, converter, evaluator, keyframes);
  return self;
}

- (void)setAnimatedValueWithId:(id)target {
  IOSFloatArray *values = (IOSFloatArray *) cast_chk([self getAnimatedValue], [IOSFloatArray class]);
  int32_t numParameters = ((IOSFloatArray *) nil_chk(values))->size_;
  if (mJniSetter_ != nil) {
    switch (numParameters) {
      case 1:
      ADPropertyValuesHolder_nCallFloatMethodWithId_withNSString_withFloat_(target, mJniSetter_, IOSFloatArray_Get(values, 0));
      break;
      case 2:
      ADPropertyValuesHolder_nCallTwoFloatMethodWithId_withNSString_withFloat_withFloat_(target, mJniSetter_, IOSFloatArray_Get(values, 0), IOSFloatArray_Get(values, 1));
      break;
      case 4:
      ADPropertyValuesHolder_nCallFourFloatMethodWithId_withNSString_withFloat_withFloat_withFloat_withFloat_(target, mJniSetter_, IOSFloatArray_Get(values, 0), IOSFloatArray_Get(values, 1), IOSFloatArray_Get(values, 2), IOSFloatArray_Get(values, 3));
      break;
      default:
      {
        ADPropertyValuesHolder_nCallMultipleFloatMethodWithId_withNSString_withFloatArray_(target, mJniSetter_, values);
        break;
      }
    }
  }
}

- (void)setupSetterAndGetterWithId:(id)target {
  [self setupSetterWithIOSClass:[nil_chk(target) java_getClass]];
}

- (void)setupSetterWithIOSClass:(IOSClass *)targetClass {
  if (mJniSetter_ != nil) {
    return;
  }
  @synchronized(ADPropertyValuesHolder_MultiFloatValuesHolder_sJNISetterPropertyMap) {
    JavaUtilHashMap *propertyMap = JreRetainedLocalValue([((JavaUtilHashMap *) nil_chk(ADPropertyValuesHolder_MultiFloatValuesHolder_sJNISetterPropertyMap)) getWithId:targetClass]);
    bool wasInMap = false;
    if (propertyMap != nil) {
      wasInMap = [propertyMap containsKeyWithId:mPropertyName_];
      if (wasInMap) {
        NSString *jniSetter = JreRetainedLocalValue([propertyMap getWithId:mPropertyName_]);
        if (jniSetter != nil) {
          JreStrongAssign(&mJniSetter_, jniSetter);
        }
      }
    }
    if (!wasInMap) {
      NSString *methodName = ADPropertyValuesHolder_getMethodNameWithNSString_withNSString_(@"set", mPropertyName_);
      [self calculateValueWithFloat:0.0f];
      IOSFloatArray *values = (IOSFloatArray *) cast_chk([self getAnimatedValue], [IOSFloatArray class]);
      int32_t numParams = ((IOSFloatArray *) nil_chk(values))->size_;
      @try {
        JreStrongAssign(&mJniSetter_, ADPropertyValuesHolder_nGetMultipleFloatMethodWithIOSClass_withNSString_withInt_(targetClass, mPropertyName_, numParams));
      }
      @catch (JavaLangNoSuchMethodError *e) {
        @try {
          JreStrongAssign(&mJniSetter_, ADPropertyValuesHolder_nGetMultipleFloatMethodWithIOSClass_withNSString_withInt_(targetClass, mPropertyName_, numParams));
        }
        @catch (JavaLangNoSuchMethodError *e2) {
        }
      }
      if (propertyMap == nil) {
        propertyMap = create_JavaUtilHashMap_init();
        [ADPropertyValuesHolder_MultiFloatValuesHolder_sJNISetterPropertyMap putWithId:targetClass withId:propertyMap];
      }
      [propertyMap putWithId:mPropertyName_ withId:mJniSetter_];
    }
  }
}

- (void)dealloc {
  RELEASE_(mJniSetter_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x81, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 4, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 5, 6, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:withADTypeConverter:withADTypeEvaluator:withNSObjectArray:);
  methods[1].selector = @selector(initWithNSString:withADTypeConverter:withADTypeEvaluator:withADIKeyframes:);
  methods[2].selector = @selector(setAnimatedValueWithId:);
  methods[3].selector = @selector(setupSetterAndGetterWithId:);
  methods[4].selector = @selector(setupSetterWithIOSClass:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mJniSetter_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "sJNISetterPropertyMap", "LJavaUtilHashMap;", .constantValue.asLong = 0, 0x1a, -1, 7, 8, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LADTypeConverter;LADTypeEvaluator;[LNSObject;", "LNSString;LADTypeConverter;LADTypeEvaluator;LADIKeyframes;", "setAnimatedValue", "LNSObject;", "setupSetterAndGetter", "setupSetter", "LIOSClass;", &ADPropertyValuesHolder_MultiFloatValuesHolder_sJNISetterPropertyMap, "Ljava/util/HashMap<Ljava/lang/Class;Ljava/util/HashMap<Ljava/lang/String;Ljava/lang/String;>;>;", "LADPropertyValuesHolder;" };
  static const J2ObjcClassInfo _ADPropertyValuesHolder_MultiFloatValuesHolder = { "MultiFloatValuesHolder", "r.android.animation", ptrTable, methods, fields, 7, 0x8, 5, 2, 9, -1, -1, -1, -1 };
  return &_ADPropertyValuesHolder_MultiFloatValuesHolder;
}

+ (void)initialize {
  if (self == [ADPropertyValuesHolder_MultiFloatValuesHolder class]) {
    JreStrongAssignAndConsume(&ADPropertyValuesHolder_MultiFloatValuesHolder_sJNISetterPropertyMap, new_JavaUtilHashMap_init());
    J2OBJC_SET_INITIALIZED(ADPropertyValuesHolder_MultiFloatValuesHolder)
  }
}

@end

void ADPropertyValuesHolder_MultiFloatValuesHolder_initWithNSString_withADTypeConverter_withADTypeEvaluator_withNSObjectArray_(ADPropertyValuesHolder_MultiFloatValuesHolder *self, NSString *propertyName, ADTypeConverter *converter, id<ADTypeEvaluator> evaluator, IOSObjectArray *values) {
  ADPropertyValuesHolder_initWithNSString_(self, propertyName);
  [self setConverterWithADTypeConverter:converter];
  [self setObjectValuesWithNSObjectArray:values];
  [self setEvaluatorWithADTypeEvaluator:evaluator];
}

ADPropertyValuesHolder_MultiFloatValuesHolder *new_ADPropertyValuesHolder_MultiFloatValuesHolder_initWithNSString_withADTypeConverter_withADTypeEvaluator_withNSObjectArray_(NSString *propertyName, ADTypeConverter *converter, id<ADTypeEvaluator> evaluator, IOSObjectArray *values) {
  J2OBJC_NEW_IMPL(ADPropertyValuesHolder_MultiFloatValuesHolder, initWithNSString_withADTypeConverter_withADTypeEvaluator_withNSObjectArray_, propertyName, converter, evaluator, values)
}

ADPropertyValuesHolder_MultiFloatValuesHolder *create_ADPropertyValuesHolder_MultiFloatValuesHolder_initWithNSString_withADTypeConverter_withADTypeEvaluator_withNSObjectArray_(NSString *propertyName, ADTypeConverter *converter, id<ADTypeEvaluator> evaluator, IOSObjectArray *values) {
  J2OBJC_CREATE_IMPL(ADPropertyValuesHolder_MultiFloatValuesHolder, initWithNSString_withADTypeConverter_withADTypeEvaluator_withNSObjectArray_, propertyName, converter, evaluator, values)
}

void ADPropertyValuesHolder_MultiFloatValuesHolder_initWithNSString_withADTypeConverter_withADTypeEvaluator_withADIKeyframes_(ADPropertyValuesHolder_MultiFloatValuesHolder *self, NSString *propertyName, ADTypeConverter *converter, id<ADTypeEvaluator> evaluator, id<ADIKeyframes> keyframes) {
  ADPropertyValuesHolder_initWithNSString_(self, propertyName);
  [self setConverterWithADTypeConverter:converter];
  JreStrongAssign(&self->mKeyframes_, keyframes);
  [self setEvaluatorWithADTypeEvaluator:evaluator];
}

ADPropertyValuesHolder_MultiFloatValuesHolder *new_ADPropertyValuesHolder_MultiFloatValuesHolder_initWithNSString_withADTypeConverter_withADTypeEvaluator_withADIKeyframes_(NSString *propertyName, ADTypeConverter *converter, id<ADTypeEvaluator> evaluator, id<ADIKeyframes> keyframes) {
  J2OBJC_NEW_IMPL(ADPropertyValuesHolder_MultiFloatValuesHolder, initWithNSString_withADTypeConverter_withADTypeEvaluator_withADIKeyframes_, propertyName, converter, evaluator, keyframes)
}

ADPropertyValuesHolder_MultiFloatValuesHolder *create_ADPropertyValuesHolder_MultiFloatValuesHolder_initWithNSString_withADTypeConverter_withADTypeEvaluator_withADIKeyframes_(NSString *propertyName, ADTypeConverter *converter, id<ADTypeEvaluator> evaluator, id<ADIKeyframes> keyframes) {
  J2OBJC_CREATE_IMPL(ADPropertyValuesHolder_MultiFloatValuesHolder, initWithNSString_withADTypeConverter_withADTypeEvaluator_withADIKeyframes_, propertyName, converter, evaluator, keyframes)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADPropertyValuesHolder_MultiFloatValuesHolder)

J2OBJC_INITIALIZED_DEFN(ADPropertyValuesHolder_MultiIntValuesHolder)

@implementation ADPropertyValuesHolder_MultiIntValuesHolder

- (instancetype)initWithNSString:(NSString *)propertyName
             withADTypeConverter:(ADTypeConverter *)converter
             withADTypeEvaluator:(id<ADTypeEvaluator>)evaluator
               withNSObjectArray:(IOSObjectArray *)values {
  ADPropertyValuesHolder_MultiIntValuesHolder_initWithNSString_withADTypeConverter_withADTypeEvaluator_withNSObjectArray_(self, propertyName, converter, evaluator, values);
  return self;
}

- (instancetype)initWithNSString:(NSString *)propertyName
             withADTypeConverter:(ADTypeConverter *)converter
             withADTypeEvaluator:(id<ADTypeEvaluator>)evaluator
                withADIKeyframes:(id<ADIKeyframes>)keyframes {
  ADPropertyValuesHolder_MultiIntValuesHolder_initWithNSString_withADTypeConverter_withADTypeEvaluator_withADIKeyframes_(self, propertyName, converter, evaluator, keyframes);
  return self;
}

- (void)setAnimatedValueWithId:(id)target {
  IOSIntArray *values = (IOSIntArray *) cast_chk([self getAnimatedValue], [IOSIntArray class]);
  int32_t numParameters = ((IOSIntArray *) nil_chk(values))->size_;
  if (mJniSetter_ != nil) {
    switch (numParameters) {
      case 1:
      ADPropertyValuesHolder_nCallIntMethodWithId_withNSString_withInt_(target, mJniSetter_, IOSIntArray_Get(values, 0));
      break;
      case 2:
      ADPropertyValuesHolder_nCallTwoIntMethodWithId_withNSString_withInt_withInt_(target, mJniSetter_, IOSIntArray_Get(values, 0), IOSIntArray_Get(values, 1));
      break;
      case 4:
      ADPropertyValuesHolder_nCallFourIntMethodWithId_withNSString_withInt_withInt_withInt_withInt_(target, mJniSetter_, IOSIntArray_Get(values, 0), IOSIntArray_Get(values, 1), IOSIntArray_Get(values, 2), IOSIntArray_Get(values, 3));
      break;
      default:
      {
        ADPropertyValuesHolder_nCallMultipleIntMethodWithId_withNSString_withIntArray_(target, mJniSetter_, values);
        break;
      }
    }
  }
}

- (void)setupSetterAndGetterWithId:(id)target {
  [self setupSetterWithIOSClass:[nil_chk(target) java_getClass]];
}

- (void)setupSetterWithIOSClass:(IOSClass *)targetClass {
  if (mJniSetter_ != nil) {
    return;
  }
  @synchronized(ADPropertyValuesHolder_MultiIntValuesHolder_sJNISetterPropertyMap) {
    JavaUtilHashMap *propertyMap = JreRetainedLocalValue([((JavaUtilHashMap *) nil_chk(ADPropertyValuesHolder_MultiIntValuesHolder_sJNISetterPropertyMap)) getWithId:targetClass]);
    bool wasInMap = false;
    if (propertyMap != nil) {
      wasInMap = [propertyMap containsKeyWithId:mPropertyName_];
      if (wasInMap) {
        NSString *jniSetter = JreRetainedLocalValue([propertyMap getWithId:mPropertyName_]);
        if (jniSetter != nil) {
          JreStrongAssign(&mJniSetter_, jniSetter);
        }
      }
    }
    if (!wasInMap) {
      NSString *methodName = ADPropertyValuesHolder_getMethodNameWithNSString_withNSString_(@"set", mPropertyName_);
      [self calculateValueWithFloat:0.0f];
      IOSIntArray *values = (IOSIntArray *) cast_chk([self getAnimatedValue], [IOSIntArray class]);
      int32_t numParams = ((IOSIntArray *) nil_chk(values))->size_;
      @try {
        JreStrongAssign(&mJniSetter_, ADPropertyValuesHolder_nGetMultipleIntMethodWithIOSClass_withNSString_withInt_(targetClass, mPropertyName_, numParams));
      }
      @catch (JavaLangNoSuchMethodError *e) {
        @try {
          JreStrongAssign(&mJniSetter_, ADPropertyValuesHolder_nGetMultipleIntMethodWithIOSClass_withNSString_withInt_(targetClass, mPropertyName_, numParams));
        }
        @catch (JavaLangNoSuchMethodError *e2) {
        }
      }
      if (propertyMap == nil) {
        propertyMap = create_JavaUtilHashMap_init();
        [ADPropertyValuesHolder_MultiIntValuesHolder_sJNISetterPropertyMap putWithId:targetClass withId:propertyMap];
      }
      [propertyMap putWithId:mPropertyName_ withId:mJniSetter_];
    }
  }
}

- (void)dealloc {
  RELEASE_(mJniSetter_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x81, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 4, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 5, 6, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:withADTypeConverter:withADTypeEvaluator:withNSObjectArray:);
  methods[1].selector = @selector(initWithNSString:withADTypeConverter:withADTypeEvaluator:withADIKeyframes:);
  methods[2].selector = @selector(setAnimatedValueWithId:);
  methods[3].selector = @selector(setupSetterAndGetterWithId:);
  methods[4].selector = @selector(setupSetterWithIOSClass:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mJniSetter_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "sJNISetterPropertyMap", "LJavaUtilHashMap;", .constantValue.asLong = 0, 0x1a, -1, 7, 8, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LADTypeConverter;LADTypeEvaluator;[LNSObject;", "LNSString;LADTypeConverter;LADTypeEvaluator;LADIKeyframes;", "setAnimatedValue", "LNSObject;", "setupSetterAndGetter", "setupSetter", "LIOSClass;", &ADPropertyValuesHolder_MultiIntValuesHolder_sJNISetterPropertyMap, "Ljava/util/HashMap<Ljava/lang/Class;Ljava/util/HashMap<Ljava/lang/String;Ljava/lang/String;>;>;", "LADPropertyValuesHolder;" };
  static const J2ObjcClassInfo _ADPropertyValuesHolder_MultiIntValuesHolder = { "MultiIntValuesHolder", "r.android.animation", ptrTable, methods, fields, 7, 0x8, 5, 2, 9, -1, -1, -1, -1 };
  return &_ADPropertyValuesHolder_MultiIntValuesHolder;
}

+ (void)initialize {
  if (self == [ADPropertyValuesHolder_MultiIntValuesHolder class]) {
    JreStrongAssignAndConsume(&ADPropertyValuesHolder_MultiIntValuesHolder_sJNISetterPropertyMap, new_JavaUtilHashMap_init());
    J2OBJC_SET_INITIALIZED(ADPropertyValuesHolder_MultiIntValuesHolder)
  }
}

@end

void ADPropertyValuesHolder_MultiIntValuesHolder_initWithNSString_withADTypeConverter_withADTypeEvaluator_withNSObjectArray_(ADPropertyValuesHolder_MultiIntValuesHolder *self, NSString *propertyName, ADTypeConverter *converter, id<ADTypeEvaluator> evaluator, IOSObjectArray *values) {
  ADPropertyValuesHolder_initWithNSString_(self, propertyName);
  [self setConverterWithADTypeConverter:converter];
  [self setObjectValuesWithNSObjectArray:values];
  [self setEvaluatorWithADTypeEvaluator:evaluator];
}

ADPropertyValuesHolder_MultiIntValuesHolder *new_ADPropertyValuesHolder_MultiIntValuesHolder_initWithNSString_withADTypeConverter_withADTypeEvaluator_withNSObjectArray_(NSString *propertyName, ADTypeConverter *converter, id<ADTypeEvaluator> evaluator, IOSObjectArray *values) {
  J2OBJC_NEW_IMPL(ADPropertyValuesHolder_MultiIntValuesHolder, initWithNSString_withADTypeConverter_withADTypeEvaluator_withNSObjectArray_, propertyName, converter, evaluator, values)
}

ADPropertyValuesHolder_MultiIntValuesHolder *create_ADPropertyValuesHolder_MultiIntValuesHolder_initWithNSString_withADTypeConverter_withADTypeEvaluator_withNSObjectArray_(NSString *propertyName, ADTypeConverter *converter, id<ADTypeEvaluator> evaluator, IOSObjectArray *values) {
  J2OBJC_CREATE_IMPL(ADPropertyValuesHolder_MultiIntValuesHolder, initWithNSString_withADTypeConverter_withADTypeEvaluator_withNSObjectArray_, propertyName, converter, evaluator, values)
}

void ADPropertyValuesHolder_MultiIntValuesHolder_initWithNSString_withADTypeConverter_withADTypeEvaluator_withADIKeyframes_(ADPropertyValuesHolder_MultiIntValuesHolder *self, NSString *propertyName, ADTypeConverter *converter, id<ADTypeEvaluator> evaluator, id<ADIKeyframes> keyframes) {
  ADPropertyValuesHolder_initWithNSString_(self, propertyName);
  [self setConverterWithADTypeConverter:converter];
  JreStrongAssign(&self->mKeyframes_, keyframes);
  [self setEvaluatorWithADTypeEvaluator:evaluator];
}

ADPropertyValuesHolder_MultiIntValuesHolder *new_ADPropertyValuesHolder_MultiIntValuesHolder_initWithNSString_withADTypeConverter_withADTypeEvaluator_withADIKeyframes_(NSString *propertyName, ADTypeConverter *converter, id<ADTypeEvaluator> evaluator, id<ADIKeyframes> keyframes) {
  J2OBJC_NEW_IMPL(ADPropertyValuesHolder_MultiIntValuesHolder, initWithNSString_withADTypeConverter_withADTypeEvaluator_withADIKeyframes_, propertyName, converter, evaluator, keyframes)
}

ADPropertyValuesHolder_MultiIntValuesHolder *create_ADPropertyValuesHolder_MultiIntValuesHolder_initWithNSString_withADTypeConverter_withADTypeEvaluator_withADIKeyframes_(NSString *propertyName, ADTypeConverter *converter, id<ADTypeEvaluator> evaluator, id<ADIKeyframes> keyframes) {
  J2OBJC_CREATE_IMPL(ADPropertyValuesHolder_MultiIntValuesHolder, initWithNSString_withADTypeConverter_withADTypeEvaluator_withADIKeyframes_, propertyName, converter, evaluator, keyframes)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADPropertyValuesHolder_MultiIntValuesHolder)

@implementation ADPropertyValuesHolder_PointFToFloatArray

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADPropertyValuesHolder_PointFToFloatArray_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (IOSFloatArray *)convertWithId:(ADPointF *)value {
  *IOSFloatArray_GetRef(nil_chk(mCoordinates_), 0) = ((ADPointF *) nil_chk(value))->x_;
  *IOSFloatArray_GetRef(mCoordinates_, 1) = value->y_;
  return mCoordinates_;
}

- (void)dealloc {
  RELEASE_(mCoordinates_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[F", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(convertWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mCoordinates_", "[F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "convert", "LADPointF;", "LADPropertyValuesHolder;", "Lr/android/animation/TypeConverter<Lr/android/graphics/PointF;[F>;" };
  static const J2ObjcClassInfo _ADPropertyValuesHolder_PointFToFloatArray = { "PointFToFloatArray", "r.android.animation", ptrTable, methods, fields, 7, 0xa, 2, 1, 2, -1, -1, 3, -1 };
  return &_ADPropertyValuesHolder_PointFToFloatArray;
}

@end

void ADPropertyValuesHolder_PointFToFloatArray_init(ADPropertyValuesHolder_PointFToFloatArray *self) {
  ADTypeConverter_initWithIOSClass_withIOSClass_(self, ADPointF_class_(), IOSClass_floatArray(1));
  JreStrongAssignAndConsume(&self->mCoordinates_, [IOSFloatArray newArrayWithLength:2]);
}

ADPropertyValuesHolder_PointFToFloatArray *new_ADPropertyValuesHolder_PointFToFloatArray_init() {
  J2OBJC_NEW_IMPL(ADPropertyValuesHolder_PointFToFloatArray, init)
}

ADPropertyValuesHolder_PointFToFloatArray *create_ADPropertyValuesHolder_PointFToFloatArray_init() {
  J2OBJC_CREATE_IMPL(ADPropertyValuesHolder_PointFToFloatArray, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADPropertyValuesHolder_PointFToFloatArray)

@implementation ADPropertyValuesHolder_PointFToIntArray

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADPropertyValuesHolder_PointFToIntArray_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (IOSIntArray *)convertWithId:(ADPointF *)value {
  *IOSIntArray_GetRef(nil_chk(mCoordinates_), 0) = JavaLangMath_roundWithFloat_(((ADPointF *) nil_chk(value))->x_);
  *IOSIntArray_GetRef(nil_chk(mCoordinates_), 1) = JavaLangMath_roundWithFloat_(value->y_);
  return mCoordinates_;
}

- (void)dealloc {
  RELEASE_(mCoordinates_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[I", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(convertWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mCoordinates_", "[I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "convert", "LADPointF;", "LADPropertyValuesHolder;", "Lr/android/animation/TypeConverter<Lr/android/graphics/PointF;[I>;" };
  static const J2ObjcClassInfo _ADPropertyValuesHolder_PointFToIntArray = { "PointFToIntArray", "r.android.animation", ptrTable, methods, fields, 7, 0xa, 2, 1, 2, -1, -1, 3, -1 };
  return &_ADPropertyValuesHolder_PointFToIntArray;
}

@end

void ADPropertyValuesHolder_PointFToIntArray_init(ADPropertyValuesHolder_PointFToIntArray *self) {
  ADTypeConverter_initWithIOSClass_withIOSClass_(self, ADPointF_class_(), IOSClass_intArray(1));
  JreStrongAssignAndConsume(&self->mCoordinates_, [IOSIntArray newArrayWithLength:2]);
}

ADPropertyValuesHolder_PointFToIntArray *new_ADPropertyValuesHolder_PointFToIntArray_init() {
  J2OBJC_NEW_IMPL(ADPropertyValuesHolder_PointFToIntArray, init)
}

ADPropertyValuesHolder_PointFToIntArray *create_ADPropertyValuesHolder_PointFToIntArray_init() {
  J2OBJC_CREATE_IMPL(ADPropertyValuesHolder_PointFToIntArray, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADPropertyValuesHolder_PointFToIntArray)

@implementation ADPropertyValuesHolder_PropertyValues

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADPropertyValuesHolder_PropertyValues_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (NSString *)description {
  return (JreStrcat("$$$@$$$$", @"property name: ", propertyName_, @", type: ", type_, @", startValue: ", [nil_chk(startValue_) description], @", endValue: ", [nil_chk(endValue_) description]));
}

- (void)dealloc {
  RELEASE_(propertyName_);
  RELEASE_(type_);
  RELEASE_(startValue_);
  RELEASE_(endValue_);
  RELEASE_(dataSource_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 0, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "propertyName_", "LNSString;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "type_", "LIOSClass;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "startValue_", "LNSObject;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "endValue_", "LNSObject;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "dataSource_", "LADPropertyValuesHolder_PropertyValues_DataSource;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "toString", "LADPropertyValuesHolder;", "LADPropertyValuesHolder_PropertyValues_DataSource;" };
  static const J2ObjcClassInfo _ADPropertyValuesHolder_PropertyValues = { "PropertyValues", "r.android.animation", ptrTable, methods, fields, 7, 0x9, 2, 5, 1, 2, -1, -1, -1 };
  return &_ADPropertyValuesHolder_PropertyValues;
}

@end

void ADPropertyValuesHolder_PropertyValues_init(ADPropertyValuesHolder_PropertyValues *self) {
  NSObject_init(self);
  JreStrongAssign(&self->dataSource_, nil);
}

ADPropertyValuesHolder_PropertyValues *new_ADPropertyValuesHolder_PropertyValues_init() {
  J2OBJC_NEW_IMPL(ADPropertyValuesHolder_PropertyValues, init)
}

ADPropertyValuesHolder_PropertyValues *create_ADPropertyValuesHolder_PropertyValues_init() {
  J2OBJC_CREATE_IMPL(ADPropertyValuesHolder_PropertyValues, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADPropertyValuesHolder_PropertyValues)
