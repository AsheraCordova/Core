//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroid\src\main\stub\r\android\os\Trace.java
//

#define J2OBJC_IMPORTED_BY_JAVA_IMPLEMENTATION 1




#include "J2ObjC_source.h"
#include "Trace.h"
#include "java/lang/Boolean.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"




#pragma clang diagnostic error "-Wreturn-type"
#pragma clang diagnostic ignored "-Wswitch"


@implementation ADTrace

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADTrace_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (void)traceBeginWithInt:(int32_t)traceTagView
             withNSString:(NSString *)string {
  ADTrace_traceBeginWithInt_withNSString_(traceTagView, string);
}

+ (void)traceEndWithInt:(int32_t)traceTagView {
  ADTrace_traceEndWithInt_(traceTagView);
}

+ (bool)isTagEnabledWithLong:(int64_t)traceTag {
  return ADTrace_isTagEnabledWithLong_(traceTag);
}

+ (void)traceBeginWithLong:(int64_t)traceTag
              withNSString:(NSString *)traceName {
  ADTrace_traceBeginWithLong_withNSString_(traceTag, traceName);
}

+ (void)traceEndWithLong:(int64_t)traceTag {
  ADTrace_traceEndWithLong_(traceTag);
}

+ (void)asyncTraceEndWithInt:(int32_t)traceTagView
                withNSString:(NSString *)nameForTrace
                     withInt:(int32_t)identityHashCode {
  ADTrace_asyncTraceEndWithInt_withNSString_withInt_(traceTagView, nameForTrace, identityHashCode);
}

+ (void)asyncTraceBeginWithInt:(int32_t)traceTagView
                  withNSString:(NSString *)nameForTrace
                       withInt:(int32_t)identityHashCode {
  ADTrace_asyncTraceBeginWithInt_withNSString_withInt_(traceTagView, nameForTrace, identityHashCode);
}

+ (void)traceCounterWithInt:(int32_t)traceTagView
               withNSString:(NSString *)string
                    withInt:(int32_t)i {
  ADTrace_traceCounterWithInt_withNSString_withInt_(traceTagView, string, i);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 2, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 0, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 2, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 9, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 10, 8, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(traceBeginWithInt:withNSString:);
  methods[2].selector = @selector(traceEndWithInt:);
  methods[3].selector = @selector(isTagEnabledWithLong:);
  methods[4].selector = @selector(traceBeginWithLong:withNSString:);
  methods[5].selector = @selector(traceEndWithLong:);
  methods[6].selector = @selector(asyncTraceEndWithInt:withNSString:withInt:);
  methods[7].selector = @selector(asyncTraceBeginWithInt:withNSString:withInt:);
  methods[8].selector = @selector(traceCounterWithInt:withNSString:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "TRACE_TAG_VIEW", "I", .constantValue.asInt = ADTrace_TRACE_TAG_VIEW, 0x19, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "traceBegin", "ILNSString;", "traceEnd", "I", "isTagEnabled", "J", "JLNSString;", "asyncTraceEnd", "ILNSString;I", "asyncTraceBegin", "traceCounter" };
  static const J2ObjcClassInfo _ADTrace = { "Trace", "r.android.os", ptrTable, methods, fields, 7, 0x1, 9, 1, -1, -1, -1, -1, -1 };
  return &_ADTrace;
}

@end

void ADTrace_init(ADTrace *self) {
  NSObject_init(self);
}

ADTrace *new_ADTrace_init() {
  J2OBJC_NEW_IMPL(ADTrace, init)
}

ADTrace *create_ADTrace_init() {
  J2OBJC_CREATE_IMPL(ADTrace, init)
}

void ADTrace_traceBeginWithInt_withNSString_(int32_t traceTagView, NSString *string) {
  ADTrace_initialize();
}

void ADTrace_traceEndWithInt_(int32_t traceTagView) {
  ADTrace_initialize();
}

bool ADTrace_isTagEnabledWithLong_(int64_t traceTag) {
  ADTrace_initialize();
  return false;
}

void ADTrace_traceBeginWithLong_withNSString_(int64_t traceTag, NSString *traceName) {
  ADTrace_initialize();
}

void ADTrace_traceEndWithLong_(int64_t traceTag) {
  ADTrace_initialize();
}

void ADTrace_asyncTraceEndWithInt_withNSString_withInt_(int32_t traceTagView, NSString *nameForTrace, int32_t identityHashCode) {
  ADTrace_initialize();
}

void ADTrace_asyncTraceBeginWithInt_withNSString_withInt_(int32_t traceTagView, NSString *nameForTrace, int32_t identityHashCode) {
  ADTrace_initialize();
}

void ADTrace_traceCounterWithInt_withNSString_withInt_(int32_t traceTagView, NSString *string, int32_t i) {
  ADTrace_initialize();
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADTrace)

J2OBJC_NAME_MAPPING(ADTrace, "r.android.os", "AD")
