//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroid\src\main\java\r\android\animation\RectEvaluator.java
//

#import <Foundation/Foundation.h>
#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_RectEvaluator")
#ifdef RESTRICT_RectEvaluator
#define INCLUDE_ALL_RectEvaluator 0
#else
#define INCLUDE_ALL_RectEvaluator 1
#endif
#undef RESTRICT_RectEvaluator

#if !defined (ADRectEvaluator_) && (INCLUDE_ALL_RectEvaluator || defined(INCLUDE_ADRectEvaluator))
#define ADRectEvaluator_

#define RESTRICT_TypeEvaluator 1
#define INCLUDE_ADTypeEvaluator 1
#include "TypeEvaluator.h"

@class ADRect;
@class JavaLangFloat;

/*!
 @brief This evaluator can be used to perform type interpolation between <code>Rect</code> values.
 */
@interface ADRectEvaluator : NSObject < ADTypeEvaluator >

#pragma mark Public

/*!
 @brief Construct a RectEvaluator that returns a new Rect on every evaluate call.
 To avoid creating an object for each evaluate call, 
 <code>RectEvaluator.RectEvaluator(r.android.graphics.Rect)</code> should be used
  whenever possible.
 */
- (instancetype)init;

/*!
 @brief Constructs a RectEvaluator that modifies and returns <code>reuseRect</code>
  in <code>evaluate(float, r.android.graphics.Rect, r.android.graphics.Rect)</code> calls.
 The value returned from 
 <code>evaluate(float, r.android.graphics.Rect, r.android.graphics.Rect)</code> should
  not be cached because it will change over time as the object is reused on each
  call.
 @param reuseRect A Rect to be modified and returned by evaluate.
 */
- (instancetype)initWithADRect:(ADRect *)reuseRect;

/*!
 @brief This function returns the result of linearly interpolating the start and
  end Rect values, with <code>fraction</code> representing the proportion
  between the start and end values.The calculation is a simple parametric
  calculation on each of the separate components in the Rect objects
  (left, top, right, and bottom).
 <p>If <code>RectEvaluator(r.android.graphics.Rect)</code> was used to construct
  this RectEvaluator, the object returned will be the <code>reuseRect</code>
  passed into the constructor.</p>
 @param fraction The fraction from the starting to the ending values
 @param startValue The start Rect
 @param endValue The end Rect
 @return A linear interpolation between the start and end values, given the
          <code>fraction</code> parameter.
 */
- (ADRect *)evaluateWithFloat:(float)fraction
                       withId:(ADRect *)startValue
                       withId:(ADRect *)endValue;

@end

J2OBJC_EMPTY_STATIC_INIT(ADRectEvaluator)

FOUNDATION_EXPORT void ADRectEvaluator_init(ADRectEvaluator *self);

FOUNDATION_EXPORT ADRectEvaluator *new_ADRectEvaluator_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ADRectEvaluator *create_ADRectEvaluator_init(void);

FOUNDATION_EXPORT void ADRectEvaluator_initWithADRect_(ADRectEvaluator *self, ADRect *reuseRect);

FOUNDATION_EXPORT ADRectEvaluator *new_ADRectEvaluator_initWithADRect_(ADRect *reuseRect) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ADRectEvaluator *create_ADRectEvaluator_initWithADRect_(ADRect *reuseRect);

J2OBJC_TYPE_LITERAL_HEADER(ADRectEvaluator)

@compatibility_alias RAndroidAnimationRectEvaluator ADRectEvaluator;


#endif

#pragma pop_macro("INCLUDE_ALL_RectEvaluator")
