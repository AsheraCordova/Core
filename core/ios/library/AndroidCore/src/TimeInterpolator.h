//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroid\src\main\java\r\android\animation\TimeInterpolator.java
//

#import <Foundation/Foundation.h>
#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_TimeInterpolator")
#ifdef RESTRICT_TimeInterpolator
#define INCLUDE_ALL_TimeInterpolator 0
#else
#define INCLUDE_ALL_TimeInterpolator 1
#endif
#undef RESTRICT_TimeInterpolator

#if !defined (ADTimeInterpolator_) && (INCLUDE_ALL_TimeInterpolator || defined(INCLUDE_ADTimeInterpolator))
#define ADTimeInterpolator_

@class JavaLangFloat;

/*!
 @brief A time interpolator defines the rate of change of an animation.This allows animations
  to have non-linear motion, such as acceleration and deceleration.
 */
@protocol ADTimeInterpolator < JavaObject >

/*!
 @brief Maps a value representing the elapsed fraction of an animation to a value that represents
  the interpolated fraction.This interpolated value is then multiplied by the change in
  value of an animation to derive the animated value at the current elapsed animation time.
 @param input A value between 0 and 1.0 indicating our current point         in the animation where 0 represents the start and 1.0 represents
          the end
 @return The interpolation value. This value can be more than 1.0 for
          interpolators which overshoot their targets, or less than 0 for
          interpolators that undershoot their targets.
 */
- (float)getInterpolationWithFloat:(float)input;

@end

J2OBJC_EMPTY_STATIC_INIT(ADTimeInterpolator)

J2OBJC_TYPE_LITERAL_HEADER(ADTimeInterpolator)

#define RAndroidAnimationTimeInterpolator ADTimeInterpolator


#endif

#pragma pop_macro("INCLUDE_ALL_TimeInterpolator")
