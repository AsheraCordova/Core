//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroid\src\main\java\r\android\graphics\Point.java
//

#import <Foundation/Foundation.h>
#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_Point")
#ifdef RESTRICT_Point
#define INCLUDE_ALL_Point 0
#else
#define INCLUDE_ALL_Point 1
#endif
#undef RESTRICT_Point

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ADPoint_) && (INCLUDE_ALL_Point || defined(INCLUDE_ADPoint))
#define ADPoint_

#define RESTRICT_Parcelable 1
#define INCLUDE_ADParcelable 1
#include "Parcelable.h"

@class ADParcelable_Creator;
@class JavaLangBoolean;
@class JavaLangInteger;
@class NSString;
@protocol ADParcel;

/*!
 @brief Point holds two integer coordinates
 */
@interface ADPoint : NSObject < ADParcelable > {
 @public
  int32_t x_;
  int32_t y_;
}

#pragma mark Public

- (instancetype)init;

- (instancetype)initWithInt:(int32_t)x
                    withInt:(int32_t)y;

- (instancetype)initWithADPoint:(ADPoint *)src;

/*!
 @brief Parcelable interface methods
 */
- (int32_t)describeContents;

/*!
 @brief Returns true if the point's coordinates equal (x,y)
 */
- (bool)equalsWithInt:(int32_t)x
              withInt:(int32_t)y;

- (bool)isEqual:(id)o;

/*!
 @return Returns a <code>String</code> that represents this point which can be parsed with 
 <code>unflattenFromString(String)</code>.
 */
- (NSString *)flattenToString;

- (NSUInteger)hash;

/*!
 @brief Negate the point's coordinates
 */
- (void)negate;

/*!
 @brief Offset the point's coordinates by dx, dy
 */
- (void)offsetWithInt:(int32_t)dx
              withInt:(int32_t)dy;

/*!
 @brief Set the point's coordinates from the data stored in the specified
  parcel.To write a point to a parcel, call writeToParcel().
 @param inArg The parcel to read the point's coordinates from
 */
- (void)readFromParcelWithADParcel:(id<ADParcel>)inArg;

/*!
 @brief Set the point's x and y coordinates
 */
- (void)setWithInt:(int32_t)x
           withInt:(int32_t)y;

/*!
 @brief Sets the point's from <code>src</code>'s coordinates
 */
- (void)setWithADPoint:(ADPoint *)src;

- (NSString *)description;

/*!
 @return Returns a <code>Point</code> from a short string created from <code>flattenToString()</code>.
 */
+ (ADPoint *)unflattenFromStringWithNSString:(NSString *)s;

/*!
 @brief Write this point to the specified parcel.To restore a point from
  a parcel, use readFromParcel()
 @param outArg The parcel to write the point's coordinates into
 */
- (void)writeToParcelWithADParcel:(id<ADParcel>)outArg
                          withInt:(int32_t)flags;

@end

J2OBJC_STATIC_INIT(ADPoint)

inline ADParcelable_Creator *ADPoint_get_CREATOR(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT ADParcelable_Creator *ADPoint_CREATOR;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADPoint, CREATOR, ADParcelable_Creator *)

FOUNDATION_EXPORT void ADPoint_init(ADPoint *self);

FOUNDATION_EXPORT ADPoint *new_ADPoint_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ADPoint *create_ADPoint_init(void);

FOUNDATION_EXPORT void ADPoint_initWithInt_withInt_(ADPoint *self, int32_t x, int32_t y);

FOUNDATION_EXPORT ADPoint *new_ADPoint_initWithInt_withInt_(int32_t x, int32_t y) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ADPoint *create_ADPoint_initWithInt_withInt_(int32_t x, int32_t y);

FOUNDATION_EXPORT void ADPoint_initWithADPoint_(ADPoint *self, ADPoint *src);

FOUNDATION_EXPORT ADPoint *new_ADPoint_initWithADPoint_(ADPoint *src) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ADPoint *create_ADPoint_initWithADPoint_(ADPoint *src);

FOUNDATION_EXPORT ADPoint *ADPoint_unflattenFromStringWithNSString_(NSString *s);

J2OBJC_TYPE_LITERAL_HEADER(ADPoint)

@compatibility_alias RAndroidGraphicsPoint ADPoint;


#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_Point")
