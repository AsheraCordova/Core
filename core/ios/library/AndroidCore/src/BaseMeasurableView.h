//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroid\src\main\java\com\ashera\view\BaseMeasurableView.java
//

#import <Foundation/Foundation.h>
#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_BaseMeasurableView")
#ifdef RESTRICT_BaseMeasurableView
#define INCLUDE_ALL_BaseMeasurableView 0
#else
#define INCLUDE_ALL_BaseMeasurableView 1
#endif
#undef RESTRICT_BaseMeasurableView

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ASBaseMeasurableView_) && (INCLUDE_ALL_BaseMeasurableView || defined(INCLUDE_ASBaseMeasurableView))
#define ASBaseMeasurableView_

#define RESTRICT_View 1
#define INCLUDE_ADView 1
#include "View.h"

@class ADDrawable;
@class ASBaseMeasurableView_HorizonantalAligment;
@class ASBaseMeasurableView_VerticalAligment;
@class ASRectM;
@class IOSObjectArray;
@class JavaLangBoolean;
@class JavaLangInteger;
@protocol ASHasWidgets;
@protocol ASIWidget;

@interface ASBaseMeasurableView : ADView {
 @public
  ASBaseMeasurableView_VerticalAligment *verticalAligment_;
  ASBaseMeasurableView_HorizonantalAligment *horizonantalAligment_;
  bool mHorizontallyScrolling_;
}

#pragma mark Public

- (instancetype)initWithASIWidget:(id<ASIWidget>)widget;

- (int32_t)getBaseline;

- (ADDrawable *)getBottomDrawable;

- (ASRectM *)getBottomDrawableBoundsWithInt:(int32_t)x
                                    withInt:(int32_t)y
                                    withInt:(int32_t)width
                                    withInt:(int32_t)height;

- (int32_t)getCompoundPaddingBottom;

- (int32_t)getCompoundPaddingLeft;

- (int32_t)getCompoundPaddingLeftWithIgnoreCheck;

- (int32_t)getCompoundPaddingRight;

- (int32_t)getCompoundPaddingRightWithIgnoreCheck;

- (int32_t)getCompoundPaddingTop;

- (int32_t)getDrawablePadding;

- (ASBaseMeasurableView_HorizonantalAligment *)getHorizonantalAligment;

- (ADDrawable *)getLeftDrawable;

- (ASRectM *)getLeftDrawableBoundsWithInt:(int32_t)x
                                  withInt:(int32_t)y
                                  withInt:(int32_t)width
                                  withInt:(int32_t)height;

- (ADDrawable *)getRightDrawable;

- (ASRectM *)getRightDrawableBoundsWithInt:(int32_t)x
                                   withInt:(int32_t)y
                                   withInt:(int32_t)width
                                   withInt:(int32_t)height;

- (ADDrawable *)getTopDrawable;

- (ASRectM *)getTopDrawableBoundsWithInt:(int32_t)x
                                 withInt:(int32_t)y
                                 withInt:(int32_t)width
                                 withInt:(int32_t)height;

- (ASBaseMeasurableView_VerticalAligment *)getVerticalAligment;

- (id<ASIWidget>)getWidget;

- (ASRectM *)getWidgetBoundsWithInt:(int32_t)width
                            withInt:(int32_t)height
                  withNSObjectArray:(IOSObjectArray *)nativeWidgets;

- (bool)hasDrawables;

- (bool)isCompoundHorizontalPaddingConsumed;

- (bool)isIgnoreDrawableHeight;

- (bool)isVerticalAlignBottom;

- (bool)isVerticalAlignMiddle;

- (bool)isVerticalAlignTop;

+ (void)measureWidgetWithNoParentWithASHasWidgets:(id<ASHasWidgets>)parent
                                    withASIWidget:(id<ASIWidget>)widget
                                          withInt:(int32_t)level
                                          withInt:(int32_t)initialWidth
                                          withInt:(int32_t)indent;

- (int32_t)nativeMeasureHeightWithId:(id)uiView
                             withInt:(int32_t)width;

- (int32_t)nativeMeasureWidthWithId:(id)uiView;

- (void)setBottomDrawableWithADDrawable:(ADDrawable *)bottomDrawable;

- (void)setCompoundHorizontalPaddingConsumedWithBoolean:(bool)isCompoundHorizontalPaddingConsumed;

- (void)setDrawablePaddingWithInt:(int32_t)drawablePadding;

- (void)setHorizonantalAligmentWithASBaseMeasurableView_HorizonantalAligment:(ASBaseMeasurableView_HorizonantalAligment *)horizonantalAligment;

- (void)setHorizontallyScrollingWithBoolean:(bool)horizontallyScrolling;

- (void)setIgnoreDrawableHeightWithBoolean:(bool)ignoreDrawableHeight;

- (void)setLeftDrawableWithADDrawable:(ADDrawable *)leftDrawable;

- (void)setRightDrawableWithADDrawable:(ADDrawable *)rightDrawable;

- (void)setTopDrawableWithADDrawable:(ADDrawable *)topDrawable;

- (void)setVerticalAligmentWithASBaseMeasurableView_VerticalAligment:(ASBaseMeasurableView_VerticalAligment *)verticalAligment;

#pragma mark Protected

- (void)onMeasureWithInt:(int32_t)widthMeasureSpec
                 withInt:(int32_t)heightMeasureSpec;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ASBaseMeasurableView)

J2OBJC_FIELD_SETTER(ASBaseMeasurableView, verticalAligment_, ASBaseMeasurableView_VerticalAligment *)
J2OBJC_FIELD_SETTER(ASBaseMeasurableView, horizonantalAligment_, ASBaseMeasurableView_HorizonantalAligment *)

inline int32_t ASBaseMeasurableView_get_VERY_WIDE(void);
inline int32_t ASBaseMeasurableView_set_VERY_WIDE(int32_t value);
inline int32_t *ASBaseMeasurableView_getRef_VERY_WIDE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT int32_t ASBaseMeasurableView_VERY_WIDE;
J2OBJC_STATIC_FIELD_PRIMITIVE(ASBaseMeasurableView, VERY_WIDE, int32_t)

FOUNDATION_EXPORT void ASBaseMeasurableView_initWithASIWidget_(ASBaseMeasurableView *self, id<ASIWidget> widget);

FOUNDATION_EXPORT void ASBaseMeasurableView_measureWidgetWithNoParentWithASHasWidgets_withASIWidget_withInt_withInt_withInt_(id<ASHasWidgets> parent, id<ASIWidget> widget, int32_t level, int32_t initialWidth, int32_t indent);

J2OBJC_TYPE_LITERAL_HEADER(ASBaseMeasurableView)

@compatibility_alias ComAsheraViewBaseMeasurableView ASBaseMeasurableView;


#endif

#if !defined (ASBaseMeasurableView_VerticalAligment_) && (INCLUDE_ALL_BaseMeasurableView || defined(INCLUDE_ASBaseMeasurableView_VerticalAligment))
#define ASBaseMeasurableView_VerticalAligment_

#define RESTRICT_JavaLangEnum 1
#define INCLUDE_JavaLangEnum 1
#include "java/lang/Enum.h"

@class IOSObjectArray;
@class NSString;

typedef NS_ENUM(int32_t, ASBaseMeasurableView_VerticalAligment_Enum) {
  ASBaseMeasurableView_VerticalAligment_Enum_middle NS_SWIFT_NAME(middle) = 0,
  ASBaseMeasurableView_VerticalAligment_Enum_bottom NS_SWIFT_NAME(bottom) = 1,
  ASBaseMeasurableView_VerticalAligment_Enum_top NS_SWIFT_NAME(top) = 2,
};

#if J2OBJC_IMPORTED_BY_JAVA_IMPLEMENTATION
#define ASBaseMeasurableView_VerticalAligment_ORDINAL int32_t
#else
#define ASBaseMeasurableView_VerticalAligment_ORDINAL ASBaseMeasurableView_VerticalAligment_Enum
#endif


@interface ASBaseMeasurableView_VerticalAligment : JavaLangEnum

#pragma mark Public

+ (ASBaseMeasurableView_VerticalAligment *)valueOfWithNSString:(NSString *)name;

+ (IOSObjectArray *)values;

#pragma mark Package-Private

- (ASBaseMeasurableView_VerticalAligment_Enum)toNSEnum;

@property(readonly) ASBaseMeasurableView_VerticalAligment_Enum enumValue;
+ (ASBaseMeasurableView_VerticalAligment *)fromNSEnum:(ASBaseMeasurableView_VerticalAligment_Enum)value;

- (ASBaseMeasurableView_VerticalAligment_ORDINAL)ordinal NS_SWIFT_UNAVAILABLE("Use .enumValue");

- (nullable instancetype)initWithVerticalAligment:(ASBaseMeasurableView_VerticalAligment_Enum)value;

@end

J2OBJC_STATIC_INIT(ASBaseMeasurableView_VerticalAligment)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT ASBaseMeasurableView_VerticalAligment *ASBaseMeasurableView_VerticalAligment_values_[];

inline ASBaseMeasurableView_VerticalAligment *ASBaseMeasurableView_VerticalAligment_get_middle(void);
J2OBJC_ENUM_CONSTANT(ASBaseMeasurableView_VerticalAligment, middle)

inline ASBaseMeasurableView_VerticalAligment *ASBaseMeasurableView_VerticalAligment_get_bottom(void);
J2OBJC_ENUM_CONSTANT(ASBaseMeasurableView_VerticalAligment, bottom)

inline ASBaseMeasurableView_VerticalAligment *ASBaseMeasurableView_VerticalAligment_get_top(void);
J2OBJC_ENUM_CONSTANT(ASBaseMeasurableView_VerticalAligment, top)

FOUNDATION_EXPORT IOSObjectArray *ASBaseMeasurableView_VerticalAligment_values(void);

FOUNDATION_EXPORT ASBaseMeasurableView_VerticalAligment *ASBaseMeasurableView_VerticalAligment_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT ASBaseMeasurableView_VerticalAligment *ASBaseMeasurableView_VerticalAligment_fromOrdinal(ASBaseMeasurableView_VerticalAligment_ORDINAL ordinal);

J2OBJC_TYPE_LITERAL_HEADER(ASBaseMeasurableView_VerticalAligment)


#endif

#if !defined (ASBaseMeasurableView_HorizonantalAligment_) && (INCLUDE_ALL_BaseMeasurableView || defined(INCLUDE_ASBaseMeasurableView_HorizonantalAligment))
#define ASBaseMeasurableView_HorizonantalAligment_

#define RESTRICT_JavaLangEnum 1
#define INCLUDE_JavaLangEnum 1
#include "java/lang/Enum.h"

@class IOSObjectArray;
@class NSString;

typedef NS_ENUM(int32_t, ASBaseMeasurableView_HorizonantalAligment_Enum) {
  ASBaseMeasurableView_HorizonantalAligment_Enum_center NS_SWIFT_NAME(center) = 0,
  ASBaseMeasurableView_HorizonantalAligment_Enum_left NS_SWIFT_NAME(left) = 1,
  ASBaseMeasurableView_HorizonantalAligment_Enum_right NS_SWIFT_NAME(right) = 2,
};

#if J2OBJC_IMPORTED_BY_JAVA_IMPLEMENTATION
#define ASBaseMeasurableView_HorizonantalAligment_ORDINAL int32_t
#else
#define ASBaseMeasurableView_HorizonantalAligment_ORDINAL ASBaseMeasurableView_HorizonantalAligment_Enum
#endif


@interface ASBaseMeasurableView_HorizonantalAligment : JavaLangEnum

#pragma mark Public

+ (ASBaseMeasurableView_HorizonantalAligment *)valueOfWithNSString:(NSString *)name;

+ (IOSObjectArray *)values;

#pragma mark Package-Private

- (ASBaseMeasurableView_HorizonantalAligment_Enum)toNSEnum;

@property(readonly) ASBaseMeasurableView_HorizonantalAligment_Enum enumValue;
+ (ASBaseMeasurableView_HorizonantalAligment *)fromNSEnum:(ASBaseMeasurableView_HorizonantalAligment_Enum)value;

- (ASBaseMeasurableView_HorizonantalAligment_ORDINAL)ordinal NS_SWIFT_UNAVAILABLE("Use .enumValue");

- (nullable instancetype)initWithHorizonantalAligment:(ASBaseMeasurableView_HorizonantalAligment_Enum)value;

@end

J2OBJC_STATIC_INIT(ASBaseMeasurableView_HorizonantalAligment)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT ASBaseMeasurableView_HorizonantalAligment *ASBaseMeasurableView_HorizonantalAligment_values_[];

inline ASBaseMeasurableView_HorizonantalAligment *ASBaseMeasurableView_HorizonantalAligment_get_center(void);
J2OBJC_ENUM_CONSTANT(ASBaseMeasurableView_HorizonantalAligment, center)

inline ASBaseMeasurableView_HorizonantalAligment *ASBaseMeasurableView_HorizonantalAligment_get_left(void);
J2OBJC_ENUM_CONSTANT(ASBaseMeasurableView_HorizonantalAligment, left)

inline ASBaseMeasurableView_HorizonantalAligment *ASBaseMeasurableView_HorizonantalAligment_get_right(void);
J2OBJC_ENUM_CONSTANT(ASBaseMeasurableView_HorizonantalAligment, right)

FOUNDATION_EXPORT IOSObjectArray *ASBaseMeasurableView_HorizonantalAligment_values(void);

FOUNDATION_EXPORT ASBaseMeasurableView_HorizonantalAligment *ASBaseMeasurableView_HorizonantalAligment_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT ASBaseMeasurableView_HorizonantalAligment *ASBaseMeasurableView_HorizonantalAligment_fromOrdinal(ASBaseMeasurableView_HorizonantalAligment_ORDINAL ordinal);

J2OBJC_TYPE_LITERAL_HEADER(ASBaseMeasurableView_HorizonantalAligment)


#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_BaseMeasurableView")
