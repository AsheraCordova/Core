//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroid\src\main\java\r\android\os\Handler.java
//

#define J2OBJC_IMPORTED_BY_JAVA_IMPLEMENTATION 1




#include "Handler.h"
#include "IMessenger.h"
#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "Log.h"
#include "Looper.h"
#include "Message.h"
#include "MessageQueue.h"
#include "SystemClock.h"
#include "java/lang/Boolean.h"
#include "java/lang/Character.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Long.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/Runnable.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/lang/Thread.h"


@class NSString;


#pragma clang diagnostic error "-Wreturn-type"
#pragma clang diagnostic ignored "-Wswitch"


@interface ADHandler ()

- (bool)enqueueMessageWithADMessageQueue:(ADMessageQueue *)queue
                           withADMessage:(ADMessage *)msg
                                withLong:(int64_t)uptimeMillis;

+ (ADMessage *)getPostMessageWithJavaLangRunnable:(id<JavaLangRunnable>)r;

+ (ADMessage *)getPostMessageWithJavaLangRunnable:(id<JavaLangRunnable>)r
                                           withId:(id)token;

+ (void)handleCallbackWithADMessage:(ADMessage *)message;

@end

inline bool ADHandler_get_FIND_POTENTIAL_LEAKS(void);
#define ADHandler_FIND_POTENTIAL_LEAKS false
J2OBJC_STATIC_FIELD_CONSTANT(ADHandler, FIND_POTENTIAL_LEAKS, bool)

inline NSString *ADHandler_get_TAG(void);
static NSString *ADHandler_TAG = @"Handler";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADHandler, TAG, NSString *)

inline ADHandler *ADHandler_get_MAIN_THREAD_HANDLER(void);
inline ADHandler *ADHandler_set_MAIN_THREAD_HANDLER(ADHandler *value);
static ADHandler *ADHandler_MAIN_THREAD_HANDLER;
J2OBJC_STATIC_FIELD_OBJ(ADHandler, MAIN_THREAD_HANDLER, ADHandler *)

__attribute__((unused)) static bool ADHandler_postWithJavaLangRunnable_(ADHandler *self, id<JavaLangRunnable> r);

__attribute__((unused)) static bool ADHandler_sendMessageWithADMessage_(ADHandler *self, ADMessage *msg);

__attribute__((unused)) static bool ADHandler_sendEmptyMessageDelayedWithInt_withLong_(ADHandler *self, int32_t what, int64_t delayMillis);

__attribute__((unused)) static bool ADHandler_sendMessageDelayedWithADMessage_withLong_(ADHandler *self, ADMessage *msg, int64_t delayMillis);

__attribute__((unused)) static bool ADHandler_sendMessageAtFrontOfQueueWithADMessage_(ADHandler *self, ADMessage *msg);

__attribute__((unused)) static bool ADHandler_enqueueMessageWithADMessageQueue_withADMessage_withLong_(ADHandler *self, ADMessageQueue *queue, ADMessage *msg, int64_t uptimeMillis);

__attribute__((unused)) static ADMessage *ADHandler_getPostMessageWithJavaLangRunnable_(id<JavaLangRunnable> r);

__attribute__((unused)) static ADMessage *ADHandler_getPostMessageWithJavaLangRunnable_withId_(id<JavaLangRunnable> r, id token);

__attribute__((unused)) static void ADHandler_handleCallbackWithADMessage_(ADMessage *message);

@interface ADHandler_Callback : NSObject

@end

@interface ADHandler_MessengerImpl : ADIMessenger_Stub {
 @public
  ADHandler *this$0_;
}

- (instancetype)initWithADHandler:(ADHandler *)outer$;

- (void)sendWithADMessage:(ADMessage *)msg;

@end

J2OBJC_EMPTY_STATIC_INIT(ADHandler_MessengerImpl)

__attribute__((unused)) static void ADHandler_MessengerImpl_initWithADHandler_(ADHandler_MessengerImpl *self, ADHandler *outer$);

__attribute__((unused)) static ADHandler_MessengerImpl *new_ADHandler_MessengerImpl_initWithADHandler_(ADHandler *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static ADHandler_MessengerImpl *create_ADHandler_MessengerImpl_initWithADHandler_(ADHandler *outer$);

J2OBJC_TYPE_LITERAL_HEADER(ADHandler_MessengerImpl)


@interface ADHandler_BlockingRunnable : NSObject < JavaLangRunnable > {
 @public
  id<JavaLangRunnable> mTask_;
  bool mDone_;
}

- (instancetype)initWithJavaLangRunnable:(id<JavaLangRunnable>)task;

- (void)run;

- (bool)postAndWaitWithADHandler:(ADHandler *)handler
                        withLong:(int64_t)timeout;

@end

J2OBJC_EMPTY_STATIC_INIT(ADHandler_BlockingRunnable)

J2OBJC_FIELD_SETTER(ADHandler_BlockingRunnable, mTask_, id<JavaLangRunnable>)

__attribute__((unused)) static void ADHandler_BlockingRunnable_initWithJavaLangRunnable_(ADHandler_BlockingRunnable *self, id<JavaLangRunnable> task);

__attribute__((unused)) static ADHandler_BlockingRunnable *new_ADHandler_BlockingRunnable_initWithJavaLangRunnable_(id<JavaLangRunnable> task) NS_RETURNS_RETAINED;

__attribute__((unused)) static ADHandler_BlockingRunnable *create_ADHandler_BlockingRunnable_initWithJavaLangRunnable_(id<JavaLangRunnable> task);

J2OBJC_TYPE_LITERAL_HEADER(ADHandler_BlockingRunnable)


@implementation ADHandler

- (void)handleMessageWithADMessage:(ADMessage *)msg {
}

- (void)dispatchMessageWithADMessage:(ADMessage *)msg {
  if (((ADMessage *) nil_chk(msg))->callback_ != nil) {
    ADHandler_handleCallbackWithADMessage_(msg);
  }
  else {
    if (mCallback_ != nil) {
      if ([mCallback_ handleMessageWithADMessage:msg]) {
        return;
      }
    }
    [self handleMessageWithADMessage:msg];
  }
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADHandler_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithADHandler_Callback:(id<ADHandler_Callback>)callback {
  ADHandler_initWithADHandler_Callback_(self, callback);
  return self;
}

- (instancetype)initWithADLooper:(ADLooper *)looper {
  ADHandler_initWithADLooper_(self, looper);
  return self;
}

- (instancetype)initWithADLooper:(ADLooper *)looper
          withADHandler_Callback:(id<ADHandler_Callback>)callback {
  ADHandler_initWithADLooper_withADHandler_Callback_(self, looper, callback);
  return self;
}

- (instancetype)initWithBoolean:(bool)async {
  ADHandler_initWithBoolean_(self, async);
  return self;
}

- (instancetype)initWithADHandler_Callback:(id<ADHandler_Callback>)callback
                               withBoolean:(bool)async {
  ADHandler_initWithADHandler_Callback_withBoolean_(self, callback, async);
  return self;
}

- (instancetype)initWithADLooper:(ADLooper *)looper
          withADHandler_Callback:(id<ADHandler_Callback>)callback
                     withBoolean:(bool)async {
  ADHandler_initWithADLooper_withADHandler_Callback_withBoolean_(self, looper, callback, async);
  return self;
}

+ (ADHandler *)createAsyncWithADLooper:(ADLooper *)looper {
  return ADHandler_createAsyncWithADLooper_(looper);
}

+ (ADHandler *)createAsyncWithADLooper:(ADLooper *)looper
                withADHandler_Callback:(id<ADHandler_Callback>)callback {
  return ADHandler_createAsyncWithADLooper_withADHandler_Callback_(looper, callback);
}

+ (ADHandler *)getMain {
  return ADHandler_getMain();
}

+ (ADHandler *)mainIfNullWithADHandler:(ADHandler *)handler {
  return ADHandler_mainIfNullWithADHandler_(handler);
}

- (NSString *)getTraceNameWithADMessage:(ADMessage *)message {
  JavaLangStringBuilder *sb = create_JavaLangStringBuilder_init();
  [((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:[[self java_getClass] getName]])) appendWithNSString:@": "];
  if (((ADMessage *) nil_chk(message))->callback_ != nil) {
    [sb appendWithNSString:[[message->callback_ java_getClass] getName]];
  }
  else {
    [((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@"#"])) appendWithInt:message->what_];
  }
  return [sb description];
}

- (NSString *)getMessageNameWithADMessage:(ADMessage *)message {
  if (((ADMessage *) nil_chk(message))->callback_ != nil) {
    return [[message->callback_ java_getClass] getName];
  }
  return JreStrcat("$$", @"0x", JavaLangInteger_toHexStringWithInt_(message->what_));
}

- (ADMessage *)obtainMessage {
  return ADMessage_obtainWithADHandler_(self);
}

- (ADMessage *)obtainMessageWithInt:(int32_t)what {
  return ADMessage_obtainWithADHandler_withInt_(self, what);
}

- (ADMessage *)obtainMessageWithInt:(int32_t)what
                             withId:(id)obj {
  return ADMessage_obtainWithADHandler_withInt_withId_(self, what, obj);
}

- (ADMessage *)obtainMessageWithInt:(int32_t)what
                            withInt:(int32_t)arg1
                            withInt:(int32_t)arg2 {
  return ADMessage_obtainWithADHandler_withInt_withInt_withInt_(self, what, arg1, arg2);
}

- (ADMessage *)obtainMessageWithInt:(int32_t)what
                            withInt:(int32_t)arg1
                            withInt:(int32_t)arg2
                             withId:(id)obj {
  return ADMessage_obtainWithADHandler_withInt_withInt_withInt_withId_(self, what, arg1, arg2, obj);
}

- (bool)postWithJavaLangRunnable:(id<JavaLangRunnable>)r {
  return ADHandler_postWithJavaLangRunnable_(self, r);
}

- (bool)postAtTimeWithJavaLangRunnable:(id<JavaLangRunnable>)r
                              withLong:(int64_t)uptimeMillis {
  return [self sendMessageAtTimeWithADMessage:ADHandler_getPostMessageWithJavaLangRunnable_(r) withLong:uptimeMillis];
}

- (bool)postAtTimeWithJavaLangRunnable:(id<JavaLangRunnable>)r
                                withId:(id)token
                              withLong:(int64_t)uptimeMillis {
  return [self sendMessageAtTimeWithADMessage:ADHandler_getPostMessageWithJavaLangRunnable_withId_(r, token) withLong:uptimeMillis];
}

- (bool)postDelayedWithJavaLangRunnable:(id<JavaLangRunnable>)r
                               withLong:(int64_t)delayMillis {
  return ADHandler_sendMessageDelayedWithADMessage_withLong_(self, ADHandler_getPostMessageWithJavaLangRunnable_(r), delayMillis);
}

- (bool)postDelayedWithJavaLangRunnable:(id<JavaLangRunnable>)r
                                withInt:(int32_t)what
                               withLong:(int64_t)delayMillis {
  return ADHandler_sendMessageDelayedWithADMessage_withLong_(self, [((ADMessage *) nil_chk(ADHandler_getPostMessageWithJavaLangRunnable_(r))) setWhatWithInt:what], delayMillis);
}

- (bool)postDelayedWithJavaLangRunnable:(id<JavaLangRunnable>)r
                                 withId:(id)token
                               withLong:(int64_t)delayMillis {
  return ADHandler_sendMessageDelayedWithADMessage_withLong_(self, ADHandler_getPostMessageWithJavaLangRunnable_withId_(r, token), delayMillis);
}

- (bool)postAtFrontOfQueueWithJavaLangRunnable:(id<JavaLangRunnable>)r {
  return ADHandler_sendMessageAtFrontOfQueueWithADMessage_(self, ADHandler_getPostMessageWithJavaLangRunnable_(r));
}

- (bool)runWithScissorsWithJavaLangRunnable:(id<JavaLangRunnable>)r
                                   withLong:(int64_t)timeout {
  if (r == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"runnable must not be null");
  }
  if (timeout < 0) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"timeout must be non-negative");
  }
  if (JreObjectEqualsEquals(ADLooper_myLooper(), mLooper_)) {
    [r run];
    return true;
  }
  ADHandler_BlockingRunnable *br = create_ADHandler_BlockingRunnable_initWithJavaLangRunnable_(r);
  return [br postAndWaitWithADHandler:self withLong:timeout];
}

- (void)removeCallbacksWithJavaLangRunnable:(id<JavaLangRunnable>)r {
  [((ADMessageQueue *) nil_chk(mQueue_)) removeMessagesWithADHandler:self withJavaLangRunnable:r withId:nil];
}

- (void)removeCallbacksWithJavaLangRunnable:(id<JavaLangRunnable>)r
                                     withId:(id)token {
  [((ADMessageQueue *) nil_chk(mQueue_)) removeMessagesWithADHandler:self withJavaLangRunnable:r withId:token];
}

- (bool)sendMessageWithADMessage:(ADMessage *)msg {
  return ADHandler_sendMessageWithADMessage_(self, msg);
}

- (bool)sendEmptyMessageWithInt:(int32_t)what {
  return ADHandler_sendEmptyMessageDelayedWithInt_withLong_(self, what, 0);
}

- (bool)sendEmptyMessageDelayedWithInt:(int32_t)what
                              withLong:(int64_t)delayMillis {
  return ADHandler_sendEmptyMessageDelayedWithInt_withLong_(self, what, delayMillis);
}

- (bool)sendEmptyMessageAtTimeWithInt:(int32_t)what
                             withLong:(int64_t)uptimeMillis {
  ADMessage *msg = ADMessage_obtain();
  ((ADMessage *) nil_chk(msg))->what_ = what;
  return [self sendMessageAtTimeWithADMessage:msg withLong:uptimeMillis];
}

- (bool)sendMessageDelayedWithADMessage:(ADMessage *)msg
                               withLong:(int64_t)delayMillis {
  return ADHandler_sendMessageDelayedWithADMessage_withLong_(self, msg, delayMillis);
}

- (bool)sendMessageAtTimeWithADMessage:(ADMessage *)msg
                              withLong:(int64_t)uptimeMillis {
  ADMessageQueue *queue = JreRetainedLocalValue(mQueue_);
  if (queue == nil) {
    JavaLangRuntimeException *e = create_JavaLangRuntimeException_initWithNSString_(JreStrcat("@$", self, @" sendMessageAtTime() called with no mQueue"));
    ADLog_wWithNSString_withNSString_withJavaLangThrowable_(@"Looper", [e getMessage], e);
    return false;
  }
  return ADHandler_enqueueMessageWithADMessageQueue_withADMessage_withLong_(self, queue, msg, uptimeMillis);
}

- (bool)sendMessageAtFrontOfQueueWithADMessage:(ADMessage *)msg {
  return ADHandler_sendMessageAtFrontOfQueueWithADMessage_(self, msg);
}

- (bool)executeOrSendMessageWithADMessage:(ADMessage *)msg {
  if (JreObjectEqualsEquals(mLooper_, ADLooper_myLooper())) {
    [self dispatchMessageWithADMessage:msg];
    return true;
  }
  return ADHandler_sendMessageWithADMessage_(self, msg);
}

- (bool)enqueueMessageWithADMessageQueue:(ADMessageQueue *)queue
                           withADMessage:(ADMessage *)msg
                                withLong:(int64_t)uptimeMillis {
  return ADHandler_enqueueMessageWithADMessageQueue_withADMessage_withLong_(self, queue, msg, uptimeMillis);
}

- (void)removeMessagesWithInt:(int32_t)what {
  [((ADMessageQueue *) nil_chk(mQueue_)) removeMessagesWithADHandler:self withInt:what withId:nil];
}

- (void)removeMessagesWithInt:(int32_t)what
                       withId:(id)object {
  [((ADMessageQueue *) nil_chk(mQueue_)) removeMessagesWithADHandler:self withInt:what withId:object];
}

- (void)removeEqualMessagesWithInt:(int32_t)what
                            withId:(id)object {
  [((ADMessageQueue *) nil_chk(mQueue_)) removeEqualMessagesWithADHandler:self withInt:what withId:object];
}

- (void)removeCallbacksAndMessagesWithId:(id)token {
  [((ADMessageQueue *) nil_chk(mQueue_)) removeCallbacksAndMessagesWithADHandler:self withId:token];
}

- (void)removeCallbacksAndEqualMessagesWithId:(id)token {
  [((ADMessageQueue *) nil_chk(mQueue_)) removeCallbacksAndEqualMessagesWithADHandler:self withId:token];
}

- (bool)hasMessagesWithInt:(int32_t)what {
  return [((ADMessageQueue *) nil_chk(mQueue_)) hasMessagesWithADHandler:self withInt:what withId:nil];
}

- (bool)hasMessagesOrCallbacks {
  return [((ADMessageQueue *) nil_chk(mQueue_)) hasMessagesWithADHandler:self];
}

- (bool)hasMessagesWithInt:(int32_t)what
                    withId:(id)object {
  return [((ADMessageQueue *) nil_chk(mQueue_)) hasMessagesWithADHandler:self withInt:what withId:object];
}

- (bool)hasEqualMessagesWithInt:(int32_t)what
                         withId:(id)object {
  return [((ADMessageQueue *) nil_chk(mQueue_)) hasEqualMessagesWithADHandler:self withInt:what withId:object];
}

- (bool)hasCallbacksWithJavaLangRunnable:(id<JavaLangRunnable>)r {
  return [((ADMessageQueue *) nil_chk(mQueue_)) hasMessagesWithADHandler:self withJavaLangRunnable:r withId:nil];
}

- (ADLooper *)getLooper {
  return mLooper_;
}

- (NSString *)description {
  return JreStrcat("$$$$C", @"Handler (", [[self java_getClass] getName], @") {", JavaLangInteger_toHexStringWithInt_(JavaLangSystem_identityHashCodeWithId_(self)), '}');
}

- (id<ADIMessenger>)getIMessenger {
  @synchronized(mQueue_) {
    if (mMessenger_ != nil) {
      return JreRetainedLocalValue(mMessenger_);
    }
    JreStrongAssignAndConsume(&mMessenger_, new_ADHandler_MessengerImpl_initWithADHandler_(self));
    return JreRetainedLocalValue(mMessenger_);
  }
}

+ (ADMessage *)getPostMessageWithJavaLangRunnable:(id<JavaLangRunnable>)r {
  return ADHandler_getPostMessageWithJavaLangRunnable_(r);
}

+ (ADMessage *)getPostMessageWithJavaLangRunnable:(id<JavaLangRunnable>)r
                                           withId:(id)token {
  return ADHandler_getPostMessageWithJavaLangRunnable_withId_(r, token);
}

+ (void)handleCallbackWithADMessage:(ADMessage *)message {
  ADHandler_handleCallbackWithADMessage_(message);
}

- (void)dealloc {
  RELEASE_(mLooper_);
  RELEASE_(mQueue_);
  RELEASE_(mCallback_);
  RELEASE_(mMessenger_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 4, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 5, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 6, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 7, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 8, -1, -1, -1, -1 },
    { NULL, "LADHandler;", 0x9, 9, 4, -1, -1, -1, -1 },
    { NULL, "LADHandler;", 0x9, 9, 5, -1, -1, -1, -1 },
    { NULL, "LADHandler;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADHandler;", 0x9, 10, 11, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 12, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 13, 1, -1, -1, -1, -1 },
    { NULL, "LADMessage;", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADMessage;", 0x11, 14, 15, -1, -1, -1, -1 },
    { NULL, "LADMessage;", 0x11, 14, 16, -1, -1, -1, -1 },
    { NULL, "LADMessage;", 0x11, 14, 17, -1, -1, -1, -1 },
    { NULL, "LADMessage;", 0x11, 14, 18, -1, -1, -1, -1 },
    { NULL, "Z", 0x11, 19, 20, -1, -1, -1, -1 },
    { NULL, "Z", 0x11, 21, 22, -1, -1, -1, -1 },
    { NULL, "Z", 0x11, 21, 23, -1, -1, -1, -1 },
    { NULL, "Z", 0x11, 24, 22, -1, -1, -1, -1 },
    { NULL, "Z", 0x11, 24, 25, -1, -1, -1, -1 },
    { NULL, "Z", 0x11, 24, 23, -1, -1, -1, -1 },
    { NULL, "Z", 0x11, 26, 20, -1, -1, -1, -1 },
    { NULL, "Z", 0x11, 27, 22, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 28, 20, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 28, 29, -1, -1, -1, -1 },
    { NULL, "Z", 0x11, 30, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x11, 31, 15, -1, -1, -1, -1 },
    { NULL, "Z", 0x11, 32, 33, -1, -1, -1, -1 },
    { NULL, "Z", 0x11, 34, 33, -1, -1, -1, -1 },
    { NULL, "Z", 0x11, 35, 36, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 37, 36, -1, -1, -1, -1 },
    { NULL, "Z", 0x11, 38, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x11, 39, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 40, 41, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 42, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 42, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 43, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 44, 45, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 46, 45, -1, -1, -1, -1 },
    { NULL, "Z", 0x11, 47, 15, -1, -1, -1, -1 },
    { NULL, "Z", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x11, 47, 16, -1, -1, -1, -1 },
    { NULL, "Z", 0x11, 48, 16, -1, -1, -1, -1 },
    { NULL, "Z", 0x11, 49, 20, -1, -1, -1, -1 },
    { NULL, "LADLooper;", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 50, -1, -1, -1, -1, -1 },
    { NULL, "LADIMessenger;", 0x10, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADMessage;", 0xa, 51, 20, -1, -1, -1, -1 },
    { NULL, "LADMessage;", 0xa, 51, 29, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 52, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(handleMessageWithADMessage:);
  methods[1].selector = @selector(dispatchMessageWithADMessage:);
  methods[2].selector = @selector(init);
  methods[3].selector = @selector(initWithADHandler_Callback:);
  methods[4].selector = @selector(initWithADLooper:);
  methods[5].selector = @selector(initWithADLooper:withADHandler_Callback:);
  methods[6].selector = @selector(initWithBoolean:);
  methods[7].selector = @selector(initWithADHandler_Callback:withBoolean:);
  methods[8].selector = @selector(initWithADLooper:withADHandler_Callback:withBoolean:);
  methods[9].selector = @selector(createAsyncWithADLooper:);
  methods[10].selector = @selector(createAsyncWithADLooper:withADHandler_Callback:);
  methods[11].selector = @selector(getMain);
  methods[12].selector = @selector(mainIfNullWithADHandler:);
  methods[13].selector = @selector(getTraceNameWithADMessage:);
  methods[14].selector = @selector(getMessageNameWithADMessage:);
  methods[15].selector = @selector(obtainMessage);
  methods[16].selector = @selector(obtainMessageWithInt:);
  methods[17].selector = @selector(obtainMessageWithInt:withId:);
  methods[18].selector = @selector(obtainMessageWithInt:withInt:withInt:);
  methods[19].selector = @selector(obtainMessageWithInt:withInt:withInt:withId:);
  methods[20].selector = @selector(postWithJavaLangRunnable:);
  methods[21].selector = @selector(postAtTimeWithJavaLangRunnable:withLong:);
  methods[22].selector = @selector(postAtTimeWithJavaLangRunnable:withId:withLong:);
  methods[23].selector = @selector(postDelayedWithJavaLangRunnable:withLong:);
  methods[24].selector = @selector(postDelayedWithJavaLangRunnable:withInt:withLong:);
  methods[25].selector = @selector(postDelayedWithJavaLangRunnable:withId:withLong:);
  methods[26].selector = @selector(postAtFrontOfQueueWithJavaLangRunnable:);
  methods[27].selector = @selector(runWithScissorsWithJavaLangRunnable:withLong:);
  methods[28].selector = @selector(removeCallbacksWithJavaLangRunnable:);
  methods[29].selector = @selector(removeCallbacksWithJavaLangRunnable:withId:);
  methods[30].selector = @selector(sendMessageWithADMessage:);
  methods[31].selector = @selector(sendEmptyMessageWithInt:);
  methods[32].selector = @selector(sendEmptyMessageDelayedWithInt:withLong:);
  methods[33].selector = @selector(sendEmptyMessageAtTimeWithInt:withLong:);
  methods[34].selector = @selector(sendMessageDelayedWithADMessage:withLong:);
  methods[35].selector = @selector(sendMessageAtTimeWithADMessage:withLong:);
  methods[36].selector = @selector(sendMessageAtFrontOfQueueWithADMessage:);
  methods[37].selector = @selector(executeOrSendMessageWithADMessage:);
  methods[38].selector = @selector(enqueueMessageWithADMessageQueue:withADMessage:withLong:);
  methods[39].selector = @selector(removeMessagesWithInt:);
  methods[40].selector = @selector(removeMessagesWithInt:withId:);
  methods[41].selector = @selector(removeEqualMessagesWithInt:withId:);
  methods[42].selector = @selector(removeCallbacksAndMessagesWithId:);
  methods[43].selector = @selector(removeCallbacksAndEqualMessagesWithId:);
  methods[44].selector = @selector(hasMessagesWithInt:);
  methods[45].selector = @selector(hasMessagesOrCallbacks);
  methods[46].selector = @selector(hasMessagesWithInt:withId:);
  methods[47].selector = @selector(hasEqualMessagesWithInt:withId:);
  methods[48].selector = @selector(hasCallbacksWithJavaLangRunnable:);
  methods[49].selector = @selector(getLooper);
  methods[50].selector = @selector(description);
  methods[51].selector = @selector(getIMessenger);
  methods[52].selector = @selector(getPostMessageWithJavaLangRunnable:);
  methods[53].selector = @selector(getPostMessageWithJavaLangRunnable:withId:);
  methods[54].selector = @selector(handleCallbackWithADMessage:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "FIND_POTENTIAL_LEAKS", "Z", .constantValue.asBOOL = ADHandler_FIND_POTENTIAL_LEAKS, 0x1a, -1, -1, -1, -1 },
    { "TAG", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 53, -1, -1 },
    { "MAIN_THREAD_HANDLER", "LADHandler;", .constantValue.asLong = 0, 0xa, -1, 54, -1, -1 },
    { "mLooper_", "LADLooper;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "mQueue_", "LADMessageQueue;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "mCallback_", "LADHandler_Callback;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "mAsynchronous_", "Z", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "mMessenger_", "LADIMessenger;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "handleMessage", "LADMessage;", "dispatchMessage", "LADHandler_Callback;", "LADLooper;", "LADLooper;LADHandler_Callback;", "Z", "LADHandler_Callback;Z", "LADLooper;LADHandler_Callback;Z", "createAsync", "mainIfNull", "LADHandler;", "getTraceName", "getMessageName", "obtainMessage", "I", "ILNSObject;", "III", "IIILNSObject;", "post", "LJavaLangRunnable;", "postAtTime", "LJavaLangRunnable;J", "LJavaLangRunnable;LNSObject;J", "postDelayed", "LJavaLangRunnable;IJ", "postAtFrontOfQueue", "runWithScissors", "removeCallbacks", "LJavaLangRunnable;LNSObject;", "sendMessage", "sendEmptyMessage", "sendEmptyMessageDelayed", "IJ", "sendEmptyMessageAtTime", "sendMessageDelayed", "LADMessage;J", "sendMessageAtTime", "sendMessageAtFrontOfQueue", "executeOrSendMessage", "enqueueMessage", "LADMessageQueue;LADMessage;J", "removeMessages", "removeEqualMessages", "removeCallbacksAndMessages", "LNSObject;", "removeCallbacksAndEqualMessages", "hasMessages", "hasEqualMessages", "hasCallbacks", "toString", "getPostMessage", "handleCallback", &ADHandler_TAG, &ADHandler_MAIN_THREAD_HANDLER, "LADHandler_Callback;LADHandler_MessengerImpl;LADHandler_BlockingRunnable;" };
  static const J2ObjcClassInfo _ADHandler = { "Handler", "r.android.os", ptrTable, methods, fields, 7, 0x1, 55, 8, -1, 55, -1, -1, -1 };
  return &_ADHandler;
}

@end

void ADHandler_init(ADHandler *self) {
  ADHandler_initWithADHandler_Callback_withBoolean_(self, nil, false);
}

ADHandler *new_ADHandler_init() {
  J2OBJC_NEW_IMPL(ADHandler, init)
}

ADHandler *create_ADHandler_init() {
  J2OBJC_CREATE_IMPL(ADHandler, init)
}

void ADHandler_initWithADHandler_Callback_(ADHandler *self, id<ADHandler_Callback> callback) {
  ADHandler_initWithADHandler_Callback_withBoolean_(self, callback, false);
}

ADHandler *new_ADHandler_initWithADHandler_Callback_(id<ADHandler_Callback> callback) {
  J2OBJC_NEW_IMPL(ADHandler, initWithADHandler_Callback_, callback)
}

ADHandler *create_ADHandler_initWithADHandler_Callback_(id<ADHandler_Callback> callback) {
  J2OBJC_CREATE_IMPL(ADHandler, initWithADHandler_Callback_, callback)
}

void ADHandler_initWithADLooper_(ADHandler *self, ADLooper *looper) {
  ADHandler_initWithADLooper_withADHandler_Callback_withBoolean_(self, looper, nil, false);
}

ADHandler *new_ADHandler_initWithADLooper_(ADLooper *looper) {
  J2OBJC_NEW_IMPL(ADHandler, initWithADLooper_, looper)
}

ADHandler *create_ADHandler_initWithADLooper_(ADLooper *looper) {
  J2OBJC_CREATE_IMPL(ADHandler, initWithADLooper_, looper)
}

void ADHandler_initWithADLooper_withADHandler_Callback_(ADHandler *self, ADLooper *looper, id<ADHandler_Callback> callback) {
  ADHandler_initWithADLooper_withADHandler_Callback_withBoolean_(self, looper, callback, false);
}

ADHandler *new_ADHandler_initWithADLooper_withADHandler_Callback_(ADLooper *looper, id<ADHandler_Callback> callback) {
  J2OBJC_NEW_IMPL(ADHandler, initWithADLooper_withADHandler_Callback_, looper, callback)
}

ADHandler *create_ADHandler_initWithADLooper_withADHandler_Callback_(ADLooper *looper, id<ADHandler_Callback> callback) {
  J2OBJC_CREATE_IMPL(ADHandler, initWithADLooper_withADHandler_Callback_, looper, callback)
}

void ADHandler_initWithBoolean_(ADHandler *self, bool async) {
  ADHandler_initWithADHandler_Callback_withBoolean_(self, nil, async);
}

ADHandler *new_ADHandler_initWithBoolean_(bool async) {
  J2OBJC_NEW_IMPL(ADHandler, initWithBoolean_, async)
}

ADHandler *create_ADHandler_initWithBoolean_(bool async) {
  J2OBJC_CREATE_IMPL(ADHandler, initWithBoolean_, async)
}

void ADHandler_initWithADHandler_Callback_withBoolean_(ADHandler *self, id<ADHandler_Callback> callback, bool async) {
  NSObject_init(self);
  JreStrongAssign(&self->mLooper_, ADLooper_myLooper());
  if (self->mLooper_ == nil) {
    @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$@$", @"Can't create handler inside thread ", JavaLangThread_currentThread(), @" that has not called Looper.prepare()"));
  }
  JreStrongAssign(&self->mQueue_, self->mLooper_->mQueue_);
  JreStrongAssign(&self->mCallback_, callback);
  self->mAsynchronous_ = async;
}

ADHandler *new_ADHandler_initWithADHandler_Callback_withBoolean_(id<ADHandler_Callback> callback, bool async) {
  J2OBJC_NEW_IMPL(ADHandler, initWithADHandler_Callback_withBoolean_, callback, async)
}

ADHandler *create_ADHandler_initWithADHandler_Callback_withBoolean_(id<ADHandler_Callback> callback, bool async) {
  J2OBJC_CREATE_IMPL(ADHandler, initWithADHandler_Callback_withBoolean_, callback, async)
}

void ADHandler_initWithADLooper_withADHandler_Callback_withBoolean_(ADHandler *self, ADLooper *looper, id<ADHandler_Callback> callback, bool async) {
  NSObject_init(self);
  JreStrongAssign(&self->mLooper_, looper);
  JreStrongAssign(&self->mQueue_, ((ADLooper *) nil_chk(looper))->mQueue_);
  JreStrongAssign(&self->mCallback_, callback);
  self->mAsynchronous_ = async;
}

ADHandler *new_ADHandler_initWithADLooper_withADHandler_Callback_withBoolean_(ADLooper *looper, id<ADHandler_Callback> callback, bool async) {
  J2OBJC_NEW_IMPL(ADHandler, initWithADLooper_withADHandler_Callback_withBoolean_, looper, callback, async)
}

ADHandler *create_ADHandler_initWithADLooper_withADHandler_Callback_withBoolean_(ADLooper *looper, id<ADHandler_Callback> callback, bool async) {
  J2OBJC_CREATE_IMPL(ADHandler, initWithADLooper_withADHandler_Callback_withBoolean_, looper, callback, async)
}

ADHandler *ADHandler_createAsyncWithADLooper_(ADLooper *looper) {
  ADHandler_initialize();
  if (looper == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"looper must not be null");
  return create_ADHandler_initWithADLooper_withADHandler_Callback_withBoolean_(looper, nil, true);
}

ADHandler *ADHandler_createAsyncWithADLooper_withADHandler_Callback_(ADLooper *looper, id<ADHandler_Callback> callback) {
  ADHandler_initialize();
  if (looper == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"looper must not be null");
  if (callback == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"callback must not be null");
  return create_ADHandler_initWithADLooper_withADHandler_Callback_withBoolean_(looper, callback, true);
}

ADHandler *ADHandler_getMain() {
  ADHandler_initialize();
  if (ADHandler_MAIN_THREAD_HANDLER == nil) {
    JreStrongAssignAndConsume(&ADHandler_MAIN_THREAD_HANDLER, new_ADHandler_initWithADLooper_(ADLooper_getMainLooper()));
  }
  return ADHandler_MAIN_THREAD_HANDLER;
}

ADHandler *ADHandler_mainIfNullWithADHandler_(ADHandler *handler) {
  ADHandler_initialize();
  return handler == nil ? ADHandler_getMain() : handler;
}

bool ADHandler_postWithJavaLangRunnable_(ADHandler *self, id<JavaLangRunnable> r) {
  return ADHandler_sendMessageDelayedWithADMessage_withLong_(self, ADHandler_getPostMessageWithJavaLangRunnable_(r), 0);
}

bool ADHandler_sendMessageWithADMessage_(ADHandler *self, ADMessage *msg) {
  return ADHandler_sendMessageDelayedWithADMessage_withLong_(self, msg, 0);
}

bool ADHandler_sendEmptyMessageDelayedWithInt_withLong_(ADHandler *self, int32_t what, int64_t delayMillis) {
  ADMessage *msg = ADMessage_obtain();
  ((ADMessage *) nil_chk(msg))->what_ = what;
  return ADHandler_sendMessageDelayedWithADMessage_withLong_(self, msg, delayMillis);
}

bool ADHandler_sendMessageDelayedWithADMessage_withLong_(ADHandler *self, ADMessage *msg, int64_t delayMillis) {
  if (delayMillis < 0) {
    delayMillis = 0;
  }
  return [self sendMessageAtTimeWithADMessage:msg withLong:ADSystemClock_uptimeMillis() + delayMillis];
}

bool ADHandler_sendMessageAtFrontOfQueueWithADMessage_(ADHandler *self, ADMessage *msg) {
  ADMessageQueue *queue = JreRetainedLocalValue(self->mQueue_);
  if (queue == nil) {
    JavaLangRuntimeException *e = create_JavaLangRuntimeException_initWithNSString_(JreStrcat("@$", self, @" sendMessageAtTime() called with no mQueue"));
    ADLog_wWithNSString_withNSString_withJavaLangThrowable_(@"Looper", [e getMessage], e);
    return false;
  }
  return ADHandler_enqueueMessageWithADMessageQueue_withADMessage_withLong_(self, queue, msg, 0);
}

bool ADHandler_enqueueMessageWithADMessageQueue_withADMessage_withLong_(ADHandler *self, ADMessageQueue *queue, ADMessage *msg, int64_t uptimeMillis) {
  JreStrongAssign(&((ADMessage *) nil_chk(msg))->target_, self);
  if (self->mAsynchronous_) {
    [msg setAsynchronousWithBoolean:true];
  }
  return [((ADMessageQueue *) nil_chk(queue)) enqueueMessageWithADMessage:msg withLong:uptimeMillis];
}

ADMessage *ADHandler_getPostMessageWithJavaLangRunnable_(id<JavaLangRunnable> r) {
  ADHandler_initialize();
  ADMessage *m = ADMessage_obtain();
  JreStrongAssign(&((ADMessage *) nil_chk(m))->callback_, r);
  return m;
}

ADMessage *ADHandler_getPostMessageWithJavaLangRunnable_withId_(id<JavaLangRunnable> r, id token) {
  ADHandler_initialize();
  ADMessage *m = ADMessage_obtain();
  JreStrongAssign(&((ADMessage *) nil_chk(m))->obj_, token);
  JreStrongAssign(&m->callback_, r);
  return m;
}

void ADHandler_handleCallbackWithADMessage_(ADMessage *message) {
  ADHandler_initialize();
  [((id<JavaLangRunnable>) nil_chk(((ADMessage *) nil_chk(message))->callback_)) run];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADHandler)

J2OBJC_NAME_MAPPING(ADHandler, "r.android.os", "AD")

@implementation ADHandler_Callback

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "Z", 0x401, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(handleMessageWithADMessage:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "handleMessage", "LADMessage;", "LADHandler;" };
  static const J2ObjcClassInfo _ADHandler_Callback = { "Callback", "r.android.os", ptrTable, methods, NULL, 7, 0x609, 1, 0, 2, -1, -1, -1, -1 };
  return &_ADHandler_Callback;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(ADHandler_Callback)

@implementation ADHandler_MessengerImpl

- (instancetype)initWithADHandler:(ADHandler *)outer$ {
  ADHandler_MessengerImpl_initWithADHandler_(self, outer$);
  return self;
}

- (void)sendWithADMessage:(ADMessage *)msg {
  ADHandler_sendMessageWithADMessage_(this$0_, msg);
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithADHandler:);
  methods[1].selector = @selector(sendWithADMessage:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LADHandler;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LADHandler;", "send", "LADMessage;" };
  static const J2ObjcClassInfo _ADHandler_MessengerImpl = { "MessengerImpl", "r.android.os", ptrTable, methods, fields, 7, 0x12, 2, 1, 0, -1, -1, -1, -1 };
  return &_ADHandler_MessengerImpl;
}

@end

void ADHandler_MessengerImpl_initWithADHandler_(ADHandler_MessengerImpl *self, ADHandler *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  ADIMessenger_Stub_init(self);
}

ADHandler_MessengerImpl *new_ADHandler_MessengerImpl_initWithADHandler_(ADHandler *outer$) {
  J2OBJC_NEW_IMPL(ADHandler_MessengerImpl, initWithADHandler_, outer$)
}

ADHandler_MessengerImpl *create_ADHandler_MessengerImpl_initWithADHandler_(ADHandler *outer$) {
  J2OBJC_CREATE_IMPL(ADHandler_MessengerImpl, initWithADHandler_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADHandler_MessengerImpl)

@implementation ADHandler_BlockingRunnable

- (instancetype)initWithJavaLangRunnable:(id<JavaLangRunnable>)task {
  ADHandler_BlockingRunnable_initWithJavaLangRunnable_(self, task);
  return self;
}

- (void)run {
  @try {
    [((id<JavaLangRunnable>) nil_chk(mTask_)) run];
  }
  @finally {
    @synchronized(self) {
      mDone_ = true;
      [self java_notifyAll];
    }
  }
}

- (bool)postAndWaitWithADHandler:(ADHandler *)handler
                        withLong:(int64_t)timeout {
  if (!ADHandler_postWithJavaLangRunnable_(nil_chk(handler), self)) {
    return false;
  }
  @synchronized(self) {
    if (timeout > 0) {
      int64_t expirationTime = ADSystemClock_uptimeMillis() + timeout;
      while (!mDone_) {
        int64_t delay = expirationTime - ADSystemClock_uptimeMillis();
        if (delay <= 0) {
          return false;
        }
        @try {
          [self java_waitWithLong:delay];
        }
        @catch (JavaLangInterruptedException *ex) {
        }
      }
    }
    else {
      while (!mDone_) {
        @try {
          [self java_wait];
        }
        @catch (JavaLangInterruptedException *ex) {
        }
      }
    }
  }
  return true;
}

- (void)dealloc {
  RELEASE_(mTask_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaLangRunnable:);
  methods[1].selector = @selector(run);
  methods[2].selector = @selector(postAndWaitWithADHandler:withLong:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mTask_", "LJavaLangRunnable;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mDone_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaLangRunnable;", "postAndWait", "LADHandler;J", "LADHandler;" };
  static const J2ObjcClassInfo _ADHandler_BlockingRunnable = { "BlockingRunnable", "r.android.os", ptrTable, methods, fields, 7, 0x1a, 3, 2, 3, -1, -1, -1, -1 };
  return &_ADHandler_BlockingRunnable;
}

@end

void ADHandler_BlockingRunnable_initWithJavaLangRunnable_(ADHandler_BlockingRunnable *self, id<JavaLangRunnable> task) {
  NSObject_init(self);
  JreStrongAssign(&self->mTask_, task);
}

ADHandler_BlockingRunnable *new_ADHandler_BlockingRunnable_initWithJavaLangRunnable_(id<JavaLangRunnable> task) {
  J2OBJC_NEW_IMPL(ADHandler_BlockingRunnable, initWithJavaLangRunnable_, task)
}

ADHandler_BlockingRunnable *create_ADHandler_BlockingRunnable_initWithJavaLangRunnable_(id<JavaLangRunnable> task) {
  J2OBJC_CREATE_IMPL(ADHandler_BlockingRunnable, initWithJavaLangRunnable_, task)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADHandler_BlockingRunnable)
