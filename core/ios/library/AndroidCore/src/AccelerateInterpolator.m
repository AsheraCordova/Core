//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroid\src\main\java\r\android\view\animation\AccelerateInterpolator.java
//

#include "AccelerateInterpolator.h"
#include "BaseInterpolator.h"
#include "J2ObjC_source.h"
#include "java/lang/Math.h"


@interface ADAccelerateInterpolator () {
 @public
  jfloat mFactor_;
  jdouble mDoubleFactor_;
}

@end

@implementation ADAccelerateInterpolator

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADAccelerateInterpolator_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithFloat:(jfloat)factor {
  ADAccelerateInterpolator_initWithFloat_(self, factor);
  return self;
}

- (jfloat)getInterpolationWithFloat:(jfloat)input {
  if (mFactor_ == 1.0f) {
    return input * input;
  }
  else {
    return (jfloat) JavaLangMath_powWithDouble_withDouble_(input, mDoubleFactor_);
  }
}

- (jlong)createNativeInterpolator {
  return 0;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "F", 0x1, 1, 0, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithFloat:);
  methods[2].selector = @selector(getInterpolationWithFloat:);
  methods[3].selector = @selector(createNativeInterpolator);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mFactor_", "F", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mDoubleFactor_", "D", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "F", "getInterpolation" };
  static const J2ObjcClassInfo _ADAccelerateInterpolator = { "AccelerateInterpolator", "r.android.view.animation", ptrTable, methods, fields, 7, 0x1, 4, 2, -1, -1, -1, -1, -1 };
  return &_ADAccelerateInterpolator;
}

@end

void ADAccelerateInterpolator_init(ADAccelerateInterpolator *self) {
  ADBaseInterpolator_init(self);
  self->mFactor_ = 1.0f;
  self->mDoubleFactor_ = 2.0;
}

ADAccelerateInterpolator *new_ADAccelerateInterpolator_init() {
  J2OBJC_NEW_IMPL(ADAccelerateInterpolator, init)
}

ADAccelerateInterpolator *create_ADAccelerateInterpolator_init() {
  J2OBJC_CREATE_IMPL(ADAccelerateInterpolator, init)
}

void ADAccelerateInterpolator_initWithFloat_(ADAccelerateInterpolator *self, jfloat factor) {
  ADBaseInterpolator_init(self);
  self->mFactor_ = factor;
  self->mDoubleFactor_ = 2 * self->mFactor_;
}

ADAccelerateInterpolator *new_ADAccelerateInterpolator_initWithFloat_(jfloat factor) {
  J2OBJC_NEW_IMPL(ADAccelerateInterpolator, initWithFloat_, factor)
}

ADAccelerateInterpolator *create_ADAccelerateInterpolator_initWithFloat_(jfloat factor) {
  J2OBJC_CREATE_IMPL(ADAccelerateInterpolator, initWithFloat_, factor)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADAccelerateInterpolator)
