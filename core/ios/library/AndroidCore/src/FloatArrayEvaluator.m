//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroid\src\main\java\r\android\animation\FloatArrayEvaluator.java
//

#include "FloatArrayEvaluator.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"


@interface ADFloatArrayEvaluator () {
 @public
  IOSFloatArray *mArray_;
}

@end

J2OBJC_FIELD_SETTER(ADFloatArrayEvaluator, mArray_, IOSFloatArray *)

@implementation ADFloatArrayEvaluator

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADFloatArrayEvaluator_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithFloatArray:(IOSFloatArray *)reuseArray {
  ADFloatArrayEvaluator_initWithFloatArray_(self, reuseArray);
  return self;
}

- (IOSFloatArray *)evaluateWithFloat:(jfloat)fraction
                              withId:(IOSFloatArray *)startValue
                              withId:(IOSFloatArray *)endValue {
  IOSFloatArray *array = mArray_;
  if (array == nil) {
    array = [IOSFloatArray arrayWithLength:((IOSFloatArray *) nil_chk(startValue))->size_];
  }
  for (jint i = 0; i < array->size_; i++) {
    jfloat start = IOSFloatArray_Get(nil_chk(startValue), i);
    jfloat end = IOSFloatArray_Get(nil_chk(endValue), i);
    *IOSFloatArray_GetRef(array, i) = start + (fraction * (end - start));
  }
  return array;
}

- (void)dealloc {
  RELEASE_(mArray_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "[F", 0x1, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithFloatArray:);
  methods[2].selector = @selector(evaluateWithFloat:withId:withId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mArray_", "[F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "[F", "evaluate", "F[F[F", "Ljava/lang/Object;Lr/android/animation/TypeEvaluator<[F>;" };
  static const J2ObjcClassInfo _ADFloatArrayEvaluator = { "FloatArrayEvaluator", "r.android.animation", ptrTable, methods, fields, 7, 0x1, 3, 1, -1, -1, -1, 3, -1 };
  return &_ADFloatArrayEvaluator;
}

@end

void ADFloatArrayEvaluator_init(ADFloatArrayEvaluator *self) {
  NSObject_init(self);
}

ADFloatArrayEvaluator *new_ADFloatArrayEvaluator_init() {
  J2OBJC_NEW_IMPL(ADFloatArrayEvaluator, init)
}

ADFloatArrayEvaluator *create_ADFloatArrayEvaluator_init() {
  J2OBJC_CREATE_IMPL(ADFloatArrayEvaluator, init)
}

void ADFloatArrayEvaluator_initWithFloatArray_(ADFloatArrayEvaluator *self, IOSFloatArray *reuseArray) {
  NSObject_init(self);
  JreStrongAssign(&self->mArray_, reuseArray);
}

ADFloatArrayEvaluator *new_ADFloatArrayEvaluator_initWithFloatArray_(IOSFloatArray *reuseArray) {
  J2OBJC_NEW_IMPL(ADFloatArrayEvaluator, initWithFloatArray_, reuseArray)
}

ADFloatArrayEvaluator *create_ADFloatArrayEvaluator_initWithFloatArray_(IOSFloatArray *reuseArray) {
  J2OBJC_CREATE_IMPL(ADFloatArrayEvaluator, initWithFloatArray_, reuseArray)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADFloatArrayEvaluator)
