//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroid\src\main\java\r\android\animation\Keyframe.java
//

#import <Foundation/Foundation.h>
#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_Keyframe")
#ifdef RESTRICT_Keyframe
#define INCLUDE_ALL_Keyframe 0
#else
#define INCLUDE_ALL_Keyframe 1
#endif
#undef RESTRICT_Keyframe
#ifdef INCLUDE_ADKeyframe_FloatKeyframe
#define INCLUDE_ADKeyframe 1
#endif
#ifdef INCLUDE_ADKeyframe_IntKeyframe
#define INCLUDE_ADKeyframe 1
#endif
#ifdef INCLUDE_ADKeyframe_ObjectKeyframe
#define INCLUDE_ADKeyframe 1
#endif

#if !defined (ADKeyframe_) && (INCLUDE_ALL_Keyframe || defined(INCLUDE_ADKeyframe))
#define ADKeyframe_


@class IOSClass;
@class JavaLangBoolean;
@class JavaLangFloat;
@class JavaLangInteger;
@protocol ADTimeInterpolator;

/*!
 @brief This class holds a time/value pair for an animation.The Keyframe class is used
  by <code>ValueAnimator</code> to define the values that the animation target will have over the course
  of the animation.
 As the time proceeds from one keyframe to the other, the value of the
  target object will animate between the value at the previous keyframe and the value at the
  next keyframe. Each keyframe also holds an optional <code>TimeInterpolator</code>
  object, which defines the time interpolation over the intervalue preceding the keyframe. 
 <p>The Keyframe class itself is abstract. The type-specific factory methods will return
  a subclass of Keyframe specific to the type of value being stored. This is done to improve
  performance when dealing with the most common cases (e.g., <code>float</code> and 
 <code>int</code> values). Other types will fall into a more general Keyframe class that
  treats its values as Objects. Unless your animation requires dealing with a custom type
  or a data structure that needs to be animated directly (and evaluated using an implementation
  of <code>TypeEvaluator</code>), you should stick to using float and int as animations using those
  types have lower runtime overhead than other types.</p>
 */
@interface ADKeyframe : NSObject < NSCopying > {
 @public
  /*!
   @brief Flag to indicate whether this keyframe has a valid value.This flag is used when an
  animation first starts, to populate placeholder keyframes with real values derived
  from the target object.
   */
  bool mHasValue_;
  /*!
   @brief Flag to indicate whether the value in the keyframe was read from the target object or not.
   If so, its value will be recalculated if target changes.
   */
  bool mValueWasSetOnStart_;
  /*!
   @brief The time at which mValue will hold true.
   */
  float mFraction_;
  /*!
   @brief The type of the value in this Keyframe.This type is determined at construction time,
  based on the type of the <code>value</code> object passed into the constructor.
   */
  IOSClass *mValueType_;
}

#pragma mark Public

- (instancetype)init;

- (ADKeyframe *)java_clone;

/*!
 @brief Gets the time for this keyframe, as a fraction of the overall animation duration.
 @return The time associated with this keyframe, as a fraction of the overall animation
  duration. This should be a value between 0 and 1.
 */
- (float)getFraction;

/*!
 @brief Gets the optional interpolator for this Keyframe.A value of <code>null</code> indicates
  that there is no interpolation, which is the same as linear interpolation.
 @return The optional interpolator for this Keyframe.
 */
- (id<ADTimeInterpolator>)getInterpolator;

/*!
 @brief Gets the type of keyframe.This information is used by ValueAnimator to determine the type of 
 <code>TypeEvaluator</code> to use when calculating values between keyframes.
 The type is based
  on the type of Keyframe created.
 @return The type of the value stored in the Keyframe.
 */
- (IOSClass *)getType;

/*!
 @brief Gets the value for this Keyframe.
 @return The value for this Keyframe.
 */
- (id)getValue;

/*!
 @brief Indicates whether this keyframe has a valid value.This method is called internally when
  an <code>ObjectAnimator</code> first starts; keyframes without values are assigned values at
  that time by deriving the value for the property from the target object.
 @return boolean Whether this object has a value assigned.
 */
- (bool)hasValue;

/*!
 @brief Constructs a Keyframe object with the given time.The value at this time will be derived
  from the target object when the animation first starts (note that this implies that keyframes
  with no initial value must be used as part of an <code>ObjectAnimator</code>).
 The time defines the
  time, as a proportion of an overall animation's duration, at which the value will hold true
  for the animation. The value for the animation between keyframes will be calculated as
  an interpolation between the values at those keyframes.
 @param fraction The time, expressed as a value between 0 and 1, representing the fraction  of time elapsed of the overall animation duration.
 */
+ (ADKeyframe *)ofFloatWithFloat:(float)fraction;

/*!
 @brief Constructs a Keyframe object with the given time and value.The time defines the
  time, as a proportion of an overall animation's duration, at which the value will hold true
  for the animation.
 The value for the animation between keyframes will be calculated as
  an interpolation between the values at those keyframes.
 @param fraction The time, expressed as a value between 0 and 1, representing the fraction  of time elapsed of the overall animation duration.
 @param value The value that the object will animate to as the animation time approaches  the time in this keyframe, and the value animated from as the time passes the time in
   this keyframe.
 */
+ (ADKeyframe *)ofFloatWithFloat:(float)fraction
                       withFloat:(float)value;

/*!
 @brief Constructs a Keyframe object with the given time.The value at this time will be derived
  from the target object when the animation first starts (note that this implies that keyframes
  with no initial value must be used as part of an <code>ObjectAnimator</code>).
 The time defines the
  time, as a proportion of an overall animation's duration, at which the value will hold true
  for the animation. The value for the animation between keyframes will be calculated as
  an interpolation between the values at those keyframes.
 @param fraction The time, expressed as a value between 0 and 1, representing the fraction  of time elapsed of the overall animation duration.
 */
+ (ADKeyframe *)ofIntWithFloat:(float)fraction;

/*!
 @brief Constructs a Keyframe object with the given time and value.The time defines the
  time, as a proportion of an overall animation's duration, at which the value will hold true
  for the animation.
 The value for the animation between keyframes will be calculated as
  an interpolation between the values at those keyframes.
 @param fraction The time, expressed as a value between 0 and 1, representing the fraction  of time elapsed of the overall animation duration.
 @param value The value that the object will animate to as the animation time approaches  the time in this keyframe, and the value animated from as the time passes the time in
   this keyframe.
 */
+ (ADKeyframe *)ofIntWithFloat:(float)fraction
                       withInt:(int32_t)value;

/*!
 @brief Constructs a Keyframe object with the given time.The value at this time will be derived
  from the target object when the animation first starts (note that this implies that keyframes
  with no initial value must be used as part of an <code>ObjectAnimator</code>).
 The time defines the
  time, as a proportion of an overall animation's duration, at which the value will hold true
  for the animation. The value for the animation between keyframes will be calculated as
  an interpolation between the values at those keyframes.
 @param fraction The time, expressed as a value between 0 and 1, representing the fraction  of time elapsed of the overall animation duration.
 */
+ (ADKeyframe *)ofObjectWithFloat:(float)fraction;

/*!
 @brief Constructs a Keyframe object with the given time and value.The time defines the
  time, as a proportion of an overall animation's duration, at which the value will hold true
  for the animation.
 The value for the animation between keyframes will be calculated as
  an interpolation between the values at those keyframes.
 @param fraction The time, expressed as a value between 0 and 1, representing the fraction  of time elapsed of the overall animation duration.
 @param value The value that the object will animate to as the animation time approaches  the time in this keyframe, and the value animated from as the time passes the time in
   this keyframe.
 */
+ (ADKeyframe *)ofObjectWithFloat:(float)fraction
                           withId:(id)value;

/*!
 @brief Sets the time for this keyframe, as a fraction of the overall animation duration.
 @param fraction time associated with this keyframe, as a fraction of the overall animation  duration. This should be a value between 0 and 1.
 */
- (void)setFractionWithFloat:(float)fraction;

/*!
 @brief Sets the optional interpolator for this Keyframe.A value of <code>null</code> indicates
  that there is no interpolation, which is the same as linear interpolation.
 @return The optional interpolator for this Keyframe.
 */
- (void)setInterpolatorWithADTimeInterpolator:(id<ADTimeInterpolator>)interpolator;

/*!
 @brief Sets the value for this Keyframe.
 @param value value for this Keyframe.
 */
- (void)setValueWithId:(id)value;

#pragma mark Package-Private

- (void)setValueWasSetOnStartWithBoolean:(bool)valueWasSetOnStart;

/*!
 @brief If the Keyframe's value was acquired from the target object, this flag should be set so that,
  if target changes, value will be reset.
 @return boolean Whether this Keyframe's value was retieved from the target object or not.
 */
- (bool)valueWasSetOnStart;

@end

J2OBJC_EMPTY_STATIC_INIT(ADKeyframe)

J2OBJC_FIELD_SETTER(ADKeyframe, mValueType_, IOSClass *)

FOUNDATION_EXPORT void ADKeyframe_init(ADKeyframe *self);

FOUNDATION_EXPORT ADKeyframe *ADKeyframe_ofIntWithFloat_withInt_(float fraction, int32_t value);

FOUNDATION_EXPORT ADKeyframe *ADKeyframe_ofIntWithFloat_(float fraction);

FOUNDATION_EXPORT ADKeyframe *ADKeyframe_ofFloatWithFloat_withFloat_(float fraction, float value);

FOUNDATION_EXPORT ADKeyframe *ADKeyframe_ofFloatWithFloat_(float fraction);

FOUNDATION_EXPORT ADKeyframe *ADKeyframe_ofObjectWithFloat_withId_(float fraction, id value);

FOUNDATION_EXPORT ADKeyframe *ADKeyframe_ofObjectWithFloat_(float fraction);

J2OBJC_TYPE_LITERAL_HEADER(ADKeyframe)

@compatibility_alias RAndroidAnimationKeyframe ADKeyframe;


#endif

#if !defined (ADKeyframe_ObjectKeyframe_) && (INCLUDE_ALL_Keyframe || defined(INCLUDE_ADKeyframe_ObjectKeyframe))
#define ADKeyframe_ObjectKeyframe_

@class JavaLangFloat;

/*!
 @brief This internal subclass is used for all types which are not int or float.
 */
@interface ADKeyframe_ObjectKeyframe : ADKeyframe {
 @public
  /*!
   @brief The value of the animation at the time mFraction.
   */
  id mValue_;
}

#pragma mark Public

- (ADKeyframe_ObjectKeyframe *)java_clone;

- (id)getValue;

- (void)setValueWithId:(id)value;

#pragma mark Package-Private

- (instancetype)initWithFloat:(float)fraction
                       withId:(id)value;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ADKeyframe_ObjectKeyframe)

J2OBJC_FIELD_SETTER(ADKeyframe_ObjectKeyframe, mValue_, id)

FOUNDATION_EXPORT void ADKeyframe_ObjectKeyframe_initWithFloat_withId_(ADKeyframe_ObjectKeyframe *self, float fraction, id value);

FOUNDATION_EXPORT ADKeyframe_ObjectKeyframe *new_ADKeyframe_ObjectKeyframe_initWithFloat_withId_(float fraction, id value) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ADKeyframe_ObjectKeyframe *create_ADKeyframe_ObjectKeyframe_initWithFloat_withId_(float fraction, id value);

J2OBJC_TYPE_LITERAL_HEADER(ADKeyframe_ObjectKeyframe)


#endif

#if !defined (ADKeyframe_IntKeyframe_) && (INCLUDE_ALL_Keyframe || defined(INCLUDE_ADKeyframe_IntKeyframe))
#define ADKeyframe_IntKeyframe_

@class JavaLangFloat;
@class JavaLangInteger;

/*!
 @brief Internal subclass used when the keyframe value is of type int.
 */
@interface ADKeyframe_IntKeyframe : ADKeyframe {
 @public
  /*!
   @brief The value of the animation at the time mFraction.
   */
  int32_t mValue_;
}

#pragma mark Public

- (ADKeyframe_IntKeyframe *)java_clone;

- (int32_t)getIntValue;

- (id)getValue;

- (void)setValueWithId:(id)value;

#pragma mark Package-Private

- (instancetype)initWithFloat:(float)fraction;

- (instancetype)initWithFloat:(float)fraction
                      withInt:(int32_t)value;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ADKeyframe_IntKeyframe)

FOUNDATION_EXPORT void ADKeyframe_IntKeyframe_initWithFloat_withInt_(ADKeyframe_IntKeyframe *self, float fraction, int32_t value);

FOUNDATION_EXPORT ADKeyframe_IntKeyframe *new_ADKeyframe_IntKeyframe_initWithFloat_withInt_(float fraction, int32_t value) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ADKeyframe_IntKeyframe *create_ADKeyframe_IntKeyframe_initWithFloat_withInt_(float fraction, int32_t value);

FOUNDATION_EXPORT void ADKeyframe_IntKeyframe_initWithFloat_(ADKeyframe_IntKeyframe *self, float fraction);

FOUNDATION_EXPORT ADKeyframe_IntKeyframe *new_ADKeyframe_IntKeyframe_initWithFloat_(float fraction) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ADKeyframe_IntKeyframe *create_ADKeyframe_IntKeyframe_initWithFloat_(float fraction);

J2OBJC_TYPE_LITERAL_HEADER(ADKeyframe_IntKeyframe)


#endif

#if !defined (ADKeyframe_FloatKeyframe_) && (INCLUDE_ALL_Keyframe || defined(INCLUDE_ADKeyframe_FloatKeyframe))
#define ADKeyframe_FloatKeyframe_

@class JavaLangFloat;

/*!
 @brief Internal subclass used when the keyframe value is of type float.
 */
@interface ADKeyframe_FloatKeyframe : ADKeyframe {
 @public
  /*!
   @brief The value of the animation at the time mFraction.
   */
  float mValue_;
}

#pragma mark Public

- (ADKeyframe_FloatKeyframe *)java_clone;

- (float)getFloatValue;

- (id)getValue;

- (void)setValueWithId:(id)value;

#pragma mark Package-Private

- (instancetype)initWithFloat:(float)fraction;

- (instancetype)initWithFloat:(float)fraction
                    withFloat:(float)value;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ADKeyframe_FloatKeyframe)

FOUNDATION_EXPORT void ADKeyframe_FloatKeyframe_initWithFloat_withFloat_(ADKeyframe_FloatKeyframe *self, float fraction, float value);

FOUNDATION_EXPORT ADKeyframe_FloatKeyframe *new_ADKeyframe_FloatKeyframe_initWithFloat_withFloat_(float fraction, float value) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ADKeyframe_FloatKeyframe *create_ADKeyframe_FloatKeyframe_initWithFloat_withFloat_(float fraction, float value);

FOUNDATION_EXPORT void ADKeyframe_FloatKeyframe_initWithFloat_(ADKeyframe_FloatKeyframe *self, float fraction);

FOUNDATION_EXPORT ADKeyframe_FloatKeyframe *new_ADKeyframe_FloatKeyframe_initWithFloat_(float fraction) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ADKeyframe_FloatKeyframe *create_ADKeyframe_FloatKeyframe_initWithFloat_(float fraction);

J2OBJC_TYPE_LITERAL_HEADER(ADKeyframe_FloatKeyframe)


#endif

#pragma pop_macro("INCLUDE_ALL_Keyframe")
