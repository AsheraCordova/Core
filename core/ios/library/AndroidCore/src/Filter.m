//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroid\src\main\java\r\android\widget\Filter.java
//

#define J2OBJC_IMPORTED_BY_JAVA_IMPLEMENTATION 1




#include "Filter.h"
#include "Handler.h"
#include "HandlerThread.h"
#include "J2ObjC_source.h"
#include "Log.h"
#include "Looper.h"
#include "Message.h"
#include "java/lang/Boolean.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"


@class NSString;


#pragma clang diagnostic error "-Wreturn-type"
#pragma clang diagnostic ignored "-Wswitch"


@interface ADFilter () {
 @public
  ADHandler *mThreadHandler_;
  ADHandler *mResultHandler_;
  id<ADFilter_Delayer> mDelayer_;
  id mLock_;
}

@end

J2OBJC_FIELD_SETTER(ADFilter, mThreadHandler_, ADHandler *)
J2OBJC_FIELD_SETTER(ADFilter, mResultHandler_, ADHandler *)
J2OBJC_FIELD_SETTER(ADFilter, mDelayer_, id<ADFilter_Delayer>)
J2OBJC_FIELD_SETTER(ADFilter, mLock_, id)

inline NSString *ADFilter_get_LOG_TAG(void);
static NSString *ADFilter_LOG_TAG = @"Filter";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADFilter, LOG_TAG, NSString *)

inline NSString *ADFilter_get_THREAD_NAME(void);
static NSString *ADFilter_THREAD_NAME = @"Filter";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADFilter, THREAD_NAME, NSString *)

inline int32_t ADFilter_get_FILTER_TOKEN(void);
#define ADFilter_FILTER_TOKEN -791613427
J2OBJC_STATIC_FIELD_CONSTANT(ADFilter, FILTER_TOKEN, int32_t)

inline int32_t ADFilter_get_FINISH_TOKEN(void);
#define ADFilter_FINISH_TOKEN -559038737
J2OBJC_STATIC_FIELD_CONSTANT(ADFilter, FINISH_TOKEN, int32_t)

__attribute__((unused)) static void ADFilter_filterWithJavaLangCharSequence_withADFilter_FilterListener_(ADFilter *self, id<JavaLangCharSequence> constraint, id<ADFilter_FilterListener> listener);

@interface ADFilter_FilterListener : NSObject

@end

/*!
 @brief <p>Worker thread handler.When a new filtering request is posted from 
 <code>r.android.widget.Filter.filter(CharSequence, r.android.widget.Filter.FilterListener)</code>,
  it is sent to this handler.
 </p>
 */
@interface ADFilter_RequestHandler : ADHandler {
 @public
  ADFilter *this$0_;
}

- (instancetype)initWithADFilter:(ADFilter *)outer$
                    withADLooper:(ADLooper *)looper;

/*!
 @brief <p>Handles filtering requests by calling 
 <code>Filter.performFiltering</code> and then sending a message
  with the results to the results handler.
 </p>
 @param msg the filtering request
 */
- (void)handleMessageWithADMessage:(ADMessage *)msg;

@end

J2OBJC_EMPTY_STATIC_INIT(ADFilter_RequestHandler)

__attribute__((unused)) static void ADFilter_RequestHandler_initWithADFilter_withADLooper_(ADFilter_RequestHandler *self, ADFilter *outer$, ADLooper *looper);

__attribute__((unused)) static ADFilter_RequestHandler *new_ADFilter_RequestHandler_initWithADFilter_withADLooper_(ADFilter *outer$, ADLooper *looper) NS_RETURNS_RETAINED;

__attribute__((unused)) static ADFilter_RequestHandler *create_ADFilter_RequestHandler_initWithADFilter_withADLooper_(ADFilter *outer$, ADLooper *looper);

J2OBJC_TYPE_LITERAL_HEADER(ADFilter_RequestHandler)


/*!
 @brief <p>Handles the results of a filtering operation.The results are
  handled in the UI thread.
 </p>
 */
@interface ADFilter_ResultsHandler : ADHandler {
 @public
  ADFilter *this$0_;
}

- (instancetype)initWithADFilter:(ADFilter *)outer$;

/*!
 @brief <p>Messages received from the request handler are processed in the
  UI thread.The processing involves calling 
 <code>Filter.publishResults(CharSequence,
 r.android.widget.Filter.FilterResults)</code>
  to post the results back in the UI and then notifying the listener,
  if any.
 </p>
 @param msg the filtering results
 */
- (void)handleMessageWithADMessage:(ADMessage *)msg;

@end

J2OBJC_EMPTY_STATIC_INIT(ADFilter_ResultsHandler)

__attribute__((unused)) static void ADFilter_ResultsHandler_initWithADFilter_(ADFilter_ResultsHandler *self, ADFilter *outer$);

__attribute__((unused)) static ADFilter_ResultsHandler *new_ADFilter_ResultsHandler_initWithADFilter_(ADFilter *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static ADFilter_ResultsHandler *create_ADFilter_ResultsHandler_initWithADFilter_(ADFilter *outer$);

J2OBJC_TYPE_LITERAL_HEADER(ADFilter_ResultsHandler)


/*!
 @brief <p>Holds the arguments of a filtering request as well as the results
  of the request.
 </p>
 */
@interface ADFilter_RequestArguments : NSObject {
 @public
  /*!
   @brief <p>The constraint used to filter the data.
   </p>
   */
  id<JavaLangCharSequence> constraint_;
  /*!
   @brief <p>The listener to notify upon completion.Can be null.
   </p>
   */
  id<ADFilter_FilterListener> listener_;
  /*!
   @brief <p>The results of the filtering operation.
   </p>
   */
  ADFilter_FilterResults *results_;
}

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(ADFilter_RequestArguments)

J2OBJC_FIELD_SETTER(ADFilter_RequestArguments, constraint_, id<JavaLangCharSequence>)
J2OBJC_FIELD_SETTER(ADFilter_RequestArguments, listener_, id<ADFilter_FilterListener>)
J2OBJC_FIELD_SETTER(ADFilter_RequestArguments, results_, ADFilter_FilterResults *)

__attribute__((unused)) static void ADFilter_RequestArguments_init(ADFilter_RequestArguments *self);

__attribute__((unused)) static ADFilter_RequestArguments *new_ADFilter_RequestArguments_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static ADFilter_RequestArguments *create_ADFilter_RequestArguments_init(void);

J2OBJC_TYPE_LITERAL_HEADER(ADFilter_RequestArguments)


@interface ADFilter_Delayer : NSObject

@end

@implementation ADFilter

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADFilter_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)setDelayerWithADFilter_Delayer:(id<ADFilter_Delayer>)delayer {
  @synchronized(mLock_) {
    JreStrongAssign(&mDelayer_, delayer);
  }
}

- (void)filterWithJavaLangCharSequence:(id<JavaLangCharSequence>)constraint {
  ADFilter_filterWithJavaLangCharSequence_withADFilter_FilterListener_(self, constraint, nil);
}

- (void)filterWithJavaLangCharSequence:(id<JavaLangCharSequence>)constraint
           withADFilter_FilterListener:(id<ADFilter_FilterListener>)listener {
  ADFilter_filterWithJavaLangCharSequence_withADFilter_FilterListener_(self, constraint, listener);
}

- (ADFilter_FilterResults *)performFilteringWithJavaLangCharSequence:(id<JavaLangCharSequence>)constraint {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)publishResultsWithJavaLangCharSequence:(id<JavaLangCharSequence>)constraint
                    withADFilter_FilterResults:(ADFilter_FilterResults *)results {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (id<JavaLangCharSequence>)convertResultToStringWithId:(id)resultValue {
  return resultValue == nil ? @"" : [resultValue description];
}

- (void)dealloc {
  RELEASE_(mThreadHandler_);
  RELEASE_(mResultHandler_);
  RELEASE_(mDelayer_);
  RELEASE_(mLock_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 2, 4, -1, -1, -1, -1 },
    { NULL, "LADFilter_FilterResults;", 0x404, 5, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x404, 6, 7, -1, -1, -1, -1 },
    { NULL, "LJavaLangCharSequence;", 0x1, 8, 9, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(setDelayerWithADFilter_Delayer:);
  methods[2].selector = @selector(filterWithJavaLangCharSequence:);
  methods[3].selector = @selector(filterWithJavaLangCharSequence:withADFilter_FilterListener:);
  methods[4].selector = @selector(performFilteringWithJavaLangCharSequence:);
  methods[5].selector = @selector(publishResultsWithJavaLangCharSequence:withADFilter_FilterResults:);
  methods[6].selector = @selector(convertResultToStringWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "LOG_TAG", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 10, -1, -1 },
    { "THREAD_NAME", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 11, -1, -1 },
    { "FILTER_TOKEN", "I", .constantValue.asInt = ADFilter_FILTER_TOKEN, 0x1a, -1, -1, -1, -1 },
    { "FINISH_TOKEN", "I", .constantValue.asInt = ADFilter_FINISH_TOKEN, 0x1a, -1, -1, -1, -1 },
    { "mThreadHandler_", "LADHandler;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mResultHandler_", "LADHandler;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mDelayer_", "LADFilter_Delayer;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mLock_", "LNSObject;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setDelayer", "LADFilter_Delayer;", "filter", "LJavaLangCharSequence;", "LJavaLangCharSequence;LADFilter_FilterListener;", "performFiltering", "publishResults", "LJavaLangCharSequence;LADFilter_FilterResults;", "convertResultToString", "LNSObject;", &ADFilter_LOG_TAG, &ADFilter_THREAD_NAME, "LADFilter_FilterResults;LADFilter_FilterListener;LADFilter_RequestHandler;LADFilter_ResultsHandler;LADFilter_RequestArguments;LADFilter_Delayer;" };
  static const J2ObjcClassInfo _ADFilter = { "Filter", "r.android.widget", ptrTable, methods, fields, 7, 0x401, 7, 8, -1, 12, -1, -1, -1 };
  return &_ADFilter;
}

@end

void ADFilter_init(ADFilter *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->mLock_, new_NSObject_init());
  JreStrongAssignAndConsume(&self->mResultHandler_, new_ADFilter_ResultsHandler_initWithADFilter_(self));
}

void ADFilter_filterWithJavaLangCharSequence_withADFilter_FilterListener_(ADFilter *self, id<JavaLangCharSequence> constraint, id<ADFilter_FilterListener> listener) {
  @synchronized(self->mLock_) {
    JreStrongAssignAndConsume(&self->mThreadHandler_, new_ADFilter_RequestHandler_initWithADFilter_withADLooper_(self, ADLooper_getMainLooper()));
    if (self->mThreadHandler_ == nil) {
      ADHandlerThread *thread = create_ADHandlerThread_initWithNSString_withInt_(ADFilter_THREAD_NAME, 0);
      [thread start];
      JreStrongAssignAndConsume(&self->mThreadHandler_, new_ADFilter_RequestHandler_initWithADFilter_withADLooper_(self, [thread getLooper]));
    }
    int64_t delay = (self->mDelayer_ == nil) ? 0 : [((id<ADFilter_Delayer>) nil_chk(self->mDelayer_)) getPostingDelayWithJavaLangCharSequence:constraint];
    ADMessage *message = JreRetainedLocalValue([((ADHandler *) nil_chk(self->mThreadHandler_)) obtainMessageWithInt:ADFilter_FILTER_TOKEN]);
    ADFilter_RequestArguments *args = create_ADFilter_RequestArguments_init();
    JreStrongAssign(&args->constraint_, constraint != nil ? [constraint description] : nil);
    JreStrongAssign(&args->listener_, listener);
    JreStrongAssign(&((ADMessage *) nil_chk(message))->obj_, args);
    [((ADHandler *) nil_chk(self->mThreadHandler_)) removeMessagesWithInt:ADFilter_FILTER_TOKEN];
    [((ADHandler *) nil_chk(self->mThreadHandler_)) removeMessagesWithInt:ADFilter_FINISH_TOKEN];
    [((ADHandler *) nil_chk(self->mThreadHandler_)) sendMessageDelayedWithADMessage:message withLong:delay];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADFilter)

J2OBJC_NAME_MAPPING(ADFilter, "r.android.widget", "AD")

@implementation ADFilter_FilterResults

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADFilter_FilterResults_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dealloc {
  RELEASE_(values_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "values_", "LNSObject;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "count_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LADFilter;" };
  static const J2ObjcClassInfo _ADFilter_FilterResults = { "FilterResults", "r.android.widget", ptrTable, methods, fields, 7, 0xc, 1, 2, 0, -1, -1, -1, -1 };
  return &_ADFilter_FilterResults;
}

@end

void ADFilter_FilterResults_init(ADFilter_FilterResults *self) {
  NSObject_init(self);
}

ADFilter_FilterResults *new_ADFilter_FilterResults_init() {
  J2OBJC_NEW_IMPL(ADFilter_FilterResults, init)
}

ADFilter_FilterResults *create_ADFilter_FilterResults_init() {
  J2OBJC_CREATE_IMPL(ADFilter_FilterResults, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADFilter_FilterResults)

@implementation ADFilter_FilterListener

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x401, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(onFilterCompleteWithInt:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "onFilterComplete", "I", "LADFilter;" };
  static const J2ObjcClassInfo _ADFilter_FilterListener = { "FilterListener", "r.android.widget", ptrTable, methods, NULL, 7, 0x609, 1, 0, 2, -1, -1, -1, -1 };
  return &_ADFilter_FilterListener;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(ADFilter_FilterListener)

@implementation ADFilter_RequestHandler

- (instancetype)initWithADFilter:(ADFilter *)outer$
                    withADLooper:(ADLooper *)looper {
  ADFilter_RequestHandler_initWithADFilter_withADLooper_(self, outer$, looper);
  return self;
}

- (void)handleMessageWithADMessage:(ADMessage *)msg {
  int32_t what = ((ADMessage *) nil_chk(msg))->what_;
  ADMessage *message;
  {
    ADFilter_RequestArguments *args;
    switch (what) {
      case ADFilter_FILTER_TOKEN:
      args = (ADFilter_RequestArguments *) cast_chk(msg->obj_, [ADFilter_RequestArguments class]);
      @try {
        JreStrongAssign(&((ADFilter_RequestArguments *) nil_chk(args))->results_, [this$0_ performFilteringWithJavaLangCharSequence:args->constraint_]);
      }
      @catch (JavaLangException *e) {
        JreStrongAssignAndConsume(&args->results_, new_ADFilter_FilterResults_init());
        ADLog_wWithNSString_withNSString_withJavaLangThrowable_(ADFilter_LOG_TAG, @"An exception occured during performFiltering()!", e);
      }
      @finally {
        message = [((ADHandler *) nil_chk(this$0_->mResultHandler_)) obtainMessageWithInt:what];
        JreStrongAssign(&((ADMessage *) nil_chk(message))->obj_, args);
        [message sendToTarget];
      }
      @synchronized(this$0_->mLock_) {
        if (this$0_->mThreadHandler_ != nil) {
          ADMessage *finishMessage = JreRetainedLocalValue([this$0_->mThreadHandler_ obtainMessageWithInt:ADFilter_FINISH_TOKEN]);
          [((ADHandler *) nil_chk(this$0_->mThreadHandler_)) sendMessageDelayedWithADMessage:finishMessage withLong:3000];
        }
      }
      break;
      case ADFilter_FINISH_TOKEN:
      @synchronized(this$0_->mLock_) {
        if (this$0_->mThreadHandler_ != nil) {
          [((ADLooper *) nil_chk([this$0_->mThreadHandler_ getLooper])) quit];
          JreStrongAssign(&this$0_->mThreadHandler_, nil);
        }
      }
      break;
    }
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithADFilter:withADLooper:);
  methods[1].selector = @selector(handleMessageWithADMessage:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LADFilter;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LADFilter;LADLooper;", "handleMessage", "LADMessage;", "LADFilter;" };
  static const J2ObjcClassInfo _ADFilter_RequestHandler = { "RequestHandler", "r.android.widget", ptrTable, methods, fields, 7, 0x2, 2, 1, 3, -1, -1, -1, -1 };
  return &_ADFilter_RequestHandler;
}

@end

void ADFilter_RequestHandler_initWithADFilter_withADLooper_(ADFilter_RequestHandler *self, ADFilter *outer$, ADLooper *looper) {
  JreStrongAssign(&self->this$0_, outer$);
  ADHandler_initWithADLooper_(self, looper);
}

ADFilter_RequestHandler *new_ADFilter_RequestHandler_initWithADFilter_withADLooper_(ADFilter *outer$, ADLooper *looper) {
  J2OBJC_NEW_IMPL(ADFilter_RequestHandler, initWithADFilter_withADLooper_, outer$, looper)
}

ADFilter_RequestHandler *create_ADFilter_RequestHandler_initWithADFilter_withADLooper_(ADFilter *outer$, ADLooper *looper) {
  J2OBJC_CREATE_IMPL(ADFilter_RequestHandler, initWithADFilter_withADLooper_, outer$, looper)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADFilter_RequestHandler)

@implementation ADFilter_ResultsHandler

- (instancetype)initWithADFilter:(ADFilter *)outer$ {
  ADFilter_ResultsHandler_initWithADFilter_(self, outer$);
  return self;
}

- (void)handleMessageWithADMessage:(ADMessage *)msg {
  ADFilter_RequestArguments *args = (ADFilter_RequestArguments *) cast_chk(((ADMessage *) nil_chk(msg))->obj_, [ADFilter_RequestArguments class]);
  [this$0_ publishResultsWithJavaLangCharSequence:((ADFilter_RequestArguments *) nil_chk(args))->constraint_ withADFilter_FilterResults:args->results_];
  if (args->listener_ != nil) {
    int32_t count = args->results_ != nil ? args->results_->count_ : -1;
    [args->listener_ onFilterCompleteWithInt:count];
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithADFilter:);
  methods[1].selector = @selector(handleMessageWithADMessage:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LADFilter;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LADFilter;", "handleMessage", "LADMessage;" };
  static const J2ObjcClassInfo _ADFilter_ResultsHandler = { "ResultsHandler", "r.android.widget", ptrTable, methods, fields, 7, 0x2, 2, 1, 0, -1, -1, -1, -1 };
  return &_ADFilter_ResultsHandler;
}

@end

void ADFilter_ResultsHandler_initWithADFilter_(ADFilter_ResultsHandler *self, ADFilter *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  ADHandler_init(self);
}

ADFilter_ResultsHandler *new_ADFilter_ResultsHandler_initWithADFilter_(ADFilter *outer$) {
  J2OBJC_NEW_IMPL(ADFilter_ResultsHandler, initWithADFilter_, outer$)
}

ADFilter_ResultsHandler *create_ADFilter_ResultsHandler_initWithADFilter_(ADFilter *outer$) {
  J2OBJC_CREATE_IMPL(ADFilter_ResultsHandler, initWithADFilter_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADFilter_ResultsHandler)

@implementation ADFilter_RequestArguments

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADFilter_RequestArguments_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dealloc {
  RELEASE_(constraint_);
  RELEASE_(listener_);
  RELEASE_(results_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "constraint_", "LJavaLangCharSequence;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "listener_", "LADFilter_FilterListener;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "results_", "LADFilter_FilterResults;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LADFilter;" };
  static const J2ObjcClassInfo _ADFilter_RequestArguments = { "RequestArguments", "r.android.widget", ptrTable, methods, fields, 7, 0xa, 1, 3, 0, -1, -1, -1, -1 };
  return &_ADFilter_RequestArguments;
}

@end

void ADFilter_RequestArguments_init(ADFilter_RequestArguments *self) {
  NSObject_init(self);
}

ADFilter_RequestArguments *new_ADFilter_RequestArguments_init() {
  J2OBJC_NEW_IMPL(ADFilter_RequestArguments, init)
}

ADFilter_RequestArguments *create_ADFilter_RequestArguments_init() {
  J2OBJC_CREATE_IMPL(ADFilter_RequestArguments, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADFilter_RequestArguments)

@implementation ADFilter_Delayer

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "J", 0x401, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getPostingDelayWithJavaLangCharSequence:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "getPostingDelay", "LJavaLangCharSequence;", "LADFilter;" };
  static const J2ObjcClassInfo _ADFilter_Delayer = { "Delayer", "r.android.widget", ptrTable, methods, NULL, 7, 0x609, 1, 0, 2, -1, -1, -1, -1 };
  return &_ADFilter_Delayer;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(ADFilter_Delayer)
