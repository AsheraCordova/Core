//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroid\src\main\java\r\android\util\MathUtils.java
//

#define J2OBJC_IMPORTED_BY_JAVA_IMPLEMENTATION 1




#include "J2ObjC_source.h"
#include "MathUtils.h"
#include "java/lang/Double.h"
#include "java/lang/Float.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"




#pragma clang diagnostic error "-Wreturn-type"
#pragma clang diagnostic ignored "-Wswitch"


@implementation ADMathUtils

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADMathUtils_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (int32_t)constrainWithInt:(int32_t)amount
                    withInt:(int32_t)low
                    withInt:(int32_t)high {
  return ADMathUtils_constrainWithInt_withInt_withInt_(amount, low, high);
}

+ (float)constrainWithFloat:(float)amount
                  withFloat:(float)low
                  withFloat:(float)high {
  return ADMathUtils_constrainWithFloat_withFloat_withFloat_(amount, low, high);
}

+ (float)clampWithFloat:(float)value
              withFloat:(float)min
              withFloat:(float)max {
  return ADMathUtils_clampWithFloat_withFloat_withFloat_(value, min, max);
}

+ (int32_t)clampWithInt:(int32_t)value
                withInt:(int32_t)min
                withInt:(int32_t)max {
  return ADMathUtils_clampWithInt_withInt_withInt_(value, min, max);
}

+ (double)clampWithDouble:(double)value
               withDouble:(double)min
               withDouble:(double)max {
  return ADMathUtils_clampWithDouble_withDouble_withDouble_(value, min, max);
}

+ (int64_t)clampWithLong:(int64_t)value
                withLong:(int64_t)min
                withLong:(int64_t)max {
  return ADMathUtils_clampWithLong_withLong_withLong_(value, min, max);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "F", 0x9, 0, 2, -1, -1, -1, -1 },
    { NULL, "F", 0x9, 3, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 3, 1, -1, -1, -1, -1 },
    { NULL, "D", 0x9, 3, 4, -1, -1, -1, -1 },
    { NULL, "J", 0x9, 3, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(constrainWithInt:withInt:withInt:);
  methods[2].selector = @selector(constrainWithFloat:withFloat:withFloat:);
  methods[3].selector = @selector(clampWithFloat:withFloat:withFloat:);
  methods[4].selector = @selector(clampWithInt:withInt:withInt:);
  methods[5].selector = @selector(clampWithDouble:withDouble:withDouble:);
  methods[6].selector = @selector(clampWithLong:withLong:withLong:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "constrain", "III", "FFF", "clamp", "DDD", "JJJ" };
  static const J2ObjcClassInfo _ADMathUtils = { "MathUtils", "r.android.util", ptrTable, methods, NULL, 7, 0x1, 7, 0, -1, -1, -1, -1, -1 };
  return &_ADMathUtils;
}

@end

void ADMathUtils_init(ADMathUtils *self) {
  NSObject_init(self);
}

ADMathUtils *new_ADMathUtils_init() {
  J2OBJC_NEW_IMPL(ADMathUtils, init)
}

ADMathUtils *create_ADMathUtils_init() {
  J2OBJC_CREATE_IMPL(ADMathUtils, init)
}

int32_t ADMathUtils_constrainWithInt_withInt_withInt_(int32_t amount, int32_t low, int32_t high) {
  ADMathUtils_initialize();
  return amount < low ? low : (amount > high ? high : amount);
}

float ADMathUtils_constrainWithFloat_withFloat_withFloat_(float amount, float low, float high) {
  ADMathUtils_initialize();
  return amount < low ? low : (amount > high ? high : amount);
}

float ADMathUtils_clampWithFloat_withFloat_withFloat_(float value, float min, float max) {
  ADMathUtils_initialize();
  if (value < min) {
    return min;
  }
  else if (value > max) {
    return max;
  }
  return value;
}

int32_t ADMathUtils_clampWithInt_withInt_withInt_(int32_t value, int32_t min, int32_t max) {
  ADMathUtils_initialize();
  if (value < min) {
    return min;
  }
  else if (value > max) {
    return max;
  }
  return value;
}

double ADMathUtils_clampWithDouble_withDouble_withDouble_(double value, double min, double max) {
  ADMathUtils_initialize();
  if (value < min) {
    return min;
  }
  else if (value > max) {
    return max;
  }
  return value;
}

int64_t ADMathUtils_clampWithLong_withLong_withLong_(int64_t value, int64_t min, int64_t max) {
  ADMathUtils_initialize();
  if (value < min) {
    return min;
  }
  else if (value > max) {
    return max;
  }
  return value;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADMathUtils)

J2OBJC_NAME_MAPPING(ADMathUtils, "r.android.util", "AD")
