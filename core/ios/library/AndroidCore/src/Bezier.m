//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroid\src\main\stub\r\android\graphics\Bezier.java
//

#define J2OBJC_IMPORTED_BY_JAVA_IMPLEMENTATION 1




#include "Bezier.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "PointF.h"
#include "java/lang/Double.h"
#include "java/lang/Float.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"




#pragma clang diagnostic error "-Wreturn-type"
#pragma clang diagnostic ignored "-Wswitch"


@interface ADBezier ()

- (void)calcLength;

- (float)lineLengthWithFloat:(float)x1
                   withFloat:(float)y1
                   withFloat:(float)x2
                   withFloat:(float)y2;

/*!
 @brief Calculates the bernstein polynomial for evaluating parametric bezier
 @param numKnots - one less than number of knots in this curve hull
 @param knotNo - knot we are evaluating Bernstein for
 @param param - Parametric value we are evaluating at
 */
- (double)bernsteinWithInt:(int32_t)numKnots
                   withInt:(int32_t)knotNo
                withDouble:(double)param;

- (int32_t)chooseWithInt:(int32_t)num
                 withInt:(int32_t)denom;

@end

__attribute__((unused)) static void ADBezier_calcLength(ADBezier *self);

__attribute__((unused)) static float ADBezier_lineLengthWithFloat_withFloat_withFloat_withFloat_(ADBezier *self, float x1, float y1, float x2, float y2);

__attribute__((unused)) static double ADBezier_bernsteinWithInt_withInt_withDouble_(ADBezier *self, int32_t numKnots, int32_t knotNo, double param);

__attribute__((unused)) static int32_t ADBezier_chooseWithInt_withInt_(ADBezier *self, int32_t num, int32_t denom);

@implementation ADBezier

- (instancetype)initWithFloat:(float)sx
                    withFloat:(float)sy
               withFloatArray:(IOSFloatArray *)coords
                      withInt:(int32_t)numCoords {
  ADBezier_initWithFloat_withFloat_withFloatArray_withInt_(self, sx, sy, coords, numCoords);
  return self;
}

- (void)setCoordsWithFloat:(float)sx
                 withFloat:(float)sy
            withFloatArray:(IOSFloatArray *)coords
                   withInt:(int32_t)numCoords {
  JreStrongAssignAndConsume(&coord_, [IOSFloatArray newArrayWithLength:numCoords * 2 + 2]);
  *IOSFloatArray_GetRef(coord_, 0) = sx;
  *IOSFloatArray_GetRef(coord_, 1) = sy;
  for (int32_t i = 0; i < numCoords; i++) {
    *IOSFloatArray_GetRef(coord_, i * 2 + 2) = IOSFloatArray_Get(nil_chk(coords), i * 2);
    *IOSFloatArray_GetRef(coord_, i * 2 + 3) = IOSFloatArray_Get(coords, i * 2 + 1);
  }
  ADBezier_calcLength(self);
}

- (float)getLength {
  return length_;
}

- (void)calcLength {
  ADBezier_calcLength(self);
}

- (float)lineLengthWithFloat:(float)x1
                   withFloat:(float)y1
                   withFloat:(float)x2
                   withFloat:(float)y2 {
  return ADBezier_lineLengthWithFloat_withFloat_withFloat_withFloat_(self, x1, y1, x2, y2);
}

- (ADPointF *)getFinalPointWithADPointF:(ADPointF *)point {
  ((ADPointF *) nil_chk(point))->x_ = IOSFloatArray_Get(coord_, ((IOSFloatArray *) nil_chk(coord_))->size_ - 2);
  point->y_ = IOSFloatArray_Get(coord_, coord_->size_ - 1);
  return point;
}

- (ADPointF *)evalWithDouble:(double)param
                withADPointF:(ADPointF *)point {
  ((ADPointF *) nil_chk(point))->x_ = 0;
  point->y_ = 0;
  int32_t numKnots = JreIntDiv(((IOSFloatArray *) nil_chk(coord_))->size_, 2);
  for (int32_t i = 0; i < numKnots; i++) {
    double scale_ = ADBezier_bernsteinWithInt_withInt_withDouble_(self, numKnots - 1, i, param);
    JrePlusAssignFloatD(&point->x_, IOSFloatArray_Get(nil_chk(coord_), i * 2) * scale_);
    JrePlusAssignFloatD(&point->y_, IOSFloatArray_Get(coord_, i * 2 + 1) * scale_);
  }
  return point;
}

- (double)bernsteinWithInt:(int32_t)numKnots
                   withInt:(int32_t)knotNo
                withDouble:(double)param {
  return ADBezier_bernsteinWithInt_withInt_withDouble_(self, numKnots, knotNo, param);
}

- (int32_t)chooseWithInt:(int32_t)num
                 withInt:(int32_t)denom {
  return ADBezier_chooseWithInt_withInt_(self, num, denom);
}

- (void)dealloc {
  RELEASE_(coord_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 0, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x2, 2, 3, -1, -1, -1, -1 },
    { NULL, "LADPointF;", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "LADPointF;", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "D", 0x2, 8, 9, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 10, 11, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithFloat:withFloat:withFloatArray:withInt:);
  methods[1].selector = @selector(setCoordsWithFloat:withFloat:withFloatArray:withInt:);
  methods[2].selector = @selector(getLength);
  methods[3].selector = @selector(calcLength);
  methods[4].selector = @selector(lineLengthWithFloat:withFloat:withFloat:withFloat:);
  methods[5].selector = @selector(getFinalPointWithADPointF:);
  methods[6].selector = @selector(evalWithDouble:withADPointF:);
  methods[7].selector = @selector(bernsteinWithInt:withInt:withDouble:);
  methods[8].selector = @selector(chooseWithInt:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "length_", "F", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "coord_", "[F", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "FF[FI", "setCoords", "lineLength", "FFFF", "getFinalPoint", "LADPointF;", "eval", "DLADPointF;", "bernstein", "IID", "choose", "II" };
  static const J2ObjcClassInfo _ADBezier = { "Bezier", "r.android.graphics", ptrTable, methods, fields, 7, 0x1, 9, 2, -1, -1, -1, -1, -1 };
  return &_ADBezier;
}

@end

void ADBezier_initWithFloat_withFloat_withFloatArray_withInt_(ADBezier *self, float sx, float sy, IOSFloatArray *coords, int32_t numCoords) {
  NSObject_init(self);
  [self setCoordsWithFloat:sx withFloat:sy withFloatArray:coords withInt:numCoords];
}

ADBezier *new_ADBezier_initWithFloat_withFloat_withFloatArray_withInt_(float sx, float sy, IOSFloatArray *coords, int32_t numCoords) {
  J2OBJC_NEW_IMPL(ADBezier, initWithFloat_withFloat_withFloatArray_withInt_, sx, sy, coords, numCoords)
}

ADBezier *create_ADBezier_initWithFloat_withFloat_withFloatArray_withInt_(float sx, float sy, IOSFloatArray *coords, int32_t numCoords) {
  J2OBJC_CREATE_IMPL(ADBezier, initWithFloat_withFloat_withFloatArray_withInt_, sx, sy, coords, numCoords)
}

void ADBezier_calcLength(ADBezier *self) {
  self->length_ = 0;
  for (int32_t i = 2; i < ((IOSFloatArray *) nil_chk(self->coord_))->size_; i += 2) {
    JrePlusAssignFloatF(&self->length_, ADBezier_lineLengthWithFloat_withFloat_withFloat_withFloat_(self, IOSFloatArray_Get(self->coord_, i - 2), IOSFloatArray_Get(self->coord_, i - 1), IOSFloatArray_Get(self->coord_, i), IOSFloatArray_Get(self->coord_, i + 1)));
  }
}

float ADBezier_lineLengthWithFloat_withFloat_withFloat_withFloat_(ADBezier *self, float x1, float y1, float x2, float y2) {
  float dx = x2 - x1;
  float dy = y2 - y1;
  return (float) JavaLangMath_sqrtWithDouble_(dx * dx + dy * dy);
}

double ADBezier_bernsteinWithInt_withInt_withDouble_(ADBezier *self, int32_t numKnots, int32_t knotNo, double param) {
  double iParam = 1 - param;
  switch (numKnots) {
    case 0:
    return 1;
    case 1:
    {
      switch (knotNo) {
        case 0:
        return iParam;
        case 1:
        return param;
      }
      break;
    }
    case 2:
    {
      switch (knotNo) {
        case 0:
        return iParam * iParam;
        case 1:
        return 2 * iParam * param;
        case 2:
        return param * param;
      }
      break;
    }
    case 3:
    {
      switch (knotNo) {
        case 0:
        return iParam * iParam * iParam;
        case 1:
        return 3 * iParam * iParam * param;
        case 2:
        return 3 * iParam * param * param;
        case 3:
        return param * param * param;
      }
      break;
    }
  }
  double retVal = 1;
  for (int32_t i = 0; i < knotNo; i++) {
    JreTimesAssignDoubleD(&retVal, param);
  }
  for (int32_t i = 0; i < numKnots - knotNo; i++) {
    JreTimesAssignDoubleD(&retVal, iParam);
  }
  JreTimesAssignDoubleD(&retVal, ADBezier_chooseWithInt_withInt_(self, numKnots, knotNo));
  return retVal;
}

int32_t ADBezier_chooseWithInt_withInt_(ADBezier *self, int32_t num, int32_t denom) {
  int32_t denom2 = num - denom;
  if (denom < denom2) {
    int32_t tmp = denom;
    denom = denom2;
    denom2 = tmp;
  }
  int32_t prod = 1;
  for (int32_t i = num; i > denom; i--) {
    prod *= num;
  }
  for (int32_t i = 2; i <= denom2; i++) {
    prod /= i;
  }
  return prod;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADBezier)

J2OBJC_NAME_MAPPING(ADBezier, "r.android.graphics", "AD")
