//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroid\src\main\java\r\com\android\internal\util\Preconditions.java
//

#define J2OBJC_IMPORTED_BY_JAVA_IMPLEMENTATION 1




#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "Preconditions.h"
#include "java/lang/Boolean.h"
#include "java/lang/Float.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"




#pragma clang diagnostic error "-Wreturn-type"
#pragma clang diagnostic ignored "-Wswitch"


@implementation ADPreconditions

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADPreconditions_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (float)checkArgumentInRangeWithFloat:(float)value
                             withFloat:(float)lower
                             withFloat:(float)upper
                          withNSString:(NSString *)valueName {
  return ADPreconditions_checkArgumentInRangeWithFloat_withFloat_withFloat_withNSString_(value, lower, upper, valueName);
}

+ (int32_t)checkArgumentInRangeWithInt:(int32_t)value
                               withInt:(int32_t)lower
                               withInt:(int32_t)upper
                          withNSString:(NSString *)valueName {
  return ADPreconditions_checkArgumentInRangeWithInt_withInt_withInt_withNSString_(value, lower, upper, valueName);
}

+ (int32_t)checkArgumentNonnegativeWithInt:(int32_t)value
                              withNSString:(NSString *)errorMessage {
  return ADPreconditions_checkArgumentNonnegativeWithInt_withNSString_(value, errorMessage);
}

+ (int32_t)checkArgumentNonnegativeWithInt:(int32_t)value {
  return ADPreconditions_checkArgumentNonnegativeWithInt_(value);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 0, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 3, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 3, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(checkArgumentInRangeWithFloat:withFloat:withFloat:withNSString:);
  methods[2].selector = @selector(checkArgumentInRangeWithInt:withInt:withInt:withNSString:);
  methods[3].selector = @selector(checkArgumentNonnegativeWithInt:withNSString:);
  methods[4].selector = @selector(checkArgumentNonnegativeWithInt:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "checkArgumentInRange", "FFFLNSString;", "IIILNSString;", "checkArgumentNonnegative", "ILNSString;", "I" };
  static const J2ObjcClassInfo _ADPreconditions = { "Preconditions", "r.com.android.internal.util", ptrTable, methods, NULL, 7, 0x1, 5, 0, -1, -1, -1, -1, -1 };
  return &_ADPreconditions;
}

@end

void ADPreconditions_init(ADPreconditions *self) {
  NSObject_init(self);
}

ADPreconditions *new_ADPreconditions_init() {
  J2OBJC_NEW_IMPL(ADPreconditions, init)
}

ADPreconditions *create_ADPreconditions_init() {
  J2OBJC_CREATE_IMPL(ADPreconditions, init)
}

float ADPreconditions_checkArgumentInRangeWithFloat_withFloat_withFloat_withNSString_(float value, float lower, float upper, NSString *valueName) {
  ADPreconditions_initialize();
  if (JavaLangFloat_isNaNWithFloat_(value)) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", valueName, @" must not be NaN"));
  }
  else if (value < lower) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(NSString_java_formatWithNSString_withNSObjectArray_(@"%s is out of range of [%f, %f] (too low)", [IOSObjectArray arrayWithObjects:(id[]){ valueName, JavaLangFloat_valueOfWithFloat_(lower), JavaLangFloat_valueOfWithFloat_(upper) } count:3 type:NSObject_class_()]));
  }
  else if (value > upper) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(NSString_java_formatWithNSString_withNSObjectArray_(@"%s is out of range of [%f, %f] (too high)", [IOSObjectArray arrayWithObjects:(id[]){ valueName, JavaLangFloat_valueOfWithFloat_(lower), JavaLangFloat_valueOfWithFloat_(upper) } count:3 type:NSObject_class_()]));
  }
  return value;
}

int32_t ADPreconditions_checkArgumentInRangeWithInt_withInt_withInt_withNSString_(int32_t value, int32_t lower, int32_t upper, NSString *valueName) {
  ADPreconditions_initialize();
  if (value < lower) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(NSString_java_formatWithNSString_withNSObjectArray_(@"%s is out of range of [%d, %d] (too low)", [IOSObjectArray arrayWithObjects:(id[]){ valueName, JavaLangInteger_valueOfWithInt_(lower), JavaLangInteger_valueOfWithInt_(upper) } count:3 type:NSObject_class_()]));
  }
  else if (value > upper) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(NSString_java_formatWithNSString_withNSObjectArray_(@"%s is out of range of [%d, %d] (too high)", [IOSObjectArray arrayWithObjects:(id[]){ valueName, JavaLangInteger_valueOfWithInt_(lower), JavaLangInteger_valueOfWithInt_(upper) } count:3 type:NSObject_class_()]));
  }
  return value;
}

int32_t ADPreconditions_checkArgumentNonnegativeWithInt_withNSString_(int32_t value, NSString *errorMessage) {
  ADPreconditions_initialize();
  if (value < 0) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(errorMessage);
  }
  return value;
}

int32_t ADPreconditions_checkArgumentNonnegativeWithInt_(int32_t value) {
  ADPreconditions_initialize();
  if (value < 0) {
    @throw create_JavaLangIllegalArgumentException_init();
  }
  return value;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADPreconditions)

J2OBJC_NAME_MAPPING(ADPreconditions, "r.com.android.internal.util", "AD")
