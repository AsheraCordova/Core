//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroid\src\main\java\r\android\graphics\drawable\StateListDrawable.java
//

#define J2OBJC_IMPORTED_BY_JAVA_IMPLEMENTATION 1




#include "Drawable.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "StateListDrawable.h"
#include "java/lang/Boolean.h"
#include "java/lang/Integer.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"




#pragma clang diagnostic error "-Wreturn-type"
#pragma clang diagnostic ignored "-Wswitch"


@interface ADStateListDrawable () {
 @public
  IOSObjectArray *mStateSets_;
  IOSObjectArray *mDrawables_;
  int32_t mNumChildren_;
}

@end

J2OBJC_FIELD_SETTER(ADStateListDrawable, mStateSets_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(ADStateListDrawable, mDrawables_, IOSObjectArray *)

__attribute__((unused)) static int32_t ADStateListDrawable_getCapacity(ADStateListDrawable *self);

__attribute__((unused)) static int32_t ADStateListDrawable_addChildWithADDrawable_(ADStateListDrawable *self, ADDrawable *dr);

__attribute__((unused)) static int32_t ADStateListDrawable_getChildCount(ADStateListDrawable *self);

@implementation ADStateListDrawable

- (id<JavaUtilList>)getAllDrawables {
  if (mDrawables_ == nil) {
    return nil;
  }
  id<JavaUtilList> objects = create_JavaUtilArrayList_init();
  for (int32_t i = 0; i < ((IOSObjectArray *) nil_chk(mDrawables_))->size_; i++) {
    ADDrawable *drawable = IOSObjectArray_Get(mDrawables_, i);
    if (drawable != nil) {
      [objects addWithId:[drawable getDrawable]];
    }
    else {
      break;
    }
  }
  return objects;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADStateListDrawable_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id)getDrawable {
  ADDrawable *currentDrawable = JreRetainedLocalValue([self getCurrentDrawable]);
  if (currentDrawable == nil) {
    return nil;
  }
  return [currentDrawable getDrawable];
}

- (void)setDrawableWithId:(id)drawable {
  [super setDrawableWithId:drawable];
  ADDrawable *currentDrawable = JreRetainedLocalValue([self getCurrentDrawable]);
  if (currentDrawable == nil) {
    return;
  }
  [currentDrawable setDrawableWithId:drawable];
}

- (int32_t)getCapacity {
  return ADStateListDrawable_getCapacity(self);
}

- (void)addStateWithIntArray:(IOSIntArray *)stateSet
              withADDrawable:(ADDrawable *)drawable {
  if (drawable != nil) {
    [self addStateSetWithIntArray:stateSet withADDrawable:drawable];
    [self onStateChangeWithIntArray:[self getState]];
  }
}

- (ADDrawable *)getCurrentDrawable {
  int32_t idx = [self indexOfStateSetWithIntArray:[self getState]];
  if (idx < 0) {
    idx = [self indexOfStateSetWithIntArray:JreLoadStatic(ADDrawable, WILD_CARD)];
  }
  return idx < 0 ? nil : IOSObjectArray_Get(nil_chk(mDrawables_), idx);
}

- (bool)isStateful {
  return true;
}

- (int32_t)addChildWithADDrawable:(ADDrawable *)dr {
  return ADStateListDrawable_addChildWithADDrawable_(self, dr);
}

- (void)growArrayWithInt:(int32_t)oldSize
                 withInt:(int32_t)newSize {
  IOSObjectArray *newDrawables = [IOSObjectArray arrayWithLength:newSize type:ADDrawable_class_()];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(mDrawables_, 0, newDrawables, 0, oldSize);
  JreStrongAssign(&mDrawables_, newDrawables);
}

- (int32_t)addStateSetWithIntArray:(IOSIntArray *)stateSet
                    withADDrawable:(ADDrawable *)drawable {
  int32_t pos = ADStateListDrawable_addChildWithADDrawable_(self, drawable);
  if (pos >= ((IOSObjectArray *) nil_chk(mStateSets_))->size_) {
    [self growArrayStateSetWithInt:pos withInt:pos + 10];
  }
  IOSObjectArray_Set(nil_chk(mStateSets_), pos, stateSet);
  return pos;
}

- (void)growArrayStateSetWithInt:(int32_t)oldSize
                         withInt:(int32_t)newSize {
  IOSObjectArray *newStateSets = [IOSObjectArray arrayWithLength:newSize type:IOSClass_intArray(1)];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(mStateSets_, 0, newStateSets, 0, oldSize);
  JreStrongAssign(&mStateSets_, newStateSets);
}

- (bool)onStateChangeWithIntArray:(IOSIntArray *)stateSet {
  int32_t idx = [self indexOfStateSetWithIntArray:stateSet];
  if (idx < 0) {
    idx = [self indexOfStateSetWithIntArray:JreLoadStatic(ADDrawable, WILD_CARD)];
  }
  return [self selectDrawableWithInt:idx];
}

- (bool)selectDrawableWithInt:(int32_t)index {
  return true;
}

- (int32_t)indexOfStateSetWithIntArray:(IOSIntArray *)stateSet {
  IOSObjectArray *stateSets = mStateSets_;
  int32_t N = ADStateListDrawable_getChildCount(self);
  for (int32_t i = 0; i < N; i++) {
    if (ADStateListDrawable_stateSetMatchesWithIntArray_withIntArray_(IOSObjectArray_Get(nil_chk(stateSets), i), stateSet)) {
      return i;
    }
  }
  return -1;
}

- (int32_t)getChildCount {
  return ADStateListDrawable_getChildCount(self);
}

+ (bool)isWildCardWithIntArray:(IOSIntArray *)stateSetOrSpec {
  return ADStateListDrawable_isWildCardWithIntArray_(stateSetOrSpec);
}

+ (bool)stateSetMatchesWithIntArray:(IOSIntArray *)stateSpec
                       withIntArray:(IOSIntArray *)stateSet {
  return ADStateListDrawable_stateSetMatchesWithIntArray_withIntArray_(stateSpec, stateSet);
}

- (void)setBoundsWithInt:(int32_t)left
                 withInt:(int32_t)top
                 withInt:(int32_t)right
                 withInt:(int32_t)bottom {
  [super setBoundsWithInt:left withInt:top withInt:right withInt:bottom];
  if (mDrawables_ != nil) {
    {
      IOSObjectArray *a__ = mDrawables_;
      ADDrawable * const *b__ = a__->buffer_;
      ADDrawable * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        ADDrawable *drawable = RETAIN_AND_AUTORELEASE(*b__++);
        if (drawable != nil) {
          [drawable setBoundsWithInt:left withInt:top withInt:right withInt:bottom];
        }
      }
    }
  }
}

- (void)dealloc {
  RELEASE_(mStateSets_);
  RELEASE_(mDrawables_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x10, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LADDrawable;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x11, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 9, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 8, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, 11, 12, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 15, 12, -1, -1, -1, -1 },
    { NULL, "I", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 16, 12, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 17, 18, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 20, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getAllDrawables);
  methods[1].selector = @selector(init);
  methods[2].selector = @selector(getDrawable);
  methods[3].selector = @selector(setDrawableWithId:);
  methods[4].selector = @selector(getCapacity);
  methods[5].selector = @selector(addStateWithIntArray:withADDrawable:);
  methods[6].selector = @selector(getCurrentDrawable);
  methods[7].selector = @selector(isStateful);
  methods[8].selector = @selector(addChildWithADDrawable:);
  methods[9].selector = @selector(growArrayWithInt:withInt:);
  methods[10].selector = @selector(addStateSetWithIntArray:withADDrawable:);
  methods[11].selector = @selector(growArrayStateSetWithInt:withInt:);
  methods[12].selector = @selector(onStateChangeWithIntArray:);
  methods[13].selector = @selector(selectDrawableWithInt:);
  methods[14].selector = @selector(indexOfStateSetWithIntArray:);
  methods[15].selector = @selector(getChildCount);
  methods[16].selector = @selector(isWildCardWithIntArray:);
  methods[17].selector = @selector(stateSetMatchesWithIntArray:withIntArray:);
  methods[18].selector = @selector(setBoundsWithInt:withInt:withInt:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mStateSets_", "[[I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mDrawables_", "[LADDrawable;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mNumChildren_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/List<Ljava/lang/Object;>;", "setDrawable", "LNSObject;", "addState", "[ILADDrawable;", "addChild", "LADDrawable;", "growArray", "II", "addStateSet", "growArrayStateSet", "onStateChange", "[I", "selectDrawable", "I", "indexOfStateSet", "isWildCard", "stateSetMatches", "[I[I", "setBounds", "IIII" };
  static const J2ObjcClassInfo _ADStateListDrawable = { "StateListDrawable", "r.android.graphics.drawable", ptrTable, methods, fields, 7, 0x1, 19, 3, -1, -1, -1, -1, -1 };
  return &_ADStateListDrawable;
}

@end

void ADStateListDrawable_init(ADStateListDrawable *self) {
  ADDrawable_init(self);
  JreStrongAssignAndConsume(&self->mDrawables_, [IOSObjectArray newArrayWithLength:10 type:ADDrawable_class_()]);
  self->mNumChildren_ = 0;
  JreStrongAssignAndConsume(&self->mStateSets_, [IOSObjectArray newArrayWithLength:ADStateListDrawable_getCapacity(self) type:IOSClass_intArray(1)]);
}

ADStateListDrawable *new_ADStateListDrawable_init() {
  J2OBJC_NEW_IMPL(ADStateListDrawable, init)
}

ADStateListDrawable *create_ADStateListDrawable_init() {
  J2OBJC_CREATE_IMPL(ADStateListDrawable, init)
}

int32_t ADStateListDrawable_getCapacity(ADStateListDrawable *self) {
  return ((IOSObjectArray *) nil_chk(self->mDrawables_))->size_;
}

int32_t ADStateListDrawable_addChildWithADDrawable_(ADStateListDrawable *self, ADDrawable *dr) {
  int32_t pos = self->mNumChildren_;
  if (pos >= ((IOSObjectArray *) nil_chk(self->mDrawables_))->size_) {
    [self growArrayWithInt:pos withInt:pos + 10];
  }
  IOSObjectArray_Set(nil_chk(self->mDrawables_), pos, dr);
  self->mNumChildren_++;
  return pos;
}

int32_t ADStateListDrawable_getChildCount(ADStateListDrawable *self) {
  return self->mNumChildren_;
}

bool ADStateListDrawable_isWildCardWithIntArray_(IOSIntArray *stateSetOrSpec) {
  ADStateListDrawable_initialize();
  return ((IOSIntArray *) nil_chk(stateSetOrSpec))->size_ == 0 || IOSIntArray_Get(stateSetOrSpec, 0) == 0;
}

bool ADStateListDrawable_stateSetMatchesWithIntArray_withIntArray_(IOSIntArray *stateSpec, IOSIntArray *stateSet) {
  ADStateListDrawable_initialize();
  if (stateSet == nil) {
    return (stateSpec == nil || ADStateListDrawable_isWildCardWithIntArray_(stateSpec));
  }
  int32_t stateSpecSize = ((IOSIntArray *) nil_chk(stateSpec))->size_;
  int32_t stateSetSize = stateSet->size_;
  for (int32_t i = 0; i < stateSpecSize; i++) {
    int32_t stateSpecState = IOSIntArray_Get(stateSpec, i);
    if (stateSpecState == 0) {
      return true;
    }
    bool mustMatch;
    if (stateSpecState > 0) {
      mustMatch = true;
    }
    else {
      mustMatch = false;
      stateSpecState = -stateSpecState;
    }
    bool found = false;
    for (int32_t j = 0; j < stateSetSize; j++) {
      int32_t state = IOSIntArray_Get(stateSet, j);
      if (state == 0) {
        if (mustMatch) {
          return false;
        }
        else {
          break;
        }
      }
      if (state == stateSpecState) {
        if (mustMatch) {
          found = true;
          break;
        }
        else {
          return false;
        }
      }
    }
    if (mustMatch && !found) {
      return false;
    }
  }
  return true;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADStateListDrawable)

J2OBJC_NAME_MAPPING(ADStateListDrawable, "r.android.graphics.drawable", "AD")
