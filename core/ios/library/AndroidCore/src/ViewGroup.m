//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroid\src\main\java\r\android\view\ViewGroup.java
//

#define J2OBJC_IMPORTED_BY_JAVA_IMPLEMENTATION 1




#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "LayoutTransition.h"
#include "Rect.h"
#include "RenderNode.h"
#include "View.h"
#include "ViewGroup.h"
#include "ViewParent.h"
#include "java/lang/Boolean.h"
#include "java/lang/Byte.h"
#include "java/lang/Float.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"
#include "java/util/HashSet.h"
#include "java/util/List.h"




#pragma clang diagnostic error "-Wreturn-type"
#pragma clang diagnostic ignored "-Wswitch"


@interface ADViewGroup () {
 @public
  ADView *mFocused_;
  ADView *mDefaultFocus_;
  ADViewGroup_DragEvent *mCurrentDragStartEvent_;
  bool mIsInterestedInDrag_;
  JavaUtilHashSet *mChildrenInterestedInDrag_;
  int64_t mLastTouchDownTime_;
  int32_t mLastTouchDownIndex_;
  bool mHoveredSelf_;
  bool mTooltipHoveredSelf_;
  int32_t mLayoutMode_;
  int32_t mChildrenCount_;
  bool mLayoutCalledWhileSuppressed_;
  ADLayoutTransition *mTransition_;
  JavaUtilArrayList *mTransitioningViews_;
  JavaUtilArrayList *mVisibilityChangingChildren_;
  int32_t mChildCountWithTransientState_;
  int32_t mNestedScrollAxes_;
  id<JavaUtilList> mTransientIndices_;
  id<JavaUtilList> mTransientViews_;
  id<ADLayoutTransition_TransitionListener> mLayoutTransitionListener_;
  IOSObjectArray *mChildren_;
}

- (void)addViewInnerWithADView:(ADView *)child
                       withInt:(int32_t)index
  withADViewGroup_LayoutParams:(ADViewGroup_LayoutParams *)params
                   withBoolean:(bool)preventRequestLayout;

- (void)addInArrayWithADView:(ADView *)child
                     withInt:(int32_t)index;

- (void)removeFromArrayWithInt:(int32_t)index;

- (void)removeFromArrayWithInt:(int32_t)start
                       withInt:(int32_t)count;

- (bool)removeViewInternalWithADView:(ADView *)view;

- (void)removeViewInternalWithInt:(int32_t)index
                       withADView:(ADView *)view;

- (bool)hasBooleanFlagWithInt:(int32_t)flag;

- (void)setBooleanFlagWithInt:(int32_t)flag
                  withBoolean:(bool)value;

- (void)setLayoutModeWithInt:(int32_t)layoutMode
                 withBoolean:(bool)explicitly;

- (void)addDisappearingViewWithADView:(ADView *)v;

- (void)requestChildFocusWithADView:(ADView *)child
                             withId:(id)findFocus;

- (void)childHasTransientStateChangedWithADView:(ADView *)child
                                    withBoolean:(bool)b;

- (void)notifyGlobalFocusClearedWithId:(id)viewGroup;

- (bool)rootViewRequestFocus;

- (void)clearChildFocusWithADView:(ADView *)view;

- (void)cancelHoverTargetWithADView:(ADView *)view;

- (void)cancelTouchTargetWithADView:(ADView *)view;

- (void)touchAccessibilityNodeProviderIfNeededWithADView:(ADView *)child;

- (void)setDefaultFocusWithADView:(ADView *)child;

- (void)notifyChildOfDragStartWithADView:(ADView *)child;

- (void)dispatchVisibilityAggregatedWithBoolean:(bool)b;

- (void)clearFocusedInClusterWithADView:(ADView *)view;

- (void)decrementChildUnhandledKeyListeners;

- (void)clearDefaultFocusWithADView:(ADView *)view;

@end

J2OBJC_FIELD_SETTER(ADViewGroup, mFocused_, ADView *)
J2OBJC_FIELD_SETTER(ADViewGroup, mDefaultFocus_, ADView *)
J2OBJC_FIELD_SETTER(ADViewGroup, mCurrentDragStartEvent_, ADViewGroup_DragEvent *)
J2OBJC_FIELD_SETTER(ADViewGroup, mChildrenInterestedInDrag_, JavaUtilHashSet *)
J2OBJC_FIELD_SETTER(ADViewGroup, mTransition_, ADLayoutTransition *)
J2OBJC_FIELD_SETTER(ADViewGroup, mTransitioningViews_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(ADViewGroup, mVisibilityChangingChildren_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(ADViewGroup, mTransientIndices_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(ADViewGroup, mTransientViews_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(ADViewGroup, mLayoutTransitionListener_, id<ADLayoutTransition_TransitionListener>)
J2OBJC_FIELD_SETTER(ADViewGroup, mChildren_, IOSObjectArray *)

inline bool ADViewGroup_get_DBG(void);
#define ADViewGroup_DBG false
J2OBJC_STATIC_FIELD_CONSTANT(ADViewGroup, DBG, bool)

inline int32_t ADViewGroup_get_FLAG_CLIP_TO_PADDING(void);
#define ADViewGroup_FLAG_CLIP_TO_PADDING 2
J2OBJC_STATIC_FIELD_CONSTANT(ADViewGroup, FLAG_CLIP_TO_PADDING, int32_t)

inline int32_t ADViewGroup_get_FLAG_RUN_ANIMATION(void);
#define ADViewGroup_FLAG_RUN_ANIMATION 8
J2OBJC_STATIC_FIELD_CONSTANT(ADViewGroup, FLAG_RUN_ANIMATION, int32_t)

inline int32_t ADViewGroup_get_FLAG_PADDING_NOT_NULL(void);
#define ADViewGroup_FLAG_PADDING_NOT_NULL 32
J2OBJC_STATIC_FIELD_CONSTANT(ADViewGroup, FLAG_PADDING_NOT_NULL, int32_t)

inline int32_t ADViewGroup_get_FLAG_ANIMATION_CACHE(void);
#define ADViewGroup_FLAG_ANIMATION_CACHE 64
J2OBJC_STATIC_FIELD_CONSTANT(ADViewGroup, FLAG_ANIMATION_CACHE, int32_t)

inline int32_t ADViewGroup_get_FLAG_NOTIFY_ANIMATION_LISTENER(void);
#define ADViewGroup_FLAG_NOTIFY_ANIMATION_LISTENER 512
J2OBJC_STATIC_FIELD_CONSTANT(ADViewGroup, FLAG_NOTIFY_ANIMATION_LISTENER, int32_t)

inline int32_t ADViewGroup_get_FLAG_ADD_STATES_FROM_CHILDREN(void);
#define ADViewGroup_FLAG_ADD_STATES_FROM_CHILDREN 8192
J2OBJC_STATIC_FIELD_CONSTANT(ADViewGroup, FLAG_ADD_STATES_FROM_CHILDREN, int32_t)

inline int32_t ADViewGroup_get_FLAG_ALWAYS_DRAWN_WITH_CACHE(void);
#define ADViewGroup_FLAG_ALWAYS_DRAWN_WITH_CACHE 16384
J2OBJC_STATIC_FIELD_CONSTANT(ADViewGroup, FLAG_ALWAYS_DRAWN_WITH_CACHE, int32_t)

inline int32_t ADViewGroup_get_FLAG_CHILDREN_DRAWN_WITH_CACHE(void);
#define ADViewGroup_FLAG_CHILDREN_DRAWN_WITH_CACHE 32768
J2OBJC_STATIC_FIELD_CONSTANT(ADViewGroup, FLAG_CHILDREN_DRAWN_WITH_CACHE, int32_t)

inline int32_t ADViewGroup_get_FLAG_NOTIFY_CHILDREN_ON_DRAWABLE_STATE_CHANGE(void);
#define ADViewGroup_FLAG_NOTIFY_CHILDREN_ON_DRAWABLE_STATE_CHANGE 65536
J2OBJC_STATIC_FIELD_CONSTANT(ADViewGroup, FLAG_NOTIFY_CHILDREN_ON_DRAWABLE_STATE_CHANGE, int32_t)

inline int32_t ADViewGroup_get_FLAG_MASK_FOCUSABILITY(void);
#define ADViewGroup_FLAG_MASK_FOCUSABILITY 393216
J2OBJC_STATIC_FIELD_CONSTANT(ADViewGroup, FLAG_MASK_FOCUSABILITY, int32_t)

inline int32_t ADViewGroup_get_FLAG_SPLIT_MOTION_EVENTS(void);
#define ADViewGroup_FLAG_SPLIT_MOTION_EVENTS 2097152
J2OBJC_STATIC_FIELD_CONSTANT(ADViewGroup, FLAG_SPLIT_MOTION_EVENTS, int32_t)

inline int32_t ADViewGroup_get_FLAG_PREVENT_DISPATCH_ATTACHED_TO_WINDOW(void);
#define ADViewGroup_FLAG_PREVENT_DISPATCH_ATTACHED_TO_WINDOW 4194304
J2OBJC_STATIC_FIELD_CONSTANT(ADViewGroup, FLAG_PREVENT_DISPATCH_ATTACHED_TO_WINDOW, int32_t)

inline int32_t ADViewGroup_get_FLAG_LAYOUT_MODE_WAS_EXPLICITLY_SET(void);
#define ADViewGroup_FLAG_LAYOUT_MODE_WAS_EXPLICITLY_SET 8388608
J2OBJC_STATIC_FIELD_CONSTANT(ADViewGroup, FLAG_LAYOUT_MODE_WAS_EXPLICITLY_SET, int32_t)

inline int32_t ADViewGroup_get_FLAG_START_ACTION_MODE_FOR_CHILD_IS_TYPED(void);
#define ADViewGroup_FLAG_START_ACTION_MODE_FOR_CHILD_IS_TYPED 134217728
J2OBJC_STATIC_FIELD_CONSTANT(ADViewGroup, FLAG_START_ACTION_MODE_FOR_CHILD_IS_TYPED, int32_t)

inline int32_t ADViewGroup_get_FLAG_START_ACTION_MODE_FOR_CHILD_IS_NOT_TYPED(void);
#define ADViewGroup_FLAG_START_ACTION_MODE_FOR_CHILD_IS_NOT_TYPED 268435456
J2OBJC_STATIC_FIELD_CONSTANT(ADViewGroup, FLAG_START_ACTION_MODE_FOR_CHILD_IS_NOT_TYPED, int32_t)

inline int32_t ADViewGroup_get_FLAG_SHOW_CONTEXT_MENU_WITH_COORDS(void);
#define ADViewGroup_FLAG_SHOW_CONTEXT_MENU_WITH_COORDS 536870912
J2OBJC_STATIC_FIELD_CONSTANT(ADViewGroup, FLAG_SHOW_CONTEXT_MENU_WITH_COORDS, int32_t)

inline int32_t ADViewGroup_get_LAYOUT_MODE_UNDEFINED(void);
#define ADViewGroup_LAYOUT_MODE_UNDEFINED -1
J2OBJC_STATIC_FIELD_CONSTANT(ADViewGroup, LAYOUT_MODE_UNDEFINED, int32_t)

inline int32_t ADViewGroup_get_CHILD_LEFT_INDEX(void);
#define ADViewGroup_CHILD_LEFT_INDEX 0
J2OBJC_STATIC_FIELD_CONSTANT(ADViewGroup, CHILD_LEFT_INDEX, int32_t)

inline int32_t ADViewGroup_get_CHILD_TOP_INDEX(void);
#define ADViewGroup_CHILD_TOP_INDEX 1
J2OBJC_STATIC_FIELD_CONSTANT(ADViewGroup, CHILD_TOP_INDEX, int32_t)

inline int32_t ADViewGroup_get_ARRAY_INITIAL_CAPACITY(void);
#define ADViewGroup_ARRAY_INITIAL_CAPACITY 12
J2OBJC_STATIC_FIELD_CONSTANT(ADViewGroup, ARRAY_INITIAL_CAPACITY, int32_t)

inline int32_t ADViewGroup_get_ARRAY_CAPACITY_INCREMENT(void);
#define ADViewGroup_ARRAY_CAPACITY_INCREMENT 12
J2OBJC_STATIC_FIELD_CONSTANT(ADViewGroup, ARRAY_CAPACITY_INCREMENT, int32_t)

__attribute__((unused)) static void ADViewGroup_addViewInnerWithADView_withInt_withADViewGroup_LayoutParams_withBoolean_(ADViewGroup *self, ADView *child, int32_t index, ADViewGroup_LayoutParams *params, bool preventRequestLayout);

__attribute__((unused)) static void ADViewGroup_addInArrayWithADView_withInt_(ADViewGroup *self, ADView *child, int32_t index);

__attribute__((unused)) static void ADViewGroup_removeFromArrayWithInt_(ADViewGroup *self, int32_t index);

__attribute__((unused)) static void ADViewGroup_removeFromArrayWithInt_withInt_(ADViewGroup *self, int32_t start, int32_t count);

__attribute__((unused)) static bool ADViewGroup_removeViewInternalWithADView_(ADViewGroup *self, ADView *view);

__attribute__((unused)) static void ADViewGroup_removeViewInternalWithInt_withADView_(ADViewGroup *self, int32_t index, ADView *view);

__attribute__((unused)) static bool ADViewGroup_hasBooleanFlagWithInt_(ADViewGroup *self, int32_t flag);

__attribute__((unused)) static void ADViewGroup_setBooleanFlagWithInt_withBoolean_(ADViewGroup *self, int32_t flag, bool value);

__attribute__((unused)) static void ADViewGroup_setLayoutModeWithInt_withBoolean_(ADViewGroup *self, int32_t layoutMode, bool explicitly);

__attribute__((unused)) static void ADViewGroup_addDisappearingViewWithADView_(ADViewGroup *self, ADView *v);

__attribute__((unused)) static void ADViewGroup_requestChildFocusWithADView_withId_(ADViewGroup *self, ADView *child, id findFocus);

__attribute__((unused)) static void ADViewGroup_childHasTransientStateChangedWithADView_withBoolean_(ADViewGroup *self, ADView *child, bool b);

__attribute__((unused)) static void ADViewGroup_notifyGlobalFocusClearedWithId_(ADViewGroup *self, id viewGroup);

__attribute__((unused)) static bool ADViewGroup_rootViewRequestFocus(ADViewGroup *self);

__attribute__((unused)) static void ADViewGroup_clearChildFocusWithADView_(ADViewGroup *self, ADView *view);

__attribute__((unused)) static void ADViewGroup_cancelHoverTargetWithADView_(ADViewGroup *self, ADView *view);

__attribute__((unused)) static void ADViewGroup_cancelTouchTargetWithADView_(ADViewGroup *self, ADView *view);

__attribute__((unused)) static void ADViewGroup_touchAccessibilityNodeProviderIfNeededWithADView_(ADViewGroup *self, ADView *child);

__attribute__((unused)) static void ADViewGroup_setDefaultFocusWithADView_(ADViewGroup *self, ADView *child);

__attribute__((unused)) static void ADViewGroup_notifyChildOfDragStartWithADView_(ADViewGroup *self, ADView *child);

__attribute__((unused)) static void ADViewGroup_dispatchVisibilityAggregatedWithBoolean_(ADViewGroup *self, bool b);

__attribute__((unused)) static void ADViewGroup_clearFocusedInClusterWithADView_(ADViewGroup *self, ADView *view);

__attribute__((unused)) static void ADViewGroup_decrementChildUnhandledKeyListeners(ADViewGroup *self);

__attribute__((unused)) static void ADViewGroup_clearDefaultFocusWithADView_(ADViewGroup *self, ADView *view);

@interface ADViewGroup_OnHierarchyChangeListener : NSObject

@end

@interface ADViewGroup_1 : NSObject < ADLayoutTransition_TransitionListener > {
 @public
  ADViewGroup *this$0_;
}

- (instancetype)initWithADViewGroup:(ADViewGroup *)outer$;

- (void)startTransitionWithADLayoutTransition:(ADLayoutTransition *)transition
                              withADViewGroup:(ADViewGroup *)container
                                   withADView:(ADView *)view
                                      withInt:(int32_t)transitionType;

- (void)endTransitionWithADLayoutTransition:(ADLayoutTransition *)transition
                            withADViewGroup:(ADViewGroup *)container
                                 withADView:(ADView *)view
                                    withInt:(int32_t)transitionType;

@end

J2OBJC_EMPTY_STATIC_INIT(ADViewGroup_1)

__attribute__((unused)) static void ADViewGroup_1_initWithADViewGroup_(ADViewGroup_1 *self, ADViewGroup *outer$);

__attribute__((unused)) static ADViewGroup_1 *new_ADViewGroup_1_initWithADViewGroup_(ADViewGroup *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static ADViewGroup_1 *create_ADViewGroup_1_initWithADViewGroup_(ADViewGroup *outer$);


@interface ADViewGroup_MarginLayoutParams () {
 @public
  int32_t startMargin_;
  int32_t endMargin_;
}

- (void)doResolveMargins;

@end

inline int32_t ADViewGroup_MarginLayoutParams_get_LAYOUT_DIRECTION_MASK(void);
#define ADViewGroup_MarginLayoutParams_LAYOUT_DIRECTION_MASK 3
J2OBJC_STATIC_FIELD_CONSTANT(ADViewGroup_MarginLayoutParams, LAYOUT_DIRECTION_MASK, int32_t)

inline int32_t ADViewGroup_MarginLayoutParams_get_LEFT_MARGIN_UNDEFINED_MASK(void);
#define ADViewGroup_MarginLayoutParams_LEFT_MARGIN_UNDEFINED_MASK 4
J2OBJC_STATIC_FIELD_CONSTANT(ADViewGroup_MarginLayoutParams, LEFT_MARGIN_UNDEFINED_MASK, int32_t)

inline int32_t ADViewGroup_MarginLayoutParams_get_RIGHT_MARGIN_UNDEFINED_MASK(void);
#define ADViewGroup_MarginLayoutParams_RIGHT_MARGIN_UNDEFINED_MASK 8
J2OBJC_STATIC_FIELD_CONSTANT(ADViewGroup_MarginLayoutParams, RIGHT_MARGIN_UNDEFINED_MASK, int32_t)

inline int32_t ADViewGroup_MarginLayoutParams_get_RTL_COMPATIBILITY_MODE_MASK(void);
#define ADViewGroup_MarginLayoutParams_RTL_COMPATIBILITY_MODE_MASK 16
J2OBJC_STATIC_FIELD_CONSTANT(ADViewGroup_MarginLayoutParams, RTL_COMPATIBILITY_MODE_MASK, int32_t)

inline int32_t ADViewGroup_MarginLayoutParams_get_NEED_RESOLUTION_MASK(void);
#define ADViewGroup_MarginLayoutParams_NEED_RESOLUTION_MASK 32
J2OBJC_STATIC_FIELD_CONSTANT(ADViewGroup_MarginLayoutParams, NEED_RESOLUTION_MASK, int32_t)

inline int32_t ADViewGroup_MarginLayoutParams_get_DEFAULT_MARGIN_RESOLVED(void);
#define ADViewGroup_MarginLayoutParams_DEFAULT_MARGIN_RESOLVED 0
J2OBJC_STATIC_FIELD_CONSTANT(ADViewGroup_MarginLayoutParams, DEFAULT_MARGIN_RESOLVED, int32_t)

inline int32_t ADViewGroup_MarginLayoutParams_get_UNDEFINED_MARGIN(void);
#define ADViewGroup_MarginLayoutParams_UNDEFINED_MARGIN ((int32_t) 0x80000000)
J2OBJC_STATIC_FIELD_CONSTANT(ADViewGroup_MarginLayoutParams, UNDEFINED_MARGIN, int32_t)

__attribute__((unused)) static void ADViewGroup_MarginLayoutParams_doResolveMargins(ADViewGroup_MarginLayoutParams *self);

int32_t ADViewGroup_LAYOUT_MODE_DEFAULT = 0;

@implementation ADViewGroup

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADViewGroup_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)onChildVisibilityChangedWithADView:(ADView *)child
                                   withInt:(int32_t)oldVisibility
                                   withInt:(int32_t)newVisibility {
  if (mTransition_ != nil) {
    if (newVisibility == ADView_VISIBLE) {
      [mTransition_ showChildWithADViewGroup:self withADView:child withInt:oldVisibility];
    }
    else {
      [mTransition_ hideChildWithADViewGroup:self withADView:child withInt:newVisibility];
      if (mTransitioningViews_ != nil && [mTransitioningViews_ containsWithId:child]) {
        if (mVisibilityChangingChildren_ == nil) {
          JreStrongAssignAndConsume(&mVisibilityChangingChildren_, new_JavaUtilArrayList_init());
        }
        [mVisibilityChangingChildren_ addWithId:child];
        ADViewGroup_addDisappearingViewWithADView_(self, child);
      }
    }
  }
  if (newVisibility == ADView_VISIBLE && mCurrentDragStartEvent_ != nil) {
    if (![((JavaUtilHashSet *) nil_chk(mChildrenInterestedInDrag_)) containsWithId:child]) {
      ADViewGroup_notifyChildOfDragStartWithADView_(self, child);
    }
  }
}

- (void)dispatchAttachedToWindowWithADView_AttachInfo:(ADView_AttachInfo *)info
                                              withInt:(int32_t)visibility {
  mGroupFlags_ |= ADViewGroup_FLAG_PREVENT_DISPATCH_ATTACHED_TO_WINDOW;
  [super dispatchAttachedToWindowWithADView_AttachInfo:info withInt:visibility];
  mGroupFlags_ &= ~ADViewGroup_FLAG_PREVENT_DISPATCH_ATTACHED_TO_WINDOW;
  int32_t count = mChildrenCount_;
  IOSObjectArray *children = mChildren_;
  for (int32_t i = 0; i < count; i++) {
    ADView *child = IOSObjectArray_Get(nil_chk(children), i);
    [((ADView *) nil_chk(child)) dispatchAttachedToWindowWithADView_AttachInfo:info withInt:[self combineVisibilityWithInt:visibility withInt:[child getVisibility]]];
  }
  int32_t transientCount = mTransientIndices_ == nil ? 0 : [mTransientIndices_ size];
  for (int32_t i = 0; i < transientCount; ++i) {
    ADView *view = JreRetainedLocalValue([((id<JavaUtilList>) nil_chk(mTransientViews_)) getWithInt:i]);
    [((ADView *) nil_chk(view)) dispatchAttachedToWindowWithADView_AttachInfo:info withInt:[self combineVisibilityWithInt:visibility withInt:[view getVisibility]]];
  }
}

- (bool)isLayoutModeOptical {
  return mLayoutMode_ == ADViewGroup_LAYOUT_MODE_OPTICAL_BOUNDS;
}

- (void)setClipToPaddingWithBoolean:(bool)clipToPadding {
  if (ADViewGroup_hasBooleanFlagWithInt_(self, ADViewGroup_FLAG_CLIP_TO_PADDING) != clipToPadding) {
    ADViewGroup_setBooleanFlagWithInt_withBoolean_(self, ADViewGroup_FLAG_CLIP_TO_PADDING, clipToPadding);
    [self invalidateWithBoolean:true];
  }
}

- (bool)getClipToPadding {
  return ADViewGroup_hasBooleanFlagWithInt_(self, ADViewGroup_FLAG_CLIP_TO_PADDING);
}

- (void)dispatchSetPressedWithBoolean:(bool)pressed {
  IOSObjectArray *children = mChildren_;
  int32_t count = mChildrenCount_;
  for (int32_t i = 0; i < count; i++) {
    ADView *child = IOSObjectArray_Get(nil_chk(children), i);
    if (!pressed || (![((ADView *) nil_chk(child)) isClickable] && ![child isLongClickable])) {
      [((ADView *) nil_chk(child)) setPressedWithBoolean:pressed];
    }
  }
}

- (ADView *)findViewTraversalWithInt:(int32_t)id_ {
  if (id_ == mID_) {
    return self;
  }
  IOSObjectArray *where = mChildren_;
  int32_t len = mChildrenCount_;
  for (int32_t i = 0; i < len; i++) {
    ADView *v = IOSObjectArray_Get(nil_chk(where), i);
    if ((((ADView *) nil_chk(v))->mPrivateFlags_ & ADView_PFLAG_IS_ROOT_NAMESPACE) == 0) {
      v = [v findViewByIdWithInt:id_];
      if (v != nil) {
        return v;
      }
    }
  }
  return nil;
}

- (void)addViewWithADView:(ADView *)child {
  [self addViewWithADView:child withInt:-1];
}

- (void)addViewWithADView:(ADView *)child
                  withInt:(int32_t)index {
  if (child == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Cannot add a null child view to a ViewGroup");
  }
  ADViewGroup_LayoutParams *params = JreRetainedLocalValue([child getLayoutParams]);
  if (params == nil) {
    params = [self generateDefaultLayoutParams];
    if (params == nil) {
      @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"generateDefaultLayoutParams() cannot return null");
    }
  }
  [self addViewWithADView:child withInt:index withADViewGroup_LayoutParams:params];
}

- (void)addViewWithADView:(ADView *)child
                  withInt:(int32_t)width
                  withInt:(int32_t)height {
  ADViewGroup_LayoutParams *params = [self generateDefaultLayoutParams];
  ((ADViewGroup_LayoutParams *) nil_chk(params))->width_ = width;
  params->height_ = height;
  [self addViewWithADView:child withInt:-1 withADViewGroup_LayoutParams:params];
}

- (void)addViewWithADView:(ADView *)child
withADViewGroup_LayoutParams:(ADViewGroup_LayoutParams *)params {
  [self addViewWithADView:child withInt:-1 withADViewGroup_LayoutParams:params];
}

- (void)addViewWithADView:(ADView *)child
                  withInt:(int32_t)index
withADViewGroup_LayoutParams:(ADViewGroup_LayoutParams *)params {
  if (child == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Cannot add a null child view to a ViewGroup");
  }
  [self requestLayout];
  [self invalidateWithBoolean:true];
  ADViewGroup_addViewInnerWithADView_withInt_withADViewGroup_LayoutParams_withBoolean_(self, child, index, params, false);
}

- (bool)checkLayoutParamsWithADViewGroup_LayoutParams:(ADViewGroup_LayoutParams *)p {
  return p != nil;
}

- (void)setOnHierarchyChangeListenerWithADViewGroup_OnHierarchyChangeListener:(id<ADViewGroup_OnHierarchyChangeListener>)listener {
  JreStrongAssign(&mOnHierarchyChangeListener_, listener);
}

- (void)dispatchViewAddedWithADView:(ADView *)child {
  [self onViewAddedWithADView:child];
  if (mOnHierarchyChangeListener_ != nil) {
    [mOnHierarchyChangeListener_ onChildViewAddedWithADView:self withADView:child];
  }
}

- (void)onViewAddedWithADView:(ADView *)child {
}

- (void)dispatchViewRemovedWithADView:(ADView *)child {
  [self onViewRemovedWithADView:child];
  if (mOnHierarchyChangeListener_ != nil) {
    [mOnHierarchyChangeListener_ onChildViewRemovedWithADView:self withADView:child];
  }
}

- (void)onViewRemovedWithADView:(ADView *)child {
}

- (bool)addViewInLayoutWithADView:(ADView *)child
                          withInt:(int32_t)index
     withADViewGroup_LayoutParams:(ADViewGroup_LayoutParams *)params {
  return [self addViewInLayoutWithADView:child withInt:index withADViewGroup_LayoutParams:params withBoolean:false];
}

- (bool)addViewInLayoutWithADView:(ADView *)child
                          withInt:(int32_t)index
     withADViewGroup_LayoutParams:(ADViewGroup_LayoutParams *)params
                      withBoolean:(bool)preventRequestLayout {
  if (child == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Cannot add a null child view to a ViewGroup");
  }
  child->mParent_ = nil;
  ADViewGroup_addViewInnerWithADView_withInt_withADViewGroup_LayoutParams_withBoolean_(self, child, index, params, preventRequestLayout);
  child->mPrivateFlags_ = (child->mPrivateFlags_ & ~ADView_PFLAG_DIRTY_MASK) | ADView_PFLAG_DRAWN;
  return true;
}

- (void)cleanupLayoutStateWithADView:(ADView *)child {
  ((ADView *) nil_chk(child))->mPrivateFlags_ &= ~ADView_PFLAG_FORCE_LAYOUT;
}

- (void)addViewInnerWithADView:(ADView *)child
                       withInt:(int32_t)index
  withADViewGroup_LayoutParams:(ADViewGroup_LayoutParams *)params
                   withBoolean:(bool)preventRequestLayout {
  ADViewGroup_addViewInnerWithADView_withInt_withADViewGroup_LayoutParams_withBoolean_(self, child, index, params, preventRequestLayout);
}

- (void)addInArrayWithADView:(ADView *)child
                     withInt:(int32_t)index {
  ADViewGroup_addInArrayWithADView_withInt_(self, child, index);
}

- (void)removeFromArrayWithInt:(int32_t)index {
  ADViewGroup_removeFromArrayWithInt_(self, index);
}

- (void)removeFromArrayWithInt:(int32_t)start
                       withInt:(int32_t)count {
  ADViewGroup_removeFromArrayWithInt_withInt_(self, start, count);
}

- (void)removeViewWithADView:(ADView *)view {
  if (ADViewGroup_removeViewInternalWithADView_(self, view)) {
    [self requestLayout];
    [self invalidateWithBoolean:true];
  }
}

- (void)removeViewAtWithInt:(int32_t)index {
  ADViewGroup_removeViewInternalWithInt_withADView_(self, index, [self getChildAtWithInt:index]);
  [self requestLayout];
  [self invalidateWithBoolean:true];
}

- (bool)removeViewInternalWithADView:(ADView *)view {
  return ADViewGroup_removeViewInternalWithADView_(self, view);
}

- (void)removeViewInternalWithInt:(int32_t)index
                       withADView:(ADView *)view {
  ADViewGroup_removeViewInternalWithInt_withADView_(self, index, view);
}

- (void)setLayoutTransitionWithADLayoutTransition:(ADLayoutTransition *)transition {
  if (mTransition_ != nil) {
    ADLayoutTransition *previousTransition = JreRetainedLocalValue(mTransition_);
    [previousTransition cancel];
    [previousTransition removeTransitionListenerWithADLayoutTransition_TransitionListener:mLayoutTransitionListener_];
  }
  JreStrongAssign(&mTransition_, transition);
  if (mTransition_ != nil) {
    [mTransition_ addTransitionListenerWithADLayoutTransition_TransitionListener:mLayoutTransitionListener_];
  }
}

- (ADLayoutTransition *)getLayoutTransition {
  return mTransition_;
}

- (void)removeAllViews {
  [self removeAllViewsInLayout];
  [self requestLayout];
  [self invalidateWithBoolean:true];
}

- (void)removeAllViewsInLayout {
  int32_t count = mChildrenCount_;
  if (count <= 0) {
    return;
  }
  IOSObjectArray *children = mChildren_;
  mChildrenCount_ = 0;
  ADView *focused = mFocused_;
  bool detach = mAttachInfo_ != nil;
  bool clearChildFocus = false;
  [self needGlobalAttributesUpdateWithBoolean:false];
  for (int32_t i = count - 1; i >= 0; i--) {
    ADView *view = IOSObjectArray_Get(nil_chk(children), i);
    if (mTransition_ != nil) {
      [mTransition_ removeChildWithADViewGroup:self withADView:view];
    }
    if (JreObjectEqualsEquals(view, focused)) {
      [((ADView *) nil_chk(view)) unFocusWithId:nil];
      clearChildFocus = true;
    }
    [((ADView *) nil_chk(view)) clearAccessibilityFocus];
    ADViewGroup_cancelTouchTargetWithADView_(self, view);
    ADViewGroup_cancelHoverTargetWithADView_(self, view);
    if ([view getAnimation] != nil || (mTransitioningViews_ != nil && [mTransitioningViews_ containsWithId:view])) {
      ADViewGroup_addDisappearingViewWithADView_(self, view);
    }
    else if (detach) {
      [view dispatchDetachedFromWindow];
    }
    if ([view hasTransientState]) {
      ADViewGroup_childHasTransientStateChangedWithADView_withBoolean_(self, view, false);
    }
    [self dispatchViewRemovedWithADView:view];
    view->mParent_ = nil;
    IOSObjectArray_Set(children, i, nil);
  }
  if (mDefaultFocus_ != nil) {
    ADViewGroup_clearDefaultFocusWithADView_(self, mDefaultFocus_);
  }
  if (mFocusedInCluster_ != nil) {
    ADViewGroup_clearFocusedInClusterWithADView_(self, mFocusedInCluster_);
  }
  if (clearChildFocus) {
    ADViewGroup_clearChildFocusWithADView_(self, focused);
    if (!ADViewGroup_rootViewRequestFocus(self)) {
      ADViewGroup_notifyGlobalFocusClearedWithId_(self, focused);
    }
  }
}

- (void)attachViewToParentWithADView:(ADView *)child
                             withInt:(int32_t)index
        withADViewGroup_LayoutParams:(ADViewGroup_LayoutParams *)params {
  JreStrongAssign(&((ADView *) nil_chk(child))->mLayoutParams_, params);
  if (index < 0) {
    index = mChildrenCount_;
  }
  ADViewGroup_addInArrayWithADView_withInt_(self, child, index);
  child->mParent_ = self;
  child->mPrivateFlags_ = (child->mPrivateFlags_ & ~ADView_PFLAG_DIRTY_MASK & ~ADView_PFLAG_DRAWING_CACHE_VALID) | ADView_PFLAG_DRAWN | ADView_PFLAG_INVALIDATED;
  self->mPrivateFlags_ |= ADView_PFLAG_INVALIDATED;
  if ([child hasFocus]) {
    ADViewGroup_requestChildFocusWithADView_withId_(self, child, [child findFocus]);
  }
  ADViewGroup_dispatchVisibilityAggregatedWithBoolean_(self, [self isAttachedToWindow] && [self getWindowVisibility] == ADView_VISIBLE && [self isShown]);
  [self notifySubtreeAccessibilityStateChangedIfNeeded];
}

- (void)detachViewFromParentWithADView:(ADView *)child {
  ADViewGroup_removeFromArrayWithInt_(self, [self indexOfChildWithADView:child]);
}

- (void)detachViewFromParentWithInt:(int32_t)index {
  ADViewGroup_removeFromArrayWithInt_(self, index);
}

- (void)detachViewsFromParentWithInt:(int32_t)start
                             withInt:(int32_t)count {
  ADViewGroup_removeFromArrayWithInt_withInt_(self, start, count);
}

- (void)detachAllViewsFromParent {
  int32_t count = mChildrenCount_;
  if (count <= 0) {
    return;
  }
  IOSObjectArray *children = mChildren_;
  mChildrenCount_ = 0;
  for (int32_t i = count - 1; i >= 0; i--) {
    ((ADView *) nil_chk(IOSObjectArray_Get(nil_chk(children), i)))->mParent_ = nil;
    IOSObjectArray_Set(children, i, nil);
  }
}

- (void)offsetChildrenTopAndBottomWithInt:(int32_t)offset {
  int32_t count = mChildrenCount_;
  IOSObjectArray *children = mChildren_;
  bool invalidate = false;
  for (int32_t i = 0; i < count; i++) {
    ADView *v = IOSObjectArray_Get(nil_chk(children), i);
    ((ADView *) nil_chk(v))->mTop_ += offset;
    v->mBottom_ += offset;
    if (v->mRenderNode_ != nil) {
      invalidate = true;
      [v->mRenderNode_ offsetTopAndBottomWithInt:offset];
    }
  }
  if (invalidate) {
    [self invalidateViewPropertyWithBoolean:false withBoolean:false];
  }
  [self notifySubtreeAccessibilityStateChangedIfNeeded];
}

- (bool)hasBooleanFlagWithInt:(int32_t)flag {
  return ADViewGroup_hasBooleanFlagWithInt_(self, flag);
}

- (void)setBooleanFlagWithInt:(int32_t)flag
                  withBoolean:(bool)value {
  ADViewGroup_setBooleanFlagWithInt_withBoolean_(self, flag, value);
}

- (void)setLayoutModeWithInt:(int32_t)layoutMode
                 withBoolean:(bool)explicitly {
  ADViewGroup_setLayoutModeWithInt_withBoolean_(self, layoutMode, explicitly);
}

- (void)invalidateInheritedLayoutModeWithInt:(int32_t)layoutModeOfRoot {
  if (mLayoutMode_ == ADViewGroup_LAYOUT_MODE_UNDEFINED || mLayoutMode_ == layoutModeOfRoot || ADViewGroup_hasBooleanFlagWithInt_(self, ADViewGroup_FLAG_LAYOUT_MODE_WAS_EXPLICITLY_SET)) {
    return;
  }
  ADViewGroup_setLayoutModeWithInt_withBoolean_(self, ADViewGroup_LAYOUT_MODE_UNDEFINED, false);
  for (int32_t i = 0, N = [self getChildCount]; i < N; i++) {
    [((ADView *) nil_chk([self getChildAtWithInt:i])) invalidateInheritedLayoutModeWithInt:layoutModeOfRoot];
  }
}

- (int32_t)getLayoutMode {
  if (mLayoutMode_ == ADViewGroup_LAYOUT_MODE_UNDEFINED) {
    int32_t inheritedLayoutMode = ([mParent_ isKindOfClass:[ADViewGroup class]]) ? [((ADViewGroup *) nil_chk(((ADViewGroup *) cast_chk(mParent_, [ADViewGroup class])))) getLayoutMode] : ADViewGroup_LAYOUT_MODE_DEFAULT;
    ADViewGroup_setLayoutModeWithInt_withBoolean_(self, inheritedLayoutMode, false);
  }
  return mLayoutMode_;
}

- (void)setLayoutModeWithInt:(int32_t)layoutMode {
  if (mLayoutMode_ != layoutMode) {
    [self invalidateInheritedLayoutModeWithInt:layoutMode];
    ADViewGroup_setLayoutModeWithInt_withBoolean_(self, layoutMode, layoutMode != ADViewGroup_LAYOUT_MODE_UNDEFINED);
    [self requestLayout];
  }
}

- (ADViewGroup_LayoutParams *)generateDefaultLayoutParams {
  return create_ADViewGroup_LayoutParams_initWithInt_withInt_(ADViewGroup_LayoutParams_WRAP_CONTENT, ADViewGroup_LayoutParams_WRAP_CONTENT);
}

- (int32_t)indexOfChildWithADView:(ADView *)child {
  int32_t count = mChildrenCount_;
  IOSObjectArray *children = mChildren_;
  for (int32_t i = 0; i < count; i++) {
    if (JreObjectEqualsEquals(IOSObjectArray_Get(nil_chk(children), i), child)) {
      return i;
    }
  }
  return -1;
}

- (int32_t)getChildCount {
  return mChildrenCount_;
}

- (ADView *)getChildAtWithInt:(int32_t)index {
  if (index < 0 || index >= mChildrenCount_) {
    return nil;
  }
  return IOSObjectArray_Get(nil_chk(mChildren_), index);
}

- (void)measureChildrenWithInt:(int32_t)widthMeasureSpec
                       withInt:(int32_t)heightMeasureSpec {
  int32_t size = mChildrenCount_;
  IOSObjectArray *children = mChildren_;
  for (int32_t i = 0; i < size; ++i) {
    ADView *child = IOSObjectArray_Get(nil_chk(children), i);
    if ((((ADView *) nil_chk(child))->mViewFlags_ & ADView_VISIBILITY_MASK) != ADView_GONE) {
      [self measureChildWithADView:child withInt:widthMeasureSpec withInt:heightMeasureSpec];
    }
  }
}

- (void)measureChildWithADView:(ADView *)child
                       withInt:(int32_t)parentWidthMeasureSpec
                       withInt:(int32_t)parentHeightMeasureSpec {
  ADViewGroup_LayoutParams *lp = [((ADView *) nil_chk(child)) getLayoutParams];
  int32_t childWidthMeasureSpec = ADViewGroup_getChildMeasureSpecWithInt_withInt_withInt_(parentWidthMeasureSpec, mPaddingLeft_ + mPaddingRight_, ((ADViewGroup_LayoutParams *) nil_chk(lp))->width_);
  int32_t childHeightMeasureSpec = ADViewGroup_getChildMeasureSpecWithInt_withInt_withInt_(parentHeightMeasureSpec, mPaddingTop_ + mPaddingBottom_, lp->height_);
  [child measureWithInt:childWidthMeasureSpec withInt:childHeightMeasureSpec];
}

- (void)measureChildWithMarginsWithADView:(ADView *)child
                                  withInt:(int32_t)parentWidthMeasureSpec
                                  withInt:(int32_t)widthUsed
                                  withInt:(int32_t)parentHeightMeasureSpec
                                  withInt:(int32_t)heightUsed {
  ADViewGroup_MarginLayoutParams *lp = (ADViewGroup_MarginLayoutParams *) cast_chk([((ADView *) nil_chk(child)) getLayoutParams], [ADViewGroup_MarginLayoutParams class]);
  int32_t childWidthMeasureSpec = ADViewGroup_getChildMeasureSpecWithInt_withInt_withInt_(parentWidthMeasureSpec, mPaddingLeft_ + mPaddingRight_ + ((ADViewGroup_MarginLayoutParams *) nil_chk(lp))->leftMargin_ + lp->rightMargin_ + widthUsed, lp->width_);
  int32_t childHeightMeasureSpec = ADViewGroup_getChildMeasureSpecWithInt_withInt_withInt_(parentHeightMeasureSpec, mPaddingTop_ + mPaddingBottom_ + lp->topMargin_ + lp->bottomMargin_ + heightUsed, lp->height_);
  [child measureWithInt:childWidthMeasureSpec withInt:childHeightMeasureSpec];
}

+ (int32_t)getChildMeasureSpecWithInt:(int32_t)spec
                              withInt:(int32_t)padding
                              withInt:(int32_t)childDimension {
  return ADViewGroup_getChildMeasureSpecWithInt_withInt_withInt_(spec, padding, childDimension);
}

- (void)addDisappearingViewWithADView:(ADView *)v {
  ADViewGroup_addDisappearingViewWithADView_(self, v);
}

- (void)startViewTransitionWithADView:(ADView *)view {
  if (JreObjectEqualsEquals(((ADView *) nil_chk(view))->mParent_, self)) {
    if (mTransitioningViews_ == nil) {
      JreStrongAssignAndConsume(&mTransitioningViews_, new_JavaUtilArrayList_init());
    }
    [mTransitioningViews_ addWithId:view];
  }
}

- (void)endViewTransitionWithADView:(ADView *)view {
  if (mTransitioningViews_ != nil) {
    [mTransitioningViews_ removeWithId:view];
    JavaUtilArrayList *disappearingChildren = mDisappearingChildren_;
    if (disappearingChildren != nil && [disappearingChildren containsWithId:view]) {
      [disappearingChildren removeWithId:view];
      if (mVisibilityChangingChildren_ != nil && [mVisibilityChangingChildren_ containsWithId:view]) {
        [mVisibilityChangingChildren_ removeWithId:view];
      }
      else {
        if (((ADView *) nil_chk(view))->mAttachInfo_ != nil) {
          [view dispatchDetachedFromWindow];
        }
        if (view->mParent_ != nil) {
          view->mParent_ = nil;
        }
      }
      [self invalidate];
    }
  }
}

- (void)drawableStateChanged {
  [super drawableStateChanged];
  if ((mGroupFlags_ & ADViewGroup_FLAG_NOTIFY_CHILDREN_ON_DRAWABLE_STATE_CHANGE) != 0) {
    if ((mGroupFlags_ & ADViewGroup_FLAG_ADD_STATES_FROM_CHILDREN) != 0) {
      @throw create_JavaLangIllegalStateException_initWithNSString_(@"addStateFromChildren cannot be enabled if a child has duplicateParentState set to true");
    }
    IOSObjectArray *children = mChildren_;
    int32_t count = mChildrenCount_;
    for (int32_t i = 0; i < count; i++) {
      ADView *child = IOSObjectArray_Get(nil_chk(children), i);
      if ((((ADView *) nil_chk(child))->mViewFlags_ & ADView_DUPLICATE_PARENT_STATE) != 0) {
        [child refreshDrawableState];
      }
    }
  }
}

- (IOSIntArray *)onCreateDrawableStateWithInt:(int32_t)extraSpace {
  if ((mGroupFlags_ & ADViewGroup_FLAG_ADD_STATES_FROM_CHILDREN) == 0) {
    return [super onCreateDrawableStateWithInt:extraSpace];
  }
  int32_t need = 0;
  int32_t n = [self getChildCount];
  for (int32_t i = 0; i < n; i++) {
    IOSIntArray *childState = [((ADView *) nil_chk([self getChildAtWithInt:i])) getDrawableState];
    if (childState != nil) {
      need += childState->size_;
    }
  }
  IOSIntArray *state = [super onCreateDrawableStateWithInt:extraSpace + need];
  for (int32_t i = 0; i < n; i++) {
    IOSIntArray *childState = [((ADView *) nil_chk([self getChildAtWithInt:i])) getDrawableState];
    if (childState != nil) {
      state = ADView_mergeDrawableStatesWithIntArray_withIntArray_(state, childState);
    }
  }
  return state;
}

- (void)setAddStatesFromChildrenWithBoolean:(bool)addsStates {
  if (addsStates) {
    mGroupFlags_ |= ADViewGroup_FLAG_ADD_STATES_FROM_CHILDREN;
  }
  else {
    mGroupFlags_ &= ~ADViewGroup_FLAG_ADD_STATES_FROM_CHILDREN;
  }
  [self refreshDrawableState];
}

- (bool)addStatesFromChildren {
  return (mGroupFlags_ & ADViewGroup_FLAG_ADD_STATES_FROM_CHILDREN) != 0;
}

- (void)childDrawableStateChangedWithADView:(ADView *)child {
  if ((mGroupFlags_ & ADViewGroup_FLAG_ADD_STATES_FROM_CHILDREN) != 0) {
    [self refreshDrawableState];
  }
}

- (void)requestTransitionStartWithADLayoutTransition:(ADLayoutTransition *)transition {
  ADView_ViewRootImpl *viewAncestor = JreRetainedLocalValue([self getViewRootImpl]);
  if (viewAncestor != nil) {
    [viewAncestor requestTransitionStartWithADLayoutTransition:transition];
  }
}

- (bool)onStartNestedScrollWithADView:(ADView *)child
                           withADView:(ADView *)target
                              withInt:(int32_t)nestedScrollAxes {
  return false;
}

- (void)onNestedScrollAcceptedWithADView:(ADView *)child
                              withADView:(ADView *)target
                                 withInt:(int32_t)axes {
  mNestedScrollAxes_ = axes;
}

- (void)onStopNestedScrollWithADView:(ADView *)child {
  [self stopNestedScroll];
  mNestedScrollAxes_ = 0;
}

- (void)onNestedScrollWithADView:(ADView *)target
                         withInt:(int32_t)dxConsumed
                         withInt:(int32_t)dyConsumed
                         withInt:(int32_t)dxUnconsumed
                         withInt:(int32_t)dyUnconsumed {
  [self dispatchNestedScrollWithInt:dxConsumed withInt:dyConsumed withInt:dxUnconsumed withInt:dyUnconsumed withIntArray:nil];
}

- (void)onNestedPreScrollWithADView:(ADView *)target
                            withInt:(int32_t)dx
                            withInt:(int32_t)dy
                       withIntArray:(IOSIntArray *)consumed {
  [self dispatchNestedPreScrollWithInt:dx withInt:dy withIntArray:consumed withIntArray:nil];
}

- (bool)onNestedFlingWithADView:(ADView *)target
                      withFloat:(float)velocityX
                      withFloat:(float)velocityY
                    withBoolean:(bool)consumed {
  return [self dispatchNestedFlingWithFloat:velocityX withFloat:velocityY withBoolean:consumed];
}

- (bool)onNestedPreFlingWithADView:(ADView *)target
                         withFloat:(float)velocityX
                         withFloat:(float)velocityY {
  return [self dispatchNestedPreFlingWithFloat:velocityX withFloat:velocityY];
}

- (void)onSetLayoutParamsWithADView:(ADView *)child
       withADViewGroup_LayoutParams:(ADViewGroup_LayoutParams *)layoutParams {
  [self requestLayout];
}

- (bool)isViewTransitioningWithADView:(ADView *)view {
  return false;
}

- (ADRect *)getPaddingMaskBounds {
  int32_t flags = mGroupFlags_;
  bool clipToPadding = (flags & ADViewGroup_FLAG_CLIP_TO_PADDING) == ADViewGroup_FLAG_CLIP_TO_PADDING;
  ADRect *rect = create_ADRect_init();
  if (clipToPadding) {
    rect->left_ = mPaddingLeft_;
    rect->top_ = mPaddingTop_;
    rect->right_ = [self getWidth] - mPaddingRight_;
    rect->bottom_ = [self getHeight] - mPaddingBottom_;
  }
  return rect;
}

- (void)bringToFront {
}

- (void)incrementChildUnhandledKeyListeners {
}

- (void)invalidateChildWithADView:(ADView *)child
                       withADRect:(ADRect *)r {
}

- (void)recomputeViewAttributesWithADView:(ADView *)child {
}

- (void)focusableViewAvailableWithADView:(ADView *)v {
}

- (ADViewGroup_LayoutParams *)generateLayoutParamsWithADViewGroup_LayoutParams:(ADViewGroup_LayoutParams *)p {
  return p;
}

- (void)requestChildFocusWithADView:(ADView *)child
                             withId:(id)findFocus {
  ADViewGroup_requestChildFocusWithADView_withId_(self, child, findFocus);
}

- (void)childHasTransientStateChangedWithADView:(ADView *)child
                                    withBoolean:(bool)b {
  ADViewGroup_childHasTransientStateChangedWithADView_withBoolean_(self, child, b);
}

- (void)notifyGlobalFocusClearedWithId:(id)viewGroup {
  ADViewGroup_notifyGlobalFocusClearedWithId_(self, viewGroup);
}

- (bool)rootViewRequestFocus {
  return ADViewGroup_rootViewRequestFocus(self);
}

- (void)clearChildFocusWithADView:(ADView *)view {
  ADViewGroup_clearChildFocusWithADView_(self, view);
}

- (void)cancelHoverTargetWithADView:(ADView *)view {
  ADViewGroup_cancelHoverTargetWithADView_(self, view);
}

- (void)cancelTouchTargetWithADView:(ADView *)view {
  ADViewGroup_cancelTouchTargetWithADView_(self, view);
}

- (void)touchAccessibilityNodeProviderIfNeededWithADView:(ADView *)child {
  ADViewGroup_touchAccessibilityNodeProviderIfNeededWithADView_(self, child);
}

- (void)setDefaultFocusWithADView:(ADView *)child {
  ADViewGroup_setDefaultFocusWithADView_(self, child);
}

- (void)notifyChildOfDragStartWithADView:(ADView *)child {
  ADViewGroup_notifyChildOfDragStartWithADView_(self, child);
}

- (void)dispatchVisibilityAggregatedWithBoolean:(bool)b {
  ADViewGroup_dispatchVisibilityAggregatedWithBoolean_(self, b);
}

- (void)clearFocusedInClusterWithADView:(ADView *)view {
  ADViewGroup_clearFocusedInClusterWithADView_(self, view);
}

- (void)decrementChildUnhandledKeyListeners {
  ADViewGroup_decrementChildUnhandledKeyListeners(self);
}

- (void)clearDefaultFocusWithADView:(ADView *)view {
  ADViewGroup_clearDefaultFocusWithADView_(self, view);
}

- (int32_t)measureHeightOfChildrenWithInt:(int32_t)widthMeasureSpec
                                  withInt:(int32_t)startPosition
                                  withInt:(int32_t)endPosition
                                  withInt:(int32_t)maxHeight
                                  withInt:(int32_t)disallowPartialChildPosition {
  int32_t height = 0;
  int32_t size = mChildrenCount_;
  IOSObjectArray *children = mChildren_;
  for (int32_t i = 0; i < size; ++i) {
    ADView *child = IOSObjectArray_Get(nil_chk(children), i);
    if ((((ADView *) nil_chk(child))->mViewFlags_ & ADView_VISIBILITY_MASK) != ADView_GONE) {
      [self measureChildWithADView:child withInt:widthMeasureSpec withInt:-2];
    }
    height += [child getMeasuredHeight];
  }
  return height;
}

- (void)setRedrawWithBoolean:(bool)flag {
  for (int32_t i = 0; i < [self getChildCount]; i++) {
    ADView *child = [self getChildAtWithInt:i];
    [((ADView *) nil_chk(child)) setMyAttributeWithNSString:@"swtRedraw" withId:JavaLangBoolean_valueOfWithBoolean_(flag)];
  }
}

- (bool)hasChildWithADView:(ADView *)child {
  for (int32_t i = 0; i < [self getChildCount]; i++) {
    ADView *view = JreRetainedLocalValue([self getChildAtWithInt:i]);
    if (JreObjectEqualsEquals(view, child)) {
      return true;
    }
  }
  return false;
}

- (void)dealloc {
  RELEASE_(mDisappearingChildren_);
  RELEASE_(mOnHierarchyChangeListener_);
  RELEASE_(mFocused_);
  RELEASE_(mDefaultFocus_);
  RELEASE_(mFocusedInCluster_);
  RELEASE_(mCurrentDragStartEvent_);
  RELEASE_(mChildrenInterestedInDrag_);
  RELEASE_(mTransition_);
  RELEASE_(mTransitioningViews_);
  RELEASE_(mVisibilityChangingChildren_);
  RELEASE_(mTransientIndices_);
  RELEASE_(mTransientViews_);
  RELEASE_(mLayoutTransitionListener_);
  RELEASE_(mChildren_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 2, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 6, 5, -1, -1, -1, -1 },
    { NULL, "LADView;", 0x4, 7, 8, -1, 9, -1, -1 },
    { NULL, "V", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 14, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, 15, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 18, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 19, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 21, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 22, 11, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, 23, 14, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, 23, 24, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 25, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 26, 24, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 27, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 28, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 28, 29, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 30, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 31, 8, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 32, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 32, 33, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 34, 35, -1, -1, -1, -1 },
    { NULL, "LADLayoutTransition;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 36, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 37, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 37, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 38, 29, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 39, 8, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 40, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 41, 42, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 43, 42, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 44, 8, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 43, 8, -1, -1, -1, -1 },
    { NULL, "LADViewGroup_LayoutParams;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 45, 11, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADView;", 0x1, 46, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 47, 29, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 48, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 49, 50, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 51, 52, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 53, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 54, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 55, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "[I", 0x4, 56, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 57, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 58, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 59, 35, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 60, 61, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 62, 61, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 63, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 64, 50, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 65, 66, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 67, 68, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 69, 70, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 71, 13, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 72, 11, -1, -1, -1, -1 },
    { NULL, "LADRect;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 73, 74, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 75, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 76, 11, -1, -1, -1, -1 },
    { NULL, "LADViewGroup_LayoutParams;", 0x4, 77, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 78, 79, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 80, 81, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 82, 83, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 84, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 85, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 86, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 87, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 88, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 89, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 90, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 91, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 92, 11, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 93, 94, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 95, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 96, 11, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(onChildVisibilityChangedWithADView:withInt:withInt:);
  methods[2].selector = @selector(dispatchAttachedToWindowWithADView_AttachInfo:withInt:);
  methods[3].selector = @selector(isLayoutModeOptical);
  methods[4].selector = @selector(setClipToPaddingWithBoolean:);
  methods[5].selector = @selector(getClipToPadding);
  methods[6].selector = @selector(dispatchSetPressedWithBoolean:);
  methods[7].selector = @selector(findViewTraversalWithInt:);
  methods[8].selector = @selector(addViewWithADView:);
  methods[9].selector = @selector(addViewWithADView:withInt:);
  methods[10].selector = @selector(addViewWithADView:withInt:withInt:);
  methods[11].selector = @selector(addViewWithADView:withADViewGroup_LayoutParams:);
  methods[12].selector = @selector(addViewWithADView:withInt:withADViewGroup_LayoutParams:);
  methods[13].selector = @selector(checkLayoutParamsWithADViewGroup_LayoutParams:);
  methods[14].selector = @selector(setOnHierarchyChangeListenerWithADViewGroup_OnHierarchyChangeListener:);
  methods[15].selector = @selector(dispatchViewAddedWithADView:);
  methods[16].selector = @selector(onViewAddedWithADView:);
  methods[17].selector = @selector(dispatchViewRemovedWithADView:);
  methods[18].selector = @selector(onViewRemovedWithADView:);
  methods[19].selector = @selector(addViewInLayoutWithADView:withInt:withADViewGroup_LayoutParams:);
  methods[20].selector = @selector(addViewInLayoutWithADView:withInt:withADViewGroup_LayoutParams:withBoolean:);
  methods[21].selector = @selector(cleanupLayoutStateWithADView:);
  methods[22].selector = @selector(addViewInnerWithADView:withInt:withADViewGroup_LayoutParams:withBoolean:);
  methods[23].selector = @selector(addInArrayWithADView:withInt:);
  methods[24].selector = @selector(removeFromArrayWithInt:);
  methods[25].selector = @selector(removeFromArrayWithInt:withInt:);
  methods[26].selector = @selector(removeViewWithADView:);
  methods[27].selector = @selector(removeViewAtWithInt:);
  methods[28].selector = @selector(removeViewInternalWithADView:);
  methods[29].selector = @selector(removeViewInternalWithInt:withADView:);
  methods[30].selector = @selector(setLayoutTransitionWithADLayoutTransition:);
  methods[31].selector = @selector(getLayoutTransition);
  methods[32].selector = @selector(removeAllViews);
  methods[33].selector = @selector(removeAllViewsInLayout);
  methods[34].selector = @selector(attachViewToParentWithADView:withInt:withADViewGroup_LayoutParams:);
  methods[35].selector = @selector(detachViewFromParentWithADView:);
  methods[36].selector = @selector(detachViewFromParentWithInt:);
  methods[37].selector = @selector(detachViewsFromParentWithInt:withInt:);
  methods[38].selector = @selector(detachAllViewsFromParent);
  methods[39].selector = @selector(offsetChildrenTopAndBottomWithInt:);
  methods[40].selector = @selector(hasBooleanFlagWithInt:);
  methods[41].selector = @selector(setBooleanFlagWithInt:withBoolean:);
  methods[42].selector = @selector(setLayoutModeWithInt:withBoolean:);
  methods[43].selector = @selector(invalidateInheritedLayoutModeWithInt:);
  methods[44].selector = @selector(getLayoutMode);
  methods[45].selector = @selector(setLayoutModeWithInt:);
  methods[46].selector = @selector(generateDefaultLayoutParams);
  methods[47].selector = @selector(indexOfChildWithADView:);
  methods[48].selector = @selector(getChildCount);
  methods[49].selector = @selector(getChildAtWithInt:);
  methods[50].selector = @selector(measureChildrenWithInt:withInt:);
  methods[51].selector = @selector(measureChildWithADView:withInt:withInt:);
  methods[52].selector = @selector(measureChildWithMarginsWithADView:withInt:withInt:withInt:withInt:);
  methods[53].selector = @selector(getChildMeasureSpecWithInt:withInt:withInt:);
  methods[54].selector = @selector(addDisappearingViewWithADView:);
  methods[55].selector = @selector(startViewTransitionWithADView:);
  methods[56].selector = @selector(endViewTransitionWithADView:);
  methods[57].selector = @selector(drawableStateChanged);
  methods[58].selector = @selector(onCreateDrawableStateWithInt:);
  methods[59].selector = @selector(setAddStatesFromChildrenWithBoolean:);
  methods[60].selector = @selector(addStatesFromChildren);
  methods[61].selector = @selector(childDrawableStateChangedWithADView:);
  methods[62].selector = @selector(requestTransitionStartWithADLayoutTransition:);
  methods[63].selector = @selector(onStartNestedScrollWithADView:withADView:withInt:);
  methods[64].selector = @selector(onNestedScrollAcceptedWithADView:withADView:withInt:);
  methods[65].selector = @selector(onStopNestedScrollWithADView:);
  methods[66].selector = @selector(onNestedScrollWithADView:withInt:withInt:withInt:withInt:);
  methods[67].selector = @selector(onNestedPreScrollWithADView:withInt:withInt:withIntArray:);
  methods[68].selector = @selector(onNestedFlingWithADView:withFloat:withFloat:withBoolean:);
  methods[69].selector = @selector(onNestedPreFlingWithADView:withFloat:withFloat:);
  methods[70].selector = @selector(onSetLayoutParamsWithADView:withADViewGroup_LayoutParams:);
  methods[71].selector = @selector(isViewTransitioningWithADView:);
  methods[72].selector = @selector(getPaddingMaskBounds);
  methods[73].selector = @selector(bringToFront);
  methods[74].selector = @selector(incrementChildUnhandledKeyListeners);
  methods[75].selector = @selector(invalidateChildWithADView:withADRect:);
  methods[76].selector = @selector(recomputeViewAttributesWithADView:);
  methods[77].selector = @selector(focusableViewAvailableWithADView:);
  methods[78].selector = @selector(generateLayoutParamsWithADViewGroup_LayoutParams:);
  methods[79].selector = @selector(requestChildFocusWithADView:withId:);
  methods[80].selector = @selector(childHasTransientStateChangedWithADView:withBoolean:);
  methods[81].selector = @selector(notifyGlobalFocusClearedWithId:);
  methods[82].selector = @selector(rootViewRequestFocus);
  methods[83].selector = @selector(clearChildFocusWithADView:);
  methods[84].selector = @selector(cancelHoverTargetWithADView:);
  methods[85].selector = @selector(cancelTouchTargetWithADView:);
  methods[86].selector = @selector(touchAccessibilityNodeProviderIfNeededWithADView:);
  methods[87].selector = @selector(setDefaultFocusWithADView:);
  methods[88].selector = @selector(notifyChildOfDragStartWithADView:);
  methods[89].selector = @selector(dispatchVisibilityAggregatedWithBoolean:);
  methods[90].selector = @selector(clearFocusedInClusterWithADView:);
  methods[91].selector = @selector(decrementChildUnhandledKeyListeners);
  methods[92].selector = @selector(clearDefaultFocusWithADView:);
  methods[93].selector = @selector(measureHeightOfChildrenWithInt:withInt:withInt:withInt:withInt:);
  methods[94].selector = @selector(setRedrawWithBoolean:);
  methods[95].selector = @selector(hasChildWithADView:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "DBG", "Z", .constantValue.asBOOL = ADViewGroup_DBG, 0x1a, -1, -1, -1, -1 },
    { "mDisappearingChildren_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x4, -1, -1, 97, -1 },
    { "mOnHierarchyChangeListener_", "LADViewGroup_OnHierarchyChangeListener;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mFocused_", "LADView;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mDefaultFocus_", "LADView;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mFocusedInCluster_", "LADView;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mCurrentDragStartEvent_", "LADViewGroup_DragEvent;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mIsInterestedInDrag_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mChildrenInterestedInDrag_", "LJavaUtilHashSet;", .constantValue.asLong = 0, 0x2, -1, -1, 98, -1 },
    { "mLastTouchDownTime_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mLastTouchDownIndex_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mHoveredSelf_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mTooltipHoveredSelf_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mGroupFlags_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mLayoutMode_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "FLAG_CLIP_CHILDREN", "I", .constantValue.asInt = ADViewGroup_FLAG_CLIP_CHILDREN, 0x18, -1, -1, -1, -1 },
    { "FLAG_CLIP_TO_PADDING", "I", .constantValue.asInt = ADViewGroup_FLAG_CLIP_TO_PADDING, 0x1a, -1, -1, -1, -1 },
    { "FLAG_INVALIDATE_REQUIRED", "I", .constantValue.asInt = ADViewGroup_FLAG_INVALIDATE_REQUIRED, 0x18, -1, -1, -1, -1 },
    { "FLAG_RUN_ANIMATION", "I", .constantValue.asInt = ADViewGroup_FLAG_RUN_ANIMATION, 0x1a, -1, -1, -1, -1 },
    { "FLAG_ANIMATION_DONE", "I", .constantValue.asInt = ADViewGroup_FLAG_ANIMATION_DONE, 0x18, -1, -1, -1, -1 },
    { "FLAG_PADDING_NOT_NULL", "I", .constantValue.asInt = ADViewGroup_FLAG_PADDING_NOT_NULL, 0x1a, -1, -1, -1, -1 },
    { "FLAG_ANIMATION_CACHE", "I", .constantValue.asInt = ADViewGroup_FLAG_ANIMATION_CACHE, 0x1a, -1, -1, -1, -1 },
    { "FLAG_OPTIMIZE_INVALIDATE", "I", .constantValue.asInt = ADViewGroup_FLAG_OPTIMIZE_INVALIDATE, 0x18, -1, -1, -1, -1 },
    { "FLAG_CLEAR_TRANSFORMATION", "I", .constantValue.asInt = ADViewGroup_FLAG_CLEAR_TRANSFORMATION, 0x18, -1, -1, -1, -1 },
    { "FLAG_NOTIFY_ANIMATION_LISTENER", "I", .constantValue.asInt = ADViewGroup_FLAG_NOTIFY_ANIMATION_LISTENER, 0x1a, -1, -1, -1, -1 },
    { "FLAG_USE_CHILD_DRAWING_ORDER", "I", .constantValue.asInt = ADViewGroup_FLAG_USE_CHILD_DRAWING_ORDER, 0x1c, -1, -1, -1, -1 },
    { "FLAG_SUPPORT_STATIC_TRANSFORMATIONS", "I", .constantValue.asInt = ADViewGroup_FLAG_SUPPORT_STATIC_TRANSFORMATIONS, 0x1c, -1, -1, -1, -1 },
    { "FLAG_ADD_STATES_FROM_CHILDREN", "I", .constantValue.asInt = ADViewGroup_FLAG_ADD_STATES_FROM_CHILDREN, 0x1a, -1, -1, -1, -1 },
    { "FLAG_ALWAYS_DRAWN_WITH_CACHE", "I", .constantValue.asInt = ADViewGroup_FLAG_ALWAYS_DRAWN_WITH_CACHE, 0x1a, -1, -1, -1, -1 },
    { "FLAG_CHILDREN_DRAWN_WITH_CACHE", "I", .constantValue.asInt = ADViewGroup_FLAG_CHILDREN_DRAWN_WITH_CACHE, 0x1a, -1, -1, -1, -1 },
    { "FLAG_NOTIFY_CHILDREN_ON_DRAWABLE_STATE_CHANGE", "I", .constantValue.asInt = ADViewGroup_FLAG_NOTIFY_CHILDREN_ON_DRAWABLE_STATE_CHANGE, 0x1a, -1, -1, -1, -1 },
    { "FLAG_MASK_FOCUSABILITY", "I", .constantValue.asInt = ADViewGroup_FLAG_MASK_FOCUSABILITY, 0x1a, -1, -1, -1, -1 },
    { "FOCUS_BEFORE_DESCENDANTS", "I", .constantValue.asInt = ADViewGroup_FOCUS_BEFORE_DESCENDANTS, 0x19, -1, -1, -1, -1 },
    { "FOCUS_AFTER_DESCENDANTS", "I", .constantValue.asInt = ADViewGroup_FOCUS_AFTER_DESCENDANTS, 0x19, -1, -1, -1, -1 },
    { "FOCUS_BLOCK_DESCENDANTS", "I", .constantValue.asInt = ADViewGroup_FOCUS_BLOCK_DESCENDANTS, 0x19, -1, -1, -1, -1 },
    { "FLAG_DISALLOW_INTERCEPT", "I", .constantValue.asInt = ADViewGroup_FLAG_DISALLOW_INTERCEPT, 0x1c, -1, -1, -1, -1 },
    { "FLAG_SPLIT_MOTION_EVENTS", "I", .constantValue.asInt = ADViewGroup_FLAG_SPLIT_MOTION_EVENTS, 0x1a, -1, -1, -1, -1 },
    { "FLAG_PREVENT_DISPATCH_ATTACHED_TO_WINDOW", "I", .constantValue.asInt = ADViewGroup_FLAG_PREVENT_DISPATCH_ATTACHED_TO_WINDOW, 0x1a, -1, -1, -1, -1 },
    { "FLAG_LAYOUT_MODE_WAS_EXPLICITLY_SET", "I", .constantValue.asInt = ADViewGroup_FLAG_LAYOUT_MODE_WAS_EXPLICITLY_SET, 0x1a, -1, -1, -1, -1 },
    { "FLAG_IS_TRANSITION_GROUP", "I", .constantValue.asInt = ADViewGroup_FLAG_IS_TRANSITION_GROUP, 0x18, -1, -1, -1, -1 },
    { "FLAG_IS_TRANSITION_GROUP_SET", "I", .constantValue.asInt = ADViewGroup_FLAG_IS_TRANSITION_GROUP_SET, 0x18, -1, -1, -1, -1 },
    { "FLAG_TOUCHSCREEN_BLOCKS_FOCUS", "I", .constantValue.asInt = ADViewGroup_FLAG_TOUCHSCREEN_BLOCKS_FOCUS, 0x18, -1, -1, -1, -1 },
    { "FLAG_START_ACTION_MODE_FOR_CHILD_IS_TYPED", "I", .constantValue.asInt = ADViewGroup_FLAG_START_ACTION_MODE_FOR_CHILD_IS_TYPED, 0x1a, -1, -1, -1, -1 },
    { "FLAG_START_ACTION_MODE_FOR_CHILD_IS_NOT_TYPED", "I", .constantValue.asInt = ADViewGroup_FLAG_START_ACTION_MODE_FOR_CHILD_IS_NOT_TYPED, 0x1a, -1, -1, -1, -1 },
    { "FLAG_SHOW_CONTEXT_MENU_WITH_COORDS", "I", .constantValue.asInt = ADViewGroup_FLAG_SHOW_CONTEXT_MENU_WITH_COORDS, 0x1a, -1, -1, -1, -1 },
    { "mPersistentDrawingCache_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "PERSISTENT_NO_CACHE", "I", .constantValue.asInt = ADViewGroup_PERSISTENT_NO_CACHE, 0x19, -1, -1, -1, -1 },
    { "PERSISTENT_ANIMATION_CACHE", "I", .constantValue.asInt = ADViewGroup_PERSISTENT_ANIMATION_CACHE, 0x19, -1, -1, -1, -1 },
    { "PERSISTENT_SCROLLING_CACHE", "I", .constantValue.asInt = ADViewGroup_PERSISTENT_SCROLLING_CACHE, 0x19, -1, -1, -1, -1 },
    { "PERSISTENT_ALL_CACHES", "I", .constantValue.asInt = ADViewGroup_PERSISTENT_ALL_CACHES, 0x19, -1, -1, -1, -1 },
    { "LAYOUT_MODE_UNDEFINED", "I", .constantValue.asInt = ADViewGroup_LAYOUT_MODE_UNDEFINED, 0x1a, -1, -1, -1, -1 },
    { "LAYOUT_MODE_CLIP_BOUNDS", "I", .constantValue.asInt = ADViewGroup_LAYOUT_MODE_CLIP_BOUNDS, 0x19, -1, -1, -1, -1 },
    { "LAYOUT_MODE_OPTICAL_BOUNDS", "I", .constantValue.asInt = ADViewGroup_LAYOUT_MODE_OPTICAL_BOUNDS, 0x19, -1, -1, -1, -1 },
    { "LAYOUT_MODE_DEFAULT", "I", .constantValue.asLong = 0, 0x9, -1, 99, -1, -1 },
    { "CLIP_TO_PADDING_MASK", "I", .constantValue.asInt = ADViewGroup_CLIP_TO_PADDING_MASK, 0x1c, -1, -1, -1, -1 },
    { "CHILD_LEFT_INDEX", "I", .constantValue.asInt = ADViewGroup_CHILD_LEFT_INDEX, 0x1a, -1, -1, -1, -1 },
    { "CHILD_TOP_INDEX", "I", .constantValue.asInt = ADViewGroup_CHILD_TOP_INDEX, 0x1a, -1, -1, -1, -1 },
    { "mChildrenCount_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mSuppressLayout_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mLayoutCalledWhileSuppressed_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "ARRAY_INITIAL_CAPACITY", "I", .constantValue.asInt = ADViewGroup_ARRAY_INITIAL_CAPACITY, 0x1a, -1, -1, -1, -1 },
    { "ARRAY_CAPACITY_INCREMENT", "I", .constantValue.asInt = ADViewGroup_ARRAY_CAPACITY_INCREMENT, 0x1a, -1, -1, -1, -1 },
    { "mTransition_", "LADLayoutTransition;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mTransitioningViews_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x2, -1, -1, 97, -1 },
    { "mVisibilityChangingChildren_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x2, -1, -1, 97, -1 },
    { "mChildCountWithTransientState_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mNestedScrollAxes_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mTransientIndices_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 100, -1 },
    { "mTransientViews_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 101, -1 },
    { "mChildUnhandledKeyListeners_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mLayoutTransitionListener_", "LADLayoutTransition_TransitionListener;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mChildren_", "[LADView;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "onChildVisibilityChanged", "LADView;II", "dispatchAttachedToWindow", "LADView_AttachInfo;I", "setClipToPadding", "Z", "dispatchSetPressed", "findViewTraversal", "I", "<T:Lr/android/view/View;>(I)TT;", "addView", "LADView;", "LADView;I", "LADView;LADViewGroup_LayoutParams;", "LADView;ILADViewGroup_LayoutParams;", "checkLayoutParams", "LADViewGroup_LayoutParams;", "setOnHierarchyChangeListener", "LADViewGroup_OnHierarchyChangeListener;", "dispatchViewAdded", "onViewAdded", "dispatchViewRemoved", "onViewRemoved", "addViewInLayout", "LADView;ILADViewGroup_LayoutParams;Z", "cleanupLayoutState", "addViewInner", "addInArray", "removeFromArray", "II", "removeView", "removeViewAt", "removeViewInternal", "ILADView;", "setLayoutTransition", "LADLayoutTransition;", "attachViewToParent", "detachViewFromParent", "detachViewsFromParent", "offsetChildrenTopAndBottom", "hasBooleanFlag", "setBooleanFlag", "IZ", "setLayoutMode", "invalidateInheritedLayoutMode", "indexOfChild", "getChildAt", "measureChildren", "measureChild", "measureChildWithMargins", "LADView;IIII", "getChildMeasureSpec", "III", "addDisappearingView", "startViewTransition", "endViewTransition", "onCreateDrawableState", "setAddStatesFromChildren", "childDrawableStateChanged", "requestTransitionStart", "onStartNestedScroll", "LADView;LADView;I", "onNestedScrollAccepted", "onStopNestedScroll", "onNestedScroll", "onNestedPreScroll", "LADView;II[I", "onNestedFling", "LADView;FFZ", "onNestedPreFling", "LADView;FF", "onSetLayoutParams", "isViewTransitioning", "invalidateChild", "LADView;LADRect;", "recomputeViewAttributes", "focusableViewAvailable", "generateLayoutParams", "requestChildFocus", "LADView;LNSObject;", "childHasTransientStateChanged", "LADView;Z", "notifyGlobalFocusCleared", "LNSObject;", "clearChildFocus", "cancelHoverTarget", "cancelTouchTarget", "touchAccessibilityNodeProviderIfNeeded", "setDefaultFocus", "notifyChildOfDragStart", "dispatchVisibilityAggregated", "clearFocusedInCluster", "clearDefaultFocus", "measureHeightOfChildren", "IIIII", "setRedraw", "hasChild", "Ljava/util/ArrayList<Lr/android/view/View;>;", "Ljava/util/HashSet<Lr/android/view/View;>;", &ADViewGroup_LAYOUT_MODE_DEFAULT, "Ljava/util/List<Ljava/lang/Integer;>;", "Ljava/util/List<Lr/android/view/View;>;", "LADViewGroup_OnHierarchyChangeListener;LADViewGroup_LayoutParams;LADViewGroup_MarginLayoutParams;LADViewGroup_DragEvent;" };
  static const J2ObjcClassInfo _ADViewGroup = { "ViewGroup", "r.android.view", ptrTable, methods, fields, 7, 0x401, 96, 72, -1, 102, -1, -1, -1 };
  return &_ADViewGroup;
}

@end

void ADViewGroup_init(ADViewGroup *self) {
  ADView_init(self);
  self->mLastTouchDownIndex_ = -1;
  self->mLayoutMode_ = ADViewGroup_LAYOUT_MODE_UNDEFINED;
  self->mSuppressLayout_ = false;
  self->mLayoutCalledWhileSuppressed_ = false;
  self->mChildCountWithTransientState_ = 0;
  JreStrongAssign(&self->mTransientIndices_, nil);
  JreStrongAssign(&self->mTransientViews_, nil);
  self->mChildUnhandledKeyListeners_ = 0;
  JreStrongAssignAndConsume(&self->mLayoutTransitionListener_, new_ADViewGroup_1_initWithADViewGroup_(self));
  JreStrongAssignAndConsume(&self->mChildren_, [IOSObjectArray newArrayWithLength:ADViewGroup_ARRAY_INITIAL_CAPACITY type:ADView_class_()]);
}

void ADViewGroup_addViewInnerWithADView_withInt_withADViewGroup_LayoutParams_withBoolean_(ADViewGroup *self, ADView *child, int32_t index, ADViewGroup_LayoutParams *params, bool preventRequestLayout) {
  if (self->mTransition_ != nil) {
    [self->mTransition_ cancelWithInt:ADLayoutTransition_DISAPPEARING];
  }
  if ([((ADView *) nil_chk(child)) getParent] != nil) {
    if (JreObjectEqualsEquals([child getParent], self)) {
      JreStrongAssign(&child->mLayoutParams_, params);
      return;
    }
    @throw create_JavaLangIllegalStateException_initWithNSString_(@"The specified child already has a parent. You must call removeView() on the child's parent first.");
  }
  if (self->mTransition_ != nil) {
    [self->mTransition_ addChildWithADViewGroup:self withADView:child];
  }
  if (![self checkLayoutParamsWithADViewGroup_LayoutParams:params]) {
    params = [self generateLayoutParamsWithADViewGroup_LayoutParams:params];
  }
  if (preventRequestLayout) {
    JreStrongAssign(&child->mLayoutParams_, params);
  }
  else {
    [child setLayoutParamsWithADViewGroup_LayoutParams:params];
  }
  if (index < 0) {
    index = self->mChildrenCount_;
  }
  ADViewGroup_addInArrayWithADView_withInt_(self, child, index);
  if (preventRequestLayout) {
    [child assignParentWithADViewParent:self];
  }
  else {
    child->mParent_ = self;
  }
  if ([child hasUnhandledKeyListener]) {
    [self incrementChildUnhandledKeyListeners];
  }
  bool childHasFocus = [child hasFocus];
  if (childHasFocus) {
    ADViewGroup_requestChildFocusWithADView_withId_(self, child, [child findFocus]);
  }
  ADView_AttachInfo *ai = JreRetainedLocalValue(self->mAttachInfo_);
  if (ai != nil && (self->mGroupFlags_ & ADViewGroup_FLAG_PREVENT_DISPATCH_ATTACHED_TO_WINDOW) == 0) {
    bool lastKeepOn = ai->mKeepScreenOn_;
    ai->mKeepScreenOn_ = false;
    [child dispatchAttachedToWindowWithADView_AttachInfo:self->mAttachInfo_ withInt:(self->mViewFlags_ & ADView_VISIBILITY_MASK)];
    if (ai->mKeepScreenOn_) {
      [self needGlobalAttributesUpdateWithBoolean:true];
    }
    ai->mKeepScreenOn_ = lastKeepOn;
  }
  if ([child isLayoutDirectionInherited]) {
    [child resetRtlProperties];
  }
  [self dispatchViewAddedWithADView:child];
  if ((child->mViewFlags_ & ADView_DUPLICATE_PARENT_STATE) == ADView_DUPLICATE_PARENT_STATE) {
    self->mGroupFlags_ |= ADViewGroup_FLAG_NOTIFY_CHILDREN_ON_DRAWABLE_STATE_CHANGE;
  }
  if ([child hasTransientState]) {
    ADViewGroup_childHasTransientStateChangedWithADView_withBoolean_(self, child, true);
  }
  if ([child getVisibility] != ADView_GONE) {
    [self notifySubtreeAccessibilityStateChangedIfNeeded];
  }
  if (self->mTransientIndices_ != nil) {
    int32_t transientCount = [self->mTransientIndices_ size];
    for (int32_t i = 0; i < transientCount; ++i) {
      int32_t oldIndex = [((JavaLangInteger *) nil_chk([((id<JavaUtilList>) nil_chk(self->mTransientIndices_)) getWithInt:i])) intValue];
      if (index <= oldIndex) {
        [((id<JavaUtilList>) nil_chk(self->mTransientIndices_)) setWithInt:i withId:JavaLangInteger_valueOfWithInt_(oldIndex + 1)];
      }
    }
  }
  if (self->mCurrentDragStartEvent_ != nil && [child getVisibility] == ADView_VISIBLE) {
    ADViewGroup_notifyChildOfDragStartWithADView_(self, child);
  }
  if ([child hasDefaultFocus]) {
    ADViewGroup_setDefaultFocusWithADView_(self, child);
  }
  ADViewGroup_touchAccessibilityNodeProviderIfNeededWithADView_(self, child);
}

void ADViewGroup_addInArrayWithADView_withInt_(ADViewGroup *self, ADView *child, int32_t index) {
  IOSObjectArray *children = self->mChildren_;
  int32_t count = self->mChildrenCount_;
  int32_t size = ((IOSObjectArray *) nil_chk(children))->size_;
  if (index == count) {
    if (size == count) {
      JreStrongAssignAndConsume(&self->mChildren_, [IOSObjectArray newArrayWithLength:size + ADViewGroup_ARRAY_CAPACITY_INCREMENT type:ADView_class_()]);
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(children, 0, self->mChildren_, 0, size);
      children = self->mChildren_;
    }
    IOSObjectArray_Set(nil_chk(children), self->mChildrenCount_++, child);
  }
  else if (index < count) {
    if (size == count) {
      JreStrongAssignAndConsume(&self->mChildren_, [IOSObjectArray newArrayWithLength:size + ADViewGroup_ARRAY_CAPACITY_INCREMENT type:ADView_class_()]);
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(children, 0, self->mChildren_, 0, index);
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(children, index, self->mChildren_, index + 1, count - index);
      children = self->mChildren_;
    }
    else {
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(children, index, children, index + 1, count - index);
    }
    IOSObjectArray_Set(nil_chk(children), index, child);
    self->mChildrenCount_++;
    if (self->mLastTouchDownIndex_ >= index) {
      self->mLastTouchDownIndex_++;
    }
  }
  else {
    @throw create_JavaLangIndexOutOfBoundsException_initWithNSString_(JreStrcat("$I$I", @"index=", index, @" count=", count));
  }
}

void ADViewGroup_removeFromArrayWithInt_(ADViewGroup *self, int32_t index) {
  IOSObjectArray *children = self->mChildren_;
  if (!(self->mTransitioningViews_ != nil && [self->mTransitioningViews_ containsWithId:IOSObjectArray_Get(nil_chk(children), index)])) {
    ((ADView *) nil_chk(IOSObjectArray_Get(nil_chk(children), index)))->mParent_ = nil;
  }
  int32_t count = self->mChildrenCount_;
  if (index == count - 1) {
    IOSObjectArray_Set(nil_chk(children), --self->mChildrenCount_, nil);
  }
  else if (index >= 0 && index < count) {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(children, index + 1, children, index, count - index - 1);
    IOSObjectArray_Set(nil_chk(children), --self->mChildrenCount_, nil);
  }
  else {
    @throw create_JavaLangIndexOutOfBoundsException_init();
  }
  if (self->mLastTouchDownIndex_ == index) {
    self->mLastTouchDownTime_ = 0;
    self->mLastTouchDownIndex_ = -1;
  }
  else if (self->mLastTouchDownIndex_ > index) {
    self->mLastTouchDownIndex_--;
  }
}

void ADViewGroup_removeFromArrayWithInt_withInt_(ADViewGroup *self, int32_t start, int32_t count) {
  IOSObjectArray *children = self->mChildren_;
  int32_t childrenCount = self->mChildrenCount_;
  start = JavaLangMath_maxWithInt_withInt_(0, start);
  int32_t end = JavaLangMath_minWithInt_withInt_(childrenCount, start + count);
  if (start == end) {
    return;
  }
  if (end == childrenCount) {
    for (int32_t i = start; i < end; i++) {
      ((ADView *) nil_chk(IOSObjectArray_Get(nil_chk(children), i)))->mParent_ = nil;
      IOSObjectArray_Set(children, i, nil);
    }
  }
  else {
    for (int32_t i = start; i < end; i++) {
      ((ADView *) nil_chk(IOSObjectArray_Get(nil_chk(children), i)))->mParent_ = nil;
    }
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(children, end, children, start, childrenCount - end);
    for (int32_t i = childrenCount - (end - start); i < childrenCount; i++) {
      IOSObjectArray_Set(nil_chk(children), i, nil);
    }
  }
  self->mChildrenCount_ -= (end - start);
}

bool ADViewGroup_removeViewInternalWithADView_(ADViewGroup *self, ADView *view) {
  int32_t index = [self indexOfChildWithADView:view];
  if (index >= 0) {
    ADViewGroup_removeViewInternalWithInt_withADView_(self, index, view);
    return true;
  }
  return false;
}

void ADViewGroup_removeViewInternalWithInt_withADView_(ADViewGroup *self, int32_t index, ADView *view) {
  if (self->mTransition_ != nil) {
    [self->mTransition_ removeChildWithADViewGroup:self withADView:view];
  }
  bool clearChildFocus = false;
  if (JreObjectEqualsEquals(view, self->mFocused_)) {
    [((ADView *) nil_chk(view)) unFocusWithId:nil];
    clearChildFocus = true;
  }
  if (JreObjectEqualsEquals(view, self->mFocusedInCluster_)) {
    ADViewGroup_clearFocusedInClusterWithADView_(self, view);
  }
  [((ADView *) nil_chk(view)) clearAccessibilityFocus];
  ADViewGroup_cancelTouchTargetWithADView_(self, view);
  ADViewGroup_cancelHoverTargetWithADView_(self, view);
  if ([view getAnimation] != nil || (self->mTransitioningViews_ != nil && [self->mTransitioningViews_ containsWithId:view])) {
    ADViewGroup_addDisappearingViewWithADView_(self, view);
  }
  else if (view->mAttachInfo_ != nil) {
    [view dispatchDetachedFromWindow];
  }
  if ([view hasTransientState]) {
    ADViewGroup_childHasTransientStateChangedWithADView_withBoolean_(self, view, false);
  }
  [self needGlobalAttributesUpdateWithBoolean:false];
  ADViewGroup_removeFromArrayWithInt_(self, index);
  if ([view hasUnhandledKeyListener]) {
    ADViewGroup_decrementChildUnhandledKeyListeners(self);
  }
  if (JreObjectEqualsEquals(view, self->mDefaultFocus_)) {
    ADViewGroup_clearDefaultFocusWithADView_(self, view);
  }
  if (clearChildFocus) {
    ADViewGroup_clearChildFocusWithADView_(self, view);
    if (!ADViewGroup_rootViewRequestFocus(self)) {
      ADViewGroup_notifyGlobalFocusClearedWithId_(self, self);
    }
  }
  [self dispatchViewRemovedWithADView:view];
  if ([view getVisibility] != ADView_GONE) {
    [self notifySubtreeAccessibilityStateChangedIfNeeded];
  }
  int32_t transientCount = self->mTransientIndices_ == nil ? 0 : [self->mTransientIndices_ size];
  for (int32_t i = 0; i < transientCount; ++i) {
    int32_t oldIndex = [((JavaLangInteger *) nil_chk([((id<JavaUtilList>) nil_chk(self->mTransientIndices_)) getWithInt:i])) intValue];
    if (index < oldIndex) {
      [((id<JavaUtilList>) nil_chk(self->mTransientIndices_)) setWithInt:i withId:JavaLangInteger_valueOfWithInt_(oldIndex - 1)];
    }
  }
  if (self->mCurrentDragStartEvent_ != nil) {
    [((JavaUtilHashSet *) nil_chk(self->mChildrenInterestedInDrag_)) removeWithId:view];
  }
}

bool ADViewGroup_hasBooleanFlagWithInt_(ADViewGroup *self, int32_t flag) {
  return (self->mGroupFlags_ & flag) == flag;
}

void ADViewGroup_setBooleanFlagWithInt_withBoolean_(ADViewGroup *self, int32_t flag, bool value) {
  if (value) {
    self->mGroupFlags_ |= flag;
  }
  else {
    self->mGroupFlags_ &= ~flag;
  }
}

void ADViewGroup_setLayoutModeWithInt_withBoolean_(ADViewGroup *self, int32_t layoutMode, bool explicitly) {
  self->mLayoutMode_ = layoutMode;
  ADViewGroup_setBooleanFlagWithInt_withBoolean_(self, ADViewGroup_FLAG_LAYOUT_MODE_WAS_EXPLICITLY_SET, explicitly);
}

int32_t ADViewGroup_getChildMeasureSpecWithInt_withInt_withInt_(int32_t spec, int32_t padding, int32_t childDimension) {
  ADViewGroup_initialize();
  int32_t specMode = ADView_MeasureSpec_getModeWithInt_(spec);
  int32_t specSize = ADView_MeasureSpec_getSizeWithInt_(spec);
  int32_t size = JavaLangMath_maxWithInt_withInt_(0, specSize - padding);
  int32_t resultSize = 0;
  int32_t resultMode = 0;
  switch (specMode) {
    case ADView_MeasureSpec_EXACTLY:
    if (childDimension >= 0) {
      resultSize = childDimension;
      resultMode = ADView_MeasureSpec_EXACTLY;
    }
    else if (childDimension == ADViewGroup_LayoutParams_MATCH_PARENT) {
      resultSize = size;
      resultMode = ADView_MeasureSpec_EXACTLY;
    }
    else if (childDimension == ADViewGroup_LayoutParams_WRAP_CONTENT) {
      resultSize = size;
      resultMode = ADView_MeasureSpec_AT_MOST;
    }
    break;
    case ADView_MeasureSpec_AT_MOST:
    if (childDimension >= 0) {
      resultSize = childDimension;
      resultMode = ADView_MeasureSpec_EXACTLY;
    }
    else if (childDimension == ADViewGroup_LayoutParams_MATCH_PARENT) {
      resultSize = size;
      resultMode = ADView_MeasureSpec_AT_MOST;
    }
    else if (childDimension == ADViewGroup_LayoutParams_WRAP_CONTENT) {
      resultSize = size;
      resultMode = ADView_MeasureSpec_AT_MOST;
    }
    break;
    case ADView_MeasureSpec_UNSPECIFIED:
    if (childDimension >= 0) {
      resultSize = childDimension;
      resultMode = ADView_MeasureSpec_EXACTLY;
    }
    else if (childDimension == ADViewGroup_LayoutParams_MATCH_PARENT) {
      resultSize = JreLoadStatic(ADView, sUseZeroUnspecifiedMeasureSpec) ? 0 : size;
      resultMode = ADView_MeasureSpec_UNSPECIFIED;
    }
    else if (childDimension == ADViewGroup_LayoutParams_WRAP_CONTENT) {
      resultSize = JreLoadStatic(ADView, sUseZeroUnspecifiedMeasureSpec) ? 0 : size;
      resultMode = ADView_MeasureSpec_UNSPECIFIED;
    }
    break;
  }
  return ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_(resultSize, resultMode);
}

void ADViewGroup_addDisappearingViewWithADView_(ADViewGroup *self, ADView *v) {
  JavaUtilArrayList *disappearingChildren = JreRetainedLocalValue(self->mDisappearingChildren_);
  if (disappearingChildren == nil) {
    disappearingChildren = JreStrongAssignAndConsume(&self->mDisappearingChildren_, new_JavaUtilArrayList_init());
  }
  [disappearingChildren addWithId:v];
}

void ADViewGroup_requestChildFocusWithADView_withId_(ADViewGroup *self, ADView *child, id findFocus) {
}

void ADViewGroup_childHasTransientStateChangedWithADView_withBoolean_(ADViewGroup *self, ADView *child, bool b) {
}

void ADViewGroup_notifyGlobalFocusClearedWithId_(ADViewGroup *self, id viewGroup) {
}

bool ADViewGroup_rootViewRequestFocus(ADViewGroup *self) {
  return false;
}

void ADViewGroup_clearChildFocusWithADView_(ADViewGroup *self, ADView *view) {
}

void ADViewGroup_cancelHoverTargetWithADView_(ADViewGroup *self, ADView *view) {
}

void ADViewGroup_cancelTouchTargetWithADView_(ADViewGroup *self, ADView *view) {
}

void ADViewGroup_touchAccessibilityNodeProviderIfNeededWithADView_(ADViewGroup *self, ADView *child) {
}

void ADViewGroup_setDefaultFocusWithADView_(ADViewGroup *self, ADView *child) {
}

void ADViewGroup_notifyChildOfDragStartWithADView_(ADViewGroup *self, ADView *child) {
}

void ADViewGroup_dispatchVisibilityAggregatedWithBoolean_(ADViewGroup *self, bool b) {
}

void ADViewGroup_clearFocusedInClusterWithADView_(ADViewGroup *self, ADView *view) {
}

void ADViewGroup_decrementChildUnhandledKeyListeners(ADViewGroup *self) {
}

void ADViewGroup_clearDefaultFocusWithADView_(ADViewGroup *self, ADView *view) {
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADViewGroup)

J2OBJC_NAME_MAPPING(ADViewGroup, "r.android.view", "AD")

@implementation ADViewGroup_OnHierarchyChangeListener

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x401, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 2, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(onChildViewAddedWithADView:withADView:);
  methods[1].selector = @selector(onChildViewRemovedWithADView:withADView:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "onChildViewAdded", "LADView;LADView;", "onChildViewRemoved", "LADViewGroup;" };
  static const J2ObjcClassInfo _ADViewGroup_OnHierarchyChangeListener = { "OnHierarchyChangeListener", "r.android.view", ptrTable, methods, NULL, 7, 0x609, 2, 0, 3, -1, -1, -1, -1 };
  return &_ADViewGroup_OnHierarchyChangeListener;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(ADViewGroup_OnHierarchyChangeListener)

@implementation ADViewGroup_1

- (instancetype)initWithADViewGroup:(ADViewGroup *)outer$ {
  ADViewGroup_1_initWithADViewGroup_(self, outer$);
  return self;
}

- (void)startTransitionWithADLayoutTransition:(ADLayoutTransition *)transition
                              withADViewGroup:(ADViewGroup *)container
                                   withADView:(ADView *)view
                                      withInt:(int32_t)transitionType {
  if (transitionType == ADLayoutTransition_DISAPPEARING) {
    [this$0_ startViewTransitionWithADView:view];
  }
}

- (void)endTransitionWithADLayoutTransition:(ADLayoutTransition *)transition
                            withADViewGroup:(ADViewGroup *)container
                                 withADView:(ADView *)view
                                    withInt:(int32_t)transitionType {
  if (this$0_->mLayoutCalledWhileSuppressed_ && ![((ADLayoutTransition *) nil_chk(transition)) isChangingLayout]) {
    [this$0_ requestLayout];
    this$0_->mLayoutCalledWhileSuppressed_ = false;
  }
  if (transitionType == ADLayoutTransition_DISAPPEARING && this$0_->mTransitioningViews_ != nil) {
    [this$0_ endViewTransitionWithADView:view];
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithADViewGroup:);
  methods[1].selector = @selector(startTransitionWithADLayoutTransition:withADViewGroup:withADView:withInt:);
  methods[2].selector = @selector(endTransitionWithADLayoutTransition:withADViewGroup:withADView:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LADViewGroup;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LADViewGroup;", "startTransition", "LADLayoutTransition;LADViewGroup;LADView;I", "endTransition" };
  static const J2ObjcClassInfo _ADViewGroup_1 = { "", "r.android.view", ptrTable, methods, fields, 7, 0x8000, 3, 1, 0, -1, -1, -1, -1 };
  return &_ADViewGroup_1;
}

@end

void ADViewGroup_1_initWithADViewGroup_(ADViewGroup_1 *self, ADViewGroup *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

ADViewGroup_1 *new_ADViewGroup_1_initWithADViewGroup_(ADViewGroup *outer$) {
  J2OBJC_NEW_IMPL(ADViewGroup_1, initWithADViewGroup_, outer$)
}

ADViewGroup_1 *create_ADViewGroup_1_initWithADViewGroup_(ADViewGroup *outer$) {
  J2OBJC_CREATE_IMPL(ADViewGroup_1, initWithADViewGroup_, outer$)
}

@implementation ADViewGroup_LayoutParams

- (instancetype)initWithInt:(int32_t)width
                    withInt:(int32_t)height {
  ADViewGroup_LayoutParams_initWithInt_withInt_(self, width, height);
  return self;
}

- (instancetype)initWithADViewGroup_LayoutParams:(ADViewGroup_LayoutParams *)source {
  ADViewGroup_LayoutParams_initWithADViewGroup_LayoutParams_(self, source);
  return self;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADViewGroup_LayoutParams_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)resolveLayoutDirectionWithInt:(int32_t)layoutDirection {
}

+ (NSString *)sizeToStringWithInt:(int32_t)size {
  return ADViewGroup_LayoutParams_sizeToStringWithInt_(size);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0xc, 4, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:withInt:);
  methods[1].selector = @selector(initWithADViewGroup_LayoutParams:);
  methods[2].selector = @selector(init);
  methods[3].selector = @selector(resolveLayoutDirectionWithInt:);
  methods[4].selector = @selector(sizeToStringWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "FILL_PARENT", "I", .constantValue.asInt = ADViewGroup_LayoutParams_FILL_PARENT, 0x19, -1, -1, -1, -1 },
    { "MATCH_PARENT", "I", .constantValue.asInt = ADViewGroup_LayoutParams_MATCH_PARENT, 0x19, -1, -1, -1, -1 },
    { "WRAP_CONTENT", "I", .constantValue.asInt = ADViewGroup_LayoutParams_WRAP_CONTENT, 0x19, -1, -1, -1, -1 },
    { "width_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "height_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "II", "LADViewGroup_LayoutParams;", "resolveLayoutDirection", "I", "sizeToString", "LADViewGroup;" };
  static const J2ObjcClassInfo _ADViewGroup_LayoutParams = { "LayoutParams", "r.android.view", ptrTable, methods, fields, 7, 0x9, 5, 5, 5, -1, -1, -1, -1 };
  return &_ADViewGroup_LayoutParams;
}

@end

void ADViewGroup_LayoutParams_initWithInt_withInt_(ADViewGroup_LayoutParams *self, int32_t width, int32_t height) {
  NSObject_init(self);
  self->width_ = width;
  self->height_ = height;
}

ADViewGroup_LayoutParams *new_ADViewGroup_LayoutParams_initWithInt_withInt_(int32_t width, int32_t height) {
  J2OBJC_NEW_IMPL(ADViewGroup_LayoutParams, initWithInt_withInt_, width, height)
}

ADViewGroup_LayoutParams *create_ADViewGroup_LayoutParams_initWithInt_withInt_(int32_t width, int32_t height) {
  J2OBJC_CREATE_IMPL(ADViewGroup_LayoutParams, initWithInt_withInt_, width, height)
}

void ADViewGroup_LayoutParams_initWithADViewGroup_LayoutParams_(ADViewGroup_LayoutParams *self, ADViewGroup_LayoutParams *source) {
  NSObject_init(self);
  self->width_ = ((ADViewGroup_LayoutParams *) nil_chk(source))->width_;
  self->height_ = source->height_;
}

ADViewGroup_LayoutParams *new_ADViewGroup_LayoutParams_initWithADViewGroup_LayoutParams_(ADViewGroup_LayoutParams *source) {
  J2OBJC_NEW_IMPL(ADViewGroup_LayoutParams, initWithADViewGroup_LayoutParams_, source)
}

ADViewGroup_LayoutParams *create_ADViewGroup_LayoutParams_initWithADViewGroup_LayoutParams_(ADViewGroup_LayoutParams *source) {
  J2OBJC_CREATE_IMPL(ADViewGroup_LayoutParams, initWithADViewGroup_LayoutParams_, source)
}

void ADViewGroup_LayoutParams_init(ADViewGroup_LayoutParams *self) {
  NSObject_init(self);
}

ADViewGroup_LayoutParams *new_ADViewGroup_LayoutParams_init() {
  J2OBJC_NEW_IMPL(ADViewGroup_LayoutParams, init)
}

ADViewGroup_LayoutParams *create_ADViewGroup_LayoutParams_init() {
  J2OBJC_CREATE_IMPL(ADViewGroup_LayoutParams, init)
}

NSString *ADViewGroup_LayoutParams_sizeToStringWithInt_(int32_t size) {
  ADViewGroup_LayoutParams_initialize();
  if (size == ADViewGroup_LayoutParams_WRAP_CONTENT) {
    return @"wrap-content";
  }
  if (size == ADViewGroup_LayoutParams_MATCH_PARENT) {
    return @"match-parent";
  }
  return NSString_java_valueOfInt_(size);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADViewGroup_LayoutParams)

@implementation ADViewGroup_MarginLayoutParams

- (instancetype)initWithInt:(int32_t)width
                    withInt:(int32_t)height {
  ADViewGroup_MarginLayoutParams_initWithInt_withInt_(self, width, height);
  return self;
}

- (instancetype)initWithADViewGroup_MarginLayoutParams:(ADViewGroup_MarginLayoutParams *)source {
  ADViewGroup_MarginLayoutParams_initWithADViewGroup_MarginLayoutParams_(self, source);
  return self;
}

- (instancetype)initWithADViewGroup_LayoutParams:(ADViewGroup_LayoutParams *)source {
  ADViewGroup_MarginLayoutParams_initWithADViewGroup_LayoutParams_(self, source);
  return self;
}

- (void)copyMarginsFromWithADViewGroup_MarginLayoutParams:(ADViewGroup_MarginLayoutParams *)source {
  self->leftMargin_ = ((ADViewGroup_MarginLayoutParams *) nil_chk(source))->leftMargin_;
  self->topMargin_ = source->topMargin_;
  self->rightMargin_ = source->rightMargin_;
  self->bottomMargin_ = source->bottomMargin_;
  self->startMargin_ = source->startMargin_;
  self->endMargin_ = source->endMargin_;
  self->mMarginFlags_ = source->mMarginFlags_;
}

- (void)setMarginsWithInt:(int32_t)left
                  withInt:(int32_t)top
                  withInt:(int32_t)right
                  withInt:(int32_t)bottom {
  leftMargin_ = left;
  topMargin_ = top;
  rightMargin_ = right;
  bottomMargin_ = bottom;
  mMarginFlags_ &= ~ADViewGroup_MarginLayoutParams_LEFT_MARGIN_UNDEFINED_MASK;
  mMarginFlags_ &= ~ADViewGroup_MarginLayoutParams_RIGHT_MARGIN_UNDEFINED_MASK;
  if ([self isMarginRelative]) {
    mMarginFlags_ |= ADViewGroup_MarginLayoutParams_NEED_RESOLUTION_MASK;
  }
  else {
    mMarginFlags_ &= ~ADViewGroup_MarginLayoutParams_NEED_RESOLUTION_MASK;
  }
}

- (void)setMarginsRelativeWithInt:(int32_t)start
                          withInt:(int32_t)top
                          withInt:(int32_t)end
                          withInt:(int32_t)bottom {
  startMargin_ = start;
  topMargin_ = top;
  endMargin_ = end;
  bottomMargin_ = bottom;
  mMarginFlags_ |= ADViewGroup_MarginLayoutParams_NEED_RESOLUTION_MASK;
}

- (void)setMarginStartWithInt:(int32_t)start {
  startMargin_ = start;
  mMarginFlags_ |= ADViewGroup_MarginLayoutParams_NEED_RESOLUTION_MASK;
}

- (int32_t)getMarginStart {
  if (startMargin_ != ADViewGroup_MarginLayoutParams_DEFAULT_MARGIN_RELATIVE) return startMargin_;
  if ((mMarginFlags_ & ADViewGroup_MarginLayoutParams_NEED_RESOLUTION_MASK) == ADViewGroup_MarginLayoutParams_NEED_RESOLUTION_MASK) {
    ADViewGroup_MarginLayoutParams_doResolveMargins(self);
  }
  switch (mMarginFlags_ & ADViewGroup_MarginLayoutParams_LAYOUT_DIRECTION_MASK) {
    case ADView_LAYOUT_DIRECTION_RTL:
    return rightMargin_;
    case ADView_LAYOUT_DIRECTION_LTR:
    default:
    return leftMargin_;
  }
}

- (void)setMarginEndWithInt:(int32_t)end {
  endMargin_ = end;
  mMarginFlags_ |= ADViewGroup_MarginLayoutParams_NEED_RESOLUTION_MASK;
}

- (int32_t)getMarginEnd {
  if (endMargin_ != ADViewGroup_MarginLayoutParams_DEFAULT_MARGIN_RELATIVE) return endMargin_;
  if ((mMarginFlags_ & ADViewGroup_MarginLayoutParams_NEED_RESOLUTION_MASK) == ADViewGroup_MarginLayoutParams_NEED_RESOLUTION_MASK) {
    ADViewGroup_MarginLayoutParams_doResolveMargins(self);
  }
  switch (mMarginFlags_ & ADViewGroup_MarginLayoutParams_LAYOUT_DIRECTION_MASK) {
    case ADView_LAYOUT_DIRECTION_RTL:
    return leftMargin_;
    case ADView_LAYOUT_DIRECTION_LTR:
    default:
    return rightMargin_;
  }
}

- (bool)isMarginRelative {
  return (startMargin_ != ADViewGroup_MarginLayoutParams_DEFAULT_MARGIN_RELATIVE || endMargin_ != ADViewGroup_MarginLayoutParams_DEFAULT_MARGIN_RELATIVE);
}

- (void)setLayoutDirectionWithInt:(int32_t)layoutDirection {
  if (layoutDirection != ADView_LAYOUT_DIRECTION_LTR && layoutDirection != ADView_LAYOUT_DIRECTION_RTL) return;
  if (layoutDirection != (mMarginFlags_ & ADViewGroup_MarginLayoutParams_LAYOUT_DIRECTION_MASK)) {
    mMarginFlags_ &= ~ADViewGroup_MarginLayoutParams_LAYOUT_DIRECTION_MASK;
    mMarginFlags_ |= (layoutDirection & ADViewGroup_MarginLayoutParams_LAYOUT_DIRECTION_MASK);
    if ([self isMarginRelative]) {
      mMarginFlags_ |= ADViewGroup_MarginLayoutParams_NEED_RESOLUTION_MASK;
    }
    else {
      mMarginFlags_ &= ~ADViewGroup_MarginLayoutParams_NEED_RESOLUTION_MASK;
    }
  }
}

- (int32_t)getLayoutDirection {
  return (mMarginFlags_ & ADViewGroup_MarginLayoutParams_LAYOUT_DIRECTION_MASK);
}

- (void)resolveLayoutDirectionWithInt:(int32_t)layoutDirection {
  [self setLayoutDirectionWithInt:layoutDirection];
  if (![self isMarginRelative] || (mMarginFlags_ & ADViewGroup_MarginLayoutParams_NEED_RESOLUTION_MASK) != ADViewGroup_MarginLayoutParams_NEED_RESOLUTION_MASK) return;
  ADViewGroup_MarginLayoutParams_doResolveMargins(self);
}

- (void)doResolveMargins {
  ADViewGroup_MarginLayoutParams_doResolveMargins(self);
}

- (bool)isLayoutRtl {
  return (mMarginFlags_ & ADViewGroup_MarginLayoutParams_LAYOUT_DIRECTION_MASK) == ADView_LAYOUT_DIRECTION_RTL;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 3, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 8, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 8, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:withInt:);
  methods[1].selector = @selector(initWithADViewGroup_MarginLayoutParams:);
  methods[2].selector = @selector(initWithADViewGroup_LayoutParams:);
  methods[3].selector = @selector(copyMarginsFromWithADViewGroup_MarginLayoutParams:);
  methods[4].selector = @selector(setMarginsWithInt:withInt:withInt:withInt:);
  methods[5].selector = @selector(setMarginsRelativeWithInt:withInt:withInt:withInt:);
  methods[6].selector = @selector(setMarginStartWithInt:);
  methods[7].selector = @selector(getMarginStart);
  methods[8].selector = @selector(setMarginEndWithInt:);
  methods[9].selector = @selector(getMarginEnd);
  methods[10].selector = @selector(isMarginRelative);
  methods[11].selector = @selector(setLayoutDirectionWithInt:);
  methods[12].selector = @selector(getLayoutDirection);
  methods[13].selector = @selector(resolveLayoutDirectionWithInt:);
  methods[14].selector = @selector(doResolveMargins);
  methods[15].selector = @selector(isLayoutRtl);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "leftMargin_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "topMargin_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "rightMargin_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "bottomMargin_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "startMargin_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "endMargin_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "DEFAULT_MARGIN_RELATIVE", "I", .constantValue.asInt = ADViewGroup_MarginLayoutParams_DEFAULT_MARGIN_RELATIVE, 0x19, -1, -1, -1, -1 },
    { "mMarginFlags_", "B", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "LAYOUT_DIRECTION_MASK", "I", .constantValue.asInt = ADViewGroup_MarginLayoutParams_LAYOUT_DIRECTION_MASK, 0x1a, -1, -1, -1, -1 },
    { "LEFT_MARGIN_UNDEFINED_MASK", "I", .constantValue.asInt = ADViewGroup_MarginLayoutParams_LEFT_MARGIN_UNDEFINED_MASK, 0x1a, -1, -1, -1, -1 },
    { "RIGHT_MARGIN_UNDEFINED_MASK", "I", .constantValue.asInt = ADViewGroup_MarginLayoutParams_RIGHT_MARGIN_UNDEFINED_MASK, 0x1a, -1, -1, -1, -1 },
    { "RTL_COMPATIBILITY_MODE_MASK", "I", .constantValue.asInt = ADViewGroup_MarginLayoutParams_RTL_COMPATIBILITY_MODE_MASK, 0x1a, -1, -1, -1, -1 },
    { "NEED_RESOLUTION_MASK", "I", .constantValue.asInt = ADViewGroup_MarginLayoutParams_NEED_RESOLUTION_MASK, 0x1a, -1, -1, -1, -1 },
    { "DEFAULT_MARGIN_RESOLVED", "I", .constantValue.asInt = ADViewGroup_MarginLayoutParams_DEFAULT_MARGIN_RESOLVED, 0x1a, -1, -1, -1, -1 },
    { "UNDEFINED_MARGIN", "I", .constantValue.asInt = ADViewGroup_MarginLayoutParams_UNDEFINED_MARGIN, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "II", "LADViewGroup_MarginLayoutParams;", "LADViewGroup_LayoutParams;", "copyMarginsFrom", "setMargins", "IIII", "setMarginsRelative", "setMarginStart", "I", "setMarginEnd", "setLayoutDirection", "resolveLayoutDirection", "LADViewGroup;" };
  static const J2ObjcClassInfo _ADViewGroup_MarginLayoutParams = { "MarginLayoutParams", "r.android.view", ptrTable, methods, fields, 7, 0x9, 16, 15, 12, -1, -1, -1, -1 };
  return &_ADViewGroup_MarginLayoutParams;
}

@end

void ADViewGroup_MarginLayoutParams_initWithInt_withInt_(ADViewGroup_MarginLayoutParams *self, int32_t width, int32_t height) {
  ADViewGroup_LayoutParams_initWithInt_withInt_(self, width, height);
  self->startMargin_ = ADViewGroup_MarginLayoutParams_DEFAULT_MARGIN_RELATIVE;
  self->endMargin_ = ADViewGroup_MarginLayoutParams_DEFAULT_MARGIN_RELATIVE;
  self->mMarginFlags_ |= ADViewGroup_MarginLayoutParams_LEFT_MARGIN_UNDEFINED_MASK;
  self->mMarginFlags_ |= ADViewGroup_MarginLayoutParams_RIGHT_MARGIN_UNDEFINED_MASK;
  self->mMarginFlags_ &= ~ADViewGroup_MarginLayoutParams_NEED_RESOLUTION_MASK;
  self->mMarginFlags_ &= ~ADViewGroup_MarginLayoutParams_RTL_COMPATIBILITY_MODE_MASK;
}

ADViewGroup_MarginLayoutParams *new_ADViewGroup_MarginLayoutParams_initWithInt_withInt_(int32_t width, int32_t height) {
  J2OBJC_NEW_IMPL(ADViewGroup_MarginLayoutParams, initWithInt_withInt_, width, height)
}

ADViewGroup_MarginLayoutParams *create_ADViewGroup_MarginLayoutParams_initWithInt_withInt_(int32_t width, int32_t height) {
  J2OBJC_CREATE_IMPL(ADViewGroup_MarginLayoutParams, initWithInt_withInt_, width, height)
}

void ADViewGroup_MarginLayoutParams_initWithADViewGroup_MarginLayoutParams_(ADViewGroup_MarginLayoutParams *self, ADViewGroup_MarginLayoutParams *source) {
  ADViewGroup_LayoutParams_init(self);
  self->startMargin_ = ADViewGroup_MarginLayoutParams_DEFAULT_MARGIN_RELATIVE;
  self->endMargin_ = ADViewGroup_MarginLayoutParams_DEFAULT_MARGIN_RELATIVE;
  self->width_ = ((ADViewGroup_MarginLayoutParams *) nil_chk(source))->width_;
  self->height_ = source->height_;
  self->leftMargin_ = source->leftMargin_;
  self->topMargin_ = source->topMargin_;
  self->rightMargin_ = source->rightMargin_;
  self->bottomMargin_ = source->bottomMargin_;
  self->startMargin_ = source->startMargin_;
  self->endMargin_ = source->endMargin_;
  self->mMarginFlags_ = source->mMarginFlags_;
}

ADViewGroup_MarginLayoutParams *new_ADViewGroup_MarginLayoutParams_initWithADViewGroup_MarginLayoutParams_(ADViewGroup_MarginLayoutParams *source) {
  J2OBJC_NEW_IMPL(ADViewGroup_MarginLayoutParams, initWithADViewGroup_MarginLayoutParams_, source)
}

ADViewGroup_MarginLayoutParams *create_ADViewGroup_MarginLayoutParams_initWithADViewGroup_MarginLayoutParams_(ADViewGroup_MarginLayoutParams *source) {
  J2OBJC_CREATE_IMPL(ADViewGroup_MarginLayoutParams, initWithADViewGroup_MarginLayoutParams_, source)
}

void ADViewGroup_MarginLayoutParams_initWithADViewGroup_LayoutParams_(ADViewGroup_MarginLayoutParams *self, ADViewGroup_LayoutParams *source) {
  ADViewGroup_LayoutParams_initWithADViewGroup_LayoutParams_(self, source);
  self->startMargin_ = ADViewGroup_MarginLayoutParams_DEFAULT_MARGIN_RELATIVE;
  self->endMargin_ = ADViewGroup_MarginLayoutParams_DEFAULT_MARGIN_RELATIVE;
  self->mMarginFlags_ |= ADViewGroup_MarginLayoutParams_LEFT_MARGIN_UNDEFINED_MASK;
  self->mMarginFlags_ |= ADViewGroup_MarginLayoutParams_RIGHT_MARGIN_UNDEFINED_MASK;
  self->mMarginFlags_ &= ~ADViewGroup_MarginLayoutParams_NEED_RESOLUTION_MASK;
  self->mMarginFlags_ &= ~ADViewGroup_MarginLayoutParams_RTL_COMPATIBILITY_MODE_MASK;
}

ADViewGroup_MarginLayoutParams *new_ADViewGroup_MarginLayoutParams_initWithADViewGroup_LayoutParams_(ADViewGroup_LayoutParams *source) {
  J2OBJC_NEW_IMPL(ADViewGroup_MarginLayoutParams, initWithADViewGroup_LayoutParams_, source)
}

ADViewGroup_MarginLayoutParams *create_ADViewGroup_MarginLayoutParams_initWithADViewGroup_LayoutParams_(ADViewGroup_LayoutParams *source) {
  J2OBJC_CREATE_IMPL(ADViewGroup_MarginLayoutParams, initWithADViewGroup_LayoutParams_, source)
}

void ADViewGroup_MarginLayoutParams_doResolveMargins(ADViewGroup_MarginLayoutParams *self) {
  if ((self->mMarginFlags_ & ADViewGroup_MarginLayoutParams_RTL_COMPATIBILITY_MODE_MASK) == ADViewGroup_MarginLayoutParams_RTL_COMPATIBILITY_MODE_MASK) {
    if ((self->mMarginFlags_ & ADViewGroup_MarginLayoutParams_LEFT_MARGIN_UNDEFINED_MASK) == ADViewGroup_MarginLayoutParams_LEFT_MARGIN_UNDEFINED_MASK && self->startMargin_ > ADViewGroup_MarginLayoutParams_DEFAULT_MARGIN_RELATIVE) {
      self->leftMargin_ = self->startMargin_;
    }
    if ((self->mMarginFlags_ & ADViewGroup_MarginLayoutParams_RIGHT_MARGIN_UNDEFINED_MASK) == ADViewGroup_MarginLayoutParams_RIGHT_MARGIN_UNDEFINED_MASK && self->endMargin_ > ADViewGroup_MarginLayoutParams_DEFAULT_MARGIN_RELATIVE) {
      self->rightMargin_ = self->endMargin_;
    }
  }
  else {
    switch (self->mMarginFlags_ & ADViewGroup_MarginLayoutParams_LAYOUT_DIRECTION_MASK) {
      case ADView_LAYOUT_DIRECTION_RTL:
      self->leftMargin_ = (self->endMargin_ > ADViewGroup_MarginLayoutParams_DEFAULT_MARGIN_RELATIVE) ? self->endMargin_ : ADViewGroup_MarginLayoutParams_DEFAULT_MARGIN_RESOLVED;
      self->rightMargin_ = (self->startMargin_ > ADViewGroup_MarginLayoutParams_DEFAULT_MARGIN_RELATIVE) ? self->startMargin_ : ADViewGroup_MarginLayoutParams_DEFAULT_MARGIN_RESOLVED;
      break;
      case ADView_LAYOUT_DIRECTION_LTR:
      default:
      self->leftMargin_ = (self->startMargin_ > ADViewGroup_MarginLayoutParams_DEFAULT_MARGIN_RELATIVE) ? self->startMargin_ : ADViewGroup_MarginLayoutParams_DEFAULT_MARGIN_RESOLVED;
      self->rightMargin_ = (self->endMargin_ > ADViewGroup_MarginLayoutParams_DEFAULT_MARGIN_RELATIVE) ? self->endMargin_ : ADViewGroup_MarginLayoutParams_DEFAULT_MARGIN_RESOLVED;
      break;
    }
  }
  self->mMarginFlags_ &= ~ADViewGroup_MarginLayoutParams_NEED_RESOLUTION_MASK;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADViewGroup_MarginLayoutParams)

@implementation ADViewGroup_DragEvent

- (instancetype)initWithADViewGroup:(ADViewGroup *)outer$ {
  ADViewGroup_DragEvent_initWithADViewGroup_(self, outer$);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithADViewGroup:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LADViewGroup;" };
  static const J2ObjcClassInfo _ADViewGroup_DragEvent = { "DragEvent", "r.android.view", ptrTable, methods, NULL, 7, 0x0, 1, 0, 0, -1, -1, -1, -1 };
  return &_ADViewGroup_DragEvent;
}

@end

void ADViewGroup_DragEvent_initWithADViewGroup_(ADViewGroup_DragEvent *self, ADViewGroup *outer$) {
  NSObject_init(self);
}

ADViewGroup_DragEvent *new_ADViewGroup_DragEvent_initWithADViewGroup_(ADViewGroup *outer$) {
  J2OBJC_NEW_IMPL(ADViewGroup_DragEvent, initWithADViewGroup_, outer$)
}

ADViewGroup_DragEvent *create_ADViewGroup_DragEvent_initWithADViewGroup_(ADViewGroup *outer$) {
  J2OBJC_CREATE_IMPL(ADViewGroup_DragEvent, initWithADViewGroup_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADViewGroup_DragEvent)
