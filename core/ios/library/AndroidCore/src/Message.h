//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroid\src\main\java\r\android\os\Message.java
//

#import <Foundation/Foundation.h>
#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_Message")
#ifdef RESTRICT_Message
#define INCLUDE_ALL_Message 0
#else
#define INCLUDE_ALL_Message 1
#endif
#undef RESTRICT_Message

#if !defined (ADMessage_) && (INCLUDE_ALL_Message || defined(INCLUDE_ADMessage))
#define ADMessage_

@class ADBundle;
@class ADHandler;
@class ADMessenger;
@class JavaLangBoolean;
@class JavaLangInteger;
@class JavaLangLong;
@class NSString;
@protocol JavaLangRunnable;

/*!
 @brief Defines a message containing a description and arbitrary data object that can be
  sent to a <code>Handler</code>.This object contains two extra int fields and an
  extra object field that allow you to not do allocations in many cases.
 <p class="note">While the constructor of Message is public, the best way to get
  one of these is to call <code>Message.obtain()</code> or one of the 
 <code>Handler.obtainMessage()</code> methods, which will pull
  them from a pool of recycled objects.</p>
 */
@interface ADMessage : NSObject {
 @public
  /*!
   @brief User-defined message code so that the recipient can identify
  what this message is about.Each <code>Handler</code> has its own name-space
  for message codes, so you do not need to worry about yours conflicting
  with other handlers.
   */
  int32_t what_;
  /*!
   @brief arg1 and arg2 are lower-cost alternatives to using 
 <code>setData()</code> if you only need to store a
  few integer values.
   */
  int32_t arg1_;
  /*!
   @brief arg1 and arg2 are lower-cost alternatives to using 
 <code>setData()</code> if you only need to store a
  few integer values.
   */
  int32_t arg2_;
  /*!
   @brief An arbitrary object to send to the recipient.When using 
 <code>Messenger</code> to send the message across processes this can only
  be non-null if it contains a Parcelable of a framework class (not one
  implemented by the application).
   For other data transfer use 
 <code>setData</code>.
  
 <p>Note that Parcelable objects here are not supported prior to
  the <code>r.android.os.Build.VERSION_CODES.FROYO</code> release.
   */
  id obj_;
  /*!
   @brief Optional Messenger where replies to this message can be sent.The
  semantics of exactly how this is used are up to the sender and
  receiver.
   */
  ADMessenger *replyTo_;
  /*!
   @brief Optional field indicating the uid that sent the message.This is
  only valid for messages posted by a <code>Messenger</code>; otherwise,
  it will be -1.
   */
  int32_t sendingUid_;
  /*!
   @brief Optional field indicating the uid that caused this message to be enqueued.
   */
  int32_t workSourceUid_;
  int32_t flags_;
  /*!
   @brief The targeted delivery time of this message.The time-base is 
 <code>SystemClock.uptimeMillis</code>.
   */
  int64_t when_;
  ADBundle *data_;
  ADHandler *target_;
  id<JavaLangRunnable> callback_;
  ADMessage *next_;
}

#pragma mark Public

/*!
 @brief Constructor (but the preferred way to get a Message is to call <code>Message.obtain()</code>).
 */
- (instancetype)init;

/*!
 @brief Make this message like o.Performs a shallow copy of the data field.
 Does not copy the linked list fields, nor the timestamp or
  target/callback of the original message.
 */
- (void)copyFromWithADMessage:(ADMessage *)o OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Retrieve callback object that will execute when this message is handled.
 This object must implement Runnable. This is called by
  the <em>target</em> <code>Handler</code> that is receiving this Message to
  dispatch it.  If
  not set, the message will be dispatched to the receiving Handler's 
 <code>Handler.handleMessage(Message)</code>.
 */
- (id<JavaLangRunnable>)getCallback;

/*!
 @brief Obtains a Bundle of arbitrary data associated with this
  event, lazily creating it if necessary.Set this value by calling 
 <code>setData(Bundle)</code>.
 Note that when transferring data across
  processes via <code>Messenger</code>, you will need to set your ClassLoader
  on the Bundle via <code>Bundle.setClassLoader()</code>
  so that it can instantiate your objects when
  you retrieve them.
 - seealso: #peekData()
 - seealso: #setData(Bundle)
 */
- (ADBundle *)getData;

/*!
 @brief Retrieve the <code>Handler</code> implementation that
  will receive this message.The object must implement 
 <code>Handler.handleMessage()</code>
 .
 Each Handler has its own name-space for
  message codes, so you do not need to
  worry about yours conflicting with other handlers.
 */
- (ADHandler *)getTarget;

/*!
 @brief Return the targeted delivery time of this message, in milliseconds.
 */
- (int64_t)getWhen;

/*!
 @brief Returns true if the message is asynchronous, meaning that it is not
  subject to <code>Looper</code> synchronization barriers.
 @return True if the message is asynchronous.
 - seealso: #setAsynchronous(boolean)
 */
- (bool)isAsynchronous;

/*!
 @brief Return a new Message instance from the global pool.Allows us to
  avoid allocating new objects in many cases.
 */
+ (ADMessage *)obtain;

/*!
 @brief Same as <code>obtain()</code>, but sets the value for the <em>target</em> member on the Message returned.
 @param h Handler to assign to the returned Message object's  <em> target </em>  member.
 @return A Message object from the global pool.
 */
+ (ADMessage *)obtainWithADHandler:(ADHandler *)h;

/*!
 @brief Same as <code>obtain()</code>, but sets the values for both <em>target</em> and 
 <em>what</em> members on the Message.
 @param h Value to assign to the  <em> target </em>  member.
 @param what Value to assign to the  <em> what </em>  member.
 @return A Message object from the global pool.
 */
+ (ADMessage *)obtainWithADHandler:(ADHandler *)h
                           withInt:(int32_t)what;

/*!
 @brief Same as <code>obtain()</code>, but sets the values of the <em>target</em>, <em>what</em>,
  <em>arg1</em>, and <em>arg2</em> members.
 @param h The  <em> target </em>  value to set.
 @param what The  <em> what </em>  value to set.
 @param arg1 The  <em> arg1 </em>  value to set.
 @param arg2 The  <em> arg2 </em>  value to set.
 @return A Message object from the global pool.
 */
+ (ADMessage *)obtainWithADHandler:(ADHandler *)h
                           withInt:(int32_t)what
                           withInt:(int32_t)arg1
                           withInt:(int32_t)arg2;

/*!
 @brief Same as <code>obtain()</code>, but sets the values of the <em>target</em>, <em>what</em>,
  <em>arg1</em>, <em>arg2</em>, and <em>obj</em> members.
 @param h The  <em> target </em>  value to set.
 @param what The  <em> what </em>  value to set.
 @param arg1 The  <em> arg1 </em>  value to set.
 @param arg2 The  <em> arg2 </em>  value to set.
 @param obj The  <em> obj </em>  value to set.
 @return A Message object from the global pool.
 */
+ (ADMessage *)obtainWithADHandler:(ADHandler *)h
                           withInt:(int32_t)what
                           withInt:(int32_t)arg1
                           withInt:(int32_t)arg2
                            withId:(id)obj;

/*!
 @brief Same as <code>obtain()</code>, but sets the values of the <em>target</em>, <em>what</em>, and <em>obj</em>
  members.
 @param h The  <em> target </em>  value to set.
 @param what The  <em> what </em>  value to set.
 @param obj The  <em> object </em>  method to set.
 @return A Message object from the global pool.
 */
+ (ADMessage *)obtainWithADHandler:(ADHandler *)h
                           withInt:(int32_t)what
                            withId:(id)obj;

/*!
 @brief Same as <code>obtain(Handler)</code>, but assigns a callback Runnable on
  the Message that is returned.
 @param h Handler to assign to the returned Message object's  <em> target </em>  member.
 @param callback Runnable that will execute when the message is handled.
 @return A Message object from the global pool.
 */
+ (ADMessage *)obtainWithADHandler:(ADHandler *)h
              withJavaLangRunnable:(id<JavaLangRunnable>)callback;

/*!
 @brief Same as <code>obtain()</code>, but copies the values of an existing
  message (including its target) into the new one.
 @param orig Original message to copy.
 @return A Message object from the global pool.
 */
+ (ADMessage *)obtainWithADMessage:(ADMessage *)orig;

/*!
 @brief Like getData(), but does not lazily create the Bundle.A null
  is returned if the Bundle does not already exist.
 See 
 <code>getData</code> for further information on this.
 - seealso: #getData()
 - seealso: #setData(Bundle)
 */
- (ADBundle *)peekData;

/*!
 @brief Return a Message instance to the global pool.
 <p>
  You MUST NOT touch the Message after calling this function because it has
  effectively been freed.  It is an error to recycle a message that is currently
  enqueued or that is in the process of being delivered to a Handler. 
 </p>
 */
- (void)recycle;

/*!
 @brief Sends this Message to the Handler specified by <code>getTarget</code>.
 Throws a null pointer exception if this field has not been set.
 */
- (void)sendToTarget;

/*!
 @brief Sets whether the message is asynchronous, meaning that it is not
  subject to <code>Looper</code> synchronization barriers.
 <p>
  Certain operations, such as view invalidation, may introduce synchronization
  barriers into the <code>Looper</code>'s message queue to prevent subsequent messages
  from being delivered until some condition is met.  In the case of view invalidation,
  messages which are posted after a call to <code>r.android.view.View.invalidate</code>
  are suspended by means of a synchronization barrier until the next frame is
  ready to be drawn.  The synchronization barrier ensures that the invalidation
  request is completely handled before resuming. 
 </p><p>
  Asynchronous messages are exempt from synchronization barriers.  They typically
  represent interrupts, input events, and other signals that must be handled independently
  even while other work has been suspended. 
 </p><p>
  Note that asynchronous messages may be delivered out of order with respect to
  synchronous messages although they are always delivered in order among themselves.
  If the relative order of these messages matters then they probably should not be
  asynchronous in the first place.  Use with caution. 
 </p>
 @param async True if the message is asynchronous.
 - seealso: #isAsynchronous()
 */
- (void)setAsynchronousWithBoolean:(bool)async;

/*!
 */
- (ADMessage *)setCallbackWithJavaLangRunnable:(id<JavaLangRunnable>)r;

/*!
 @brief Sets a Bundle of arbitrary data values.Use arg1 and arg2 members
  as a lower cost way to send a few simple integer values, if you can.
 - seealso: #getData()
 - seealso: #peekData()
 */
- (void)setDataWithADBundle:(ADBundle *)data;

- (void)setTargetWithADHandler:(ADHandler *)target;

/*!
 @brief Chainable setter for <code>what</code>
 */
- (ADMessage *)setWhatWithInt:(int32_t)what;

- (NSString *)description;

/*!
 */
+ (void)updateCheckRecycleWithInt:(int32_t)targetSdkVersion;

#pragma mark Package-Private

- (bool)isInUse;

- (void)markInUse;

/*!
 @brief Recycles a Message that may be in-use.
 Used internally by the MessageQueue and Looper when disposing of queued Messages.
 */
- (void)recycleUnchecked;

- (NSString *)toStringWithLong:(int64_t)now;

@end

J2OBJC_STATIC_INIT(ADMessage)

J2OBJC_FIELD_SETTER(ADMessage, obj_, id)
J2OBJC_FIELD_SETTER(ADMessage, replyTo_, ADMessenger *)
J2OBJC_FIELD_SETTER(ADMessage, data_, ADBundle *)
J2OBJC_FIELD_SETTER(ADMessage, target_, ADHandler *)
J2OBJC_FIELD_SETTER(ADMessage, callback_, id<JavaLangRunnable>)
J2OBJC_FIELD_SETTER(ADMessage, next_, ADMessage *)

/*!
 @brief Indicates that the uid is not set;
 */
inline int32_t ADMessage_get_UID_NONE(void);
#define ADMessage_UID_NONE -1
J2OBJC_STATIC_FIELD_CONSTANT(ADMessage, UID_NONE, int32_t)

/*!
 @brief If set message is in use.
 This flag is set when the message is enqueued and remains set while it
  is delivered and afterwards when it is recycled.  The flag is only cleared
  when a new message is created or obtained since that is the only time that
  applications are allowed to modify the contents of the message.
  It is an error to attempt to enqueue or recycle a message that is already in use.
 */
inline int32_t ADMessage_get_FLAG_IN_USE(void);
#define ADMessage_FLAG_IN_USE 1
J2OBJC_STATIC_FIELD_CONSTANT(ADMessage, FLAG_IN_USE, int32_t)

/*!
 @brief If set message is asynchronous
 */
inline int32_t ADMessage_get_FLAG_ASYNCHRONOUS(void);
#define ADMessage_FLAG_ASYNCHRONOUS 2
J2OBJC_STATIC_FIELD_CONSTANT(ADMessage, FLAG_ASYNCHRONOUS, int32_t)

/*!
 @brief Flags to clear in the copyFrom method
 */
inline int32_t ADMessage_get_FLAGS_TO_CLEAR_ON_COPY_FROM(void);
#define ADMessage_FLAGS_TO_CLEAR_ON_COPY_FROM 1
J2OBJC_STATIC_FIELD_CONSTANT(ADMessage, FLAGS_TO_CLEAR_ON_COPY_FROM, int32_t)

/*!
 */
inline id ADMessage_get_sPoolSync(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT id ADMessage_sPoolSync;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADMessage, sPoolSync, id)

FOUNDATION_EXPORT ADMessage *ADMessage_obtain(void);

FOUNDATION_EXPORT ADMessage *ADMessage_obtainWithADMessage_(ADMessage *orig);

FOUNDATION_EXPORT ADMessage *ADMessage_obtainWithADHandler_(ADHandler *h);

FOUNDATION_EXPORT ADMessage *ADMessage_obtainWithADHandler_withJavaLangRunnable_(ADHandler *h, id<JavaLangRunnable> callback);

FOUNDATION_EXPORT ADMessage *ADMessage_obtainWithADHandler_withInt_(ADHandler *h, int32_t what);

FOUNDATION_EXPORT ADMessage *ADMessage_obtainWithADHandler_withInt_withId_(ADHandler *h, int32_t what, id obj);

FOUNDATION_EXPORT ADMessage *ADMessage_obtainWithADHandler_withInt_withInt_withInt_(ADHandler *h, int32_t what, int32_t arg1, int32_t arg2);

FOUNDATION_EXPORT ADMessage *ADMessage_obtainWithADHandler_withInt_withInt_withInt_withId_(ADHandler *h, int32_t what, int32_t arg1, int32_t arg2, id obj);

FOUNDATION_EXPORT void ADMessage_updateCheckRecycleWithInt_(int32_t targetSdkVersion);

FOUNDATION_EXPORT void ADMessage_init(ADMessage *self);

FOUNDATION_EXPORT ADMessage *new_ADMessage_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ADMessage *create_ADMessage_init(void);

J2OBJC_TYPE_LITERAL_HEADER(ADMessage)

@compatibility_alias RAndroidOsMessage ADMessage;


#endif

#pragma pop_macro("INCLUDE_ALL_Message")
