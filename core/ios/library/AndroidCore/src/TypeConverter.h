//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroid\src\main\java\r\android\animation\TypeConverter.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_TypeConverter")
#ifdef RESTRICT_TypeConverter
#define INCLUDE_ALL_TypeConverter 0
#else
#define INCLUDE_ALL_TypeConverter 1
#endif
#undef RESTRICT_TypeConverter

#if !defined (ADTypeConverter_) && (INCLUDE_ALL_TypeConverter || defined(INCLUDE_ADTypeConverter))
#define ADTypeConverter_

@class IOSClass;

/*!
 @brief Abstract base class used convert type T to another type V.This
  is necessary when the value types of in animation are different
  from the property type.
 - seealso: PropertyValuesHolder#setConverter(TypeConverter)
 */
@interface ADTypeConverter : NSObject

#pragma mark Public

- (instancetype)initWithIOSClass:(IOSClass *)fromClass
                    withIOSClass:(IOSClass *)toClass;

/*!
 @brief Converts a value from one type to another.
 @param value The Object to convert.
 @return A value of type V, converted from <code>value</code>.
 */
- (id)convertWithId:(id)value;

#pragma mark Package-Private

/*!
 @brief Returns the source conversion type.
 */
- (IOSClass *)getSourceType;

/*!
 @brief Returns the target converted type.Used by the animation system to determine
  the proper setter function to call.
 @return The Class to convert the input to.
 */
- (IOSClass *)getTargetType;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ADTypeConverter)

FOUNDATION_EXPORT void ADTypeConverter_initWithIOSClass_withIOSClass_(ADTypeConverter *self, IOSClass *fromClass, IOSClass *toClass);

J2OBJC_TYPE_LITERAL_HEADER(ADTypeConverter)

@compatibility_alias RAndroidAnimationTypeConverter ADTypeConverter;

#endif

#pragma pop_macro("INCLUDE_ALL_TypeConverter")
