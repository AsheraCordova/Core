//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroid\src\main\java\r\android\util\Property.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "Property.h"
#include "ReflectiveProperty.h"
#include "java/lang/UnsupportedOperationException.h"


@interface ADProperty () {
 @public
  NSString *mName_;
  IOSClass *mType_;
}

@end

J2OBJC_FIELD_SETTER(ADProperty, mName_, NSString *)
J2OBJC_FIELD_SETTER(ADProperty, mType_, IOSClass *)

@implementation ADProperty

+ (ADProperty *)ofWithIOSClass:(IOSClass *)hostType
                  withIOSClass:(IOSClass *)valueType
                  withNSString:(NSString *)name {
  return ADProperty_ofWithIOSClass_withIOSClass_withNSString_(hostType, valueType, name);
}

- (instancetype)initWithIOSClass:(IOSClass *)type
                    withNSString:(NSString *)name {
  ADProperty_initWithIOSClass_withNSString_(self, type, name);
  return self;
}

- (jboolean)isReadOnly {
  return false;
}

- (void)setWithId:(id)object
           withId:(id)value {
  @throw create_JavaLangUnsupportedOperationException_initWithNSString_(JreStrcat("$$$", @"Property ", [self getName], @" is read-only"));
}

- (id)getWithId:(id)object {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSString *)getName {
  return mName_;
}

- (IOSClass *)getType {
  return mType_;
}

- (void)dealloc {
  RELEASE_(mName_);
  RELEASE_(mType_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LADProperty;", 0x9, 0, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, 4, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, 7, -1, -1 },
    { NULL, "LNSObject;", 0x401, 8, 9, -1, 10, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LIOSClass;", 0x1, -1, -1, -1, 11, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(ofWithIOSClass:withIOSClass:withNSString:);
  methods[1].selector = @selector(initWithIOSClass:withNSString:);
  methods[2].selector = @selector(isReadOnly);
  methods[3].selector = @selector(setWithId:withId:);
  methods[4].selector = @selector(getWithId:);
  methods[5].selector = @selector(getName);
  methods[6].selector = @selector(getType);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mName_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mType_", "LIOSClass;", .constantValue.asLong = 0, 0x12, -1, -1, 12, -1 },
  };
  static const void *ptrTable[] = { "of", "LIOSClass;LIOSClass;LNSString;", "<T:Ljava/lang/Object;V:Ljava/lang/Object;>(Ljava/lang/Class<TT;>;Ljava/lang/Class<TV;>;Ljava/lang/String;)Lr/android/util/Property<TT;TV;>;", "LIOSClass;LNSString;", "(Ljava/lang/Class<TV;>;Ljava/lang/String;)V", "set", "LNSObject;LNSObject;", "(TT;TV;)V", "get", "LNSObject;", "(TT;)TV;", "()Ljava/lang/Class<TV;>;", "Ljava/lang/Class<TV;>;", "<T:Ljava/lang/Object;V:Ljava/lang/Object;>Ljava/lang/Object;" };
  static const J2ObjcClassInfo _ADProperty = { "Property", "r.android.util", ptrTable, methods, fields, 7, 0x401, 7, 2, -1, -1, -1, 13, -1 };
  return &_ADProperty;
}

@end

ADProperty *ADProperty_ofWithIOSClass_withIOSClass_withNSString_(IOSClass *hostType, IOSClass *valueType, NSString *name) {
  ADProperty_initialize();
  return create_ADReflectiveProperty_initPackagePrivateWithIOSClass_withIOSClass_withNSString_(hostType, valueType, name);
}

void ADProperty_initWithIOSClass_withNSString_(ADProperty *self, IOSClass *type, NSString *name) {
  NSObject_init(self);
  JreStrongAssign(&self->mName_, name);
  JreStrongAssign(&self->mType_, type);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADProperty)
