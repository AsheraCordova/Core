//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroid\src\main\java\r\android\animation\PropertyValuesHolder.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_PropertyValuesHolder")
#ifdef RESTRICT_PropertyValuesHolder
#define INCLUDE_ALL_PropertyValuesHolder 0
#else
#define INCLUDE_ALL_PropertyValuesHolder 1
#endif
#undef RESTRICT_PropertyValuesHolder
#ifdef INCLUDE_ADPropertyValuesHolder_MultiIntValuesHolder
#define INCLUDE_ADPropertyValuesHolder 1
#endif
#ifdef INCLUDE_ADPropertyValuesHolder_MultiFloatValuesHolder
#define INCLUDE_ADPropertyValuesHolder 1
#endif
#ifdef INCLUDE_ADPropertyValuesHolder_FloatPropertyValuesHolder
#define INCLUDE_ADPropertyValuesHolder 1
#endif
#ifdef INCLUDE_ADPropertyValuesHolder_IntPropertyValuesHolder
#define INCLUDE_ADPropertyValuesHolder 1
#endif

#if !defined (ADPropertyValuesHolder_) && (INCLUDE_ALL_PropertyValuesHolder || defined(INCLUDE_ADPropertyValuesHolder))
#define ADPropertyValuesHolder_

@class ADPath;
@class ADProperty;
@class ADPropertyValuesHolder_PropertyValues;
@class ADTypeConverter;
@class IOSClass;
@class IOSFloatArray;
@class IOSIntArray;
@class IOSObjectArray;
@class JavaLangReflectMethod;
@protocol ADKeyframes;
@protocol ADTypeEvaluator;

/*!
 @brief This class holds information about a property and the values that that property
  should take on during an animation.PropertyValuesHolder objects can be used to create
  animations with ValueAnimator or ObjectAnimator that operate on several different properties
  in parallel.
 */
@interface ADPropertyValuesHolder : NSObject < NSCopying > {
 @public
  /*!
   @brief The name of the property associated with the values.This need not be a real property,
  unless this object is being used with ObjectAnimator.
   But this is the name by which
  aniamted values are looked up with getAnimatedValue(String) in ValueAnimator.
   */
  NSString *mPropertyName_;
  /*!
   */
  ADProperty *mProperty_;
  /*!
   @brief The setter function, if needed.ObjectAnimator hands off this functionality to
  PropertyValuesHolder, since it holds all of the per-property information.
   This
  property is automatically
  derived when the animation starts in setupSetterAndGetter() if using ObjectAnimator.
   */
  JavaLangReflectMethod *mSetter_;
  /*!
   @brief The type of values supplied.This information is used both in deriving the setter/getter
  functions and in deriving the type of TypeEvaluator.
   */
  IOSClass *mValueType_;
  /*!
   @brief The set of keyframes (time/value pairs) that define this animation.
   */
  id<ADKeyframes> mKeyframes_;
  IOSObjectArray *mTmpValueArray_;
}

#pragma mark Public

- (ADPropertyValuesHolder *)java_clone;

/*!
 @brief Gets the name of the property that will be animated.This name will be used to derive
  a setter function that will be called to set animated values.
 For example, a property name of <code>foo</code> will result
  in a call to the function <code>setFoo()</code> on the target object. If either 
 <code>valueFrom</code> or <code>valueTo</code> is null, then a getter function will
  also be derived and called.
 */
- (NSString *)getPropertyName;

/*!
 @brief PropertyValuesHolder is Animators use to hold internal animation related data.
 Therefore, in order to replicate the animation behavior, we need to get data out of
  PropertyValuesHolder.
 */
- (void)getPropertyValuesWithADPropertyValuesHolder_PropertyValues:(ADPropertyValuesHolder_PropertyValues *)values;

/*!
 */
- (IOSClass *)getValueType;

/*!
 @brief Constructs and returns a PropertyValuesHolder with a given property and
  set of float values.
 @param property The property being animated. Should not be null.
 @param values The values that the property will animate between.
 @return PropertyValuesHolder The constructed PropertyValuesHolder object.
 */
+ (ADPropertyValuesHolder *)ofFloatWithADProperty:(ADProperty *)property
                                   withFloatArray:(IOSFloatArray *)values;

/*!
 @brief Constructs and returns a PropertyValuesHolder with a given property name and
  set of float values.
 @param propertyName The name of the property being animated.
 @param values The values that the named property will animate between.
 @return PropertyValuesHolder The constructed PropertyValuesHolder object.
 */
+ (ADPropertyValuesHolder *)ofFloatWithNSString:(NSString *)propertyName
                                 withFloatArray:(IOSFloatArray *)values;

/*!
 @brief Constructs and returns a PropertyValuesHolder with a given property and
  set of int values.
 @param property The property being animated. Should not be null.
 @param values The values that the property will animate between.
 @return PropertyValuesHolder The constructed PropertyValuesHolder object.
 */
+ (ADPropertyValuesHolder *)ofIntWithADProperty:(ADProperty *)property
                                   withIntArray:(IOSIntArray *)values;

/*!
 @brief Constructs and returns a PropertyValuesHolder with a given property name and
  set of int values.
 @param propertyName The name of the property being animated.
 @param values The values that the named property will animate between.
 @return PropertyValuesHolder The constructed PropertyValuesHolder object.
 */
+ (ADPropertyValuesHolder *)ofIntWithNSString:(NSString *)propertyName
                                 withIntArray:(IOSIntArray *)values;

/*!
 @brief Constructs and returns a PropertyValuesHolder object with the specified property and set
  of values.These values can be of any type, but the type should be consistent so that
  an appropriate <code>r.android.animation.TypeEvaluator</code> can be found that matches
  the common type.
 <p>If there is only one value, it is assumed to be the end value of an animation,
  and an initial value will be derived, if possible, by calling the property's 
 <code>r.android.util.Property.get(Object)</code> function.
  Also, if any value is null, the value will be filled in when the animation
  starts in the same way. This mechanism of automatically getting null values only works
  if the PropertyValuesHolder object is used in conjunction with 
 <code>ObjectAnimator</code>, since otherwise PropertyValuesHolder has
  no way of determining what the value should be.
 @param property The property associated with this set of values. Should not be null.
 @param values The set of values to animate between.
 */
+ (ADPropertyValuesHolder *)ofKeyframeWithADProperty:(ADProperty *)property
                                 withADKeyframeArray:(IOSObjectArray *)values;

/*!
 @brief Constructs and returns a PropertyValuesHolder object with the specified property name and set
  of values.These values can be of any type, but the type should be consistent so that
  an appropriate <code>r.android.animation.TypeEvaluator</code> can be found that matches
  the common type.
 <p>If there is only one value, it is assumed to be the end value of an animation,
  and an initial value will be derived, if possible, by calling a getter function
  on the object. Also, if any value is null, the value will be filled in when the animation
  starts in the same way. This mechanism of automatically getting null values only works
  if the PropertyValuesHolder object is used in conjunction 
 <code>ObjectAnimator</code>, and with a getter function
  derived automatically from <code>propertyName</code>, since otherwise PropertyValuesHolder has
  no way of determining what the value should be.
 @param propertyName The name of the property associated with this set of values. This  can be the actual property name to be used when using a ObjectAnimator object, or
   just a name used to get animated values, such as if this object is used with an
   ValueAnimator object.
 @param values The set of values to animate between.
 */
+ (ADPropertyValuesHolder *)ofKeyframeWithNSString:(NSString *)propertyName
                               withADKeyframeArray:(IOSObjectArray *)values;

+ (ADPropertyValuesHolder *)ofKeyframesWithADProperty:(ADProperty *)property
                                      withADKeyframes:(id<ADKeyframes>)keyframes;

+ (ADPropertyValuesHolder *)ofKeyframesWithNSString:(NSString *)propertyName
                                    withADKeyframes:(id<ADKeyframes>)keyframes;

/*!
 @brief Constructs and returns a PropertyValuesHolder with a given property name and
  set of <code>float[]</code> values.At least two <code>float[]</code> values must be supplied,
  a start and end value.
 If more values are supplied, the values will be animated from the
  start, through all intermediate values to the end value. When used with ObjectAnimator,
  the elements of the array represent the parameters of the setter function.
 @param propertyName The name of the property being animated. Can also be the                      case-sensitive name of the entire setter method. Should not be null.
 @param values The values that the property will animate between.
 @return PropertyValuesHolder The constructed PropertyValuesHolder object.
 - seealso: FloatArrayEvaluator#FloatArrayEvaluator(float[])
 - seealso: ObjectAnimator#ofMultiFloat(Object, String, TypeConverter, TypeEvaluator, Object[])
 */
+ (ADPropertyValuesHolder *)ofMultiFloatWithNSString:(NSString *)propertyName
                                     withFloatArray2:(IOSObjectArray *)values;

/*!
 @brief Constructs and returns a PropertyValuesHolder with a given property name to use
  as a multi-float setter.The values are animated a String the path, with the first
  parameter of the setter set to the x coordinate and the second set to the y coordinate.
 @param propertyName The name of the property being animated. Can also be the                      case-sensitive name of the entire setter method. Should not be null.
                       The setter must take exactly two 
  <code> float </code>  parameters.
 @param path The Path a String which the values should be animated.
 @return PropertyValuesHolder The constructed PropertyValuesHolder object.
 - seealso: ObjectAnimator#ofPropertyValuesHolder(Object, PropertyValuesHolder...)
 */
+ (ADPropertyValuesHolder *)ofMultiFloatWithNSString:(NSString *)propertyName
                                          withADPath:(ADPath *)path;

/*!
 @brief Constructs and returns a PropertyValuesHolder object with the specified property name or
  setter name for use in a multi-float setter function using ObjectAnimator.The values can be
  of any type, but the type should be consistent so that the supplied 
 <code>r.android.animation.TypeEvaluator</code> can be used to to evaluate the animated value.
 The 
 <code>converter</code> converts the values to parameters in the setter function. 
 <p>At least two values must be supplied, a start and an end value.</p>
 @param propertyName The name of the property to associate with the set of values. This                      may also be the complete name of a setter function.
 @param converter Converts  <code> values </code>  into float parameters for the setter.
                       Can be null if the Keyframes have float[] values.
 @param evaluator Used to interpolate between values.
 @param values The values at specific fractional times to evaluate between
 @return A PropertyValuesHolder for a multi-float parameter setter.
 */
+ (ADPropertyValuesHolder *)ofMultiFloatWithNSString:(NSString *)propertyName
                                 withADTypeConverter:(ADTypeConverter *)converter
                                 withADTypeEvaluator:(id<ADTypeEvaluator>)evaluator
                                 withADKeyframeArray:(IOSObjectArray *)values;

/*!
 @brief Constructs and returns a PropertyValuesHolder with a given property and
  set of Object values for use with ObjectAnimator multi-value setters.The Object
  values are converted to <code>float[]</code> using the converter.
 @param propertyName The property being animated or complete name of the setter.                      Should not be null.
 @param converter Used to convert the animated value to setter parameters.
 @param evaluator A TypeEvaluator that will be called on each animation frame to  provide the necessary interpolation between the Object values to derive the animated
   value.
 @param values The values that the property will animate between.
 @return PropertyValuesHolder The constructed PropertyValuesHolder object.
 - seealso: ObjectAnimator#ofMultiFloat(Object, String, TypeConverter, TypeEvaluator, Object[])
 */
+ (ADPropertyValuesHolder *)ofMultiFloatWithNSString:(NSString *)propertyName
                                 withADTypeConverter:(ADTypeConverter *)converter
                                 withADTypeEvaluator:(id<ADTypeEvaluator>)evaluator
                                   withNSObjectArray:(IOSObjectArray *)values;

/*!
 @brief Constructs and returns a PropertyValuesHolder with a given property name and
  set of <code>int[]</code> values.At least two <code>int[]</code> values must be supplied,
  a start and end value.
 If more values are supplied, the values will be animated from the
  start, through all intermediate values to the end value. When used with ObjectAnimator,
  the elements of the array represent the parameters of the setter function.
 @param propertyName The name of the property being animated. Can also be the                      case-sensitive name of the entire setter method. Should not be null.
 @param values The values that the property will animate between.
 @return PropertyValuesHolder The constructed PropertyValuesHolder object.
 - seealso: IntArrayEvaluator#IntArrayEvaluator(int[])
 - seealso: ObjectAnimator#ofMultiInt(Object, String, TypeConverter, TypeEvaluator, Object[])
 */
+ (ADPropertyValuesHolder *)ofMultiIntWithNSString:(NSString *)propertyName
                                     withIntArray2:(IOSObjectArray *)values;

/*!
 @brief Constructs and returns a PropertyValuesHolder with a given property name to use
  as a multi-int setter.The values are animated a String the path, with the first
  parameter of the setter set to the x coordinate and the second set to the y coordinate.
 @param propertyName The name of the property being animated. Can also be the                      case-sensitive name of the entire setter method. Should not be null.
                       The setter must take exactly two 
  <code> int </code>  parameters.
 @param path The Path a String which the values should be animated.
 @return PropertyValuesHolder The constructed PropertyValuesHolder object.
 - seealso: ObjectAnimator#ofPropertyValuesHolder(Object, PropertyValuesHolder...)
 */
+ (ADPropertyValuesHolder *)ofMultiIntWithNSString:(NSString *)propertyName
                                        withADPath:(ADPath *)path;

/*!
 @brief Constructs and returns a PropertyValuesHolder object with the specified property name or
  setter name for use in a multi-int setter function using ObjectAnimator.The values can be
  of any type, but the type should be consistent so that the supplied 
 <code>r.android.animation.TypeEvaluator</code> can be used to to evaluate the animated value.
 The 
 <code>converter</code> converts the values to parameters in the setter function. 
 <p>At least two values must be supplied, a start and an end value.</p>
 @param propertyName The name of the property to associate with the set of values. This                      may also be the complete name of a setter function.
 @param converter Converts  <code> values </code>  into int parameters for the setter.
                       Can be null if the Keyframes have int[] values.
 @param evaluator Used to interpolate between values.
 @param values The values at specific fractional times to evaluate between
 @return A PropertyValuesHolder for a multi-int parameter setter.
 */
+ (ADPropertyValuesHolder *)ofMultiIntWithNSString:(NSString *)propertyName
                               withADTypeConverter:(ADTypeConverter *)converter
                               withADTypeEvaluator:(id<ADTypeEvaluator>)evaluator
                               withADKeyframeArray:(IOSObjectArray *)values;

/*!
 @brief Constructs and returns a PropertyValuesHolder with a given property and
  set of Object values for use with ObjectAnimator multi-value setters.The Object
  values are converted to <code>int[]</code> using the converter.
 @param propertyName The property being animated or complete name of the setter.                      Should not be null.
 @param converter Used to convert the animated value to setter parameters.
 @param evaluator A TypeEvaluator that will be called on each animation frame to  provide the necessary interpolation between the Object values to derive the animated
   value.
 @param values The values that the property will animate between.
 @return PropertyValuesHolder The constructed PropertyValuesHolder object.
 - seealso: ObjectAnimator#ofMultiInt(Object, String, TypeConverter, TypeEvaluator, Object[])
 - seealso: ObjectAnimator#ofPropertyValuesHolder(Object, PropertyValuesHolder...)
 */
+ (ADPropertyValuesHolder *)ofMultiIntWithNSString:(NSString *)propertyName
                               withADTypeConverter:(ADTypeConverter *)converter
                               withADTypeEvaluator:(id<ADTypeEvaluator>)evaluator
                                 withNSObjectArray:(IOSObjectArray *)values;

/*!
 @brief Constructs and returns a PropertyValuesHolder with a given property and
  a Path a String which the values should be animated.This variant supports a 
 <code>TypeConverter</code> to convert from <code>PointF</code> to the target
  type.
 <p>The PointF passed to <code>converter</code> or <code>property</code>, if 
 <code>converter</code> is <code>null</code>, is reused on each animation frame and should
  not be stored by the setter or TypeConverter.</p>
 @param property The property being animated. Should not be null.
 @param converter Converts a PointF to the type associated with the setter. May be                   null if conversion is unnecessary.
 @param path The Path a String which the values should be animated.
 @return PropertyValuesHolder The constructed PropertyValuesHolder object.
 */
+ (ADPropertyValuesHolder *)ofObjectWithADProperty:(ADProperty *)property
                               withADTypeConverter:(ADTypeConverter *)converter
                                        withADPath:(ADPath *)path;

/*!
 @brief Constructs and returns a PropertyValuesHolder with a given property and
  set of Object values.This variant also takes a TypeEvaluator because the system
  cannot automatically interpolate between objects of unknown type.
 This variant also
  takes a <code>TypeConverter</code> to convert from animated values to the type
  of the property. If only one value is supplied, the <code>TypeConverter</code>
  must be a <code>r.android.animation.BidirectionalTypeConverter</code> to retrieve the current
  value. 
 <p><strong>Note:</strong> The Object values are stored as references to the original
  objects, which means that changes to those objects after this method is called will
  affect the values on the PropertyValuesHolder. If the objects will be mutated externally
  after this method is called, callers should pass a copy of those objects instead.
 @param property The property being animated. Should not be null.
 @param converter Converts the animated object to the Property type.
 @param evaluator A TypeEvaluator that will be called on each animation frame to  provide the necessary interpolation between the Object values to derive the animated
   value.
 @param values The values that the property will animate between.
 @return PropertyValuesHolder The constructed PropertyValuesHolder object.
 - seealso: #setConverter(TypeConverter)
 - seealso: TypeConverter
 */
+ (ADPropertyValuesHolder *)ofObjectWithADProperty:(ADProperty *)property
                               withADTypeConverter:(ADTypeConverter *)converter
                               withADTypeEvaluator:(id<ADTypeEvaluator>)evaluator
                                 withNSObjectArray:(IOSObjectArray *)values;

/*!
 @brief Constructs and returns a PropertyValuesHolder with a given property and
  set of Object values.This variant also takes a TypeEvaluator because the system
  cannot automatically interpolate between objects of unknown type.
 <p><strong>Note:</strong> The Object values are stored as references to the original
  objects, which means that changes to those objects after this method is called will
  affect the values on the PropertyValuesHolder. If the objects will be mutated externally
  after this method is called, callers should pass a copy of those objects instead.
 @param property The property being animated. Should not be null.
 @param evaluator A TypeEvaluator that will be called on each animation frame to  provide the necessary interpolation between the Object values to derive the animated
   value.
 @param values The values that the property will animate between.
 @return PropertyValuesHolder The constructed PropertyValuesHolder object.
 */
+ (ADPropertyValuesHolder *)ofObjectWithADProperty:(ADProperty *)property
                               withADTypeEvaluator:(id<ADTypeEvaluator>)evaluator
                                 withNSObjectArray:(IOSObjectArray *)values;

/*!
 @brief Constructs and returns a PropertyValuesHolder with a given property name and
  a Path a String which the values should be animated.This variant supports a 
 <code>TypeConverter</code> to convert from <code>PointF</code> to the target
  type.
 <p>The PointF passed to <code>converter</code> or <code>property</code>, if 
 <code>converter</code> is <code>null</code>, is reused on each animation frame and should
  not be stored by the setter or TypeConverter.</p>
 @param propertyName The name of the property being animated.
 @param converter Converts a PointF to the type associated with the setter. May be                   null if conversion is unnecessary.
 @param path The Path a String which the values should be animated.
 @return PropertyValuesHolder The constructed PropertyValuesHolder object.
 */
+ (ADPropertyValuesHolder *)ofObjectWithNSString:(NSString *)propertyName
                             withADTypeConverter:(ADTypeConverter *)converter
                                      withADPath:(ADPath *)path;

/*!
 @brief Constructs and returns a PropertyValuesHolder with a given property name and
  set of Object values.This variant also takes a TypeEvaluator because the system
  cannot automatically interpolate between objects of unknown type.
 <p><strong>Note:</strong> The Object values are stored as references to the original
  objects, which means that changes to those objects after this method is called will
  affect the values on the PropertyValuesHolder. If the objects will be mutated externally
  after this method is called, callers should pass a copy of those objects instead.
 @param propertyName The name of the property being animated.
 @param evaluator A TypeEvaluator that will be called on each animation frame to  provide the necessary interpolation between the Object values to derive the animated
   value.
 @param values The values that the named property will animate between.
 @return PropertyValuesHolder The constructed PropertyValuesHolder object.
 */
+ (ADPropertyValuesHolder *)ofObjectWithNSString:(NSString *)propertyName
                             withADTypeEvaluator:(id<ADTypeEvaluator>)evaluator
                               withNSObjectArray:(IOSObjectArray *)values;

/*!
 @brief Sets the converter to convert from the values type to the setter's parameter type.
 If only one value is supplied, <var>converter</var> must be a 
 <code>r.android.animation.BidirectionalTypeConverter</code>.
 @param converter The converter to use to convert values.
 */
- (void)setConverterWithADTypeConverter:(ADTypeConverter *)converter;

/*!
 @brief The TypeEvaluator will be automatically determined based on the type of values
  supplied to PropertyValuesHolder.The evaluator can be manually set, however, if so
  desired.
 This may be important in cases where either the type of the values supplied
  do not match the way that they should be interpolated between, or if the values
  are of a custom type or one not currently understood by the animation system. Currently,
  only values of type float and int (and their Object equivalents: Float
  and Integer) are  correctly interpolated; all other types require setting a TypeEvaluator.
 @param evaluator
 */
- (void)setEvaluatorWithADTypeEvaluator:(id<ADTypeEvaluator>)evaluator;

/*!
 @brief Set the animated values for this object to this set of floats.
 If there is only one value, it is assumed to be the end value of an animation,
  and an initial value will be derived, if possible, by calling a getter function
  on the object. Also, if any value is null, the value will be filled in when the animation
  starts in the same way. This mechanism of automatically getting null values only works
  if the PropertyValuesHolder object is used in conjunction 
 <code>ObjectAnimator</code>, and with a getter function
  derived automatically from <code>propertyName</code>, since otherwise PropertyValuesHolder has
  no way of determining what the value should be.
 @param values One or more values that the animation will animate between.
 */
- (void)setFloatValuesWithFloatArray:(IOSFloatArray *)values;

/*!
 @brief Set the animated values for this object to this set of ints.
 If there is only one value, it is assumed to be the end value of an animation,
  and an initial value will be derived, if possible, by calling a getter function
  on the object. Also, if any value is null, the value will be filled in when the animation
  starts in the same way. This mechanism of automatically getting null values only works
  if the PropertyValuesHolder object is used in conjunction 
 <code>ObjectAnimator</code>, and with a getter function
  derived automatically from <code>propertyName</code>, since otherwise PropertyValuesHolder has
  no way of determining what the value should be.
 @param values One or more values that the animation will animate between.
 */
- (void)setIntValuesWithIntArray:(IOSIntArray *)values;

/*!
 @brief Set the animated values for this object to this set of Keyframes.
 @param values One or more values that the animation will animate between.
 */
- (void)setKeyframesWithADKeyframeArray:(IOSObjectArray *)values;

/*!
 @brief Set the animated values for this object to this set of Objects.
 If there is only one value, it is assumed to be the end value of an animation,
  and an initial value will be derived, if possible, by calling a getter function
  on the object. Also, if any value is null, the value will be filled in when the animation
  starts in the same way. This mechanism of automatically getting null values only works
  if the PropertyValuesHolder object is used in conjunction 
 <code>ObjectAnimator</code>, and with a getter function
  derived automatically from <code>propertyName</code>, since otherwise PropertyValuesHolder has
  no way of determining what the value should be. 
 <p><strong>Note:</strong> The Object values are stored as references to the original
  objects, which means that changes to those objects after this method is called will
  affect the values on the PropertyValuesHolder. If the objects will be mutated externally
  after this method is called, callers should pass a copy of those objects instead.
 @param values One or more values that the animation will animate between.
 */
- (void)setObjectValuesWithNSObjectArray:(IOSObjectArray *)values;

/*!
 @brief Sets the property that will be animated.
 <p>Note that if this PropertyValuesHolder object is used with ObjectAnimator, the property
  must exist on the target object specified in that ObjectAnimator.</p>
 @param property The property being animated.
 */
- (void)setPropertyWithADProperty:(ADProperty *)property;

/*!
 @brief Sets the name of the property that will be animated.This name is used to derive
  a setter function that will be called to set animated values.
 For example, a property name of <code>foo</code> will result
  in a call to the function <code>setFoo()</code> on the target object. If either 
 <code>valueFrom</code> or <code>valueTo</code> is null, then a getter function will
  also be derived and called. 
 <p>Note that the setter function derived from this property name
  must take the same parameter type as the 
 <code>valueFrom</code> and <code>valueTo</code> properties, otherwise the call to
  the setter function will fail.</p>
 @param propertyName The name of the property being animated.
 */
- (void)setPropertyNameWithNSString:(NSString *)propertyName;

- (NSString *)description;

#pragma mark Package-Private

/*!
 @brief Function used to calculate the value according to the evaluator set up for
  this PropertyValuesHolder object.This function is called by ValueAnimator.animateValue().
 @param fraction The elapsed, interpolated fraction of the animation.
 */
- (void)calculateValueWithFloat:(jfloat)fraction;

/*!
 @brief Internal function, called by ValueAnimator and ObjectAnimator, to retrieve the value
  most recently calculated in calculateValue().
 */
- (id)getAnimatedValue;

/*!
 @brief Utility method to derive a setter/getter method name from a property name, where the
  prefix is typically "set" or "get" and the first letter of the property name is
  capitalized.
 @param prefix The precursor to the method name, before the property name begins, typically  "set" or "get".
 @param propertyName The name of the property that represents the bulk of the method name  after the prefix. The first letter of this word will be capitalized in the resulting
   method name.
 @return String the property name converted to a method name according to the conventions
  specified above.
 */
+ (NSString *)getMethodNameWithNSString:(NSString *)prefix
                           withNSString:(NSString *)propertyName;

/*!
 @brief Internal function, called by ValueAnimator, to set up the TypeEvaluator that will be used
  to calculate animated values.
 */
- (void)init__ OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Internal function to set the value on the target object, using the setter set up
  earlier on this PropertyValuesHolder object.This function is called by ObjectAnimator
  to handle turning the value calculated by ValueAnimator into a value set on the object
  according to the name of the property.
 @param target The target object on which the value is set
 */
- (void)setAnimatedValueWithId:(id)target;

/*!
 @brief This function is called by ObjectAnimator when setting the end values for an animation.
 The end values are set according to the current values in the target object. The
  property whose value is extracted is whatever is specified by the propertyName of this
  PropertyValuesHolder object.
 @param target The object which holds the start values that should be set.
 */
- (void)setupEndValueWithId:(id)target;

/*!
 @brief Utility function to get the setter from targetClass
 @param targetClass The Class on which the requested method should exist.
 */
- (void)setupSetterWithIOSClass:(IOSClass *)targetClass;

/*!
 @brief Internal function (called from ObjectAnimator) to set up the setter and getter
  prior to running the animation.If the setter has not been manually set for this
  object, it will be derived automatically given the property name, target object, and
  types of values supplied.
 If no getter has been set, it will be supplied iff any of the
  supplied values was null. If there is a null value, then the getter (supplied or derived)
  will be called to set those null values to the current value of the property
  on the target object.
 @param target The object on which the setter (and possibly getter) exist.
 */
- (void)setupSetterAndGetterWithId:(id)target;

/*!
 @brief This function is called by ObjectAnimator when setting the start values for an animation.
 The start values are set according to the current values in the target object. The
  property whose value is extracted is whatever is specified by the propertyName of this
  PropertyValuesHolder object.
 @param target The object which holds the start values that should be set.
 */
- (void)setupStartValueWithId:(id)target;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(ADPropertyValuesHolder)

J2OBJC_FIELD_SETTER(ADPropertyValuesHolder, mPropertyName_, NSString *)
J2OBJC_FIELD_SETTER(ADPropertyValuesHolder, mProperty_, ADProperty *)
J2OBJC_FIELD_SETTER(ADPropertyValuesHolder, mSetter_, JavaLangReflectMethod *)
J2OBJC_FIELD_SETTER(ADPropertyValuesHolder, mValueType_, IOSClass *)
J2OBJC_FIELD_SETTER(ADPropertyValuesHolder, mKeyframes_, id<ADKeyframes>)
J2OBJC_FIELD_SETTER(ADPropertyValuesHolder, mTmpValueArray_, IOSObjectArray *)

FOUNDATION_EXPORT ADPropertyValuesHolder *ADPropertyValuesHolder_ofIntWithNSString_withIntArray_(NSString *propertyName, IOSIntArray *values);

FOUNDATION_EXPORT ADPropertyValuesHolder *ADPropertyValuesHolder_ofIntWithADProperty_withIntArray_(ADProperty *property, IOSIntArray *values);

FOUNDATION_EXPORT ADPropertyValuesHolder *ADPropertyValuesHolder_ofMultiIntWithNSString_withIntArray2_(NSString *propertyName, IOSObjectArray *values);

FOUNDATION_EXPORT ADPropertyValuesHolder *ADPropertyValuesHolder_ofMultiIntWithNSString_withADPath_(NSString *propertyName, ADPath *path);

FOUNDATION_EXPORT ADPropertyValuesHolder *ADPropertyValuesHolder_ofMultiIntWithNSString_withADTypeConverter_withADTypeEvaluator_withNSObjectArray_(NSString *propertyName, ADTypeConverter *converter, id<ADTypeEvaluator> evaluator, IOSObjectArray *values);

FOUNDATION_EXPORT ADPropertyValuesHolder *ADPropertyValuesHolder_ofMultiIntWithNSString_withADTypeConverter_withADTypeEvaluator_withADKeyframeArray_(NSString *propertyName, ADTypeConverter *converter, id<ADTypeEvaluator> evaluator, IOSObjectArray *values);

FOUNDATION_EXPORT ADPropertyValuesHolder *ADPropertyValuesHolder_ofFloatWithNSString_withFloatArray_(NSString *propertyName, IOSFloatArray *values);

FOUNDATION_EXPORT ADPropertyValuesHolder *ADPropertyValuesHolder_ofFloatWithADProperty_withFloatArray_(ADProperty *property, IOSFloatArray *values);

FOUNDATION_EXPORT ADPropertyValuesHolder *ADPropertyValuesHolder_ofMultiFloatWithNSString_withFloatArray2_(NSString *propertyName, IOSObjectArray *values);

FOUNDATION_EXPORT ADPropertyValuesHolder *ADPropertyValuesHolder_ofMultiFloatWithNSString_withADPath_(NSString *propertyName, ADPath *path);

FOUNDATION_EXPORT ADPropertyValuesHolder *ADPropertyValuesHolder_ofMultiFloatWithNSString_withADTypeConverter_withADTypeEvaluator_withNSObjectArray_(NSString *propertyName, ADTypeConverter *converter, id<ADTypeEvaluator> evaluator, IOSObjectArray *values);

FOUNDATION_EXPORT ADPropertyValuesHolder *ADPropertyValuesHolder_ofMultiFloatWithNSString_withADTypeConverter_withADTypeEvaluator_withADKeyframeArray_(NSString *propertyName, ADTypeConverter *converter, id<ADTypeEvaluator> evaluator, IOSObjectArray *values);

FOUNDATION_EXPORT ADPropertyValuesHolder *ADPropertyValuesHolder_ofObjectWithNSString_withADTypeEvaluator_withNSObjectArray_(NSString *propertyName, id<ADTypeEvaluator> evaluator, IOSObjectArray *values);

FOUNDATION_EXPORT ADPropertyValuesHolder *ADPropertyValuesHolder_ofObjectWithNSString_withADTypeConverter_withADPath_(NSString *propertyName, ADTypeConverter *converter, ADPath *path);

FOUNDATION_EXPORT ADPropertyValuesHolder *ADPropertyValuesHolder_ofObjectWithADProperty_withADTypeEvaluator_withNSObjectArray_(ADProperty *property, id<ADTypeEvaluator> evaluator, IOSObjectArray *values);

FOUNDATION_EXPORT ADPropertyValuesHolder *ADPropertyValuesHolder_ofObjectWithADProperty_withADTypeConverter_withADTypeEvaluator_withNSObjectArray_(ADProperty *property, ADTypeConverter *converter, id<ADTypeEvaluator> evaluator, IOSObjectArray *values);

FOUNDATION_EXPORT ADPropertyValuesHolder *ADPropertyValuesHolder_ofObjectWithADProperty_withADTypeConverter_withADPath_(ADProperty *property, ADTypeConverter *converter, ADPath *path);

FOUNDATION_EXPORT ADPropertyValuesHolder *ADPropertyValuesHolder_ofKeyframeWithNSString_withADKeyframeArray_(NSString *propertyName, IOSObjectArray *values);

FOUNDATION_EXPORT ADPropertyValuesHolder *ADPropertyValuesHolder_ofKeyframeWithADProperty_withADKeyframeArray_(ADProperty *property, IOSObjectArray *values);

FOUNDATION_EXPORT ADPropertyValuesHolder *ADPropertyValuesHolder_ofKeyframesWithNSString_withADKeyframes_(NSString *propertyName, id<ADKeyframes> keyframes);

FOUNDATION_EXPORT ADPropertyValuesHolder *ADPropertyValuesHolder_ofKeyframesWithADProperty_withADKeyframes_(ADProperty *property, id<ADKeyframes> keyframes);

FOUNDATION_EXPORT NSString *ADPropertyValuesHolder_getMethodNameWithNSString_withNSString_(NSString *prefix, NSString *propertyName);

J2OBJC_TYPE_LITERAL_HEADER(ADPropertyValuesHolder)

@compatibility_alias RAndroidAnimationPropertyValuesHolder ADPropertyValuesHolder;

#endif

#if !defined (ADPropertyValuesHolder_PropertyValues_DataSource_) && (INCLUDE_ALL_PropertyValuesHolder || defined(INCLUDE_ADPropertyValuesHolder_PropertyValues_DataSource))
#define ADPropertyValuesHolder_PropertyValues_DataSource_

@protocol ADPropertyValuesHolder_PropertyValues_DataSource < JavaObject >

- (id)getValueAtFractionWithFloat:(jfloat)fraction;

@end

J2OBJC_EMPTY_STATIC_INIT(ADPropertyValuesHolder_PropertyValues_DataSource)

J2OBJC_TYPE_LITERAL_HEADER(ADPropertyValuesHolder_PropertyValues_DataSource)

#endif

#if !defined (ADPropertyValuesHolder_IntPropertyValuesHolder_) && (INCLUDE_ALL_PropertyValuesHolder || defined(INCLUDE_ADPropertyValuesHolder_IntPropertyValuesHolder))
#define ADPropertyValuesHolder_IntPropertyValuesHolder_

@class ADProperty;
@class IOSClass;
@class IOSIntArray;
@protocol ADKeyframes_IntKeyframes;

@interface ADPropertyValuesHolder_IntPropertyValuesHolder : ADPropertyValuesHolder {
 @public
  NSString *mJniSetter_;
  id<ADKeyframes_IntKeyframes> mIntKeyframes_;
  jint mIntAnimatedValue_;
}

#pragma mark Public

- (instancetype)initWithADProperty:(ADProperty *)property
                      withIntArray:(IOSIntArray *)values;

- (instancetype)initWithADProperty:(ADProperty *)property
      withADKeyframes_IntKeyframes:(id<ADKeyframes_IntKeyframes>)keyframes;

- (instancetype)initWithNSString:(NSString *)propertyName
                    withIntArray:(IOSIntArray *)values;

- (instancetype)initWithNSString:(NSString *)propertyName
    withADKeyframes_IntKeyframes:(id<ADKeyframes_IntKeyframes>)keyframes;

- (ADPropertyValuesHolder_IntPropertyValuesHolder *)java_clone;

- (void)setIntValuesWithIntArray:(IOSIntArray *)values;

- (void)setPropertyWithADProperty:(ADProperty *)property;

#pragma mark Package-Private

- (void)calculateValueWithFloat:(jfloat)fraction;

- (id)getAnimatedValue;

/*!
 @brief Internal function to set the value on the target object, using the setter set up
  earlier on this PropertyValuesHolder object.This function is called by ObjectAnimator
  to handle turning the value calculated by ValueAnimator into a value set on the object
  according to the name of the property.
 @param target The target object on which the value is set
 */
- (void)setAnimatedValueWithId:(id)target;

- (void)setupSetterWithIOSClass:(IOSClass *)targetClass;

@end

J2OBJC_STATIC_INIT(ADPropertyValuesHolder_IntPropertyValuesHolder)

J2OBJC_FIELD_SETTER(ADPropertyValuesHolder_IntPropertyValuesHolder, mJniSetter_, NSString *)
J2OBJC_FIELD_SETTER(ADPropertyValuesHolder_IntPropertyValuesHolder, mIntKeyframes_, id<ADKeyframes_IntKeyframes>)

FOUNDATION_EXPORT void ADPropertyValuesHolder_IntPropertyValuesHolder_initWithNSString_withADKeyframes_IntKeyframes_(ADPropertyValuesHolder_IntPropertyValuesHolder *self, NSString *propertyName, id<ADKeyframes_IntKeyframes> keyframes);

FOUNDATION_EXPORT ADPropertyValuesHolder_IntPropertyValuesHolder *new_ADPropertyValuesHolder_IntPropertyValuesHolder_initWithNSString_withADKeyframes_IntKeyframes_(NSString *propertyName, id<ADKeyframes_IntKeyframes> keyframes) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ADPropertyValuesHolder_IntPropertyValuesHolder *create_ADPropertyValuesHolder_IntPropertyValuesHolder_initWithNSString_withADKeyframes_IntKeyframes_(NSString *propertyName, id<ADKeyframes_IntKeyframes> keyframes);

FOUNDATION_EXPORT void ADPropertyValuesHolder_IntPropertyValuesHolder_initWithADProperty_withADKeyframes_IntKeyframes_(ADPropertyValuesHolder_IntPropertyValuesHolder *self, ADProperty *property, id<ADKeyframes_IntKeyframes> keyframes);

FOUNDATION_EXPORT ADPropertyValuesHolder_IntPropertyValuesHolder *new_ADPropertyValuesHolder_IntPropertyValuesHolder_initWithADProperty_withADKeyframes_IntKeyframes_(ADProperty *property, id<ADKeyframes_IntKeyframes> keyframes) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ADPropertyValuesHolder_IntPropertyValuesHolder *create_ADPropertyValuesHolder_IntPropertyValuesHolder_initWithADProperty_withADKeyframes_IntKeyframes_(ADProperty *property, id<ADKeyframes_IntKeyframes> keyframes);

FOUNDATION_EXPORT void ADPropertyValuesHolder_IntPropertyValuesHolder_initWithNSString_withIntArray_(ADPropertyValuesHolder_IntPropertyValuesHolder *self, NSString *propertyName, IOSIntArray *values);

FOUNDATION_EXPORT ADPropertyValuesHolder_IntPropertyValuesHolder *new_ADPropertyValuesHolder_IntPropertyValuesHolder_initWithNSString_withIntArray_(NSString *propertyName, IOSIntArray *values) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ADPropertyValuesHolder_IntPropertyValuesHolder *create_ADPropertyValuesHolder_IntPropertyValuesHolder_initWithNSString_withIntArray_(NSString *propertyName, IOSIntArray *values);

FOUNDATION_EXPORT void ADPropertyValuesHolder_IntPropertyValuesHolder_initWithADProperty_withIntArray_(ADPropertyValuesHolder_IntPropertyValuesHolder *self, ADProperty *property, IOSIntArray *values);

FOUNDATION_EXPORT ADPropertyValuesHolder_IntPropertyValuesHolder *new_ADPropertyValuesHolder_IntPropertyValuesHolder_initWithADProperty_withIntArray_(ADProperty *property, IOSIntArray *values) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ADPropertyValuesHolder_IntPropertyValuesHolder *create_ADPropertyValuesHolder_IntPropertyValuesHolder_initWithADProperty_withIntArray_(ADProperty *property, IOSIntArray *values);

J2OBJC_TYPE_LITERAL_HEADER(ADPropertyValuesHolder_IntPropertyValuesHolder)

#endif

#if !defined (ADPropertyValuesHolder_FloatPropertyValuesHolder_) && (INCLUDE_ALL_PropertyValuesHolder || defined(INCLUDE_ADPropertyValuesHolder_FloatPropertyValuesHolder))
#define ADPropertyValuesHolder_FloatPropertyValuesHolder_

@class ADProperty;
@class IOSClass;
@class IOSFloatArray;
@protocol ADKeyframes_FloatKeyframes;

@interface ADPropertyValuesHolder_FloatPropertyValuesHolder : ADPropertyValuesHolder {
 @public
  NSString *mJniSetter_;
  id<ADKeyframes_FloatKeyframes> mFloatKeyframes_;
  jfloat mFloatAnimatedValue_;
}

#pragma mark Public

- (instancetype)initWithADProperty:(ADProperty *)property
                    withFloatArray:(IOSFloatArray *)values;

- (instancetype)initWithADProperty:(ADProperty *)property
    withADKeyframes_FloatKeyframes:(id<ADKeyframes_FloatKeyframes>)keyframes;

- (instancetype)initWithNSString:(NSString *)propertyName
                  withFloatArray:(IOSFloatArray *)values;

- (instancetype)initWithNSString:(NSString *)propertyName
  withADKeyframes_FloatKeyframes:(id<ADKeyframes_FloatKeyframes>)keyframes;

- (ADPropertyValuesHolder_FloatPropertyValuesHolder *)java_clone;

- (void)setFloatValuesWithFloatArray:(IOSFloatArray *)values;

- (void)setPropertyWithADProperty:(ADProperty *)property;

#pragma mark Package-Private

- (void)calculateValueWithFloat:(jfloat)fraction;

- (id)getAnimatedValue;

/*!
 @brief Internal function to set the value on the target object, using the setter set up
  earlier on this PropertyValuesHolder object.This function is called by ObjectAnimator
  to handle turning the value calculated by ValueAnimator into a value set on the object
  according to the name of the property.
 @param target The target object on which the value is set
 */
- (void)setAnimatedValueWithId:(id)target;

- (void)setupSetterWithIOSClass:(IOSClass *)targetClass;

@end

J2OBJC_STATIC_INIT(ADPropertyValuesHolder_FloatPropertyValuesHolder)

J2OBJC_FIELD_SETTER(ADPropertyValuesHolder_FloatPropertyValuesHolder, mJniSetter_, NSString *)
J2OBJC_FIELD_SETTER(ADPropertyValuesHolder_FloatPropertyValuesHolder, mFloatKeyframes_, id<ADKeyframes_FloatKeyframes>)

FOUNDATION_EXPORT void ADPropertyValuesHolder_FloatPropertyValuesHolder_initWithNSString_withADKeyframes_FloatKeyframes_(ADPropertyValuesHolder_FloatPropertyValuesHolder *self, NSString *propertyName, id<ADKeyframes_FloatKeyframes> keyframes);

FOUNDATION_EXPORT ADPropertyValuesHolder_FloatPropertyValuesHolder *new_ADPropertyValuesHolder_FloatPropertyValuesHolder_initWithNSString_withADKeyframes_FloatKeyframes_(NSString *propertyName, id<ADKeyframes_FloatKeyframes> keyframes) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ADPropertyValuesHolder_FloatPropertyValuesHolder *create_ADPropertyValuesHolder_FloatPropertyValuesHolder_initWithNSString_withADKeyframes_FloatKeyframes_(NSString *propertyName, id<ADKeyframes_FloatKeyframes> keyframes);

FOUNDATION_EXPORT void ADPropertyValuesHolder_FloatPropertyValuesHolder_initWithADProperty_withADKeyframes_FloatKeyframes_(ADPropertyValuesHolder_FloatPropertyValuesHolder *self, ADProperty *property, id<ADKeyframes_FloatKeyframes> keyframes);

FOUNDATION_EXPORT ADPropertyValuesHolder_FloatPropertyValuesHolder *new_ADPropertyValuesHolder_FloatPropertyValuesHolder_initWithADProperty_withADKeyframes_FloatKeyframes_(ADProperty *property, id<ADKeyframes_FloatKeyframes> keyframes) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ADPropertyValuesHolder_FloatPropertyValuesHolder *create_ADPropertyValuesHolder_FloatPropertyValuesHolder_initWithADProperty_withADKeyframes_FloatKeyframes_(ADProperty *property, id<ADKeyframes_FloatKeyframes> keyframes);

FOUNDATION_EXPORT void ADPropertyValuesHolder_FloatPropertyValuesHolder_initWithNSString_withFloatArray_(ADPropertyValuesHolder_FloatPropertyValuesHolder *self, NSString *propertyName, IOSFloatArray *values);

FOUNDATION_EXPORT ADPropertyValuesHolder_FloatPropertyValuesHolder *new_ADPropertyValuesHolder_FloatPropertyValuesHolder_initWithNSString_withFloatArray_(NSString *propertyName, IOSFloatArray *values) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ADPropertyValuesHolder_FloatPropertyValuesHolder *create_ADPropertyValuesHolder_FloatPropertyValuesHolder_initWithNSString_withFloatArray_(NSString *propertyName, IOSFloatArray *values);

FOUNDATION_EXPORT void ADPropertyValuesHolder_FloatPropertyValuesHolder_initWithADProperty_withFloatArray_(ADPropertyValuesHolder_FloatPropertyValuesHolder *self, ADProperty *property, IOSFloatArray *values);

FOUNDATION_EXPORT ADPropertyValuesHolder_FloatPropertyValuesHolder *new_ADPropertyValuesHolder_FloatPropertyValuesHolder_initWithADProperty_withFloatArray_(ADProperty *property, IOSFloatArray *values) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ADPropertyValuesHolder_FloatPropertyValuesHolder *create_ADPropertyValuesHolder_FloatPropertyValuesHolder_initWithADProperty_withFloatArray_(ADProperty *property, IOSFloatArray *values);

J2OBJC_TYPE_LITERAL_HEADER(ADPropertyValuesHolder_FloatPropertyValuesHolder)

#endif

#if !defined (ADPropertyValuesHolder_MultiFloatValuesHolder_) && (INCLUDE_ALL_PropertyValuesHolder || defined(INCLUDE_ADPropertyValuesHolder_MultiFloatValuesHolder))
#define ADPropertyValuesHolder_MultiFloatValuesHolder_

@class ADTypeConverter;
@class IOSClass;
@class IOSObjectArray;
@protocol ADKeyframes;
@protocol ADTypeEvaluator;

@interface ADPropertyValuesHolder_MultiFloatValuesHolder : ADPropertyValuesHolder

#pragma mark Public

- (instancetype)initWithNSString:(NSString *)propertyName
             withADTypeConverter:(ADTypeConverter *)converter
             withADTypeEvaluator:(id<ADTypeEvaluator>)evaluator
                 withADKeyframes:(id<ADKeyframes>)keyframes;

- (instancetype)initWithNSString:(NSString *)propertyName
             withADTypeConverter:(ADTypeConverter *)converter
             withADTypeEvaluator:(id<ADTypeEvaluator>)evaluator
               withNSObjectArray:(IOSObjectArray *)values;

#pragma mark Package-Private

/*!
 @brief Internal function to set the value on the target object, using the setter set up
  earlier on this PropertyValuesHolder object.This function is called by ObjectAnimator
  to handle turning the value calculated by ValueAnimator into a value set on the object
  according to the name of the property.
 @param target The target object on which the value is set
 */
- (void)setAnimatedValueWithId:(id)target;

- (void)setupSetterWithIOSClass:(IOSClass *)targetClass;

/*!
 @brief Internal function (called from ObjectAnimator) to set up the setter and getter
  prior to running the animation.No getter can be used for multiple parameters.
 @param target The object on which the setter exists.
 */
- (void)setupSetterAndGetterWithId:(id)target;

@end

J2OBJC_STATIC_INIT(ADPropertyValuesHolder_MultiFloatValuesHolder)

FOUNDATION_EXPORT void ADPropertyValuesHolder_MultiFloatValuesHolder_initWithNSString_withADTypeConverter_withADTypeEvaluator_withNSObjectArray_(ADPropertyValuesHolder_MultiFloatValuesHolder *self, NSString *propertyName, ADTypeConverter *converter, id<ADTypeEvaluator> evaluator, IOSObjectArray *values);

FOUNDATION_EXPORT ADPropertyValuesHolder_MultiFloatValuesHolder *new_ADPropertyValuesHolder_MultiFloatValuesHolder_initWithNSString_withADTypeConverter_withADTypeEvaluator_withNSObjectArray_(NSString *propertyName, ADTypeConverter *converter, id<ADTypeEvaluator> evaluator, IOSObjectArray *values) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ADPropertyValuesHolder_MultiFloatValuesHolder *create_ADPropertyValuesHolder_MultiFloatValuesHolder_initWithNSString_withADTypeConverter_withADTypeEvaluator_withNSObjectArray_(NSString *propertyName, ADTypeConverter *converter, id<ADTypeEvaluator> evaluator, IOSObjectArray *values);

FOUNDATION_EXPORT void ADPropertyValuesHolder_MultiFloatValuesHolder_initWithNSString_withADTypeConverter_withADTypeEvaluator_withADKeyframes_(ADPropertyValuesHolder_MultiFloatValuesHolder *self, NSString *propertyName, ADTypeConverter *converter, id<ADTypeEvaluator> evaluator, id<ADKeyframes> keyframes);

FOUNDATION_EXPORT ADPropertyValuesHolder_MultiFloatValuesHolder *new_ADPropertyValuesHolder_MultiFloatValuesHolder_initWithNSString_withADTypeConverter_withADTypeEvaluator_withADKeyframes_(NSString *propertyName, ADTypeConverter *converter, id<ADTypeEvaluator> evaluator, id<ADKeyframes> keyframes) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ADPropertyValuesHolder_MultiFloatValuesHolder *create_ADPropertyValuesHolder_MultiFloatValuesHolder_initWithNSString_withADTypeConverter_withADTypeEvaluator_withADKeyframes_(NSString *propertyName, ADTypeConverter *converter, id<ADTypeEvaluator> evaluator, id<ADKeyframes> keyframes);

J2OBJC_TYPE_LITERAL_HEADER(ADPropertyValuesHolder_MultiFloatValuesHolder)

#endif

#if !defined (ADPropertyValuesHolder_MultiIntValuesHolder_) && (INCLUDE_ALL_PropertyValuesHolder || defined(INCLUDE_ADPropertyValuesHolder_MultiIntValuesHolder))
#define ADPropertyValuesHolder_MultiIntValuesHolder_

@class ADTypeConverter;
@class IOSClass;
@class IOSObjectArray;
@protocol ADKeyframes;
@protocol ADTypeEvaluator;

@interface ADPropertyValuesHolder_MultiIntValuesHolder : ADPropertyValuesHolder

#pragma mark Public

- (instancetype)initWithNSString:(NSString *)propertyName
             withADTypeConverter:(ADTypeConverter *)converter
             withADTypeEvaluator:(id<ADTypeEvaluator>)evaluator
                 withADKeyframes:(id<ADKeyframes>)keyframes;

- (instancetype)initWithNSString:(NSString *)propertyName
             withADTypeConverter:(ADTypeConverter *)converter
             withADTypeEvaluator:(id<ADTypeEvaluator>)evaluator
               withNSObjectArray:(IOSObjectArray *)values;

#pragma mark Package-Private

/*!
 @brief Internal function to set the value on the target object, using the setter set up
  earlier on this PropertyValuesHolder object.This function is called by ObjectAnimator
  to handle turning the value calculated by ValueAnimator into a value set on the object
  according to the name of the property.
 @param target The target object on which the value is set
 */
- (void)setAnimatedValueWithId:(id)target;

- (void)setupSetterWithIOSClass:(IOSClass *)targetClass;

/*!
 @brief Internal function (called from ObjectAnimator) to set up the setter and getter
  prior to running the animation.No getter can be used for multiple parameters.
 @param target The object on which the setter exists.
 */
- (void)setupSetterAndGetterWithId:(id)target;

@end

J2OBJC_STATIC_INIT(ADPropertyValuesHolder_MultiIntValuesHolder)

FOUNDATION_EXPORT void ADPropertyValuesHolder_MultiIntValuesHolder_initWithNSString_withADTypeConverter_withADTypeEvaluator_withNSObjectArray_(ADPropertyValuesHolder_MultiIntValuesHolder *self, NSString *propertyName, ADTypeConverter *converter, id<ADTypeEvaluator> evaluator, IOSObjectArray *values);

FOUNDATION_EXPORT ADPropertyValuesHolder_MultiIntValuesHolder *new_ADPropertyValuesHolder_MultiIntValuesHolder_initWithNSString_withADTypeConverter_withADTypeEvaluator_withNSObjectArray_(NSString *propertyName, ADTypeConverter *converter, id<ADTypeEvaluator> evaluator, IOSObjectArray *values) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ADPropertyValuesHolder_MultiIntValuesHolder *create_ADPropertyValuesHolder_MultiIntValuesHolder_initWithNSString_withADTypeConverter_withADTypeEvaluator_withNSObjectArray_(NSString *propertyName, ADTypeConverter *converter, id<ADTypeEvaluator> evaluator, IOSObjectArray *values);

FOUNDATION_EXPORT void ADPropertyValuesHolder_MultiIntValuesHolder_initWithNSString_withADTypeConverter_withADTypeEvaluator_withADKeyframes_(ADPropertyValuesHolder_MultiIntValuesHolder *self, NSString *propertyName, ADTypeConverter *converter, id<ADTypeEvaluator> evaluator, id<ADKeyframes> keyframes);

FOUNDATION_EXPORT ADPropertyValuesHolder_MultiIntValuesHolder *new_ADPropertyValuesHolder_MultiIntValuesHolder_initWithNSString_withADTypeConverter_withADTypeEvaluator_withADKeyframes_(NSString *propertyName, ADTypeConverter *converter, id<ADTypeEvaluator> evaluator, id<ADKeyframes> keyframes) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ADPropertyValuesHolder_MultiIntValuesHolder *create_ADPropertyValuesHolder_MultiIntValuesHolder_initWithNSString_withADTypeConverter_withADTypeEvaluator_withADKeyframes_(NSString *propertyName, ADTypeConverter *converter, id<ADTypeEvaluator> evaluator, id<ADKeyframes> keyframes);

J2OBJC_TYPE_LITERAL_HEADER(ADPropertyValuesHolder_MultiIntValuesHolder)

#endif

#if !defined (ADPropertyValuesHolder_PropertyValues_) && (INCLUDE_ALL_PropertyValuesHolder || defined(INCLUDE_ADPropertyValuesHolder_PropertyValues))
#define ADPropertyValuesHolder_PropertyValues_

@class IOSClass;
@protocol ADPropertyValuesHolder_PropertyValues_DataSource;

/*!
 */
@interface ADPropertyValuesHolder_PropertyValues : NSObject {
 @public
  NSString *propertyName_;
  IOSClass *type_;
  id startValue_;
  id endValue_;
  id<ADPropertyValuesHolder_PropertyValues_DataSource> dataSource_;
}

#pragma mark Public

- (instancetype)init;

- (NSString *)description;

@end

J2OBJC_EMPTY_STATIC_INIT(ADPropertyValuesHolder_PropertyValues)

J2OBJC_FIELD_SETTER(ADPropertyValuesHolder_PropertyValues, propertyName_, NSString *)
J2OBJC_FIELD_SETTER(ADPropertyValuesHolder_PropertyValues, type_, IOSClass *)
J2OBJC_FIELD_SETTER(ADPropertyValuesHolder_PropertyValues, startValue_, id)
J2OBJC_FIELD_SETTER(ADPropertyValuesHolder_PropertyValues, endValue_, id)
J2OBJC_FIELD_SETTER(ADPropertyValuesHolder_PropertyValues, dataSource_, id<ADPropertyValuesHolder_PropertyValues_DataSource>)

FOUNDATION_EXPORT void ADPropertyValuesHolder_PropertyValues_init(ADPropertyValuesHolder_PropertyValues *self);

FOUNDATION_EXPORT ADPropertyValuesHolder_PropertyValues *new_ADPropertyValuesHolder_PropertyValues_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ADPropertyValuesHolder_PropertyValues *create_ADPropertyValuesHolder_PropertyValues_init(void);

J2OBJC_TYPE_LITERAL_HEADER(ADPropertyValuesHolder_PropertyValues)

#endif

#pragma pop_macro("INCLUDE_ALL_PropertyValuesHolder")
