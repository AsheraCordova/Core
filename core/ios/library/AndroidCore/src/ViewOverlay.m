//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroid\src\main\java\r\android\view\ViewOverlay.java
//

#include "Canvas.h"
#include "Context.h"
#include "Drawable.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "LayoutTransition.h"
#include "Rect.h"
#include "RenderNode.h"
#include "View.h"
#include "ViewGroup.h"
#include "ViewOverlay.h"
#include "ViewParent.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"


@implementation ADViewOverlay

- (instancetype)initWithADContext:(ADContext *)context
                       withADView:(ADView *)hostView {
  ADViewOverlay_initWithADContext_withADView_(self, context, hostView);
  return self;
}

- (ADViewGroup *)getOverlayView {
  return mOverlayViewGroup_;
}

- (void)addWithADDrawable:(ADDrawable *)drawable {
  [((ADViewOverlay_OverlayViewGroup *) nil_chk(mOverlayViewGroup_)) addWithADDrawable:drawable];
}

- (void)removeWithADDrawable:(ADDrawable *)drawable {
  [((ADViewOverlay_OverlayViewGroup *) nil_chk(mOverlayViewGroup_)) removeWithADDrawable:drawable];
}

- (void)clear {
  [((ADViewOverlay_OverlayViewGroup *) nil_chk(mOverlayViewGroup_)) clear];
}

- (jboolean)isEmpty {
  return [((ADViewOverlay_OverlayViewGroup *) nil_chk(mOverlayViewGroup_)) isEmpty];
}

- (id<JavaUtilList>)getDrawables {
  return ((ADViewOverlay_OverlayViewGroup *) nil_chk(mOverlayViewGroup_))->mDrawables_;
}

- (void)dealloc {
  RELEASE_(mOverlayViewGroup_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LADViewGroup;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithADContext:withADView:);
  methods[1].selector = @selector(getOverlayView);
  methods[2].selector = @selector(addWithADDrawable:);
  methods[3].selector = @selector(removeWithADDrawable:);
  methods[4].selector = @selector(clear);
  methods[5].selector = @selector(isEmpty);
  methods[6].selector = @selector(getDrawables);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mOverlayViewGroup_", "LADViewOverlay_OverlayViewGroup;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LADContext;LADView;", "add", "LADDrawable;", "remove", "()Ljava/util/List<Lr/android/graphics/drawable/Drawable;>;", "LADViewOverlay_OverlayViewGroup;" };
  static const J2ObjcClassInfo _ADViewOverlay = { "ViewOverlay", "r.android.view", ptrTable, methods, fields, 7, 0x1, 7, 1, -1, 5, -1, -1, -1 };
  return &_ADViewOverlay;
}

@end

void ADViewOverlay_initWithADContext_withADView_(ADViewOverlay *self, ADContext *context, ADView *hostView) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->mOverlayViewGroup_, new_ADViewOverlay_OverlayViewGroup_initWithADContext_withADView_(context, hostView));
}

ADViewOverlay *new_ADViewOverlay_initWithADContext_withADView_(ADContext *context, ADView *hostView) {
  J2OBJC_NEW_IMPL(ADViewOverlay, initWithADContext_withADView_, context, hostView)
}

ADViewOverlay *create_ADViewOverlay_initWithADContext_withADView_(ADContext *context, ADView *hostView) {
  J2OBJC_CREATE_IMPL(ADViewOverlay, initWithADContext_withADView_, context, hostView)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADViewOverlay)

@implementation ADViewOverlay_OverlayViewGroup

- (instancetype)initWithADContext:(ADContext *)context
                       withADView:(ADView *)hostView {
  ADViewOverlay_OverlayViewGroup_initWithADContext_withADView_(self, context, hostView);
  return self;
}

- (void)addWithADDrawable:(ADDrawable *)drawable {
  if (drawable == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"drawable must be non-null");
  }
  if (mDrawables_ == nil) {
    JreStrongAssignAndConsume(&mDrawables_, new_JavaUtilArrayList_init());
  }
  if (![mDrawables_ containsWithId:drawable]) {
    [((JavaUtilArrayList *) nil_chk(mDrawables_)) addWithId:drawable];
    [self invalidateWithADRect:[drawable getBounds]];
    [drawable setCallbackWithId:self];
  }
}

- (void)removeWithADDrawable:(ADDrawable *)drawable {
  if (drawable == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"drawable must be non-null");
  }
  if (mDrawables_ != nil) {
    [mDrawables_ removeWithId:drawable];
    [self invalidateWithADRect:[drawable getBounds]];
    [drawable setCallbackWithId:nil];
  }
}

- (jboolean)verifyDrawableWithADDrawable:(ADDrawable *)who {
  return [super verifyDrawableWithADDrawable:who] || (mDrawables_ != nil && [mDrawables_ containsWithId:who]);
}

- (void)addWithADView:(ADView *)child {
  if (child == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"view must be non-null");
  }
  if ([[child getParent] isKindOfClass:[ADViewGroup class]]) {
    ADViewGroup *parent = (ADViewGroup *) cast_chk([child getParent], [ADViewGroup class]);
    if (parent != mHostView_ && [((ADViewGroup *) nil_chk(parent)) getParent] != nil && parent->mAttachInfo_ != nil) {
      IOSIntArray *parentLocation = [IOSIntArray arrayWithLength:2];
      IOSIntArray *hostViewLocation = [IOSIntArray arrayWithLength:2];
      [((ADViewGroup *) nil_chk(parent)) getLocationOnScreenWithIntArray:parentLocation];
      [((ADView *) nil_chk(mHostView_)) getLocationOnScreenWithIntArray:hostViewLocation];
      [child offsetLeftAndRightWithInt:IOSIntArray_Get(parentLocation, 0) - IOSIntArray_Get(hostViewLocation, 0)];
      [child offsetTopAndBottomWithInt:IOSIntArray_Get(parentLocation, 1) - IOSIntArray_Get(hostViewLocation, 1)];
    }
    [((ADViewGroup *) nil_chk(parent)) removeViewWithADView:child];
    if ([parent getLayoutTransition] != nil) {
      [((ADLayoutTransition *) nil_chk([parent getLayoutTransition])) cancelWithInt:ADLayoutTransition_DISAPPEARING];
    }
    if ([child getParent] != nil) {
      child->mParent_ = nil;
    }
  }
  [super addViewWithADView:child];
}

- (void)removeWithADView:(ADView *)view {
  if (view == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"view must be non-null");
  }
  [super removeViewWithADView:view];
}

- (void)clear {
  [self removeAllViews];
  if (mDrawables_ != nil) {
    for (ADDrawable * __strong drawable in mDrawables_) {
      [((ADDrawable *) nil_chk(drawable)) setCallbackWithId:nil];
    }
    [mDrawables_ clear];
  }
}

- (jboolean)isEmpty {
  if ([self getChildCount] == 0 && (mDrawables_ == nil || [mDrawables_ size] == 0)) {
    return true;
  }
  return false;
}

- (void)invalidateDrawableWithADDrawable:(ADDrawable *)drawable {
  [self invalidateWithADRect:[((ADDrawable *) nil_chk(drawable)) getBounds]];
}

- (void)dispatchDrawWithADCanvas:(id<ADCanvas>)canvas {
  jint numDrawables = (mDrawables_ == nil) ? 0 : [((JavaUtilArrayList *) nil_chk(mDrawables_)) size];
  for (jint i = 0; i < numDrawables; ++i) {
    [((ADDrawable *) nil_chk([((JavaUtilArrayList *) nil_chk(mDrawables_)) getWithInt:i])) drawWithADCanvas:canvas];
  }
}

- (void)onLayoutWithBoolean:(jboolean)changed
                    withInt:(jint)l
                    withInt:(jint)t
                    withInt:(jint)r
                    withInt:(jint)b {
}

- (void)invalidateWithADRect:(ADRect *)dirty {
  [super invalidateWithADRect:dirty];
  if (mHostView_ != nil) {
    [mHostView_ invalidateWithADRect:dirty];
  }
}

- (void)invalidateWithInt:(jint)l
                  withInt:(jint)t
                  withInt:(jint)r
                  withInt:(jint)b {
  [super invalidateWithInt:l withInt:t withInt:r withInt:b];
  if (mHostView_ != nil) {
    [mHostView_ invalidateWithInt:l withInt:t withInt:r withInt:b];
  }
}

- (void)invalidate {
  [super invalidate];
  if (mHostView_ != nil) {
    [mHostView_ invalidate];
  }
}

- (void)invalidateWithBoolean:(jboolean)invalidateCache {
  [super invalidateWithBoolean:invalidateCache];
  if (mHostView_ != nil) {
    [mHostView_ invalidateWithBoolean:invalidateCache];
  }
}

- (void)invalidateViewPropertyWithBoolean:(jboolean)invalidateParent
                              withBoolean:(jboolean)forceRedraw {
  [super invalidateViewPropertyWithBoolean:invalidateParent withBoolean:forceRedraw];
  if (mHostView_ != nil) {
    [mHostView_ invalidateViewPropertyWithBoolean:invalidateParent withBoolean:forceRedraw];
  }
}

- (void)invalidateParentCaches {
  [super invalidateParentCaches];
  if (mHostView_ != nil) {
    [mHostView_ invalidateParentCaches];
  }
}

- (void)invalidateParentIfNeeded {
  [super invalidateParentIfNeeded];
  if (mHostView_ != nil) {
    [mHostView_ invalidateParentIfNeeded];
  }
}

- (void)dealloc {
  RELEASE_(mHostView_);
  RELEASE_(mDrawables_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, 4, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 15, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithADContext:withADView:);
  methods[1].selector = @selector(addWithADDrawable:);
  methods[2].selector = @selector(removeWithADDrawable:);
  methods[3].selector = @selector(verifyDrawableWithADDrawable:);
  methods[4].selector = @selector(addWithADView:);
  methods[5].selector = @selector(removeWithADView:);
  methods[6].selector = @selector(clear);
  methods[7].selector = @selector(isEmpty);
  methods[8].selector = @selector(invalidateDrawableWithADDrawable:);
  methods[9].selector = @selector(dispatchDrawWithADCanvas:);
  methods[10].selector = @selector(onLayoutWithBoolean:withInt:withInt:withInt:withInt:);
  methods[11].selector = @selector(invalidateWithADRect:);
  methods[12].selector = @selector(invalidateWithInt:withInt:withInt:withInt:);
  methods[13].selector = @selector(invalidate);
  methods[14].selector = @selector(invalidateWithBoolean:);
  methods[15].selector = @selector(invalidateViewPropertyWithBoolean:withBoolean:);
  methods[16].selector = @selector(invalidateParentCaches);
  methods[17].selector = @selector(invalidateParentIfNeeded);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mHostView_", "LADView;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "mDrawables_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x0, -1, -1, 17, -1 },
  };
  static const void *ptrTable[] = { "LADContext;LADView;", "add", "LADDrawable;", "remove", "verifyDrawable", "LADView;", "invalidateDrawable", "dispatchDraw", "LADCanvas;", "onLayout", "ZIIII", "invalidate", "LADRect;", "IIII", "Z", "invalidateViewProperty", "ZZ", "Ljava/util/ArrayList<Lr/android/graphics/drawable/Drawable;>;", "LADViewOverlay;" };
  static const J2ObjcClassInfo _ADViewOverlay_OverlayViewGroup = { "OverlayViewGroup", "r.android.view", ptrTable, methods, fields, 7, 0x8, 18, 2, 18, -1, -1, -1, -1 };
  return &_ADViewOverlay_OverlayViewGroup;
}

@end

void ADViewOverlay_OverlayViewGroup_initWithADContext_withADView_(ADViewOverlay_OverlayViewGroup *self, ADContext *context, ADView *hostView) {
  ADViewGroup_init(self);
  JreStrongAssign(&self->mDrawables_, nil);
  JreStrongAssign(&self->mHostView_, hostView);
  JreStrongAssign(&self->mAttachInfo_, ((ADView *) nil_chk(self->mHostView_))->mAttachInfo_);
  self->mRight_ = [((ADView *) nil_chk(hostView)) getWidth];
  self->mBottom_ = [hostView getHeight];
  [((ADRenderNode *) nil_chk(self->mRenderNode_)) setLeftTopRightBottomWithInt:0 withInt:0 withInt:self->mRight_ withInt:self->mBottom_];
}

ADViewOverlay_OverlayViewGroup *new_ADViewOverlay_OverlayViewGroup_initWithADContext_withADView_(ADContext *context, ADView *hostView) {
  J2OBJC_NEW_IMPL(ADViewOverlay_OverlayViewGroup, initWithADContext_withADView_, context, hostView)
}

ADViewOverlay_OverlayViewGroup *create_ADViewOverlay_OverlayViewGroup_initWithADContext_withADView_(ADContext *context, ADView *hostView) {
  J2OBJC_CREATE_IMPL(ADViewOverlay_OverlayViewGroup, initWithADContext_withADView_, context, hostView)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADViewOverlay_OverlayViewGroup)
