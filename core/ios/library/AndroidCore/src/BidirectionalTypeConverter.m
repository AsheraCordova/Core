//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroid\src\main\java\r\android\animation\BidirectionalTypeConverter.java
//

#include "BidirectionalTypeConverter.h"
#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "TypeConverter.h"


@interface ADBidirectionalTypeConverter () {
 @public
  ADBidirectionalTypeConverter *mInvertedConverter_;
}

@end

J2OBJC_FIELD_SETTER(ADBidirectionalTypeConverter, mInvertedConverter_, ADBidirectionalTypeConverter *)

@interface ADBidirectionalTypeConverter_InvertedConverter : ADBidirectionalTypeConverter {
 @public
  ADBidirectionalTypeConverter *mConverter_;
}

- (instancetype)initWithADBidirectionalTypeConverter:(ADBidirectionalTypeConverter *)converter;

- (id)convertBackWithId:(id)value;

- (id)convertWithId:(id)value;

@end

J2OBJC_EMPTY_STATIC_INIT(ADBidirectionalTypeConverter_InvertedConverter)

J2OBJC_FIELD_SETTER(ADBidirectionalTypeConverter_InvertedConverter, mConverter_, ADBidirectionalTypeConverter *)

__attribute__((unused)) static void ADBidirectionalTypeConverter_InvertedConverter_initWithADBidirectionalTypeConverter_(ADBidirectionalTypeConverter_InvertedConverter *self, ADBidirectionalTypeConverter *converter);

__attribute__((unused)) static ADBidirectionalTypeConverter_InvertedConverter *new_ADBidirectionalTypeConverter_InvertedConverter_initWithADBidirectionalTypeConverter_(ADBidirectionalTypeConverter *converter) NS_RETURNS_RETAINED;

__attribute__((unused)) static ADBidirectionalTypeConverter_InvertedConverter *create_ADBidirectionalTypeConverter_InvertedConverter_initWithADBidirectionalTypeConverter_(ADBidirectionalTypeConverter *converter);

J2OBJC_TYPE_LITERAL_HEADER(ADBidirectionalTypeConverter_InvertedConverter)

@implementation ADBidirectionalTypeConverter

- (instancetype)initWithIOSClass:(IOSClass *)fromClass
                    withIOSClass:(IOSClass *)toClass {
  ADBidirectionalTypeConverter_initWithIOSClass_withIOSClass_(self, fromClass, toClass);
  return self;
}

- (id)convertBackWithId:(id)value {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (ADBidirectionalTypeConverter *)invert {
  if (mInvertedConverter_ == nil) {
    JreStrongAssignAndConsume(&mInvertedConverter_, new_ADBidirectionalTypeConverter_InvertedConverter_initWithADBidirectionalTypeConverter_(self));
  }
  return mInvertedConverter_;
}

- (void)dealloc {
  RELEASE_(mInvertedConverter_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "LNSObject;", 0x401, 2, 3, -1, 4, -1, -1 },
    { NULL, "LADBidirectionalTypeConverter;", 0x1, -1, -1, -1, 5, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithIOSClass:withIOSClass:);
  methods[1].selector = @selector(convertBackWithId:);
  methods[2].selector = @selector(invert);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mInvertedConverter_", "LADBidirectionalTypeConverter;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIOSClass;LIOSClass;", "(Ljava/lang/Class<TT;>;Ljava/lang/Class<TV;>;)V", "convertBack", "LNSObject;", "(TV;)TT;", "()Lr/android/animation/BidirectionalTypeConverter<TV;TT;>;", "LADBidirectionalTypeConverter_InvertedConverter;", "<T:Ljava/lang/Object;V:Ljava/lang/Object;>Lr/android/animation/TypeConverter<TT;TV;>;" };
  static const J2ObjcClassInfo _ADBidirectionalTypeConverter = { "BidirectionalTypeConverter", "r.android.animation", ptrTable, methods, fields, 7, 0x401, 3, 1, -1, 6, -1, 7, -1 };
  return &_ADBidirectionalTypeConverter;
}

@end

void ADBidirectionalTypeConverter_initWithIOSClass_withIOSClass_(ADBidirectionalTypeConverter *self, IOSClass *fromClass, IOSClass *toClass) {
  ADTypeConverter_initWithIOSClass_withIOSClass_(self, fromClass, toClass);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADBidirectionalTypeConverter)

@implementation ADBidirectionalTypeConverter_InvertedConverter

- (instancetype)initWithADBidirectionalTypeConverter:(ADBidirectionalTypeConverter *)converter {
  ADBidirectionalTypeConverter_InvertedConverter_initWithADBidirectionalTypeConverter_(self, converter);
  return self;
}

- (id)convertBackWithId:(id)value {
  return [((ADBidirectionalTypeConverter *) nil_chk(mConverter_)) convertWithId:value];
}

- (id)convertWithId:(id)value {
  return [((ADBidirectionalTypeConverter *) nil_chk(mConverter_)) convertBackWithId:value];
}

- (void)dealloc {
  RELEASE_(mConverter_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 2, 3, -1, 4, -1, -1 },
    { NULL, "LNSObject;", 0x1, 5, 3, -1, 6, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithADBidirectionalTypeConverter:);
  methods[1].selector = @selector(convertBackWithId:);
  methods[2].selector = @selector(convertWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mConverter_", "LADBidirectionalTypeConverter;", .constantValue.asLong = 0, 0x2, -1, -1, 7, -1 },
  };
  static const void *ptrTable[] = { "LADBidirectionalTypeConverter;", "(Lr/android/animation/BidirectionalTypeConverter<TTo;TFrom;>;)V", "convertBack", "LNSObject;", "(TTo;)TFrom;", "convert", "(TFrom;)TTo;", "Lr/android/animation/BidirectionalTypeConverter<TTo;TFrom;>;", "<From:Ljava/lang/Object;To:Ljava/lang/Object;>Lr/android/animation/BidirectionalTypeConverter<TFrom;TTo;>;" };
  static const J2ObjcClassInfo _ADBidirectionalTypeConverter_InvertedConverter = { "InvertedConverter", "r.android.animation", ptrTable, methods, fields, 7, 0xa, 3, 1, 0, -1, -1, 8, -1 };
  return &_ADBidirectionalTypeConverter_InvertedConverter;
}

@end

void ADBidirectionalTypeConverter_InvertedConverter_initWithADBidirectionalTypeConverter_(ADBidirectionalTypeConverter_InvertedConverter *self, ADBidirectionalTypeConverter *converter) {
  ADBidirectionalTypeConverter_initWithIOSClass_withIOSClass_(self, [((ADBidirectionalTypeConverter *) nil_chk(converter)) getTargetType], [converter getSourceType]);
  JreStrongAssign(&self->mConverter_, converter);
}

ADBidirectionalTypeConverter_InvertedConverter *new_ADBidirectionalTypeConverter_InvertedConverter_initWithADBidirectionalTypeConverter_(ADBidirectionalTypeConverter *converter) {
  J2OBJC_NEW_IMPL(ADBidirectionalTypeConverter_InvertedConverter, initWithADBidirectionalTypeConverter_, converter)
}

ADBidirectionalTypeConverter_InvertedConverter *create_ADBidirectionalTypeConverter_InvertedConverter_initWithADBidirectionalTypeConverter_(ADBidirectionalTypeConverter *converter) {
  J2OBJC_CREATE_IMPL(ADBidirectionalTypeConverter_InvertedConverter, initWithADBidirectionalTypeConverter_, converter)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADBidirectionalTypeConverter_InvertedConverter)
