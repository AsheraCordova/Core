//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroid\src\main\java\r\android\net\Uri.java
//

#include "Environment.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "Intent.h"
#include "J2ObjC_source.h"
#include "Log.h"
#include "Parcel.h"
#include "Parcelable.h"
#include "Uri.h"
#include "UriCodec.h"
#include "java/io/File.h"
#include "java/io/IOException.h"
#include "java/io/UnsupportedEncodingException.h"
#include "java/lang/AssertionError.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/lang/Integer.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/NumberFormatException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/net/URLEncoder.h"
#include "java/nio/charset/Charset.h"
#include "java/nio/charset/StandardCharsets.h"
#include "java/util/AbstractList.h"
#include "java/util/ArrayList.h"
#include "java/util/Collections.h"
#include "java/util/LinkedHashSet.h"
#include "java/util/List.h"
#include "java/util/Locale.h"
#include "java/util/Objects.h"
#include "java/util/Set.h"

@class JavaLangStringBuilder;
@protocol JavaUtilList;


#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface ADUri ()

/*!
 @brief Prevents external subclassing.
 */
- (instancetype)init;

/*!
 @brief Returns true if the given character is allowed.
 @param c character to check
 @param allow characters to allow
 @return true if the character is allowed or false if it should be
   encoded
 */
+ (jboolean)isAllowedWithChar:(jchar)c
                 withNSString:(NSString *)allow;

/*!
 @brief Returns true if the given string is already encoded to safe characters.
 @param value string to check
 @param allow characters to allow
 @return true if the string is already encoded or false if it should be encoded
 */
+ (jboolean)isEncodedWithNSString:(NSString *)value
                     withNSString:(NSString *)allow;

@end

/*!
 @brief Log tag.
 */
inline NSString *ADUri_get_LOG(void);
static NSString *ADUri_LOG;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADUri, LOG, NSString *)

/*!
 @brief Index of a component which was not found.
 */
inline jint ADUri_get_NOT_FOUND(void);
#define ADUri_NOT_FOUND -1
J2OBJC_STATIC_FIELD_CONSTANT(ADUri, NOT_FOUND, jint)

/*!
 @brief Placeholder value for an index which hasn't been calculated yet.
 */
inline jint ADUri_get_NOT_CALCULATED(void);
#define ADUri_NOT_CALCULATED -2
J2OBJC_STATIC_FIELD_CONSTANT(ADUri, NOT_CALCULATED, jint)

/*!
 @brief Error message presented when a user tries to treat an opaque URI as
  hierarchical.
 */
inline NSString *ADUri_get_NOT_HIERARCHICAL(void);
static NSString *ADUri_NOT_HIERARCHICAL = @"This isn't a hierarchical URI.";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADUri, NOT_HIERARCHICAL, NSString *)

/*!
 @brief Default encoding.
 */
inline NSString *ADUri_get_DEFAULT_ENCODING(void);
static NSString *ADUri_DEFAULT_ENCODING = @"UTF-8";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADUri, DEFAULT_ENCODING, NSString *)

/*!
 @brief Identifies a null parcelled Uri.
 */
inline jint ADUri_get_NULL_TYPE_ID(void);
#define ADUri_NULL_TYPE_ID 0
J2OBJC_STATIC_FIELD_CONSTANT(ADUri, NULL_TYPE_ID, jint)

inline IOSCharArray *ADUri_get_HEX_DIGITS(void);
static IOSCharArray *ADUri_HEX_DIGITS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADUri, HEX_DIGITS, IOSCharArray *)

__attribute__((unused)) static void ADUri_init(ADUri *self);

__attribute__((unused)) static jboolean ADUri_isAllowedWithChar_withNSString_(jchar c, NSString *allow);

__attribute__((unused)) static jboolean ADUri_isEncodedWithNSString_withNSString_(NSString *value, NSString *allow);

@interface ADUri_NotCachedHolder ()

- (instancetype)init;

@end

__attribute__((unused)) static void ADUri_NotCachedHolder_init(ADUri_NotCachedHolder *self);

__attribute__((unused)) static ADUri_NotCachedHolder *new_ADUri_NotCachedHolder_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static ADUri_NotCachedHolder *create_ADUri_NotCachedHolder_init(void);

/*!
 @brief Support for hierarchical URIs.
 */
@interface ADUri_AbstractHierarchicalUri : ADUri {
 @public
  ADUri_Part *userInfo_;
  volatile_id host_;
  volatile_jint port_;
}

- (instancetype)init;

- (NSString *)getLastPathSegment;

- (ADUri_Part *)getUserInfoPart;

- (NSString *)getEncodedUserInfo;

- (NSString *)parseUserInfo;

- (NSString *)getUserInfo;

- (NSString *)getHost;

- (NSString *)parseHost;

- (jint)getPort;

- (jint)parsePort;

- (jint)findPortSeparatorWithNSString:(NSString *)authority;

@end

J2OBJC_EMPTY_STATIC_INIT(ADUri_AbstractHierarchicalUri)

J2OBJC_FIELD_SETTER(ADUri_AbstractHierarchicalUri, userInfo_, ADUri_Part *)
J2OBJC_VOLATILE_FIELD_SETTER(ADUri_AbstractHierarchicalUri, host_, NSString *)

__attribute__((unused)) static void ADUri_AbstractHierarchicalUri_init(ADUri_AbstractHierarchicalUri *self);

__attribute__((unused)) static ADUri_Part *ADUri_AbstractHierarchicalUri_getUserInfoPart(ADUri_AbstractHierarchicalUri *self);

__attribute__((unused)) static NSString *ADUri_AbstractHierarchicalUri_parseUserInfo(ADUri_AbstractHierarchicalUri *self);

__attribute__((unused)) static NSString *ADUri_AbstractHierarchicalUri_parseHost(ADUri_AbstractHierarchicalUri *self);

__attribute__((unused)) static jint ADUri_AbstractHierarchicalUri_parsePort(ADUri_AbstractHierarchicalUri *self);

__attribute__((unused)) static jint ADUri_AbstractHierarchicalUri_findPortSeparatorWithNSString_(ADUri_AbstractHierarchicalUri *self, NSString *authority);

J2OBJC_TYPE_LITERAL_HEADER(ADUri_AbstractHierarchicalUri)

/*!
 @brief An implementation which wraps a String URI.This URI can be opaque or
  hierarchical, but we extend AbstractHierarchicalUri in case we need
  the hierarchical functionality.
 */
@interface ADUri_StringUri : ADUri_AbstractHierarchicalUri {
 @public
  /*!
   @brief URI string representation.
   */
  NSString *uriString_;
  /*!
   @brief Cached scheme separator index.
   */
  volatile_jint cachedSsi_;
  /*!
   @brief Cached fragment separator index.
   */
  volatile_jint cachedFsi_;
  volatile_id scheme_;
  ADUri_Part *ssp_;
  ADUri_Part *authority_;
  ADUri_PathPart *path_;
  ADUri_Part *query_;
  ADUri_Part *fragment_;
}

- (instancetype)initWithNSString:(NSString *)uriString;

+ (ADUri *)readFromWithADParcel:(id<ADParcel>)parcel;

- (jint)describeContents;

- (void)writeToParcelWithADParcel:(id<ADParcel>)parcel
                          withInt:(jint)flags;

/*!
 @brief Finds the first ':'.Returns -1 if none found.
 */
- (jint)findSchemeSeparator;

/*!
 @brief Finds the first '#'.Returns -1 if none found.
 */
- (jint)findFragmentSeparator;

- (jboolean)isHierarchical;

- (jboolean)isRelative;

- (NSString *)getScheme;

- (NSString *)parseScheme;

- (ADUri_Part *)getSsp;

- (NSString *)getEncodedSchemeSpecificPart;

- (NSString *)getSchemeSpecificPart;

- (NSString *)parseSsp;

- (ADUri_Part *)getAuthorityPart;

- (NSString *)getEncodedAuthority;

- (NSString *)getAuthority;

- (ADUri_PathPart *)getPathPart;

- (NSString *)getPath;

- (NSString *)getEncodedPath;

- (id<JavaUtilList>)getPathSegments;

- (NSString *)parsePath;

- (ADUri_Part *)getQueryPart;

- (NSString *)getEncodedQuery;

- (NSString *)parseQuery;

- (NSString *)getQuery;

- (ADUri_Part *)getFragmentPart;

- (NSString *)getEncodedFragment;

- (NSString *)parseFragment;

- (NSString *)getFragment;

- (NSString *)description;

/*!
 @brief Parses an authority out of the given URI string.
 @param uriString URI string
 @param ssi scheme separator index, -1 for a relative URI
 @return the authority or null if none is found
 */
+ (NSString *)parseAuthorityWithNSString:(NSString *)uriString
                                 withInt:(jint)ssi;

/*!
 @brief Parses a path out of this given URI string.
 @param uriString URI string
 @param ssi scheme separator index, -1 for a relative URI
 @return the path
 */
+ (NSString *)parsePathWithNSString:(NSString *)uriString
                            withInt:(jint)ssi;

- (ADUri_Builder *)buildUpon;

@end

J2OBJC_EMPTY_STATIC_INIT(ADUri_StringUri)

J2OBJC_FIELD_SETTER(ADUri_StringUri, uriString_, NSString *)
J2OBJC_VOLATILE_FIELD_SETTER(ADUri_StringUri, scheme_, NSString *)
J2OBJC_FIELD_SETTER(ADUri_StringUri, ssp_, ADUri_Part *)
J2OBJC_FIELD_SETTER(ADUri_StringUri, authority_, ADUri_Part *)
J2OBJC_FIELD_SETTER(ADUri_StringUri, path_, ADUri_PathPart *)
J2OBJC_FIELD_SETTER(ADUri_StringUri, query_, ADUri_Part *)
J2OBJC_FIELD_SETTER(ADUri_StringUri, fragment_, ADUri_Part *)

/*!
 @brief Used in parcelling.
 */
inline jint ADUri_StringUri_get_TYPE_ID(void);
#define ADUri_StringUri_TYPE_ID 1
J2OBJC_STATIC_FIELD_CONSTANT(ADUri_StringUri, TYPE_ID, jint)

__attribute__((unused)) static void ADUri_StringUri_initWithNSString_(ADUri_StringUri *self, NSString *uriString);

__attribute__((unused)) static ADUri_StringUri *new_ADUri_StringUri_initWithNSString_(NSString *uriString) NS_RETURNS_RETAINED;

__attribute__((unused)) static ADUri_StringUri *create_ADUri_StringUri_initWithNSString_(NSString *uriString);

__attribute__((unused)) static ADUri *ADUri_StringUri_readFromWithADParcel_(id<ADParcel> parcel);

__attribute__((unused)) static jint ADUri_StringUri_findSchemeSeparator(ADUri_StringUri *self);

__attribute__((unused)) static jint ADUri_StringUri_findFragmentSeparator(ADUri_StringUri *self);

__attribute__((unused)) static NSString *ADUri_StringUri_parseScheme(ADUri_StringUri *self);

__attribute__((unused)) static ADUri_Part *ADUri_StringUri_getSsp(ADUri_StringUri *self);

__attribute__((unused)) static NSString *ADUri_StringUri_parseSsp(ADUri_StringUri *self);

__attribute__((unused)) static ADUri_Part *ADUri_StringUri_getAuthorityPart(ADUri_StringUri *self);

__attribute__((unused)) static ADUri_PathPart *ADUri_StringUri_getPathPart(ADUri_StringUri *self);

__attribute__((unused)) static NSString *ADUri_StringUri_parsePath(ADUri_StringUri *self);

__attribute__((unused)) static ADUri_Part *ADUri_StringUri_getQueryPart(ADUri_StringUri *self);

__attribute__((unused)) static NSString *ADUri_StringUri_parseQuery(ADUri_StringUri *self);

__attribute__((unused)) static ADUri_Part *ADUri_StringUri_getFragmentPart(ADUri_StringUri *self);

__attribute__((unused)) static NSString *ADUri_StringUri_parseFragment(ADUri_StringUri *self);

__attribute__((unused)) static NSString *ADUri_StringUri_parseAuthorityWithNSString_withInt_(NSString *uriString, jint ssi);

__attribute__((unused)) static NSString *ADUri_StringUri_parsePathWithNSString_withInt_(NSString *uriString, jint ssi);

J2OBJC_TYPE_LITERAL_HEADER(ADUri_StringUri)

/*!
 @brief Opaque URI.
 */
@interface ADUri_OpaqueUri : ADUri {
 @public
  NSString *scheme_;
  ADUri_Part *ssp_;
  ADUri_Part *fragment_;
  volatile_id cachedString_;
}

- (instancetype)initWithNSString:(NSString *)scheme
                  withADUri_Part:(ADUri_Part *)ssp
                  withADUri_Part:(ADUri_Part *)fragment;

+ (ADUri *)readFromWithADParcel:(id<ADParcel>)parcel;

- (jint)describeContents;

- (void)writeToParcelWithADParcel:(id<ADParcel>)parcel
                          withInt:(jint)flags;

- (jboolean)isHierarchical;

- (jboolean)isRelative;

- (NSString *)getScheme;

- (NSString *)getEncodedSchemeSpecificPart;

- (NSString *)getSchemeSpecificPart;

- (NSString *)getAuthority;

- (NSString *)getEncodedAuthority;

- (NSString *)getPath;

- (NSString *)getEncodedPath;

- (NSString *)getQuery;

- (NSString *)getEncodedQuery;

- (NSString *)getFragment;

- (NSString *)getEncodedFragment;

- (id<JavaUtilList>)getPathSegments;

- (NSString *)getLastPathSegment;

- (NSString *)getUserInfo;

- (NSString *)getEncodedUserInfo;

- (NSString *)getHost;

- (jint)getPort;

- (NSString *)description;

- (ADUri_Builder *)buildUpon;

@end

J2OBJC_EMPTY_STATIC_INIT(ADUri_OpaqueUri)

J2OBJC_FIELD_SETTER(ADUri_OpaqueUri, scheme_, NSString *)
J2OBJC_FIELD_SETTER(ADUri_OpaqueUri, ssp_, ADUri_Part *)
J2OBJC_FIELD_SETTER(ADUri_OpaqueUri, fragment_, ADUri_Part *)
J2OBJC_VOLATILE_FIELD_SETTER(ADUri_OpaqueUri, cachedString_, NSString *)

/*!
 @brief Used in parcelling.
 */
inline jint ADUri_OpaqueUri_get_TYPE_ID(void);
#define ADUri_OpaqueUri_TYPE_ID 2
J2OBJC_STATIC_FIELD_CONSTANT(ADUri_OpaqueUri, TYPE_ID, jint)

__attribute__((unused)) static void ADUri_OpaqueUri_initWithNSString_withADUri_Part_withADUri_Part_(ADUri_OpaqueUri *self, NSString *scheme, ADUri_Part *ssp, ADUri_Part *fragment);

__attribute__((unused)) static ADUri_OpaqueUri *new_ADUri_OpaqueUri_initWithNSString_withADUri_Part_withADUri_Part_(NSString *scheme, ADUri_Part *ssp, ADUri_Part *fragment) NS_RETURNS_RETAINED;

__attribute__((unused)) static ADUri_OpaqueUri *create_ADUri_OpaqueUri_initWithNSString_withADUri_Part_withADUri_Part_(NSString *scheme, ADUri_Part *ssp, ADUri_Part *fragment);

__attribute__((unused)) static ADUri *ADUri_OpaqueUri_readFromWithADParcel_(id<ADParcel> parcel);

J2OBJC_TYPE_LITERAL_HEADER(ADUri_OpaqueUri)

/*!
 @brief Hierarchical Uri.
 */
@interface ADUri_HierarchicalUri : ADUri_AbstractHierarchicalUri {
 @public
  NSString *scheme_;
  ADUri_Part *authority_;
  ADUri_PathPart *path_;
  ADUri_Part *query_;
  ADUri_Part *fragment_;
  ADUri_Part *ssp_;
  volatile_id uriString_;
}

- (instancetype)initWithNSString:(NSString *)scheme
                  withADUri_Part:(ADUri_Part *)authority
              withADUri_PathPart:(ADUri_PathPart *)path
                  withADUri_Part:(ADUri_Part *)query
                  withADUri_Part:(ADUri_Part *)fragment;

- (ADUri_PathPart *)generatePathWithADUri_PathPart:(ADUri_PathPart *)originalPath;

+ (ADUri *)readFromWithADParcel:(id<ADParcel>)parcel;

- (jint)describeContents;

- (void)writeToParcelWithADParcel:(id<ADParcel>)parcel
                          withInt:(jint)flags;

- (jboolean)isHierarchical;

- (jboolean)isRelative;

- (NSString *)getScheme;

- (ADUri_Part *)getSsp;

- (NSString *)getEncodedSchemeSpecificPart;

- (NSString *)getSchemeSpecificPart;

/*!
 @brief Creates the encoded scheme-specific part from its sub parts.
 */
- (NSString *)makeSchemeSpecificPart;

- (void)appendSspToWithJavaLangStringBuilder:(JavaLangStringBuilder *)builder;

- (NSString *)getAuthority;

- (NSString *)getEncodedAuthority;

- (NSString *)getEncodedPath;

- (NSString *)getPath;

- (NSString *)getQuery;

- (NSString *)getEncodedQuery;

- (NSString *)getFragment;

- (NSString *)getEncodedFragment;

- (id<JavaUtilList>)getPathSegments;

- (NSString *)description;

- (NSString *)makeUriString;

- (ADUri_Builder *)buildUpon;

@end

J2OBJC_EMPTY_STATIC_INIT(ADUri_HierarchicalUri)

J2OBJC_FIELD_SETTER(ADUri_HierarchicalUri, scheme_, NSString *)
J2OBJC_FIELD_SETTER(ADUri_HierarchicalUri, authority_, ADUri_Part *)
J2OBJC_FIELD_SETTER(ADUri_HierarchicalUri, path_, ADUri_PathPart *)
J2OBJC_FIELD_SETTER(ADUri_HierarchicalUri, query_, ADUri_Part *)
J2OBJC_FIELD_SETTER(ADUri_HierarchicalUri, fragment_, ADUri_Part *)
J2OBJC_FIELD_SETTER(ADUri_HierarchicalUri, ssp_, ADUri_Part *)
J2OBJC_VOLATILE_FIELD_SETTER(ADUri_HierarchicalUri, uriString_, NSString *)

/*!
 @brief Used in parcelling.
 */
inline jint ADUri_HierarchicalUri_get_TYPE_ID(void);
#define ADUri_HierarchicalUri_TYPE_ID 3
J2OBJC_STATIC_FIELD_CONSTANT(ADUri_HierarchicalUri, TYPE_ID, jint)

__attribute__((unused)) static void ADUri_HierarchicalUri_initWithNSString_withADUri_Part_withADUri_PathPart_withADUri_Part_withADUri_Part_(ADUri_HierarchicalUri *self, NSString *scheme, ADUri_Part *authority, ADUri_PathPart *path, ADUri_Part *query, ADUri_Part *fragment);

__attribute__((unused)) static ADUri_HierarchicalUri *new_ADUri_HierarchicalUri_initWithNSString_withADUri_Part_withADUri_PathPart_withADUri_Part_withADUri_Part_(NSString *scheme, ADUri_Part *authority, ADUri_PathPart *path, ADUri_Part *query, ADUri_Part *fragment) NS_RETURNS_RETAINED;

__attribute__((unused)) static ADUri_HierarchicalUri *create_ADUri_HierarchicalUri_initWithNSString_withADUri_Part_withADUri_PathPart_withADUri_Part_withADUri_Part_(NSString *scheme, ADUri_Part *authority, ADUri_PathPart *path, ADUri_Part *query, ADUri_Part *fragment);

__attribute__((unused)) static ADUri_PathPart *ADUri_HierarchicalUri_generatePathWithADUri_PathPart_(ADUri_HierarchicalUri *self, ADUri_PathPart *originalPath);

__attribute__((unused)) static ADUri *ADUri_HierarchicalUri_readFromWithADParcel_(id<ADParcel> parcel);

__attribute__((unused)) static ADUri_Part *ADUri_HierarchicalUri_getSsp(ADUri_HierarchicalUri *self);

__attribute__((unused)) static NSString *ADUri_HierarchicalUri_makeSchemeSpecificPart(ADUri_HierarchicalUri *self);

__attribute__((unused)) static void ADUri_HierarchicalUri_appendSspToWithJavaLangStringBuilder_(ADUri_HierarchicalUri *self, JavaLangStringBuilder *builder);

__attribute__((unused)) static NSString *ADUri_HierarchicalUri_makeUriString(ADUri_HierarchicalUri *self);

J2OBJC_TYPE_LITERAL_HEADER(ADUri_HierarchicalUri)

@interface ADUri_Builder () {
 @public
  NSString *scheme_;
  ADUri_Part *opaquePart_;
  ADUri_Part *authority_;
  ADUri_PathPart *path_;
  ADUri_Part *query_;
  ADUri_Part *fragment_;
}

- (jboolean)hasSchemeOrAuthority;

@end

J2OBJC_FIELD_SETTER(ADUri_Builder, scheme_, NSString *)
J2OBJC_FIELD_SETTER(ADUri_Builder, opaquePart_, ADUri_Part *)
J2OBJC_FIELD_SETTER(ADUri_Builder, authority_, ADUri_Part *)
J2OBJC_FIELD_SETTER(ADUri_Builder, path_, ADUri_PathPart *)
J2OBJC_FIELD_SETTER(ADUri_Builder, query_, ADUri_Part *)
J2OBJC_FIELD_SETTER(ADUri_Builder, fragment_, ADUri_Part *)

__attribute__((unused)) static jboolean ADUri_Builder_hasSchemeOrAuthority(ADUri_Builder *self);

@interface ADUri_1 : ADParcelable_Creator

- (instancetype)init;

- (ADUri *)createFromParcelWithADParcel:(id<ADParcel>)inArg;

- (IOSObjectArray *)newArrayWithInt:(jint)size OBJC_METHOD_FAMILY_NONE;

@end

J2OBJC_EMPTY_STATIC_INIT(ADUri_1)

__attribute__((unused)) static void ADUri_1_init(ADUri_1 *self);

__attribute__((unused)) static ADUri_1 *new_ADUri_1_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static ADUri_1 *create_ADUri_1_init(void);

__attribute__((unused)) static NSString *ADUri_AbstractPart_getDecoded(ADUri_AbstractPart *self);

@interface ADUri_Part ()

- (instancetype)initWithNSString:(NSString *)encoded
                    withNSString:(NSString *)decoded;

@end

__attribute__((unused)) static void ADUri_Part_initWithNSString_withNSString_(ADUri_Part *self, NSString *encoded, NSString *decoded);

__attribute__((unused)) static ADUri_Part *new_ADUri_Part_initWithNSString_withNSString_(NSString *encoded, NSString *decoded) NS_RETURNS_RETAINED;

__attribute__((unused)) static ADUri_Part *create_ADUri_Part_initWithNSString_withNSString_(NSString *encoded, NSString *decoded);

@interface ADUri_Part_EmptyPart : ADUri_Part

- (instancetype)initWithNSString:(NSString *)value;

- (jboolean)isEmpty;

@end

J2OBJC_EMPTY_STATIC_INIT(ADUri_Part_EmptyPart)

__attribute__((unused)) static void ADUri_Part_EmptyPart_initWithNSString_(ADUri_Part_EmptyPart *self, NSString *value);

__attribute__((unused)) static ADUri_Part_EmptyPart *new_ADUri_Part_EmptyPart_initWithNSString_(NSString *value) NS_RETURNS_RETAINED;

__attribute__((unused)) static ADUri_Part_EmptyPart *create_ADUri_Part_EmptyPart_initWithNSString_(NSString *value);

J2OBJC_TYPE_LITERAL_HEADER(ADUri_Part_EmptyPart)

@interface ADUri_PathPart () {
 @public
  /*!
   @brief Cached path segments.This doesn't need to be volatile--we don't
  care if other threads see the result.
   */
  ADUri_PathSegments *pathSegments_;
}

- (instancetype)initWithNSString:(NSString *)encoded
                    withNSString:(NSString *)decoded;

@end

J2OBJC_FIELD_SETTER(ADUri_PathPart, pathSegments_, ADUri_PathSegments *)

__attribute__((unused)) static void ADUri_PathPart_initWithNSString_withNSString_(ADUri_PathPart *self, NSString *encoded, NSString *decoded);

__attribute__((unused)) static ADUri_PathPart *new_ADUri_PathPart_initWithNSString_withNSString_(NSString *encoded, NSString *decoded) NS_RETURNS_RETAINED;

__attribute__((unused)) static ADUri_PathPart *create_ADUri_PathPart_initWithNSString_withNSString_(NSString *encoded, NSString *decoded);

J2OBJC_INITIALIZED_DEFN(ADUri)

ADUri *ADUri_EMPTY;
ADParcelable_Creator *ADUri_CREATOR;

@implementation ADUri

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADUri_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jboolean)isHierarchical {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)isOpaque {
  return ![self isHierarchical];
}

- (jboolean)isRelative {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)isAbsolute {
  return ![self isRelative];
}

- (NSString *)getScheme {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSString *)getSchemeSpecificPart {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSString *)getEncodedSchemeSpecificPart {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSString *)getAuthority {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSString *)getEncodedAuthority {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSString *)getUserInfo {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSString *)getEncodedUserInfo {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSString *)getHost {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jint)getPort {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSString *)getPath {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSString *)getEncodedPath {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSString *)getQuery {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSString *)getEncodedQuery {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSString *)getFragment {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSString *)getEncodedFragment {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id<JavaUtilList>)getPathSegments {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSString *)getLastPathSegment {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)isEqual:(id)o {
  if (!([o isKindOfClass:[ADUri class]])) {
    return false;
  }
  ADUri *other = (ADUri *) cast_chk(o, [ADUri class]);
  return [((NSString *) nil_chk([self description])) isEqual:[((ADUri *) nil_chk(other)) description]];
}

- (NSUInteger)hash {
  return ((jint) [((NSString *) nil_chk([self description])) hash]);
}

- (jint)compareToWithId:(ADUri *)other {
  cast_chk(other, [ADUri class]);
  return [((NSString *) nil_chk([self description])) compareToWithId:[((ADUri *) nil_chk(other)) description]];
}

- (NSString *)description {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSString *)toSafeString {
  NSString *scheme = JreRetainedLocalValue([self getScheme]);
  NSString *ssp = JreRetainedLocalValue([self getSchemeSpecificPart]);
  JavaLangStringBuilder *builder = create_JavaLangStringBuilder_initWithInt_(64);
  if (scheme != nil) {
    [builder appendWithNSString:scheme];
    [builder appendWithNSString:@":"];
    if ([scheme java_equalsIgnoreCase:@"tel"] || [scheme java_equalsIgnoreCase:@"sip"] || [scheme java_equalsIgnoreCase:@"sms"] || [scheme java_equalsIgnoreCase:@"smsto"] || [scheme java_equalsIgnoreCase:@"mailto"] || [scheme java_equalsIgnoreCase:@"nfc"]) {
      if (ssp != nil) {
        for (jint i = 0; i < [ssp java_length]; i++) {
          jchar c = [ssp charAtWithInt:i];
          if (c == '-' || c == '@' || c == '.') {
            [builder appendWithChar:c];
          }
          else {
            [builder appendWithChar:'x'];
          }
        }
      }
    }
    else {
      NSString *host = [self getHost];
      jint port = [self getPort];
      NSString *path = [self getPath];
      NSString *authority = [self getAuthority];
      if (authority != nil) [builder appendWithNSString:@"//"];
      if (host != nil) [builder appendWithNSString:host];
      if (port != -1) [((JavaLangStringBuilder *) nil_chk([builder appendWithNSString:@":"])) appendWithInt:port];
      if (authority != nil || path != nil) [builder appendWithNSString:@"/..."];
    }
  }
  return [builder description];
}

- (ADUri_Builder *)buildUpon {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

+ (ADUri *)parseWithNSString:(NSString *)uriString {
  return ADUri_parseWithNSString_(uriString);
}

+ (ADUri *)fromFileWithJavaIoFile:(JavaIoFile *)file {
  return ADUri_fromFileWithJavaIoFile_(file);
}

+ (ADUri *)fromPartsWithNSString:(NSString *)scheme
                    withNSString:(NSString *)ssp
                    withNSString:(NSString *)fragment {
  return ADUri_fromPartsWithNSString_withNSString_withNSString_(scheme, ssp, fragment);
}

- (id<JavaUtilSet>)getQueryParameterNames {
  if ([self isOpaque]) {
    @throw create_JavaLangUnsupportedOperationException_initWithNSString_(ADUri_NOT_HIERARCHICAL);
  }
  NSString *query = JreRetainedLocalValue([self getEncodedQuery]);
  if (query == nil) {
    return JavaUtilCollections_emptySet();
  }
  id<JavaUtilSet> names = create_JavaUtilLinkedHashSet_init();
  jint start = 0;
  do {
    jint next = [query java_indexOf:'&' fromIndex:start];
    jint end = (next == -1) ? [query java_length] : next;
    jint separator = [query java_indexOf:'=' fromIndex:start];
    if (separator > end || separator == -1) {
      separator = end;
    }
    NSString *name = [query java_substring:start endIndex:separator];
    [names addWithId:ADUri_decodeWithNSString_(name)];
    start = end + 1;
  }
  while (start < [query java_length]);
  return JavaUtilCollections_unmodifiableSetWithJavaUtilSet_(names);
}

- (id<JavaUtilList>)getQueryParametersWithNSString:(NSString *)key {
  if ([self isOpaque]) {
    @throw create_JavaLangUnsupportedOperationException_initWithNSString_(ADUri_NOT_HIERARCHICAL);
  }
  if (key == nil) {
    @throw create_JavaLangNullPointerException_initWithNSString_(@"key");
  }
  NSString *query = JreRetainedLocalValue([self getEncodedQuery]);
  if (query == nil) {
    return JavaUtilCollections_emptyList();
  }
  NSString *encodedKey;
  @try {
    encodedKey = JavaNetURLEncoder_encodeWithNSString_withNSString_(key, ADUri_DEFAULT_ENCODING);
  }
  @catch (JavaIoUnsupportedEncodingException *e) {
    @throw create_JavaLangAssertionError_initWithId_(e);
  }
  JavaUtilArrayList *values = create_JavaUtilArrayList_init();
  jint start = 0;
  do {
    jint nextAmpersand = [query java_indexOf:'&' fromIndex:start];
    jint end = nextAmpersand != -1 ? nextAmpersand : [query java_length];
    jint separator = [query java_indexOf:'=' fromIndex:start];
    if (separator > end || separator == -1) {
      separator = end;
    }
    if (separator - start == [((NSString *) nil_chk(encodedKey)) java_length] && [query java_regionMatches:start aString:encodedKey otherOffset:0 count:[encodedKey java_length]]) {
      if (separator == end) {
        [values addWithId:@""];
      }
      else {
        [values addWithId:ADUri_decodeWithNSString_([query java_substring:separator + 1 endIndex:end])];
      }
    }
    if (nextAmpersand != -1) {
      start = nextAmpersand + 1;
    }
    else {
      break;
    }
  }
  while (true);
  return JavaUtilCollections_unmodifiableListWithJavaUtilList_(values);
}

- (NSString *)getQueryParameterWithNSString:(NSString *)key {
  if ([self isOpaque]) {
    @throw create_JavaLangUnsupportedOperationException_initWithNSString_(ADUri_NOT_HIERARCHICAL);
  }
  if (key == nil) {
    @throw create_JavaLangNullPointerException_initWithNSString_(@"key");
  }
  NSString *query = [self getEncodedQuery];
  if (query == nil) {
    return nil;
  }
  NSString *encodedKey = ADUri_encodeWithNSString_withNSString_(key, nil);
  jint length = [query java_length];
  jint start = 0;
  do {
    jint nextAmpersand = [query java_indexOf:'&' fromIndex:start];
    jint end = nextAmpersand != -1 ? nextAmpersand : length;
    jint separator = [query java_indexOf:'=' fromIndex:start];
    if (separator > end || separator == -1) {
      separator = end;
    }
    if (separator - start == [((NSString *) nil_chk(encodedKey)) java_length] && [query java_regionMatches:start aString:encodedKey otherOffset:0 count:[encodedKey java_length]]) {
      if (separator == end) {
        return @"";
      }
      else {
        NSString *encodedValue = [query java_substring:separator + 1 endIndex:end];
        return ADUriCodec_decodeWithNSString_withBoolean_withJavaNioCharsetCharset_withBoolean_(encodedValue, true, JreLoadStatic(JavaNioCharsetStandardCharsets, UTF_8), false);
      }
    }
    if (nextAmpersand != -1) {
      start = nextAmpersand + 1;
    }
    else {
      break;
    }
  }
  while (true);
  return nil;
}

- (jboolean)getBooleanQueryParameterWithNSString:(NSString *)key
                                     withBoolean:(jboolean)defaultValue {
  NSString *flag = JreRetainedLocalValue([self getQueryParameterWithNSString:key]);
  if (flag == nil) {
    return defaultValue;
  }
  flag = [flag java_lowercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, ROOT)];
  return (![@"false" isEqual:flag] && ![@"0" isEqual:flag]);
}

- (ADUri *)normalizeScheme {
  NSString *scheme = JreRetainedLocalValue([self getScheme]);
  if (scheme == nil) return self;
  NSString *lowerScheme = [scheme java_lowercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, ROOT)];
  if ([scheme isEqual:lowerScheme]) return self;
  return [((ADUri_Builder *) nil_chk([((ADUri_Builder *) nil_chk([self buildUpon])) schemeWithNSString:lowerScheme])) build];
}

+ (void)writeToParcelWithADParcel:(id<ADParcel>)outArg
                        withADUri:(ADUri *)uri {
  ADUri_writeToParcelWithADParcel_withADUri_(outArg, uri);
}

+ (NSString *)encodeWithNSString:(NSString *)s {
  return ADUri_encodeWithNSString_(s);
}

+ (NSString *)encodeWithNSString:(NSString *)s
                    withNSString:(NSString *)allow {
  return ADUri_encodeWithNSString_withNSString_(s, allow);
}

+ (jboolean)isAllowedWithChar:(jchar)c
                 withNSString:(NSString *)allow {
  return ADUri_isAllowedWithChar_withNSString_(c, allow);
}

+ (NSString *)encodeIfNotEncodedWithNSString:(NSString *)value
                                withNSString:(NSString *)allow {
  return ADUri_encodeIfNotEncodedWithNSString_withNSString_(value, allow);
}

+ (jboolean)isEncodedWithNSString:(NSString *)value
                     withNSString:(NSString *)allow {
  return ADUri_isEncodedWithNSString_withNSString_(value, allow);
}

+ (NSString *)decodeWithNSString:(NSString *)s {
  return ADUri_decodeWithNSString_(s);
}

+ (NSString *)decodeIfNeededWithNSString:(NSString *)value {
  return ADUri_decodeIfNeededWithNSString_(value);
}

+ (ADUri *)withAppendedPathWithADUri:(ADUri *)baseUri
                        withNSString:(NSString *)pathSegment {
  return ADUri_withAppendedPathWithADUri_withNSString_(baseUri, pathSegment);
}

- (ADUri *)getCanonicalUri {
  if ([@"file" isEqual:[self getScheme]]) {
    NSString *canonicalPath;
    @try {
      canonicalPath = [create_JavaIoFile_initWithNSString_([self getPath]) getCanonicalPath];
    }
    @catch (JavaIoIOException *e) {
      return self;
    }
    if (ADEnvironment_isExternalStorageEmulated()) {
      NSString *legacyPath = [nil_chk(ADEnvironment_getLegacyExternalStorageDirectory()) description];
      if ([((NSString *) nil_chk(canonicalPath)) java_hasPrefix:legacyPath]) {
        return ADUri_fromFileWithJavaIoFile_(create_JavaIoFile_initWithNSString_withNSString_([((JavaIoFile *) nil_chk(ADEnvironment_getExternalStorageDirectory())) description], [canonicalPath java_substring:[((NSString *) nil_chk(legacyPath)) java_length] + 1]));
      }
    }
    return ADUri_fromFileWithJavaIoFile_(create_JavaIoFile_initWithNSString_(canonicalPath));
  }
  else {
    return self;
  }
}

- (void)checkFileUriExposedWithNSString:(NSString *)location {
  if ([@"file" isEqual:[self getScheme]] && ([self getPath] != nil) && ![((NSString *) nil_chk([self getPath])) java_hasPrefix:@"/system/"]) {
  }
}

- (void)checkContentUriWithoutPermissionWithNSString:(NSString *)location
                                             withInt:(jint)flags {
  if ([@"content" isEqual:[self getScheme]] && !ADIntent_isAccessUriModeWithInt_(flags)) {
  }
}

- (jboolean)isPathPrefixMatchWithADUri:(ADUri *)prefix {
  if (!JavaUtilObjects_equalsWithId_withId_([self getScheme], [((ADUri *) nil_chk(prefix)) getScheme])) return false;
  if (!JavaUtilObjects_equalsWithId_withId_([self getAuthority], [prefix getAuthority])) return false;
  id<JavaUtilList> seg = JreRetainedLocalValue([self getPathSegments]);
  id<JavaUtilList> prefixSeg = JreRetainedLocalValue([prefix getPathSegments]);
  jint prefixSize = [((id<JavaUtilList>) nil_chk(prefixSeg)) size];
  if ([((id<JavaUtilList>) nil_chk(seg)) size] < prefixSize) return false;
  for (jint i = 0; i < prefixSize; i++) {
    if (!JavaUtilObjects_equalsWithId_withId_([seg getWithInt:i], [prefixSeg getWithInt:i])) {
      return false;
    }
  }
  return true;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x401, -1, -1, -1, 0, -1, -1 },
    { NULL, "LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 3, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, 6, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADUri_Builder;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADUri;", 0x9, 7, 8, -1, -1, -1, -1 },
    { NULL, "LADUri;", 0x9, 9, 10, -1, -1, -1, -1 },
    { NULL, "LADUri;", 0x9, 11, 12, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 13, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 14, 8, -1, 15, -1, -1 },
    { NULL, "LNSString;", 0x1, 16, 8, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 17, 18, -1, -1, -1, -1 },
    { NULL, "LADUri;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 19, 20, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 21, 8, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 21, 22, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 23, 24, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 25, 22, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 26, 22, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 27, 8, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 28, 8, -1, -1, -1, -1 },
    { NULL, "LADUri;", 0x9, 29, 30, -1, -1, -1, -1 },
    { NULL, "LADUri;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 31, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 32, 33, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 34, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(isHierarchical);
  methods[2].selector = @selector(isOpaque);
  methods[3].selector = @selector(isRelative);
  methods[4].selector = @selector(isAbsolute);
  methods[5].selector = @selector(getScheme);
  methods[6].selector = @selector(getSchemeSpecificPart);
  methods[7].selector = @selector(getEncodedSchemeSpecificPart);
  methods[8].selector = @selector(getAuthority);
  methods[9].selector = @selector(getEncodedAuthority);
  methods[10].selector = @selector(getUserInfo);
  methods[11].selector = @selector(getEncodedUserInfo);
  methods[12].selector = @selector(getHost);
  methods[13].selector = @selector(getPort);
  methods[14].selector = @selector(getPath);
  methods[15].selector = @selector(getEncodedPath);
  methods[16].selector = @selector(getQuery);
  methods[17].selector = @selector(getEncodedQuery);
  methods[18].selector = @selector(getFragment);
  methods[19].selector = @selector(getEncodedFragment);
  methods[20].selector = @selector(getPathSegments);
  methods[21].selector = @selector(getLastPathSegment);
  methods[22].selector = @selector(isEqual:);
  methods[23].selector = @selector(hash);
  methods[24].selector = @selector(compareToWithId:);
  methods[25].selector = @selector(description);
  methods[26].selector = @selector(toSafeString);
  methods[27].selector = @selector(buildUpon);
  methods[28].selector = @selector(parseWithNSString:);
  methods[29].selector = @selector(fromFileWithJavaIoFile:);
  methods[30].selector = @selector(fromPartsWithNSString:withNSString:withNSString:);
  methods[31].selector = @selector(getQueryParameterNames);
  methods[32].selector = @selector(getQueryParametersWithNSString:);
  methods[33].selector = @selector(getQueryParameterWithNSString:);
  methods[34].selector = @selector(getBooleanQueryParameterWithNSString:withBoolean:);
  methods[35].selector = @selector(normalizeScheme);
  methods[36].selector = @selector(writeToParcelWithADParcel:withADUri:);
  methods[37].selector = @selector(encodeWithNSString:);
  methods[38].selector = @selector(encodeWithNSString:withNSString:);
  methods[39].selector = @selector(isAllowedWithChar:withNSString:);
  methods[40].selector = @selector(encodeIfNotEncodedWithNSString:withNSString:);
  methods[41].selector = @selector(isEncodedWithNSString:withNSString:);
  methods[42].selector = @selector(decodeWithNSString:);
  methods[43].selector = @selector(decodeIfNeededWithNSString:);
  methods[44].selector = @selector(withAppendedPathWithADUri:withNSString:);
  methods[45].selector = @selector(getCanonicalUri);
  methods[46].selector = @selector(checkFileUriExposedWithNSString:);
  methods[47].selector = @selector(checkContentUriWithoutPermissionWithNSString:withInt:);
  methods[48].selector = @selector(isPathPrefixMatchWithADUri:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "LOG", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 35, -1, -1 },
    { "EMPTY", "LADUri;", .constantValue.asLong = 0, 0x19, -1, 36, -1, -1 },
    { "NOT_FOUND", "I", .constantValue.asInt = ADUri_NOT_FOUND, 0x1a, -1, -1, -1, -1 },
    { "NOT_CALCULATED", "I", .constantValue.asInt = ADUri_NOT_CALCULATED, 0x1a, -1, -1, -1, -1 },
    { "NOT_HIERARCHICAL", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 37, -1, -1 },
    { "DEFAULT_ENCODING", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 38, -1, -1 },
    { "NULL_TYPE_ID", "I", .constantValue.asInt = ADUri_NULL_TYPE_ID, 0x1a, -1, -1, -1, -1 },
    { "CREATOR", "LADParcelable_Creator;", .constantValue.asLong = 0, 0x19, -1, 39, 40, -1 },
    { "HEX_DIGITS", "[C", .constantValue.asLong = 0, 0x1a, -1, 41, -1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/List<Ljava/lang/String;>;", "equals", "LNSObject;", "hashCode", "compareTo", "LADUri;", "toString", "parse", "LNSString;", "fromFile", "LJavaIoFile;", "fromParts", "LNSString;LNSString;LNSString;", "()Ljava/util/Set<Ljava/lang/String;>;", "getQueryParameters", "(Ljava/lang/String;)Ljava/util/List<Ljava/lang/String;>;", "getQueryParameter", "getBooleanQueryParameter", "LNSString;Z", "writeToParcel", "LADParcel;LADUri;", "encode", "LNSString;LNSString;", "isAllowed", "CLNSString;", "encodeIfNotEncoded", "isEncoded", "decode", "decodeIfNeeded", "withAppendedPath", "LADUri;LNSString;", "checkFileUriExposed", "checkContentUriWithoutPermission", "LNSString;I", "isPathPrefixMatch", &ADUri_LOG, &ADUri_EMPTY, &ADUri_NOT_HIERARCHICAL, &ADUri_DEFAULT_ENCODING, &ADUri_CREATOR, "Lr/android/os/Parcelable$Creator<Lr/android/net/Uri;>;", &ADUri_HEX_DIGITS, "LADUri_NotCachedHolder;LADUri_StringUri;LADUri_OpaqueUri;LADUri_PathSegments;LADUri_PathSegmentsBuilder;LADUri_AbstractHierarchicalUri;LADUri_HierarchicalUri;LADUri_Builder;LADUri_AbstractPart;LADUri_Part;LADUri_PathPart;", "Ljava/lang/Object;Lr/android/os/Parcelable;Ljava/lang/Comparable<Lr/android/net/Uri;>;" };
  static const J2ObjcClassInfo _ADUri = { "Uri", "r.android.net", ptrTable, methods, fields, 7, 0x401, 49, 9, -1, 42, -1, 43, -1 };
  return &_ADUri;
}

+ (void)initialize {
  if (self == [ADUri class]) {
    JreStrongAssign(&ADUri_LOG, [ADUri_class_() getSimpleName]);
    JreStrongAssignAndConsume(&ADUri_EMPTY, new_ADUri_HierarchicalUri_initWithNSString_withADUri_Part_withADUri_PathPart_withADUri_Part_withADUri_Part_(nil, JreLoadStatic(ADUri_Part, NULL), JreLoadStatic(ADUri_PathPart, EMPTY), JreLoadStatic(ADUri_Part, NULL), JreLoadStatic(ADUri_Part, NULL)));
    JreStrongAssignAndConsume(&ADUri_CREATOR, new_ADUri_1_init());
    JreStrongAssign(&ADUri_HEX_DIGITS, [@"0123456789ABCDEF" java_toCharArray]);
    J2OBJC_SET_INITIALIZED(ADUri)
  }
}

@end

void ADUri_init(ADUri *self) {
  NSObject_init(self);
}

ADUri *ADUri_parseWithNSString_(NSString *uriString) {
  ADUri_initialize();
  return create_ADUri_StringUri_initWithNSString_(uriString);
}

ADUri *ADUri_fromFileWithJavaIoFile_(JavaIoFile *file) {
  ADUri_initialize();
  if (file == nil) {
    @throw create_JavaLangNullPointerException_initWithNSString_(@"file");
  }
  ADUri_PathPart *path = ADUri_PathPart_fromDecodedWithNSString_([file getAbsolutePath]);
  return create_ADUri_HierarchicalUri_initWithNSString_withADUri_Part_withADUri_PathPart_withADUri_Part_withADUri_Part_(@"file", JreLoadStatic(ADUri_Part, EMPTY), path, JreLoadStatic(ADUri_Part, NULL), JreLoadStatic(ADUri_Part, NULL));
}

ADUri *ADUri_fromPartsWithNSString_withNSString_withNSString_(NSString *scheme, NSString *ssp, NSString *fragment) {
  ADUri_initialize();
  if (scheme == nil) {
    @throw create_JavaLangNullPointerException_initWithNSString_(@"scheme");
  }
  if (ssp == nil) {
    @throw create_JavaLangNullPointerException_initWithNSString_(@"ssp");
  }
  return create_ADUri_OpaqueUri_initWithNSString_withADUri_Part_withADUri_Part_(scheme, ADUri_Part_fromDecodedWithNSString_(ssp), ADUri_Part_fromDecodedWithNSString_(fragment));
}

void ADUri_writeToParcelWithADParcel_withADUri_(id<ADParcel> outArg, ADUri *uri) {
  ADUri_initialize();
  if (uri == nil) {
    [((id<ADParcel>) nil_chk(outArg)) writeIntWithInt:ADUri_NULL_TYPE_ID];
  }
  else {
    [uri writeToParcelWithADParcel:outArg withInt:0];
  }
}

NSString *ADUri_encodeWithNSString_(NSString *s) {
  ADUri_initialize();
  return ADUri_encodeWithNSString_withNSString_(s, nil);
}

NSString *ADUri_encodeWithNSString_withNSString_(NSString *s, NSString *allow) {
  ADUri_initialize();
  if (s == nil) {
    return nil;
  }
  JavaLangStringBuilder *encoded = nil;
  jint oldLength = [s java_length];
  jint current = 0;
  while (current < oldLength) {
    jint nextToEncode = current;
    while (nextToEncode < oldLength && ADUri_isAllowedWithChar_withNSString_([s charAtWithInt:nextToEncode], allow)) {
      nextToEncode++;
    }
    if (nextToEncode == oldLength) {
      if (current == 0) {
        return s;
      }
      else {
        [((JavaLangStringBuilder *) nil_chk(encoded)) appendWithJavaLangCharSequence:s withInt:current withInt:oldLength];
        return [encoded description];
      }
    }
    if (encoded == nil) {
      encoded = create_JavaLangStringBuilder_init();
    }
    if (nextToEncode > current) {
      [encoded appendWithJavaLangCharSequence:s withInt:current withInt:nextToEncode];
    }
    else {
    }
    current = nextToEncode;
    jint nextAllowed = current + 1;
    while (nextAllowed < oldLength && !ADUri_isAllowedWithChar_withNSString_([s charAtWithInt:nextAllowed], allow)) {
      nextAllowed++;
    }
    NSString *toEncode = [s java_substring:current endIndex:nextAllowed];
    @try {
      IOSByteArray *bytes = [((NSString *) nil_chk(toEncode)) java_getBytesWithCharsetName:ADUri_DEFAULT_ENCODING];
      jint bytesLength = ((IOSByteArray *) nil_chk(bytes))->size_;
      for (jint i = 0; i < bytesLength; i++) {
        [encoded appendWithChar:'%'];
        [encoded appendWithChar:IOSCharArray_Get(nil_chk(ADUri_HEX_DIGITS), JreRShift32((IOSByteArray_Get(bytes, i) & (jint) 0xf0), 4))];
        [encoded appendWithChar:IOSCharArray_Get(ADUri_HEX_DIGITS, IOSByteArray_Get(bytes, i) & (jint) 0xf)];
      }
    }
    @catch (JavaIoUnsupportedEncodingException *e) {
      @throw create_JavaLangAssertionError_initWithId_(e);
    }
    current = nextAllowed;
  }
  return encoded == nil ? s : [encoded description];
}

jboolean ADUri_isAllowedWithChar_withNSString_(jchar c, NSString *allow) {
  ADUri_initialize();
  return (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z') || (c >= '0' && c <= '9') || [@"_-!.~'()*" java_indexOf:c] != ADUri_NOT_FOUND || (allow != nil && [allow java_indexOf:c] != ADUri_NOT_FOUND);
}

NSString *ADUri_encodeIfNotEncodedWithNSString_withNSString_(NSString *value, NSString *allow) {
  ADUri_initialize();
  if (value == nil) return nil;
  if (ADUri_isEncodedWithNSString_withNSString_(value, allow)) return value;
  return ADUri_encodeWithNSString_withNSString_(value, allow);
}

jboolean ADUri_isEncodedWithNSString_withNSString_(NSString *value, NSString *allow) {
  ADUri_initialize();
  if (value == nil) return true;
  for (jint index = 0; index < [value java_length]; index++) {
    jchar c = [value charAtWithInt:index];
    if (!ADUri_isAllowedWithChar_withNSString_(c, allow) && c != '%') {
      return false;
    }
  }
  return true;
}

NSString *ADUri_decodeWithNSString_(NSString *s) {
  ADUri_initialize();
  if (s == nil) {
    return nil;
  }
  return ADUriCodec_decodeWithNSString_withBoolean_withJavaNioCharsetCharset_withBoolean_(s, false, JreLoadStatic(JavaNioCharsetStandardCharsets, UTF_8), false);
}

NSString *ADUri_decodeIfNeededWithNSString_(NSString *value) {
  ADUri_initialize();
  if (value == nil) return nil;
  if ([value java_contains:@"%"]) return ADUri_decodeWithNSString_(value);
  return value;
}

ADUri *ADUri_withAppendedPathWithADUri_withNSString_(ADUri *baseUri, NSString *pathSegment) {
  ADUri_initialize();
  ADUri_Builder *builder = JreRetainedLocalValue([((ADUri *) nil_chk(baseUri)) buildUpon]);
  builder = [((ADUri_Builder *) nil_chk(builder)) appendEncodedPathWithNSString:pathSegment];
  return [((ADUri_Builder *) nil_chk(builder)) build];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADUri)

J2OBJC_INITIALIZED_DEFN(ADUri_NotCachedHolder)

NSString *ADUri_NotCachedHolder_NOT_CACHED;

@implementation ADUri_NotCachedHolder

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADUri_NotCachedHolder_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "NOT_CACHED", "LNSString;", .constantValue.asLong = 0, 0x18, -1, 0, -1, -1 },
  };
  static const void *ptrTable[] = { &ADUri_NotCachedHolder_NOT_CACHED, "LADUri;" };
  static const J2ObjcClassInfo _ADUri_NotCachedHolder = { "NotCachedHolder", "r.android.net", ptrTable, methods, fields, 7, 0x8, 1, 1, 1, -1, -1, -1, -1 };
  return &_ADUri_NotCachedHolder;
}

+ (void)initialize {
  if (self == [ADUri_NotCachedHolder class]) {
    JreStrongAssign(&ADUri_NotCachedHolder_NOT_CACHED, @"NOT CACHED");
    J2OBJC_SET_INITIALIZED(ADUri_NotCachedHolder)
  }
}

@end

void ADUri_NotCachedHolder_init(ADUri_NotCachedHolder *self) {
  NSObject_init(self);
}

ADUri_NotCachedHolder *new_ADUri_NotCachedHolder_init() {
  J2OBJC_NEW_IMPL(ADUri_NotCachedHolder, init)
}

ADUri_NotCachedHolder *create_ADUri_NotCachedHolder_init() {
  J2OBJC_CREATE_IMPL(ADUri_NotCachedHolder, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADUri_NotCachedHolder)

@implementation ADUri_AbstractHierarchicalUri

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADUri_AbstractHierarchicalUri_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (NSString *)getLastPathSegment {
  id<JavaUtilList> segments = JreRetainedLocalValue([self getPathSegments]);
  jint size = [((id<JavaUtilList>) nil_chk(segments)) size];
  if (size == 0) {
    return nil;
  }
  return [segments getWithInt:size - 1];
}

- (ADUri_Part *)getUserInfoPart {
  return ADUri_AbstractHierarchicalUri_getUserInfoPart(self);
}

- (NSString *)getEncodedUserInfo {
  return [((ADUri_Part *) nil_chk(ADUri_AbstractHierarchicalUri_getUserInfoPart(self))) getEncoded];
}

- (NSString *)parseUserInfo {
  return ADUri_AbstractHierarchicalUri_parseUserInfo(self);
}

- (NSString *)getUserInfo {
  return ADUri_AbstractPart_getDecoded(nil_chk(ADUri_AbstractHierarchicalUri_getUserInfoPart(self)));
}

- (NSString *)getHost {
  jboolean cached = (JreLoadVolatileId(&host_) != JreLoadStatic(ADUri_NotCachedHolder, NOT_CACHED));
  return cached ? JreLoadVolatileId(&host_) : (JreVolatileStrongAssign(&host_, ADUri_AbstractHierarchicalUri_parseHost(self)));
}

- (NSString *)parseHost {
  return ADUri_AbstractHierarchicalUri_parseHost(self);
}

- (jint)getPort {
  return JreLoadVolatileInt(&port_) == ADUri_NOT_CALCULATED ? JreAssignVolatileInt(&port_, ADUri_AbstractHierarchicalUri_parsePort(self)) : JreLoadVolatileInt(&port_);
}

- (jint)parsePort {
  return ADUri_AbstractHierarchicalUri_parsePort(self);
}

- (jint)findPortSeparatorWithNSString:(NSString *)authority {
  return ADUri_AbstractHierarchicalUri_findPortSeparatorWithNSString_(self, authority);
}

- (void)__javaClone:(ADUri_AbstractHierarchicalUri *)original {
  [super __javaClone:original];
  JreCloneVolatileStrong(&host_, &original->host_);
}

- (void)dealloc {
  RELEASE_(userInfo_);
  JreReleaseVolatile(&host_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADUri_Part;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getLastPathSegment);
  methods[2].selector = @selector(getUserInfoPart);
  methods[3].selector = @selector(getEncodedUserInfo);
  methods[4].selector = @selector(parseUserInfo);
  methods[5].selector = @selector(getUserInfo);
  methods[6].selector = @selector(getHost);
  methods[7].selector = @selector(parseHost);
  methods[8].selector = @selector(getPort);
  methods[9].selector = @selector(parsePort);
  methods[10].selector = @selector(findPortSeparatorWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "userInfo_", "LADUri_Part;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "host_", "LNSString;", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "port_", "I", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "findPortSeparator", "LNSString;", "LADUri;" };
  static const J2ObjcClassInfo _ADUri_AbstractHierarchicalUri = { "AbstractHierarchicalUri", "r.android.net", ptrTable, methods, fields, 7, 0x40a, 11, 3, 2, -1, -1, -1, -1 };
  return &_ADUri_AbstractHierarchicalUri;
}

@end

void ADUri_AbstractHierarchicalUri_init(ADUri_AbstractHierarchicalUri *self) {
  ADUri_init(self);
  JreVolatileStrongAssign(&self->host_, JreLoadStatic(ADUri_NotCachedHolder, NOT_CACHED));
  JreAssignVolatileInt(&self->port_, ADUri_NOT_CALCULATED);
}

ADUri_Part *ADUri_AbstractHierarchicalUri_getUserInfoPart(ADUri_AbstractHierarchicalUri *self) {
  return self->userInfo_ == nil ? JreStrongAssign(&self->userInfo_, ADUri_Part_fromEncodedWithNSString_(ADUri_AbstractHierarchicalUri_parseUserInfo(self))) : self->userInfo_;
}

NSString *ADUri_AbstractHierarchicalUri_parseUserInfo(ADUri_AbstractHierarchicalUri *self) {
  NSString *authority = JreRetainedLocalValue([self getEncodedAuthority]);
  if (authority == nil) {
    return nil;
  }
  jint end = [authority java_lastIndexOf:'@'];
  return end == ADUri_NOT_FOUND ? nil : [authority java_substring:0 endIndex:end];
}

NSString *ADUri_AbstractHierarchicalUri_parseHost(ADUri_AbstractHierarchicalUri *self) {
  NSString *authority = [self getEncodedAuthority];
  if (authority == nil) {
    return nil;
  }
  jint userInfoSeparator = [authority java_lastIndexOf:'@'];
  jint portSeparator = ADUri_AbstractHierarchicalUri_findPortSeparatorWithNSString_(self, authority);
  NSString *encodedHost = portSeparator == ADUri_NOT_FOUND ? [authority java_substring:userInfoSeparator + 1] : [authority java_substring:userInfoSeparator + 1 endIndex:portSeparator];
  return ADUri_decodeWithNSString_(encodedHost);
}

jint ADUri_AbstractHierarchicalUri_parsePort(ADUri_AbstractHierarchicalUri *self) {
  NSString *authority = [self getEncodedAuthority];
  jint portSeparator = ADUri_AbstractHierarchicalUri_findPortSeparatorWithNSString_(self, authority);
  if (portSeparator == ADUri_NOT_FOUND) {
    return -1;
  }
  NSString *portString = ADUri_decodeWithNSString_([((NSString *) nil_chk(authority)) java_substring:portSeparator + 1]);
  @try {
    return JavaLangInteger_parseIntWithNSString_(portString);
  }
  @catch (JavaLangNumberFormatException *e) {
    ADLog_wWithNSString_withNSString_withJavaLangThrowable_(JreLoadStatic(ADUri, LOG), @"Error parsing port string.", e);
    return -1;
  }
}

jint ADUri_AbstractHierarchicalUri_findPortSeparatorWithNSString_(ADUri_AbstractHierarchicalUri *self, NSString *authority) {
  if (authority == nil) {
    return ADUri_NOT_FOUND;
  }
  for (jint i = [authority java_length] - 1; i >= 0; --i) {
    jint character = [authority charAtWithInt:i];
    if (':' == character) return i;
    if (character < '0' || character > '9') return ADUri_NOT_FOUND;
  }
  return ADUri_NOT_FOUND;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADUri_AbstractHierarchicalUri)

@implementation ADUri_StringUri

- (instancetype)initWithNSString:(NSString *)uriString {
  ADUri_StringUri_initWithNSString_(self, uriString);
  return self;
}

+ (ADUri *)readFromWithADParcel:(id<ADParcel>)parcel {
  return ADUri_StringUri_readFromWithADParcel_(parcel);
}

- (jint)describeContents {
  return 0;
}

- (void)writeToParcelWithADParcel:(id<ADParcel>)parcel
                          withInt:(jint)flags {
  [((id<ADParcel>) nil_chk(parcel)) writeIntWithInt:ADUri_StringUri_TYPE_ID];
  [parcel writeString8WithNSString:uriString_];
}

- (jint)findSchemeSeparator {
  return ADUri_StringUri_findSchemeSeparator(self);
}

- (jint)findFragmentSeparator {
  return ADUri_StringUri_findFragmentSeparator(self);
}

- (jboolean)isHierarchical {
  jint ssi = ADUri_StringUri_findSchemeSeparator(self);
  if (ssi == ADUri_NOT_FOUND) {
    return true;
  }
  if ([((NSString *) nil_chk(uriString_)) java_length] == ssi + 1) {
    return false;
  }
  return [uriString_ charAtWithInt:ssi + 1] == '/';
}

- (jboolean)isRelative {
  return ADUri_StringUri_findSchemeSeparator(self) == ADUri_NOT_FOUND;
}

- (NSString *)getScheme {
  jboolean cached = (JreLoadVolatileId(&scheme_) != JreLoadStatic(ADUri_NotCachedHolder, NOT_CACHED));
  return cached ? JreLoadVolatileId(&scheme_) : (JreVolatileStrongAssign(&scheme_, ADUri_StringUri_parseScheme(self)));
}

- (NSString *)parseScheme {
  return ADUri_StringUri_parseScheme(self);
}

- (ADUri_Part *)getSsp {
  return ADUri_StringUri_getSsp(self);
}

- (NSString *)getEncodedSchemeSpecificPart {
  return [((ADUri_Part *) nil_chk(ADUri_StringUri_getSsp(self))) getEncoded];
}

- (NSString *)getSchemeSpecificPart {
  return ADUri_AbstractPart_getDecoded(nil_chk(ADUri_StringUri_getSsp(self)));
}

- (NSString *)parseSsp {
  return ADUri_StringUri_parseSsp(self);
}

- (ADUri_Part *)getAuthorityPart {
  return ADUri_StringUri_getAuthorityPart(self);
}

- (NSString *)getEncodedAuthority {
  return [((ADUri_Part *) nil_chk(ADUri_StringUri_getAuthorityPart(self))) getEncoded];
}

- (NSString *)getAuthority {
  return ADUri_AbstractPart_getDecoded(nil_chk(ADUri_StringUri_getAuthorityPart(self)));
}

- (ADUri_PathPart *)getPathPart {
  return ADUri_StringUri_getPathPart(self);
}

- (NSString *)getPath {
  return ADUri_AbstractPart_getDecoded(nil_chk(ADUri_StringUri_getPathPart(self)));
}

- (NSString *)getEncodedPath {
  return [((ADUri_PathPart *) nil_chk(ADUri_StringUri_getPathPart(self))) getEncoded];
}

- (id<JavaUtilList>)getPathSegments {
  return [((ADUri_PathPart *) nil_chk(ADUri_StringUri_getPathPart(self))) getPathSegments];
}

- (NSString *)parsePath {
  return ADUri_StringUri_parsePath(self);
}

- (ADUri_Part *)getQueryPart {
  return ADUri_StringUri_getQueryPart(self);
}

- (NSString *)getEncodedQuery {
  return [((ADUri_Part *) nil_chk(ADUri_StringUri_getQueryPart(self))) getEncoded];
}

- (NSString *)parseQuery {
  return ADUri_StringUri_parseQuery(self);
}

- (NSString *)getQuery {
  return ADUri_AbstractPart_getDecoded(nil_chk(ADUri_StringUri_getQueryPart(self)));
}

- (ADUri_Part *)getFragmentPart {
  return ADUri_StringUri_getFragmentPart(self);
}

- (NSString *)getEncodedFragment {
  return [((ADUri_Part *) nil_chk(ADUri_StringUri_getFragmentPart(self))) getEncoded];
}

- (NSString *)parseFragment {
  return ADUri_StringUri_parseFragment(self);
}

- (NSString *)getFragment {
  return ADUri_AbstractPart_getDecoded(nil_chk(ADUri_StringUri_getFragmentPart(self)));
}

- (NSString *)description {
  return uriString_;
}

+ (NSString *)parseAuthorityWithNSString:(NSString *)uriString
                                 withInt:(jint)ssi {
  return ADUri_StringUri_parseAuthorityWithNSString_withInt_(uriString, ssi);
}

+ (NSString *)parsePathWithNSString:(NSString *)uriString
                            withInt:(jint)ssi {
  return ADUri_StringUri_parsePathWithNSString_withInt_(uriString, ssi);
}

- (ADUri_Builder *)buildUpon {
  if ([self isHierarchical]) {
    return [((ADUri_Builder *) nil_chk([((ADUri_Builder *) nil_chk([((ADUri_Builder *) nil_chk([((ADUri_Builder *) nil_chk([create_ADUri_Builder_init() schemeWithNSString:[self getScheme]])) authorityWithADUri_Part:ADUri_StringUri_getAuthorityPart(self)])) pathWithADUri_PathPart:ADUri_StringUri_getPathPart(self)])) queryWithADUri_Part:ADUri_StringUri_getQueryPart(self)])) fragmentWithADUri_Part:ADUri_StringUri_getFragmentPart(self)];
  }
  else {
    return [((ADUri_Builder *) nil_chk([((ADUri_Builder *) nil_chk([create_ADUri_Builder_init() schemeWithNSString:[self getScheme]])) opaquePartWithADUri_Part:ADUri_StringUri_getSsp(self)])) fragmentWithADUri_Part:ADUri_StringUri_getFragmentPart(self)];
  }
}

- (void)__javaClone:(ADUri_StringUri *)original {
  [super __javaClone:original];
  JreCloneVolatileStrong(&scheme_, &original->scheme_);
}

- (void)dealloc {
  RELEASE_(uriString_);
  JreReleaseVolatile(&scheme_);
  RELEASE_(ssp_);
  RELEASE_(authority_);
  RELEASE_(path_);
  RELEASE_(query_);
  RELEASE_(fragment_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "LADUri;", 0x8, 1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADUri_Part;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADUri_Part;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADUri_PathPart;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 5, -1, -1 },
    { NULL, "LNSString;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADUri_Part;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADUri_Part;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 6, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x8, 7, 8, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x8, 9, 8, -1, -1, -1, -1 },
    { NULL, "LADUri_Builder;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(readFromWithADParcel:);
  methods[2].selector = @selector(describeContents);
  methods[3].selector = @selector(writeToParcelWithADParcel:withInt:);
  methods[4].selector = @selector(findSchemeSeparator);
  methods[5].selector = @selector(findFragmentSeparator);
  methods[6].selector = @selector(isHierarchical);
  methods[7].selector = @selector(isRelative);
  methods[8].selector = @selector(getScheme);
  methods[9].selector = @selector(parseScheme);
  methods[10].selector = @selector(getSsp);
  methods[11].selector = @selector(getEncodedSchemeSpecificPart);
  methods[12].selector = @selector(getSchemeSpecificPart);
  methods[13].selector = @selector(parseSsp);
  methods[14].selector = @selector(getAuthorityPart);
  methods[15].selector = @selector(getEncodedAuthority);
  methods[16].selector = @selector(getAuthority);
  methods[17].selector = @selector(getPathPart);
  methods[18].selector = @selector(getPath);
  methods[19].selector = @selector(getEncodedPath);
  methods[20].selector = @selector(getPathSegments);
  methods[21].selector = @selector(parsePath);
  methods[22].selector = @selector(getQueryPart);
  methods[23].selector = @selector(getEncodedQuery);
  methods[24].selector = @selector(parseQuery);
  methods[25].selector = @selector(getQuery);
  methods[26].selector = @selector(getFragmentPart);
  methods[27].selector = @selector(getEncodedFragment);
  methods[28].selector = @selector(parseFragment);
  methods[29].selector = @selector(getFragment);
  methods[30].selector = @selector(description);
  methods[31].selector = @selector(parseAuthorityWithNSString:withInt:);
  methods[32].selector = @selector(parsePathWithNSString:withInt:);
  methods[33].selector = @selector(buildUpon);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "TYPE_ID", "I", .constantValue.asInt = ADUri_StringUri_TYPE_ID, 0x18, -1, -1, -1, -1 },
    { "uriString_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "cachedSsi_", "I", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "cachedFsi_", "I", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "scheme_", "LNSString;", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
    { "ssp_", "LADUri_Part;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "authority_", "LADUri_Part;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "path_", "LADUri_PathPart;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "query_", "LADUri_Part;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "fragment_", "LADUri_Part;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "readFrom", "LADParcel;", "writeToParcel", "LADParcel;I", "()Ljava/util/List<Ljava/lang/String;>;", "toString", "parseAuthority", "LNSString;I", "parsePath", "LADUri;" };
  static const J2ObjcClassInfo _ADUri_StringUri = { "StringUri", "r.android.net", ptrTable, methods, fields, 7, 0xa, 34, 10, 10, -1, -1, -1, -1 };
  return &_ADUri_StringUri;
}

@end

void ADUri_StringUri_initWithNSString_(ADUri_StringUri *self, NSString *uriString) {
  ADUri_AbstractHierarchicalUri_init(self);
  JreAssignVolatileInt(&self->cachedSsi_, ADUri_NOT_CALCULATED);
  JreAssignVolatileInt(&self->cachedFsi_, ADUri_NOT_CALCULATED);
  JreVolatileStrongAssign(&self->scheme_, JreLoadStatic(ADUri_NotCachedHolder, NOT_CACHED));
  if (uriString == nil) {
    @throw create_JavaLangNullPointerException_initWithNSString_(@"uriString");
  }
  JreStrongAssign(&self->uriString_, uriString);
}

ADUri_StringUri *new_ADUri_StringUri_initWithNSString_(NSString *uriString) {
  J2OBJC_NEW_IMPL(ADUri_StringUri, initWithNSString_, uriString)
}

ADUri_StringUri *create_ADUri_StringUri_initWithNSString_(NSString *uriString) {
  J2OBJC_CREATE_IMPL(ADUri_StringUri, initWithNSString_, uriString)
}

ADUri *ADUri_StringUri_readFromWithADParcel_(id<ADParcel> parcel) {
  ADUri_StringUri_initialize();
  return create_ADUri_StringUri_initWithNSString_([((id<ADParcel>) nil_chk(parcel)) readString8]);
}

jint ADUri_StringUri_findSchemeSeparator(ADUri_StringUri *self) {
  return JreLoadVolatileInt(&self->cachedSsi_) == ADUri_NOT_CALCULATED ? JreAssignVolatileInt(&self->cachedSsi_, [((NSString *) nil_chk(self->uriString_)) java_indexOf:':']) : JreLoadVolatileInt(&self->cachedSsi_);
}

jint ADUri_StringUri_findFragmentSeparator(ADUri_StringUri *self) {
  return JreLoadVolatileInt(&self->cachedFsi_) == ADUri_NOT_CALCULATED ? JreAssignVolatileInt(&self->cachedFsi_, [((NSString *) nil_chk(self->uriString_)) java_indexOf:'#' fromIndex:ADUri_StringUri_findSchemeSeparator(self)]) : JreLoadVolatileInt(&self->cachedFsi_);
}

NSString *ADUri_StringUri_parseScheme(ADUri_StringUri *self) {
  jint ssi = ADUri_StringUri_findSchemeSeparator(self);
  return ssi == ADUri_NOT_FOUND ? nil : [((NSString *) nil_chk(self->uriString_)) java_substring:0 endIndex:ssi];
}

ADUri_Part *ADUri_StringUri_getSsp(ADUri_StringUri *self) {
  return self->ssp_ == nil ? JreStrongAssign(&self->ssp_, ADUri_Part_fromEncodedWithNSString_(ADUri_StringUri_parseSsp(self))) : self->ssp_;
}

NSString *ADUri_StringUri_parseSsp(ADUri_StringUri *self) {
  jint ssi = ADUri_StringUri_findSchemeSeparator(self);
  jint fsi = ADUri_StringUri_findFragmentSeparator(self);
  return fsi == ADUri_NOT_FOUND ? [((NSString *) nil_chk(self->uriString_)) java_substring:ssi + 1] : [((NSString *) nil_chk(self->uriString_)) java_substring:ssi + 1 endIndex:fsi];
}

ADUri_Part *ADUri_StringUri_getAuthorityPart(ADUri_StringUri *self) {
  if (self->authority_ == nil) {
    NSString *encodedAuthority = ADUri_StringUri_parseAuthorityWithNSString_withInt_(self->uriString_, ADUri_StringUri_findSchemeSeparator(self));
    return JreStrongAssign(&self->authority_, ADUri_Part_fromEncodedWithNSString_(encodedAuthority));
  }
  return self->authority_;
}

ADUri_PathPart *ADUri_StringUri_getPathPart(ADUri_StringUri *self) {
  return self->path_ == nil ? JreStrongAssign(&self->path_, ADUri_PathPart_fromEncodedWithNSString_(ADUri_StringUri_parsePath(self))) : self->path_;
}

NSString *ADUri_StringUri_parsePath(ADUri_StringUri *self) {
  NSString *uriString = JreRetainedLocalValue(self->uriString_);
  jint ssi = ADUri_StringUri_findSchemeSeparator(self);
  if (ssi > -1) {
    jboolean schemeOnly = ssi + 1 == [((NSString *) nil_chk(uriString)) java_length];
    if (schemeOnly) {
      return nil;
    }
    if ([uriString charAtWithInt:ssi + 1] != '/') {
      return nil;
    }
  }
  else {
  }
  return ADUri_StringUri_parsePathWithNSString_withInt_(uriString, ssi);
}

ADUri_Part *ADUri_StringUri_getQueryPart(ADUri_StringUri *self) {
  return self->query_ == nil ? JreStrongAssign(&self->query_, ADUri_Part_fromEncodedWithNSString_(ADUri_StringUri_parseQuery(self))) : self->query_;
}

NSString *ADUri_StringUri_parseQuery(ADUri_StringUri *self) {
  jint qsi = [((NSString *) nil_chk(self->uriString_)) java_indexOf:'?' fromIndex:ADUri_StringUri_findSchemeSeparator(self)];
  if (qsi == ADUri_NOT_FOUND) {
    return nil;
  }
  jint fsi = ADUri_StringUri_findFragmentSeparator(self);
  if (fsi == ADUri_NOT_FOUND) {
    return [self->uriString_ java_substring:qsi + 1];
  }
  if (fsi < qsi) {
    return nil;
  }
  return [self->uriString_ java_substring:qsi + 1 endIndex:fsi];
}

ADUri_Part *ADUri_StringUri_getFragmentPart(ADUri_StringUri *self) {
  return self->fragment_ == nil ? JreStrongAssign(&self->fragment_, ADUri_Part_fromEncodedWithNSString_(ADUri_StringUri_parseFragment(self))) : self->fragment_;
}

NSString *ADUri_StringUri_parseFragment(ADUri_StringUri *self) {
  jint fsi = ADUri_StringUri_findFragmentSeparator(self);
  return fsi == ADUri_NOT_FOUND ? nil : [((NSString *) nil_chk(self->uriString_)) java_substring:fsi + 1];
}

NSString *ADUri_StringUri_parseAuthorityWithNSString_withInt_(NSString *uriString, jint ssi) {
  ADUri_StringUri_initialize();
  jint length = [((NSString *) nil_chk(uriString)) java_length];
  if (length > ssi + 2 && [uriString charAtWithInt:ssi + 1] == '/' && [uriString charAtWithInt:ssi + 2] == '/') {
    jint end = ssi + 3;
    while (end < length) {
      switch ([uriString charAtWithInt:end]) {
        case '/':
        case '\\':
        case '?':
        case '#':
        goto break_LOOP;
      }
      end++;
    }
    break_LOOP: ;
    return [uriString java_substring:ssi + 3 endIndex:end];
  }
  else {
    return nil;
  }
}

NSString *ADUri_StringUri_parsePathWithNSString_withInt_(NSString *uriString, jint ssi) {
  ADUri_StringUri_initialize();
  jint length = [((NSString *) nil_chk(uriString)) java_length];
  jint pathStart;
  if (length > ssi + 2 && [uriString charAtWithInt:ssi + 1] == '/' && [uriString charAtWithInt:ssi + 2] == '/') {
    pathStart = ssi + 3;
    while (pathStart < length) {
      switch ([uriString charAtWithInt:pathStart]) {
        case '?':
        case '#':
        return @"";
        case '/':
        case '\\':
        goto break_LOOP;
      }
      pathStart++;
    }
    break_LOOP: ;
  }
  else {
    pathStart = ssi + 1;
  }
  jint pathEnd = pathStart;
  while (pathEnd < length) {
    switch ([uriString charAtWithInt:pathEnd]) {
      case '?':
      case '#':
      goto break_LOOP_2;
    }
    pathEnd++;
  }
  break_LOOP_2: ;
  return [uriString java_substring:pathStart endIndex:pathEnd];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADUri_StringUri)

@implementation ADUri_OpaqueUri

- (instancetype)initWithNSString:(NSString *)scheme
                  withADUri_Part:(ADUri_Part *)ssp
                  withADUri_Part:(ADUri_Part *)fragment {
  ADUri_OpaqueUri_initWithNSString_withADUri_Part_withADUri_Part_(self, scheme, ssp, fragment);
  return self;
}

+ (ADUri *)readFromWithADParcel:(id<ADParcel>)parcel {
  return ADUri_OpaqueUri_readFromWithADParcel_(parcel);
}

- (jint)describeContents {
  return 0;
}

- (void)writeToParcelWithADParcel:(id<ADParcel>)parcel
                          withInt:(jint)flags {
  [((id<ADParcel>) nil_chk(parcel)) writeIntWithInt:ADUri_OpaqueUri_TYPE_ID];
  [parcel writeString8WithNSString:[self description]];
}

- (jboolean)isHierarchical {
  return false;
}

- (jboolean)isRelative {
  return scheme_ == nil;
}

- (NSString *)getScheme {
  return self->scheme_;
}

- (NSString *)getEncodedSchemeSpecificPart {
  return [((ADUri_Part *) nil_chk(ssp_)) getEncoded];
}

- (NSString *)getSchemeSpecificPart {
  return ADUri_AbstractPart_getDecoded(nil_chk(ssp_));
}

- (NSString *)getAuthority {
  return nil;
}

- (NSString *)getEncodedAuthority {
  return nil;
}

- (NSString *)getPath {
  return nil;
}

- (NSString *)getEncodedPath {
  return nil;
}

- (NSString *)getQuery {
  return nil;
}

- (NSString *)getEncodedQuery {
  return nil;
}

- (NSString *)getFragment {
  return ADUri_AbstractPart_getDecoded(nil_chk(fragment_));
}

- (NSString *)getEncodedFragment {
  return [((ADUri_Part *) nil_chk(fragment_)) getEncoded];
}

- (id<JavaUtilList>)getPathSegments {
  return JavaUtilCollections_emptyList();
}

- (NSString *)getLastPathSegment {
  return nil;
}

- (NSString *)getUserInfo {
  return nil;
}

- (NSString *)getEncodedUserInfo {
  return nil;
}

- (NSString *)getHost {
  return nil;
}

- (jint)getPort {
  return -1;
}

- (NSString *)description {
  jboolean cached = JreLoadVolatileId(&cachedString_) != JreLoadStatic(ADUri_NotCachedHolder, NOT_CACHED);
  if (cached) {
    return JreLoadVolatileId(&cachedString_);
  }
  JavaLangStringBuilder *sb = create_JavaLangStringBuilder_init();
  [((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:scheme_])) appendWithChar:':'];
  [sb appendWithNSString:[self getEncodedSchemeSpecificPart]];
  if (![((ADUri_Part *) nil_chk(fragment_)) isEmpty]) {
    [((JavaLangStringBuilder *) nil_chk([sb appendWithChar:'#'])) appendWithNSString:[fragment_ getEncoded]];
  }
  return JreVolatileStrongAssign(&cachedString_, [sb description]);
}

- (ADUri_Builder *)buildUpon {
  return [((ADUri_Builder *) nil_chk([((ADUri_Builder *) nil_chk([create_ADUri_Builder_init() schemeWithNSString:self->scheme_])) opaquePartWithADUri_Part:self->ssp_])) fragmentWithADUri_Part:self->fragment_];
}

- (void)__javaClone:(ADUri_OpaqueUri *)original {
  [super __javaClone:original];
  JreCloneVolatileStrong(&cachedString_, &original->cachedString_);
}

- (void)dealloc {
  RELEASE_(scheme_);
  RELEASE_(ssp_);
  RELEASE_(fragment_);
  JreReleaseVolatile(&cachedString_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "LADUri;", 0x8, 1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 5, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 6, -1, -1, -1, -1, -1 },
    { NULL, "LADUri_Builder;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:withADUri_Part:withADUri_Part:);
  methods[1].selector = @selector(readFromWithADParcel:);
  methods[2].selector = @selector(describeContents);
  methods[3].selector = @selector(writeToParcelWithADParcel:withInt:);
  methods[4].selector = @selector(isHierarchical);
  methods[5].selector = @selector(isRelative);
  methods[6].selector = @selector(getScheme);
  methods[7].selector = @selector(getEncodedSchemeSpecificPart);
  methods[8].selector = @selector(getSchemeSpecificPart);
  methods[9].selector = @selector(getAuthority);
  methods[10].selector = @selector(getEncodedAuthority);
  methods[11].selector = @selector(getPath);
  methods[12].selector = @selector(getEncodedPath);
  methods[13].selector = @selector(getQuery);
  methods[14].selector = @selector(getEncodedQuery);
  methods[15].selector = @selector(getFragment);
  methods[16].selector = @selector(getEncodedFragment);
  methods[17].selector = @selector(getPathSegments);
  methods[18].selector = @selector(getLastPathSegment);
  methods[19].selector = @selector(getUserInfo);
  methods[20].selector = @selector(getEncodedUserInfo);
  methods[21].selector = @selector(getHost);
  methods[22].selector = @selector(getPort);
  methods[23].selector = @selector(description);
  methods[24].selector = @selector(buildUpon);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "TYPE_ID", "I", .constantValue.asInt = ADUri_OpaqueUri_TYPE_ID, 0x18, -1, -1, -1, -1 },
    { "scheme_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "ssp_", "LADUri_Part;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "fragment_", "LADUri_Part;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "cachedString_", "LNSString;", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LADUri_Part;LADUri_Part;", "readFrom", "LADParcel;", "writeToParcel", "LADParcel;I", "()Ljava/util/List<Ljava/lang/String;>;", "toString", "LADUri;" };
  static const J2ObjcClassInfo _ADUri_OpaqueUri = { "OpaqueUri", "r.android.net", ptrTable, methods, fields, 7, 0xa, 25, 5, 7, -1, -1, -1, -1 };
  return &_ADUri_OpaqueUri;
}

@end

void ADUri_OpaqueUri_initWithNSString_withADUri_Part_withADUri_Part_(ADUri_OpaqueUri *self, NSString *scheme, ADUri_Part *ssp, ADUri_Part *fragment) {
  ADUri_init(self);
  JreVolatileStrongAssign(&self->cachedString_, JreLoadStatic(ADUri_NotCachedHolder, NOT_CACHED));
  JreStrongAssign(&self->scheme_, scheme);
  JreStrongAssign(&self->ssp_, ssp);
  JreStrongAssign(&self->fragment_, fragment == nil ? JreLoadStatic(ADUri_Part, NULL) : fragment);
}

ADUri_OpaqueUri *new_ADUri_OpaqueUri_initWithNSString_withADUri_Part_withADUri_Part_(NSString *scheme, ADUri_Part *ssp, ADUri_Part *fragment) {
  J2OBJC_NEW_IMPL(ADUri_OpaqueUri, initWithNSString_withADUri_Part_withADUri_Part_, scheme, ssp, fragment)
}

ADUri_OpaqueUri *create_ADUri_OpaqueUri_initWithNSString_withADUri_Part_withADUri_Part_(NSString *scheme, ADUri_Part *ssp, ADUri_Part *fragment) {
  J2OBJC_CREATE_IMPL(ADUri_OpaqueUri, initWithNSString_withADUri_Part_withADUri_Part_, scheme, ssp, fragment)
}

ADUri *ADUri_OpaqueUri_readFromWithADParcel_(id<ADParcel> parcel) {
  ADUri_OpaqueUri_initialize();
  ADUri_StringUri *stringUri = create_ADUri_StringUri_initWithNSString_([((id<ADParcel>) nil_chk(parcel)) readString8]);
  return create_ADUri_OpaqueUri_initWithNSString_withADUri_Part_withADUri_Part_(ADUri_StringUri_parseScheme(stringUri), ADUri_StringUri_getSsp(stringUri), ADUri_StringUri_getFragmentPart(stringUri));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADUri_OpaqueUri)

J2OBJC_INITIALIZED_DEFN(ADUri_PathSegments)

ADUri_PathSegments *ADUri_PathSegments_EMPTY;

@implementation ADUri_PathSegments

- (instancetype)initWithNSStringArray:(IOSObjectArray *)segments
                              withInt:(jint)size {
  ADUri_PathSegments_initWithNSStringArray_withInt_(self, segments, size);
  return self;
}

- (NSString *)getWithInt:(jint)index {
  if (index >= size_) {
    @throw create_JavaLangIndexOutOfBoundsException_init();
  }
  return IOSObjectArray_Get(nil_chk(segments_), index);
}

- (jint)size {
  return self->size_;
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf);
}

- (void)dealloc {
  RELEASE_(segments_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSStringArray:withInt:);
  methods[1].selector = @selector(getWithInt:);
  methods[2].selector = @selector(size);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "EMPTY", "LADUri_PathSegments;", .constantValue.asLong = 0, 0x18, -1, 3, -1, -1 },
    { "segments_", "[LNSString;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "size_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "[LNSString;I", "get", "I", &ADUri_PathSegments_EMPTY, "LADUri;", "Ljava/util/AbstractList<Ljava/lang/String;>;Ljava/util/RandomAccess;" };
  static const J2ObjcClassInfo _ADUri_PathSegments = { "PathSegments", "r.android.net", ptrTable, methods, fields, 7, 0x8, 3, 3, 4, -1, -1, 5, -1 };
  return &_ADUri_PathSegments;
}

+ (void)initialize {
  if (self == [ADUri_PathSegments class]) {
    JreStrongAssignAndConsume(&ADUri_PathSegments_EMPTY, new_ADUri_PathSegments_initWithNSStringArray_withInt_(nil, 0));
    J2OBJC_SET_INITIALIZED(ADUri_PathSegments)
  }
}

@end

void ADUri_PathSegments_initWithNSStringArray_withInt_(ADUri_PathSegments *self, IOSObjectArray *segments, jint size) {
  JavaUtilAbstractList_init(self);
  JreStrongAssign(&self->segments_, segments);
  self->size_ = size;
}

ADUri_PathSegments *new_ADUri_PathSegments_initWithNSStringArray_withInt_(IOSObjectArray *segments, jint size) {
  J2OBJC_NEW_IMPL(ADUri_PathSegments, initWithNSStringArray_withInt_, segments, size)
}

ADUri_PathSegments *create_ADUri_PathSegments_initWithNSStringArray_withInt_(IOSObjectArray *segments, jint size) {
  J2OBJC_CREATE_IMPL(ADUri_PathSegments, initWithNSStringArray_withInt_, segments, size)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADUri_PathSegments)

@implementation ADUri_PathSegmentsBuilder

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADUri_PathSegmentsBuilder_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)addWithNSString:(NSString *)segment {
  if (segments_ == nil) {
    JreStrongAssignAndConsume(&segments_, [IOSObjectArray newArrayWithLength:4 type:NSString_class_()]);
  }
  else if (size_ + 1 == segments_->size_) {
    IOSObjectArray *expanded = [IOSObjectArray arrayWithLength:segments_->size_ * 2 type:NSString_class_()];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(segments_, 0, expanded, 0, segments_->size_);
    JreStrongAssign(&segments_, expanded);
  }
  IOSObjectArray_Set(segments_, size_++, segment);
}

- (ADUri_PathSegments *)build {
  if (segments_ == nil) {
    return JreLoadStatic(ADUri_PathSegments, EMPTY);
  }
  @try {
    return create_ADUri_PathSegments_initWithNSStringArray_withInt_(segments_, size_);
  }
  @finally {
    JreStrongAssign(&segments_, nil);
  }
}

- (void)dealloc {
  RELEASE_(segments_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 0, 1, -1, -1, -1, -1 },
    { NULL, "LADUri_PathSegments;", 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(addWithNSString:);
  methods[2].selector = @selector(build);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "segments_", "[LNSString;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "size_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "add", "LNSString;", "LADUri;" };
  static const J2ObjcClassInfo _ADUri_PathSegmentsBuilder = { "PathSegmentsBuilder", "r.android.net", ptrTable, methods, fields, 7, 0x8, 3, 2, 2, -1, -1, -1, -1 };
  return &_ADUri_PathSegmentsBuilder;
}

@end

void ADUri_PathSegmentsBuilder_init(ADUri_PathSegmentsBuilder *self) {
  NSObject_init(self);
  self->size_ = 0;
}

ADUri_PathSegmentsBuilder *new_ADUri_PathSegmentsBuilder_init() {
  J2OBJC_NEW_IMPL(ADUri_PathSegmentsBuilder, init)
}

ADUri_PathSegmentsBuilder *create_ADUri_PathSegmentsBuilder_init() {
  J2OBJC_CREATE_IMPL(ADUri_PathSegmentsBuilder, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADUri_PathSegmentsBuilder)

@implementation ADUri_HierarchicalUri

- (instancetype)initWithNSString:(NSString *)scheme
                  withADUri_Part:(ADUri_Part *)authority
              withADUri_PathPart:(ADUri_PathPart *)path
                  withADUri_Part:(ADUri_Part *)query
                  withADUri_Part:(ADUri_Part *)fragment {
  ADUri_HierarchicalUri_initWithNSString_withADUri_Part_withADUri_PathPart_withADUri_Part_withADUri_Part_(self, scheme, authority, path, query, fragment);
  return self;
}

- (ADUri_PathPart *)generatePathWithADUri_PathPart:(ADUri_PathPart *)originalPath {
  return ADUri_HierarchicalUri_generatePathWithADUri_PathPart_(self, originalPath);
}

+ (ADUri *)readFromWithADParcel:(id<ADParcel>)parcel {
  return ADUri_HierarchicalUri_readFromWithADParcel_(parcel);
}

- (jint)describeContents {
  return 0;
}

- (void)writeToParcelWithADParcel:(id<ADParcel>)parcel
                          withInt:(jint)flags {
  [((id<ADParcel>) nil_chk(parcel)) writeIntWithInt:ADUri_HierarchicalUri_TYPE_ID];
  [parcel writeString8WithNSString:[self description]];
}

- (jboolean)isHierarchical {
  return true;
}

- (jboolean)isRelative {
  return scheme_ == nil;
}

- (NSString *)getScheme {
  return scheme_;
}

- (ADUri_Part *)getSsp {
  return ADUri_HierarchicalUri_getSsp(self);
}

- (NSString *)getEncodedSchemeSpecificPart {
  return [((ADUri_Part *) nil_chk(ADUri_HierarchicalUri_getSsp(self))) getEncoded];
}

- (NSString *)getSchemeSpecificPart {
  return ADUri_AbstractPart_getDecoded(nil_chk(ADUri_HierarchicalUri_getSsp(self)));
}

- (NSString *)makeSchemeSpecificPart {
  return ADUri_HierarchicalUri_makeSchemeSpecificPart(self);
}

- (void)appendSspToWithJavaLangStringBuilder:(JavaLangStringBuilder *)builder {
  ADUri_HierarchicalUri_appendSspToWithJavaLangStringBuilder_(self, builder);
}

- (NSString *)getAuthority {
  return ADUri_AbstractPart_getDecoded(nil_chk(self->authority_));
}

- (NSString *)getEncodedAuthority {
  return [((ADUri_Part *) nil_chk(self->authority_)) getEncoded];
}

- (NSString *)getEncodedPath {
  return [((ADUri_PathPart *) nil_chk(self->path_)) getEncoded];
}

- (NSString *)getPath {
  return ADUri_AbstractPart_getDecoded(nil_chk(self->path_));
}

- (NSString *)getQuery {
  return ADUri_AbstractPart_getDecoded(nil_chk(self->query_));
}

- (NSString *)getEncodedQuery {
  return [((ADUri_Part *) nil_chk(self->query_)) getEncoded];
}

- (NSString *)getFragment {
  return ADUri_AbstractPart_getDecoded(nil_chk(self->fragment_));
}

- (NSString *)getEncodedFragment {
  return [((ADUri_Part *) nil_chk(self->fragment_)) getEncoded];
}

- (id<JavaUtilList>)getPathSegments {
  return [((ADUri_PathPart *) nil_chk(self->path_)) getPathSegments];
}

- (NSString *)description {
  jboolean cached = (JreLoadVolatileId(&uriString_) != JreLoadStatic(ADUri_NotCachedHolder, NOT_CACHED));
  return cached ? JreLoadVolatileId(&uriString_) : (JreVolatileStrongAssign(&uriString_, ADUri_HierarchicalUri_makeUriString(self)));
}

- (NSString *)makeUriString {
  return ADUri_HierarchicalUri_makeUriString(self);
}

- (ADUri_Builder *)buildUpon {
  return [((ADUri_Builder *) nil_chk([((ADUri_Builder *) nil_chk([((ADUri_Builder *) nil_chk([((ADUri_Builder *) nil_chk([create_ADUri_Builder_init() schemeWithNSString:scheme_])) authorityWithADUri_Part:authority_])) pathWithADUri_PathPart:path_])) queryWithADUri_Part:query_])) fragmentWithADUri_Part:fragment_];
}

- (void)__javaClone:(ADUri_HierarchicalUri *)original {
  [super __javaClone:original];
  JreCloneVolatileStrong(&uriString_, &original->uriString_);
}

- (void)dealloc {
  RELEASE_(scheme_);
  RELEASE_(authority_);
  RELEASE_(path_);
  RELEASE_(query_);
  RELEASE_(fragment_);
  RELEASE_(ssp_);
  JreReleaseVolatile(&uriString_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "LADUri_PathPart;", 0x2, 1, 2, -1, -1, -1, -1 },
    { NULL, "LADUri;", 0x8, 3, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADUri_Part;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 7, 8, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 9, -1, -1 },
    { NULL, "LNSString;", 0x1, 10, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADUri_Builder;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:withADUri_Part:withADUri_PathPart:withADUri_Part:withADUri_Part:);
  methods[1].selector = @selector(generatePathWithADUri_PathPart:);
  methods[2].selector = @selector(readFromWithADParcel:);
  methods[3].selector = @selector(describeContents);
  methods[4].selector = @selector(writeToParcelWithADParcel:withInt:);
  methods[5].selector = @selector(isHierarchical);
  methods[6].selector = @selector(isRelative);
  methods[7].selector = @selector(getScheme);
  methods[8].selector = @selector(getSsp);
  methods[9].selector = @selector(getEncodedSchemeSpecificPart);
  methods[10].selector = @selector(getSchemeSpecificPart);
  methods[11].selector = @selector(makeSchemeSpecificPart);
  methods[12].selector = @selector(appendSspToWithJavaLangStringBuilder:);
  methods[13].selector = @selector(getAuthority);
  methods[14].selector = @selector(getEncodedAuthority);
  methods[15].selector = @selector(getEncodedPath);
  methods[16].selector = @selector(getPath);
  methods[17].selector = @selector(getQuery);
  methods[18].selector = @selector(getEncodedQuery);
  methods[19].selector = @selector(getFragment);
  methods[20].selector = @selector(getEncodedFragment);
  methods[21].selector = @selector(getPathSegments);
  methods[22].selector = @selector(description);
  methods[23].selector = @selector(makeUriString);
  methods[24].selector = @selector(buildUpon);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "TYPE_ID", "I", .constantValue.asInt = ADUri_HierarchicalUri_TYPE_ID, 0x18, -1, -1, -1, -1 },
    { "scheme_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "authority_", "LADUri_Part;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "path_", "LADUri_PathPart;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "query_", "LADUri_Part;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "fragment_", "LADUri_Part;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "ssp_", "LADUri_Part;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "uriString_", "LNSString;", .constantValue.asLong = 0, 0x42, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LADUri_Part;LADUri_PathPart;LADUri_Part;LADUri_Part;", "generatePath", "LADUri_PathPart;", "readFrom", "LADParcel;", "writeToParcel", "LADParcel;I", "appendSspTo", "LJavaLangStringBuilder;", "()Ljava/util/List<Ljava/lang/String;>;", "toString", "LADUri;" };
  static const J2ObjcClassInfo _ADUri_HierarchicalUri = { "HierarchicalUri", "r.android.net", ptrTable, methods, fields, 7, 0xa, 25, 8, 11, -1, -1, -1, -1 };
  return &_ADUri_HierarchicalUri;
}

@end

void ADUri_HierarchicalUri_initWithNSString_withADUri_Part_withADUri_PathPart_withADUri_Part_withADUri_Part_(ADUri_HierarchicalUri *self, NSString *scheme, ADUri_Part *authority, ADUri_PathPart *path, ADUri_Part *query, ADUri_Part *fragment) {
  ADUri_AbstractHierarchicalUri_init(self);
  JreVolatileStrongAssign(&self->uriString_, JreLoadStatic(ADUri_NotCachedHolder, NOT_CACHED));
  JreStrongAssign(&self->scheme_, scheme);
  JreStrongAssign(&self->authority_, ADUri_Part_nonNullWithADUri_Part_(authority));
  JreStrongAssign(&self->path_, ADUri_HierarchicalUri_generatePathWithADUri_PathPart_(self, path));
  JreStrongAssign(&self->query_, ADUri_Part_nonNullWithADUri_Part_(query));
  JreStrongAssign(&self->fragment_, ADUri_Part_nonNullWithADUri_Part_(fragment));
}

ADUri_HierarchicalUri *new_ADUri_HierarchicalUri_initWithNSString_withADUri_Part_withADUri_PathPart_withADUri_Part_withADUri_Part_(NSString *scheme, ADUri_Part *authority, ADUri_PathPart *path, ADUri_Part *query, ADUri_Part *fragment) {
  J2OBJC_NEW_IMPL(ADUri_HierarchicalUri, initWithNSString_withADUri_Part_withADUri_PathPart_withADUri_Part_withADUri_Part_, scheme, authority, path, query, fragment)
}

ADUri_HierarchicalUri *create_ADUri_HierarchicalUri_initWithNSString_withADUri_Part_withADUri_PathPart_withADUri_Part_withADUri_Part_(NSString *scheme, ADUri_Part *authority, ADUri_PathPart *path, ADUri_Part *query, ADUri_Part *fragment) {
  J2OBJC_CREATE_IMPL(ADUri_HierarchicalUri, initWithNSString_withADUri_Part_withADUri_PathPart_withADUri_Part_withADUri_Part_, scheme, authority, path, query, fragment)
}

ADUri_PathPart *ADUri_HierarchicalUri_generatePathWithADUri_PathPart_(ADUri_HierarchicalUri *self, ADUri_PathPart *originalPath) {
  jboolean hasSchemeOrAuthority = (self->scheme_ != nil && [self->scheme_ java_length] > 0) || ![((ADUri_Part *) nil_chk(self->authority_)) isEmpty];
  ADUri_PathPart *newPath = hasSchemeOrAuthority ? ADUri_PathPart_makeAbsoluteWithADUri_PathPart_(originalPath) : originalPath;
  return newPath == nil ? JreLoadStatic(ADUri_PathPart, NULL) : newPath;
}

ADUri *ADUri_HierarchicalUri_readFromWithADParcel_(id<ADParcel> parcel) {
  ADUri_HierarchicalUri_initialize();
  ADUri_StringUri *stringUri = create_ADUri_StringUri_initWithNSString_([((id<ADParcel>) nil_chk(parcel)) readString8]);
  return create_ADUri_HierarchicalUri_initWithNSString_withADUri_Part_withADUri_PathPart_withADUri_Part_withADUri_Part_([stringUri getScheme], ADUri_StringUri_getAuthorityPart(stringUri), ADUri_StringUri_getPathPart(stringUri), ADUri_StringUri_getQueryPart(stringUri), ADUri_StringUri_getFragmentPart(stringUri));
}

ADUri_Part *ADUri_HierarchicalUri_getSsp(ADUri_HierarchicalUri *self) {
  return self->ssp_ == nil ? JreStrongAssign(&self->ssp_, ADUri_Part_fromEncodedWithNSString_(ADUri_HierarchicalUri_makeSchemeSpecificPart(self))) : self->ssp_;
}

NSString *ADUri_HierarchicalUri_makeSchemeSpecificPart(ADUri_HierarchicalUri *self) {
  JavaLangStringBuilder *builder = create_JavaLangStringBuilder_init();
  ADUri_HierarchicalUri_appendSspToWithJavaLangStringBuilder_(self, builder);
  return [builder description];
}

void ADUri_HierarchicalUri_appendSspToWithJavaLangStringBuilder_(ADUri_HierarchicalUri *self, JavaLangStringBuilder *builder) {
  NSString *encodedAuthority = JreRetainedLocalValue([((ADUri_Part *) nil_chk(self->authority_)) getEncoded]);
  if (encodedAuthority != nil) {
    [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk(builder)) appendWithNSString:@"//"])) appendWithNSString:encodedAuthority];
  }
  NSString *encodedPath = JreRetainedLocalValue([((ADUri_PathPart *) nil_chk(self->path_)) getEncoded]);
  if (encodedPath != nil) {
    [((JavaLangStringBuilder *) nil_chk(builder)) appendWithNSString:encodedPath];
  }
  if (![((ADUri_Part *) nil_chk(self->query_)) isEmpty]) {
    [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk(builder)) appendWithChar:'?'])) appendWithNSString:[self->query_ getEncoded]];
  }
}

NSString *ADUri_HierarchicalUri_makeUriString(ADUri_HierarchicalUri *self) {
  JavaLangStringBuilder *builder = create_JavaLangStringBuilder_init();
  if (self->scheme_ != nil) {
    [((JavaLangStringBuilder *) nil_chk([builder appendWithNSString:self->scheme_])) appendWithChar:':'];
  }
  ADUri_HierarchicalUri_appendSspToWithJavaLangStringBuilder_(self, builder);
  if (![((ADUri_Part *) nil_chk(self->fragment_)) isEmpty]) {
    [((JavaLangStringBuilder *) nil_chk([builder appendWithChar:'#'])) appendWithNSString:[self->fragment_ getEncoded]];
  }
  return [builder description];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADUri_HierarchicalUri)

@implementation ADUri_Builder

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADUri_Builder_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (ADUri_Builder *)schemeWithNSString:(NSString *)scheme {
  if (scheme != nil) {
    JreStrongAssign(&self->scheme_, [scheme java_replace:@"://" withSequence:@""]);
  }
  else {
    JreStrongAssign(&self->scheme_, nil);
  }
  return self;
}

- (ADUri_Builder *)opaquePartWithADUri_Part:(ADUri_Part *)opaquePart {
  JreStrongAssign(&self->opaquePart_, opaquePart);
  return self;
}

- (ADUri_Builder *)opaquePartWithNSString:(NSString *)opaquePart {
  return [self opaquePartWithADUri_Part:ADUri_Part_fromDecodedWithNSString_(opaquePart)];
}

- (ADUri_Builder *)encodedOpaquePartWithNSString:(NSString *)opaquePart {
  return [self opaquePartWithADUri_Part:ADUri_Part_fromEncodedWithNSString_(opaquePart)];
}

- (ADUri_Builder *)authorityWithADUri_Part:(ADUri_Part *)authority {
  JreStrongAssign(&self->opaquePart_, nil);
  JreStrongAssign(&self->authority_, authority);
  return self;
}

- (ADUri_Builder *)authorityWithNSString:(NSString *)authority {
  return [self authorityWithADUri_Part:ADUri_Part_fromDecodedWithNSString_(authority)];
}

- (ADUri_Builder *)encodedAuthorityWithNSString:(NSString *)authority {
  return [self authorityWithADUri_Part:ADUri_Part_fromEncodedWithNSString_(authority)];
}

- (ADUri_Builder *)pathWithADUri_PathPart:(ADUri_PathPart *)path {
  JreStrongAssign(&self->opaquePart_, nil);
  JreStrongAssign(&self->path_, path);
  return self;
}

- (ADUri_Builder *)pathWithNSString:(NSString *)path {
  return [self pathWithADUri_PathPart:ADUri_PathPart_fromDecodedWithNSString_(path)];
}

- (ADUri_Builder *)encodedPathWithNSString:(NSString *)path {
  return [self pathWithADUri_PathPart:ADUri_PathPart_fromEncodedWithNSString_(path)];
}

- (ADUri_Builder *)appendPathWithNSString:(NSString *)newSegment {
  return [self pathWithADUri_PathPart:ADUri_PathPart_appendDecodedSegmentWithADUri_PathPart_withNSString_(path_, newSegment)];
}

- (ADUri_Builder *)appendEncodedPathWithNSString:(NSString *)newSegment {
  return [self pathWithADUri_PathPart:ADUri_PathPart_appendEncodedSegmentWithADUri_PathPart_withNSString_(path_, newSegment)];
}

- (ADUri_Builder *)queryWithADUri_Part:(ADUri_Part *)query {
  JreStrongAssign(&self->opaquePart_, nil);
  JreStrongAssign(&self->query_, query);
  return self;
}

- (ADUri_Builder *)queryWithNSString:(NSString *)query {
  return [self queryWithADUri_Part:ADUri_Part_fromDecodedWithNSString_(query)];
}

- (ADUri_Builder *)encodedQueryWithNSString:(NSString *)query {
  return [self queryWithADUri_Part:ADUri_Part_fromEncodedWithNSString_(query)];
}

- (ADUri_Builder *)fragmentWithADUri_Part:(ADUri_Part *)fragment {
  JreStrongAssign(&self->fragment_, fragment);
  return self;
}

- (ADUri_Builder *)fragmentWithNSString:(NSString *)fragment {
  return [self fragmentWithADUri_Part:ADUri_Part_fromDecodedWithNSString_(fragment)];
}

- (ADUri_Builder *)encodedFragmentWithNSString:(NSString *)fragment {
  return [self fragmentWithADUri_Part:ADUri_Part_fromEncodedWithNSString_(fragment)];
}

- (ADUri_Builder *)appendQueryParameterWithNSString:(NSString *)key
                                       withNSString:(NSString *)value {
  JreStrongAssign(&self->opaquePart_, nil);
  NSString *encodedParameter = JreStrcat("$C$", ADUri_encodeWithNSString_withNSString_(key, nil), '=', ADUri_encodeWithNSString_withNSString_(value, nil));
  if (query_ == nil) {
    JreStrongAssign(&query_, ADUri_Part_fromEncodedWithNSString_(encodedParameter));
    return self;
  }
  NSString *oldQuery = JreRetainedLocalValue([query_ getEncoded]);
  if (oldQuery == nil || [oldQuery java_length] == 0) {
    JreStrongAssign(&query_, ADUri_Part_fromEncodedWithNSString_(encodedParameter));
  }
  else {
    JreStrongAssign(&query_, ADUri_Part_fromEncodedWithNSString_(JreStrcat("$C$", oldQuery, '&', encodedParameter)));
  }
  return self;
}

- (ADUri_Builder *)clearQuery {
  return [self queryWithADUri_Part:nil];
}

- (ADUri *)build {
  if (opaquePart_ != nil) {
    if (self->scheme_ == nil) {
      @throw create_JavaLangUnsupportedOperationException_initWithNSString_(@"An opaque URI must have a scheme.");
    }
    return create_ADUri_OpaqueUri_initWithNSString_withADUri_Part_withADUri_Part_(scheme_, opaquePart_, fragment_);
  }
  else {
    ADUri_PathPart *path = JreRetainedLocalValue(self->path_);
    if (path == nil || path == JreLoadStatic(ADUri_PathPart, NULL)) {
      path = JreLoadStatic(ADUri_PathPart, EMPTY);
    }
    else {
      if (ADUri_Builder_hasSchemeOrAuthority(self)) {
        path = ADUri_PathPart_makeAbsoluteWithADUri_PathPart_(path);
      }
    }
    return create_ADUri_HierarchicalUri_initWithNSString_withADUri_Part_withADUri_PathPart_withADUri_Part_withADUri_Part_(scheme_, authority_, path, query_, fragment_);
  }
}

- (jboolean)hasSchemeOrAuthority {
  return ADUri_Builder_hasSchemeOrAuthority(self);
}

- (NSString *)description {
  return [((ADUri *) nil_chk([self build])) description];
}

- (void)dealloc {
  RELEASE_(scheme_);
  RELEASE_(opaquePart_);
  RELEASE_(authority_);
  RELEASE_(path_);
  RELEASE_(query_);
  RELEASE_(fragment_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADUri_Builder;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LADUri_Builder;", 0x0, 2, 3, -1, -1, -1, -1 },
    { NULL, "LADUri_Builder;", 0x1, 2, 1, -1, -1, -1, -1 },
    { NULL, "LADUri_Builder;", 0x1, 4, 1, -1, -1, -1, -1 },
    { NULL, "LADUri_Builder;", 0x0, 5, 3, -1, -1, -1, -1 },
    { NULL, "LADUri_Builder;", 0x1, 5, 1, -1, -1, -1, -1 },
    { NULL, "LADUri_Builder;", 0x1, 6, 1, -1, -1, -1, -1 },
    { NULL, "LADUri_Builder;", 0x0, 7, 8, -1, -1, -1, -1 },
    { NULL, "LADUri_Builder;", 0x1, 7, 1, -1, -1, -1, -1 },
    { NULL, "LADUri_Builder;", 0x1, 9, 1, -1, -1, -1, -1 },
    { NULL, "LADUri_Builder;", 0x1, 10, 1, -1, -1, -1, -1 },
    { NULL, "LADUri_Builder;", 0x1, 11, 1, -1, -1, -1, -1 },
    { NULL, "LADUri_Builder;", 0x0, 12, 3, -1, -1, -1, -1 },
    { NULL, "LADUri_Builder;", 0x1, 12, 1, -1, -1, -1, -1 },
    { NULL, "LADUri_Builder;", 0x1, 13, 1, -1, -1, -1, -1 },
    { NULL, "LADUri_Builder;", 0x0, 14, 3, -1, -1, -1, -1 },
    { NULL, "LADUri_Builder;", 0x1, 14, 1, -1, -1, -1, -1 },
    { NULL, "LADUri_Builder;", 0x1, 15, 1, -1, -1, -1, -1 },
    { NULL, "LADUri_Builder;", 0x1, 16, 17, -1, -1, -1, -1 },
    { NULL, "LADUri_Builder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADUri;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 18, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(schemeWithNSString:);
  methods[2].selector = @selector(opaquePartWithADUri_Part:);
  methods[3].selector = @selector(opaquePartWithNSString:);
  methods[4].selector = @selector(encodedOpaquePartWithNSString:);
  methods[5].selector = @selector(authorityWithADUri_Part:);
  methods[6].selector = @selector(authorityWithNSString:);
  methods[7].selector = @selector(encodedAuthorityWithNSString:);
  methods[8].selector = @selector(pathWithADUri_PathPart:);
  methods[9].selector = @selector(pathWithNSString:);
  methods[10].selector = @selector(encodedPathWithNSString:);
  methods[11].selector = @selector(appendPathWithNSString:);
  methods[12].selector = @selector(appendEncodedPathWithNSString:);
  methods[13].selector = @selector(queryWithADUri_Part:);
  methods[14].selector = @selector(queryWithNSString:);
  methods[15].selector = @selector(encodedQueryWithNSString:);
  methods[16].selector = @selector(fragmentWithADUri_Part:);
  methods[17].selector = @selector(fragmentWithNSString:);
  methods[18].selector = @selector(encodedFragmentWithNSString:);
  methods[19].selector = @selector(appendQueryParameterWithNSString:withNSString:);
  methods[20].selector = @selector(clearQuery);
  methods[21].selector = @selector(build);
  methods[22].selector = @selector(hasSchemeOrAuthority);
  methods[23].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "scheme_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "opaquePart_", "LADUri_Part;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "authority_", "LADUri_Part;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "path_", "LADUri_PathPart;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "query_", "LADUri_Part;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "fragment_", "LADUri_Part;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "scheme", "LNSString;", "opaquePart", "LADUri_Part;", "encodedOpaquePart", "authority", "encodedAuthority", "path", "LADUri_PathPart;", "encodedPath", "appendPath", "appendEncodedPath", "query", "encodedQuery", "fragment", "encodedFragment", "appendQueryParameter", "LNSString;LNSString;", "toString", "LADUri;" };
  static const J2ObjcClassInfo _ADUri_Builder = { "Builder", "r.android.net", ptrTable, methods, fields, 7, 0x19, 24, 6, 19, -1, -1, -1, -1 };
  return &_ADUri_Builder;
}

@end

void ADUri_Builder_init(ADUri_Builder *self) {
  NSObject_init(self);
}

ADUri_Builder *new_ADUri_Builder_init() {
  J2OBJC_NEW_IMPL(ADUri_Builder, init)
}

ADUri_Builder *create_ADUri_Builder_init() {
  J2OBJC_CREATE_IMPL(ADUri_Builder, init)
}

jboolean ADUri_Builder_hasSchemeOrAuthority(ADUri_Builder *self) {
  return self->scheme_ != nil || (self->authority_ != nil && self->authority_ != JreLoadStatic(ADUri_Part, NULL));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADUri_Builder)

@implementation ADUri_1

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADUri_1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (ADUri *)createFromParcelWithADParcel:(id<ADParcel>)inArg {
  jint type = [((id<ADParcel>) nil_chk(inArg)) readInt];
  switch (type) {
    case ADUri_NULL_TYPE_ID:
    return nil;
    case ADUri_StringUri_TYPE_ID:
    return ADUri_StringUri_readFromWithADParcel_(inArg);
    case ADUri_OpaqueUri_TYPE_ID:
    return ADUri_OpaqueUri_readFromWithADParcel_(inArg);
    case ADUri_HierarchicalUri_TYPE_ID:
    return ADUri_HierarchicalUri_readFromWithADParcel_(inArg);
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"Unknown URI type: ", type));
}

- (IOSObjectArray *)newArrayWithInt:(jint)size {
  return [IOSObjectArray arrayWithLength:size type:ADUri_class_()];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADUri;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "[LADUri;", 0x1, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(createFromParcelWithADParcel:);
  methods[2].selector = @selector(newArrayWithInt:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "createFromParcel", "LADParcel;", "newArray", "I", "LADUri;", "Lr/android/os/Parcelable$Creator<Lr/android/net/Uri;>;" };
  static const J2ObjcClassInfo _ADUri_1 = { "", "r.android.net", ptrTable, methods, NULL, 7, 0x8018, 3, 0, 4, -1, -1, 5, -1 };
  return &_ADUri_1;
}

@end

void ADUri_1_init(ADUri_1 *self) {
  ADParcelable_Creator_init(self);
}

ADUri_1 *new_ADUri_1_init() {
  J2OBJC_NEW_IMPL(ADUri_1, init)
}

ADUri_1 *create_ADUri_1_init() {
  J2OBJC_CREATE_IMPL(ADUri_1, init)
}

@implementation ADUri_AbstractPart

- (instancetype)initWithNSString:(NSString *)encoded
                    withNSString:(NSString *)decoded {
  ADUri_AbstractPart_initWithNSString_withNSString_(self, encoded, decoded);
  return self;
}

- (NSString *)getEncoded {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSString *)getDecoded {
  return ADUri_AbstractPart_getDecoded(self);
}

- (void)__javaClone:(ADUri_AbstractPart *)original {
  [super __javaClone:original];
  JreCloneVolatileStrong(&encoded_, &original->encoded_);
  JreCloneVolatileStrong(&decoded_, &original->decoded_);
}

- (void)dealloc {
  JreReleaseVolatile(&encoded_);
  JreReleaseVolatile(&decoded_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x400, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x10, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:withNSString:);
  methods[1].selector = @selector(getEncoded);
  methods[2].selector = @selector(getDecoded);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "encoded_", "LNSString;", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
    { "decoded_", "LNSString;", .constantValue.asLong = 0, 0x40, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LNSString;", "LADUri;" };
  static const J2ObjcClassInfo _ADUri_AbstractPart = { "AbstractPart", "r.android.net", ptrTable, methods, fields, 7, 0x408, 3, 2, 1, -1, -1, -1, -1 };
  return &_ADUri_AbstractPart;
}

@end

void ADUri_AbstractPart_initWithNSString_withNSString_(ADUri_AbstractPart *self, NSString *encoded, NSString *decoded) {
  NSObject_init(self);
  if (encoded != JreLoadStatic(ADUri_NotCachedHolder, NOT_CACHED)) {
    JreVolatileStrongAssign(&self->encoded_, encoded);
    JreVolatileStrongAssign(&self->decoded_, JreLoadStatic(ADUri_NotCachedHolder, NOT_CACHED));
  }
  else if (decoded != JreLoadStatic(ADUri_NotCachedHolder, NOT_CACHED)) {
    JreVolatileStrongAssign(&self->encoded_, JreLoadStatic(ADUri_NotCachedHolder, NOT_CACHED));
    JreVolatileStrongAssign(&self->decoded_, decoded);
  }
  else {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Neither encoded nor decoded");
  }
}

NSString *ADUri_AbstractPart_getDecoded(ADUri_AbstractPart *self) {
  jboolean hasDecoded = JreLoadVolatileId(&self->decoded_) != JreLoadStatic(ADUri_NotCachedHolder, NOT_CACHED);
  return hasDecoded ? JreLoadVolatileId(&self->decoded_) : (JreVolatileStrongAssign(&self->decoded_, ADUri_decodeWithNSString_(JreLoadVolatileId(&self->encoded_))));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADUri_AbstractPart)

J2OBJC_INITIALIZED_DEFN(ADUri_Part)

ADUri_Part *ADUri_Part_NULL;
ADUri_Part *ADUri_Part_EMPTY;

@implementation ADUri_Part

- (instancetype)initWithNSString:(NSString *)encoded
                    withNSString:(NSString *)decoded {
  ADUri_Part_initWithNSString_withNSString_(self, encoded, decoded);
  return self;
}

- (jboolean)isEmpty {
  return false;
}

- (NSString *)getEncoded {
  jboolean hasEncoded = JreLoadVolatileId(&encoded_) != JreLoadStatic(ADUri_NotCachedHolder, NOT_CACHED);
  return hasEncoded ? JreLoadVolatileId(&encoded_) : (JreVolatileStrongAssign(&encoded_, ADUri_encodeWithNSString_(JreLoadVolatileId(&decoded_))));
}

+ (ADUri_Part *)nonNullWithADUri_Part:(ADUri_Part *)part {
  return ADUri_Part_nonNullWithADUri_Part_(part);
}

+ (ADUri_Part *)fromEncodedWithNSString:(NSString *)encoded {
  return ADUri_Part_fromEncodedWithNSString_(encoded);
}

+ (ADUri_Part *)fromDecodedWithNSString:(NSString *)decoded {
  return ADUri_Part_fromDecodedWithNSString_(decoded);
}

+ (ADUri_Part *)fromWithNSString:(NSString *)encoded
                    withNSString:(NSString *)decoded {
  return ADUri_Part_fromWithNSString_withNSString_(encoded, decoded);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADUri_Part;", 0x8, 1, 2, -1, -1, -1, -1 },
    { NULL, "LADUri_Part;", 0x8, 3, 4, -1, -1, -1, -1 },
    { NULL, "LADUri_Part;", 0x8, 5, 4, -1, -1, -1, -1 },
    { NULL, "LADUri_Part;", 0x8, 6, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:withNSString:);
  methods[1].selector = @selector(isEmpty);
  methods[2].selector = @selector(getEncoded);
  methods[3].selector = @selector(nonNullWithADUri_Part:);
  methods[4].selector = @selector(fromEncodedWithNSString:);
  methods[5].selector = @selector(fromDecodedWithNSString:);
  methods[6].selector = @selector(fromWithNSString:withNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "NULL", "LADUri_Part;", .constantValue.asLong = 0, 0x18, -1, 7, -1, -1 },
    { "EMPTY", "LADUri_Part;", .constantValue.asLong = 0, 0x18, -1, 8, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LNSString;", "nonNull", "LADUri_Part;", "fromEncoded", "LNSString;", "fromDecoded", "from", &ADUri_Part_NULL, &ADUri_Part_EMPTY, "LADUri;", "LADUri_Part_EmptyPart;" };
  static const J2ObjcClassInfo _ADUri_Part = { "Part", "r.android.net", ptrTable, methods, fields, 7, 0x8, 7, 2, 9, 10, -1, -1, -1 };
  return &_ADUri_Part;
}

+ (void)initialize {
  if (self == [ADUri_Part class]) {
    JreStrongAssignAndConsume(&ADUri_Part_NULL, new_ADUri_Part_EmptyPart_initWithNSString_(nil));
    JreStrongAssignAndConsume(&ADUri_Part_EMPTY, new_ADUri_Part_EmptyPart_initWithNSString_(@""));
    J2OBJC_SET_INITIALIZED(ADUri_Part)
  }
}

@end

void ADUri_Part_initWithNSString_withNSString_(ADUri_Part *self, NSString *encoded, NSString *decoded) {
  ADUri_AbstractPart_initWithNSString_withNSString_(self, encoded, decoded);
}

ADUri_Part *new_ADUri_Part_initWithNSString_withNSString_(NSString *encoded, NSString *decoded) {
  J2OBJC_NEW_IMPL(ADUri_Part, initWithNSString_withNSString_, encoded, decoded)
}

ADUri_Part *create_ADUri_Part_initWithNSString_withNSString_(NSString *encoded, NSString *decoded) {
  J2OBJC_CREATE_IMPL(ADUri_Part, initWithNSString_withNSString_, encoded, decoded)
}

ADUri_Part *ADUri_Part_nonNullWithADUri_Part_(ADUri_Part *part) {
  ADUri_Part_initialize();
  return part == nil ? ADUri_Part_NULL : part;
}

ADUri_Part *ADUri_Part_fromEncodedWithNSString_(NSString *encoded) {
  ADUri_Part_initialize();
  return ADUri_Part_fromWithNSString_withNSString_(encoded, JreLoadStatic(ADUri_NotCachedHolder, NOT_CACHED));
}

ADUri_Part *ADUri_Part_fromDecodedWithNSString_(NSString *decoded) {
  ADUri_Part_initialize();
  return ADUri_Part_fromWithNSString_withNSString_(JreLoadStatic(ADUri_NotCachedHolder, NOT_CACHED), decoded);
}

ADUri_Part *ADUri_Part_fromWithNSString_withNSString_(NSString *encoded, NSString *decoded) {
  ADUri_Part_initialize();
  if (encoded == nil) {
    return ADUri_Part_NULL;
  }
  if ([encoded java_length] == 0) {
    return ADUri_Part_EMPTY;
  }
  if (decoded == nil) {
    return ADUri_Part_NULL;
  }
  if ([decoded java_length] == 0) {
    return ADUri_Part_EMPTY;
  }
  return create_ADUri_Part_initWithNSString_withNSString_(encoded, decoded);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADUri_Part)

@implementation ADUri_Part_EmptyPart

- (instancetype)initWithNSString:(NSString *)value {
  ADUri_Part_EmptyPart_initWithNSString_(self, value);
  return self;
}

- (jboolean)isEmpty {
  return true;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(isEmpty);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LNSString;", "LADUri_Part;" };
  static const J2ObjcClassInfo _ADUri_Part_EmptyPart = { "EmptyPart", "r.android.net", ptrTable, methods, NULL, 7, 0xa, 2, 0, 1, -1, -1, -1, -1 };
  return &_ADUri_Part_EmptyPart;
}

@end

void ADUri_Part_EmptyPart_initWithNSString_(ADUri_Part_EmptyPart *self, NSString *value) {
  ADUri_Part_initWithNSString_withNSString_(self, value, value);
  if (value != nil && ![value java_isEmpty]) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"Expected empty value, got: ", value));
  }
  JreVolatileStrongAssign(&self->encoded_, JreVolatileStrongAssign(&self->decoded_, value));
}

ADUri_Part_EmptyPart *new_ADUri_Part_EmptyPart_initWithNSString_(NSString *value) {
  J2OBJC_NEW_IMPL(ADUri_Part_EmptyPart, initWithNSString_, value)
}

ADUri_Part_EmptyPart *create_ADUri_Part_EmptyPart_initWithNSString_(NSString *value) {
  J2OBJC_CREATE_IMPL(ADUri_Part_EmptyPart, initWithNSString_, value)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADUri_Part_EmptyPart)

J2OBJC_INITIALIZED_DEFN(ADUri_PathPart)

ADUri_PathPart *ADUri_PathPart_NULL;
ADUri_PathPart *ADUri_PathPart_EMPTY;

@implementation ADUri_PathPart

- (instancetype)initWithNSString:(NSString *)encoded
                    withNSString:(NSString *)decoded {
  ADUri_PathPart_initWithNSString_withNSString_(self, encoded, decoded);
  return self;
}

- (NSString *)getEncoded {
  jboolean hasEncoded = JreLoadVolatileId(&encoded_) != JreLoadStatic(ADUri_NotCachedHolder, NOT_CACHED);
  return hasEncoded ? JreLoadVolatileId(&encoded_) : (JreVolatileStrongAssign(&encoded_, ADUri_encodeWithNSString_withNSString_(JreLoadVolatileId(&decoded_), JreLoadStatic(JavaIoFile, separator))));
}

- (ADUri_PathSegments *)getPathSegments {
  if (pathSegments_ != nil) {
    return pathSegments_;
  }
  NSString *path = JreRetainedLocalValue([self getEncoded]);
  if (path == nil) {
    return JreStrongAssign(&pathSegments_, JreLoadStatic(ADUri_PathSegments, EMPTY));
  }
  ADUri_PathSegmentsBuilder *segmentBuilder = create_ADUri_PathSegmentsBuilder_init();
  jint previous = 0;
  jint current;
  while ((current = [path java_indexOf:'/' fromIndex:previous]) > -1) {
    if (previous < current) {
      NSString *decodedSegment = ADUri_decodeWithNSString_([path java_substring:previous endIndex:current]);
      [segmentBuilder addWithNSString:decodedSegment];
    }
    previous = current + 1;
  }
  if (previous < [path java_length]) {
    [segmentBuilder addWithNSString:ADUri_decodeWithNSString_([path java_substring:previous])];
  }
  return JreStrongAssign(&pathSegments_, [segmentBuilder build]);
}

+ (ADUri_PathPart *)appendEncodedSegmentWithADUri_PathPart:(ADUri_PathPart *)oldPart
                                              withNSString:(NSString *)newSegment {
  return ADUri_PathPart_appendEncodedSegmentWithADUri_PathPart_withNSString_(oldPart, newSegment);
}

+ (ADUri_PathPart *)appendDecodedSegmentWithADUri_PathPart:(ADUri_PathPart *)oldPart
                                              withNSString:(NSString *)decoded {
  return ADUri_PathPart_appendDecodedSegmentWithADUri_PathPart_withNSString_(oldPart, decoded);
}

+ (ADUri_PathPart *)fromEncodedWithNSString:(NSString *)encoded {
  return ADUri_PathPart_fromEncodedWithNSString_(encoded);
}

+ (ADUri_PathPart *)fromDecodedWithNSString:(NSString *)decoded {
  return ADUri_PathPart_fromDecodedWithNSString_(decoded);
}

+ (ADUri_PathPart *)fromWithNSString:(NSString *)encoded
                        withNSString:(NSString *)decoded {
  return ADUri_PathPart_fromWithNSString_withNSString_(encoded, decoded);
}

+ (ADUri_PathPart *)makeAbsoluteWithADUri_PathPart:(ADUri_PathPart *)oldPart {
  return ADUri_PathPart_makeAbsoluteWithADUri_PathPart_(oldPart);
}

- (void)dealloc {
  RELEASE_(pathSegments_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADUri_PathSegments;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADUri_PathPart;", 0x8, 1, 2, -1, -1, -1, -1 },
    { NULL, "LADUri_PathPart;", 0x8, 3, 2, -1, -1, -1, -1 },
    { NULL, "LADUri_PathPart;", 0x8, 4, 5, -1, -1, -1, -1 },
    { NULL, "LADUri_PathPart;", 0x8, 6, 5, -1, -1, -1, -1 },
    { NULL, "LADUri_PathPart;", 0x8, 7, 0, -1, -1, -1, -1 },
    { NULL, "LADUri_PathPart;", 0x8, 8, 9, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:withNSString:);
  methods[1].selector = @selector(getEncoded);
  methods[2].selector = @selector(getPathSegments);
  methods[3].selector = @selector(appendEncodedSegmentWithADUri_PathPart:withNSString:);
  methods[4].selector = @selector(appendDecodedSegmentWithADUri_PathPart:withNSString:);
  methods[5].selector = @selector(fromEncodedWithNSString:);
  methods[6].selector = @selector(fromDecodedWithNSString:);
  methods[7].selector = @selector(fromWithNSString:withNSString:);
  methods[8].selector = @selector(makeAbsoluteWithADUri_PathPart:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "NULL", "LADUri_PathPart;", .constantValue.asLong = 0, 0x18, -1, 10, -1, -1 },
    { "EMPTY", "LADUri_PathPart;", .constantValue.asLong = 0, 0x18, -1, 11, -1, -1 },
    { "pathSegments_", "LADUri_PathSegments;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LNSString;", "appendEncodedSegment", "LADUri_PathPart;LNSString;", "appendDecodedSegment", "fromEncoded", "LNSString;", "fromDecoded", "from", "makeAbsolute", "LADUri_PathPart;", &ADUri_PathPart_NULL, &ADUri_PathPart_EMPTY, "LADUri;" };
  static const J2ObjcClassInfo _ADUri_PathPart = { "PathPart", "r.android.net", ptrTable, methods, fields, 7, 0x8, 9, 3, 12, -1, -1, -1, -1 };
  return &_ADUri_PathPart;
}

+ (void)initialize {
  if (self == [ADUri_PathPart class]) {
    JreStrongAssignAndConsume(&ADUri_PathPart_NULL, new_ADUri_PathPart_initWithNSString_withNSString_(nil, nil));
    JreStrongAssignAndConsume(&ADUri_PathPart_EMPTY, new_ADUri_PathPart_initWithNSString_withNSString_(@"", @""));
    J2OBJC_SET_INITIALIZED(ADUri_PathPart)
  }
}

@end

void ADUri_PathPart_initWithNSString_withNSString_(ADUri_PathPart *self, NSString *encoded, NSString *decoded) {
  ADUri_AbstractPart_initWithNSString_withNSString_(self, encoded, decoded);
}

ADUri_PathPart *new_ADUri_PathPart_initWithNSString_withNSString_(NSString *encoded, NSString *decoded) {
  J2OBJC_NEW_IMPL(ADUri_PathPart, initWithNSString_withNSString_, encoded, decoded)
}

ADUri_PathPart *create_ADUri_PathPart_initWithNSString_withNSString_(NSString *encoded, NSString *decoded) {
  J2OBJC_CREATE_IMPL(ADUri_PathPart, initWithNSString_withNSString_, encoded, decoded)
}

ADUri_PathPart *ADUri_PathPart_appendEncodedSegmentWithADUri_PathPart_withNSString_(ADUri_PathPart *oldPart, NSString *newSegment) {
  ADUri_PathPart_initialize();
  if (oldPart == nil) {
    return ADUri_PathPart_fromEncodedWithNSString_(JreStrcat("C$", '/', newSegment));
  }
  NSString *oldPath = JreRetainedLocalValue([oldPart getEncoded]);
  if (oldPath == nil) {
    oldPath = @"";
  }
  jint oldPathLength = [oldPath java_length];
  NSString *newPath;
  if (oldPathLength == 0) {
    newPath = JreStrcat("C$", '/', newSegment);
  }
  else if ([oldPath charAtWithInt:oldPathLength - 1] == '/') {
    newPath = JreStrcat("$$", oldPath, newSegment);
  }
  else {
    newPath = JreStrcat("$C$", oldPath, '/', newSegment);
  }
  return ADUri_PathPart_fromEncodedWithNSString_(newPath);
}

ADUri_PathPart *ADUri_PathPart_appendDecodedSegmentWithADUri_PathPart_withNSString_(ADUri_PathPart *oldPart, NSString *decoded) {
  ADUri_PathPart_initialize();
  NSString *encoded = ADUri_encodeWithNSString_(decoded);
  return ADUri_PathPart_appendEncodedSegmentWithADUri_PathPart_withNSString_(oldPart, encoded);
}

ADUri_PathPart *ADUri_PathPart_fromEncodedWithNSString_(NSString *encoded) {
  ADUri_PathPart_initialize();
  return ADUri_PathPart_fromWithNSString_withNSString_(encoded, JreLoadStatic(ADUri_NotCachedHolder, NOT_CACHED));
}

ADUri_PathPart *ADUri_PathPart_fromDecodedWithNSString_(NSString *decoded) {
  ADUri_PathPart_initialize();
  return ADUri_PathPart_fromWithNSString_withNSString_(JreLoadStatic(ADUri_NotCachedHolder, NOT_CACHED), decoded);
}

ADUri_PathPart *ADUri_PathPart_fromWithNSString_withNSString_(NSString *encoded, NSString *decoded) {
  ADUri_PathPart_initialize();
  if (encoded == nil) {
    return ADUri_PathPart_NULL;
  }
  if ([encoded java_length] == 0) {
    return ADUri_PathPart_EMPTY;
  }
  return create_ADUri_PathPart_initWithNSString_withNSString_(encoded, decoded);
}

ADUri_PathPart *ADUri_PathPart_makeAbsoluteWithADUri_PathPart_(ADUri_PathPart *oldPart) {
  ADUri_PathPart_initialize();
  jboolean encodedCached = JreLoadVolatileId(&((ADUri_PathPart *) nil_chk(oldPart))->encoded_) != JreLoadStatic(ADUri_NotCachedHolder, NOT_CACHED);
  NSString *oldPath = encodedCached ? JreLoadVolatileId(&oldPart->encoded_) : JreLoadVolatileId(&oldPart->decoded_);
  if (oldPath == nil || [oldPath java_length] == 0 || [oldPath java_hasPrefix:@"/"]) {
    return oldPart;
  }
  NSString *newEncoded = encodedCached ? JreStrcat("C$", '/', JreLoadVolatileId(&oldPart->encoded_)) : JreLoadStatic(ADUri_NotCachedHolder, NOT_CACHED);
  jboolean decodedCached = JreLoadVolatileId(&oldPart->decoded_) != JreLoadStatic(ADUri_NotCachedHolder, NOT_CACHED);
  NSString *newDecoded = decodedCached ? JreStrcat("C$", '/', JreLoadVolatileId(&oldPart->decoded_)) : JreLoadStatic(ADUri_NotCachedHolder, NOT_CACHED);
  return create_ADUri_PathPart_initWithNSString_withNSString_(newEncoded, newDecoded);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADUri_PathPart)
