//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroid\src\main\stub\r\android\view\WindowManager.java
//

#define J2OBJC_IMPORTED_BY_JAVA_IMPLEMENTATION 1




#include "IBinder.h"
#include "J2ObjC_source.h"
#include "RelativeLayout.h"
#include "View.h"
#include "WindowManager.h"
#include "java/lang/Boolean.h"
#include "java/lang/Integer.h"




#pragma clang diagnostic error "-Wreturn-type"
#pragma clang diagnostic ignored "-Wswitch"


@interface ADWindowManager : NSObject

@end

@implementation ADWindowManager

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x401, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(addViewWithADView:withADWindowManager_LayoutParams:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "addView", "LADView;LADWindowManager_LayoutParams;", "LADWindowManager_LayoutParams;" };
  static const J2ObjcClassInfo _ADWindowManager = { "WindowManager", "r.android.view", ptrTable, methods, NULL, 7, 0x609, 1, 0, -1, 2, -1, -1, -1 };
  return &_ADWindowManager;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(ADWindowManager)

J2OBJC_NAME_MAPPING(ADWindowManager, "r.android.view", "AD")

@implementation ADWindowManager_LayoutParams

- (instancetype)initWithInt:(int32_t)w
                    withInt:(int32_t)h {
  ADWindowManager_LayoutParams_initWithInt_withInt_(self, w, h);
  return self;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADWindowManager_LayoutParams_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)setSurfaceInsetsWithADView:(ADView *)mBackgroundView
                       withBoolean:(bool)b
                       withBoolean:(bool)c {
}

- (void)setTitleWithNSString:(NSString *)string {
}

- (void)dealloc {
  RELEASE_(accessibilityIdOfAnchor_);
  RELEASE_(accessibilityTitle_);
  RELEASE_(packageName_);
  RELEASE_(token_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:withInt:);
  methods[1].selector = @selector(init);
  methods[2].selector = @selector(setSurfaceInsetsWithADView:withBoolean:withBoolean:);
  methods[3].selector = @selector(setTitleWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "PRIVATE_FLAG_WILL_NOT_REPLACE_ON_RELAUNCH", "I", .constantValue.asInt = ADWindowManager_LayoutParams_PRIVATE_FLAG_WILL_NOT_REPLACE_ON_RELAUNCH, 0x19, -1, -1, -1, -1 },
    { "PRIVATE_FLAG_LAYOUT_CHILD_WINDOW_IN_PARENT_FRAME", "I", .constantValue.asInt = ADWindowManager_LayoutParams_PRIVATE_FLAG_LAYOUT_CHILD_WINDOW_IN_PARENT_FRAME, 0x19, -1, -1, -1, -1 },
    { "accessibilityIdOfAnchor_", "LNSObject;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "accessibilityTitle_", "LNSString;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "packageName_", "LNSString;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "flags_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "type_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "token_", "LADIBinder;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "format_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "windowAnimations_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "softInputMode_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "privateFlags_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "FLAG_FULLSCREEN", "I", .constantValue.asInt = ADWindowManager_LayoutParams_FLAG_FULLSCREEN, 0x19, -1, -1, -1, -1 },
    { "FLAG_FORCE_NOT_FULLSCREEN", "I", .constantValue.asInt = ADWindowManager_LayoutParams_FLAG_FORCE_NOT_FULLSCREEN, 0x19, -1, -1, -1, -1 },
    { "SOFT_INPUT_STATE_UNCHANGED", "I", .constantValue.asInt = ADWindowManager_LayoutParams_SOFT_INPUT_STATE_UNCHANGED, 0x19, -1, -1, -1, -1 },
    { "TYPE_APPLICATION_PANEL", "I", .constantValue.asInt = ADWindowManager_LayoutParams_TYPE_APPLICATION_PANEL, 0x19, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "II", "setSurfaceInsets", "LADView;ZZ", "setTitle", "LNSString;", "LADWindowManager;" };
  static const J2ObjcClassInfo _ADWindowManager_LayoutParams = { "LayoutParams", "r.android.view", ptrTable, methods, fields, 7, 0x9, 4, 16, 5, -1, -1, -1, -1 };
  return &_ADWindowManager_LayoutParams;
}

@end

void ADWindowManager_LayoutParams_initWithInt_withInt_(ADWindowManager_LayoutParams *self, int32_t w, int32_t h) {
  ADRelativeLayout_LayoutParams_initWithInt_withInt_(self, w, h);
}

ADWindowManager_LayoutParams *new_ADWindowManager_LayoutParams_initWithInt_withInt_(int32_t w, int32_t h) {
  J2OBJC_NEW_IMPL(ADWindowManager_LayoutParams, initWithInt_withInt_, w, h)
}

ADWindowManager_LayoutParams *create_ADWindowManager_LayoutParams_initWithInt_withInt_(int32_t w, int32_t h) {
  J2OBJC_CREATE_IMPL(ADWindowManager_LayoutParams, initWithInt_withInt_, w, h)
}

void ADWindowManager_LayoutParams_init(ADWindowManager_LayoutParams *self) {
  ADRelativeLayout_LayoutParams_initWithInt_withInt_(self, 0, 0);
}

ADWindowManager_LayoutParams *new_ADWindowManager_LayoutParams_init() {
  J2OBJC_NEW_IMPL(ADWindowManager_LayoutParams, init)
}

ADWindowManager_LayoutParams *create_ADWindowManager_LayoutParams_init() {
  J2OBJC_CREATE_IMPL(ADWindowManager_LayoutParams, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADWindowManager_LayoutParams)
