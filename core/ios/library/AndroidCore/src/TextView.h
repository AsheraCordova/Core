//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroid\src\main\java\r\android\widget\TextView.java
//

#import <Foundation/Foundation.h>
#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_TextView")
#ifdef RESTRICT_TextView
#define INCLUDE_ALL_TextView 0
#else
#define INCLUDE_ALL_TextView 1
#endif
#undef RESTRICT_TextView

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ADTextView_) && (INCLUDE_ALL_TextView || defined(INCLUDE_ADTextView))
#define ADTextView_

#define RESTRICT_BaseMeasurableView 1
#define INCLUDE_ASBaseMeasurableView 1
#include "BaseMeasurableView.h"

#define RESTRICT_IMeasureWidth 1
#define INCLUDE_ASIMeasureWidth 1
#include "IMeasureWidth.h"

#define RESTRICT_IMeasureHeight 1
#define INCLUDE_ASIMeasureHeight 1
#include "IMeasureHeight.h"

@class ADColorStateList;
@class ADLayout_Alignment;
@class ADRectF;
@class ADTextView_TextPaint;
@class IOSIntArray;
@class IOSObjectArray;
@class JavaLangBoolean;
@class JavaLangFloat;
@class JavaLangInteger;
@class JavaTextDecimalFormatSymbols;
@class JavaUtilLocale;
@class NSString;
@protocol ADTextDirectionHeuristic;
@protocol ADTextView_Drawables;
@protocol ADTextWatcher;
@protocol ASIWidget;
@protocol JavaLangRunnable;

@interface ADTextView : ASBaseMeasurableView < ASIMeasureWidth, ASIMeasureHeight > {
 @public
  id<ADTextView_Drawables> mDrawables_;
}

#pragma mark Public

- (instancetype)initWithASIWidget:(id<ASIWidget>)widget;

- (void)addTextChangedListenerWithADTextWatcher:(id<ADTextWatcher>)watcher;

- (void)autoResizeText;

- (void)clearAutoSizeTypeConfiguration;

- (int32_t)computeSizeWithFloat:(float)width;

- (ADLayout_Alignment *)getAlignmentOfLayout;

- (int32_t)getAutoSizeMaxTextSize;

- (int32_t)getAutoSizeMinTextSize;

- (int32_t)getAutoSizeStepGranularity;

- (int32_t)getAutoSizeTextType;

- (int32_t)getBorderPadding;

- (int32_t)getBorderWidth;

- (int32_t)getCurrentHintTextColor;

- (int32_t)getCurrentTextColor;

- (IOSObjectArray *)getDigitStringsWithJavaTextDecimalFormatSymbols:(JavaTextDecimalFormatSymbols *)symbols;

- (int32_t)getGravity;

- (ADColorStateList *)getHintTextColors;

- (int32_t)getLineHeight;

- (int32_t)getLineHeightPadding;

- (ADColorStateList *)getLinkTextColors;

- (int32_t)getMaxEms;

- (int32_t)getMaxHeight;

- (int32_t)getMaxLines;

- (int32_t)getMaxWidth;

- (int32_t)getMinEms;

- (int32_t)getMinHeight;

- (int32_t)getMinLines;

- (int32_t)getMinWidth;

- (ADTextView_TextPaint *)getPaint;

- (NSString *)getText;

- (ADColorStateList *)getTextColors;

- (id<ADTextDirectionHeuristic>)getTextDirectionHeuristic;

- (JavaUtilLocale *)getTextLocale;

- (int32_t)getTotalPaddingLeft;

- (int32_t)getTotalPaddingRight;

- (bool)hasPasswordTransformationMethod;

- (bool)isAutoSizeTextTypeUniformWithInt:(int32_t)autoTextType;

- (bool)isShown;

- (bool)isTypePhone;

- (int32_t)measureHeightWithInt:(int32_t)heightMode
                        withInt:(int32_t)heightSize
                        withInt:(int32_t)height;

- (int32_t)measureWidthWithInt:(int32_t)widthMode
                       withInt:(int32_t)widthSize
                       withInt:(int32_t)width;

- (void)postDelayedWithJavaLangRunnable:(id<JavaLangRunnable>)mTickRunnable
                                withInt:(int32_t)delay;

- (bool)removeCallbacksWithJavaLangRunnable:(id<JavaLangRunnable>)mTickRunnable;

- (void)removeTextChangedListenerWithADTextWatcher:(id<ADTextWatcher>)watcher;

- (void)setAutoSizeTextTypeUniformWithPresetSizesWithIntArray:(IOSIntArray *)presetSizes
                                                      withInt:(int32_t)unit;

- (void)setEmsWithInt:(int32_t)ems;

- (void)setGravityWithInt:(int32_t)gravity;

- (void)setHintTextColorWithADColorStateList:(ADColorStateList *)colors;

- (void)setHintTextColorWithInt:(int32_t)color;

- (void)setLinesWithInt:(int32_t)lines;

- (void)setLinkTextColorWithADColorStateList:(ADColorStateList *)colors;

- (void)setLinkTextColorWithInt:(int32_t)color;

- (void)setMaxEmsWithInt:(int32_t)maxEms;

- (void)setMaxHeightWithInt:(int32_t)maxPixels;

- (void)setMaxLinesWithInt:(int32_t)maxLines;

- (void)setMaxWidthWithInt:(int32_t)maxPixels;

- (void)setMinEmsWithInt:(int32_t)minEms;

- (void)setMinHeightWithInt:(int32_t)minPixels;

- (void)setMinLinesWithInt:(int32_t)minLines;

- (void)setMinWidthWithInt:(int32_t)minPixels;

- (void)setTextWithNSString:(NSString *)text;

- (void)setTextColorWithADColorStateList:(ADColorStateList *)colors;

- (void)setTextColorWithInt:(int32_t)color;

- (void)setUpAutoSizeTextTypeUniformWithInt:(int32_t)autoSizeMin
                                    withInt:(int32_t)autoSizeMax
                                    withInt:(int32_t)autoSizeGranular;

- (void)setWidthWithInt:(int32_t)pixels;

- (bool)suggestedSizeFitsInSpaceWithInt:(int32_t)mAutoSizeTextSizeInPx
                            withADRectF:(ADRectF *)availableSpace;

#pragma mark Protected

- (void)drawableStateChanged;

- (float)getTextSize;

- (void)makeNewLayoutWithInt:(int32_t)availableWidth
                     withInt:(int32_t)i
                     withInt:(int32_t)unknownBoring
                     withInt:(int32_t)unknownBoring2
                     withInt:(int32_t)j
                 withBoolean:(bool)b;

- (void)setTextSizeInternalWithInt:(int32_t)unit
                         withFloat:(float)optimalTextSize
                       withBoolean:(bool)b;

- (bool)supportsAutoSizeText;

@end

J2OBJC_STATIC_INIT(ADTextView)

J2OBJC_FIELD_SETTER(ADTextView, mDrawables_, id<ADTextView_Drawables>)

inline int32_t ADTextView_get_AUTO_SIZE_TEXT_TYPE_NONE(void);
#define ADTextView_AUTO_SIZE_TEXT_TYPE_NONE 0
J2OBJC_STATIC_FIELD_CONSTANT(ADTextView, AUTO_SIZE_TEXT_TYPE_NONE, int32_t)

inline int32_t ADTextView_get_AUTO_SIZE_TEXT_TYPE_UNIFORM(void);
#define ADTextView_AUTO_SIZE_TEXT_TYPE_UNIFORM 1
J2OBJC_STATIC_FIELD_CONSTANT(ADTextView, AUTO_SIZE_TEXT_TYPE_UNIFORM, int32_t)

inline int32_t ADTextView_get_UNKNOWN_BORING(void);
#define ADTextView_UNKNOWN_BORING 0
J2OBJC_STATIC_FIELD_CONSTANT(ADTextView, UNKNOWN_BORING, int32_t)

FOUNDATION_EXPORT void ADTextView_initWithASIWidget_(ADTextView *self, id<ASIWidget> widget);

J2OBJC_TYPE_LITERAL_HEADER(ADTextView)

@compatibility_alias RAndroidWidgetTextView ADTextView;


#endif

#if !defined (ADTextView_OnEditorActionListener_) && (INCLUDE_ALL_TextView || defined(INCLUDE_ADTextView_OnEditorActionListener))
#define ADTextView_OnEditorActionListener_

@class ADKeyEvent;
@class ADTextView;
@class JavaLangBoolean;
@class JavaLangInteger;

@protocol ADTextView_OnEditorActionListener < JavaObject >

- (bool)onEditorActionWithADTextView:(ADTextView *)v
                             withInt:(int32_t)actionId
                      withADKeyEvent:(ADKeyEvent *)event;

@end

J2OBJC_EMPTY_STATIC_INIT(ADTextView_OnEditorActionListener)

J2OBJC_TYPE_LITERAL_HEADER(ADTextView_OnEditorActionListener)


#endif

#if !defined (ADTextView_BufferType_) && (INCLUDE_ALL_TextView || defined(INCLUDE_ADTextView_BufferType))
#define ADTextView_BufferType_

#define RESTRICT_JavaLangEnum 1
#define INCLUDE_JavaLangEnum 1
#include "java/lang/Enum.h"

@class IOSObjectArray;
@class NSString;

typedef NS_ENUM(int32_t, ADTextView_BufferType_Enum) {
  ADTextView_BufferType_Enum_NORMAL NS_SWIFT_NAME(normal) = 0,
  ADTextView_BufferType_Enum_SPANNABLE NS_SWIFT_NAME(spannable) = 1,
  ADTextView_BufferType_Enum_EDITABLE NS_SWIFT_NAME(editable) = 2,
};

#if J2OBJC_IMPORTED_BY_JAVA_IMPLEMENTATION
#define ADTextView_BufferType_ORDINAL int32_t
#else
#define ADTextView_BufferType_ORDINAL ADTextView_BufferType_Enum
#endif


@interface ADTextView_BufferType : JavaLangEnum

#pragma mark Public

+ (ADTextView_BufferType *)valueOfWithNSString:(NSString *)name;

+ (IOSObjectArray *)values;

#pragma mark Package-Private

- (ADTextView_BufferType_Enum)toNSEnum;

@property(readonly) ADTextView_BufferType_Enum enumValue;
+ (ADTextView_BufferType *)fromNSEnum:(ADTextView_BufferType_Enum)value;

- (ADTextView_BufferType_ORDINAL)ordinal NS_SWIFT_UNAVAILABLE("Use .enumValue");

- (nullable instancetype)initWithBufferType:(ADTextView_BufferType_Enum)value;

@end

J2OBJC_STATIC_INIT(ADTextView_BufferType)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT ADTextView_BufferType *ADTextView_BufferType_values_[];

inline ADTextView_BufferType *ADTextView_BufferType_get_NORMAL(void);
J2OBJC_ENUM_CONSTANT(ADTextView_BufferType, NORMAL)

inline ADTextView_BufferType *ADTextView_BufferType_get_SPANNABLE(void);
J2OBJC_ENUM_CONSTANT(ADTextView_BufferType, SPANNABLE)

inline ADTextView_BufferType *ADTextView_BufferType_get_EDITABLE(void);
J2OBJC_ENUM_CONSTANT(ADTextView_BufferType, EDITABLE)

FOUNDATION_EXPORT IOSObjectArray *ADTextView_BufferType_values(void);

FOUNDATION_EXPORT ADTextView_BufferType *ADTextView_BufferType_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT ADTextView_BufferType *ADTextView_BufferType_fromOrdinal(ADTextView_BufferType_ORDINAL ordinal);

J2OBJC_TYPE_LITERAL_HEADER(ADTextView_BufferType)


#endif

#if !defined (ADTextView_TypedValue_) && (INCLUDE_ALL_TextView || defined(INCLUDE_ADTextView_TypedValue))
#define ADTextView_TypedValue_

@class ADDisplayMetrics;
@class JavaLangFloat;
@class JavaLangInteger;

@interface ADTextView_TypedValue : NSObject

#pragma mark Public

+ (float)applyDimensionWithInt:(int32_t)unit
                       withInt:(int32_t)i
          withADDisplayMetrics:(ADDisplayMetrics *)displayMetrics;

#pragma mark Package-Private

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(ADTextView_TypedValue)

inline int32_t ADTextView_TypedValue_get_COMPLEX_UNIT_PX(void);
inline int32_t ADTextView_TypedValue_set_COMPLEX_UNIT_PX(int32_t value);
inline int32_t *ADTextView_TypedValue_getRef_COMPLEX_UNIT_PX(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT int32_t ADTextView_TypedValue_COMPLEX_UNIT_PX;
J2OBJC_STATIC_FIELD_PRIMITIVE(ADTextView_TypedValue, COMPLEX_UNIT_PX, int32_t)

FOUNDATION_EXPORT void ADTextView_TypedValue_init(ADTextView_TypedValue *self);

FOUNDATION_EXPORT ADTextView_TypedValue *new_ADTextView_TypedValue_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ADTextView_TypedValue *create_ADTextView_TypedValue_init(void);

FOUNDATION_EXPORT float ADTextView_TypedValue_applyDimensionWithInt_withInt_withADDisplayMetrics_(int32_t unit, int32_t i, ADDisplayMetrics *displayMetrics);

J2OBJC_TYPE_LITERAL_HEADER(ADTextView_TypedValue)


#endif

#if !defined (ADTextView_Editor_) && (INCLUDE_ALL_TextView || defined(INCLUDE_ADTextView_Editor))
#define ADTextView_Editor_

@protocol ADTextView_Editor < JavaObject >

- (void)invalidateTextDisplayList;

@end

J2OBJC_EMPTY_STATIC_INIT(ADTextView_Editor)

J2OBJC_TYPE_LITERAL_HEADER(ADTextView_Editor)


#endif

#if !defined (ADTextView_TextPaint_) && (INCLUDE_ALL_TextView || defined(INCLUDE_ADTextView_TextPaint))
#define ADTextView_TextPaint_

@class ADTextView;
@class JavaLangInteger;

@interface ADTextView_TextPaint : NSObject {
 @public
  int32_t linkColor_;
}

#pragma mark Public

- (instancetype)initWithADTextView:(ADTextView *)outer$;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ADTextView_TextPaint)

FOUNDATION_EXPORT void ADTextView_TextPaint_initWithADTextView_(ADTextView_TextPaint *self, ADTextView *outer$);

FOUNDATION_EXPORT ADTextView_TextPaint *new_ADTextView_TextPaint_initWithADTextView_(ADTextView *outer$) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ADTextView_TextPaint *create_ADTextView_TextPaint_initWithADTextView_(ADTextView *outer$);

J2OBJC_TYPE_LITERAL_HEADER(ADTextView_TextPaint)


#endif

#if !defined (ADTextView_Drawables_) && (INCLUDE_ALL_TextView || defined(INCLUDE_ADTextView_Drawables))
#define ADTextView_Drawables_

@protocol JavaUtilList;

@protocol ADTextView_Drawables < JavaObject >

@end

@interface ADTextView_Drawables : NSObject

@end

J2OBJC_STATIC_INIT(ADTextView_Drawables)

inline id<JavaUtilList> ADTextView_Drawables_get_mShowing(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT id<JavaUtilList> ADTextView_Drawables_mShowing;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADTextView_Drawables, mShowing, id<JavaUtilList>)

J2OBJC_TYPE_LITERAL_HEADER(ADTextView_Drawables)


#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_TextView")
