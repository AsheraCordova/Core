//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroid\src\main\java\r\android\animation\BidirectionalTypeConverter.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_BidirectionalTypeConverter")
#ifdef RESTRICT_BidirectionalTypeConverter
#define INCLUDE_ALL_BidirectionalTypeConverter 0
#else
#define INCLUDE_ALL_BidirectionalTypeConverter 1
#endif
#undef RESTRICT_BidirectionalTypeConverter

#if !defined (ADBidirectionalTypeConverter_) && (INCLUDE_ALL_BidirectionalTypeConverter || defined(INCLUDE_ADBidirectionalTypeConverter))
#define ADBidirectionalTypeConverter_

#define RESTRICT_TypeConverter 1
#define INCLUDE_ADTypeConverter 1
#include "TypeConverter.h"

@class IOSClass;

/*!
 @brief Abstract base class used convert type T to another type V and back again.This
  is necessary when the value types of in animation are different from the property
  type.
 BidirectionalTypeConverter is needed when only the final value for the
  animation is supplied to animators.
 - seealso: PropertyValuesHolder#setConverter(TypeConverter)
 */
@interface ADBidirectionalTypeConverter : ADTypeConverter

#pragma mark Public

- (instancetype)initWithIOSClass:(IOSClass *)fromClass
                    withIOSClass:(IOSClass *)toClass;

/*!
 @brief Does a conversion from the target type back to the source type.The subclass
  must implement this when a TypeConverter is used in animations and current
  values will need to be read for an animation.
 @param value The Object to convert.
 @return A value of type T, converted from <code>value</code>.
 */
- (id)convertBackWithId:(id)value;

/*!
 @brief Returns the inverse of this converter, where the from and to classes are reversed.
 The inverted converter uses this convert to call <code>convertBack(Object)</code> for 
 <code>convert(Object)</code> calls and <code>convert(Object)</code> for 
 <code>convertBack(Object)</code> calls.
 @return The inverse of this converter, where the from and to classes are reversed.
 */
- (ADBidirectionalTypeConverter *)invert;

@end

J2OBJC_EMPTY_STATIC_INIT(ADBidirectionalTypeConverter)

FOUNDATION_EXPORT void ADBidirectionalTypeConverter_initWithIOSClass_withIOSClass_(ADBidirectionalTypeConverter *self, IOSClass *fromClass, IOSClass *toClass);

J2OBJC_TYPE_LITERAL_HEADER(ADBidirectionalTypeConverter)

@compatibility_alias RAndroidAnimationBidirectionalTypeConverter ADBidirectionalTypeConverter;

#endif

#pragma pop_macro("INCLUDE_ALL_BidirectionalTypeConverter")
