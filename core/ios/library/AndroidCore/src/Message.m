//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroid\src\main\java\r\android\os\Message.java
//

#include "Build.h"
#include "Bundle.h"
#include "Handler.h"
#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "Message.h"
#include "Messenger.h"
#include "SystemClock.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Runnable.h"
#include "java/lang/StringBuilder.h"


inline ADMessage *ADMessage_get_sPool(void);
inline ADMessage *ADMessage_set_sPool(ADMessage *value);
static ADMessage *ADMessage_sPool;
J2OBJC_STATIC_FIELD_OBJ(ADMessage, sPool, ADMessage *)

inline jint ADMessage_get_sPoolSize(void);
inline jint ADMessage_set_sPoolSize(jint value);
inline jint *ADMessage_getRef_sPoolSize(void);
static jint ADMessage_sPoolSize = 0;
J2OBJC_STATIC_FIELD_PRIMITIVE(ADMessage, sPoolSize, jint)

inline jint ADMessage_get_MAX_POOL_SIZE(void);
#define ADMessage_MAX_POOL_SIZE 50
J2OBJC_STATIC_FIELD_CONSTANT(ADMessage, MAX_POOL_SIZE, jint)

inline jboolean ADMessage_get_gCheckRecycle(void);
inline jboolean ADMessage_set_gCheckRecycle(jboolean value);
inline jboolean *ADMessage_getRef_gCheckRecycle(void);
static jboolean ADMessage_gCheckRecycle = true;
J2OBJC_STATIC_FIELD_PRIMITIVE(ADMessage, gCheckRecycle, jboolean)

J2OBJC_INITIALIZED_DEFN(ADMessage)

id ADMessage_sPoolSync;

@implementation ADMessage

+ (ADMessage *)obtain {
  return ADMessage_obtain();
}

+ (ADMessage *)obtainWithADMessage:(ADMessage *)orig {
  return ADMessage_obtainWithADMessage_(orig);
}

+ (ADMessage *)obtainWithADHandler:(ADHandler *)h {
  return ADMessage_obtainWithADHandler_(h);
}

+ (ADMessage *)obtainWithADHandler:(ADHandler *)h
              withJavaLangRunnable:(id<JavaLangRunnable>)callback {
  return ADMessage_obtainWithADHandler_withJavaLangRunnable_(h, callback);
}

+ (ADMessage *)obtainWithADHandler:(ADHandler *)h
                           withInt:(jint)what {
  return ADMessage_obtainWithADHandler_withInt_(h, what);
}

+ (ADMessage *)obtainWithADHandler:(ADHandler *)h
                           withInt:(jint)what
                            withId:(id)obj {
  return ADMessage_obtainWithADHandler_withInt_withId_(h, what, obj);
}

+ (ADMessage *)obtainWithADHandler:(ADHandler *)h
                           withInt:(jint)what
                           withInt:(jint)arg1
                           withInt:(jint)arg2 {
  return ADMessage_obtainWithADHandler_withInt_withInt_withInt_(h, what, arg1, arg2);
}

+ (ADMessage *)obtainWithADHandler:(ADHandler *)h
                           withInt:(jint)what
                           withInt:(jint)arg1
                           withInt:(jint)arg2
                            withId:(id)obj {
  return ADMessage_obtainWithADHandler_withInt_withInt_withInt_withId_(h, what, arg1, arg2, obj);
}

+ (void)updateCheckRecycleWithInt:(jint)targetSdkVersion {
  ADMessage_updateCheckRecycleWithInt_(targetSdkVersion);
}

- (void)recycle {
  if ([self isInUse]) {
    if (ADMessage_gCheckRecycle) {
      @throw create_JavaLangIllegalStateException_initWithNSString_(@"This message cannot be recycled because it is still in use.");
    }
    return;
  }
  [self recycleUnchecked];
}

- (void)recycleUnchecked {
  flags_ = ADMessage_FLAG_IN_USE;
  what_ = 0;
  arg1_ = 0;
  arg2_ = 0;
  JreStrongAssign(&obj_, nil);
  JreStrongAssign(&replyTo_, nil);
  sendingUid_ = ADMessage_UID_NONE;
  workSourceUid_ = ADMessage_UID_NONE;
  when_ = 0;
  JreStrongAssign(&target_, nil);
  JreStrongAssign(&callback_, nil);
  JreStrongAssign(&data_, nil);
  @synchronized(ADMessage_sPoolSync) {
    if (ADMessage_sPoolSize < ADMessage_MAX_POOL_SIZE) {
      JreStrongAssign(&next_, ADMessage_sPool);
      JreStrongAssign(&ADMessage_sPool, self);
      ADMessage_sPoolSize++;
    }
  }
}

- (void)copyFromWithADMessage:(ADMessage *)o {
  self->flags_ = ((ADMessage *) nil_chk(o))->flags_ & ~ADMessage_FLAGS_TO_CLEAR_ON_COPY_FROM;
  self->what_ = o->what_;
  self->arg1_ = o->arg1_;
  self->arg2_ = o->arg2_;
  JreStrongAssign(&self->obj_, o->obj_);
  JreStrongAssign(&self->replyTo_, o->replyTo_);
  self->sendingUid_ = o->sendingUid_;
  self->workSourceUid_ = o->workSourceUid_;
  if (o->data_ != nil) {
    JreStrongAssign(&self->data_, (ADBundle *) cast_chk([o->data_ java_clone], [ADBundle class]));
  }
  else {
    JreStrongAssign(&self->data_, nil);
  }
}

- (jlong)getWhen {
  return when_;
}

- (void)setTargetWithADHandler:(ADHandler *)target {
  JreStrongAssign(&self->target_, target);
}

- (ADHandler *)getTarget {
  return target_;
}

- (id<JavaLangRunnable>)getCallback {
  return callback_;
}

- (ADMessage *)setCallbackWithJavaLangRunnable:(id<JavaLangRunnable>)r {
  JreStrongAssign(&callback_, r);
  return self;
}

- (ADBundle *)getData {
  if (data_ == nil) {
    JreStrongAssignAndConsume(&data_, new_ADBundle_init());
  }
  return data_;
}

- (ADBundle *)peekData {
  return data_;
}

- (void)setDataWithADBundle:(ADBundle *)data {
  JreStrongAssign(&self->data_, data);
}

- (ADMessage *)setWhatWithInt:(jint)what {
  self->what_ = what;
  return self;
}

- (void)sendToTarget {
  [((ADHandler *) nil_chk(target_)) sendMessageWithADMessage:self];
}

- (jboolean)isAsynchronous {
  return (flags_ & ADMessage_FLAG_ASYNCHRONOUS) != 0;
}

- (void)setAsynchronousWithBoolean:(jboolean)async {
  if (async) {
    flags_ |= ADMessage_FLAG_ASYNCHRONOUS;
  }
  else {
    flags_ &= ~ADMessage_FLAG_ASYNCHRONOUS;
  }
}

- (jboolean)isInUse {
  return (flags_ & ADMessage_FLAG_IN_USE) == ADMessage_FLAG_IN_USE;
}

- (void)markInUse {
  flags_ |= ADMessage_FLAG_IN_USE;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADMessage_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (NSString *)description {
  return [self toStringWithLong:ADSystemClock_uptimeMillis()];
}

- (NSString *)toStringWithLong:(jlong)now {
  JavaLangStringBuilder *b = create_JavaLangStringBuilder_init();
  [b appendWithNSString:@"{ when="];
  if (target_ != nil) {
    if (callback_ != nil) {
      [b appendWithNSString:@" callback="];
      [b appendWithNSString:[[((id<JavaLangRunnable>) nil_chk(callback_)) java_getClass] getName]];
    }
    else {
      [b appendWithNSString:@" what="];
      [b appendWithInt:what_];
    }
    if (arg1_ != 0) {
      [b appendWithNSString:@" arg1="];
      [b appendWithInt:arg1_];
    }
    if (arg2_ != 0) {
      [b appendWithNSString:@" arg2="];
      [b appendWithInt:arg2_];
    }
    if (obj_ != nil) {
      [b appendWithNSString:@" obj="];
      [b appendWithId:obj_];
    }
    [b appendWithNSString:@" target="];
    [b appendWithNSString:[[((ADHandler *) nil_chk(target_)) java_getClass] getName]];
  }
  else {
    [b appendWithNSString:@" barrier="];
    [b appendWithInt:arg1_];
  }
  [b appendWithNSString:@" }"];
  return [b description];
}

- (void)dealloc {
  RELEASE_(obj_);
  RELEASE_(replyTo_);
  RELEASE_(data_);
  RELEASE_(target_);
  RELEASE_(callback_);
  RELEASE_(next_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LADMessage;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADMessage;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LADMessage;", 0x9, 0, 2, -1, -1, -1, -1 },
    { NULL, "LADMessage;", 0x9, 0, 3, -1, -1, -1, -1 },
    { NULL, "LADMessage;", 0x9, 0, 4, -1, -1, -1, -1 },
    { NULL, "LADMessage;", 0x9, 0, 5, -1, -1, -1, -1 },
    { NULL, "LADMessage;", 0x9, 0, 6, -1, -1, -1, -1 },
    { NULL, "LADMessage;", 0x9, 0, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 2, -1, -1, -1, -1 },
    { NULL, "LADHandler;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangRunnable;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADMessage;", 0x1, 12, 13, -1, -1, -1, -1 },
    { NULL, "LADBundle;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADBundle;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 15, -1, -1, -1, -1 },
    { NULL, "LADMessage;", 0x1, 16, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 18, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 19, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x0, 19, 20, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(obtain);
  methods[1].selector = @selector(obtainWithADMessage:);
  methods[2].selector = @selector(obtainWithADHandler:);
  methods[3].selector = @selector(obtainWithADHandler:withJavaLangRunnable:);
  methods[4].selector = @selector(obtainWithADHandler:withInt:);
  methods[5].selector = @selector(obtainWithADHandler:withInt:withId:);
  methods[6].selector = @selector(obtainWithADHandler:withInt:withInt:withInt:);
  methods[7].selector = @selector(obtainWithADHandler:withInt:withInt:withInt:withId:);
  methods[8].selector = @selector(updateCheckRecycleWithInt:);
  methods[9].selector = @selector(recycle);
  methods[10].selector = @selector(recycleUnchecked);
  methods[11].selector = @selector(copyFromWithADMessage:);
  methods[12].selector = @selector(getWhen);
  methods[13].selector = @selector(setTargetWithADHandler:);
  methods[14].selector = @selector(getTarget);
  methods[15].selector = @selector(getCallback);
  methods[16].selector = @selector(setCallbackWithJavaLangRunnable:);
  methods[17].selector = @selector(getData);
  methods[18].selector = @selector(peekData);
  methods[19].selector = @selector(setDataWithADBundle:);
  methods[20].selector = @selector(setWhatWithInt:);
  methods[21].selector = @selector(sendToTarget);
  methods[22].selector = @selector(isAsynchronous);
  methods[23].selector = @selector(setAsynchronousWithBoolean:);
  methods[24].selector = @selector(isInUse);
  methods[25].selector = @selector(markInUse);
  methods[26].selector = @selector(init);
  methods[27].selector = @selector(description);
  methods[28].selector = @selector(toStringWithLong:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "what_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "arg1_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "arg2_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "obj_", "LNSObject;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "replyTo_", "LADMessenger;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "UID_NONE", "I", .constantValue.asInt = ADMessage_UID_NONE, 0x19, -1, -1, -1, -1 },
    { "sendingUid_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "workSourceUid_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "FLAG_IN_USE", "I", .constantValue.asInt = ADMessage_FLAG_IN_USE, 0x18, -1, -1, -1, -1 },
    { "FLAG_ASYNCHRONOUS", "I", .constantValue.asInt = ADMessage_FLAG_ASYNCHRONOUS, 0x18, -1, -1, -1, -1 },
    { "FLAGS_TO_CLEAR_ON_COPY_FROM", "I", .constantValue.asInt = ADMessage_FLAGS_TO_CLEAR_ON_COPY_FROM, 0x18, -1, -1, -1, -1 },
    { "flags_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "when_", "J", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "data_", "LADBundle;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "target_", "LADHandler;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "callback_", "LJavaLangRunnable;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "next_", "LADMessage;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "sPoolSync", "LNSObject;", .constantValue.asLong = 0, 0x19, -1, 21, -1, -1 },
    { "sPool", "LADMessage;", .constantValue.asLong = 0, 0xa, -1, 22, -1, -1 },
    { "sPoolSize", "I", .constantValue.asLong = 0, 0xa, -1, 23, -1, -1 },
    { "MAX_POOL_SIZE", "I", .constantValue.asInt = ADMessage_MAX_POOL_SIZE, 0x1a, -1, -1, -1, -1 },
    { "gCheckRecycle", "Z", .constantValue.asLong = 0, 0xa, -1, 24, -1, -1 },
  };
  static const void *ptrTable[] = { "obtain", "LADMessage;", "LADHandler;", "LADHandler;LJavaLangRunnable;", "LADHandler;I", "LADHandler;ILNSObject;", "LADHandler;III", "LADHandler;IIILNSObject;", "updateCheckRecycle", "I", "copyFrom", "setTarget", "setCallback", "LJavaLangRunnable;", "setData", "LADBundle;", "setWhat", "setAsynchronous", "Z", "toString", "J", &ADMessage_sPoolSync, &ADMessage_sPool, &ADMessage_sPoolSize, &ADMessage_gCheckRecycle };
  static const J2ObjcClassInfo _ADMessage = { "Message", "r.android.os", ptrTable, methods, fields, 7, 0x11, 29, 22, -1, -1, -1, -1, -1 };
  return &_ADMessage;
}

+ (void)initialize {
  if (self == [ADMessage class]) {
    JreStrongAssignAndConsume(&ADMessage_sPoolSync, new_NSObject_init());
    J2OBJC_SET_INITIALIZED(ADMessage)
  }
}

@end

ADMessage *ADMessage_obtain() {
  ADMessage_initialize();
  @synchronized(ADMessage_sPoolSync) {
    if (ADMessage_sPool != nil) {
      ADMessage *m = JreRetainedLocalValue(ADMessage_sPool);
      JreStrongAssign(&ADMessage_sPool, m->next_);
      JreStrongAssign(&m->next_, nil);
      m->flags_ = 0;
      ADMessage_sPoolSize--;
      return JreRetainedLocalValue(m);
    }
  }
  return create_ADMessage_init();
}

ADMessage *ADMessage_obtainWithADMessage_(ADMessage *orig) {
  ADMessage_initialize();
  ADMessage *m = ADMessage_obtain();
  ((ADMessage *) nil_chk(m))->what_ = ((ADMessage *) nil_chk(orig))->what_;
  m->arg1_ = orig->arg1_;
  m->arg2_ = orig->arg2_;
  JreStrongAssign(&m->obj_, orig->obj_);
  JreStrongAssign(&m->replyTo_, orig->replyTo_);
  m->sendingUid_ = orig->sendingUid_;
  m->workSourceUid_ = orig->workSourceUid_;
  if (orig->data_ != nil) {
    JreStrongAssignAndConsume(&m->data_, new_ADBundle_initWithADBundle_(orig->data_));
  }
  JreStrongAssign(&m->target_, orig->target_);
  JreStrongAssign(&m->callback_, orig->callback_);
  return m;
}

ADMessage *ADMessage_obtainWithADHandler_(ADHandler *h) {
  ADMessage_initialize();
  ADMessage *m = ADMessage_obtain();
  JreStrongAssign(&((ADMessage *) nil_chk(m))->target_, h);
  return m;
}

ADMessage *ADMessage_obtainWithADHandler_withJavaLangRunnable_(ADHandler *h, id<JavaLangRunnable> callback) {
  ADMessage_initialize();
  ADMessage *m = ADMessage_obtain();
  JreStrongAssign(&((ADMessage *) nil_chk(m))->target_, h);
  JreStrongAssign(&m->callback_, callback);
  return m;
}

ADMessage *ADMessage_obtainWithADHandler_withInt_(ADHandler *h, jint what) {
  ADMessage_initialize();
  ADMessage *m = ADMessage_obtain();
  JreStrongAssign(&((ADMessage *) nil_chk(m))->target_, h);
  m->what_ = what;
  return m;
}

ADMessage *ADMessage_obtainWithADHandler_withInt_withId_(ADHandler *h, jint what, id obj) {
  ADMessage_initialize();
  ADMessage *m = ADMessage_obtain();
  JreStrongAssign(&((ADMessage *) nil_chk(m))->target_, h);
  m->what_ = what;
  JreStrongAssign(&m->obj_, obj);
  return m;
}

ADMessage *ADMessage_obtainWithADHandler_withInt_withInt_withInt_(ADHandler *h, jint what, jint arg1, jint arg2) {
  ADMessage_initialize();
  ADMessage *m = ADMessage_obtain();
  JreStrongAssign(&((ADMessage *) nil_chk(m))->target_, h);
  m->what_ = what;
  m->arg1_ = arg1;
  m->arg2_ = arg2;
  return m;
}

ADMessage *ADMessage_obtainWithADHandler_withInt_withInt_withInt_withId_(ADHandler *h, jint what, jint arg1, jint arg2, id obj) {
  ADMessage_initialize();
  ADMessage *m = ADMessage_obtain();
  JreStrongAssign(&((ADMessage *) nil_chk(m))->target_, h);
  m->what_ = what;
  m->arg1_ = arg1;
  m->arg2_ = arg2;
  JreStrongAssign(&m->obj_, obj);
  return m;
}

void ADMessage_updateCheckRecycleWithInt_(jint targetSdkVersion) {
  ADMessage_initialize();
  if (targetSdkVersion < ADBuild_VERSION_CODES_LOLLIPOP) {
    ADMessage_gCheckRecycle = false;
  }
}

void ADMessage_init(ADMessage *self) {
  NSObject_init(self);
  self->sendingUid_ = ADMessage_UID_NONE;
  self->workSourceUid_ = ADMessage_UID_NONE;
}

ADMessage *new_ADMessage_init() {
  J2OBJC_NEW_IMPL(ADMessage, init)
}

ADMessage *create_ADMessage_init() {
  J2OBJC_CREATE_IMPL(ADMessage, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADMessage)
