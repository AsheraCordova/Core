//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroid\src\main\java\r\android\animation\AnimatorSet.java
//

#import <Foundation/Foundation.h>
#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_AnimatorSet")
#ifdef RESTRICT_AnimatorSet
#define INCLUDE_ALL_AnimatorSet 0
#else
#define INCLUDE_ALL_AnimatorSet 1
#endif
#undef RESTRICT_AnimatorSet

#if !defined (ADAnimatorSet_) && (INCLUDE_ALL_AnimatorSet || defined(INCLUDE_ADAnimatorSet))
#define ADAnimatorSet_

#define RESTRICT_Animator 1
#define INCLUDE_ADAnimator 1
#include "Animator.h"

#define RESTRICT_AnimationHandler 1
#define INCLUDE_ADAnimationHandler_AnimationFrameCallback 1
#include "AnimationHandler.h"

@class ADAnimatorSet_Builder;
@class ADLongArray;
@class IOSObjectArray;
@class JavaLangBoolean;
@class JavaLangInteger;
@class JavaLangLong;
@class JavaUtilArrayList;
@class NSString;
@protocol ADTimeInterpolator;
@protocol JavaUtilCollection;
@protocol JavaUtilList;

/*!
 @brief This class plays a set of <code>Animator</code> objects in the specified order.Animations
  can be set up to play together, in sequence, or after a specified delay.
 <p>There are two different approaches to adding animations to a <code>AnimatorSet</code>:
  either the <code>playTogether()</code> or 
 <code>playSequentially()</code> methods can be called to add
  a set of animations all at once, or the <code>AnimatorSet.play(Animator)</code> can be
  used in conjunction with methods in the <code>Builder</code>
  class to add animations
  one by one.</p>
  
 <p>It is possible to set up a <code>AnimatorSet</code> with circular dependencies between
  its animations. For example, an animation a1 could be set up to start before animation a2, a2
  before a3, and a3 before a1. The results of this configuration are undefined, but will typically
  result in none of the affected animations being played. Because of this (and because
  circular dependencies do not make logical sense anyway), circular dependencies
  should be avoided, and the dependency flow of animations should only be in one direction. 
 <div class="special reference">
  <h3>Developer Guides</h3>
  <p>For more information about animating with <code>AnimatorSet</code>, read the 
 <a href="{@@docRoot}guide/topics/graphics/prop-animation.html#choreography">Property
  Animation</a> developer guide.</p>
  </div>
 */
@interface ADAnimatorSet : ADAnimator < ADAnimationHandler_AnimationFrameCallback >

#pragma mark Public

- (instancetype)init;

/*!
 @brief  
 <p>Note that canceling a <code>AnimatorSet</code> also cancels all of the animations that it
  is responsible for.
 </p>
 */
- (void)cancel;

/*!
 @brief AnimatorSet is only reversible when the set contains no sequential animation, and no child
  animators have a start delay.
 */
- (bool)canReverse;

- (ADAnimatorSet *)java_clone;

/*!
 */
- (void)commitAnimationFrameWithLong:(int64_t)frameTime;

/*!
 @param frameTime The frame start time, in the <code>SystemClock.uptimeMillis()</code>  time
                    base.
 */
- (bool)doAnimationFrameWithLong:(int64_t)frameTime;

/*!
 @brief  
 <p>Note that ending a <code>AnimatorSet</code> also ends all of the animations that it is
  responsible for.
 </p>
 */
- (void)end;

/*!
 */
- (int32_t)getChangingConfigurations;

/*!
 @brief Returns the current list of child Animator objects controlled by this
  AnimatorSet.This is a copy of the internal list; modifications to the returned list
  will not affect the AnimatorSet, although changes to the underlying Animator objects
  will affect those objects being managed by the AnimatorSet.
 @return ArrayList<Animator> The list of child animations of this AnimatorSet.
 */
- (JavaUtilArrayList *)getChildAnimations;

/*!
 @brief Returns the milliseconds elapsed since the start of the animation.
 <p>For ongoing animations, this method returns the current progress of the animation in
  terms of play time. For an animation that has not yet been started: if the animation has been
  seeked to a certain time via <code>setCurrentPlayTime(long)</code>, the seeked play time will
  be returned; otherwise, this method will return 0.
 @return the current position in time of the animation in milliseconds
 */
- (int64_t)getCurrentPlayTime;

/*!
 @brief Gets the length of each of the child animations of this AnimatorSet.This value may
  be less than 0, which indicates that no duration has been set on this AnimatorSet
  and each of the child animations will use their own duration.
 @return The length of the animation, in milliseconds, of each of the child
  animations of this AnimatorSet.
 */
- (int64_t)getDuration;

- (id<ADTimeInterpolator>)getInterpolator;

/*!
 @brief The amount of time, in milliseconds, to delay starting the animation after 
 <code>start()</code> is called.
 @return the number of milliseconds to delay running the animation
 */
- (int64_t)getStartDelay;

- (int64_t)getTotalDuration;

/*!
 @brief Returns true if any of the child animations of this AnimatorSet have been started and have
  not yet ended.Child animations will not be started until the AnimatorSet has gone past
  its initial delay set through <code>setStartDelay(long)</code>.
 @return Whether this AnimatorSet has gone past the initial delay, and at least one child
          animation has been started and not yet ended.
 */
- (bool)isRunning;

- (bool)isStarted;

- (void)pause;

/*!
 @brief This method creates a <code>Builder</code> object, which is used to
  set up playing constraints.This initial <code>play()</code> method
  tells the <code>Builder</code> the animation that is the dependency for
  the succeeding commands to the <code>Builder</code>.
 For example,
  calling <code>play(a1).with(a2)</code> sets up the AnimatorSet to play 
 <code>a1</code> and <code>a2</code> at the same time, 
 <code>play(a1).before(a2)</code> sets up the AnimatorSet to play 
 <code>a1</code> first, followed by <code>a2</code>, and 
 <code>play(a1).after(a2)</code> sets up the AnimatorSet to play 
 <code>a2</code> first, followed by <code>a1</code>.
  
 <p>Note that <code>play()</code> is the only way to tell the 
 <code>Builder</code> the animation upon which the dependency is created,
  so successive calls to the various functions in <code>Builder</code>
  will all refer to the initial parameter supplied in <code>play()</code>
  as the dependency of the other animations. For example, calling 
 <code>play(a1).before(a2).before(a3)</code> will play both <code>a2</code>
  and <code>a3</code> when a1 ends; it does not set up a dependency between 
 <code>a2</code> and <code>a3</code>.</p>
 @param anim The animation that is the dependency used in later calls to the  methods in the returned 
  <code> Builder </code>  object. A null parameter will result  in a null 
  <code> Builder </code>  return value.
 @return Builder The object that constructs the AnimatorSet based on the dependencies
  outlined in the calls to <code>play</code> and the other methods in the 
 <code>Builder</code object.
 */
- (ADAnimatorSet_Builder *)playWithADAnimator:(ADAnimator *)anim;

/*!
 @brief Sets up this AnimatorSet to play each of the supplied animations when the
  previous animation ends.
 @param items The animations that will be started one after another.
 */
- (void)playSequentiallyWithADAnimatorArray:(IOSObjectArray *)items;

/*!
 @brief Sets up this AnimatorSet to play each of the supplied animations when the
  previous animation ends.
 @param items The animations that will be started one after another.
 */
- (void)playSequentiallyWithJavaUtilList:(id<JavaUtilList>)items;

/*!
 @brief Sets up this AnimatorSet to play all of the supplied animations at the same time.
 This is equivalent to calling <code>play(Animator)</code> with the first animator in the
  set and then <code>Builder.with(Animator)</code> with each of the other animators. Note that
  an Animator with a <code>startDelay</code> will not actually
  start until that delay elapses, which means that if the first animator in the list
  supplied to this constructor has a startDelay, none of the other animators will start
  until that first animator's startDelay has elapsed.
 @param items The animations that will be started simultaneously.
 */
- (void)playTogetherWithADAnimatorArray:(IOSObjectArray *)items;

/*!
 @brief Sets up this AnimatorSet to play all of the supplied animations at the same time.
 @param items The animations that will be started simultaneously.
 */
- (void)playTogetherWithJavaUtilCollection:(id<JavaUtilCollection>)items;

- (void)resume;

/*!
 @brief Plays the AnimatorSet in reverse.If the animation has been seeked to a specific play time
  using <code>setCurrentPlayTime(long)</code>, it will play backwards from the point seeked when
  reverse was called.
 Otherwise, then it will start from the end and play backwards. This
  behavior is only set for the current animation; future playing of the animation will use the
  default behavior of playing forward. 
 <p>
  Note: reverse is not supported for infinite AnimatorSet.
 */
- (void)reverse;

/*!
 @brief Sets the position of the animation to the specified point in time.This time should
  be between 0 and the total duration of the animation, including any repetition.
 If
  the animation has not yet been started, then it will not advance forward after it is
  set to this time; it will simply set the time to this value and perform any appropriate
  actions based on that time. If the animation is already running, then setCurrentPlayTime()
  will set the current playing time to this value and continue playing from that point.
  On <code>Build.VERSION_CODES.UPSIDE_DOWN_CAKE</code> and above, an AnimatorSet
  that hasn't been <code>start()</code>ed, will issue 
 <code>r.android.animation.Animator.AnimatorListener.onAnimationStart(Animator, boolean)</code>
  and <code>r.android.animation.Animator.AnimatorListener.onAnimationEnd(Animator, boolean)</code>
  events.
 @param playTime The time, in milliseconds, to which the animation is advanced or rewound.                  Unless the animation is reversing, the playtime is considered the time since
                   the end of the start delay of the AnimatorSet in a forward playing direction.
 */
- (void)setCurrentPlayTimeWithLong:(int64_t)playTime;

/*!
 @brief Sets the length of each of the current child animations of this AnimatorSet.By default,
  each child animation will use its own duration.
 If the duration is set on the AnimatorSet,
  then each child animation inherits this duration.
 @param duration The length of the animation, in milliseconds, of each of the child  animations of this AnimatorSet.
 */
- (ADAnimatorSet *)setDurationWithLong:(int64_t)duration;

/*!
 @brief Sets the TimeInterpolator for all current <code>child animations</code>
  of this AnimatorSet.The default value is null, which means that no interpolator
  is set on this AnimatorSet.
 Setting the interpolator to any non-null value
  will cause that interpolator to be set on the child animations
  when the set is started.
 @param interpolator the interpolator to be used by each child animation of this AnimatorSet
 */
- (void)setInterpolatorWithADTimeInterpolator:(id<ADTimeInterpolator>)interpolator;

/*!
 @brief The amount of time, in milliseconds, to delay starting the animation after 
 <code>start()</code> is called.Note that the start delay should always be non-negative.
 Any
  negative start delay will be clamped to 0 on N and above.
 @param startDelay The amount of the delay, in milliseconds
 */
- (void)setStartDelayWithLong:(int64_t)startDelay;

/*!
 @brief Sets the target object for all current <code>child animations</code>
  of this AnimatorSet that take targets (<code>ObjectAnimator</code> and
  AnimatorSet).
 @param target The object being animated
 */
- (void)setTargetWithId:(id)target;

- (void)setupEndValues;

- (void)setupStartValues;

/*!
 @return whether all the animators in the set are supposed to play together
 */
- (bool)shouldPlayTogether;

/*!
 @brief  
 <p>Starting this <code>AnimatorSet</code> will, in turn, start the animations for which
  it is responsible.
 The details of when exactly those animations are started depends on
  the dependency relationships that have been set up between the animations. 
 <b>Note:</b> Manipulating AnimatorSet's lifecycle in the child animators' listener callbacks
  will lead to undefined behaviors. Also, AnimatorSet will ignore any seeking in the child
  animators once <code>start()</code> is called.
 */
- (void)start;

- (NSString *)description;

#pragma mark Package-Private

- (void)animateSkipToEndsWithLong:(int64_t)currentPlayTime
                         withLong:(int64_t)lastPlayTime;

- (void)animateValuesInRangeWithLong:(int64_t)currentPlayTime
                            withLong:(int64_t)lastPlayTime;

- (void)getStartAndEndTimesWithADLongArray:(ADLongArray *)times
                                  withLong:(int64_t)offset;

- (bool)isInitialized;

- (bool)pulseAnimationFrameWithLong:(int64_t)frameTime;

- (void)skipToEndValueWithBoolean:(bool)inReverse;

- (void)startWithoutPulsingWithBoolean:(bool)inReverse;

@end

J2OBJC_EMPTY_STATIC_INIT(ADAnimatorSet)

FOUNDATION_EXPORT void ADAnimatorSet_init(ADAnimatorSet *self);

FOUNDATION_EXPORT ADAnimatorSet *new_ADAnimatorSet_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ADAnimatorSet *create_ADAnimatorSet_init(void);

J2OBJC_TYPE_LITERAL_HEADER(ADAnimatorSet)

@compatibility_alias RAndroidAnimationAnimatorSet ADAnimatorSet;


#endif

#if !defined (ADAnimatorSet_Builder_) && (INCLUDE_ALL_AnimatorSet || defined(INCLUDE_ADAnimatorSet_Builder))
#define ADAnimatorSet_Builder_

@class ADAnimator;
@class ADAnimatorSet;
@class JavaLangLong;

/*!
 @brief The <code>Builder</code> object is a utility class to facilitate adding animations to a 
 <code>AnimatorSet</code> along with the relationships between the various animations.The
  intention of the <code>Builder</code> methods, along with the <code>play()</code>
  method of <code>AnimatorSet</code> is to make it possible
  to express the dependency relationships of animations in a natural way.
 Developers can also
  use the <code>playTogether()</code> and <code>playSequentially()</code>
  methods if these suit the need,
  but it might be easier in some situations to express the AnimatorSet of animations in pairs. 
 <p>
  <p>The <code>Builder</code> object cannot be constructed directly, but is rather constructed
  internally via a call to <code>AnimatorSet.play(Animator)</code>.</p>
  <p>
  <p>For example, this sets up a AnimatorSet to play anim1 and anim2 at the same time, anim3 to
  play when anim2 finishes, and anim4 to play when anim3 finishes:</p>
  @code

      AnimatorSet s = new AnimatorSet();
      s.play(anim1).with(anim2);
      s.play(anim2).before(anim3);
      s.play(anim4).after(anim3); 
  
@endcode
  <p>
  <p>Note in the example that both <code>Builder.before(Animator)</code> and <code>Builder.after(Animator)</code>
  are used. These are just different ways of expressing the same
  relationship and are provided to make it easier to say things in a way that is more natural,
  depending on the situation.</p>
  <p>
  <p>It is possible to make several calls into the same <code>Builder</code> object to express
  multiple relationships. However, note that it is only the animation passed into the initial 
 <code>AnimatorSet.play(Animator)</code> method that is the dependency in any of the successive
  calls to the <code>Builder</code> object. For example, the following code starts both anim2
  and anim3 when anim1 ends; there is no direct dependency relationship between anim2 and
  anim3: 
 @code

    AnimatorSet s = new AnimatorSet();
    s.play(anim1).before(anim2).before(anim3); 
  
@endcode
  If the desired result is to play anim1 then anim2 then anim3, this code expresses the
  relationship correctly:</p>
  @code

    AnimatorSet s = new AnimatorSet();
    s.play(anim1).before(anim2);
    s.play(anim2).before(anim3); 
  
@endcode
  <p>
  <p>Note that it is possible to express relationships that cannot be resolved and will not
  result in sensible results. For example, <code>play(anim1).after(anim1)</code> makes no
  sense. In general, circular dependencies like this one (or more indirect ones where a depends
  on b, which depends on c, which depends on a) should be avoided. Only create AnimatorSets
  that can boil down to a simple, one-way relationship of animations starting with, before, and
  after other, different, animations.</p>
 */
@interface ADAnimatorSet_Builder : NSObject

#pragma mark Public

/*!
 @brief Sets up the given animation to play when the animation supplied in the 
 <code>AnimatorSet.play(Animator)</code> call that created this <code>Builder</code> object
  to start when the animation supplied in this method call ends.
 @param anim The animation whose end will cause the animation supplied to the  
 <code>AnimatorSet.play(Animator)</code>  method to play.
 */
- (ADAnimatorSet_Builder *)afterWithADAnimator:(ADAnimator *)anim;

/*!
 @brief Sets up the animation supplied in the 
 <code>AnimatorSet.play(Animator)</code> call that created this <code>Builder</code> object
  to play when the given amount of time elapses.
 @param delay The number of milliseconds that should elapse before the  animation starts.
 */
- (ADAnimatorSet_Builder *)afterWithLong:(int64_t)delay;

/*!
 @brief Sets up the given animation to play when the animation supplied in the 
 <code>AnimatorSet.play(Animator)</code> call that created this <code>Builder</code> object
  ends.
 @param anim The animation that will play when the animation supplied to the  
 <code>AnimatorSet.play(Animator)</code>  method ends.
 */
- (ADAnimatorSet_Builder *)beforeWithADAnimator:(ADAnimator *)anim;

/*!
 @brief Sets up the given animation to play at the same time as the animation supplied in the 
 <code>AnimatorSet.play(Animator)</code> call that created this <code>Builder</code> object.
 @param anim The animation that will play when the animation supplied to the  
 <code>AnimatorSet.play(Animator)</code>  method starts.
 */
- (ADAnimatorSet_Builder *)withWithADAnimator:(ADAnimator *)anim;

#pragma mark Package-Private

/*!
 @brief package-private constructor.Builders are only constructed by AnimatorSet, when the
  play() method is called.
 @param anim The animation that is the dependency for the other animations passed into  the other methods of this Builder object.
 */
- (instancetype)initWithADAnimatorSet:(ADAnimatorSet *)outer$
                       withADAnimator:(ADAnimator *)anim;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ADAnimatorSet_Builder)

FOUNDATION_EXPORT void ADAnimatorSet_Builder_initWithADAnimatorSet_withADAnimator_(ADAnimatorSet_Builder *self, ADAnimatorSet *outer$, ADAnimator *anim);

FOUNDATION_EXPORT ADAnimatorSet_Builder *new_ADAnimatorSet_Builder_initWithADAnimatorSet_withADAnimator_(ADAnimatorSet *outer$, ADAnimator *anim) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ADAnimatorSet_Builder *create_ADAnimatorSet_Builder_initWithADAnimatorSet_withADAnimator_(ADAnimatorSet *outer$, ADAnimator *anim);

J2OBJC_TYPE_LITERAL_HEADER(ADAnimatorSet_Builder)


#endif

#pragma pop_macro("INCLUDE_ALL_AnimatorSet")
