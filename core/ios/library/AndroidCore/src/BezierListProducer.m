//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroid\src\main\stub\r\android\graphics\BezierListProducer.java
//

#include "Bezier.h"
#include "BezierHistory.h"
#include "BezierListProducer.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "PointF.h"
#include "java/util/ArrayList.h"


@implementation ADBezierListProducer

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADBezierListProducer_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)startPath {
  curveLength_ = 0.0f;
  [((JavaUtilArrayList *) nil_chk(bezierSegs_)) clear];
}

- (void)movetoRelWithFloat:(jfloat)x
                 withFloat:(jfloat)y {
  jfloat offx = ((ADPointF *) nil_chk(((ADBezierHistory *) nil_chk(hist_))->lastPoint_))->x_;
  jfloat offy = hist_->lastPoint_->y_;
  [self movetoAbsWithFloat:offx + x withFloat:offy + y];
  
  ;
}

- (void)movetoAbsWithFloat:(jfloat)x
                 withFloat:(jfloat)y {
  [((ADBezierHistory *) nil_chk(hist_)) setLastPointWithFloat:x withFloat:y];
}

- (void)closePath {
  [self linetoRelWithFloat:((ADPointF *) nil_chk(((ADBezierHistory *) nil_chk(hist_))->startPoint_))->x_ withFloat:hist_->startPoint_->y_];
}

- (void)linetoRelWithFloat:(jfloat)x
                 withFloat:(jfloat)y {
  jfloat offx = ((ADPointF *) nil_chk(((ADBezierHistory *) nil_chk(hist_))->lastPoint_))->x_;
  jfloat offy = hist_->lastPoint_->y_;
  [self linetoAbsWithFloat:offx + x withFloat:offy + y];
}

- (void)linetoAbsWithFloat:(jfloat)x
                 withFloat:(jfloat)y {
  *IOSFloatArray_GetRef(nil_chk(coords_), 0) = x;
  *IOSFloatArray_GetRef(coords_, 1) = y;
  ADBezier *b = create_ADBezier_initWithFloat_withFloat_withFloatArray_withInt_(((ADPointF *) nil_chk(((ADBezierHistory *) nil_chk(hist_))->lastPoint_))->x_, hist_->lastPoint_->y_, coords_, 1);
  [((JavaUtilArrayList *) nil_chk(bezierSegs_)) addWithId:b];
  JrePlusAssignFloatF(&curveLength_, [b getLength]);
  [((ADBezierHistory *) nil_chk(hist_)) setLastPointWithFloat:x withFloat:y];
  [((ADBezierHistory *) nil_chk(hist_)) setLastKnotWithFloat:x withFloat:y];
}

- (void)linetoHorizontalRelWithFloat:(jfloat)x {
  [self linetoAbsWithFloat:x + ((ADPointF *) nil_chk(((ADBezierHistory *) nil_chk(hist_))->lastPoint_))->x_ withFloat:hist_->lastPoint_->y_];
}

- (void)linetoHorizontalAbsWithFloat:(jfloat)x {
  [self linetoAbsWithFloat:x withFloat:((ADPointF *) nil_chk(((ADBezierHistory *) nil_chk(hist_))->lastPoint_))->y_];
}

- (void)linetoVerticalRelWithFloat:(jfloat)y {
  [self linetoAbsWithFloat:((ADPointF *) nil_chk(((ADBezierHistory *) nil_chk(hist_))->lastPoint_))->x_ withFloat:y + hist_->lastPoint_->y_];
}

- (void)linetoVerticalAbsWithFloat:(jfloat)y {
  [self linetoAbsWithFloat:((ADPointF *) nil_chk(((ADBezierHistory *) nil_chk(hist_))->lastPoint_))->x_ withFloat:y];
}

- (void)curvetoCubicRelWithFloat:(jfloat)x1
                       withFloat:(jfloat)y1
                       withFloat:(jfloat)x2
                       withFloat:(jfloat)y2
                       withFloat:(jfloat)x
                       withFloat:(jfloat)y {
  jfloat offx = ((ADPointF *) nil_chk(((ADBezierHistory *) nil_chk(hist_))->lastPoint_))->x_;
  jfloat offy = hist_->lastPoint_->y_;
  [self curvetoCubicAbsWithFloat:x1 + offx withFloat:y1 + offy withFloat:x2 + offx withFloat:y2 + offy withFloat:x + offx withFloat:y + offy];
}

- (void)curvetoCubicAbsWithFloat:(jfloat)x1
                       withFloat:(jfloat)y1
                       withFloat:(jfloat)x2
                       withFloat:(jfloat)y2
                       withFloat:(jfloat)x
                       withFloat:(jfloat)y {
  *IOSFloatArray_GetRef(nil_chk(coords_), 0) = x1;
  *IOSFloatArray_GetRef(coords_, 1) = y1;
  *IOSFloatArray_GetRef(coords_, 2) = x2;
  *IOSFloatArray_GetRef(coords_, 3) = y2;
  *IOSFloatArray_GetRef(coords_, 4) = x;
  *IOSFloatArray_GetRef(coords_, 5) = y;
  ADBezier *b = create_ADBezier_initWithFloat_withFloat_withFloatArray_withInt_(((ADPointF *) nil_chk(((ADBezierHistory *) nil_chk(hist_))->lastPoint_))->x_, hist_->lastPoint_->y_, coords_, 3);
  [((JavaUtilArrayList *) nil_chk(bezierSegs_)) addWithId:b];
  JrePlusAssignFloatF(&curveLength_, [b getLength]);
  [((ADBezierHistory *) nil_chk(hist_)) setLastPointWithFloat:x withFloat:y];
  [((ADBezierHistory *) nil_chk(hist_)) setLastKnotWithFloat:x2 withFloat:y2];
}

- (void)curvetoCubicSmoothRelWithFloat:(jfloat)x2
                             withFloat:(jfloat)y2
                             withFloat:(jfloat)x
                             withFloat:(jfloat)y {
  jfloat offx = ((ADPointF *) nil_chk(((ADBezierHistory *) nil_chk(hist_))->lastPoint_))->x_;
  jfloat offy = hist_->lastPoint_->y_;
  [self curvetoCubicSmoothAbsWithFloat:x2 + offx withFloat:y2 + offy withFloat:x + offx withFloat:y + offy];
}

- (void)curvetoCubicSmoothAbsWithFloat:(jfloat)x2
                             withFloat:(jfloat)y2
                             withFloat:(jfloat)x
                             withFloat:(jfloat)y {
  jfloat oldKx = ((ADPointF *) nil_chk(((ADBezierHistory *) nil_chk(hist_))->lastKnot_))->x_;
  jfloat oldKy = hist_->lastKnot_->y_;
  jfloat oldX = ((ADPointF *) nil_chk(hist_->lastPoint_))->x_;
  jfloat oldY = hist_->lastPoint_->y_;
  jfloat k1x = oldX * 2.0f - oldKx;
  jfloat k1y = oldY * 2.0f - oldKy;
  *IOSFloatArray_GetRef(nil_chk(coords_), 0) = k1x;
  *IOSFloatArray_GetRef(coords_, 1) = k1y;
  *IOSFloatArray_GetRef(coords_, 2) = x2;
  *IOSFloatArray_GetRef(coords_, 3) = y2;
  *IOSFloatArray_GetRef(coords_, 4) = x;
  *IOSFloatArray_GetRef(coords_, 5) = y;
  ADBezier *b = create_ADBezier_initWithFloat_withFloat_withFloatArray_withInt_(hist_->lastPoint_->x_, hist_->lastPoint_->y_, coords_, 3);
  [((JavaUtilArrayList *) nil_chk(bezierSegs_)) addWithId:b];
  JrePlusAssignFloatF(&curveLength_, [b getLength]);
  [((ADBezierHistory *) nil_chk(hist_)) setLastPointWithFloat:x withFloat:y];
  [((ADBezierHistory *) nil_chk(hist_)) setLastKnotWithFloat:x2 withFloat:y2];
}

- (void)curvetoQuadraticRelWithFloat:(jfloat)x1
                           withFloat:(jfloat)y1
                           withFloat:(jfloat)x
                           withFloat:(jfloat)y {
  jfloat offx = ((ADPointF *) nil_chk(((ADBezierHistory *) nil_chk(hist_))->lastPoint_))->x_;
  jfloat offy = hist_->lastPoint_->y_;
  [self curvetoQuadraticAbsWithFloat:x1 + offx withFloat:y1 + offy withFloat:x + offx withFloat:y + offy];
}

- (void)curvetoQuadraticAbsWithFloat:(jfloat)x1
                           withFloat:(jfloat)y1
                           withFloat:(jfloat)x
                           withFloat:(jfloat)y {
  *IOSFloatArray_GetRef(nil_chk(coords_), 0) = x1;
  *IOSFloatArray_GetRef(coords_, 1) = y1;
  *IOSFloatArray_GetRef(coords_, 2) = x;
  *IOSFloatArray_GetRef(coords_, 3) = y;
  ADBezier *b = create_ADBezier_initWithFloat_withFloat_withFloatArray_withInt_(((ADPointF *) nil_chk(((ADBezierHistory *) nil_chk(hist_))->lastPoint_))->x_, hist_->lastPoint_->y_, coords_, 2);
  [((JavaUtilArrayList *) nil_chk(bezierSegs_)) addWithId:b];
  JrePlusAssignFloatF(&curveLength_, [b getLength]);
  [((ADBezierHistory *) nil_chk(hist_)) setLastPointWithFloat:x withFloat:y];
  [((ADBezierHistory *) nil_chk(hist_)) setLastKnotWithFloat:x1 withFloat:y1];
}

- (void)curvetoQuadraticSmoothRelWithFloat:(jfloat)x
                                 withFloat:(jfloat)y {
  jfloat offx = ((ADPointF *) nil_chk(((ADBezierHistory *) nil_chk(hist_))->lastPoint_))->x_;
  jfloat offy = hist_->lastPoint_->y_;
  [self curvetoQuadraticSmoothAbsWithFloat:x + offx withFloat:y + offy];
}

- (void)curvetoQuadraticSmoothAbsWithFloat:(jfloat)x
                                 withFloat:(jfloat)y {
  [self curvetoQuadraticAbsWithFloat:((ADPointF *) nil_chk(((ADBezierHistory *) nil_chk(hist_))->lastKnot_))->x_ withFloat:hist_->lastKnot_->y_ withFloat:x withFloat:y];
}

- (void)arcRelWithFloat:(jfloat)rx
              withFloat:(jfloat)ry
              withFloat:(jfloat)xAxisRotation
            withBoolean:(jboolean)largeArcFlag
            withBoolean:(jboolean)sweepFlag
              withFloat:(jfloat)x
              withFloat:(jfloat)y {
}

- (void)arcAbsWithFloat:(jfloat)rx
              withFloat:(jfloat)ry
              withFloat:(jfloat)xAxisRotation
            withBoolean:(jboolean)largeArcFlag
            withBoolean:(jboolean)sweepFlag
              withFloat:(jfloat)x
              withFloat:(jfloat)y {
}

- (void)endPath {
  [((ADBezierHistory *) nil_chk(hist_)) setLastPointWithFloat:((ADPointF *) nil_chk(hist_->startPoint_))->x_ withFloat:hist_->startPoint_->y_];
  [((ADBezierHistory *) nil_chk(hist_)) setLastKnotWithFloat:((ADPointF *) nil_chk(hist_->startPoint_))->x_ withFloat:hist_->startPoint_->y_];
}

- (void)dealloc {
  RELEASE_(bezierSegs_);
  RELEASE_(coords_);
  RELEASE_(hist_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, 0, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 2, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 2, 0, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 2, 0, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, 0, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 7, 0, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 7, 0, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 7, 0, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 12, 0, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 12, 0, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 15, 0, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 15, 0, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 15, 0, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 15, 0, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 2, 0, -1, -1, -1 },
    { NULL, "V", 0x1, 21, 22, 0, -1, -1, -1 },
    { NULL, "V", 0x1, 23, 22, 0, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 0, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(startPath);
  methods[2].selector = @selector(movetoRelWithFloat:withFloat:);
  methods[3].selector = @selector(movetoAbsWithFloat:withFloat:);
  methods[4].selector = @selector(closePath);
  methods[5].selector = @selector(linetoRelWithFloat:withFloat:);
  methods[6].selector = @selector(linetoAbsWithFloat:withFloat:);
  methods[7].selector = @selector(linetoHorizontalRelWithFloat:);
  methods[8].selector = @selector(linetoHorizontalAbsWithFloat:);
  methods[9].selector = @selector(linetoVerticalRelWithFloat:);
  methods[10].selector = @selector(linetoVerticalAbsWithFloat:);
  methods[11].selector = @selector(curvetoCubicRelWithFloat:withFloat:withFloat:withFloat:withFloat:withFloat:);
  methods[12].selector = @selector(curvetoCubicAbsWithFloat:withFloat:withFloat:withFloat:withFloat:withFloat:);
  methods[13].selector = @selector(curvetoCubicSmoothRelWithFloat:withFloat:withFloat:withFloat:);
  methods[14].selector = @selector(curvetoCubicSmoothAbsWithFloat:withFloat:withFloat:withFloat:);
  methods[15].selector = @selector(curvetoQuadraticRelWithFloat:withFloat:withFloat:withFloat:);
  methods[16].selector = @selector(curvetoQuadraticAbsWithFloat:withFloat:withFloat:withFloat:);
  methods[17].selector = @selector(curvetoQuadraticSmoothRelWithFloat:withFloat:);
  methods[18].selector = @selector(curvetoQuadraticSmoothAbsWithFloat:withFloat:);
  methods[19].selector = @selector(arcRelWithFloat:withFloat:withFloat:withBoolean:withBoolean:withFloat:withFloat:);
  methods[20].selector = @selector(arcAbsWithFloat:withFloat:withFloat:withBoolean:withBoolean:withFloat:withFloat:);
  methods[21].selector = @selector(endPath);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "bezierSegs_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x10, -1, -1, 24, -1 },
    { "coords_", "[F", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "curveLength_", "F", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "hist_", "LADBezierHistory;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LADBezierParseException;", "movetoRel", "FF", "movetoAbs", "linetoRel", "linetoAbs", "linetoHorizontalRel", "F", "linetoHorizontalAbs", "linetoVerticalRel", "linetoVerticalAbs", "curvetoCubicRel", "FFFFFF", "curvetoCubicAbs", "curvetoCubicSmoothRel", "FFFF", "curvetoCubicSmoothAbs", "curvetoQuadraticRel", "curvetoQuadraticAbs", "curvetoQuadraticSmoothRel", "curvetoQuadraticSmoothAbs", "arcRel", "FFFZZFF", "arcAbs", "Ljava/util/ArrayList<Lr/android/graphics/Bezier;>;" };
  static const J2ObjcClassInfo _ADBezierListProducer = { "BezierListProducer", "r.android.graphics", ptrTable, methods, fields, 7, 0x1, 22, 4, -1, -1, -1, -1, -1 };
  return &_ADBezierListProducer;
}

@end

void ADBezierListProducer_init(ADBezierListProducer *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->bezierSegs_, new_JavaUtilArrayList_init());
  JreStrongAssignAndConsume(&self->coords_, [IOSFloatArray newArrayWithLength:6]);
  self->curveLength_ = 0.0f;
  JreStrongAssignAndConsume(&self->hist_, new_ADBezierHistory_init());
}

ADBezierListProducer *new_ADBezierListProducer_init() {
  J2OBJC_NEW_IMPL(ADBezierListProducer, init)
}

ADBezierListProducer *create_ADBezierListProducer_init() {
  J2OBJC_CREATE_IMPL(ADBezierListProducer, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADBezierListProducer)
