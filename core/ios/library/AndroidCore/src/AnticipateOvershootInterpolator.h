//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroid\src\main\java\r\android\view\animation\AnticipateOvershootInterpolator.java
//

#import <Foundation/Foundation.h>
#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_AnticipateOvershootInterpolator")
#ifdef RESTRICT_AnticipateOvershootInterpolator
#define INCLUDE_ALL_AnticipateOvershootInterpolator 0
#else
#define INCLUDE_ALL_AnticipateOvershootInterpolator 1
#endif
#undef RESTRICT_AnticipateOvershootInterpolator

#if !defined (ADAnticipateOvershootInterpolator_) && (INCLUDE_ALL_AnticipateOvershootInterpolator || defined(INCLUDE_ADAnticipateOvershootInterpolator))
#define ADAnticipateOvershootInterpolator_

#define RESTRICT_BaseInterpolator 1
#define INCLUDE_ADBaseInterpolator 1
#include "BaseInterpolator.h"

@class JavaLangFloat;
@class JavaLangLong;

/*!
 @brief An interpolator where the change starts backward then flings forward and overshoots
  the target value and finally goes back to the final value.
 */
@interface ADAnticipateOvershootInterpolator : ADBaseInterpolator

#pragma mark Public

- (instancetype)init;

/*!
 @param tension Amount of anticipation/overshoot. When tension equals 0.0f,                 there is no anticipation/overshoot and the interpolator becomes
                  a simple acceleration/deceleration interpolator.
 */
- (instancetype)initWithFloat:(float)tension;

/*!
 @param tension Amount of anticipation/overshoot. When tension equals 0.0f,                 there is no anticipation/overshoot and the interpolator becomes
                  a simple acceleration/deceleration interpolator.
 @param extraTension Amount by which to multiply the tension. For instance,                      to get the same overshoot as an OvershootInterpolator with
                       a tension of 2.0f, you would use an extraTension of 1.5f.
 */
- (instancetype)initWithFloat:(float)tension
                    withFloat:(float)extraTension;

/*!
 */
- (int64_t)createNativeInterpolator;

- (float)getInterpolationWithFloat:(float)t;

@end

J2OBJC_EMPTY_STATIC_INIT(ADAnticipateOvershootInterpolator)

FOUNDATION_EXPORT void ADAnticipateOvershootInterpolator_init(ADAnticipateOvershootInterpolator *self);

FOUNDATION_EXPORT ADAnticipateOvershootInterpolator *new_ADAnticipateOvershootInterpolator_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ADAnticipateOvershootInterpolator *create_ADAnticipateOvershootInterpolator_init(void);

FOUNDATION_EXPORT void ADAnticipateOvershootInterpolator_initWithFloat_(ADAnticipateOvershootInterpolator *self, float tension);

FOUNDATION_EXPORT ADAnticipateOvershootInterpolator *new_ADAnticipateOvershootInterpolator_initWithFloat_(float tension) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ADAnticipateOvershootInterpolator *create_ADAnticipateOvershootInterpolator_initWithFloat_(float tension);

FOUNDATION_EXPORT void ADAnticipateOvershootInterpolator_initWithFloat_withFloat_(ADAnticipateOvershootInterpolator *self, float tension, float extraTension);

FOUNDATION_EXPORT ADAnticipateOvershootInterpolator *new_ADAnticipateOvershootInterpolator_initWithFloat_withFloat_(float tension, float extraTension) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ADAnticipateOvershootInterpolator *create_ADAnticipateOvershootInterpolator_initWithFloat_withFloat_(float tension, float extraTension);

J2OBJC_TYPE_LITERAL_HEADER(ADAnticipateOvershootInterpolator)

@compatibility_alias RAndroidViewAnimationAnticipateOvershootInterpolator ADAnticipateOvershootInterpolator;


#endif

#pragma pop_macro("INCLUDE_ALL_AnticipateOvershootInterpolator")
