//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroid\src\main\java\r\android\animation\FloatKeyframeSet.java
//

#define J2OBJC_IMPORTED_BY_JAVA_IMPLEMENTATION 1




#include "FloatKeyframeSet.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "Keyframe.h"
#include "KeyframeSet.h"
#include "TimeInterpolator.h"
#include "TypeEvaluator.h"
#include "java/lang/Float.h"
#include "java/lang/Integer.h"
#include "java/util/List.h"




#pragma clang diagnostic error "-Wreturn-type"
#pragma clang diagnostic ignored "-Wswitch"


@implementation ADFloatKeyframeSet

- (instancetype)initPackagePrivateWithADKeyframe_FloatKeyframeArray:(IOSObjectArray *)keyframes {
  ADFloatKeyframeSet_initPackagePrivateWithADKeyframe_FloatKeyframeArray_(self, keyframes);
  return self;
}

- (id)getValueWithFloat:(float)fraction {
  return JavaLangFloat_valueOfWithFloat_([self getFloatValueWithFloat:fraction]);
}

- (ADFloatKeyframeSet *)java_clone {
  id<JavaUtilList> keyframes = mKeyframes_;
  int32_t numKeyframes = [((id<JavaUtilList>) nil_chk(mKeyframes_)) size];
  IOSObjectArray *newIKeyframes = [IOSObjectArray arrayWithLength:numKeyframes type:ADKeyframe_FloatKeyframe_class_()];
  for (int32_t i = 0; i < numKeyframes; ++i) {
    IOSObjectArray_Set(newIKeyframes, i, (ADKeyframe_FloatKeyframe *) cast_chk([((ADKeyframe *) nil_chk([((id<JavaUtilList>) nil_chk(keyframes)) getWithInt:i])) java_clone], [ADKeyframe_FloatKeyframe class]));
  }
  ADFloatKeyframeSet *newSet = create_ADFloatKeyframeSet_initPackagePrivateWithADKeyframe_FloatKeyframeArray_(newIKeyframes);
  return newSet;
}

- (float)getFloatValueWithFloat:(float)fraction {
  if (fraction <= 0.0f) {
    ADKeyframe_FloatKeyframe *prevKeyframe = (ADKeyframe_FloatKeyframe *) cast_chk([((id<JavaUtilList>) nil_chk(mKeyframes_)) getWithInt:0], [ADKeyframe_FloatKeyframe class]);
    ADKeyframe_FloatKeyframe *nextKeyframe = (ADKeyframe_FloatKeyframe *) cast_chk([((id<JavaUtilList>) nil_chk(mKeyframes_)) getWithInt:1], [ADKeyframe_FloatKeyframe class]);
    float prevValue = [((ADKeyframe_FloatKeyframe *) nil_chk(prevKeyframe)) getFloatValue];
    float nextValue = [((ADKeyframe_FloatKeyframe *) nil_chk(nextKeyframe)) getFloatValue];
    float prevFraction = [prevKeyframe getFraction];
    float nextFraction = [nextKeyframe getFraction];
    id<ADTimeInterpolator> interpolator = [nextKeyframe getInterpolator];
    if (interpolator != nil) {
      fraction = [interpolator getInterpolationWithFloat:fraction];
    }
    float intervalFraction = (fraction - prevFraction) / (nextFraction - prevFraction);
    return mEvaluator_ == nil ? prevValue + intervalFraction * (nextValue - prevValue) : [((NSNumber *) nil_chk(((NSNumber *) cast_chk([mEvaluator_ evaluateWithFloat:intervalFraction withId:JavaLangFloat_valueOfWithFloat_(prevValue) withId:JavaLangFloat_valueOfWithFloat_(nextValue)], [NSNumber class])))) floatValue];
  }
  else if (fraction >= 1.0f) {
    ADKeyframe_FloatKeyframe *prevKeyframe = (ADKeyframe_FloatKeyframe *) cast_chk([((id<JavaUtilList>) nil_chk(mKeyframes_)) getWithInt:mNumKeyframes_ - 2], [ADKeyframe_FloatKeyframe class]);
    ADKeyframe_FloatKeyframe *nextKeyframe = (ADKeyframe_FloatKeyframe *) cast_chk([((id<JavaUtilList>) nil_chk(mKeyframes_)) getWithInt:mNumKeyframes_ - 1], [ADKeyframe_FloatKeyframe class]);
    float prevValue = [((ADKeyframe_FloatKeyframe *) nil_chk(prevKeyframe)) getFloatValue];
    float nextValue = [((ADKeyframe_FloatKeyframe *) nil_chk(nextKeyframe)) getFloatValue];
    float prevFraction = [prevKeyframe getFraction];
    float nextFraction = [nextKeyframe getFraction];
    id<ADTimeInterpolator> interpolator = [nextKeyframe getInterpolator];
    if (interpolator != nil) {
      fraction = [interpolator getInterpolationWithFloat:fraction];
    }
    float intervalFraction = (fraction - prevFraction) / (nextFraction - prevFraction);
    return mEvaluator_ == nil ? prevValue + intervalFraction * (nextValue - prevValue) : [((NSNumber *) nil_chk(((NSNumber *) cast_chk([mEvaluator_ evaluateWithFloat:intervalFraction withId:JavaLangFloat_valueOfWithFloat_(prevValue) withId:JavaLangFloat_valueOfWithFloat_(nextValue)], [NSNumber class])))) floatValue];
  }
  ADKeyframe_FloatKeyframe *prevKeyframe = (ADKeyframe_FloatKeyframe *) cast_chk([((id<JavaUtilList>) nil_chk(mKeyframes_)) getWithInt:0], [ADKeyframe_FloatKeyframe class]);
  for (int32_t i = 1; i < mNumKeyframes_; ++i) {
    ADKeyframe_FloatKeyframe *nextKeyframe = (ADKeyframe_FloatKeyframe *) cast_chk([((id<JavaUtilList>) nil_chk(mKeyframes_)) getWithInt:i], [ADKeyframe_FloatKeyframe class]);
    if (fraction < [((ADKeyframe_FloatKeyframe *) nil_chk(nextKeyframe)) getFraction]) {
      id<ADTimeInterpolator> interpolator = [nextKeyframe getInterpolator];
      float intervalFraction = (fraction - [((ADKeyframe_FloatKeyframe *) nil_chk(prevKeyframe)) getFraction]) / ([nextKeyframe getFraction] - [prevKeyframe getFraction]);
      float prevValue = [prevKeyframe getFloatValue];
      float nextValue = [nextKeyframe getFloatValue];
      if (interpolator != nil) {
        intervalFraction = [interpolator getInterpolationWithFloat:intervalFraction];
      }
      return mEvaluator_ == nil ? prevValue + intervalFraction * (nextValue - prevValue) : [((NSNumber *) nil_chk(((NSNumber *) cast_chk([mEvaluator_ evaluateWithFloat:intervalFraction withId:JavaLangFloat_valueOfWithFloat_(prevValue) withId:JavaLangFloat_valueOfWithFloat_(nextValue)], [NSNumber class])))) floatValue];
    }
    prevKeyframe = nextKeyframe;
  }
  return [((NSNumber *) nil_chk(((NSNumber *) cast_chk([((ADKeyframe *) nil_chk([((id<JavaUtilList>) nil_chk(mKeyframes_)) getWithInt:mNumKeyframes_ - 1])) getValue], [NSNumber class])))) floatValue];
}

- (IOSClass *)getType {
  return JavaLangFloat_class_();
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x81, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LADFloatKeyframeSet;", 0x1, 3, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x1, 4, 2, -1, -1, -1, -1 },
    { NULL, "LIOSClass;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initPackagePrivateWithADKeyframe_FloatKeyframeArray:);
  methods[1].selector = @selector(getValueWithFloat:);
  methods[2].selector = @selector(java_clone);
  methods[3].selector = @selector(getFloatValueWithFloat:);
  methods[4].selector = @selector(getType);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "[LADKeyframe_FloatKeyframe;", "getValue", "F", "clone", "getFloatValue" };
  static const J2ObjcClassInfo _ADFloatKeyframeSet = { "FloatKeyframeSet", "r.android.animation", ptrTable, methods, NULL, 7, 0x0, 5, 0, -1, -1, -1, -1, -1 };
  return &_ADFloatKeyframeSet;
}

@end

void ADFloatKeyframeSet_initPackagePrivateWithADKeyframe_FloatKeyframeArray_(ADFloatKeyframeSet *self, IOSObjectArray *keyframes) {
  ADKeyframeSet_initWithADKeyframeArray_(self, keyframes);
}

ADFloatKeyframeSet *new_ADFloatKeyframeSet_initPackagePrivateWithADKeyframe_FloatKeyframeArray_(IOSObjectArray *keyframes) {
  J2OBJC_NEW_IMPL(ADFloatKeyframeSet, initPackagePrivateWithADKeyframe_FloatKeyframeArray_, keyframes)
}

ADFloatKeyframeSet *create_ADFloatKeyframeSet_initPackagePrivateWithADKeyframe_FloatKeyframeArray_(IOSObjectArray *keyframes) {
  J2OBJC_CREATE_IMPL(ADFloatKeyframeSet, initPackagePrivateWithADKeyframe_FloatKeyframeArray_, keyframes)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADFloatKeyframeSet)
