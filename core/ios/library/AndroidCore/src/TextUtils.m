//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroid\src\main\java\r\android\text\TextUtils.java
//

#define J2OBJC_IMPORTED_BY_JAVA_IMPLEMENTATION 1




#include "J2ObjC_source.h"
#include "TextUtils.h"
#include "View.h"
#include "java/lang/Boolean.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Character.h"
#include "java/lang/Integer.h"
#include "java/util/Locale.h"
#include "java/util/regex/Matcher.h"
#include "java/util/regex/Pattern.h"




#pragma clang diagnostic error "-Wreturn-type"
#pragma clang diagnostic ignored "-Wswitch"


/*!
 @brief A regular expression for matching right-to-left language codes.See
  <code>isRtlLanguage</code> for the design.
 */
inline JavaUtilRegexPattern *ADTextUtils_get_RtlLocalesRe(void);
static JavaUtilRegexPattern *ADTextUtils_RtlLocalesRe;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADTextUtils, RtlLocalesRe, JavaUtilRegexPattern *)

@interface ADTextUtils_ULocale : NSObject {
 @public
  JavaUtilLocale *locale_;
}

- (instancetype)initWithJavaUtilLocale:(JavaUtilLocale *)locale;

- (bool)isRightToLeft;

+ (ADTextUtils_ULocale *)forLocaleWithJavaUtilLocale:(JavaUtilLocale *)locale;

@end

J2OBJC_EMPTY_STATIC_INIT(ADTextUtils_ULocale)

J2OBJC_FIELD_SETTER(ADTextUtils_ULocale, locale_, JavaUtilLocale *)

__attribute__((unused)) static void ADTextUtils_ULocale_initWithJavaUtilLocale_(ADTextUtils_ULocale *self, JavaUtilLocale *locale);

__attribute__((unused)) static ADTextUtils_ULocale *new_ADTextUtils_ULocale_initWithJavaUtilLocale_(JavaUtilLocale *locale) NS_RETURNS_RETAINED;

__attribute__((unused)) static ADTextUtils_ULocale *create_ADTextUtils_ULocale_initWithJavaUtilLocale_(JavaUtilLocale *locale);

__attribute__((unused)) static ADTextUtils_ULocale *ADTextUtils_ULocale_forLocaleWithJavaUtilLocale_(JavaUtilLocale *locale);

J2OBJC_TYPE_LITERAL_HEADER(ADTextUtils_ULocale)


J2OBJC_INITIALIZED_DEFN(ADTextUtils)

@implementation ADTextUtils

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADTextUtils_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (int32_t)getLayoutDirectionFromLocaleWithJavaUtilLocale:(JavaUtilLocale *)locale {
  return ADTextUtils_getLayoutDirectionFromLocaleWithJavaUtilLocale_(locale);
}

+ (bool)isEmptyWithNSString:(NSString *)text {
  return ADTextUtils_isEmptyWithNSString_(text);
}

+ (bool)isEmptyWithJavaLangCharSequence:(id<JavaLangCharSequence>)text {
  return ADTextUtils_isEmptyWithJavaLangCharSequence_(text);
}

+ (int32_t)getTrimmedLengthWithJavaLangCharSequence:(id<JavaLangCharSequence>)s {
  return ADTextUtils_getTrimmedLengthWithJavaLangCharSequence_(s);
}

+ (bool)equalsWithJavaLangCharSequence:(id<JavaLangCharSequence>)a
              withJavaLangCharSequence:(id<JavaLangCharSequence>)b {
  return ADTextUtils_equalsWithJavaLangCharSequence_withJavaLangCharSequence_(a, b);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 2, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 2, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 5, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 6, 7, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getLayoutDirectionFromLocaleWithJavaUtilLocale:);
  methods[2].selector = @selector(isEmptyWithNSString:);
  methods[3].selector = @selector(isEmptyWithJavaLangCharSequence:);
  methods[4].selector = @selector(getTrimmedLengthWithJavaLangCharSequence:);
  methods[5].selector = @selector(equalsWithJavaLangCharSequence:withJavaLangCharSequence:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "RtlLocalesRe", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x1a, -1, 8, -1, -1 },
  };
  static const void *ptrTable[] = { "getLayoutDirectionFromLocale", "LJavaUtilLocale;", "isEmpty", "LNSString;", "LJavaLangCharSequence;", "getTrimmedLength", "equals", "LJavaLangCharSequence;LJavaLangCharSequence;", &ADTextUtils_RtlLocalesRe, "LADTextUtils_ULocale;" };
  static const J2ObjcClassInfo _ADTextUtils = { "TextUtils", "r.android.text", ptrTable, methods, fields, 7, 0x1, 6, 1, -1, 9, -1, -1, -1 };
  return &_ADTextUtils;
}

+ (void)initialize {
  if (self == [ADTextUtils class]) {
    JreStrongAssign(&ADTextUtils_RtlLocalesRe, JavaUtilRegexPattern_compileWithNSString_(@"^(ar|dv|he|iw|fa|nqo|ps|sd|ug|ur|yi|.*[-_](Arab|Hebr|Thaa|Nkoo|Tfng))(?!.*[-_](Latn|Cyrl)($|-|_))($|-|_)"));
    J2OBJC_SET_INITIALIZED(ADTextUtils)
  }
}

@end

void ADTextUtils_init(ADTextUtils *self) {
  NSObject_init(self);
}

ADTextUtils *new_ADTextUtils_init() {
  J2OBJC_NEW_IMPL(ADTextUtils, init)
}

ADTextUtils *create_ADTextUtils_init() {
  J2OBJC_CREATE_IMPL(ADTextUtils, init)
}

int32_t ADTextUtils_getLayoutDirectionFromLocaleWithJavaUtilLocale_(JavaUtilLocale *locale) {
  ADTextUtils_initialize();
  return ((locale != nil && ![locale isEqual:JreLoadStatic(JavaUtilLocale, ROOT)] && [((ADTextUtils_ULocale *) nil_chk(ADTextUtils_ULocale_forLocaleWithJavaUtilLocale_(locale))) isRightToLeft]) ? ADView_LAYOUT_DIRECTION_RTL : ADView_LAYOUT_DIRECTION_LTR);
}

bool ADTextUtils_isEmptyWithNSString_(NSString *text) {
  ADTextUtils_initialize();
  return text == nil || [text isEmpty];
}

bool ADTextUtils_isEmptyWithJavaLangCharSequence_(id<JavaLangCharSequence> text) {
  ADTextUtils_initialize();
  return text == nil || [text java_length] == 0;
}

int32_t ADTextUtils_getTrimmedLengthWithJavaLangCharSequence_(id<JavaLangCharSequence> s) {
  ADTextUtils_initialize();
  int32_t len = [((id<JavaLangCharSequence>) nil_chk(s)) java_length];
  int32_t start = 0;
  while (start < len && [s charAtWithInt:start] <= ' ') {
    start++;
  }
  int32_t end = len;
  while (end > start && [s charAtWithInt:end - 1] <= ' ') {
    end--;
  }
  return end - start;
}

bool ADTextUtils_equalsWithJavaLangCharSequence_withJavaLangCharSequence_(id<JavaLangCharSequence> a, id<JavaLangCharSequence> b) {
  ADTextUtils_initialize();
  if (JreObjectEqualsEquals(a, b)) return true;
  int32_t length;
  if (a != nil && b != nil && (length = [a java_length]) == [b java_length]) {
    if ([a isKindOfClass:[NSString class]] && [b isKindOfClass:[NSString class]]) {
      return [a isEqual:b];
    }
    else {
      for (int32_t i = 0; i < length; i++) {
        if ([a charAtWithInt:i] != [b charAtWithInt:i]) return false;
      }
      return true;
    }
  }
  return false;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADTextUtils)

J2OBJC_NAME_MAPPING(ADTextUtils, "r.android.text", "AD")

@implementation ADTextUtils_ULocale

- (instancetype)initWithJavaUtilLocale:(JavaUtilLocale *)locale {
  ADTextUtils_ULocale_initWithJavaUtilLocale_(self, locale);
  return self;
}

- (bool)isRightToLeft {
  NSString *languageString = JreRetainedLocalValue([((JavaUtilLocale *) nil_chk(locale_)) getLanguage]);
  return languageString != nil && [((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(JreLoadStatic(ADTextUtils, RtlLocalesRe))) matcherWithJavaLangCharSequence:languageString])) find];
}

+ (ADTextUtils_ULocale *)forLocaleWithJavaUtilLocale:(JavaUtilLocale *)locale {
  return ADTextUtils_ULocale_forLocaleWithJavaUtilLocale_(locale);
}

- (void)dealloc {
  RELEASE_(locale_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADTextUtils_ULocale;", 0x9, 1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaUtilLocale:);
  methods[1].selector = @selector(isRightToLeft);
  methods[2].selector = @selector(forLocaleWithJavaUtilLocale:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "locale_", "LJavaUtilLocale;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilLocale;", "forLocale", "LADTextUtils;" };
  static const J2ObjcClassInfo _ADTextUtils_ULocale = { "ULocale", "r.android.text", ptrTable, methods, fields, 7, 0xa, 3, 1, 2, -1, -1, -1, -1 };
  return &_ADTextUtils_ULocale;
}

@end

void ADTextUtils_ULocale_initWithJavaUtilLocale_(ADTextUtils_ULocale *self, JavaUtilLocale *locale) {
  NSObject_init(self);
  JreStrongAssign(&self->locale_, locale);
}

ADTextUtils_ULocale *new_ADTextUtils_ULocale_initWithJavaUtilLocale_(JavaUtilLocale *locale) {
  J2OBJC_NEW_IMPL(ADTextUtils_ULocale, initWithJavaUtilLocale_, locale)
}

ADTextUtils_ULocale *create_ADTextUtils_ULocale_initWithJavaUtilLocale_(JavaUtilLocale *locale) {
  J2OBJC_CREATE_IMPL(ADTextUtils_ULocale, initWithJavaUtilLocale_, locale)
}

ADTextUtils_ULocale *ADTextUtils_ULocale_forLocaleWithJavaUtilLocale_(JavaUtilLocale *locale) {
  ADTextUtils_ULocale_initialize();
  return create_ADTextUtils_ULocale_initWithJavaUtilLocale_(locale);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADTextUtils_ULocale)
