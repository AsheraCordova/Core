//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroid\src\main\java\r\android\util\ReflectiveProperty.java
//

#define J2OBJC_IMPORTED_BY_JAVA_IMPLEMENTATION 1




#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "NoSuchPropertyException.h"
#include "Property.h"
#include "ReflectiveProperty.h"
#include "java/lang/AssertionError.h"
#include "java/lang/Boolean.h"
#include "java/lang/Byte.h"
#include "java/lang/Character.h"
#include "java/lang/Double.h"
#include "java/lang/Float.h"
#include "java/lang/IllegalAccessException.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/NoSuchFieldException.h"
#include "java/lang/NoSuchMethodException.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/Short.h"
#include "java/lang/Throwable.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/lang/reflect/Field.h"
#include "java/lang/reflect/InvocationTargetException.h"
#include "java/lang/reflect/Method.h"


@class NSString;


#pragma clang diagnostic error "-Wreturn-type"
#pragma clang diagnostic ignored "-Wswitch"


@interface ADReflectiveProperty () {
 @public
  JavaLangReflectMethod *mSetter_;
  JavaLangReflectMethod *mGetter_;
  JavaLangReflectField *mField_;
}

/*!
 @brief Utility method to check whether the type of the underlying field/method on the target
  object matches the type of the Property.The extra checks for primitive types are because
  generics will force the Property type to be a class, whereas the type of the underlying
  method/field will probably be a primitive type instead.
 Accept float as matching Float,
  etc.
 */
- (bool)typesMatchWithIOSClass:(IOSClass *)valueType
                  withIOSClass:(IOSClass *)getterType;

@end

J2OBJC_FIELD_SETTER(ADReflectiveProperty, mSetter_, JavaLangReflectMethod *)
J2OBJC_FIELD_SETTER(ADReflectiveProperty, mGetter_, JavaLangReflectMethod *)
J2OBJC_FIELD_SETTER(ADReflectiveProperty, mField_, JavaLangReflectField *)

inline NSString *ADReflectiveProperty_get_PREFIX_GET(void);
static NSString *ADReflectiveProperty_PREFIX_GET = @"get";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADReflectiveProperty, PREFIX_GET, NSString *)

inline NSString *ADReflectiveProperty_get_PREFIX_IS(void);
static NSString *ADReflectiveProperty_PREFIX_IS = @"is";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADReflectiveProperty, PREFIX_IS, NSString *)

inline NSString *ADReflectiveProperty_get_PREFIX_SET(void);
static NSString *ADReflectiveProperty_PREFIX_SET = @"set";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADReflectiveProperty, PREFIX_SET, NSString *)

__attribute__((unused)) static bool ADReflectiveProperty_typesMatchWithIOSClass_withIOSClass_(ADReflectiveProperty *self, IOSClass *valueType, IOSClass *getterType);

@implementation ADReflectiveProperty

- (instancetype)initPackagePrivateWithIOSClass:(IOSClass *)propertyHolder
                                  withIOSClass:(IOSClass *)valueType
                                  withNSString:(NSString *)name {
  ADReflectiveProperty_initPackagePrivateWithIOSClass_withIOSClass_withNSString_(self, propertyHolder, valueType, name);
  return self;
}

- (bool)typesMatchWithIOSClass:(IOSClass *)valueType
                  withIOSClass:(IOSClass *)getterType {
  return ADReflectiveProperty_typesMatchWithIOSClass_withIOSClass_(self, valueType, getterType);
}

- (void)setWithId:(id)object
           withId:(id)value {
  if (mSetter_ != nil) {
    @try {
      [mSetter_ invokeWithId:object withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ value } count:1 type:NSObject_class_()]];
    }
    @catch (JavaLangIllegalAccessException *e) {
      @throw create_JavaLangAssertionError_init();
    }
    @catch (JavaLangReflectInvocationTargetException *e) {
      @throw create_JavaLangRuntimeException_initWithJavaLangThrowable_([e getCause]);
    }
  }
  else if (mField_ != nil) {
    @try {
      [mField_ setWithId:object withId:value];
    }
    @catch (JavaLangIllegalAccessException *e) {
      @throw create_JavaLangAssertionError_init();
    }
  }
  else {
    @throw create_JavaLangUnsupportedOperationException_initWithNSString_(JreStrcat("$$$", @"Property ", [self getName], @" is read-only"));
  }
}

- (id)getWithId:(id)object {
  if (mGetter_ != nil) {
    @try {
      return [mGetter_ invokeWithId:object withNSObjectArray:nil];
    }
    @catch (JavaLangIllegalAccessException *e) {
      @throw create_JavaLangAssertionError_init();
    }
    @catch (JavaLangReflectInvocationTargetException *e) {
      @throw create_JavaLangRuntimeException_initWithJavaLangThrowable_([e getCause]);
    }
  }
  else if (mField_ != nil) {
    @try {
      return [mField_ getWithId:object];
    }
    @catch (JavaLangIllegalAccessException *e) {
      @throw create_JavaLangAssertionError_init();
    }
  }
  @throw create_JavaLangAssertionError_init();
}

- (bool)isReadOnly {
  return (mSetter_ == nil && mField_ == nil);
}

- (void)dealloc {
  RELEASE_(mSetter_);
  RELEASE_(mGetter_);
  RELEASE_(mField_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "Z", 0x2, 2, 3, -1, 4, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, 7, -1, -1 },
    { NULL, "LNSObject;", 0x1, 8, 9, -1, 10, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initPackagePrivateWithIOSClass:withIOSClass:withNSString:);
  methods[1].selector = @selector(typesMatchWithIOSClass:withIOSClass:);
  methods[2].selector = @selector(setWithId:withId:);
  methods[3].selector = @selector(getWithId:);
  methods[4].selector = @selector(isReadOnly);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "PREFIX_GET", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 11, -1, -1 },
    { "PREFIX_IS", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 12, -1, -1 },
    { "PREFIX_SET", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 13, -1, -1 },
    { "mSetter_", "LJavaLangReflectMethod;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mGetter_", "LJavaLangReflectMethod;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mField_", "LJavaLangReflectField;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LIOSClass;LIOSClass;LNSString;", "(Ljava/lang/Class<TT;>;Ljava/lang/Class<TV;>;Ljava/lang/String;)V", "typesMatch", "LIOSClass;LIOSClass;", "(Ljava/lang/Class<TV;>;Ljava/lang/Class;)Z", "set", "LNSObject;LNSObject;", "(TT;TV;)V", "get", "LNSObject;", "(TT;)TV;", &ADReflectiveProperty_PREFIX_GET, &ADReflectiveProperty_PREFIX_IS, &ADReflectiveProperty_PREFIX_SET, "<T:Ljava/lang/Object;V:Ljava/lang/Object;>Lr/android/util/Property<TT;TV;>;" };
  static const J2ObjcClassInfo _ADReflectiveProperty = { "ReflectiveProperty", "r.android.util", ptrTable, methods, fields, 7, 0x0, 5, 6, -1, -1, -1, 14, -1 };
  return &_ADReflectiveProperty;
}

@end

void ADReflectiveProperty_initPackagePrivateWithIOSClass_withIOSClass_withNSString_(ADReflectiveProperty *self, IOSClass *propertyHolder, IOSClass *valueType, NSString *name) {
  ADProperty_initWithIOSClass_withNSString_(self, valueType, name);
  unichar firstLetter = JavaLangCharacter_toUpperCaseWithChar_([((NSString *) nil_chk(name)) charAtWithInt:0]);
  NSString *theRest = [name java_substring:1];
  NSString *capitalizedName = JreStrcat("C$", firstLetter, theRest);
  NSString *getterName = JreStrcat("$$", ADReflectiveProperty_PREFIX_GET, capitalizedName);
  @try {
    JreStrongAssign(&self->mGetter_, [((IOSClass *) nil_chk(propertyHolder)) getMethod:getterName parameterTypes:nil]);
  }
  @catch (JavaLangNoSuchMethodException *e) {
    getterName = JreStrcat("$$", ADReflectiveProperty_PREFIX_IS, capitalizedName);
    @try {
      JreStrongAssign(&self->mGetter_, [propertyHolder getMethod:getterName parameterTypes:nil]);
    }
    @catch (JavaLangNoSuchMethodException *e1) {
      @try {
        JreStrongAssign(&self->mField_, [propertyHolder getField:name]);
        IOSClass *fieldType = JreRetainedLocalValue([((JavaLangReflectField *) nil_chk(self->mField_)) getType]);
        if (!ADReflectiveProperty_typesMatchWithIOSClass_withIOSClass_(self, valueType, fieldType)) {
          @throw create_ADNoSuchPropertyException_initWithNSString_(JreStrcat("$@$@C", @"Underlying type (", fieldType, @") does not match Property type (", valueType, ')'));
        }
        return;
      }
      @catch (JavaLangNoSuchFieldException *e2) {
        @throw create_ADNoSuchPropertyException_initWithNSString_(JreStrcat("$$", @"No accessor method or field found for property with name ", name));
      }
    }
  }
  IOSClass *getterType = JreRetainedLocalValue([((JavaLangReflectMethod *) nil_chk(self->mGetter_)) getReturnType]);
  if (!ADReflectiveProperty_typesMatchWithIOSClass_withIOSClass_(self, valueType, getterType)) {
    @throw create_ADNoSuchPropertyException_initWithNSString_(JreStrcat("$@$@C", @"Underlying type (", getterType, @") does not match Property type (", valueType, ')'));
  }
  NSString *setterName = JreStrcat("$$", ADReflectiveProperty_PREFIX_SET, capitalizedName);
  @try {
    JreStrongAssign(&self->mSetter_, [propertyHolder getMethod:setterName parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){ getterType } count:1 type:IOSClass_class_()]]);
  }
  @catch (JavaLangNoSuchMethodException *ignored) {
  }
}

ADReflectiveProperty *new_ADReflectiveProperty_initPackagePrivateWithIOSClass_withIOSClass_withNSString_(IOSClass *propertyHolder, IOSClass *valueType, NSString *name) {
  J2OBJC_NEW_IMPL(ADReflectiveProperty, initPackagePrivateWithIOSClass_withIOSClass_withNSString_, propertyHolder, valueType, name)
}

ADReflectiveProperty *create_ADReflectiveProperty_initPackagePrivateWithIOSClass_withIOSClass_withNSString_(IOSClass *propertyHolder, IOSClass *valueType, NSString *name) {
  J2OBJC_CREATE_IMPL(ADReflectiveProperty, initPackagePrivateWithIOSClass_withIOSClass_withNSString_, propertyHolder, valueType, name)
}

bool ADReflectiveProperty_typesMatchWithIOSClass_withIOSClass_(ADReflectiveProperty *self, IOSClass *valueType, IOSClass *getterType) {
  if (!JreObjectEqualsEquals(getterType, valueType)) {
    if ([((IOSClass *) nil_chk(getterType)) isPrimitive]) {
      return (JreObjectEqualsEquals(getterType, [IOSClass floatClass]) && JreObjectEqualsEquals(valueType, JavaLangFloat_class_())) || (JreObjectEqualsEquals(getterType, [IOSClass intClass]) && JreObjectEqualsEquals(valueType, JavaLangInteger_class_())) || (JreObjectEqualsEquals(getterType, [IOSClass booleanClass]) && JreObjectEqualsEquals(valueType, JavaLangBoolean_class_())) || (JreObjectEqualsEquals(getterType, [IOSClass longClass]) && JreObjectEqualsEquals(valueType, JavaLangLong_class_())) || (JreObjectEqualsEquals(getterType, [IOSClass doubleClass]) && JreObjectEqualsEquals(valueType, JavaLangDouble_class_())) || (JreObjectEqualsEquals(getterType, [IOSClass shortClass]) && JreObjectEqualsEquals(valueType, JavaLangShort_class_())) || (JreObjectEqualsEquals(getterType, [IOSClass byteClass]) && JreObjectEqualsEquals(valueType, JavaLangByte_class_())) || (JreObjectEqualsEquals(getterType, [IOSClass charClass]) && JreObjectEqualsEquals(valueType, JavaLangCharacter_class_()));
    }
    return false;
  }
  return true;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADReflectiveProperty)
