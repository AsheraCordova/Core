//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroid\src\main\java\r\android\view\animation\AnticipateOvershootInterpolator.java
//

#include "AnticipateOvershootInterpolator.h"
#include "BaseInterpolator.h"
#include "J2ObjC_source.h"


@interface ADAnticipateOvershootInterpolator () {
 @public
  jfloat mTension_;
}

/*!
 */
+ (jfloat)aWithFloat:(jfloat)t
           withFloat:(jfloat)s;

+ (jfloat)oWithFloat:(jfloat)t
           withFloat:(jfloat)s;

@end

__attribute__((unused)) static jfloat ADAnticipateOvershootInterpolator_aWithFloat_withFloat_(jfloat t, jfloat s);

__attribute__((unused)) static jfloat ADAnticipateOvershootInterpolator_oWithFloat_withFloat_(jfloat t, jfloat s);

@implementation ADAnticipateOvershootInterpolator

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADAnticipateOvershootInterpolator_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithFloat:(jfloat)tension {
  ADAnticipateOvershootInterpolator_initWithFloat_(self, tension);
  return self;
}

- (instancetype)initWithFloat:(jfloat)tension
                    withFloat:(jfloat)extraTension {
  ADAnticipateOvershootInterpolator_initWithFloat_withFloat_(self, tension, extraTension);
  return self;
}

+ (jfloat)aWithFloat:(jfloat)t
           withFloat:(jfloat)s {
  return ADAnticipateOvershootInterpolator_aWithFloat_withFloat_(t, s);
}

+ (jfloat)oWithFloat:(jfloat)t
           withFloat:(jfloat)s {
  return ADAnticipateOvershootInterpolator_oWithFloat_withFloat_(t, s);
}

- (jfloat)getInterpolationWithFloat:(jfloat)t {
  if (t < 0.5f) return 0.5f * ADAnticipateOvershootInterpolator_aWithFloat_withFloat_(t * 2.0f, mTension_);
  else return 0.5f * (ADAnticipateOvershootInterpolator_oWithFloat_withFloat_(t * 2.0f - 2.0f, mTension_) + 2.0f);
}

- (jlong)createNativeInterpolator {
  return 0;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "F", 0xa, 2, 1, -1, -1, -1, -1 },
    { NULL, "F", 0xa, 3, 1, -1, -1, -1, -1 },
    { NULL, "F", 0x1, 4, 0, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithFloat:);
  methods[2].selector = @selector(initWithFloat:withFloat:);
  methods[3].selector = @selector(aWithFloat:withFloat:);
  methods[4].selector = @selector(oWithFloat:withFloat:);
  methods[5].selector = @selector(getInterpolationWithFloat:);
  methods[6].selector = @selector(createNativeInterpolator);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mTension_", "F", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "F", "FF", "a", "o", "getInterpolation" };
  static const J2ObjcClassInfo _ADAnticipateOvershootInterpolator = { "AnticipateOvershootInterpolator", "r.android.view.animation", ptrTable, methods, fields, 7, 0x1, 7, 1, -1, -1, -1, -1, -1 };
  return &_ADAnticipateOvershootInterpolator;
}

@end

void ADAnticipateOvershootInterpolator_init(ADAnticipateOvershootInterpolator *self) {
  ADBaseInterpolator_init(self);
  self->mTension_ = 2.0f * 1.5f;
}

ADAnticipateOvershootInterpolator *new_ADAnticipateOvershootInterpolator_init() {
  J2OBJC_NEW_IMPL(ADAnticipateOvershootInterpolator, init)
}

ADAnticipateOvershootInterpolator *create_ADAnticipateOvershootInterpolator_init() {
  J2OBJC_CREATE_IMPL(ADAnticipateOvershootInterpolator, init)
}

void ADAnticipateOvershootInterpolator_initWithFloat_(ADAnticipateOvershootInterpolator *self, jfloat tension) {
  ADBaseInterpolator_init(self);
  self->mTension_ = tension * 1.5f;
}

ADAnticipateOvershootInterpolator *new_ADAnticipateOvershootInterpolator_initWithFloat_(jfloat tension) {
  J2OBJC_NEW_IMPL(ADAnticipateOvershootInterpolator, initWithFloat_, tension)
}

ADAnticipateOvershootInterpolator *create_ADAnticipateOvershootInterpolator_initWithFloat_(jfloat tension) {
  J2OBJC_CREATE_IMPL(ADAnticipateOvershootInterpolator, initWithFloat_, tension)
}

void ADAnticipateOvershootInterpolator_initWithFloat_withFloat_(ADAnticipateOvershootInterpolator *self, jfloat tension, jfloat extraTension) {
  ADBaseInterpolator_init(self);
  self->mTension_ = tension * extraTension;
}

ADAnticipateOvershootInterpolator *new_ADAnticipateOvershootInterpolator_initWithFloat_withFloat_(jfloat tension, jfloat extraTension) {
  J2OBJC_NEW_IMPL(ADAnticipateOvershootInterpolator, initWithFloat_withFloat_, tension, extraTension)
}

ADAnticipateOvershootInterpolator *create_ADAnticipateOvershootInterpolator_initWithFloat_withFloat_(jfloat tension, jfloat extraTension) {
  J2OBJC_CREATE_IMPL(ADAnticipateOvershootInterpolator, initWithFloat_withFloat_, tension, extraTension)
}

jfloat ADAnticipateOvershootInterpolator_aWithFloat_withFloat_(jfloat t, jfloat s) {
  ADAnticipateOvershootInterpolator_initialize();
  return t * t * ((s + 1) * t - s);
}

jfloat ADAnticipateOvershootInterpolator_oWithFloat_withFloat_(jfloat t, jfloat s) {
  ADAnticipateOvershootInterpolator_initialize();
  return t * t * ((s + 1) * t + s);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADAnticipateOvershootInterpolator)
