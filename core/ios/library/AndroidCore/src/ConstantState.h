//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroid\src\main\java\r\android\content\res\ConstantState.java
//

#import <Foundation/Foundation.h>
#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ConstantState")
#ifdef RESTRICT_ConstantState
#define INCLUDE_ALL_ConstantState 0
#else
#define INCLUDE_ALL_ConstantState 1
#endif
#undef RESTRICT_ConstantState

#if !defined (ADConstantState_) && (INCLUDE_ALL_ConstantState || defined(INCLUDE_ADConstantState))
#define ADConstantState_

@class ADResources;
@class ADResources_Theme;
@class JavaLangInteger;

/*!
 @brief A cache class that can provide new instances of a particular resource which may change
  depending on the current <code>Resources.Theme</code> or <code>Configuration</code>.
 <p>
  A constant state should be able to return a bitmask of changing configurations, which
  identifies the type of configuration changes that may invalidate this resource. These
  configuration changes can be obtained from <code>r.android.util.TypedValue</code>. Entities such as 
 <code>r.android.animation.Animator</code> also provide a changing configuration method to include
  their dependencies (e.g. An AnimatorSet's changing configuration is the union of the
  changing configurations of each Animator in the set)
 */
@interface ADConstantState : NSObject

#pragma mark Public

- (instancetype)init;

/*!
 @brief Return a bit mask of configuration changes that will impact
  this resource (and thus require completely reloading it).
 */
- (int32_t)getChangingConfigurations;

/*!
 @brief Create a new instance without supplying resources the caller
  is running in.
 */
- (id)newInstance OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Create a new instance from its constant state.This
  must be implemented for resources that change based on the target
  density of their caller (that is depending on whether it is
  in compatibility mode).
 */
- (id)newInstanceWithADResources:(ADResources *)res OBJC_METHOD_FAMILY_NONE;

/*!
 @brief Create a new instance from its constant state.This must be
  implemented for resources that can have a theme applied.
 */
- (id)newInstanceWithADResources:(ADResources *)res
           withADResources_Theme:(ADResources_Theme *)theme OBJC_METHOD_FAMILY_NONE;

@end

J2OBJC_EMPTY_STATIC_INIT(ADConstantState)

FOUNDATION_EXPORT void ADConstantState_init(ADConstantState *self);

J2OBJC_TYPE_LITERAL_HEADER(ADConstantState)

@compatibility_alias RAndroidContentResConstantState ADConstantState;


#endif

#pragma pop_macro("INCLUDE_ALL_ConstantState")
