//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroid\src\main\stub\r\android\graphics\BezierPath.java
//

#define J2OBJC_IMPORTED_BY_JAVA_IMPLEMENTATION 1




#include "Bezier.h"
#include "BezierListProducer.h"
#include "BezierPath.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "PointF.h"
#include "java/lang/Boolean.h"
#include "java/lang/Character.h"
#include "java/lang/Double.h"
#include "java/lang/Float.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/RuntimeException.h"
#include "java/util/ArrayList.h"
#include "java/util/Iterator.h"
#include "java/util/LinkedList.h"
#include "java/util/List.h"
#include "java/util/regex/Matcher.h"
#include "java/util/regex/Pattern.h"




#pragma clang diagnostic error "-Wreturn-type"
#pragma clang diagnostic ignored "-Wswitch"


inline int32_t ADBezierPath_get_MAX_NUM_POINTS(void);
#define ADBezierPath_MAX_NUM_POINTS 100
J2OBJC_STATIC_FIELD_CONSTANT(ADBezierPath, MAX_NUM_POINTS, int32_t)

inline int32_t ADBezierPath_get_FRACTION_OFFSET(void);
#define ADBezierPath_FRACTION_OFFSET 0
J2OBJC_STATIC_FIELD_CONSTANT(ADBezierPath, FRACTION_OFFSET, int32_t)

inline int32_t ADBezierPath_get_X_OFFSET(void);
#define ADBezierPath_X_OFFSET 1
J2OBJC_STATIC_FIELD_CONSTANT(ADBezierPath, X_OFFSET, int32_t)

inline int32_t ADBezierPath_get_Y_OFFSET(void);
#define ADBezierPath_Y_OFFSET 2
J2OBJC_STATIC_FIELD_CONSTANT(ADBezierPath, Y_OFFSET, int32_t)

inline int32_t ADBezierPath_get_NUM_COMPONENTS(void);
#define ADBezierPath_NUM_COMPONENTS 3
J2OBJC_STATIC_FIELD_CONSTANT(ADBezierPath, NUM_COMPONENTS, int32_t)

J2OBJC_INITIALIZED_DEFN(ADBezierPath)

JavaUtilRegexMatcher *ADBezierPath_matchPoint;

@implementation ADBezierPath

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADBezierPath_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)parsePathStringWithNSString:(NSString *)d {
  JreStrongAssignAndConsume(&self->path_, new_ADBezierListProducer_init());
  [self parsePathListWithNSString:d];
}

- (void)parsePathListWithNSString:(NSString *)list {
  JavaUtilRegexMatcher *matchPathCmd = [((JavaUtilRegexPattern *) nil_chk(JavaUtilRegexPattern_compileWithNSString_(@"([MmLlHhVvAaQqTtCcSsZz])|([-+]?((\\d*\\.\\d+)|(\\d+))([eE][-+]?\\d+)?)"))) matcherWithJavaLangCharSequence:list];
  JavaUtilLinkedList *tokens = create_JavaUtilLinkedList_init();
  while ([((JavaUtilRegexMatcher *) nil_chk(matchPathCmd)) find]) {
    [tokens addLastWithId:[matchPathCmd group]];
  }
  unichar curCmd = 'Z';
  while ([tokens size] != 0) {
    NSString *curToken = JreRetainedLocalValue([tokens removeFirst]);
    unichar initChar = [((NSString *) nil_chk(curToken)) charAtWithInt:0];
    if ((initChar >= 'A' && initChar <= 'Z') || (initChar >= 'a' && initChar <= 'z')) {
      curCmd = initChar;
    }
    else {
      [tokens addFirstWithId:curToken];
    }
    switch (curCmd) {
      case 'M':
      [((ADBezierListProducer *) nil_chk(path_)) movetoAbsWithFloat:ADBezierPath_nextFloatWithJavaUtilLinkedList_(tokens) withFloat:ADBezierPath_nextFloatWithJavaUtilLinkedList_(tokens)];
      curCmd = 'L';
      break;
      case 'm':
      [((ADBezierListProducer *) nil_chk(path_)) movetoRelWithFloat:ADBezierPath_nextFloatWithJavaUtilLinkedList_(tokens) withFloat:ADBezierPath_nextFloatWithJavaUtilLinkedList_(tokens)];
      curCmd = 'l';
      break;
      case 'L':
      [((ADBezierListProducer *) nil_chk(path_)) linetoAbsWithFloat:ADBezierPath_nextFloatWithJavaUtilLinkedList_(tokens) withFloat:ADBezierPath_nextFloatWithJavaUtilLinkedList_(tokens)];
      break;
      case 'l':
      [((ADBezierListProducer *) nil_chk(path_)) linetoRelWithFloat:ADBezierPath_nextFloatWithJavaUtilLinkedList_(tokens) withFloat:ADBezierPath_nextFloatWithJavaUtilLinkedList_(tokens)];
      break;
      case 'H':
      [((ADBezierListProducer *) nil_chk(path_)) linetoHorizontalAbsWithFloat:ADBezierPath_nextFloatWithJavaUtilLinkedList_(tokens)];
      break;
      case 'h':
      [((ADBezierListProducer *) nil_chk(path_)) linetoHorizontalRelWithFloat:ADBezierPath_nextFloatWithJavaUtilLinkedList_(tokens)];
      break;
      case 'V':
      [((ADBezierListProducer *) nil_chk(path_)) linetoVerticalAbsWithFloat:ADBezierPath_nextFloatWithJavaUtilLinkedList_(tokens)];
      break;
      case 'v':
      [((ADBezierListProducer *) nil_chk(path_)) linetoVerticalAbsWithFloat:ADBezierPath_nextFloatWithJavaUtilLinkedList_(tokens)];
      break;
      case 'A':
      case 'a':
      break;
      case 'Q':
      [((ADBezierListProducer *) nil_chk(path_)) curvetoQuadraticAbsWithFloat:ADBezierPath_nextFloatWithJavaUtilLinkedList_(tokens) withFloat:ADBezierPath_nextFloatWithJavaUtilLinkedList_(tokens) withFloat:ADBezierPath_nextFloatWithJavaUtilLinkedList_(tokens) withFloat:ADBezierPath_nextFloatWithJavaUtilLinkedList_(tokens)];
      break;
      case 'q':
      [((ADBezierListProducer *) nil_chk(path_)) curvetoQuadraticAbsWithFloat:ADBezierPath_nextFloatWithJavaUtilLinkedList_(tokens) withFloat:ADBezierPath_nextFloatWithJavaUtilLinkedList_(tokens) withFloat:ADBezierPath_nextFloatWithJavaUtilLinkedList_(tokens) withFloat:ADBezierPath_nextFloatWithJavaUtilLinkedList_(tokens)];
      break;
      case 'T':
      [((ADBezierListProducer *) nil_chk(path_)) curvetoQuadraticSmoothAbsWithFloat:ADBezierPath_nextFloatWithJavaUtilLinkedList_(tokens) withFloat:ADBezierPath_nextFloatWithJavaUtilLinkedList_(tokens)];
      break;
      case 't':
      [((ADBezierListProducer *) nil_chk(path_)) curvetoQuadraticSmoothRelWithFloat:ADBezierPath_nextFloatWithJavaUtilLinkedList_(tokens) withFloat:ADBezierPath_nextFloatWithJavaUtilLinkedList_(tokens)];
      break;
      case 'C':
      [((ADBezierListProducer *) nil_chk(path_)) curvetoCubicAbsWithFloat:ADBezierPath_nextFloatWithJavaUtilLinkedList_(tokens) withFloat:ADBezierPath_nextFloatWithJavaUtilLinkedList_(tokens) withFloat:ADBezierPath_nextFloatWithJavaUtilLinkedList_(tokens) withFloat:ADBezierPath_nextFloatWithJavaUtilLinkedList_(tokens) withFloat:ADBezierPath_nextFloatWithJavaUtilLinkedList_(tokens) withFloat:ADBezierPath_nextFloatWithJavaUtilLinkedList_(tokens)];
      break;
      case 'c':
      [((ADBezierListProducer *) nil_chk(path_)) curvetoCubicRelWithFloat:ADBezierPath_nextFloatWithJavaUtilLinkedList_(tokens) withFloat:ADBezierPath_nextFloatWithJavaUtilLinkedList_(tokens) withFloat:ADBezierPath_nextFloatWithJavaUtilLinkedList_(tokens) withFloat:ADBezierPath_nextFloatWithJavaUtilLinkedList_(tokens) withFloat:ADBezierPath_nextFloatWithJavaUtilLinkedList_(tokens) withFloat:ADBezierPath_nextFloatWithJavaUtilLinkedList_(tokens)];
      break;
      case 'S':
      [((ADBezierListProducer *) nil_chk(path_)) curvetoCubicSmoothAbsWithFloat:ADBezierPath_nextFloatWithJavaUtilLinkedList_(tokens) withFloat:ADBezierPath_nextFloatWithJavaUtilLinkedList_(tokens) withFloat:ADBezierPath_nextFloatWithJavaUtilLinkedList_(tokens) withFloat:ADBezierPath_nextFloatWithJavaUtilLinkedList_(tokens)];
      break;
      case 's':
      [((ADBezierListProducer *) nil_chk(path_)) curvetoCubicSmoothRelWithFloat:ADBezierPath_nextFloatWithJavaUtilLinkedList_(tokens) withFloat:ADBezierPath_nextFloatWithJavaUtilLinkedList_(tokens) withFloat:ADBezierPath_nextFloatWithJavaUtilLinkedList_(tokens) withFloat:ADBezierPath_nextFloatWithJavaUtilLinkedList_(tokens)];
      break;
      case 'Z':
      case 'z':
      [((ADBezierListProducer *) nil_chk(path_)) closePath];
      break;
      default:
      @throw create_JavaLangRuntimeException_initWithNSString_(@"Invalid path element");
    }
  }
}

+ (float)nextFloatWithJavaUtilLinkedList:(JavaUtilLinkedList *)l {
  return ADBezierPath_nextFloatWithJavaUtilLinkedList_(l);
}

- (ADPointF *)evalWithFloat:(float)interp {
  ADPointF *point = create_ADPointF_init();
  double curLength = ((ADBezierListProducer *) nil_chk(path_))->curveLength_ * interp;
  for (id<JavaUtilIterator> it = JreRetainedLocalValue([((JavaUtilArrayList *) nil_chk(path_->bezierSegs_)) iterator]); [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    ADBezier *bez = JreRetainedLocalValue([it next]);
    double bezLength = [((ADBezier *) nil_chk(bez)) getLength];
    if (curLength <= bezLength) {
      double param = curLength / bezLength;
      [bez evalWithDouble:param withADPointF:point];
      break;
    }
    JreMinusAssignDoubleD(&curLength, bezLength);
  }
  return point;
}

- (IOSFloatArray *)approximateWithFloat:(float)acceptableError {
  if (acceptableError < 0) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"acceptableError must be greater than or equal to 0");
  }
  float totalLength = 0;
  id<JavaUtilList> summedContourLengths = create_JavaUtilArrayList_init();
  [summedContourLengths addWithId:JavaLangFloat_valueOfWithFloat_(0.0f)];
  for (id<JavaUtilIterator> it = JreRetainedLocalValue([((JavaUtilArrayList *) nil_chk(((ADBezierListProducer *) nil_chk(path_))->bezierSegs_)) iterator]); [((id<JavaUtilIterator>) nil_chk(it)) hasNext]; ) {
    ADBezier *bez = JreRetainedLocalValue([it next]);
    double pathLength = [((ADBezier *) nil_chk(bez)) getLength];
    JrePlusAssignFloatD(&totalLength, pathLength);
    [summedContourLengths addWithId:JavaLangFloat_valueOfWithFloat_(totalLength)];
  }
  int32_t numPoints = JavaLangMath_minWithInt_withInt_(ADBezierPath_MAX_NUM_POINTS, JreFpToInt((totalLength / acceptableError)) + 1);
  IOSFloatArray *coords = [IOSFloatArray arrayWithLength:ADBezierPath_NUM_COMPONENTS * numPoints];
  ADPointF *position = nil;
  float step = totalLength / (numPoints - 1);
  float cumulativeDistance = 0;
  for (int32_t i = 0; i < numPoints; i++) {
    position = [self evalWithFloat:cumulativeDistance / totalLength];
    *IOSFloatArray_GetRef(coords, i * ADBezierPath_NUM_COMPONENTS + ADBezierPath_FRACTION_OFFSET) = cumulativeDistance / totalLength;
    *IOSFloatArray_GetRef(coords, i * ADBezierPath_NUM_COMPONENTS + ADBezierPath_X_OFFSET) = ((ADPointF *) nil_chk(position))->x_;
    *IOSFloatArray_GetRef(coords, i * ADBezierPath_NUM_COMPONENTS + ADBezierPath_Y_OFFSET) = position->y_;
    cumulativeDistance = JavaLangMath_minWithFloat_withFloat_(cumulativeDistance + step, totalLength);
  }
  *IOSFloatArray_GetRef(coords, (numPoints - 1) * ADBezierPath_NUM_COMPONENTS + ADBezierPath_FRACTION_OFFSET) = 1.0f;
  return coords;
}

- (void)dealloc {
  RELEASE_(path_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 2, 1, -1, -1, -1, -1 },
    { NULL, "F", 0xc, 3, 4, -1, 5, -1, -1 },
    { NULL, "LADPointF;", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "[F", 0x1, 8, 7, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(parsePathStringWithNSString:);
  methods[2].selector = @selector(parsePathListWithNSString:);
  methods[3].selector = @selector(nextFloatWithJavaUtilLinkedList:);
  methods[4].selector = @selector(evalWithFloat:);
  methods[5].selector = @selector(approximateWithFloat:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "matchPoint", "LJavaUtilRegexMatcher;", .constantValue.asLong = 0, 0x18, -1, 9, -1, -1 },
    { "path_", "LADBezierListProducer;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "MAX_NUM_POINTS", "I", .constantValue.asInt = ADBezierPath_MAX_NUM_POINTS, 0x1a, -1, -1, -1, -1 },
    { "FRACTION_OFFSET", "I", .constantValue.asInt = ADBezierPath_FRACTION_OFFSET, 0x1a, -1, -1, -1, -1 },
    { "X_OFFSET", "I", .constantValue.asInt = ADBezierPath_X_OFFSET, 0x1a, -1, -1, -1, -1 },
    { "Y_OFFSET", "I", .constantValue.asInt = ADBezierPath_Y_OFFSET, 0x1a, -1, -1, -1, -1 },
    { "NUM_COMPONENTS", "I", .constantValue.asInt = ADBezierPath_NUM_COMPONENTS, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "parsePathString", "LNSString;", "parsePathList", "nextFloat", "LJavaUtilLinkedList;", "(Ljava/util/LinkedList<Ljava/lang/String;>;)F", "eval", "F", "approximate", &ADBezierPath_matchPoint };
  static const J2ObjcClassInfo _ADBezierPath = { "BezierPath", "r.android.graphics", ptrTable, methods, fields, 7, 0x1, 6, 7, -1, -1, -1, -1, -1 };
  return &_ADBezierPath;
}

+ (void)initialize {
  if (self == [ADBezierPath class]) {
    JreStrongAssign(&ADBezierPath_matchPoint, [((JavaUtilRegexPattern *) nil_chk(JavaUtilRegexPattern_compileWithNSString_(@"\\s*(\\d+)[^\\d]+(\\d+)\\s*"))) matcherWithJavaLangCharSequence:@""]);
    J2OBJC_SET_INITIALIZED(ADBezierPath)
  }
}

@end

void ADBezierPath_init(ADBezierPath *self) {
  NSObject_init(self);
}

ADBezierPath *new_ADBezierPath_init() {
  J2OBJC_NEW_IMPL(ADBezierPath, init)
}

ADBezierPath *create_ADBezierPath_init() {
  J2OBJC_CREATE_IMPL(ADBezierPath, init)
}

float ADBezierPath_nextFloatWithJavaUtilLinkedList_(JavaUtilLinkedList *l) {
  ADBezierPath_initialize();
  NSString *s = JreRetainedLocalValue([((JavaUtilLinkedList *) nil_chk(l)) removeFirst]);
  return JavaLangFloat_parseFloatWithNSString_(s);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADBezierPath)

J2OBJC_NAME_MAPPING(ADBezierPath, "r.android.graphics", "AD")
