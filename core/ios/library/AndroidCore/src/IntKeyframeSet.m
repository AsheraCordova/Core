//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroid\src\main\java\r\android\animation\IntKeyframeSet.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IntKeyframeSet.h"
#include "J2ObjC_source.h"
#include "Keyframe.h"
#include "KeyframeSet.h"
#include "TimeInterpolator.h"
#include "TypeEvaluator.h"
#include "java/lang/Integer.h"
#include "java/util/List.h"


@implementation ADIntKeyframeSet

- (instancetype)initPackagePrivateWithADKeyframe_IntKeyframeArray:(IOSObjectArray *)keyframes {
  ADIntKeyframeSet_initPackagePrivateWithADKeyframe_IntKeyframeArray_(self, keyframes);
  return self;
}

- (id)getValueWithFloat:(jfloat)fraction {
  return JavaLangInteger_valueOfWithInt_([self getIntValueWithFloat:fraction]);
}

- (ADIntKeyframeSet *)java_clone {
  id<JavaUtilList> keyframes = JreRetainedLocalValue(mKeyframes_);
  jint numKeyframes = [((id<JavaUtilList>) nil_chk(mKeyframes_)) size];
  IOSObjectArray *newIKeyframes = [IOSObjectArray arrayWithLength:numKeyframes type:ADKeyframe_IntKeyframe_class_()];
  for (jint i = 0; i < numKeyframes; ++i) {
    IOSObjectArray_Set(newIKeyframes, i, (ADKeyframe_IntKeyframe *) cast_chk([((ADKeyframe *) nil_chk([((id<JavaUtilList>) nil_chk(keyframes)) getWithInt:i])) java_clone], [ADKeyframe_IntKeyframe class]));
  }
  ADIntKeyframeSet *newSet = create_ADIntKeyframeSet_initPackagePrivateWithADKeyframe_IntKeyframeArray_(newIKeyframes);
  return newSet;
}

- (jint)getIntValueWithFloat:(jfloat)fraction {
  if (fraction <= 0.0f) {
    ADKeyframe_IntKeyframe *prevKeyframe = (ADKeyframe_IntKeyframe *) cast_chk([((id<JavaUtilList>) nil_chk(mKeyframes_)) getWithInt:0], [ADKeyframe_IntKeyframe class]);
    ADKeyframe_IntKeyframe *nextKeyframe = (ADKeyframe_IntKeyframe *) cast_chk([((id<JavaUtilList>) nil_chk(mKeyframes_)) getWithInt:1], [ADKeyframe_IntKeyframe class]);
    jint prevValue = [((ADKeyframe_IntKeyframe *) nil_chk(prevKeyframe)) getIntValue];
    jint nextValue = [((ADKeyframe_IntKeyframe *) nil_chk(nextKeyframe)) getIntValue];
    jfloat prevFraction = [prevKeyframe getFraction];
    jfloat nextFraction = [nextKeyframe getFraction];
    id<ADTimeInterpolator> interpolator = [nextKeyframe getInterpolator];
    if (interpolator != nil) {
      fraction = [interpolator getInterpolationWithFloat:fraction];
    }
    jfloat intervalFraction = (fraction - prevFraction) / (nextFraction - prevFraction);
    return mEvaluator_ == nil ? prevValue + JreFpToInt((intervalFraction * (nextValue - prevValue))) : [((NSNumber *) nil_chk(((NSNumber *) cast_chk([mEvaluator_ evaluateWithFloat:intervalFraction withId:JavaLangInteger_valueOfWithInt_(prevValue) withId:JavaLangInteger_valueOfWithInt_(nextValue)], [NSNumber class])))) intValue];
  }
  else if (fraction >= 1.0f) {
    ADKeyframe_IntKeyframe *prevKeyframe = (ADKeyframe_IntKeyframe *) cast_chk([((id<JavaUtilList>) nil_chk(mKeyframes_)) getWithInt:mNumKeyframes_ - 2], [ADKeyframe_IntKeyframe class]);
    ADKeyframe_IntKeyframe *nextKeyframe = (ADKeyframe_IntKeyframe *) cast_chk([((id<JavaUtilList>) nil_chk(mKeyframes_)) getWithInt:mNumKeyframes_ - 1], [ADKeyframe_IntKeyframe class]);
    jint prevValue = [((ADKeyframe_IntKeyframe *) nil_chk(prevKeyframe)) getIntValue];
    jint nextValue = [((ADKeyframe_IntKeyframe *) nil_chk(nextKeyframe)) getIntValue];
    jfloat prevFraction = [prevKeyframe getFraction];
    jfloat nextFraction = [nextKeyframe getFraction];
    id<ADTimeInterpolator> interpolator = [nextKeyframe getInterpolator];
    if (interpolator != nil) {
      fraction = [interpolator getInterpolationWithFloat:fraction];
    }
    jfloat intervalFraction = (fraction - prevFraction) / (nextFraction - prevFraction);
    return mEvaluator_ == nil ? prevValue + JreFpToInt((intervalFraction * (nextValue - prevValue))) : [((NSNumber *) nil_chk(((NSNumber *) cast_chk([mEvaluator_ evaluateWithFloat:intervalFraction withId:JavaLangInteger_valueOfWithInt_(prevValue) withId:JavaLangInteger_valueOfWithInt_(nextValue)], [NSNumber class])))) intValue];
  }
  ADKeyframe_IntKeyframe *prevKeyframe = (ADKeyframe_IntKeyframe *) cast_chk([((id<JavaUtilList>) nil_chk(mKeyframes_)) getWithInt:0], [ADKeyframe_IntKeyframe class]);
  for (jint i = 1; i < mNumKeyframes_; ++i) {
    ADKeyframe_IntKeyframe *nextKeyframe = (ADKeyframe_IntKeyframe *) cast_chk([((id<JavaUtilList>) nil_chk(mKeyframes_)) getWithInt:i], [ADKeyframe_IntKeyframe class]);
    if (fraction < [((ADKeyframe_IntKeyframe *) nil_chk(nextKeyframe)) getFraction]) {
      id<ADTimeInterpolator> interpolator = [nextKeyframe getInterpolator];
      jfloat intervalFraction = (fraction - [((ADKeyframe_IntKeyframe *) nil_chk(prevKeyframe)) getFraction]) / ([nextKeyframe getFraction] - [prevKeyframe getFraction]);
      jint prevValue = [prevKeyframe getIntValue];
      jint nextValue = [nextKeyframe getIntValue];
      if (interpolator != nil) {
        intervalFraction = [interpolator getInterpolationWithFloat:intervalFraction];
      }
      return mEvaluator_ == nil ? prevValue + JreFpToInt((intervalFraction * (nextValue - prevValue))) : [((NSNumber *) nil_chk(((NSNumber *) cast_chk([mEvaluator_ evaluateWithFloat:intervalFraction withId:JavaLangInteger_valueOfWithInt_(prevValue) withId:JavaLangInteger_valueOfWithInt_(nextValue)], [NSNumber class])))) intValue];
    }
    prevKeyframe = nextKeyframe;
  }
  return [((NSNumber *) nil_chk(((NSNumber *) cast_chk([((ADKeyframe *) nil_chk([((id<JavaUtilList>) nil_chk(mKeyframes_)) getWithInt:mNumKeyframes_ - 1])) getValue], [NSNumber class])))) intValue];
}

- (IOSClass *)getType {
  return JavaLangInteger_class_();
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x81, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LADIntKeyframeSet;", 0x1, 3, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 4, 2, -1, -1, -1, -1 },
    { NULL, "LIOSClass;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initPackagePrivateWithADKeyframe_IntKeyframeArray:);
  methods[1].selector = @selector(getValueWithFloat:);
  methods[2].selector = @selector(java_clone);
  methods[3].selector = @selector(getIntValueWithFloat:);
  methods[4].selector = @selector(getType);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "[LADKeyframe_IntKeyframe;", "getValue", "F", "clone", "getIntValue" };
  static const J2ObjcClassInfo _ADIntKeyframeSet = { "IntKeyframeSet", "r.android.animation", ptrTable, methods, NULL, 7, 0x0, 5, 0, -1, -1, -1, -1, -1 };
  return &_ADIntKeyframeSet;
}

@end

void ADIntKeyframeSet_initPackagePrivateWithADKeyframe_IntKeyframeArray_(ADIntKeyframeSet *self, IOSObjectArray *keyframes) {
  ADKeyframeSet_initWithADKeyframeArray_(self, keyframes);
}

ADIntKeyframeSet *new_ADIntKeyframeSet_initPackagePrivateWithADKeyframe_IntKeyframeArray_(IOSObjectArray *keyframes) {
  J2OBJC_NEW_IMPL(ADIntKeyframeSet, initPackagePrivateWithADKeyframe_IntKeyframeArray_, keyframes)
}

ADIntKeyframeSet *create_ADIntKeyframeSet_initPackagePrivateWithADKeyframe_IntKeyframeArray_(IOSObjectArray *keyframes) {
  J2OBJC_CREATE_IMPL(ADIntKeyframeSet, initPackagePrivateWithADKeyframe_IntKeyframeArray_, keyframes)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADIntKeyframeSet)
