//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroid\src\main\java\r\libcore\util\EmptyArray.java
//

#define J2OBJC_IMPORTED_BY_JAVA_IMPLEMENTATION 1




#include "EmptyArray.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Integer.h"




#pragma clang diagnostic error "-Wreturn-type"
#pragma clang diagnostic ignored "-Wswitch"


J2OBJC_INITIALIZED_DEFN(ADEmptyArray)

IOSIntArray *ADEmptyArray_INT;
IOSLongArray *ADEmptyArray_LONG;
IOSObjectArray *ADEmptyArray_STRING;

@implementation ADEmptyArray

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADEmptyArray_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "INT", "[I", .constantValue.asLong = 0, 0x19, -1, 0, -1, -1 },
    { "LONG", "[J", .constantValue.asLong = 0, 0x19, -1, 1, -1, -1 },
    { "STRING", "[LNSString;", .constantValue.asLong = 0, 0x9, -1, 2, -1, -1 },
  };
  static const void *ptrTable[] = { &ADEmptyArray_INT, &ADEmptyArray_LONG, &ADEmptyArray_STRING };
  static const J2ObjcClassInfo _ADEmptyArray = { "EmptyArray", "r.libcore.util", ptrTable, methods, fields, 7, 0x1, 1, 3, -1, -1, -1, -1, -1 };
  return &_ADEmptyArray;
}

+ (void)initialize {
  if (self == [ADEmptyArray class]) {
    JreStrongAssignAndConsume(&ADEmptyArray_INT, [IOSIntArray newArrayWithLength:0]);
    JreStrongAssignAndConsume(&ADEmptyArray_LONG, [IOSLongArray newArrayWithLength:0]);
    JreStrongAssignAndConsume(&ADEmptyArray_STRING, [IOSObjectArray newArrayWithLength:0 type:NSString_class_()]);
    J2OBJC_SET_INITIALIZED(ADEmptyArray)
  }
}

@end

void ADEmptyArray_init(ADEmptyArray *self) {
  NSObject_init(self);
}

ADEmptyArray *new_ADEmptyArray_init() {
  J2OBJC_NEW_IMPL(ADEmptyArray, init)
}

ADEmptyArray *create_ADEmptyArray_init() {
  J2OBJC_CREATE_IMPL(ADEmptyArray, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADEmptyArray)

J2OBJC_NAME_MAPPING(ADEmptyArray, "r.libcore.util", "AD")
