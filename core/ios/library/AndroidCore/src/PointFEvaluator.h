//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroid\src\main\java\r\android\animation\PointFEvaluator.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_PointFEvaluator")
#ifdef RESTRICT_PointFEvaluator
#define INCLUDE_ALL_PointFEvaluator 0
#else
#define INCLUDE_ALL_PointFEvaluator 1
#endif
#undef RESTRICT_PointFEvaluator

#if !defined (ADPointFEvaluator_) && (INCLUDE_ALL_PointFEvaluator || defined(INCLUDE_ADPointFEvaluator))
#define ADPointFEvaluator_

#define RESTRICT_TypeEvaluator 1
#define INCLUDE_ADTypeEvaluator 1
#include "TypeEvaluator.h"

@class ADPointF;

/*!
 @brief This evaluator can be used to perform type interpolation between <code>PointF</code> values.
 */
@interface ADPointFEvaluator : NSObject < ADTypeEvaluator >

#pragma mark Public

/*!
 @brief Construct a PointFEvaluator that returns a new PointF on every evaluate call.
 To avoid creating an object for each evaluate call, 
 <code>PointFEvaluator.PointFEvaluator(r.android.graphics.PointF)</code> should be used
  whenever possible.
 */
- (instancetype)init;

/*!
 @brief Constructs a PointFEvaluator that modifies and returns <code>reuse</code>
  in <code>evaluate(float, r.android.graphics.PointF, r.android.graphics.PointF)</code> calls.
 The value returned from 
 <code>evaluate(float, r.android.graphics.PointF, r.android.graphics.PointF)</code> should
  not be cached because it will change over time as the object is reused on each
  call.
 @param reuse A PointF to be modified and returned by evaluate.
 */
- (instancetype)initWithADPointF:(ADPointF *)reuse;

/*!
 @brief This function returns the result of linearly interpolating the start and
  end PointF values, with <code>fraction</code> representing the proportion
  between the start and end values.The calculation is a simple parametric
  calculation on each of the separate components in the PointF objects
  (x, y).
 <p>If <code>PointFEvaluator(r.android.graphics.PointF)</code> was used to construct
  this PointFEvaluator, the object returned will be the <code>reuse</code>
  passed into the constructor.</p>
 @param fraction The fraction from the starting to the ending values
 @param startValue The start PointF
 @param endValue The end PointF
 @return A linear interpolation between the start and end values, given the
          <code>fraction</code> parameter.
 */
- (ADPointF *)evaluateWithFloat:(jfloat)fraction
                         withId:(ADPointF *)startValue
                         withId:(ADPointF *)endValue;

@end

J2OBJC_EMPTY_STATIC_INIT(ADPointFEvaluator)

FOUNDATION_EXPORT void ADPointFEvaluator_init(ADPointFEvaluator *self);

FOUNDATION_EXPORT ADPointFEvaluator *new_ADPointFEvaluator_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ADPointFEvaluator *create_ADPointFEvaluator_init(void);

FOUNDATION_EXPORT void ADPointFEvaluator_initWithADPointF_(ADPointFEvaluator *self, ADPointF *reuse);

FOUNDATION_EXPORT ADPointFEvaluator *new_ADPointFEvaluator_initWithADPointF_(ADPointF *reuse) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ADPointFEvaluator *create_ADPointFEvaluator_initWithADPointF_(ADPointF *reuse);

J2OBJC_TYPE_LITERAL_HEADER(ADPointFEvaluator)

@compatibility_alias RAndroidAnimationPointFEvaluator ADPointFEvaluator;

#endif

#pragma pop_macro("INCLUDE_ALL_PointFEvaluator")
