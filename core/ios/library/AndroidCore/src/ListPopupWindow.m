//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroid\src\main\java\r\android\widget\ListPopupWindow.java
//

#include "ApplicationInfo.h"
#include "Build.h"
#include "Context.h"
#include "Drawable.h"
#include "Gravity.h"
#include "IBinder.h"
#include "J2ObjC_source.h"
#include "KeyEvent.h"
#include "LinearLayout.h"
#include "ListAdapter.h"
#include "ListPopupWindow.h"
#include "Log.h"
#include "PluginInvoker.h"
#include "PopupWindow.h"
#include "Rect.h"
#include "RelativeLayout.h"
#include "TextView.h"
#include "View.h"
#include "ViewGroup.h"
#include "ViewParent.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Runnable.h"

@protocol JavaLangRunnable;


@interface ADListPopupWindow () {
 @public
  ADContext *mContext_;
  id<ADListAdapter> mAdapter_;
  jint mDropDownHeight_;
  jint mDropDownWidth_;
  jint mDropDownHorizontalOffset_;
  jint mDropDownVerticalOffset_;
  jboolean mDropDownVerticalOffsetSet_;
  jboolean mIsAnimatedFromAnchor_;
  jboolean mOverlapAnchor_;
  jboolean mOverlapAnchorSet_;
  jint mDropDownGravity_;
  jboolean mDropDownAlwaysVisible_;
  jboolean mForceIgnoreOutsideTouch_;
  ADView *mPromptView_;
  jint mPromptPosition_;
  ADView *mDropDownAnchorView_;
  id<JavaLangRunnable> mShowDropDownRunnable_;
  ADRect *mTempRect_;
  jboolean mModal_;
  ADViewGroup *mDropDownList_;
  ADView *decorView_;
  ADRelativeLayout_LayoutParams *params_;
}

- (void)removePromptView;

- (jint)buildDropDown;

- (jboolean)isInputMethodNotNeeded;

- (ADViewGroup *)createDropDownListViewWithADContext:(ADContext *)context
                                         withBoolean:(jboolean)b;

@end

J2OBJC_FIELD_SETTER(ADListPopupWindow, mContext_, ADContext *)
J2OBJC_FIELD_SETTER(ADListPopupWindow, mAdapter_, id<ADListAdapter>)
J2OBJC_FIELD_SETTER(ADListPopupWindow, mPromptView_, ADView *)
J2OBJC_FIELD_SETTER(ADListPopupWindow, mDropDownAnchorView_, ADView *)
J2OBJC_FIELD_SETTER(ADListPopupWindow, mShowDropDownRunnable_, id<JavaLangRunnable>)
J2OBJC_FIELD_SETTER(ADListPopupWindow, mTempRect_, ADRect *)
J2OBJC_FIELD_SETTER(ADListPopupWindow, mDropDownList_, ADViewGroup *)
J2OBJC_FIELD_SETTER(ADListPopupWindow, decorView_, ADView *)
J2OBJC_FIELD_SETTER(ADListPopupWindow, params_, ADRelativeLayout_LayoutParams *)

inline NSString *ADListPopupWindow_get_TAG(void);
static NSString *ADListPopupWindow_TAG = @"ListPopupWindow";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADListPopupWindow, TAG, NSString *)

inline jboolean ADListPopupWindow_get_DEBUG(void);
#define ADListPopupWindow_DEBUG false
J2OBJC_STATIC_FIELD_CONSTANT(ADListPopupWindow, DEBUG, jboolean)

inline jint ADListPopupWindow_get_EXPAND_LIST_TIMEOUT(void);
#define ADListPopupWindow_EXPAND_LIST_TIMEOUT 250
J2OBJC_STATIC_FIELD_CONSTANT(ADListPopupWindow, EXPAND_LIST_TIMEOUT, jint)

__attribute__((unused)) static void ADListPopupWindow_removePromptView(ADListPopupWindow *self);

__attribute__((unused)) static jint ADListPopupWindow_buildDropDown(ADListPopupWindow *self);

__attribute__((unused)) static jboolean ADListPopupWindow_isInputMethodNotNeeded(ADListPopupWindow *self);

__attribute__((unused)) static ADViewGroup *ADListPopupWindow_createDropDownListViewWithADContext_withBoolean_(ADListPopupWindow *self, ADContext *context, jboolean b);

@interface ADListPopupWindow_1 : NSObject < JavaLangRunnable > {
 @public
  ADListPopupWindow *this$0_;
}

- (instancetype)initWithADListPopupWindow:(ADListPopupWindow *)outer$;

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(ADListPopupWindow_1)

__attribute__((unused)) static void ADListPopupWindow_1_initWithADListPopupWindow_(ADListPopupWindow_1 *self, ADListPopupWindow *outer$);

__attribute__((unused)) static ADListPopupWindow_1 *new_ADListPopupWindow_1_initWithADListPopupWindow_(ADListPopupWindow *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static ADListPopupWindow_1 *create_ADListPopupWindow_1_initWithADListPopupWindow_(ADListPopupWindow *outer$);

@implementation ADListPopupWindow

- (jboolean)isDropDownAlwaysVisible {
  return mDropDownAlwaysVisible_;
}

- (ADView *)getAnchorView {
  return mDropDownAnchorView_;
}

- (void)setAnchorViewWithADView:(ADView *)anchor {
  JreStrongAssign(&mDropDownAnchorView_, anchor);
}

- (jint)getHorizontalOffset {
  return mDropDownHorizontalOffset_;
}

- (void)setHorizontalOffsetWithInt:(jint)offset {
  mDropDownHorizontalOffset_ = offset;
}

- (jint)getVerticalOffset {
  if (!mDropDownVerticalOffsetSet_) {
    return 0;
  }
  return mDropDownVerticalOffset_;
}

- (void)setVerticalOffsetWithInt:(jint)offset {
  mDropDownVerticalOffset_ = offset;
  mDropDownVerticalOffsetSet_ = true;
}

- (jint)getWidth {
  return mDropDownWidth_;
}

- (void)setWidthWithInt:(jint)width {
  mDropDownWidth_ = width;
}

- (jint)getHeight {
  return mDropDownHeight_;
}

- (void)setHeightWithInt:(jint)height {
  if (height < 0 && ADViewGroup_LayoutParams_WRAP_CONTENT != height && ADViewGroup_LayoutParams_MATCH_PARENT != height) {
    if (((ADApplicationInfo *) nil_chk([((ADContext *) nil_chk(mContext_)) getApplicationInfo]))->targetSdkVersion_ < ADBuild_VERSION_CODES_O) {
      ADLog_eWithNSString_withNSString_(ADListPopupWindow_TAG, JreStrcat("$I$", @"Negative value ", height, @" passed to ListPopupWindow#setHeight produces undefined results"));
    }
    else {
      @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Invalid height. Must be a positive value, MATCH_PARENT, or WRAP_CONTENT.");
    }
  }
  mDropDownHeight_ = height;
}

- (void)show {
  jint height = ADListPopupWindow_buildDropDown(self);
  jboolean noInputMethod = ADListPopupWindow_isInputMethodNotNeeded(self);
  if ([((ADPopupWindow *) nil_chk(mPopup_)) isShowing]) {
    if (![((ADView *) nil_chk([self getAnchorView])) isAttachedToWindow]) {
      return;
    }
    jint widthSpec;
    if (mDropDownWidth_ == ADViewGroup_LayoutParams_MATCH_PARENT) {
      widthSpec = -1;
    }
    else if (mDropDownWidth_ == ADViewGroup_LayoutParams_WRAP_CONTENT) {
      widthSpec = [((ADView *) nil_chk([self getAnchorView])) getWidth];
    }
    else {
      widthSpec = mDropDownWidth_;
    }
    jint heightSpec;
    if (mDropDownHeight_ == ADViewGroup_LayoutParams_MATCH_PARENT) {
      heightSpec = noInputMethod ? height : ADViewGroup_LayoutParams_MATCH_PARENT;
      if (noInputMethod) {
        [((ADPopupWindow *) nil_chk(mPopup_)) setWidthWithInt:mDropDownWidth_ == ADViewGroup_LayoutParams_MATCH_PARENT ? ADViewGroup_LayoutParams_MATCH_PARENT : 0];
        [((ADPopupWindow *) nil_chk(mPopup_)) setHeightWithInt:0];
      }
      else {
        [((ADPopupWindow *) nil_chk(mPopup_)) setWidthWithInt:mDropDownWidth_ == ADViewGroup_LayoutParams_MATCH_PARENT ? ADViewGroup_LayoutParams_MATCH_PARENT : 0];
        [((ADPopupWindow *) nil_chk(mPopup_)) setHeightWithInt:ADViewGroup_LayoutParams_MATCH_PARENT];
      }
    }
    else if (mDropDownHeight_ == ADViewGroup_LayoutParams_WRAP_CONTENT) {
      heightSpec = height;
    }
    else {
      heightSpec = mDropDownHeight_;
    }
    [((ADPopupWindow *) nil_chk(mPopup_)) updateWithADView:[self getAnchorView] withInt:mDropDownHorizontalOffset_ withInt:mDropDownVerticalOffset_ withInt:(widthSpec < 0) ? -1 : widthSpec withInt:(heightSpec < 0) ? -1 : heightSpec];
  }
  else {
    jint widthSpec;
    if (mDropDownWidth_ == ADViewGroup_LayoutParams_MATCH_PARENT) {
      widthSpec = ADViewGroup_LayoutParams_MATCH_PARENT;
    }
    else {
      if (mDropDownWidth_ == ADViewGroup_LayoutParams_WRAP_CONTENT) {
        widthSpec = [((ADView *) nil_chk([self getAnchorView])) getWidth];
      }
      else {
        widthSpec = mDropDownWidth_;
      }
    }
    jint heightSpec;
    if (mDropDownHeight_ == ADViewGroup_LayoutParams_MATCH_PARENT) {
      heightSpec = ADViewGroup_LayoutParams_MATCH_PARENT;
    }
    else {
      if (mDropDownHeight_ == ADViewGroup_LayoutParams_WRAP_CONTENT) {
        heightSpec = height;
      }
      else {
        heightSpec = mDropDownHeight_;
      }
    }
    [((ADPopupWindow *) nil_chk(mPopup_)) setWidthWithInt:widthSpec];
    [((ADPopupWindow *) nil_chk(mPopup_)) setHeightWithInt:heightSpec];
    if (mOverlapAnchorSet_) {
      [((ADPopupWindow *) nil_chk(mPopup_)) setOverlapAnchorWithBoolean:mOverlapAnchor_];
    }
    [((ADPopupWindow *) nil_chk(mPopup_)) showAsDropDownWithADView:decorView_ withADView:[self getAnchorView] withADRelativeLayout_LayoutParams:params_ withInt:mDropDownHorizontalOffset_ withInt:mDropDownVerticalOffset_ withInt:mDropDownGravity_];
    if (!mModal_) {
      [self clearListSelection];
    }
    if (!mModal_) {
    }
  }
}

- (void)dismiss {
  [((ADPopupWindow *) nil_chk(mPopup_)) dismiss];
  ADListPopupWindow_removePromptView(self);
  [((ADPopupWindow *) nil_chk(mPopup_)) setContentViewWithADView:nil];
  JreStrongAssign(&mDropDownList_, nil);
}

- (void)setOnDismissListenerWithADPopupWindow_OnDismissListener:(id<ADPopupWindow_OnDismissListener>)listener {
  [((ADPopupWindow *) nil_chk(mPopup_)) setOnDismissListenerWithADPopupWindow_OnDismissListener:listener];
}

- (void)removePromptView {
  ADListPopupWindow_removePromptView(self);
}

- (void)clearListSelection {
  ADViewGroup *list = mDropDownList_;
  if (list != nil) {
    [list requestLayout];
  }
}

- (jboolean)isShowing {
  return [((ADPopupWindow *) nil_chk(mPopup_)) isShowing];
}

- (ADViewGroup *)getListView {
  return mDropDownList_;
}

- (jboolean)onKeyDownWithInt:(jint)keyCode
              withADKeyEvent:(ADKeyEvent *)event {
  if ([self isShowing]) {
    if (keyCode != ADKeyEvent_KEYCODE_SPACE) {
      jint curIndex = 0;
      jboolean consumed;
      jboolean below = ![((ADPopupWindow *) nil_chk(mPopup_)) isAboveAnchor];
      id<ADListAdapter> adapter = mAdapter_;
      jboolean allEnabled;
      jint firstItem = JavaLangInteger_MAX_VALUE;
      jint lastItem = JavaLangInteger_MIN_VALUE;
      if (adapter != nil) {
        allEnabled = [adapter areAllItemsEnabled];
        firstItem = allEnabled ? 0 : 0;
        lastItem = allEnabled ? [adapter getCount] - 1 : [adapter getCount] - 1;
      }
      if ((below && keyCode == ADKeyEvent_KEYCODE_DPAD_UP && curIndex <= firstItem) || (!below && keyCode == ADKeyEvent_KEYCODE_DPAD_DOWN && curIndex >= lastItem)) {
        [self clearListSelection];
        [self show];
        return true;
      }
      else {
      }
      consumed = false;
      if (consumed) {
        [((ADViewGroup *) nil_chk(mDropDownList_)) requestFocusFromTouch];
        [self show];
        switch (keyCode) {
          case ADKeyEvent_KEYCODE_ENTER:
          case ADKeyEvent_KEYCODE_DPAD_CENTER:
          case ADKeyEvent_KEYCODE_DPAD_DOWN:
          case ADKeyEvent_KEYCODE_DPAD_UP:
          case ADKeyEvent_KEYCODE_NUMPAD_ENTER:
          return true;
        }
      }
      else {
        if (below && keyCode == ADKeyEvent_KEYCODE_DPAD_DOWN) {
          if (curIndex == lastItem) {
            return true;
          }
        }
        else if (!below && keyCode == ADKeyEvent_KEYCODE_DPAD_UP && curIndex == firstItem) {
          return true;
        }
      }
    }
  }
  return false;
}

- (jint)buildDropDown {
  return ADListPopupWindow_buildDropDown(self);
}

- (jboolean)isInputMethodNotNeeded {
  return ADListPopupWindow_isInputMethodNotNeeded(self);
}

- (ADViewGroup *)createDropDownListViewWithADContext:(ADContext *)context
                                         withBoolean:(jboolean)b {
  return ADListPopupWindow_createDropDownListViewWithADContext_withBoolean_(self, context, b);
}

- (instancetype)initWithADView:(ADView *)decorView
                    withADView:(ADView *)contentView
withADRelativeLayout_LayoutParams:(ADRelativeLayout_LayoutParams *)params {
  ADListPopupWindow_initWithADView_withADView_withADRelativeLayout_LayoutParams_(self, decorView, contentView, params);
  return self;
}

- (void)setPromptViewWithADTextView:(ADTextView *)promptView {
  JreStrongAssign(&mPromptView_, promptView);
}

- (void)measureHintViewWithADView:(ADView *)view {
  jint widthSize;
  jint widthMode;
  if (mDropDownWidth_ >= 0) {
    widthMode = ADView_MeasureSpec_AT_MOST;
    widthSize = mDropDownWidth_;
  }
  else {
    widthMode = ADView_MeasureSpec_UNSPECIFIED;
    widthSize = 0;
  }
  jint widthSpec = ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_(widthSize, widthMode);
  jint heightSpec = ADView_MeasureSpec_UNSPECIFIED;
  [((ADView *) nil_chk(view)) measureWithInt:widthSpec withInt:heightSpec];
}

- (void)dealloc {
  RELEASE_(mContext_);
  RELEASE_(mAdapter_);
  RELEASE_(mPromptView_);
  RELEASE_(mDropDownAnchorView_);
  RELEASE_(mShowDropDownRunnable_);
  RELEASE_(mTempRect_);
  RELEASE_(mPopup_);
  RELEASE_(mDropDownList_);
  RELEASE_(decorView_);
  RELEASE_(params_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADView;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADViewGroup;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADViewGroup;", 0x2, 11, 12, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(isDropDownAlwaysVisible);
  methods[1].selector = @selector(getAnchorView);
  methods[2].selector = @selector(setAnchorViewWithADView:);
  methods[3].selector = @selector(getHorizontalOffset);
  methods[4].selector = @selector(setHorizontalOffsetWithInt:);
  methods[5].selector = @selector(getVerticalOffset);
  methods[6].selector = @selector(setVerticalOffsetWithInt:);
  methods[7].selector = @selector(getWidth);
  methods[8].selector = @selector(setWidthWithInt:);
  methods[9].selector = @selector(getHeight);
  methods[10].selector = @selector(setHeightWithInt:);
  methods[11].selector = @selector(show);
  methods[12].selector = @selector(dismiss);
  methods[13].selector = @selector(setOnDismissListenerWithADPopupWindow_OnDismissListener:);
  methods[14].selector = @selector(removePromptView);
  methods[15].selector = @selector(clearListSelection);
  methods[16].selector = @selector(isShowing);
  methods[17].selector = @selector(getListView);
  methods[18].selector = @selector(onKeyDownWithInt:withADKeyEvent:);
  methods[19].selector = @selector(buildDropDown);
  methods[20].selector = @selector(isInputMethodNotNeeded);
  methods[21].selector = @selector(createDropDownListViewWithADContext:withBoolean:);
  methods[22].selector = @selector(initWithADView:withADView:withADRelativeLayout_LayoutParams:);
  methods[23].selector = @selector(setPromptViewWithADTextView:);
  methods[24].selector = @selector(measureHintViewWithADView:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "TAG", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 17, -1, -1 },
    { "DEBUG", "Z", .constantValue.asBOOL = ADListPopupWindow_DEBUG, 0x1a, -1, -1, -1, -1 },
    { "EXPAND_LIST_TIMEOUT", "I", .constantValue.asInt = ADListPopupWindow_EXPAND_LIST_TIMEOUT, 0x1a, -1, -1, -1, -1 },
    { "mContext_", "LADContext;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mAdapter_", "LADListAdapter;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mDropDownHeight_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mDropDownWidth_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mDropDownHorizontalOffset_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mDropDownVerticalOffset_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mDropDownVerticalOffsetSet_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mIsAnimatedFromAnchor_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mOverlapAnchor_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mOverlapAnchorSet_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mDropDownGravity_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mDropDownAlwaysVisible_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mForceIgnoreOutsideTouch_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mListItemExpandMaximum_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mPromptView_", "LADView;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mPromptPosition_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mDropDownAnchorView_", "LADView;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mShowDropDownRunnable_", "LJavaLangRunnable;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mTempRect_", "LADRect;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mModal_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mPopup_", "LADPopupWindow;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "POSITION_PROMPT_ABOVE", "I", .constantValue.asInt = ADListPopupWindow_POSITION_PROMPT_ABOVE, 0x19, -1, -1, -1, -1 },
    { "POSITION_PROMPT_BELOW", "I", .constantValue.asInt = ADListPopupWindow_POSITION_PROMPT_BELOW, 0x19, -1, -1, -1, -1 },
    { "MATCH_PARENT", "I", .constantValue.asInt = ADListPopupWindow_MATCH_PARENT, 0x19, -1, -1, -1, -1 },
    { "WRAP_CONTENT", "I", .constantValue.asInt = ADListPopupWindow_WRAP_CONTENT, 0x19, -1, -1, -1, -1 },
    { "INPUT_METHOD_FROM_FOCUSABLE", "I", .constantValue.asInt = ADListPopupWindow_INPUT_METHOD_FROM_FOCUSABLE, 0x19, -1, -1, -1, -1 },
    { "INPUT_METHOD_NEEDED", "I", .constantValue.asInt = ADListPopupWindow_INPUT_METHOD_NEEDED, 0x19, -1, -1, -1, -1 },
    { "INPUT_METHOD_NOT_NEEDED", "I", .constantValue.asInt = ADListPopupWindow_INPUT_METHOD_NOT_NEEDED, 0x19, -1, -1, -1, -1 },
    { "mDropDownList_", "LADViewGroup;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "decorView_", "LADView;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "params_", "LADRelativeLayout_LayoutParams;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setAnchorView", "LADView;", "setHorizontalOffset", "I", "setVerticalOffset", "setWidth", "setHeight", "setOnDismissListener", "LADPopupWindow_OnDismissListener;", "onKeyDown", "ILADKeyEvent;", "createDropDownListView", "LADContext;Z", "LADView;LADView;LADRelativeLayout_LayoutParams;", "setPromptView", "LADTextView;", "measureHintView", &ADListPopupWindow_TAG };
  static const J2ObjcClassInfo _ADListPopupWindow = { "ListPopupWindow", "r.android.widget", ptrTable, methods, fields, 7, 0x1, 25, 34, -1, -1, -1, -1, -1 };
  return &_ADListPopupWindow;
}

@end

void ADListPopupWindow_removePromptView(ADListPopupWindow *self) {
  if (self->mPromptView_ != nil) {
    id<ADViewParent> parent = [self->mPromptView_ getParent];
    if ([parent isKindOfClass:[ADViewGroup class]]) {
      ADViewGroup *group = (ADViewGroup *) parent;
      [((ADViewGroup *) nil_chk(group)) removeViewWithADView:self->mPromptView_];
    }
  }
}

jint ADListPopupWindow_buildDropDown(ADListPopupWindow *self) {
  ADViewGroup *dropDownView;
  jint otherHeights = 0;
  if (self->mDropDownList_ == nil) {
    ADContext *context = JreRetainedLocalValue(self->mContext_);
    JreStrongAssignAndConsume(&self->mShowDropDownRunnable_, new_ADListPopupWindow_1_initWithADListPopupWindow_(self));
    JreStrongAssign(&self->mDropDownList_, ADListPopupWindow_createDropDownListViewWithADContext_withBoolean_(self, context, !self->mModal_));
    [((ADViewGroup *) nil_chk(self->mDropDownList_)) setFocusableWithBoolean:true];
    dropDownView = self->mDropDownList_;
    ADView *hintView = JreRetainedLocalValue(self->mPromptView_);
    if (hintView != nil) {
      ADLinearLayout *hintContainer = create_ADLinearLayout_initWithADContext_(context);
      [hintContainer setOrientationWithInt:ADLinearLayout_VERTICAL];
      ADLinearLayout_LayoutParams *hintParams = create_ADLinearLayout_LayoutParams_initWithInt_withInt_withFloat_(ADViewGroup_LayoutParams_MATCH_PARENT, 0, 1.0f);
      switch (self->mPromptPosition_) {
        case ADListPopupWindow_POSITION_PROMPT_BELOW:
        [hintContainer addViewWithADView:dropDownView withADViewGroup_LayoutParams:hintParams];
        [hintContainer addViewWithADView:hintView];
        break;
        case ADListPopupWindow_POSITION_PROMPT_ABOVE:
        [hintContainer addViewWithADView:hintView];
        [hintContainer addViewWithADView:dropDownView withADViewGroup_LayoutParams:hintParams];
        break;
        default:
        ADLog_eWithNSString_withNSString_(ADListPopupWindow_TAG, JreStrcat("$I", @"Invalid hint position ", self->mPromptPosition_));
        break;
      }
      jint widthSize;
      jint widthMode;
      if (self->mDropDownWidth_ >= 0) {
        widthMode = ADView_MeasureSpec_AT_MOST;
        widthSize = self->mDropDownWidth_;
      }
      else {
        widthMode = ADView_MeasureSpec_UNSPECIFIED;
        widthSize = 0;
      }
      jint widthSpec = ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_(widthSize, widthMode);
      jint heightSpec = ADView_MeasureSpec_UNSPECIFIED;
      [hintView measureWithInt:widthSpec withInt:heightSpec];
      hintParams = (ADLinearLayout_LayoutParams *) cast_chk([hintView getLayoutParams], [ADLinearLayout_LayoutParams class]);
      otherHeights = [hintView getMeasuredHeight] + ((ADLinearLayout_LayoutParams *) nil_chk(hintParams))->topMargin_ + hintParams->bottomMargin_;
      dropDownView = hintContainer;
    }
    [((ADPopupWindow *) nil_chk(self->mPopup_)) setContentViewWithADView:dropDownView];
  }
  else {
    ADView *view = self->mPromptView_;
    if (view != nil) {
      [self measureHintViewWithADView:view];
      ADLinearLayout_LayoutParams *hintParams = (ADLinearLayout_LayoutParams *) cast_chk([view getLayoutParams], [ADLinearLayout_LayoutParams class]);
      otherHeights = [view getMeasuredHeight] + ((ADLinearLayout_LayoutParams *) nil_chk(hintParams))->topMargin_ + hintParams->bottomMargin_;
    }
  }
  jint padding;
  ADDrawable *background = nil;
  if (background != nil) {
    [background getPaddingWithADRect:self->mTempRect_];
    padding = ((ADRect *) nil_chk(self->mTempRect_))->top_ + self->mTempRect_->bottom_;
    if (!self->mDropDownVerticalOffsetSet_) {
      self->mDropDownVerticalOffset_ = -self->mTempRect_->top_;
    }
  }
  else {
    [((ADRect *) nil_chk(self->mTempRect_)) setEmpty];
    padding = 0;
  }
  jboolean ignoreBottomDecorations = false;
  jint maxHeight = [((ADPopupWindow *) nil_chk(self->mPopup_)) getMaxAvailableHeightWithADView:[self getAnchorView] withInt:self->mDropDownVerticalOffset_ withBoolean:ignoreBottomDecorations];
  if (self->mDropDownAlwaysVisible_ || self->mDropDownHeight_ == ADViewGroup_LayoutParams_MATCH_PARENT) {
    return maxHeight + padding;
  }
  jint childWidthSpec;
  switch (self->mDropDownWidth_) {
    case ADViewGroup_LayoutParams_WRAP_CONTENT:
    childWidthSpec = ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_(ASPluginInvoker_getScreenWidth() - (self->mTempRect_->left_ + self->mTempRect_->right_), ADView_MeasureSpec_AT_MOST);
    break;
    case ADViewGroup_LayoutParams_MATCH_PARENT:
    childWidthSpec = ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_(ASPluginInvoker_getScreenWidth() - (self->mTempRect_->left_ + self->mTempRect_->right_), ADView_MeasureSpec_EXACTLY);
    break;
    default:
    childWidthSpec = ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_(self->mDropDownWidth_, ADView_MeasureSpec_EXACTLY);
    break;
  }
  jint listContent = [((ADViewGroup *) nil_chk(self->mDropDownList_)) measureHeightOfChildrenWithInt:childWidthSpec withInt:0 withInt:-1 withInt:maxHeight - otherHeights withInt:-1];
  if (listContent > 0) {
    jint listPadding = [((ADViewGroup *) nil_chk(self->mDropDownList_)) getPaddingTop] + [((ADViewGroup *) nil_chk(self->mDropDownList_)) getPaddingBottom];
    otherHeights += padding + listPadding;
  }
  return listContent + otherHeights;
}

jboolean ADListPopupWindow_isInputMethodNotNeeded(ADListPopupWindow *self) {
  return false;
}

ADViewGroup *ADListPopupWindow_createDropDownListViewWithADContext_withBoolean_(ADListPopupWindow *self, ADContext *context, jboolean b) {
  return [self getListView];
}

void ADListPopupWindow_initWithADView_withADView_withADRelativeLayout_LayoutParams_(ADListPopupWindow *self, ADView *decorView, ADView *contentView, ADRelativeLayout_LayoutParams *params) {
  NSObject_init(self);
  self->mDropDownHeight_ = ADViewGroup_LayoutParams_WRAP_CONTENT;
  self->mDropDownWidth_ = ADViewGroup_LayoutParams_WRAP_CONTENT;
  self->mIsAnimatedFromAnchor_ = true;
  self->mDropDownGravity_ = ADGravity_NO_GRAVITY;
  self->mDropDownAlwaysVisible_ = false;
  self->mForceIgnoreOutsideTouch_ = false;
  self->mListItemExpandMaximum_ = JavaLangInteger_MAX_VALUE;
  self->mPromptPosition_ = ADListPopupWindow_POSITION_PROMPT_ABOVE;
  JreStrongAssignAndConsume(&self->mTempRect_, new_ADRect_init());
  JreStrongAssignAndConsume(&self->mPopup_, new_ADPopupWindow_init());
  JreStrongAssign(&self->decorView_, decorView);
  JreStrongAssign(&self->params_, params);
  JreStrongAssign(&self->mDropDownList_, (ADViewGroup *) cast_chk(contentView, [ADViewGroup class]));
  [self->mPopup_ setContentViewWithADView:contentView];
}

ADListPopupWindow *new_ADListPopupWindow_initWithADView_withADView_withADRelativeLayout_LayoutParams_(ADView *decorView, ADView *contentView, ADRelativeLayout_LayoutParams *params) {
  J2OBJC_NEW_IMPL(ADListPopupWindow, initWithADView_withADView_withADRelativeLayout_LayoutParams_, decorView, contentView, params)
}

ADListPopupWindow *create_ADListPopupWindow_initWithADView_withADView_withADRelativeLayout_LayoutParams_(ADView *decorView, ADView *contentView, ADRelativeLayout_LayoutParams *params) {
  J2OBJC_CREATE_IMPL(ADListPopupWindow, initWithADView_withADView_withADRelativeLayout_LayoutParams_, decorView, contentView, params)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADListPopupWindow)

@implementation ADListPopupWindow_1

- (instancetype)initWithADListPopupWindow:(ADListPopupWindow *)outer$ {
  ADListPopupWindow_1_initWithADListPopupWindow_(self, outer$);
  return self;
}

- (void)run {
  ADView *view = JreRetainedLocalValue([this$0_ getAnchorView]);
  if (view != nil && [view getWindowToken] != nil) {
    [this$0_ show];
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithADListPopupWindow:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LADListPopupWindow;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LADListPopupWindow;", "buildDropDown" };
  static const J2ObjcClassInfo _ADListPopupWindow_1 = { "", "r.android.widget", ptrTable, methods, fields, 7, 0x8010, 2, 1, 0, -1, 1, -1, -1 };
  return &_ADListPopupWindow_1;
}

@end

void ADListPopupWindow_1_initWithADListPopupWindow_(ADListPopupWindow_1 *self, ADListPopupWindow *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

ADListPopupWindow_1 *new_ADListPopupWindow_1_initWithADListPopupWindow_(ADListPopupWindow *outer$) {
  J2OBJC_NEW_IMPL(ADListPopupWindow_1, initWithADListPopupWindow_, outer$)
}

ADListPopupWindow_1 *create_ADListPopupWindow_1_initWithADListPopupWindow_(ADListPopupWindow *outer$) {
  J2OBJC_CREATE_IMPL(ADListPopupWindow_1, initWithADListPopupWindow_, outer$)
}
