//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroid\src\main\java\r\android\graphics\PointF.java
//

#import <Foundation/Foundation.h>
#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_PointF")
#ifdef RESTRICT_PointF
#define INCLUDE_ALL_PointF 0
#else
#define INCLUDE_ALL_PointF 1
#endif
#undef RESTRICT_PointF

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ADPointF_) && (INCLUDE_ALL_PointF || defined(INCLUDE_ADPointF))
#define ADPointF_

#define RESTRICT_Parcelable 1
#define INCLUDE_ADParcelable 1
#include "Parcelable.h"

@class ADParcelable_Creator;
@class ADPoint;
@class JavaLangBoolean;
@class JavaLangFloat;
@class JavaLangInteger;
@class NSString;
@protocol ADParcel;

/*!
 @brief PointF holds two float coordinates
 */
@interface ADPointF : NSObject < ADParcelable > {
 @public
  float x_;
  float y_;
}

#pragma mark Public

- (instancetype)init;

- (instancetype)initWithFloat:(float)x
                    withFloat:(float)y;

- (instancetype)initWithADPoint:(ADPoint *)p;

/*!
 @brief Create a new PointF initialized with the values in the specified
  PointF (which is left unmodified).
 @param p The point whose values are copied into the new           point.
 */
- (instancetype)initWithADPointF:(ADPointF *)p;

/*!
 @brief Parcelable interface methods
 */
- (int32_t)describeContents;

/*!
 @brief Returns true if the point's coordinates equal (x,y)
 */
- (bool)equalsWithFloat:(float)x
              withFloat:(float)y;

- (bool)isEqual:(id)o;

- (NSUInteger)hash;

/*!
 @brief Return the euclidian distance from (0,0) to the point
 */
- (float)length;

/*!
 @brief Returns the euclidian distance from (0,0) to (x,y)
 */
+ (float)lengthWithFloat:(float)x
               withFloat:(float)y;

- (void)negate;

- (void)offsetWithFloat:(float)dx
              withFloat:(float)dy;

/*!
 @brief Set the point's coordinates from the data stored in the specified
  parcel.To write a point to a parcel, call writeToParcel().
 @param inArg The parcel to read the point's coordinates from
 */
- (void)readFromParcelWithADParcel:(id<ADParcel>)inArg;

/*!
 @brief Set the point's x and y coordinates
 */
- (void)setWithFloat:(float)x
           withFloat:(float)y;

/*!
 @brief Set the point's x and y coordinates to the coordinates of p
 */
- (void)setWithADPointF:(ADPointF *)p;

- (NSString *)description;

/*!
 @brief Write this point to the specified parcel.To restore a point from
  a parcel, use readFromParcel()
 @param outArg The parcel to write the point's coordinates into
 */
- (void)writeToParcelWithADParcel:(id<ADParcel>)outArg
                          withInt:(int32_t)flags;

@end

J2OBJC_STATIC_INIT(ADPointF)

inline ADParcelable_Creator *ADPointF_get_CREATOR(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT ADParcelable_Creator *ADPointF_CREATOR;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADPointF, CREATOR, ADParcelable_Creator *)

FOUNDATION_EXPORT void ADPointF_init(ADPointF *self);

FOUNDATION_EXPORT ADPointF *new_ADPointF_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ADPointF *create_ADPointF_init(void);

FOUNDATION_EXPORT void ADPointF_initWithFloat_withFloat_(ADPointF *self, float x, float y);

FOUNDATION_EXPORT ADPointF *new_ADPointF_initWithFloat_withFloat_(float x, float y) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ADPointF *create_ADPointF_initWithFloat_withFloat_(float x, float y);

FOUNDATION_EXPORT void ADPointF_initWithADPoint_(ADPointF *self, ADPoint *p);

FOUNDATION_EXPORT ADPointF *new_ADPointF_initWithADPoint_(ADPoint *p) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ADPointF *create_ADPointF_initWithADPoint_(ADPoint *p);

FOUNDATION_EXPORT void ADPointF_initWithADPointF_(ADPointF *self, ADPointF *p);

FOUNDATION_EXPORT ADPointF *new_ADPointF_initWithADPointF_(ADPointF *p) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ADPointF *create_ADPointF_initWithADPointF_(ADPointF *p);

FOUNDATION_EXPORT float ADPointF_lengthWithFloat_withFloat_(float x, float y);

J2OBJC_TYPE_LITERAL_HEADER(ADPointF)

@compatibility_alias RAndroidGraphicsPointF ADPointF;


#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_PointF")
