//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroid\src\main\java\r\android\animation\IKeyframes.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IKeyframes")
#ifdef RESTRICT_IKeyframes
#define INCLUDE_ALL_IKeyframes 0
#else
#define INCLUDE_ALL_IKeyframes 1
#endif
#undef RESTRICT_IKeyframes
#ifdef INCLUDE_ADIKeyframes_FloatIKeyframes
#define INCLUDE_ADIKeyframes 1
#endif
#ifdef INCLUDE_ADIKeyframes_IntIKeyframes
#define INCLUDE_ADIKeyframes 1
#endif

#if !defined (ADIKeyframes_) && (INCLUDE_ALL_IKeyframes || defined(INCLUDE_ADIKeyframes))
#define ADIKeyframes_

@class IOSClass;
@protocol ADTypeEvaluator;
@protocol JavaUtilList;

/*!
 @brief This interface abstracts a collection of Keyframe objects and is called by
  ValueAnimator to calculate values between those keyframes for a given animation.
 */
@protocol ADIKeyframes < NSCopying, JavaObject >

/*!
 @brief Sets the TypeEvaluator to be used when calculating animated values.This object
  is required only for IKeyframes that are not either IntIKeyframes or FloatIKeyframes,
  both of which assume their own evaluator to speed up calculations with those primitive
  types.
 @param evaluator The TypeEvaluator to be used to calculate animated values.
 */
- (void)setEvaluatorWithADTypeEvaluator:(id<ADTypeEvaluator>)evaluator;

/*!
 @return The value type contained by the contained IKeyframes.
 */
- (IOSClass *)getType;

/*!
 @brief Gets the animated value, given the elapsed fraction of the animation (interpolated by the
  animation's interpolator) and the evaluator used to calculate in-between values.This
  function maps the input fraction to the appropriate keyframe interval and a fraction
  between them and returns the interpolated value.
 Note that the input fraction may fall
  outside the [0-1] bounds, if the animation's interpolator made that happen (e.g., a
  spring interpolation that might send the fraction past 1.0). We handle this situation by
  just using the two keyframes at the appropriate end when the value is outside those bounds.
 @param fraction The elapsed fraction of the animation
 @return The animated value.
 */
- (id)getValueWithFloat:(jfloat)fraction;

/*!
 @return A list of all IKeyframes contained by this. This may return null if this is
  not made up of IKeyframes.
 */
- (id<JavaUtilList>)getIKeyframes;

- (id<ADIKeyframes>)clone;

@end

J2OBJC_EMPTY_STATIC_INIT(ADIKeyframes)

J2OBJC_TYPE_LITERAL_HEADER(ADIKeyframes)

#define RAndroidAnimationIKeyframes ADIKeyframes

#endif

#if !defined (ADIKeyframes_IntIKeyframes_) && (INCLUDE_ALL_IKeyframes || defined(INCLUDE_ADIKeyframes_IntIKeyframes))
#define ADIKeyframes_IntIKeyframes_

/*!
 @brief A specialization of IKeyframes that has integer primitive value calculation.
 */
@protocol ADIKeyframes_IntIKeyframes < ADIKeyframes, JavaObject >

/*!
 @brief Works like <code>getValue(float)</code>, but returning a primitive.
 @param fraction The elapsed fraction of the animation
 @return The animated value.
 */
- (jint)getIntValueWithFloat:(jfloat)fraction;

@end

J2OBJC_EMPTY_STATIC_INIT(ADIKeyframes_IntIKeyframes)

J2OBJC_TYPE_LITERAL_HEADER(ADIKeyframes_IntIKeyframes)

#endif

#if !defined (ADIKeyframes_FloatIKeyframes_) && (INCLUDE_ALL_IKeyframes || defined(INCLUDE_ADIKeyframes_FloatIKeyframes))
#define ADIKeyframes_FloatIKeyframes_

/*!
 @brief A specialization of IKeyframes that has float primitive value calculation.
 */
@protocol ADIKeyframes_FloatIKeyframes < ADIKeyframes, JavaObject >

/*!
 @brief Works like <code>getValue(float)</code>, but returning a primitive.
 @param fraction The elapsed fraction of the animation
 @return The animated value.
 */
- (jfloat)getFloatValueWithFloat:(jfloat)fraction;

@end

J2OBJC_EMPTY_STATIC_INIT(ADIKeyframes_FloatIKeyframes)

J2OBJC_TYPE_LITERAL_HEADER(ADIKeyframes_FloatIKeyframes)

#endif

#pragma pop_macro("INCLUDE_ALL_IKeyframes")
