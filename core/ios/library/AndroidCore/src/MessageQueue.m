//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroid\src\main\java\r\android\os\MessageQueue.java
//

#include "Handler.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "Log.h"
#include "Message.h"
#include "MessageQueue.h"
#include "PluginInvoker.h"
#include "SystemClock.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/Runnable.h"
#include "java/lang/annotation/Annotation.h"
#include "java/lang/annotation/Retention.h"
#include "java/lang/annotation/RetentionPolicy.h"
#include "java/util/ArrayList.h"

@class JavaUtilArrayList;


#pragma clang diagnostic ignored "-Wprotocol"

@interface ADMessageQueue () {
 @public
  jboolean mQuitAllowed_;
  jlong mPtr_;
  JavaUtilArrayList *mIdleHandlers_;
  jboolean mQuitting_;
  jboolean mBlocked_;
}

- (void)dispose;

- (jboolean)isPollingLocked;

- (void)removeAllMessagesLocked;

- (void)removeAllFutureMessagesLocked;

@end

J2OBJC_FIELD_SETTER(ADMessageQueue, mIdleHandlers_, JavaUtilArrayList *)

inline NSString *ADMessageQueue_get_TAG(void);
static NSString *ADMessageQueue_TAG = @"MessageQueue";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADMessageQueue, TAG, NSString *)

__attribute__((unused)) static void ADMessageQueue_dispose(ADMessageQueue *self);

__attribute__((unused)) static jboolean ADMessageQueue_isPollingLocked(ADMessageQueue *self);

__attribute__((unused)) static void ADMessageQueue_removeAllMessagesLocked(ADMessageQueue *self);

__attribute__((unused)) static void ADMessageQueue_removeAllFutureMessagesLocked(ADMessageQueue *self);

@interface ADMessageQueue_IdleHandler : NSObject

@end

@interface ADMessageQueue_OnFileDescriptorEventListener : NSObject

@end

@interface ADMessageQueue_OnFileDescriptorEventListener_Events : NSObject

@end

__attribute__((unused)) static IOSObjectArray *ADMessageQueue_OnFileDescriptorEventListener_Events__Annotations$0(void);

@interface ADMessageQueue_$Lambda$1 : NSObject < JavaLangRunnable > {
 @public
  jlong val$when_;
  ADMessage *val$msg_;
}

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(ADMessageQueue_$Lambda$1)

__attribute__((unused)) static void ADMessageQueue_$Lambda$1_initWithLong_withADMessage_(ADMessageQueue_$Lambda$1 *self, jlong capture$0, ADMessage *capture$1);

__attribute__((unused)) static ADMessageQueue_$Lambda$1 *new_ADMessageQueue_$Lambda$1_initWithLong_withADMessage_(jlong capture$0, ADMessage *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static ADMessageQueue_$Lambda$1 *create_ADMessageQueue_$Lambda$1_initWithLong_withADMessage_(jlong capture$0, ADMessage *capture$1);

@implementation ADMessageQueue

- (instancetype)initWithBoolean:(jboolean)quitAllowed {
  ADMessageQueue_initWithBoolean_(self, quitAllowed);
  return self;
}

- (void)java_finalize {
  @try {
    ADMessageQueue_dispose(self);
  }
  @finally {
    [super java_finalize];
  }
}

- (void)dispose {
  ADMessageQueue_dispose(self);
}

- (jboolean)isIdle {
  @synchronized(self) {
    jlong now = ADSystemClock_uptimeMillis();
    return mMessages_ == nil || now < mMessages_->when_;
  }
}

- (void)addIdleHandlerWithADMessageQueue_IdleHandler:(id<ADMessageQueue_IdleHandler>)handler {
  if (handler == nil) {
    @throw create_JavaLangNullPointerException_initWithNSString_(@"Can't add a null IdleHandler");
  }
  @synchronized(self) {
    [((JavaUtilArrayList *) nil_chk(mIdleHandlers_)) addWithId:handler];
  }
}

- (void)removeIdleHandlerWithADMessageQueue_IdleHandler:(id<ADMessageQueue_IdleHandler>)handler {
  @synchronized(self) {
    [((JavaUtilArrayList *) nil_chk(mIdleHandlers_)) removeWithId:handler];
  }
}

- (jboolean)isPolling {
  @synchronized(self) {
    return ADMessageQueue_isPollingLocked(self);
  }
}

- (jboolean)isPollingLocked {
  return ADMessageQueue_isPollingLocked(self);
}

- (void)quitWithBoolean:(jboolean)safe {
}

- (jboolean)enqueueMessageWithADMessage:(ADMessage *)msg
                               withLong:(jlong)when {
  if (((ADMessage *) nil_chk(msg))->target_ == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Message must have a target.");
  }
  @synchronized(self) {
    if ([msg isInUse]) {
      @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("@$", msg, @" This message is already in use."));
    }
    if (mQuitting_) {
      JavaLangIllegalStateException *e = create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("@$", msg->target_, @" sending message to a Handler on a dead thread"));
      ADLog_wWithNSString_withNSString_withJavaLangThrowable_(ADMessageQueue_TAG, [e getMessage], e);
      [msg recycle];
      return false;
    }
    [msg markInUse];
    msg->when_ = when;
    ADMessage *p = JreRetainedLocalValue(mMessages_);
    jboolean needWake;
    if (p == nil || when == 0 || when < p->when_) {
      JreStrongAssign(&msg->next_, p);
      JreStrongAssign(&mMessages_, msg);
      needWake = mBlocked_;
    }
    else {
      needWake = (mBlocked_ && p->target_ == nil && [msg isAsynchronous]);
      ADMessage *prev;
      for (; ; ) {
        prev = p;
        p = p->next_;
        if (p == nil || when < p->when_) {
          break;
        }
        if (needWake && [p isAsynchronous]) {
          needWake = false;
        }
      }
      JreStrongAssign(&msg->next_, p);
      JreStrongAssign(&prev->next_, msg);
    }
    if (needWake) {
    }
  }
  ASPluginInvoker_enqueueTaskForEventLoopWithJavaLangRunnable_withLong_(create_ADMessageQueue_$Lambda$1_initWithLong_withADMessage_(when, msg), when);
  return true;
}

- (jboolean)hasMessagesWithADHandler:(ADHandler *)h
                             withInt:(jint)what
                              withId:(id)object {
  if (h == nil) {
    return false;
  }
  @synchronized(self) {
    ADMessage *p = JreRetainedLocalValue(mMessages_);
    while (p != nil) {
      if (p->target_ == h && p->what_ == what && (object == nil || p->obj_ == object)) {
        return true;
      }
      p = p->next_;
    }
    return false;
  }
}

- (jboolean)hasEqualMessagesWithADHandler:(ADHandler *)h
                                  withInt:(jint)what
                                   withId:(id)object {
  if (h == nil) {
    return false;
  }
  @synchronized(self) {
    ADMessage *p = JreRetainedLocalValue(mMessages_);
    while (p != nil) {
      if (p->target_ == h && p->what_ == what && (object == nil || [object isEqual:p->obj_])) {
        return true;
      }
      p = p->next_;
    }
    return false;
  }
}

- (jboolean)hasMessagesWithADHandler:(ADHandler *)h
                withJavaLangRunnable:(id<JavaLangRunnable>)r
                              withId:(id)object {
  if (h == nil) {
    return false;
  }
  @synchronized(self) {
    ADMessage *p = JreRetainedLocalValue(mMessages_);
    while (p != nil) {
      if (p->target_ == h && p->callback_ == r && (object == nil || p->obj_ == object)) {
        return true;
      }
      p = p->next_;
    }
    return false;
  }
}

- (jboolean)hasMessagesWithADHandler:(ADHandler *)h {
  if (h == nil) {
    return false;
  }
  @synchronized(self) {
    ADMessage *p = JreRetainedLocalValue(mMessages_);
    while (p != nil) {
      if (p->target_ == h) {
        return true;
      }
      p = p->next_;
    }
    return false;
  }
}

- (void)removeMessagesWithADHandler:(ADHandler *)h
                            withInt:(jint)what
                             withId:(id)object {
  if (h == nil) {
    return;
  }
  @synchronized(self) {
    ADMessage *p = JreRetainedLocalValue(mMessages_);
    while (p != nil && p->target_ == h && p->what_ == what && (object == nil || p->obj_ == object)) {
      ADMessage *n = JreRetainedLocalValue(p->next_);
      JreStrongAssign(&mMessages_, n);
      [p recycleUnchecked];
      p = n;
    }
    while (p != nil) {
      ADMessage *n = JreRetainedLocalValue(p->next_);
      if (n != nil) {
        if (n->target_ == h && n->what_ == what && (object == nil || n->obj_ == object)) {
          ADMessage *nn = JreRetainedLocalValue(n->next_);
          [n recycleUnchecked];
          JreStrongAssign(&p->next_, nn);
          continue;
        }
      }
      p = n;
    }
  }
}

- (void)removeEqualMessagesWithADHandler:(ADHandler *)h
                                 withInt:(jint)what
                                  withId:(id)object {
  if (h == nil) {
    return;
  }
  @synchronized(self) {
    ADMessage *p = JreRetainedLocalValue(mMessages_);
    while (p != nil && p->target_ == h && p->what_ == what && (object == nil || [object isEqual:p->obj_])) {
      ADMessage *n = JreRetainedLocalValue(p->next_);
      JreStrongAssign(&mMessages_, n);
      [p recycleUnchecked];
      p = n;
    }
    while (p != nil) {
      ADMessage *n = JreRetainedLocalValue(p->next_);
      if (n != nil) {
        if (n->target_ == h && n->what_ == what && (object == nil || [object isEqual:n->obj_])) {
          ADMessage *nn = JreRetainedLocalValue(n->next_);
          [n recycleUnchecked];
          JreStrongAssign(&p->next_, nn);
          continue;
        }
      }
      p = n;
    }
  }
}

- (void)removeMessagesWithADHandler:(ADHandler *)h
               withJavaLangRunnable:(id<JavaLangRunnable>)r
                             withId:(id)object {
  if (h == nil || r == nil) {
    return;
  }
  @synchronized(self) {
    ADMessage *p = JreRetainedLocalValue(mMessages_);
    while (p != nil && p->target_ == h && p->callback_ == r && (object == nil || p->obj_ == object)) {
      ADMessage *n = JreRetainedLocalValue(p->next_);
      JreStrongAssign(&mMessages_, n);
      [p recycleUnchecked];
      p = n;
    }
    while (p != nil) {
      ADMessage *n = JreRetainedLocalValue(p->next_);
      if (n != nil) {
        if (n->target_ == h && n->callback_ == r && (object == nil || n->obj_ == object)) {
          ADMessage *nn = JreRetainedLocalValue(n->next_);
          [n recycleUnchecked];
          JreStrongAssign(&p->next_, nn);
          continue;
        }
      }
      p = n;
    }
  }
}

- (void)removeEqualMessagesWithADHandler:(ADHandler *)h
                    withJavaLangRunnable:(id<JavaLangRunnable>)r
                                  withId:(id)object {
  if (h == nil || r == nil) {
    return;
  }
  @synchronized(self) {
    ADMessage *p = JreRetainedLocalValue(mMessages_);
    while (p != nil && p->target_ == h && p->callback_ == r && (object == nil || [object isEqual:p->obj_])) {
      ADMessage *n = JreRetainedLocalValue(p->next_);
      JreStrongAssign(&mMessages_, n);
      [p recycleUnchecked];
      p = n;
    }
    while (p != nil) {
      ADMessage *n = JreRetainedLocalValue(p->next_);
      if (n != nil) {
        if (n->target_ == h && n->callback_ == r && (object == nil || [object isEqual:n->obj_])) {
          ADMessage *nn = JreRetainedLocalValue(n->next_);
          [n recycleUnchecked];
          JreStrongAssign(&p->next_, nn);
          continue;
        }
      }
      p = n;
    }
  }
}

- (void)removeCallbacksAndMessagesWithADHandler:(ADHandler *)h
                                         withId:(id)object {
  if (h == nil) {
    return;
  }
  @synchronized(self) {
    ADMessage *p = JreRetainedLocalValue(mMessages_);
    while (p != nil && p->target_ == h && (object == nil || p->obj_ == object)) {
      ADMessage *n = JreRetainedLocalValue(p->next_);
      JreStrongAssign(&mMessages_, n);
      [p recycleUnchecked];
      p = n;
    }
    while (p != nil) {
      ADMessage *n = JreRetainedLocalValue(p->next_);
      if (n != nil) {
        if (n->target_ == h && (object == nil || n->obj_ == object)) {
          ADMessage *nn = JreRetainedLocalValue(n->next_);
          [n recycleUnchecked];
          JreStrongAssign(&p->next_, nn);
          continue;
        }
      }
      p = n;
    }
  }
}

- (void)removeCallbacksAndEqualMessagesWithADHandler:(ADHandler *)h
                                              withId:(id)object {
  if (h == nil) {
    return;
  }
  @synchronized(self) {
    ADMessage *p = JreRetainedLocalValue(mMessages_);
    while (p != nil && p->target_ == h && (object == nil || [object isEqual:p->obj_])) {
      ADMessage *n = JreRetainedLocalValue(p->next_);
      JreStrongAssign(&mMessages_, n);
      [p recycleUnchecked];
      p = n;
    }
    while (p != nil) {
      ADMessage *n = JreRetainedLocalValue(p->next_);
      if (n != nil) {
        if (n->target_ == h && (object == nil || [object isEqual:n->obj_])) {
          ADMessage *nn = JreRetainedLocalValue(n->next_);
          [n recycleUnchecked];
          JreStrongAssign(&p->next_, nn);
          continue;
        }
      }
      p = n;
    }
  }
}

- (void)removeAllMessagesLocked {
  ADMessageQueue_removeAllMessagesLocked(self);
}

- (void)removeAllFutureMessagesLocked {
  ADMessageQueue_removeAllFutureMessagesLocked(self);
}

- (void)dealloc {
  JreCheckFinalize(self, [ADMessageQueue class]);
  RELEASE_(mMessages_);
  RELEASE_(mIdleHandlers_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 1, -1, 2, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 6, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 7, 8, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 9, 10, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 11, 10, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 9, 12, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 9, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 14, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 15, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 14, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 15, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 16, 17, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 18, 17, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithBoolean:);
  methods[1].selector = @selector(java_finalize);
  methods[2].selector = @selector(dispose);
  methods[3].selector = @selector(isIdle);
  methods[4].selector = @selector(addIdleHandlerWithADMessageQueue_IdleHandler:);
  methods[5].selector = @selector(removeIdleHandlerWithADMessageQueue_IdleHandler:);
  methods[6].selector = @selector(isPolling);
  methods[7].selector = @selector(isPollingLocked);
  methods[8].selector = @selector(quitWithBoolean:);
  methods[9].selector = @selector(enqueueMessageWithADMessage:withLong:);
  methods[10].selector = @selector(hasMessagesWithADHandler:withInt:withId:);
  methods[11].selector = @selector(hasEqualMessagesWithADHandler:withInt:withId:);
  methods[12].selector = @selector(hasMessagesWithADHandler:withJavaLangRunnable:withId:);
  methods[13].selector = @selector(hasMessagesWithADHandler:);
  methods[14].selector = @selector(removeMessagesWithADHandler:withInt:withId:);
  methods[15].selector = @selector(removeEqualMessagesWithADHandler:withInt:withId:);
  methods[16].selector = @selector(removeMessagesWithADHandler:withJavaLangRunnable:withId:);
  methods[17].selector = @selector(removeEqualMessagesWithADHandler:withJavaLangRunnable:withId:);
  methods[18].selector = @selector(removeCallbacksAndMessagesWithADHandler:withId:);
  methods[19].selector = @selector(removeCallbacksAndEqualMessagesWithADHandler:withId:);
  methods[20].selector = @selector(removeAllMessagesLocked);
  methods[21].selector = @selector(removeAllFutureMessagesLocked);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "TAG", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 19, -1, -1 },
    { "mQuitAllowed_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mPtr_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mMessages_", "LADMessage;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mIdleHandlers_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x12, -1, -1, 20, -1 },
    { "mQuitting_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mBlocked_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "Z", "finalize", "LJavaLangThrowable;", "addIdleHandler", "LADMessageQueue_IdleHandler;", "removeIdleHandler", "quit", "enqueueMessage", "LADMessage;J", "hasMessages", "LADHandler;ILNSObject;", "hasEqualMessages", "LADHandler;LJavaLangRunnable;LNSObject;", "LADHandler;", "removeMessages", "removeEqualMessages", "removeCallbacksAndMessages", "LADHandler;LNSObject;", "removeCallbacksAndEqualMessages", &ADMessageQueue_TAG, "Ljava/util/ArrayList<Lr/android/os/MessageQueue$IdleHandler;>;", "LADMessageQueue_IdleHandler;LADMessageQueue_OnFileDescriptorEventListener;" };
  static const J2ObjcClassInfo _ADMessageQueue = { "MessageQueue", "r.android.os", ptrTable, methods, fields, 7, 0x11, 22, 7, -1, 21, -1, -1, -1 };
  return &_ADMessageQueue;
}

@end

void ADMessageQueue_initWithBoolean_(ADMessageQueue *self, jboolean quitAllowed) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->mIdleHandlers_, new_JavaUtilArrayList_init());
  self->mQuitAllowed_ = quitAllowed;
  self->mPtr_ = 100;
}

ADMessageQueue *new_ADMessageQueue_initWithBoolean_(jboolean quitAllowed) {
  J2OBJC_NEW_IMPL(ADMessageQueue, initWithBoolean_, quitAllowed)
}

ADMessageQueue *create_ADMessageQueue_initWithBoolean_(jboolean quitAllowed) {
  J2OBJC_CREATE_IMPL(ADMessageQueue, initWithBoolean_, quitAllowed)
}

void ADMessageQueue_dispose(ADMessageQueue *self) {
  if (self->mPtr_ != 0) {
    self->mPtr_ = 0;
  }
}

jboolean ADMessageQueue_isPollingLocked(ADMessageQueue *self) {
  return !self->mQuitting_;
}

void ADMessageQueue_removeAllMessagesLocked(ADMessageQueue *self) {
  ADMessage *p = JreRetainedLocalValue(self->mMessages_);
  while (p != nil) {
    ADMessage *n = JreRetainedLocalValue(p->next_);
    [p recycleUnchecked];
    p = n;
  }
  JreStrongAssign(&self->mMessages_, nil);
}

void ADMessageQueue_removeAllFutureMessagesLocked(ADMessageQueue *self) {
  jlong now = ADSystemClock_uptimeMillis();
  ADMessage *p = JreRetainedLocalValue(self->mMessages_);
  if (p != nil) {
    if (p->when_ > now) {
      ADMessageQueue_removeAllMessagesLocked(self);
    }
    else {
      ADMessage *n;
      for (; ; ) {
        n = p->next_;
        if (n == nil) {
          return;
        }
        if (n->when_ > now) {
          break;
        }
        p = n;
      }
      JreStrongAssign(&p->next_, nil);
      do {
        p = n;
        n = p->next_;
        [p recycleUnchecked];
      }
      while (n != nil);
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADMessageQueue)

@implementation ADMessageQueue_IdleHandler

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "Z", 0x401, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(queueIdle);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LADMessageQueue;" };
  static const J2ObjcClassInfo _ADMessageQueue_IdleHandler = { "IdleHandler", "r.android.os", ptrTable, methods, NULL, 7, 0x609, 1, 0, 0, -1, -1, -1, -1 };
  return &_ADMessageQueue_IdleHandler;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(ADMessageQueue_IdleHandler)

@implementation ADMessageQueue_OnFileDescriptorEventListener

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "I", 0x401, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(onFileDescriptorEventsWithJavaIoFileDescriptor:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "EVENT_INPUT", "I", .constantValue.asInt = ADMessageQueue_OnFileDescriptorEventListener_EVENT_INPUT, 0x19, -1, -1, -1, -1 },
    { "EVENT_OUTPUT", "I", .constantValue.asInt = ADMessageQueue_OnFileDescriptorEventListener_EVENT_OUTPUT, 0x19, -1, -1, -1, -1 },
    { "EVENT_ERROR", "I", .constantValue.asInt = ADMessageQueue_OnFileDescriptorEventListener_EVENT_ERROR, 0x19, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "onFileDescriptorEvents", "LJavaIoFileDescriptor;I", "LADMessageQueue;", "LADMessageQueue_OnFileDescriptorEventListener_Events;" };
  static const J2ObjcClassInfo _ADMessageQueue_OnFileDescriptorEventListener = { "OnFileDescriptorEventListener", "r.android.os", ptrTable, methods, fields, 7, 0x609, 1, 3, 2, 3, -1, -1, -1 };
  return &_ADMessageQueue_OnFileDescriptorEventListener;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(ADMessageQueue_OnFileDescriptorEventListener)

@implementation ADMessageQueue_OnFileDescriptorEventListener_Events

+ (const J2ObjcClassInfo *)__metadata {
  static const void *ptrTable[] = { "LADMessageQueue_OnFileDescriptorEventListener;", (void *)&ADMessageQueue_OnFileDescriptorEventListener_Events__Annotations$0 };
  static const J2ObjcClassInfo _ADMessageQueue_OnFileDescriptorEventListener_Events = { "Events", "r.android.os", ptrTable, NULL, NULL, 7, 0x2609, 0, 0, 0, -1, -1, -1, 1 };
  return &_ADMessageQueue_OnFileDescriptorEventListener_Events;
}

@end

IOSObjectArray *ADMessageQueue_OnFileDescriptorEventListener_Events__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangAnnotationRetention(JreLoadEnum(JavaLangAnnotationRetentionPolicy, SOURCE)) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(ADMessageQueue_OnFileDescriptorEventListener_Events)

@implementation ADMessageQueue_$Lambda$1

- (void)run {
  if (val$when_ == ((ADMessage *) nil_chk(val$msg_))->when_) {
    if (val$msg_->target_ == nil && val$msg_->callback_ != nil) {
      [val$msg_->callback_ run];
    }
    if (val$msg_->target_ != nil) {
      [val$msg_->target_ dispatchMessageWithADMessage:val$msg_];
    }
  }
}

- (void)dealloc {
  RELEASE_(val$msg_);
  [super dealloc];
}

@end

void ADMessageQueue_$Lambda$1_initWithLong_withADMessage_(ADMessageQueue_$Lambda$1 *self, jlong capture$0, ADMessage *capture$1) {
  self->val$when_ = capture$0;
  JreStrongAssign(&self->val$msg_, capture$1);
  NSObject_init(self);
}

ADMessageQueue_$Lambda$1 *new_ADMessageQueue_$Lambda$1_initWithLong_withADMessage_(jlong capture$0, ADMessage *capture$1) {
  J2OBJC_NEW_IMPL(ADMessageQueue_$Lambda$1, initWithLong_withADMessage_, capture$0, capture$1)
}

ADMessageQueue_$Lambda$1 *create_ADMessageQueue_$Lambda$1_initWithLong_withADMessage_(jlong capture$0, ADMessage *capture$1) {
  J2OBJC_CREATE_IMPL(ADMessageQueue_$Lambda$1, initWithLong_withADMessage_, capture$0, capture$1)
}
