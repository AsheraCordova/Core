//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroid\src\main\java\com\ashera\layout\SwipeHelper.java
//

#include "J2ObjC_source.h"
#include "SwipeHelper.h"
#include "java/lang/Math.h"


@interface ASSwipeHelper () {
 @public
  jint swipedThreshold_;
  id<ASSwipeHelper_SwipeListener> swipeListener_;
  jfloat xDown_;
  jfloat xUp_;
  jfloat yDown_;
  jfloat yUp_;
}

@end

J2OBJC_FIELD_SETTER(ASSwipeHelper, swipeListener_, id<ASSwipeHelper_SwipeListener>)

@interface ASSwipeHelper_SwipeListener : NSObject

@end

@implementation ASSwipeHelper

- (instancetype)initWithInt:(jint)swipedThreshold {
  ASSwipeHelper_initWithInt_(self, swipedThreshold);
  return self;
}

- (void)setListenerWithASSwipeHelper_SwipeListener:(id<ASSwipeHelper_SwipeListener>)swipeListener {
  JreStrongAssign(&self->swipeListener_, swipeListener);
}

- (jint)getSwipedThreshold {
  return swipedThreshold_;
}

- (void)onActionDownWithFloat:(jfloat)x
                    withFloat:(jfloat)y {
  xDown_ = x;
  yDown_ = y;
}

- (jboolean)onActionUpWithFloat:(jfloat)x
                      withFloat:(jfloat)y {
  xUp_ = x;
  yUp_ = y;
  jboolean swipedHorizontally = JavaLangMath_absWithFloat_(xUp_ - xDown_) > [self getSwipedThreshold];
  jboolean swipedVertically = JavaLangMath_absWithFloat_(yUp_ - yDown_) > [self getSwipedThreshold];
  jboolean isEventConsumed = false;
  if (swipedHorizontally) {
    jboolean swipedRight = xUp_ > xDown_;
    jboolean swipedLeft = xUp_ < xDown_;
    if (swipedRight) {
      isEventConsumed = [((id<ASSwipeHelper_SwipeListener>) nil_chk(swipeListener_)) onSwipedWithNSString:@"right"];
    }
    if (swipedLeft) {
      isEventConsumed |= [((id<ASSwipeHelper_SwipeListener>) nil_chk(swipeListener_)) onSwipedWithNSString:@"left"];
    }
  }
  if (swipedVertically) {
    jboolean swipedDown = yDown_ < yUp_;
    jboolean swipedUp = yDown_ > yUp_;
    if (swipedDown) {
      isEventConsumed |= [((id<ASSwipeHelper_SwipeListener>) nil_chk(swipeListener_)) onSwipedWithNSString:@"down"];
    }
    if (swipedUp) {
      isEventConsumed |= [((id<ASSwipeHelper_SwipeListener>) nil_chk(swipeListener_)) onSwipedWithNSString:@"up"];
    }
  }
  return isEventConsumed;
}

- (void)dealloc {
  RELEASE_(swipeListener_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 5, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(setListenerWithASSwipeHelper_SwipeListener:);
  methods[2].selector = @selector(getSwipedThreshold);
  methods[3].selector = @selector(onActionDownWithFloat:withFloat:);
  methods[4].selector = @selector(onActionUpWithFloat:withFloat:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "swipedThreshold_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "swipeListener_", "LASSwipeHelper_SwipeListener;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "xDown_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "xUp_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "yDown_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "yUp_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "setListener", "LASSwipeHelper_SwipeListener;", "onActionDown", "FF", "onActionUp" };
  static const J2ObjcClassInfo _ASSwipeHelper = { "SwipeHelper", "com.ashera.layout", ptrTable, methods, fields, 7, 0x1, 5, 6, -1, 2, -1, -1, -1 };
  return &_ASSwipeHelper;
}

@end

void ASSwipeHelper_initWithInt_(ASSwipeHelper *self, jint swipedThreshold) {
  NSObject_init(self);
  self->swipedThreshold_ = swipedThreshold;
}

ASSwipeHelper *new_ASSwipeHelper_initWithInt_(jint swipedThreshold) {
  J2OBJC_NEW_IMPL(ASSwipeHelper, initWithInt_, swipedThreshold)
}

ASSwipeHelper *create_ASSwipeHelper_initWithInt_(jint swipedThreshold) {
  J2OBJC_CREATE_IMPL(ASSwipeHelper, initWithInt_, swipedThreshold)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASSwipeHelper)

@implementation ASSwipeHelper_SwipeListener

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "Z", 0x401, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(onSwipedWithNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "onSwiped", "LNSString;", "LASSwipeHelper;" };
  static const J2ObjcClassInfo _ASSwipeHelper_SwipeListener = { "SwipeListener", "com.ashera.layout", ptrTable, methods, NULL, 7, 0x609, 1, 0, 2, -1, -1, -1, -1 };
  return &_ASSwipeHelper_SwipeListener;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(ASSwipeHelper_SwipeListener)
