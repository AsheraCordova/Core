//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroid\src\main\java\com\ashera\view\BaseMeasurableView.java
//

#define J2OBJC_IMPORTED_BY_JAVA_IMPLEMENTATION 1




#include "BaseMeasurableView.h"
#include "Drawable.h"
#include "FrameLayout.h"
#include "HasWidgets.h"
#include "ICustomMeasureHeight.h"
#include "ICustomMeasureWidth.h"
#include "IMaxHeight.h"
#include "IMaxWidth.h"
#include "IMeasureHeight.h"
#include "IMeasureWidth.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IWidget.h"
#include "J2ObjC_source.h"
#include "PluginInvoker.h"
#include "RectM.h"
#include "View.h"
#include "ViewGroup.h"
#include "ViewParent.h"
#include "java/lang/Boolean.h"
#include "java/lang/Double.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"


@class NSString;


#pragma clang diagnostic error "-Wreturn-type"
#pragma clang diagnostic ignored "-Wswitch"


@interface ASBaseMeasurableView () {
 @public
  WEAK_ id<ASIWidget> widget_;
  ADDrawable *leftDrawable_;
  ADDrawable *rightDrawable_;
  ADDrawable *topDrawable_;
  ADDrawable *bottomDrawable_;
  bool isCompoundHorizontalPaddingConsumed_;
  int32_t drawablePadding_;
  bool ignoreDrawableHeight_;
}

- (int32_t)measureWidth;

- (int32_t)measureWidgetHeightWithInt:(int32_t)width
                    withNSObjectArray:(IOSObjectArray *)nativeWidgets;

- (int32_t)getDrawableWidthWithADDrawable:(ADDrawable *)drawable;

- (int32_t)getDrawableHeightWithADDrawable:(ADDrawable *)drawable
                               withBoolean:(bool)considerPadding;

+ (void)measureWithASHasWidgets:(id<ASHasWidgets>)parent
                  withASIWidget:(id<ASIWidget>)widget
                        withInt:(int32_t)level
                        withInt:(int32_t)indent
                        withInt:(int32_t)initialWidth;

+ (int32_t)nativeGetWidthWithASHasWidgets:(id<ASHasWidgets>)parent
                                  withInt:(int32_t)level
                                  withInt:(int32_t)indent
                                  withInt:(int32_t)initialWidth;

@end

J2OBJC_FIELD_SETTER(ASBaseMeasurableView, leftDrawable_, ADDrawable *)
J2OBJC_FIELD_SETTER(ASBaseMeasurableView, rightDrawable_, ADDrawable *)
J2OBJC_FIELD_SETTER(ASBaseMeasurableView, topDrawable_, ADDrawable *)
J2OBJC_FIELD_SETTER(ASBaseMeasurableView, bottomDrawable_, ADDrawable *)

__attribute__((unused)) static int32_t ASBaseMeasurableView_measureWidth(ASBaseMeasurableView *self);

__attribute__((unused)) static int32_t ASBaseMeasurableView_measureWidgetHeightWithInt_withNSObjectArray_(ASBaseMeasurableView *self, int32_t width, IOSObjectArray *nativeWidgets);

__attribute__((unused)) static int32_t ASBaseMeasurableView_getDrawableWidthWithADDrawable_(ASBaseMeasurableView *self, ADDrawable *drawable);

__attribute__((unused)) static int32_t ASBaseMeasurableView_getDrawableHeightWithADDrawable_withBoolean_(ASBaseMeasurableView *self, ADDrawable *drawable, bool considerPadding);

__attribute__((unused)) static void ASBaseMeasurableView_measureWithASHasWidgets_withASIWidget_withInt_withInt_withInt_(id<ASHasWidgets> parent, id<ASIWidget> widget, int32_t level, int32_t indent, int32_t initialWidth);

__attribute__((unused)) static int32_t ASBaseMeasurableView_nativeGetWidthWithASHasWidgets_withInt_withInt_withInt_(id<ASHasWidgets> parent, int32_t level, int32_t indent, int32_t initialWidth);

__attribute__((unused)) static void ASBaseMeasurableView_VerticalAligment_initWithNSString_withInt_(ASBaseMeasurableView_VerticalAligment *self, NSString *__name, int32_t __ordinal);

__attribute__((unused)) static void ASBaseMeasurableView_HorizonantalAligment_initWithNSString_withInt_(ASBaseMeasurableView_HorizonantalAligment *self, NSString *__name, int32_t __ordinal);

int32_t ASBaseMeasurableView_VERY_WIDE;

@implementation ASBaseMeasurableView

- (bool)isIgnoreDrawableHeight {
  return ignoreDrawableHeight_;
}

- (bool)isCompoundHorizontalPaddingConsumed {
  return isCompoundHorizontalPaddingConsumed_;
}

- (void)setCompoundHorizontalPaddingConsumedWithBoolean:(bool)isCompoundHorizontalPaddingConsumed {
  self->isCompoundHorizontalPaddingConsumed_ = isCompoundHorizontalPaddingConsumed;
}

- (void)setHorizontallyScrollingWithBoolean:(bool)horizontallyScrolling {
  self->mHorizontallyScrolling_ = horizontallyScrolling;
}

- (void)setIgnoreDrawableHeightWithBoolean:(bool)ignoreDrawableHeight {
  self->ignoreDrawableHeight_ = ignoreDrawableHeight;
}

- (ASBaseMeasurableView_VerticalAligment *)getVerticalAligment {
  return verticalAligment_;
}

- (void)setVerticalAligmentWithASBaseMeasurableView_VerticalAligment:(ASBaseMeasurableView_VerticalAligment *)verticalAligment {
  JreStrongAssign(&self->verticalAligment_, verticalAligment);
}

- (ASBaseMeasurableView_HorizonantalAligment *)getHorizonantalAligment {
  return horizonantalAligment_;
}

- (void)setHorizonantalAligmentWithASBaseMeasurableView_HorizonantalAligment:(ASBaseMeasurableView_HorizonantalAligment *)horizonantalAligment {
  JreStrongAssign(&self->horizonantalAligment_, horizonantalAligment);
}

- (int32_t)getDrawablePadding {
  return drawablePadding_;
}

- (void)setDrawablePaddingWithInt:(int32_t)drawablePadding {
  self->drawablePadding_ = drawablePadding;
}

- (ADDrawable *)getBottomDrawable {
  return bottomDrawable_;
}

- (void)setBottomDrawableWithADDrawable:(ADDrawable *)bottomDrawable {
  JreStrongAssign(&self->bottomDrawable_, bottomDrawable);
}

- (ADDrawable *)getLeftDrawable {
  return leftDrawable_;
}

- (void)setLeftDrawableWithADDrawable:(ADDrawable *)leftDrawable {
  JreStrongAssign(&self->leftDrawable_, leftDrawable);
}

- (ADDrawable *)getRightDrawable {
  return rightDrawable_;
}

- (void)setRightDrawableWithADDrawable:(ADDrawable *)rightDrawable {
  JreStrongAssign(&self->rightDrawable_, rightDrawable);
}

- (ADDrawable *)getTopDrawable {
  return topDrawable_;
}

- (void)setTopDrawableWithADDrawable:(ADDrawable *)topDrawable {
  JreStrongAssign(&self->topDrawable_, topDrawable);
}

- (instancetype)initWithASIWidget:(id<ASIWidget>)widget {
  ASBaseMeasurableView_initWithASIWidget_(self, widget);
  return self;
}

- (id<ASIWidget>)getWidget {
  return widget_;
}

- (void)onMeasureWithInt:(int32_t)widthMeasureSpec
                 withInt:(int32_t)heightMeasureSpec {
  [super onMeasureWithInt:widthMeasureSpec withInt:heightMeasureSpec];
  int32_t widthMode = ADView_MeasureSpec_getModeWithInt_(widthMeasureSpec);
  int32_t heightMode = ADView_MeasureSpec_getModeWithInt_(heightMeasureSpec);
  int32_t widthSize = ADView_MeasureSpec_getSizeWithInt_(widthMeasureSpec);
  int32_t heightSize = ADView_MeasureSpec_getSizeWithInt_(heightMeasureSpec);
  int32_t width;
  int32_t height;
  if (widthMode == ADView_MeasureSpec_EXACTLY) {
    width = widthSize;
  }
  else {
    width = mPaddingLeft_ + mPaddingRight_;
    width += ASBaseMeasurableView_measureWidth(self);
    if (!ignoreDrawableHeight_) {
      width += ASBaseMeasurableView_getDrawableWidthWithADDrawable_(self, leftDrawable_) + ASBaseMeasurableView_getDrawableWidthWithADDrawable_(self, rightDrawable_);
    }
    if ([ASIMeasureWidth_class_() isInstance:widget_]) {
      width = [((id<ASIMeasureWidth>) nil_chk(((id<ASIMeasureWidth>) cast_check(widget_, ASIMeasureWidth_class_())))) measureWidthWithInt:widthMode withInt:widthSize withInt:width];
    }
    if ([ASIMeasureWidth_class_() isInstance:self]) {
      width = [((id<ASIMeasureWidth>) cast_check(self, ASIMeasureWidth_class_())) measureWidthWithInt:widthMode withInt:widthSize withInt:width];
    }
    if ([ASIMaxWidth_class_() isInstance:widget_]) {
      int32_t maxWidth = [((id<ASIMaxWidth>) nil_chk(((id<ASIMaxWidth>) cast_check(widget_, ASIMaxWidth_class_())))) getMaxWidth];
      if (maxWidth != -1) {
        width = JavaLangMath_minWithInt_withInt_(width, maxWidth);
      }
    }
    width = JavaLangMath_maxWithInt_withInt_(width, [self getSuggestedMinimumWidth]);
    if (widthMode == ADView_MeasureSpec_AT_MOST) {
      width = JavaLangMath_minWithInt_withInt_(widthSize, width);
    }
  }
  if (mHorizontallyScrolling_) {
    width = ASBaseMeasurableView_VERY_WIDE;
  }
  if (heightMode == ADView_MeasureSpec_EXACTLY) {
    height = heightSize;
  }
  else {
    height = ASBaseMeasurableView_measureWidgetHeightWithInt_withNSObjectArray_(self, width, [IOSObjectArray arrayWithLength:0 type:NSObject_class_()]);
    if ([ASIMeasureHeight_class_() isInstance:self]) {
      height = [((id<ASIMeasureHeight>) cast_check(self, ASIMeasureHeight_class_())) measureHeightWithInt:heightMode withInt:heightSize withInt:height];
    }
    if ([ASIMeasureHeight_class_() isInstance:widget_]) {
      height = [((id<ASIMeasureHeight>) nil_chk(((id<ASIMeasureHeight>) cast_check(widget_, ASIMeasureHeight_class_())))) measureHeightWithInt:heightMode withInt:heightSize withInt:height];
    }
    height += mPaddingTop_ + mPaddingBottom_ + (ignoreDrawableHeight_ ? 0 : ASBaseMeasurableView_getDrawableHeightWithADDrawable_withBoolean_(self, topDrawable_, true) + ASBaseMeasurableView_getDrawableHeightWithADDrawable_withBoolean_(self, bottomDrawable_, true));
    if ([ASIMaxHeight_class_() isInstance:widget_]) {
      int32_t maxHeight = [((id<ASIMaxHeight>) nil_chk(((id<ASIMaxHeight>) cast_check(widget_, ASIMaxHeight_class_())))) getMaxHeight];
      if (maxHeight != -1) {
        height = JavaLangMath_minWithInt_withInt_(height, maxHeight);
      }
    }
    height = JavaLangMath_maxWithInt_withInt_(height, ASBaseMeasurableView_getDrawableHeightWithADDrawable_withBoolean_(self, leftDrawable_, false) + mPaddingTop_ + mPaddingBottom_);
    height = JavaLangMath_maxWithInt_withInt_(height, ASBaseMeasurableView_getDrawableHeightWithADDrawable_withBoolean_(self, rightDrawable_, false) + mPaddingTop_ + mPaddingBottom_);
    height = JavaLangMath_maxWithInt_withInt_([self getSuggestedMinimumHeight], height);
    if (heightMode == ADView_MeasureSpec_AT_MOST) {
      height = JavaLangMath_minWithInt_withInt_(height, heightSize);
    }
  }
  [self setMeasuredDimensionWithInt:width withInt:height];
}

- (int32_t)measureWidth {
  return ASBaseMeasurableView_measureWidth(self);
}

- (int32_t)measureWidgetHeightWithInt:(int32_t)width
                    withNSObjectArray:(IOSObjectArray *)nativeWidgets {
  return ASBaseMeasurableView_measureWidgetHeightWithInt_withNSObjectArray_(self, width, nativeWidgets);
}

- (int32_t)getDrawableWidthWithADDrawable:(ADDrawable *)drawable {
  return ASBaseMeasurableView_getDrawableWidthWithADDrawable_(self, drawable);
}

- (int32_t)getDrawableHeightWithADDrawable:(ADDrawable *)drawable
                               withBoolean:(bool)considerPadding {
  return ASBaseMeasurableView_getDrawableHeightWithADDrawable_withBoolean_(self, drawable, considerPadding);
}

- (int32_t)nativeMeasureWidthWithId:(id)uiView {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (int32_t)nativeMeasureHeightWithId:(id)uiView
                             withInt:(int32_t)width {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

+ (void)measureWidgetWithNoParentWithASHasWidgets:(id<ASHasWidgets>)parent
                                    withASIWidget:(id<ASIWidget>)widget
                                          withInt:(int32_t)level
                                          withInt:(int32_t)initialWidth
                                          withInt:(int32_t)indent {
  ASBaseMeasurableView_measureWidgetWithNoParentWithASHasWidgets_withASIWidget_withInt_withInt_withInt_(parent, widget, level, initialWidth, indent);
}

+ (void)measureWithASHasWidgets:(id<ASHasWidgets>)parent
                  withASIWidget:(id<ASIWidget>)widget
                        withInt:(int32_t)level
                        withInt:(int32_t)indent
                        withInt:(int32_t)initialWidth {
  ASBaseMeasurableView_measureWithASHasWidgets_withASIWidget_withInt_withInt_withInt_(parent, widget, level, indent, initialWidth);
}

+ (int32_t)nativeGetWidthWithASHasWidgets:(id<ASHasWidgets>)parent
                                  withInt:(int32_t)level
                                  withInt:(int32_t)indent
                                  withInt:(int32_t)initialWidth {
  return ASBaseMeasurableView_nativeGetWidthWithASHasWidgets_withInt_withInt_withInt_(parent, level, indent, initialWidth);
}

- (int32_t)getBaseline {
  return [((id<ASIWidget>) nil_chk(widget_)) getBaseLine];
}

- (ASRectM *)getWidgetBoundsWithInt:(int32_t)width
                            withInt:(int32_t)height
                  withNSObjectArray:(IOSObjectArray *)nativeWidgets {
  int32_t compoundPaddingLeft = 0;
  int32_t compoundPaddingRight = 0;
  int32_t compoundPaddingTop = 0;
  int32_t compoundPaddingBottom = 0;
  if (!ignoreDrawableHeight_) {
    if (!isCompoundHorizontalPaddingConsumed_) {
      if ([self isLayoutRtl]) {
        compoundPaddingLeft = [self getCompoundPaddingRight];
        compoundPaddingRight = [self getCompoundPaddingLeft];
      }
      else {
        compoundPaddingLeft = [self getCompoundPaddingLeft];
        compoundPaddingRight = [self getCompoundPaddingRight];
      }
    }
    compoundPaddingTop = [self getCompoundPaddingTop];
    compoundPaddingBottom = [self getCompoundPaddingBottom];
  }
  int32_t boundHeight = height - compoundPaddingTop - compoundPaddingBottom;
  int32_t alignY = 0;
  if (verticalAligment_ != nil) {
    int32_t sizeToFitHeight = ASBaseMeasurableView_measureWidgetHeightWithInt_withNSObjectArray_(self, width, nativeWidgets);
    switch ([verticalAligment_ ordinal]) {
      case ASBaseMeasurableView_VerticalAligment_Enum_top:
      break;
      case ASBaseMeasurableView_VerticalAligment_Enum_middle:
      alignY = JreIntDiv((height - compoundPaddingTop - compoundPaddingBottom - sizeToFitHeight), 2);
      break;
      case ASBaseMeasurableView_VerticalAligment_Enum_bottom:
      alignY = (height - compoundPaddingTop - compoundPaddingBottom - sizeToFitHeight);
      break;
      default:
      break;
    }
    boundHeight = sizeToFitHeight;
  }
  int32_t boundWidth = width - compoundPaddingLeft - compoundPaddingRight;
  int32_t alignX = 0;
  if (horizonantalAligment_ != nil) {
    int32_t sizeToFitWidth = ASBaseMeasurableView_measureWidth(self);
    if (sizeToFitWidth < boundWidth) {
      switch ([horizonantalAligment_ ordinal]) {
        case ASBaseMeasurableView_HorizonantalAligment_Enum_left:
        break;
        case ASBaseMeasurableView_HorizonantalAligment_Enum_center:
        alignX = JreIntDiv((boundWidth - sizeToFitWidth), 2);
        break;
        case ASBaseMeasurableView_HorizonantalAligment_Enum_right:
        alignX = (boundWidth - sizeToFitWidth);
        break;
        default:
        break;
      }
      boundWidth = sizeToFitWidth;
    }
  }
  return create_ASRectM_initWithInt_withInt_withInt_withInt_(compoundPaddingLeft + alignX, compoundPaddingTop + alignY, boundWidth, boundHeight);
}

- (int32_t)getCompoundPaddingBottom {
  int32_t compoundPaddingBottom = [self getPaddingBottom];
  if ([self getBottomDrawable] != nil) {
    compoundPaddingBottom += [((ADDrawable *) nil_chk([self getBottomDrawable])) getMinimumHeight] + drawablePadding_;
  }
  return compoundPaddingBottom;
}

- (int32_t)getCompoundPaddingTop {
  int32_t compoundPaddingTop = [self getPaddingTop];
  if ([self getTopDrawable] != nil) {
    compoundPaddingTop += [((ADDrawable *) nil_chk([self getTopDrawable])) getMinimumHeight] + drawablePadding_;
  }
  return compoundPaddingTop;
}

- (int32_t)getCompoundPaddingRight {
  int32_t compoundPaddingRight = [self getPaddingRight];
  if (rightDrawable_ != nil) {
    compoundPaddingRight += [((ADDrawable *) nil_chk([self getRightDrawable])) getMinimumWidth] + drawablePadding_;
  }
  return compoundPaddingRight;
}

- (int32_t)getCompoundPaddingLeft {
  int32_t compoundPaddingLeft = [self getPaddingLeft];
  if (leftDrawable_ != nil) {
    compoundPaddingLeft += [leftDrawable_ getMinimumWidth] + drawablePadding_;
  }
  return compoundPaddingLeft;
}

- (int32_t)getCompoundPaddingLeftWithIgnoreCheck {
  if (isCompoundHorizontalPaddingConsumed_) {
    return 0;
  }
  return [self getCompoundPaddingLeft];
}

- (int32_t)getCompoundPaddingRightWithIgnoreCheck {
  if (isCompoundHorizontalPaddingConsumed_) {
    return 0;
  }
  return [self getCompoundPaddingRight];
}

- (ASRectM *)getLeftDrawableBoundsWithInt:(int32_t)x
                                  withInt:(int32_t)y
                                  withInt:(int32_t)width
                                  withInt:(int32_t)height {
  if (leftDrawable_ != nil) {
    int32_t dWidth = [leftDrawable_ getMinimumWidth];
    int32_t dHeight = [((ADDrawable *) nil_chk(leftDrawable_)) getMinimumHeight];
    int32_t dy = [self getPaddingTop];
    int32_t dx = 0;
    if ([self isLayoutRtl]) {
      dx = width - dWidth - [self getPaddingLeft];
    }
    else {
      dx = [self getPaddingLeft];
    }
    if (height > dHeight) {
      JrePlusAssignIntD(&dy, (height - [self getPaddingTop] - [self getPaddingBottom] - dHeight) / 2.0);
    }
    return create_ASRectM_initWithInt_withInt_withInt_withInt_(dx, dy, dWidth, dHeight);
  }
  return create_ASRectM_initWithInt_withInt_withInt_withInt_(0, 0, 0, 0);
}

- (ASRectM *)getRightDrawableBoundsWithInt:(int32_t)x
                                   withInt:(int32_t)y
                                   withInt:(int32_t)width
                                   withInt:(int32_t)height {
  if (rightDrawable_ != nil) {
    int32_t dWidth = [rightDrawable_ getMinimumWidth];
    int32_t dHeight = [((ADDrawable *) nil_chk(rightDrawable_)) getMinimumHeight];
    int32_t dy = [self getPaddingTop];
    int32_t dx = 0;
    if ([self isLayoutRtl]) {
      dx = [self getPaddingRight];
    }
    else {
      dx = width - dWidth - [self getPaddingRight];
    }
    if (height > dHeight) {
      JrePlusAssignIntD(&dy, (height - [self getPaddingTop] - [self getPaddingBottom] - dHeight) / 2.0);
    }
    return create_ASRectM_initWithInt_withInt_withInt_withInt_(dx, dy, dWidth, dHeight);
  }
  return create_ASRectM_initWithInt_withInt_withInt_withInt_(0, 0, 0, 0);
}

- (ASRectM *)getTopDrawableBoundsWithInt:(int32_t)x
                                 withInt:(int32_t)y
                                 withInt:(int32_t)width
                                 withInt:(int32_t)height {
  if (topDrawable_ != nil) {
    int32_t dWidth = [topDrawable_ getMinimumWidth];
    int32_t dHeight = [((ADDrawable *) nil_chk(topDrawable_)) getMinimumHeight];
    int32_t dy = [self getPaddingTop];
    int32_t dx = [self getPaddingLeft];
    if (width > dWidth) {
      JrePlusAssignIntD(&dx, ((width - [self getPaddingLeft] - [self getPaddingRight] - dWidth) / 2.0));
    }
    return create_ASRectM_initWithInt_withInt_withInt_withInt_(dx, dy, dWidth, dHeight);
  }
  return create_ASRectM_initWithInt_withInt_withInt_withInt_(0, 0, 0, 0);
}

- (ASRectM *)getBottomDrawableBoundsWithInt:(int32_t)x
                                    withInt:(int32_t)y
                                    withInt:(int32_t)width
                                    withInt:(int32_t)height {
  if (bottomDrawable_ != nil) {
    int32_t dWidth = [bottomDrawable_ getMinimumWidth];
    int32_t dHeight = [((ADDrawable *) nil_chk(bottomDrawable_)) getMinimumHeight];
    int32_t dy = height - dHeight - [self getPaddingBottom];
    int32_t dx = [self getPaddingLeft];
    if (width > dWidth) {
      JrePlusAssignIntD(&dx, ((width - [self getPaddingLeft] - [self getPaddingRight] - dWidth) / 2.0));
    }
    return create_ASRectM_initWithInt_withInt_withInt_withInt_(dx, dy, dWidth, dHeight);
  }
  return create_ASRectM_initWithInt_withInt_withInt_withInt_(0, 0, 0, 0);
}

- (bool)isVerticalAlignTop {
  return verticalAligment_ == JreLoadEnum(ASBaseMeasurableView_VerticalAligment, top);
}

- (bool)isVerticalAlignBottom {
  return verticalAligment_ == JreLoadEnum(ASBaseMeasurableView_VerticalAligment, bottom);
}

- (bool)isVerticalAlignMiddle {
  return verticalAligment_ == JreLoadEnum(ASBaseMeasurableView_VerticalAligment, middle);
}

- (bool)hasDrawables {
  return leftDrawable_ != nil || rightDrawable_ != nil || topDrawable_ != nil || bottomDrawable_ != nil;
}

- (void)__javaClone:(ASBaseMeasurableView *)original {
  [super __javaClone:original];
  [widget_ release];
}

- (void)dealloc {
  RELEASE_(leftDrawable_);
  RELEASE_(rightDrawable_);
  RELEASE_(topDrawable_);
  RELEASE_(bottomDrawable_);
  RELEASE_(verticalAligment_);
  RELEASE_(horizonantalAligment_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 1, -1, -1, -1, -1 },
    { NULL, "LASBaseMeasurableView_VerticalAligment;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "LASBaseMeasurableView_HorizonantalAligment;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "LADDrawable;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "LADDrawable;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 11, -1, -1, -1, -1 },
    { NULL, "LADDrawable;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 11, -1, -1, -1, -1 },
    { NULL, "LADDrawable;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 11, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 15, -1, -1, -1, -1 },
    { NULL, "LASIWidget;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 16, 17, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x82, 18, 19, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 20, 11, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 21, 22, -1, -1, -1, -1 },
    { NULL, "I", 0x401, 23, 24, -1, -1, -1, -1 },
    { NULL, "I", 0x401, 25, 26, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 27, 28, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 29, 28, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 30, 31, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASRectM;", 0x81, 32, 33, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASRectM;", 0x1, 34, 35, -1, -1, -1, -1 },
    { NULL, "LASRectM;", 0x1, 36, 35, -1, -1, -1, -1 },
    { NULL, "LASRectM;", 0x1, 37, 35, -1, -1, -1, -1 },
    { NULL, "LASRectM;", 0x1, 38, 35, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(isIgnoreDrawableHeight);
  methods[1].selector = @selector(isCompoundHorizontalPaddingConsumed);
  methods[2].selector = @selector(setCompoundHorizontalPaddingConsumedWithBoolean:);
  methods[3].selector = @selector(setHorizontallyScrollingWithBoolean:);
  methods[4].selector = @selector(setIgnoreDrawableHeightWithBoolean:);
  methods[5].selector = @selector(getVerticalAligment);
  methods[6].selector = @selector(setVerticalAligmentWithASBaseMeasurableView_VerticalAligment:);
  methods[7].selector = @selector(getHorizonantalAligment);
  methods[8].selector = @selector(setHorizonantalAligmentWithASBaseMeasurableView_HorizonantalAligment:);
  methods[9].selector = @selector(getDrawablePadding);
  methods[10].selector = @selector(setDrawablePaddingWithInt:);
  methods[11].selector = @selector(getBottomDrawable);
  methods[12].selector = @selector(setBottomDrawableWithADDrawable:);
  methods[13].selector = @selector(getLeftDrawable);
  methods[14].selector = @selector(setLeftDrawableWithADDrawable:);
  methods[15].selector = @selector(getRightDrawable);
  methods[16].selector = @selector(setRightDrawableWithADDrawable:);
  methods[17].selector = @selector(getTopDrawable);
  methods[18].selector = @selector(setTopDrawableWithADDrawable:);
  methods[19].selector = @selector(initWithASIWidget:);
  methods[20].selector = @selector(getWidget);
  methods[21].selector = @selector(onMeasureWithInt:withInt:);
  methods[22].selector = @selector(measureWidth);
  methods[23].selector = @selector(measureWidgetHeightWithInt:withNSObjectArray:);
  methods[24].selector = @selector(getDrawableWidthWithADDrawable:);
  methods[25].selector = @selector(getDrawableHeightWithADDrawable:withBoolean:);
  methods[26].selector = @selector(nativeMeasureWidthWithId:);
  methods[27].selector = @selector(nativeMeasureHeightWithId:withInt:);
  methods[28].selector = @selector(measureWidgetWithNoParentWithASHasWidgets:withASIWidget:withInt:withInt:withInt:);
  methods[29].selector = @selector(measureWithASHasWidgets:withASIWidget:withInt:withInt:withInt:);
  methods[30].selector = @selector(nativeGetWidthWithASHasWidgets:withInt:withInt:withInt:);
  methods[31].selector = @selector(getBaseline);
  methods[32].selector = @selector(getWidgetBoundsWithInt:withInt:withNSObjectArray:);
  methods[33].selector = @selector(getCompoundPaddingBottom);
  methods[34].selector = @selector(getCompoundPaddingTop);
  methods[35].selector = @selector(getCompoundPaddingRight);
  methods[36].selector = @selector(getCompoundPaddingLeft);
  methods[37].selector = @selector(getCompoundPaddingLeftWithIgnoreCheck);
  methods[38].selector = @selector(getCompoundPaddingRightWithIgnoreCheck);
  methods[39].selector = @selector(getLeftDrawableBoundsWithInt:withInt:withInt:withInt:);
  methods[40].selector = @selector(getRightDrawableBoundsWithInt:withInt:withInt:withInt:);
  methods[41].selector = @selector(getTopDrawableBoundsWithInt:withInt:withInt:withInt:);
  methods[42].selector = @selector(getBottomDrawableBoundsWithInt:withInt:withInt:withInt:);
  methods[43].selector = @selector(isVerticalAlignTop);
  methods[44].selector = @selector(isVerticalAlignBottom);
  methods[45].selector = @selector(isVerticalAlignMiddle);
  methods[46].selector = @selector(hasDrawables);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "widget_", "LASIWidget;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "leftDrawable_", "LADDrawable;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "rightDrawable_", "LADDrawable;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "topDrawable_", "LADDrawable;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "bottomDrawable_", "LADDrawable;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "isCompoundHorizontalPaddingConsumed_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "verticalAligment_", "LASBaseMeasurableView_VerticalAligment;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "horizonantalAligment_", "LASBaseMeasurableView_HorizonantalAligment;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "drawablePadding_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "ignoreDrawableHeight_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mHorizontallyScrolling_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "VERY_WIDE", "I", .constantValue.asLong = 0, 0x9, -1, 39, -1, -1 },
  };
  static const void *ptrTable[] = { "setCompoundHorizontalPaddingConsumed", "Z", "setHorizontallyScrolling", "setIgnoreDrawableHeight", "setVerticalAligment", "LASBaseMeasurableView_VerticalAligment;", "setHorizonantalAligment", "LASBaseMeasurableView_HorizonantalAligment;", "setDrawablePadding", "I", "setBottomDrawable", "LADDrawable;", "setLeftDrawable", "setRightDrawable", "setTopDrawable", "LASIWidget;", "onMeasure", "II", "measureWidgetHeight", "I[LNSObject;", "getDrawableWidth", "getDrawableHeight", "LADDrawable;Z", "nativeMeasureWidth", "LNSObject;", "nativeMeasureHeight", "LNSObject;I", "measureWidgetWithNoParent", "LASHasWidgets;LASIWidget;III", "measure", "nativeGetWidth", "LASHasWidgets;III", "getWidgetBounds", "II[LNSObject;", "getLeftDrawableBounds", "IIII", "getRightDrawableBounds", "getTopDrawableBounds", "getBottomDrawableBounds", &ASBaseMeasurableView_VERY_WIDE, "LASBaseMeasurableView_VerticalAligment;LASBaseMeasurableView_HorizonantalAligment;" };
  static const J2ObjcClassInfo _ASBaseMeasurableView = { "BaseMeasurableView", "com.ashera.view", ptrTable, methods, fields, 7, 0x401, 47, 12, -1, 40, -1, -1, -1 };
  return &_ASBaseMeasurableView;
}

@end

void ASBaseMeasurableView_initWithASIWidget_(ASBaseMeasurableView *self, id<ASIWidget> widget) {
  ADView_init(self);
  self->widget_ = widget;
  int32_t width = ASPluginInvoker_getScreenWidth();
  int32_t height = ASPluginInvoker_getScreenHeight();
  ASBaseMeasurableView_VERY_WIDE = height > width ? height * 2 : width * 2;
}

int32_t ASBaseMeasurableView_measureWidth(ASBaseMeasurableView *self) {
  int32_t width;
  if ([ASICustomMeasureWidth_class_() isInstance:self->widget_]) {
    width = [((id<ASICustomMeasureWidth>) nil_chk(((id<ASICustomMeasureWidth>) cast_check(self->widget_, ASICustomMeasureWidth_class_())))) measureWidth];
  }
  else {
    width = [self nativeMeasureWidthWithId:[((id<ASIWidget>) nil_chk(self->widget_)) asNativeWidget]];
  }
  return width;
}

int32_t ASBaseMeasurableView_measureWidgetHeightWithInt_withNSObjectArray_(ASBaseMeasurableView *self, int32_t width, IOSObjectArray *nativeWidgets) {
  int32_t height;
  int32_t textViewWidth = width - (self->ignoreDrawableHeight_ ? 0 : ([self getCompoundPaddingLeft] + [self getCompoundPaddingRight]));
  if (textViewWidth == 0) {
    textViewWidth = 1;
  }
  if (nativeWidgets != nil && nativeWidgets->size_ > 0) {
    height = 0;
    {
      IOSObjectArray *a__ = nativeWidgets;
      id const *b__ = a__->buffer_;
      id const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        id object = RETAIN_AND_AUTORELEASE(*b__++);
        height += [self nativeMeasureHeightWithId:object withInt:textViewWidth];
      }
    }
  }
  else if ([ASICustomMeasureHeight_class_() isInstance:self->widget_]) {
    height = [((id<ASICustomMeasureHeight>) nil_chk(((id<ASICustomMeasureHeight>) cast_check(self->widget_, ASICustomMeasureHeight_class_())))) measureHeightWithInt:textViewWidth];
  }
  else {
    height = [self nativeMeasureHeightWithId:[((id<ASIWidget>) nil_chk(self->widget_)) asNativeWidget] withInt:textViewWidth];
  }
  return height;
}

int32_t ASBaseMeasurableView_getDrawableWidthWithADDrawable_(ASBaseMeasurableView *self, ADDrawable *drawable) {
  if (drawable == nil) {
    return 0;
  }
  return [drawable getMinimumWidth] + self->drawablePadding_;
}

int32_t ASBaseMeasurableView_getDrawableHeightWithADDrawable_withBoolean_(ASBaseMeasurableView *self, ADDrawable *drawable, bool considerPadding) {
  if (drawable == nil || ![drawable hasDrawable]) {
    return 0;
  }
  return [drawable getMinimumHeight] + (considerPadding ? self->drawablePadding_ : 0);
}

void ASBaseMeasurableView_measureWidgetWithNoParentWithASHasWidgets_withASIWidget_withInt_withInt_withInt_(id<ASHasWidgets> parent, id<ASIWidget> widget, int32_t level, int32_t initialWidth, int32_t indent) {
  ASBaseMeasurableView_initialize();
  ASBaseMeasurableView_measureWithASHasWidgets_withASIWidget_withInt_withInt_withInt_(parent, widget, level, indent, initialWidth);
}

void ASBaseMeasurableView_measureWithASHasWidgets_withASIWidget_withInt_withInt_withInt_(id<ASHasWidgets> parent, id<ASIWidget> widget, int32_t level, int32_t indent, int32_t initialWidth) {
  ASBaseMeasurableView_initialize();
  ADViewGroup *frameLayout = create_ADFrameLayout_init();
  ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk((widget))) asWidget], [ADView class]);
  if ([view isKindOfClass:[ADViewGroup class]]) {
    frameLayout = (ADViewGroup *) view;
  }
  else {
    [((ADViewGroup *) nil_chk(((ADViewGroup *) cast_chk([((ADView *) nil_chk(view)) getParent], [ADViewGroup class])))) removeViewWithADView:view];
    [frameLayout addViewWithADView:view];
  }
  [((ADViewGroup *) nil_chk(frameLayout)) setLayoutParamsWithADViewGroup_LayoutParams:create_ADViewGroup_LayoutParams_initWithInt_withInt_(ASBaseMeasurableView_nativeGetWidthWithASHasWidgets_withInt_withInt_withInt_(parent, level, indent, initialWidth), ADViewGroup_LayoutParams_WRAP_CONTENT)];
  int32_t w = ((ADViewGroup_LayoutParams *) nil_chk([frameLayout getLayoutParams]))->width_;
  int32_t h = ((ADViewGroup_LayoutParams *) nil_chk([frameLayout getLayoutParams]))->height_;
  int32_t wmeasureSpec = ADView_MeasureSpec_UNSPECIFIED;
  int32_t hmeasureSpec = ADView_MeasureSpec_UNSPECIFIED;
  if (h >= 0) {
    hmeasureSpec = ADView_MeasureSpec_EXACTLY;
  }
  if (w >= 0) {
    wmeasureSpec = ADView_MeasureSpec_EXACTLY;
  }
  [frameLayout measureWithInt:ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_(w, wmeasureSpec) withInt:ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_(h, hmeasureSpec)];
  [frameLayout layoutWithInt:0 withInt:0 withInt:w withInt:[((ADView *) nil_chk(view)) getMeasuredHeight]];
}

int32_t ASBaseMeasurableView_nativeGetWidthWithASHasWidgets_withInt_withInt_withInt_(id<ASHasWidgets> parent, int32_t level, int32_t indent, int32_t initialWidth) {
  ASBaseMeasurableView_initialize();
  return [((ADView *) nil_chk(((ADView *) cast_chk([((id<ASHasWidgets>) nil_chk(parent)) asWidget], [ADView class])))) getMeasuredWidth] - initialWidth - (level * indent);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASBaseMeasurableView)

J2OBJC_NAME_MAPPING(ASBaseMeasurableView, "com.ashera.view", "AS")

J2OBJC_INITIALIZED_DEFN(ASBaseMeasurableView_VerticalAligment)

ASBaseMeasurableView_VerticalAligment *ASBaseMeasurableView_VerticalAligment_values_[3];

@implementation ASBaseMeasurableView_VerticalAligment

+ (IOSObjectArray *)values {
  return ASBaseMeasurableView_VerticalAligment_values();
}

+ (ASBaseMeasurableView_VerticalAligment *)valueOfWithNSString:(NSString *)name {
  return ASBaseMeasurableView_VerticalAligment_valueOfWithNSString_(name);
}

- (ASBaseMeasurableView_VerticalAligment_Enum)toNSEnum {
  return (ASBaseMeasurableView_VerticalAligment_Enum)[self ordinal];
}

- (ASBaseMeasurableView_VerticalAligment_Enum)enumValue {
  return (ASBaseMeasurableView_VerticalAligment_Enum)[self ordinal];
}

+ (ASBaseMeasurableView_VerticalAligment *)fromNSEnum:(ASBaseMeasurableView_VerticalAligment_Enum)nativeValue {
  ASBaseMeasurableView_VerticalAligment *javaEnum = ASBaseMeasurableView_VerticalAligment_fromOrdinal(nativeValue);
  if (!javaEnum) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"NSEnum ASBaseMeasurableView_VerticalAligment_Enum out of range.");
  return javaEnum;
}

- (ASBaseMeasurableView_VerticalAligment_ORDINAL)ordinal {
  return (ASBaseMeasurableView_VerticalAligment_ORDINAL)[super ordinal];
}

- (nullable instancetype)initWithVerticalAligment:(ASBaseMeasurableView_VerticalAligment_Enum)value {
  return RETAIN_(ASBaseMeasurableView_VerticalAligment_fromOrdinal((ASBaseMeasurableView_VerticalAligment_ORDINAL)value));
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[LASBaseMeasurableView_VerticalAligment;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASBaseMeasurableView_VerticalAligment;", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(values);
  methods[1].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "middle", "LASBaseMeasurableView_VerticalAligment;", .constantValue.asLong = 0, 0x4019, -1, 2, -1, -1 },
    { "bottom", "LASBaseMeasurableView_VerticalAligment;", .constantValue.asLong = 0, 0x4019, -1, 3, -1, -1 },
    { "top", "LASBaseMeasurableView_VerticalAligment;", .constantValue.asLong = 0, 0x4019, -1, 4, -1, -1 },
  };
  static const void *ptrTable[] = { "valueOf", "LNSString;", &JreEnum(ASBaseMeasurableView_VerticalAligment, middle), &JreEnum(ASBaseMeasurableView_VerticalAligment, bottom), &JreEnum(ASBaseMeasurableView_VerticalAligment, top), "LASBaseMeasurableView;", "Ljava/lang/Enum<Lcom/ashera/view/BaseMeasurableView$VerticalAligment;>;" };
  static const J2ObjcClassInfo _ASBaseMeasurableView_VerticalAligment = { "VerticalAligment", "com.ashera.view", ptrTable, methods, fields, 7, 0x4019, 2, 3, 5, -1, -1, 6, -1 };
  return &_ASBaseMeasurableView_VerticalAligment;
}

+ (void)initialize {
  if (self == [ASBaseMeasurableView_VerticalAligment class]) {
    size_t objSize = class_getInstanceSize(self);
    size_t allocSize = 3 * objSize;
    uintptr_t ptr = (uintptr_t)calloc(allocSize, 1);
    id e;
    for (int32_t i = 0; i < 3; i++) {
      ((void)(ASBaseMeasurableView_VerticalAligment_values_[i] = e = objc_constructInstance(self, (void *)ptr)), ptr += objSize);
      ASBaseMeasurableView_VerticalAligment_initWithNSString_withInt_(e, JreEnumConstantName(ASBaseMeasurableView_VerticalAligment_class_(), i), i);
    }
    J2OBJC_SET_INITIALIZED(ASBaseMeasurableView_VerticalAligment)
  }
}

@end

void ASBaseMeasurableView_VerticalAligment_initWithNSString_withInt_(ASBaseMeasurableView_VerticalAligment *self, NSString *__name, int32_t __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

IOSObjectArray *ASBaseMeasurableView_VerticalAligment_values() {
  ASBaseMeasurableView_VerticalAligment_initialize();
  return [IOSObjectArray arrayWithObjects:ASBaseMeasurableView_VerticalAligment_values_ count:3 type:ASBaseMeasurableView_VerticalAligment_class_()];
}

ASBaseMeasurableView_VerticalAligment *ASBaseMeasurableView_VerticalAligment_valueOfWithNSString_(NSString *name) {
  ASBaseMeasurableView_VerticalAligment_initialize();
  for (int i = 0; i < 3; i++) {
    ASBaseMeasurableView_VerticalAligment *e = ASBaseMeasurableView_VerticalAligment_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
}

ASBaseMeasurableView_VerticalAligment *ASBaseMeasurableView_VerticalAligment_fromOrdinal(ASBaseMeasurableView_VerticalAligment_ORDINAL ordinal) {
  ASBaseMeasurableView_VerticalAligment_initialize();
  if (ordinal < 0 || ordinal >= 3) {
    return nil;
  }
  return ASBaseMeasurableView_VerticalAligment_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASBaseMeasurableView_VerticalAligment)

J2OBJC_INITIALIZED_DEFN(ASBaseMeasurableView_HorizonantalAligment)

ASBaseMeasurableView_HorizonantalAligment *ASBaseMeasurableView_HorizonantalAligment_values_[3];

@implementation ASBaseMeasurableView_HorizonantalAligment

+ (IOSObjectArray *)values {
  return ASBaseMeasurableView_HorizonantalAligment_values();
}

+ (ASBaseMeasurableView_HorizonantalAligment *)valueOfWithNSString:(NSString *)name {
  return ASBaseMeasurableView_HorizonantalAligment_valueOfWithNSString_(name);
}

- (ASBaseMeasurableView_HorizonantalAligment_Enum)toNSEnum {
  return (ASBaseMeasurableView_HorizonantalAligment_Enum)[self ordinal];
}

- (ASBaseMeasurableView_HorizonantalAligment_Enum)enumValue {
  return (ASBaseMeasurableView_HorizonantalAligment_Enum)[self ordinal];
}

+ (ASBaseMeasurableView_HorizonantalAligment *)fromNSEnum:(ASBaseMeasurableView_HorizonantalAligment_Enum)nativeValue {
  ASBaseMeasurableView_HorizonantalAligment *javaEnum = ASBaseMeasurableView_HorizonantalAligment_fromOrdinal(nativeValue);
  if (!javaEnum) @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"NSEnum ASBaseMeasurableView_HorizonantalAligment_Enum out of range.");
  return javaEnum;
}

- (ASBaseMeasurableView_HorizonantalAligment_ORDINAL)ordinal {
  return (ASBaseMeasurableView_HorizonantalAligment_ORDINAL)[super ordinal];
}

- (nullable instancetype)initWithHorizonantalAligment:(ASBaseMeasurableView_HorizonantalAligment_Enum)value {
  return RETAIN_(ASBaseMeasurableView_HorizonantalAligment_fromOrdinal((ASBaseMeasurableView_HorizonantalAligment_ORDINAL)value));
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[LASBaseMeasurableView_HorizonantalAligment;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASBaseMeasurableView_HorizonantalAligment;", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(values);
  methods[1].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "center", "LASBaseMeasurableView_HorizonantalAligment;", .constantValue.asLong = 0, 0x4019, -1, 2, -1, -1 },
    { "left", "LASBaseMeasurableView_HorizonantalAligment;", .constantValue.asLong = 0, 0x4019, -1, 3, -1, -1 },
    { "right", "LASBaseMeasurableView_HorizonantalAligment;", .constantValue.asLong = 0, 0x4019, -1, 4, -1, -1 },
  };
  static const void *ptrTable[] = { "valueOf", "LNSString;", &JreEnum(ASBaseMeasurableView_HorizonantalAligment, center), &JreEnum(ASBaseMeasurableView_HorizonantalAligment, left), &JreEnum(ASBaseMeasurableView_HorizonantalAligment, right), "LASBaseMeasurableView;", "Ljava/lang/Enum<Lcom/ashera/view/BaseMeasurableView$HorizonantalAligment;>;" };
  static const J2ObjcClassInfo _ASBaseMeasurableView_HorizonantalAligment = { "HorizonantalAligment", "com.ashera.view", ptrTable, methods, fields, 7, 0x4019, 2, 3, 5, -1, -1, 6, -1 };
  return &_ASBaseMeasurableView_HorizonantalAligment;
}

+ (void)initialize {
  if (self == [ASBaseMeasurableView_HorizonantalAligment class]) {
    size_t objSize = class_getInstanceSize(self);
    size_t allocSize = 3 * objSize;
    uintptr_t ptr = (uintptr_t)calloc(allocSize, 1);
    id e;
    for (int32_t i = 0; i < 3; i++) {
      ((void)(ASBaseMeasurableView_HorizonantalAligment_values_[i] = e = objc_constructInstance(self, (void *)ptr)), ptr += objSize);
      ASBaseMeasurableView_HorizonantalAligment_initWithNSString_withInt_(e, JreEnumConstantName(ASBaseMeasurableView_HorizonantalAligment_class_(), i), i);
    }
    J2OBJC_SET_INITIALIZED(ASBaseMeasurableView_HorizonantalAligment)
  }
}

@end

void ASBaseMeasurableView_HorizonantalAligment_initWithNSString_withInt_(ASBaseMeasurableView_HorizonantalAligment *self, NSString *__name, int32_t __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

IOSObjectArray *ASBaseMeasurableView_HorizonantalAligment_values() {
  ASBaseMeasurableView_HorizonantalAligment_initialize();
  return [IOSObjectArray arrayWithObjects:ASBaseMeasurableView_HorizonantalAligment_values_ count:3 type:ASBaseMeasurableView_HorizonantalAligment_class_()];
}

ASBaseMeasurableView_HorizonantalAligment *ASBaseMeasurableView_HorizonantalAligment_valueOfWithNSString_(NSString *name) {
  ASBaseMeasurableView_HorizonantalAligment_initialize();
  for (int i = 0; i < 3; i++) {
    ASBaseMeasurableView_HorizonantalAligment *e = ASBaseMeasurableView_HorizonantalAligment_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
}

ASBaseMeasurableView_HorizonantalAligment *ASBaseMeasurableView_HorizonantalAligment_fromOrdinal(ASBaseMeasurableView_HorizonantalAligment_ORDINAL ordinal) {
  ASBaseMeasurableView_HorizonantalAligment_initialize();
  if (ordinal < 0 || ordinal >= 3) {
    return nil;
  }
  return ASBaseMeasurableView_HorizonantalAligment_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASBaseMeasurableView_HorizonantalAligment)
