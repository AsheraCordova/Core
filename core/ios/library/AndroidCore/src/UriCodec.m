//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroid\src\main\java\r\android\net\UriCodec.java
//

#define J2OBJC_IMPORTED_BY_JAVA_IMPLEMENTATION 1




#include "J2ObjC_source.h"
#include "UriCodec.h"
#include "java/lang/Boolean.h"
#include "java/lang/Byte.h"
#include "java/lang/Character.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuilder.h"
#include "java/net/URISyntaxException.h"
#include "java/nio/ByteBuffer.h"
#include "java/nio/CharBuffer.h"
#include "java/nio/charset/CharacterCodingException.h"
#include "java/nio/charset/Charset.h"
#include "java/nio/charset/CharsetDecoder.h"
#include "java/nio/charset/CodingErrorAction.h"


@class NSString;


#pragma clang diagnostic error "-Wreturn-type"
#pragma clang diagnostic ignored "-Wswitch"


@interface ADUriCodec ()

- (instancetype)init;

/*!
 @brief Interprets a char as hex digits, returning a number from -1 (invalid char) to 15 ('f').
 */
+ (int32_t)hexCharToValueWithChar:(unichar)c;

+ (JavaNetURISyntaxException *)unexpectedCharacterExceptionWithNSString:(NSString *)uri
                                                           withNSString:(NSString *)name
                                                               withChar:(unichar)unexpected
                                                                withInt:(int32_t)index;

+ (unichar)getNextCharacterWithNSString:(NSString *)uri
                                withInt:(int32_t)index
                                withInt:(int32_t)end
                           withNSString:(NSString *)name;

+ (void)appendDecodedWithJavaLangStringBuilder:(JavaLangStringBuilder *)builder
                                  withNSString:(NSString *)s
                                   withBoolean:(bool)convertPlus
                     withJavaNioCharsetCharset:(JavaNioCharsetCharset *)charset
                                   withBoolean:(bool)throwOnFailure;

+ (void)flushDecodingByteAccumulatorWithJavaLangStringBuilder:(JavaLangStringBuilder *)builder
                             withJavaNioCharsetCharsetDecoder:(JavaNioCharsetCharsetDecoder *)decoder
                                        withJavaNioByteBuffer:(JavaNioByteBuffer *)byteBuffer
                                                  withBoolean:(bool)throwOnFailure;

@end

/*!
 @brief Character to be output when there's an error decoding an input.
 */
inline unichar ADUriCodec_get_INVALID_INPUT_CHARACTER(void);
#define ADUriCodec_INVALID_INPUT_CHARACTER 0xfffd
J2OBJC_STATIC_FIELD_CONSTANT(ADUriCodec, INVALID_INPUT_CHARACTER, unichar)

__attribute__((unused)) static void ADUriCodec_init(ADUriCodec *self);

__attribute__((unused)) static ADUriCodec *new_ADUriCodec_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static ADUriCodec *create_ADUriCodec_init(void);

__attribute__((unused)) static int32_t ADUriCodec_hexCharToValueWithChar_(unichar c);

__attribute__((unused)) static JavaNetURISyntaxException *ADUriCodec_unexpectedCharacterExceptionWithNSString_withNSString_withChar_withInt_(NSString *uri, NSString *name, unichar unexpected, int32_t index);

__attribute__((unused)) static unichar ADUriCodec_getNextCharacterWithNSString_withInt_withInt_withNSString_(NSString *uri, int32_t index, int32_t end, NSString *name);

__attribute__((unused)) static void ADUriCodec_appendDecodedWithJavaLangStringBuilder_withNSString_withBoolean_withJavaNioCharsetCharset_withBoolean_(JavaLangStringBuilder *builder, NSString *s, bool convertPlus, JavaNioCharsetCharset *charset, bool throwOnFailure);

__attribute__((unused)) static void ADUriCodec_flushDecodingByteAccumulatorWithJavaLangStringBuilder_withJavaNioCharsetCharsetDecoder_withJavaNioByteBuffer_withBoolean_(JavaLangStringBuilder *builder, JavaNioCharsetCharsetDecoder *decoder, JavaNioByteBuffer *byteBuffer, bool throwOnFailure);

@implementation ADUriCodec

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADUriCodec_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (int32_t)hexCharToValueWithChar:(unichar)c {
  return ADUriCodec_hexCharToValueWithChar_(c);
}

+ (JavaNetURISyntaxException *)unexpectedCharacterExceptionWithNSString:(NSString *)uri
                                                           withNSString:(NSString *)name
                                                               withChar:(unichar)unexpected
                                                                withInt:(int32_t)index {
  return ADUriCodec_unexpectedCharacterExceptionWithNSString_withNSString_withChar_withInt_(uri, name, unexpected, index);
}

+ (unichar)getNextCharacterWithNSString:(NSString *)uri
                                withInt:(int32_t)index
                                withInt:(int32_t)end
                           withNSString:(NSString *)name {
  return ADUriCodec_getNextCharacterWithNSString_withInt_withInt_withNSString_(uri, index, end, name);
}

+ (NSString *)decodeWithNSString:(NSString *)s
                     withBoolean:(bool)convertPlus
       withJavaNioCharsetCharset:(JavaNioCharsetCharset *)charset
                     withBoolean:(bool)throwOnFailure {
  return ADUriCodec_decodeWithNSString_withBoolean_withJavaNioCharsetCharset_withBoolean_(s, convertPlus, charset, throwOnFailure);
}

+ (void)appendDecodedWithJavaLangStringBuilder:(JavaLangStringBuilder *)builder
                                  withNSString:(NSString *)s
                                   withBoolean:(bool)convertPlus
                     withJavaNioCharsetCharset:(JavaNioCharsetCharset *)charset
                                   withBoolean:(bool)throwOnFailure {
  ADUriCodec_appendDecodedWithJavaLangStringBuilder_withNSString_withBoolean_withJavaNioCharsetCharset_withBoolean_(builder, s, convertPlus, charset, throwOnFailure);
}

+ (void)flushDecodingByteAccumulatorWithJavaLangStringBuilder:(JavaLangStringBuilder *)builder
                             withJavaNioCharsetCharsetDecoder:(JavaNioCharsetCharsetDecoder *)decoder
                                        withJavaNioByteBuffer:(JavaNioByteBuffer *)byteBuffer
                                                  withBoolean:(bool)throwOnFailure {
  ADUriCodec_flushDecodingByteAccumulatorWithJavaLangStringBuilder_withJavaNioCharsetCharsetDecoder_withJavaNioByteBuffer_withBoolean_(builder, decoder, byteBuffer, throwOnFailure);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 0, 1, -1, -1, -1, -1 },
    { NULL, "LJavaNetURISyntaxException;", 0xa, 2, 3, -1, -1, -1, -1 },
    { NULL, "C", 0xa, 4, 5, 6, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 11, 12, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(hexCharToValueWithChar:);
  methods[2].selector = @selector(unexpectedCharacterExceptionWithNSString:withNSString:withChar:withInt:);
  methods[3].selector = @selector(getNextCharacterWithNSString:withInt:withInt:withNSString:);
  methods[4].selector = @selector(decodeWithNSString:withBoolean:withJavaNioCharsetCharset:withBoolean:);
  methods[5].selector = @selector(appendDecodedWithJavaLangStringBuilder:withNSString:withBoolean:withJavaNioCharsetCharset:withBoolean:);
  methods[6].selector = @selector(flushDecodingByteAccumulatorWithJavaLangStringBuilder:withJavaNioCharsetCharsetDecoder:withJavaNioByteBuffer:withBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "INVALID_INPUT_CHARACTER", "C", .constantValue.asUnichar = ADUriCodec_INVALID_INPUT_CHARACTER, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "hexCharToValue", "C", "unexpectedCharacterException", "LNSString;LNSString;CI", "getNextCharacter", "LNSString;IILNSString;", "LJavaNetURISyntaxException;", "decode", "LNSString;ZLJavaNioCharsetCharset;Z", "appendDecoded", "LJavaLangStringBuilder;LNSString;ZLJavaNioCharsetCharset;Z", "flushDecodingByteAccumulator", "LJavaLangStringBuilder;LJavaNioCharsetCharsetDecoder;LJavaNioByteBuffer;Z" };
  static const J2ObjcClassInfo _ADUriCodec = { "UriCodec", "r.android.net", ptrTable, methods, fields, 7, 0x11, 7, 1, -1, -1, -1, -1, -1 };
  return &_ADUriCodec;
}

@end

void ADUriCodec_init(ADUriCodec *self) {
  NSObject_init(self);
}

ADUriCodec *new_ADUriCodec_init() {
  J2OBJC_NEW_IMPL(ADUriCodec, init)
}

ADUriCodec *create_ADUriCodec_init() {
  J2OBJC_CREATE_IMPL(ADUriCodec, init)
}

int32_t ADUriCodec_hexCharToValueWithChar_(unichar c) {
  ADUriCodec_initialize();
  if ('0' <= c && c <= '9') {
    return c - '0';
  }
  if ('a' <= c && c <= 'f') {
    return 10 + c - 'a';
  }
  if ('A' <= c && c <= 'F') {
    return 10 + c - 'A';
  }
  return -1;
}

JavaNetURISyntaxException *ADUriCodec_unexpectedCharacterExceptionWithNSString_withNSString_withChar_withInt_(NSString *uri, NSString *name, unichar unexpected, int32_t index) {
  ADUriCodec_initialize();
  NSString *nameString = (name == nil) ? @"" : JreStrcat("$$C", @" in [", name, ']');
  return create_JavaNetURISyntaxException_initWithNSString_withNSString_withInt_(uri, JreStrcat("$$$C", @"Unexpected character", nameString, @": ", unexpected), index);
}

unichar ADUriCodec_getNextCharacterWithNSString_withInt_withInt_withNSString_(NSString *uri, int32_t index, int32_t end, NSString *name) {
  ADUriCodec_initialize();
  if (index >= end) {
    NSString *nameString = (name == nil) ? @"" : JreStrcat("$$C", @" in [", name, ']');
    @throw create_JavaNetURISyntaxException_initWithNSString_withNSString_withInt_(uri, JreStrcat("$$", @"Unexpected end of string", nameString), index);
  }
  return [((NSString *) nil_chk(uri)) charAtWithInt:index];
}

NSString *ADUriCodec_decodeWithNSString_withBoolean_withJavaNioCharsetCharset_withBoolean_(NSString *s, bool convertPlus, JavaNioCharsetCharset *charset, bool throwOnFailure) {
  ADUriCodec_initialize();
  JavaLangStringBuilder *builder = create_JavaLangStringBuilder_initWithInt_([((NSString *) nil_chk(s)) java_length]);
  ADUriCodec_appendDecodedWithJavaLangStringBuilder_withNSString_withBoolean_withJavaNioCharsetCharset_withBoolean_(builder, s, convertPlus, charset, throwOnFailure);
  return [builder description];
}

void ADUriCodec_appendDecodedWithJavaLangStringBuilder_withNSString_withBoolean_withJavaNioCharsetCharset_withBoolean_(JavaLangStringBuilder *builder, NSString *s, bool convertPlus, JavaNioCharsetCharset *charset, bool throwOnFailure) {
  ADUriCodec_initialize();
  JavaNioCharsetCharsetDecoder *decoder = JreRetainedLocalValue([((JavaNioCharsetCharsetDecoder *) nil_chk([((JavaNioCharsetCharsetDecoder *) nil_chk([((JavaNioCharsetCharsetDecoder *) nil_chk([((JavaNioCharsetCharset *) nil_chk(charset)) newDecoder])) onMalformedInputWithJavaNioCharsetCodingErrorAction:JreLoadStatic(JavaNioCharsetCodingErrorAction, REPLACE)])) replaceWithWithNSString:@"\ufffd"])) onUnmappableCharacterWithJavaNioCharsetCodingErrorAction:JreLoadStatic(JavaNioCharsetCodingErrorAction, REPORT)]);
  JavaNioByteBuffer *byteBuffer = JavaNioByteBuffer_allocateWithInt_([((NSString *) nil_chk(s)) java_length]);
  int32_t i = 0;
  while (i < [s java_length]) {
    unichar c = [s charAtWithInt:i];
    i++;
    {
      int8_t hexValue;
      switch (c) {
        case '+':
        ADUriCodec_flushDecodingByteAccumulatorWithJavaLangStringBuilder_withJavaNioCharsetCharsetDecoder_withJavaNioByteBuffer_withBoolean_(builder, decoder, byteBuffer, throwOnFailure);
        [((JavaLangStringBuilder *) nil_chk(builder)) appendWithChar:convertPlus ? ' ' : '+'];
        break;
        case '%':
        hexValue = 0;
        for (int32_t j = 0; j < 2; j++) {
          @try {
            c = ADUriCodec_getNextCharacterWithNSString_withInt_withInt_withNSString_(s, i, [s java_length], nil);
          }
          @catch (JavaNetURISyntaxException *e) {
            if (throwOnFailure) {
              @throw create_JavaLangIllegalArgumentException_initWithJavaLangThrowable_(e);
            }
            else {
              ADUriCodec_flushDecodingByteAccumulatorWithJavaLangStringBuilder_withJavaNioCharsetCharsetDecoder_withJavaNioByteBuffer_withBoolean_(builder, decoder, byteBuffer, throwOnFailure);
              [((JavaLangStringBuilder *) nil_chk(builder)) appendWithChar:ADUriCodec_INVALID_INPUT_CHARACTER];
              return;
            }
          }
          i++;
          int32_t newDigit = ADUriCodec_hexCharToValueWithChar_(c);
          if (newDigit < 0) {
            if (throwOnFailure) {
              @throw create_JavaLangIllegalArgumentException_initWithJavaLangThrowable_(ADUriCodec_unexpectedCharacterExceptionWithNSString_withNSString_withChar_withInt_(s, nil, c, i - 1));
            }
            else {
              ADUriCodec_flushDecodingByteAccumulatorWithJavaLangStringBuilder_withJavaNioCharsetCharsetDecoder_withJavaNioByteBuffer_withBoolean_(builder, decoder, byteBuffer, throwOnFailure);
              [((JavaLangStringBuilder *) nil_chk(builder)) appendWithChar:ADUriCodec_INVALID_INPUT_CHARACTER];
              break;
            }
          }
          hexValue = (int8_t) (hexValue * (int32_t) 0x10 + newDigit);
        }
        [((JavaNioByteBuffer *) nil_chk(byteBuffer)) putWithByte:hexValue];
        break;
        default:
        ADUriCodec_flushDecodingByteAccumulatorWithJavaLangStringBuilder_withJavaNioCharsetCharsetDecoder_withJavaNioByteBuffer_withBoolean_(builder, decoder, byteBuffer, throwOnFailure);
        [((JavaLangStringBuilder *) nil_chk(builder)) appendWithChar:c];
      }
    }
  }
  ADUriCodec_flushDecodingByteAccumulatorWithJavaLangStringBuilder_withJavaNioCharsetCharsetDecoder_withJavaNioByteBuffer_withBoolean_(builder, decoder, byteBuffer, throwOnFailure);
}

void ADUriCodec_flushDecodingByteAccumulatorWithJavaLangStringBuilder_withJavaNioCharsetCharsetDecoder_withJavaNioByteBuffer_withBoolean_(JavaLangStringBuilder *builder, JavaNioCharsetCharsetDecoder *decoder, JavaNioByteBuffer *byteBuffer, bool throwOnFailure) {
  ADUriCodec_initialize();
  if ([((JavaNioByteBuffer *) nil_chk(byteBuffer)) position] == 0) {
    return;
  }
  [byteBuffer flip];
  @try {
    [((JavaLangStringBuilder *) nil_chk(builder)) appendWithJavaLangCharSequence:[((JavaNioCharsetCharsetDecoder *) nil_chk(decoder)) decodeWithJavaNioByteBuffer:byteBuffer]];
  }
  @catch (JavaNioCharsetCharacterCodingException *e) {
    if (throwOnFailure) {
      @throw create_JavaLangIllegalArgumentException_initWithJavaLangThrowable_(e);
    }
    else {
      [builder appendWithChar:ADUriCodec_INVALID_INPUT_CHARACTER];
    }
  }
  @finally {
    [byteBuffer flip];
    [byteBuffer limitWithInt:[byteBuffer capacity]];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADUriCodec)

J2OBJC_NAME_MAPPING(ADUriCodec, "r.android.net", "AD")
