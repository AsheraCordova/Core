//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroid\src\main\java\r\android\net\Uri.java
//

#import <Foundation/Foundation.h>
#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_Uri")
#ifdef RESTRICT_Uri
#define INCLUDE_ALL_Uri 0
#else
#define INCLUDE_ALL_Uri 1
#endif
#undef RESTRICT_Uri
#ifdef INCLUDE_ADUri_PathPart
#define INCLUDE_ADUri_AbstractPart 1
#endif
#ifdef INCLUDE_ADUri_Part
#define INCLUDE_ADUri_AbstractPart 1
#endif

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ADUri_) && (INCLUDE_ALL_Uri || defined(INCLUDE_ADUri))
#define ADUri_

#define RESTRICT_Parcelable 1
#define INCLUDE_ADParcelable 1
#include "Parcelable.h"

#define RESTRICT_JavaLangComparable 1
#define INCLUDE_JavaLangComparable 1
#include "java/lang/Comparable.h"

@class ADParcelable_Creator;
@class ADUri_Builder;
@class JavaIoFile;
@class JavaLangBoolean;
@class JavaLangInteger;
@class NSString;
@protocol ADParcel;
@protocol JavaUtilList;
@protocol JavaUtilSet;

/*!
 @brief Immutable URI reference.A URI reference includes a URI and a fragment, the
  component of the URI following a '#'.
 Builds and parses URI references
  which conform to 
 <a href="http://www.faqs.org/rfcs/rfc2396.html">RFC 2396</a>.
  
 <p>In the interest of performance, this class performs little to no
  validation. Behavior is undefined for invalid input. This class is very
  forgiving--in the face of invalid input, it will return garbage
  rather than throw an exception unless otherwise specified.
 */
@interface ADUri : NSObject < ADParcelable, JavaLangComparable >

#pragma mark Public

/*!
 @brief Constructs a new builder, copying the attributes from this Uri.
 */
- (ADUri_Builder *)buildUpon;

/*!
 @brief If this is a <code>content://</code> Uri without access flags, it will be
  reported to <code>StrictMode</code>.
 */
- (void)checkContentUriWithoutPermissionWithNSString:(NSString *)location
                                             withInt:(int32_t)flags;

/*!
 @brief If this is a <code>file://</code> Uri, it will be reported to 
 <code>StrictMode</code>.
 */
- (void)checkFileUriExposedWithNSString:(NSString *)location;

/*!
 @brief Compares the string representation of this Uri with that of
  another.
 */
- (int32_t)compareToWithId:(ADUri *)other;

/*!
 @brief Decodes '%'-escaped octets in the given string using the UTF-8 scheme.
 Replaces invalid octets with the unicode replacement character
  ("\\uFFFD").
 @param s encoded string to decode
 @return the given string with escaped octets decoded, or null if
   s is null
 */
+ (NSString *)decodeWithNSString:(NSString *)s;

/*!
 @brief Decodes a string if it was encoded, indicated by containing a %.
 @param value encoded string to decode
 @return decoded value
 */
+ (NSString *)decodeIfNeededWithNSString:(NSString *)value;

/*!
 @brief Encodes characters in the given string as '%'-escaped octets
  using the UTF-8 scheme.Leaves letters ("A-Z", "a-z"), numbers
  ("0-9"), and unreserved characters ("_-!.
 ~'()*") intact. Encodes
  all other characters.
 @param s string to encode
 @return an encoded version of s suitable for use as a URI component,
   or null if s is null
 */
+ (NSString *)encodeWithNSString:(NSString *)s;

/*!
 @brief Encodes characters in the given string as '%'-escaped octets
  using the UTF-8 scheme.Leaves letters ("A-Z", "a-z"), numbers
  ("0-9"), and unreserved characters ("_-!.
 ~'()*") intact. Encodes
  all other characters with the exception of those specified in the
  allow argument.
 @param s string to encode
 @param allow set of additional characters to allow in the encoded form,   null if no characters should be skipped
 @return an encoded version of s suitable for use as a URI component,
   or null if s is null
 */
+ (NSString *)encodeWithNSString:(NSString *)s
                    withNSString:(NSString *)allow;

/*!
 @brief Encodes a value it wasn't already encoded.
 @param value string to encode
 @param allow characters to allow
 @return encoded value
 */
+ (NSString *)encodeIfNotEncodedWithNSString:(NSString *)value
                                withNSString:(NSString *)allow;

/*!
 @brief Compares this Uri to another object for equality.Returns true if the
  encoded string representations of this Uri and the given Uri are
  equal.
 Case counts. Paths are not normalized. If one Uri specifies a
  default port explicitly and the other leaves it implicit, they will not
  be considered equal.
 */
- (bool)isEqual:(id)o;

/*!
 @brief Creates a Uri from a file.The URI has the form
  "file://<absolute path>".
 Encodes path characters with the exception of
  '/'. 
 <p>Example: "file:///tmp/android.txt"
 @throw NullPointerExceptionif file is null
 @return a Uri for the given file
 */
+ (ADUri *)fromFileWithJavaIoFile:(JavaIoFile *)file;

/*!
 @brief Creates an opaque Uri from the given components.Encodes the ssp
  which means this method cannot be used to create hierarchical URIs.
 @param scheme of the URI
 @param ssp scheme-specific-part, everything between the   scheme separator (':') and the fragment separator ('#'), which will
    get encoded
 @param fragment fragment, everything after the '#', null if undefined,   will get encoded
 @throw NullPointerExceptionif scheme or ssp is null
 @return Uri composed of the given scheme, ssp, and fragment
 - seealso: Builderif you don't want the ssp and fragment to be encoded
 */
+ (ADUri *)fromPartsWithNSString:(NSString *)scheme
                    withNSString:(NSString *)ssp
                    withNSString:(NSString *)fragment;

/*!
 @brief Gets the decoded authority part of this URI.For
  server addresses, the authority is structured as follows: 
 <code>[ userinfo '@@' ] host [ ':' port ]</code>
  
 <p>Examples: "google.com", "bob@@google.com:80"
 @return the authority for this URI or null if not present
 */
- (NSString *)getAuthority;

/*!
 @brief Searches the query string for the first value with the given key and interprets it
  as a boolean value."
 false" and "0" are interpreted as <code>false</code>, everything
  else is interpreted as <code>true</code>.
 @param key which will be decoded
 @param defaultValue the default value to return if there is no query parameter for key
 @return the boolean interpretation of the query parameter key
 */
- (bool)getBooleanQueryParameterWithNSString:(NSString *)key
                                 withBoolean:(bool)defaultValue;

/*!
 @brief If this <code>Uri</code> is <code>file://</code>, then resolve and return its
  canonical path.Also fixes legacy emulated storage paths so they are
  usable across user boundaries.
 Should always be called from the app
  process before sending elsewhere.
 */
- (ADUri *)getCanonicalUri;

/*!
 @brief Gets the encoded authority part of this URI.For
  server addresses, the authority is structured as follows: 
 <code>[ userinfo '@@' ] host [ ':' port ]</code>
  
 <p>Examples: "google.com", "bob@@google.com:80"
 @return the authority for this URI or null if not present
 */
- (NSString *)getEncodedAuthority;

/*!
 @brief Gets the encoded fragment part of this URI, everything after the '#'.
 @return the encoded fragment or null if there isn't one
 */
- (NSString *)getEncodedFragment;

/*!
 @brief Gets the encoded path.
 @return the encoded path, or null if this is not a hierarchical URI
  (like "mailto:nobody@@google.com") or the URI is invalid
 */
- (NSString *)getEncodedPath;

/*!
 @brief Gets the encoded query component from this URI.The query comes after
  the query separator ('?')
 and before the fragment separator ('#'). This
  method would return "q=android" for
  "http://www.google.com/search?q=android".
 @return the encoded query or null if there isn't one
 */
- (NSString *)getEncodedQuery;

/*!
 @brief Gets the scheme-specific part of this URI, i.e.
 &nbsp;everything between
  the scheme separator ':' and the fragment separator '#'.If this is a
  relative URI, this method returns the entire URI. Leaves escaped octets
  intact. 
 <p>Example: "//www.google.com/search?q=android"
 @return the encoded scheme-specific-part
 */
- (NSString *)getEncodedSchemeSpecificPart;

/*!
 @brief Gets the encoded user information from the authority.
 For example, if the authority is "nobody@@google.com", this method will
  return "nobody".
 @return the user info for this URI or null if not present
 */
- (NSString *)getEncodedUserInfo;

/*!
 @brief Gets the decoded fragment part of this URI, everything after the '#'.
 @return the decoded fragment or null if there isn't one
 */
- (NSString *)getFragment;

/*!
 @brief Gets the encoded host from the authority for this URI.For example,
  if the authority is "bob@@google.com", this method will return
  "google.com".
 @return the host for this URI or null if not present
 */
- (NSString *)getHost;

/*!
 @brief Gets the decoded last segment in the path.
 @return the decoded last segment or null if the path is empty
 */
- (NSString *)getLastPathSegment;

/*!
 @brief Gets the decoded path.
 @return the decoded path, or null if this is not a hierarchical URI
  (like "mailto:nobody@@google.com") or the URI is invalid
 */
- (NSString *)getPath;

/*!
 @brief Gets the decoded path segments.
 @return decoded path segments, each without a leading or trailing '/'
 */
- (id<JavaUtilList>)getPathSegments;

/*!
 @brief Gets the port from the authority for this URI.For example,
  if the authority is "google.com:80", this method will return 80.
 @return the port for this URI or -1 if invalid or not present
 */
- (int32_t)getPort;

/*!
 @brief Gets the decoded query component from this URI.The query comes after
  the query separator ('?')
 and before the fragment separator ('#'). This
  method would return "q=android" for
  "http://www.google.com/search?q=android".
 @return the decoded query or null if there isn't one
 */
- (NSString *)getQuery;

/*!
 @brief Searches the query string for the first value with the given key.
 <p><strong>Warning:</strong> Prior to Jelly Bean, this decoded
  the '+' character as '+' rather than ' '.
 @param key which will be encoded
 @throw UnsupportedOperationExceptionif this isn't a hierarchical URI
 @throw NullPointerExceptionif key is null
 @return the decoded value or null if no parameter is found
 */
- (NSString *)getQueryParameterWithNSString:(NSString *)key;

/*!
 @brief Returns a set of the unique names of all query parameters.Iterating
  over the set will return the names in order of their first occurrence.
 @throw UnsupportedOperationExceptionif this isn't a hierarchical URI
 @return a set of decoded names
 */
- (id<JavaUtilSet>)getQueryParameterNames;

/*!
 @brief Searches the query string for parameter values with the given key.
 @param key which will be encoded
 @throw UnsupportedOperationExceptionif this isn't a hierarchical URI
 @throw NullPointerExceptionif key is null
 @return a list of decoded values
 */
- (id<JavaUtilList>)getQueryParametersWithNSString:(NSString *)key;

/*!
 @brief Gets the scheme of this URI.Example: "http"
 @return the scheme or null if this is a relative URI
 */
- (NSString *)getScheme;

/*!
 @brief Gets the scheme-specific part of this URI, i.e.
 &nbsp;everything between
  the scheme separator ':' and the fragment separator '#'.If this is a
  relative URI, this method returns the entire URI. Decodes escaped octets. 
 <p>Example: "//www.google.com/search?q=android"
 @return the decoded scheme-specific-part
 */
- (NSString *)getSchemeSpecificPart;

/*!
 @brief Gets the decoded user information from the authority.
 For example, if the authority is "nobody@@google.com", this method will
  return "nobody".
 @return the user info for this URI or null if not present
 */
- (NSString *)getUserInfo;

/*!
 @brief Hashes the encoded string represention of this Uri consistently with 
 <code>equals(Object)</code>.
 */
- (NSUInteger)hash;

/*!
 @brief Returns true if this URI is absolute, i.e.
 &nbsp;if it contains an
  explicit scheme.
 @return true if this URI is absolute, false if it's relative
 */
- (bool)isAbsolute;

/*!
 @brief Returns true if this URI is hierarchical like "http://google.com".
 Absolute URIs are hierarchical if the scheme-specific part starts with
  a '/'. Relative URIs are always hierarchical.
 */
- (bool)isHierarchical;

/*!
 @brief Returns true if this URI is opaque like "mailto:nobody@@google.com".The
  scheme-specific part of an opaque URI cannot start with a '/'.
 */
- (bool)isOpaque;

/*!
 @brief Test if this is a path prefix match against the given Uri.Verifies that
  scheme, authority, and atomic path segments match.
 */
- (bool)isPathPrefixMatchWithADUri:(ADUri *)prefix;

/*!
 @brief Returns true if this URI is relative, i.e.
 &nbsp;if it doesn't contain an
  explicit scheme.
 @return true if this URI is relative, false if it's absolute
 */
- (bool)isRelative;

/*!
 @brief Return an equivalent URI with a lowercase scheme component.
 This aligns the Uri with Android best practices for
  intent filtering. 
 <p>For example, "HTTP://www.android.com" becomes
  "http://www.android.com" 
 <p>All URIs received from outside Android (such as user input,
  or external sources like Bluetooth, NFC, or the Internet) should
  be normalized before they are used to create an Intent. 
 <p class="note">This method does <em>not</em> validate bad URIs,
  or 'fix' poorly formatted URIs - so do not use it for input validation.
  A Uri will always be returned, even if the Uri is badly formatted to
  begin with and a scheme component cannot be found.
 @return normalized Uri (never null)
 - seealso: r.android.content.Intent#setData
 - seealso: r.android.content.Intent#setDataAndNormalize
 */
- (ADUri *)normalizeScheme;

/*!
 @brief Creates a Uri which parses the given encoded URI string.
 @param uriString an RFC 2396-compliant, encoded URI
 @throw NullPointerExceptionif uriString is null
 @return Uri for this given uri string
 */
+ (ADUri *)parseWithNSString:(NSString *)uriString;

/*!
 @brief Return a string representation of this URI that has common forms of PII redacted,
  making it safer to use for logging purposes.For example, <code>tel:800-466-4411</code> is
  returned as <code>tel:xxx-xxx-xxxx</code> and <code>http://example.com/path/to/item/</code> is
  returned as <code>http://example.com/...
 </code>. For all other uri schemes, only the scheme,
  host and port are returned.
 @return the common forms PII redacted string of this URI
 */
- (NSString *)toSafeString;

/*!
 @brief Returns the encoded string representation of this URI.
 Example: "http://google.com/"
 */
- (NSString *)description;

/*!
 @brief Creates a new Uri by appending an already-encoded path segment to a
  base Uri.
 @param baseUri Uri to append path segment to
 @param pathSegment encoded path segment to append
 @return a new Uri based on baseUri with the given segment appended to
   the path
 @throw NullPointerExceptionif baseUri is null
 */
+ (ADUri *)withAppendedPathWithADUri:(ADUri *)baseUri
                        withNSString:(NSString *)pathSegment;

/*!
 @brief Writes a Uri to a Parcel.
 @param outArg parcel to write to
 @param uri to write, can be null
 */
+ (void)writeToParcelWithADParcel:(id<ADParcel>)outArg
                        withADUri:(ADUri *)uri;

@end

J2OBJC_STATIC_INIT(ADUri)

/*!
 @brief The empty URI, equivalent to "".
 */
inline ADUri *ADUri_get_EMPTY(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT ADUri *ADUri_EMPTY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADUri, EMPTY, ADUri *)

/*!
 @brief Reads Uris from Parcels.
 */
inline ADParcelable_Creator *ADUri_get_CREATOR(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT ADParcelable_Creator *ADUri_CREATOR;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADUri, CREATOR, ADParcelable_Creator *)

FOUNDATION_EXPORT ADUri *ADUri_parseWithNSString_(NSString *uriString);

FOUNDATION_EXPORT ADUri *ADUri_fromFileWithJavaIoFile_(JavaIoFile *file);

FOUNDATION_EXPORT ADUri *ADUri_fromPartsWithNSString_withNSString_withNSString_(NSString *scheme, NSString *ssp, NSString *fragment);

FOUNDATION_EXPORT void ADUri_writeToParcelWithADParcel_withADUri_(id<ADParcel> outArg, ADUri *uri);

FOUNDATION_EXPORT NSString *ADUri_encodeWithNSString_(NSString *s);

FOUNDATION_EXPORT NSString *ADUri_encodeWithNSString_withNSString_(NSString *s, NSString *allow);

FOUNDATION_EXPORT NSString *ADUri_encodeIfNotEncodedWithNSString_withNSString_(NSString *value, NSString *allow);

FOUNDATION_EXPORT NSString *ADUri_decodeWithNSString_(NSString *s);

FOUNDATION_EXPORT NSString *ADUri_decodeIfNeededWithNSString_(NSString *value);

FOUNDATION_EXPORT ADUri *ADUri_withAppendedPathWithADUri_withNSString_(ADUri *baseUri, NSString *pathSegment);

J2OBJC_TYPE_LITERAL_HEADER(ADUri)

@compatibility_alias RAndroidNetUri ADUri;


#endif

#if !defined (ADUri_NotCachedHolder_) && (INCLUDE_ALL_Uri || defined(INCLUDE_ADUri_NotCachedHolder))
#define ADUri_NotCachedHolder_

@class NSString;

/*!
 @brief Holds a placeholder for strings which haven't been cached.This enables us
  to cache null.
 We intentionally create a new String instance so we can
  compare its identity and there is no chance we will confuse it with
  user data.
  NOTE This value is held in its own Holder class is so that referring to 
 <code>NotCachedHolder.NOT_CACHED</code> does not trigger <code>Uri.<clinit></code>.
  For example, <code>PathPart.<init></code> uses <code>NotCachedHolder.NOT_CACHED</code>
  but must not trigger <code>Uri.<clinit></code>: Otherwise, the initialization of 
 <code>Uri.EMPTY</code> would see a <code>null</code> value for <code>PathPart.EMPTY</code>!
 */
@interface ADUri_NotCachedHolder : NSObject

@end

J2OBJC_STATIC_INIT(ADUri_NotCachedHolder)

inline NSString *ADUri_NotCachedHolder_get_NOT_CACHED(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ADUri_NotCachedHolder_NOT_CACHED;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADUri_NotCachedHolder, NOT_CACHED, NSString *)

J2OBJC_TYPE_LITERAL_HEADER(ADUri_NotCachedHolder)


#endif

#if !defined (ADUri_PathSegments_) && (INCLUDE_ALL_Uri || defined(INCLUDE_ADUri_PathSegments))
#define ADUri_PathSegments_

#define RESTRICT_JavaUtilAbstractList 1
#define INCLUDE_JavaUtilAbstractList 1
#include "java/util/AbstractList.h"

#define RESTRICT_JavaUtilRandomAccess 1
#define INCLUDE_JavaUtilRandomAccess 1
#include "java/util/RandomAccess.h"

@class IOSObjectArray;
@class JavaLangInteger;
@class NSString;

/*!
 @brief Wrapper for path segment array.
 */
@interface ADUri_PathSegments : JavaUtilAbstractList < JavaUtilRandomAccess > {
 @public
  IOSObjectArray *segments_;
  int32_t size_;
}

#pragma mark Public

- (NSString *)getWithInt:(int32_t)index;

- (NSString *)removeWithInt:(int32_t)arg0;

- (NSString *)setWithInt:(int32_t)arg0
                  withId:(id)arg1;

- (int32_t)size;

#pragma mark Package-Private

- (instancetype)initWithNSStringArray:(IOSObjectArray *)segments
                              withInt:(int32_t)size;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(ADUri_PathSegments)

J2OBJC_FIELD_SETTER(ADUri_PathSegments, segments_, IOSObjectArray *)

inline ADUri_PathSegments *ADUri_PathSegments_get_EMPTY(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT ADUri_PathSegments *ADUri_PathSegments_EMPTY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADUri_PathSegments, EMPTY, ADUri_PathSegments *)

FOUNDATION_EXPORT void ADUri_PathSegments_initWithNSStringArray_withInt_(ADUri_PathSegments *self, IOSObjectArray *segments, int32_t size);

FOUNDATION_EXPORT ADUri_PathSegments *new_ADUri_PathSegments_initWithNSStringArray_withInt_(IOSObjectArray *segments, int32_t size) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ADUri_PathSegments *create_ADUri_PathSegments_initWithNSStringArray_withInt_(IOSObjectArray *segments, int32_t size);

J2OBJC_TYPE_LITERAL_HEADER(ADUri_PathSegments)


#endif

#if !defined (ADUri_PathSegmentsBuilder_) && (INCLUDE_ALL_Uri || defined(INCLUDE_ADUri_PathSegmentsBuilder))
#define ADUri_PathSegmentsBuilder_

@class ADUri_PathSegments;
@class IOSObjectArray;
@class JavaLangInteger;
@class NSString;

/*!
 @brief Builds PathSegments.
 */
@interface ADUri_PathSegmentsBuilder : NSObject {
 @public
  IOSObjectArray *segments_;
  int32_t size_;
}

#pragma mark Package-Private

- (instancetype)init;

- (void)addWithNSString:(NSString *)segment;

- (ADUri_PathSegments *)build;

@end

J2OBJC_EMPTY_STATIC_INIT(ADUri_PathSegmentsBuilder)

J2OBJC_FIELD_SETTER(ADUri_PathSegmentsBuilder, segments_, IOSObjectArray *)

FOUNDATION_EXPORT void ADUri_PathSegmentsBuilder_init(ADUri_PathSegmentsBuilder *self);

FOUNDATION_EXPORT ADUri_PathSegmentsBuilder *new_ADUri_PathSegmentsBuilder_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ADUri_PathSegmentsBuilder *create_ADUri_PathSegmentsBuilder_init(void);

J2OBJC_TYPE_LITERAL_HEADER(ADUri_PathSegmentsBuilder)


#endif

#if !defined (ADUri_Builder_) && (INCLUDE_ALL_Uri || defined(INCLUDE_ADUri_Builder))
#define ADUri_Builder_

@class ADUri;
@class ADUri_Part;
@class ADUri_PathPart;
@class NSString;

/*!
 @brief Helper class for building or manipulating URI references.Not safe for
  concurrent use.
 <p>An absolute hierarchical URI reference follows the pattern: 
 <code><scheme>://<authority><absolute path>?<query>#<fragment></code>
  
 <p>Relative URI references (which are always hierarchical) follow one
  of two patterns: <code><relative or absolute path>?<query>#<fragment></code>
  or <code>//<authority><absolute path>?<query>#<fragment></code>
  
 <p>An opaque URI follows this pattern: 
 <code><scheme>:<opaque part>#<fragment></code>
  
 <p>Use <code>Uri.buildUpon()</code> to obtain a builder representing an existing URI.
 */
@interface ADUri_Builder : NSObject

#pragma mark Public

/*!
 @brief Constructs a new Builder.
 */
- (instancetype)init;

/*!
 @brief Appends the given segment to the path.
 */
- (ADUri_Builder *)appendEncodedPathWithNSString:(NSString *)newSegment;

/*!
 @brief Encodes the given segment and appends it to the path.
 */
- (ADUri_Builder *)appendPathWithNSString:(NSString *)newSegment;

/*!
 @brief Encodes the key and value and then appends the parameter to the
  query string.
 @param key which will be encoded
 @param value which will be encoded
 */
- (ADUri_Builder *)appendQueryParameterWithNSString:(NSString *)key
                                       withNSString:(NSString *)value;

/*!
 @brief Encodes and sets the authority.
 */
- (ADUri_Builder *)authorityWithNSString:(NSString *)authority;

/*!
 @brief Constructs a Uri with the current attributes.
 @throw UnsupportedOperationExceptionif the URI is opaque and the
   scheme is null
 */
- (ADUri *)build;

/*!
 @brief Clears the the previously set query.
 */
- (ADUri_Builder *)clearQuery;

/*!
 @brief Sets the previously encoded authority.
 */
- (ADUri_Builder *)encodedAuthorityWithNSString:(NSString *)authority;

/*!
 @brief Sets the previously encoded fragment.
 */
- (ADUri_Builder *)encodedFragmentWithNSString:(NSString *)fragment;

/*!
 @brief Sets the previously encoded opaque scheme-specific-part.
 @param opaquePart encoded opaque part
 */
- (ADUri_Builder *)encodedOpaquePartWithNSString:(NSString *)opaquePart;

/*!
 @brief Sets the previously encoded path.
 <p>If the path is not null and doesn't start with a '/', and if
  you specify a scheme and/or authority, the builder will prepend the
  given path with a '/'.
 */
- (ADUri_Builder *)encodedPathWithNSString:(NSString *)path;

/*!
 @brief Sets the previously encoded query.
 */
- (ADUri_Builder *)encodedQueryWithNSString:(NSString *)query;

/*!
 @brief Encodes and sets the fragment.
 */
- (ADUri_Builder *)fragmentWithNSString:(NSString *)fragment;

/*!
 @brief Encodes and sets the given opaque scheme-specific-part.
 @param opaquePart decoded opaque part
 */
- (ADUri_Builder *)opaquePartWithNSString:(NSString *)opaquePart;

/*!
 @brief Sets the path.Leaves '/' characters intact but encodes others as
  necessary.
 <p>If the path is not null and doesn't start with a '/', and if
  you specify a scheme and/or authority, the builder will prepend the
  given path with a '/'.
 */
- (ADUri_Builder *)pathWithNSString:(NSString *)path;

/*!
 @brief Encodes and sets the query.
 */
- (ADUri_Builder *)queryWithNSString:(NSString *)query;

/*!
 @brief Sets the scheme.
 @param scheme name or <code>null</code>  if this is a relative Uri
 */
- (ADUri_Builder *)schemeWithNSString:(NSString *)scheme;

- (NSString *)description;

#pragma mark Package-Private

- (ADUri_Builder *)authorityWithADUri_Part:(ADUri_Part *)authority;

- (ADUri_Builder *)fragmentWithADUri_Part:(ADUri_Part *)fragment;

- (ADUri_Builder *)opaquePartWithADUri_Part:(ADUri_Part *)opaquePart;

- (ADUri_Builder *)pathWithADUri_PathPart:(ADUri_PathPart *)path;

- (ADUri_Builder *)queryWithADUri_Part:(ADUri_Part *)query;

@end

J2OBJC_EMPTY_STATIC_INIT(ADUri_Builder)

FOUNDATION_EXPORT void ADUri_Builder_init(ADUri_Builder *self);

FOUNDATION_EXPORT ADUri_Builder *new_ADUri_Builder_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ADUri_Builder *create_ADUri_Builder_init(void);

J2OBJC_TYPE_LITERAL_HEADER(ADUri_Builder)


#endif

#if !defined (ADUri_AbstractPart_) && (INCLUDE_ALL_Uri || defined(INCLUDE_ADUri_AbstractPart))
#define ADUri_AbstractPart_

@class NSString;

/*!
 @brief Support for part implementations.
 */
@interface ADUri_AbstractPart : NSObject {
 @public
  volatile_id encoded_;
  volatile_id decoded_;
}

#pragma mark Package-Private

- (instancetype)initWithNSString:(NSString *)encoded
                    withNSString:(NSString *)decoded;

- (NSString *)getDecoded;

- (NSString *)getEncoded;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ADUri_AbstractPart)

J2OBJC_VOLATILE_FIELD_SETTER(ADUri_AbstractPart, encoded_, NSString *)
J2OBJC_VOLATILE_FIELD_SETTER(ADUri_AbstractPart, decoded_, NSString *)

FOUNDATION_EXPORT void ADUri_AbstractPart_initWithNSString_withNSString_(ADUri_AbstractPart *self, NSString *encoded, NSString *decoded);

J2OBJC_TYPE_LITERAL_HEADER(ADUri_AbstractPart)


#endif

#if !defined (ADUri_Part_) && (INCLUDE_ALL_Uri || defined(INCLUDE_ADUri_Part))
#define ADUri_Part_

@class JavaLangBoolean;
@class NSString;

/*!
 @brief Immutable wrapper of encoded and decoded versions of a URI part.Lazily
  creates the encoded or decoded version from the other.
 */
@interface ADUri_Part : ADUri_AbstractPart

#pragma mark Package-Private

/*!
 @brief Creates a part from the encoded and decoded strings.
 @param encoded part string
 @param decoded part string
 */
+ (ADUri_Part *)fromWithNSString:(NSString *)encoded
                    withNSString:(NSString *)decoded;

/*!
 @brief Creates a part from the decoded string.
 @param decoded part string
 */
+ (ADUri_Part *)fromDecodedWithNSString:(NSString *)decoded;

/*!
 @brief Creates a part from the encoded string.
 @param encoded part string
 */
+ (ADUri_Part *)fromEncodedWithNSString:(NSString *)encoded;

- (NSString *)getEncoded;

- (bool)isEmpty;

/*!
 @brief Returns given part or <code>NULL</code> if the given part is null.
 */
+ (ADUri_Part *)nonNullWithADUri_Part:(ADUri_Part *)part;

@end

J2OBJC_STATIC_INIT(ADUri_Part)

/*!
 @brief A part with null values.
 */
inline ADUri_Part *ADUri_Part_get_NULL(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT ADUri_Part *ADUri_Part_NULL;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADUri_Part, NULL, ADUri_Part *)

/*!
 @brief A part with empty strings for values.
 */
inline ADUri_Part *ADUri_Part_get_EMPTY(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT ADUri_Part *ADUri_Part_EMPTY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADUri_Part, EMPTY, ADUri_Part *)

FOUNDATION_EXPORT ADUri_Part *ADUri_Part_nonNullWithADUri_Part_(ADUri_Part *part);

FOUNDATION_EXPORT ADUri_Part *ADUri_Part_fromEncodedWithNSString_(NSString *encoded);

FOUNDATION_EXPORT ADUri_Part *ADUri_Part_fromDecodedWithNSString_(NSString *decoded);

FOUNDATION_EXPORT ADUri_Part *ADUri_Part_fromWithNSString_withNSString_(NSString *encoded, NSString *decoded);

J2OBJC_TYPE_LITERAL_HEADER(ADUri_Part)


#endif

#if !defined (ADUri_PathPart_) && (INCLUDE_ALL_Uri || defined(INCLUDE_ADUri_PathPart))
#define ADUri_PathPart_

@class ADUri_PathSegments;
@class NSString;

/*!
 @brief Immutable wrapper of encoded and decoded versions of a path part.Lazily
  creates the encoded or decoded version from the other.
 */
@interface ADUri_PathPart : ADUri_AbstractPart

#pragma mark Package-Private

+ (ADUri_PathPart *)appendDecodedSegmentWithADUri_PathPart:(ADUri_PathPart *)oldPart
                                              withNSString:(NSString *)decoded;

+ (ADUri_PathPart *)appendEncodedSegmentWithADUri_PathPart:(ADUri_PathPart *)oldPart
                                              withNSString:(NSString *)newSegment;

/*!
 @brief Creates a path from the encoded and decoded strings.
 @param encoded part string
 @param decoded part string
 */
+ (ADUri_PathPart *)fromWithNSString:(NSString *)encoded
                        withNSString:(NSString *)decoded;

/*!
 @brief Creates a path from the decoded string.
 @param decoded part string
 */
+ (ADUri_PathPart *)fromDecodedWithNSString:(NSString *)decoded;

/*!
 @brief Creates a path from the encoded string.
 @param encoded part string
 */
+ (ADUri_PathPart *)fromEncodedWithNSString:(NSString *)encoded;

- (NSString *)getEncoded;

/*!
 @brief Gets the individual path segments.Parses them if necessary.
 @return parsed path segments or null if this isn't a hierarchical
   URI
 */
- (ADUri_PathSegments *)getPathSegments;

/*!
 @brief Prepends path values with "/" if they're present, not empty, and
  they don't already start with "/".
 */
+ (ADUri_PathPart *)makeAbsoluteWithADUri_PathPart:(ADUri_PathPart *)oldPart;

@end

J2OBJC_STATIC_INIT(ADUri_PathPart)

/*!
 @brief A part with null values.
 */
inline ADUri_PathPart *ADUri_PathPart_get_NULL(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT ADUri_PathPart *ADUri_PathPart_NULL;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADUri_PathPart, NULL, ADUri_PathPart *)

/*!
 @brief A part with empty strings for values.
 */
inline ADUri_PathPart *ADUri_PathPart_get_EMPTY(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT ADUri_PathPart *ADUri_PathPart_EMPTY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADUri_PathPart, EMPTY, ADUri_PathPart *)

FOUNDATION_EXPORT ADUri_PathPart *ADUri_PathPart_appendEncodedSegmentWithADUri_PathPart_withNSString_(ADUri_PathPart *oldPart, NSString *newSegment);

FOUNDATION_EXPORT ADUri_PathPart *ADUri_PathPart_appendDecodedSegmentWithADUri_PathPart_withNSString_(ADUri_PathPart *oldPart, NSString *decoded);

FOUNDATION_EXPORT ADUri_PathPart *ADUri_PathPart_fromEncodedWithNSString_(NSString *encoded);

FOUNDATION_EXPORT ADUri_PathPart *ADUri_PathPart_fromDecodedWithNSString_(NSString *decoded);

FOUNDATION_EXPORT ADUri_PathPart *ADUri_PathPart_fromWithNSString_withNSString_(NSString *encoded, NSString *decoded);

FOUNDATION_EXPORT ADUri_PathPart *ADUri_PathPart_makeAbsoluteWithADUri_PathPart_(ADUri_PathPart *oldPart);

J2OBJC_TYPE_LITERAL_HEADER(ADUri_PathPart)


#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_Uri")
