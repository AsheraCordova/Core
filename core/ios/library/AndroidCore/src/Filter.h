//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroid\src\main\java\r\android\widget\Filter.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_Filter")
#ifdef RESTRICT_Filter
#define INCLUDE_ALL_Filter 0
#else
#define INCLUDE_ALL_Filter 1
#endif
#undef RESTRICT_Filter

#if !defined (ADFilter_) && (INCLUDE_ALL_Filter || defined(INCLUDE_ADFilter))
#define ADFilter_

@class ADFilter_FilterResults;
@protocol ADFilter_Delayer;
@protocol ADFilter_FilterListener;
@protocol JavaLangCharSequence;

/*!
 @brief <p>A filter constrains data with a filtering pattern.
 </p>
  
 <p>Filters are usually created by <code>r.android.widget.Filterable</code>
  classes.</p>
  
 <p>Filtering operations performed by calling <code>filter(CharSequence)</code> or 
 <code>filter(CharSequence, r.android.widget.Filter.FilterListener)</code> are
  performed asynchronously. When these methods are called, a filtering request
  is posted in a request queue and processed later. Any call to one of these
  methods will cancel any previous non-executed filtering request.</p>
 - seealso: r.android.widget.Filterable
 */
@interface ADFilter : NSObject

#pragma mark Public

/*!
 @brief <p>Creates a new asynchronous filter.
 </p>
 */
- (instancetype)init;

/*!
 @brief <p>Converts a value from the filtered set into a CharSequence.
 Subclasses
  should override this method to convert their results. The default
  implementation returns an empty String for null values or the default
  String representation of the value.</p>
 @param resultValue the value to convert to a CharSequence
 @return a CharSequence representing the value
 */
- (id<JavaLangCharSequence>)convertResultToStringWithId:(id)resultValue;

/*!
 @brief <p>Starts an asynchronous filtering operation.
 Calling this method
  cancels all previous non-executed filtering requests and posts a new
  filtering request that will be executed later.</p>
 @param constraint the constraint used to filter the data
 - seealso: #filter(CharSequence, r.android.widget.Filter.FilterListener)
 */
- (void)filterWithJavaLangCharSequence:(id<JavaLangCharSequence>)constraint;

/*!
 @brief <p>Starts an asynchronous filtering operation.
 Calling this method
  cancels all previous non-executed filtering requests and posts a new
  filtering request that will be executed later.</p>
  
 <p>Upon completion, the listener is notified.</p>
 @param constraint the constraint used to filter the data
 @param listener a listener notified upon completion of the operation
 - seealso: #filter(CharSequence)
 - seealso: #performFiltering(CharSequence)
 - seealso: #publishResults(CharSequence, r.android.widget.Filter.FilterResults)
 */
- (void)filterWithJavaLangCharSequence:(id<JavaLangCharSequence>)constraint
           withADFilter_FilterListener:(id<ADFilter_FilterListener>)listener;

/*!
 @brief Provide an interface that decides how long to delay the message for a given query.Useful
  for heuristics such as posting a delay for the delete key to avoid doing any work while the
  user holds down the delete key.
 @param delayer The delayer.
 */
- (void)setDelayerWithADFilter_Delayer:(id<ADFilter_Delayer>)delayer;

#pragma mark Protected

/*!
 @brief <p>Invoked in a worker thread to filter the data according to the
  constraint.
 Subclasses must implement this method to perform the
  filtering operation. Results computed by the filtering operation
  must be returned as a <code>r.android.widget.Filter.FilterResults</code> that
  will then be published in the UI thread through 
 <code>publishResults(CharSequence,
 r.android.widget.Filter.FilterResults)</code>
 .</p>
  
 <p><strong>Contract:</strong> When the constraint is null, the original
  data must be restored.</p>
 @param constraint the constraint used to filter the data
 @return the results of the filtering operation
 - seealso: #filter(CharSequence, r.android.widget.Filter.FilterListener)
 - seealso: #publishResults(CharSequence, r.android.widget.Filter.FilterResults)
 - seealso: r.android.widget.Filter.FilterResults
 */
- (ADFilter_FilterResults *)performFilteringWithJavaLangCharSequence:(id<JavaLangCharSequence>)constraint;

/*!
 @brief <p>Invoked in the UI thread to publish the filtering results in the
  user interface.
 Subclasses must implement this method to display the
  results computed in <code>performFiltering</code>.</p>
 @param constraint the constraint used to filter the data
 @param results the results of the filtering operation
 - seealso: #filter(CharSequence, r.android.widget.Filter.FilterListener)
 - seealso: #performFiltering(CharSequence)
 - seealso: r.android.widget.Filter.FilterResults
 */
- (void)publishResultsWithJavaLangCharSequence:(id<JavaLangCharSequence>)constraint
                    withADFilter_FilterResults:(ADFilter_FilterResults *)results;

@end

J2OBJC_EMPTY_STATIC_INIT(ADFilter)

FOUNDATION_EXPORT void ADFilter_init(ADFilter *self);

J2OBJC_TYPE_LITERAL_HEADER(ADFilter)

@compatibility_alias RAndroidWidgetFilter ADFilter;

#endif

#if !defined (ADFilter_FilterResults_) && (INCLUDE_ALL_Filter || defined(INCLUDE_ADFilter_FilterResults))
#define ADFilter_FilterResults_

/*!
 @brief <p>Holds the results of a filtering operation.
 The results are the values
  computed by the filtering operation and the number of these values.</p>
 */
@interface ADFilter_FilterResults : NSObject {
 @public
  /*!
   @brief <p>Contains all the values computed by the filtering operation.
   </p>
   */
  id values_;
  /*!
   @brief <p>Contains the number of values computed by the filtering
  operation.
   </p>
   */
  jint count_;
}

#pragma mark Public

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(ADFilter_FilterResults)

J2OBJC_FIELD_SETTER(ADFilter_FilterResults, values_, id)

FOUNDATION_EXPORT void ADFilter_FilterResults_init(ADFilter_FilterResults *self);

FOUNDATION_EXPORT ADFilter_FilterResults *new_ADFilter_FilterResults_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ADFilter_FilterResults *create_ADFilter_FilterResults_init(void);

J2OBJC_TYPE_LITERAL_HEADER(ADFilter_FilterResults)

#endif

#if !defined (ADFilter_FilterListener_) && (INCLUDE_ALL_Filter || defined(INCLUDE_ADFilter_FilterListener))
#define ADFilter_FilterListener_

/*!
 @brief <p>Listener used to receive a notification upon completion of a filtering
  operation.
 </p>
 */
@protocol ADFilter_FilterListener < JavaObject >

/*!
 @brief <p>Notifies the end of a filtering operation.
 </p>
 @param count the number of values computed by the filter
 */
- (void)onFilterCompleteWithInt:(jint)count;

@end

J2OBJC_EMPTY_STATIC_INIT(ADFilter_FilterListener)

J2OBJC_TYPE_LITERAL_HEADER(ADFilter_FilterListener)

#endif

#if !defined (ADFilter_Delayer_) && (INCLUDE_ALL_Filter || defined(INCLUDE_ADFilter_Delayer))
#define ADFilter_Delayer_

@protocol JavaLangCharSequence;

/*!
 */
@protocol ADFilter_Delayer < JavaObject >

/*!
 @param constraint The constraint passed to <code>Filter.filter(CharSequence)</code>
 @return The delay that should be used for
          <code>Handler.sendMessageDelayed(r.android.os.Message, long)</code>
 */
- (jlong)getPostingDelayWithJavaLangCharSequence:(id<JavaLangCharSequence>)constraint;

@end

J2OBJC_EMPTY_STATIC_INIT(ADFilter_Delayer)

J2OBJC_TYPE_LITERAL_HEADER(ADFilter_Delayer)

#endif

#pragma pop_macro("INCLUDE_ALL_Filter")
