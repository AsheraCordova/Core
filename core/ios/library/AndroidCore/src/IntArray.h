//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroid\src\main\java\r\android\util\IntArray.java
//

#import <Foundation/Foundation.h>
#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_IntArray")
#ifdef RESTRICT_IntArray
#define INCLUDE_ALL_IntArray 0
#else
#define INCLUDE_ALL_IntArray 1
#endif
#undef RESTRICT_IntArray

#if !defined (ADIntArray_) && (INCLUDE_ALL_IntArray || defined(INCLUDE_ADIntArray))
#define ADIntArray_


@class IOSIntArray;
@class JavaLangInteger;

/*!
 @brief Implements a growing array of int primitives.
 */
@interface ADIntArray : NSObject < NSCopying >

#pragma mark Public

/*!
 @brief Creates an empty IntArray with the default initial capacity.
 */
- (instancetype)init;

/*!
 @brief Creates an empty IntArray with the specified initial capacity.
 */
- (instancetype)initWithInt:(int32_t)initialCapacity;

/*!
 @brief Appends the specified value to the end of this array.
 */
- (void)addWithInt:(int32_t)value;

/*!
 @brief Inserts a value at the specified position in this array.If the specified index is equal to
  the length of the array, the value is added at the end.
 @throw IndexOutOfBoundsExceptionwhen index &lt; 0 || index &gt; size()
 */
- (void)addWithInt:(int32_t)index
           withInt:(int32_t)value;

/*!
 @brief Adds the values in the specified array to this array.
 */
- (void)addAllWithADIntArray:(ADIntArray *)values;

/*!
 @brief Searches the array for the specified value using the binary search algorithm.The array must
  be sorted (as by the <code>Arrays.sort(int[], int, int)</code> method) prior to making this call.
 If it is not sorted, the results are undefined. If the range contains multiple elements with
  the specified value, there is no guarantee which one will be found.
 @param value The value to search for.
 @return index of the search key, if it is contained in the array; otherwise, <i>(-(insertion
          point) - 1)</i>. The insertion point is defined as the point at which the key would
          be inserted into the array: the index of the first element greater than the key, or         
 <code>size()</code> if all elements in the array are less than the specified key.
          Note that this guarantees that the return value will be >= 0 if and only if the key
          is found.
 */
- (int32_t)binarySearchWithInt:(int32_t)value;

/*!
 @brief Removes all values from this array.
 */
- (void)clear;

- (ADIntArray *)java_clone;

/*!
 @brief Creates an IntArray from the given primitive int array, copying it.
 */
+ (ADIntArray *)fromArrayWithIntArray:(IOSIntArray *)array
                              withInt:(int32_t)size;

/*!
 @brief Returns the value at the specified position in this array.
 */
- (int32_t)getWithInt:(int32_t)index;

/*!
 @brief Returns the index of the first occurrence of the specified value in this
  array, or -1 if this array does not contain the value.
 */
- (int32_t)indexOfWithInt:(int32_t)value;

/*!
 @brief Removes the value at the specified index from this array.
 */
- (void)removeWithInt:(int32_t)index;

/*!
 @brief Changes the size of this IntArray.If this IntArray is shrinked, the backing array capacity
  is unchanged.
 If the new size is larger than backing array capacity, a new backing array is
  created from the current content of this IntArray padded with 0s.
 */
- (void)resizeWithInt:(int32_t)newSize;

/*!
 @brief Sets the value at the specified position in this array.
 */
- (void)setWithInt:(int32_t)index
           withInt:(int32_t)value;

/*!
 @brief Returns the number of values in this array.
 */
- (int32_t)size;

/*!
 @brief Returns a new array with the contents of this IntArray.
 */
- (IOSIntArray *)toArray;

/*!
 @brief Creates an IntArray wrapping the given primitive int array.
 */
+ (ADIntArray *)wrapWithIntArray:(IOSIntArray *)array;

@end

J2OBJC_EMPTY_STATIC_INIT(ADIntArray)

FOUNDATION_EXPORT void ADIntArray_init(ADIntArray *self);

FOUNDATION_EXPORT ADIntArray *new_ADIntArray_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ADIntArray *create_ADIntArray_init(void);

FOUNDATION_EXPORT void ADIntArray_initWithInt_(ADIntArray *self, int32_t initialCapacity);

FOUNDATION_EXPORT ADIntArray *new_ADIntArray_initWithInt_(int32_t initialCapacity) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ADIntArray *create_ADIntArray_initWithInt_(int32_t initialCapacity);

FOUNDATION_EXPORT ADIntArray *ADIntArray_wrapWithIntArray_(IOSIntArray *array);

FOUNDATION_EXPORT ADIntArray *ADIntArray_fromArrayWithIntArray_withInt_(IOSIntArray *array, int32_t size);

J2OBJC_TYPE_LITERAL_HEADER(ADIntArray)

@compatibility_alias RAndroidUtilIntArray ADIntArray;


#endif

#pragma pop_macro("INCLUDE_ALL_IntArray")
