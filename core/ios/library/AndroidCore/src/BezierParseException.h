//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroid\src\main\stub\r\android\graphics\BezierParseException.java
//

#import <Foundation/Foundation.h>
#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_BezierParseException")
#ifdef RESTRICT_BezierParseException
#define INCLUDE_ALL_BezierParseException 0
#else
#define INCLUDE_ALL_BezierParseException 1
#endif
#undef RESTRICT_BezierParseException

#if !defined (ADBezierParseException_) && (INCLUDE_ALL_BezierParseException || defined(INCLUDE_ADBezierParseException))
#define ADBezierParseException_

#define RESTRICT_JavaLangRuntimeException 1
#define INCLUDE_JavaLangRuntimeException 1
#include "java/lang/RuntimeException.h"

@class JavaLangBoolean;
@class JavaLangException;
@class JavaLangInteger;
@class JavaLangThrowable;
@class NSString;

/*!
 @brief This class encapsulates a general parse error or warning.
 <p>This class can contain basic error or warning information from
  either the parser or the application. 
 <p>If the application needs to pass through other types of
  exceptions, it must wrap those exceptions in a ParseException.
 @author <a href="mailto:stephane@@hillion.org">Stephane Hillion</a>
 @version $Id: ParseException.java 475685 2006-11-16 11:16:05Z cam $
 */
@interface ADBezierParseException : JavaLangRuntimeException {
 @public
  /*!
   */
  JavaLangException *exception_;
  /*!
   */
  int32_t lineNumber_;
  /*!
   */
  int32_t columnNumber_;
}

#pragma mark Public

/*!
 @brief Creates a new ParseException wrapping an existing exception.
 <p>The existing exception will be embedded in the new
  one, and its message will become the default message for
  the ParseException.
 @param e The exception to be wrapped in a ParseException.
 */
- (instancetype)initWithJavaLangException:(JavaLangException *)e;

/*!
 @brief Creates a new ParseException from an existing exception.
 <p>The existing exception will be embedded in the new
  one, but the new exception will have its own message.
 @param message The detail message.
 @param e The exception to be wrapped in a SAXException.
 */
- (instancetype)initWithNSString:(NSString *)message
           withJavaLangException:(JavaLangException *)e;

/*!
 @brief Creates a new ParseException.
 @param message The error or warning message.
 @param line The line of the last parsed character.
 @param column The column of the last parsed character.
 */
- (instancetype)initWithNSString:(NSString *)message
                         withInt:(int32_t)line
                         withInt:(int32_t)column;

/*!
 @brief Returns the column of the last parsed character.
 */
- (int32_t)getColumnNumber;

/*!
 @brief Return the embedded exception, if any.
 @return The embedded exception, or null if there is none.
 */
- (JavaLangException *)getException;

/*!
 @brief Returns the line of the last parsed character.
 */
- (int32_t)getLineNumber;

/*!
 @brief Return a detail message for this exception.
 <p>If there is a embedded exception, and if the ParseException
  has no detail message of its own, this method will return
  the detail message from the embedded exception.
 @return The error or warning message.
 */
- (NSString *)getMessage;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

- (instancetype)initWithJavaLangThrowable:(JavaLangThrowable *)arg0 NS_UNAVAILABLE;

- (instancetype)initWithNSString:(NSString *)arg0 NS_UNAVAILABLE;

- (instancetype)initWithNSString:(NSString *)arg0
           withJavaLangThrowable:(JavaLangThrowable *)arg1 NS_UNAVAILABLE;

- (instancetype)initWithNSString:(NSString *)arg0
           withJavaLangThrowable:(JavaLangThrowable *)arg1
                     withBoolean:(bool)arg2
                     withBoolean:(bool)arg3 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ADBezierParseException)

J2OBJC_FIELD_SETTER(ADBezierParseException, exception_, JavaLangException *)

FOUNDATION_EXPORT void ADBezierParseException_initWithNSString_withInt_withInt_(ADBezierParseException *self, NSString *message, int32_t line, int32_t column);

FOUNDATION_EXPORT ADBezierParseException *new_ADBezierParseException_initWithNSString_withInt_withInt_(NSString *message, int32_t line, int32_t column) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ADBezierParseException *create_ADBezierParseException_initWithNSString_withInt_withInt_(NSString *message, int32_t line, int32_t column);

FOUNDATION_EXPORT void ADBezierParseException_initWithJavaLangException_(ADBezierParseException *self, JavaLangException *e);

FOUNDATION_EXPORT ADBezierParseException *new_ADBezierParseException_initWithJavaLangException_(JavaLangException *e) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ADBezierParseException *create_ADBezierParseException_initWithJavaLangException_(JavaLangException *e);

FOUNDATION_EXPORT void ADBezierParseException_initWithNSString_withJavaLangException_(ADBezierParseException *self, NSString *message, JavaLangException *e);

FOUNDATION_EXPORT ADBezierParseException *new_ADBezierParseException_initWithNSString_withJavaLangException_(NSString *message, JavaLangException *e) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ADBezierParseException *create_ADBezierParseException_initWithNSString_withJavaLangException_(NSString *message, JavaLangException *e);

J2OBJC_TYPE_LITERAL_HEADER(ADBezierParseException)

@compatibility_alias RAndroidGraphicsBezierParseException ADBezierParseException;


#endif

#pragma pop_macro("INCLUDE_ALL_BezierParseException")
