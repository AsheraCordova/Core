//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroid\src\main\java\r\android\view\animation\AnticipateInterpolator.java
//

#import <Foundation/Foundation.h>
#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_AnticipateInterpolator")
#ifdef RESTRICT_AnticipateInterpolator
#define INCLUDE_ALL_AnticipateInterpolator 0
#else
#define INCLUDE_ALL_AnticipateInterpolator 1
#endif
#undef RESTRICT_AnticipateInterpolator

#if !defined (ADAnticipateInterpolator_) && (INCLUDE_ALL_AnticipateInterpolator || defined(INCLUDE_ADAnticipateInterpolator))
#define ADAnticipateInterpolator_

#define RESTRICT_BaseInterpolator 1
#define INCLUDE_ADBaseInterpolator 1
#include "BaseInterpolator.h"

@class JavaLangFloat;
@class JavaLangLong;

/*!
 @brief An interpolator where the change starts backward then flings forward.
 */
@interface ADAnticipateInterpolator : ADBaseInterpolator

#pragma mark Public

- (instancetype)init;

/*!
 @param tension Amount of anticipation. When tension equals 0.0f, there is                 no anticipation and the interpolator becomes a simple
                  acceleration interpolator.
 */
- (instancetype)initWithFloat:(float)tension;

/*!
 */
- (int64_t)createNativeInterpolator;

/*!
 */
- (float)getInterpolationWithFloat:(float)t;

@end

J2OBJC_EMPTY_STATIC_INIT(ADAnticipateInterpolator)

FOUNDATION_EXPORT void ADAnticipateInterpolator_init(ADAnticipateInterpolator *self);

FOUNDATION_EXPORT ADAnticipateInterpolator *new_ADAnticipateInterpolator_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ADAnticipateInterpolator *create_ADAnticipateInterpolator_init(void);

FOUNDATION_EXPORT void ADAnticipateInterpolator_initWithFloat_(ADAnticipateInterpolator *self, float tension);

FOUNDATION_EXPORT ADAnticipateInterpolator *new_ADAnticipateInterpolator_initWithFloat_(float tension) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ADAnticipateInterpolator *create_ADAnticipateInterpolator_initWithFloat_(float tension);

J2OBJC_TYPE_LITERAL_HEADER(ADAnticipateInterpolator)

@compatibility_alias RAndroidViewAnimationAnticipateInterpolator ADAnticipateInterpolator;


#endif

#pragma pop_macro("INCLUDE_ALL_AnticipateInterpolator")
