//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroid\src\main\java\r\android\animation\FloatArrayEvaluator.java
//

#import <Foundation/Foundation.h>
#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_FloatArrayEvaluator")
#ifdef RESTRICT_FloatArrayEvaluator
#define INCLUDE_ALL_FloatArrayEvaluator 0
#else
#define INCLUDE_ALL_FloatArrayEvaluator 1
#endif
#undef RESTRICT_FloatArrayEvaluator

#if !defined (ADFloatArrayEvaluator_) && (INCLUDE_ALL_FloatArrayEvaluator || defined(INCLUDE_ADFloatArrayEvaluator))
#define ADFloatArrayEvaluator_

#define RESTRICT_TypeEvaluator 1
#define INCLUDE_ADTypeEvaluator 1
#include "TypeEvaluator.h"

@class IOSFloatArray;
@class JavaLangFloat;

/*!
 @brief This evaluator can be used to perform type interpolation between <code>float[]</code> values.
 Each index into the array is treated as a separate value to interpolate. For example,
  evaluating <code>{100, 200}</code> and <code>{300, 400}</code> will interpolate the value at
  the first index between 100 and 300 and the value at the second index value between 200 and 400.
 */
@interface ADFloatArrayEvaluator : NSObject < ADTypeEvaluator >

#pragma mark Public

/*!
 @brief Create a FloatArrayEvaluator that does not reuse the animated value.Care must be taken
  when using this option because on every evaluation a new <code>float[]</code> will be
  allocated.
 - seealso: #FloatArrayEvaluator(float[])
 */
- (instancetype)init;

/*!
 @brief Create a FloatArrayEvaluator that reuses <code>reuseArray</code> for every evaluate() call.
 Caution must be taken to ensure that the value returned from 
 <code>r.android.animation.ValueAnimator.getAnimatedValue()</code> is not cached, modified, or
  used across threads. The value will be modified on each <code>evaluate()</code> call.
 @param reuseArray The array to modify and return from  <code> evaluate </code>
  .
 */
- (instancetype)initWithFloatArray:(IOSFloatArray *)reuseArray;

/*!
 @brief Interpolates the value at each index by the fraction.If
  <code>FloatArrayEvaluator(float[])</code> was used to construct this object, 
 <code>reuseArray</code> will be returned, otherwise a new <code>float[]</code>
  will be returned.
 @param fraction The fraction from the starting to the ending values
 @param startValue The start value.
 @param endValue The end value.
 @return A <code>float[]</code> where each element is an interpolation between
          the same index in startValue and endValue.
 */
- (IOSFloatArray *)evaluateWithFloat:(float)fraction
                              withId:(IOSFloatArray *)startValue
                              withId:(IOSFloatArray *)endValue;

@end

J2OBJC_EMPTY_STATIC_INIT(ADFloatArrayEvaluator)

FOUNDATION_EXPORT void ADFloatArrayEvaluator_init(ADFloatArrayEvaluator *self);

FOUNDATION_EXPORT ADFloatArrayEvaluator *new_ADFloatArrayEvaluator_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ADFloatArrayEvaluator *create_ADFloatArrayEvaluator_init(void);

FOUNDATION_EXPORT void ADFloatArrayEvaluator_initWithFloatArray_(ADFloatArrayEvaluator *self, IOSFloatArray *reuseArray);

FOUNDATION_EXPORT ADFloatArrayEvaluator *new_ADFloatArrayEvaluator_initWithFloatArray_(IOSFloatArray *reuseArray) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ADFloatArrayEvaluator *create_ADFloatArrayEvaluator_initWithFloatArray_(IOSFloatArray *reuseArray);

J2OBJC_TYPE_LITERAL_HEADER(ADFloatArrayEvaluator)

@compatibility_alias RAndroidAnimationFloatArrayEvaluator ADFloatArrayEvaluator;


#endif

#pragma pop_macro("INCLUDE_ALL_FloatArrayEvaluator")
