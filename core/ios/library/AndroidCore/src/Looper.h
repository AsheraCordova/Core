//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroid\src\main\java\r\android\os\Looper.java
//

#import <Foundation/Foundation.h>
#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_Looper")
#ifdef RESTRICT_Looper
#define INCLUDE_ALL_Looper 0
#else
#define INCLUDE_ALL_Looper 1
#endif
#undef RESTRICT_Looper

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ADLooper_) && (INCLUDE_ALL_Looper || defined(INCLUDE_ADLooper))
#define ADLooper_

@class ADMessageQueue;
@class JavaLangBoolean;
@class JavaLangThread;

@interface ADLooper : NSObject {
 @public
  ADMessageQueue *mQueue_;
}

#pragma mark Public

/*!
 @brief Returns the application's main looper, which lives in the main thread of the application.
 */
+ (ADLooper *)getMainLooper;

/*!
 @brief Gets this looper's message queue.
 @return The looper's message queue.
 */
- (ADMessageQueue *)getQueue;

- (JavaLangThread *)getThread;

/*!
 @brief Returns true if the current thread is this looper's thread.
 */
- (bool)isCurrentThread;

/*!
 @brief Run the message queue in this thread.Be sure to call 
 <code>quit()</code> to end the loop.
 */
+ (void)loop;

/*!
 @brief Return the Looper object associated with the current thread.Returns
  null if the calling thread is not associated with a Looper.
 */
+ (ADLooper *)myLooper;

/*!
 @brief Return the <code>MessageQueue</code> object associated with the current
  thread.This must be called from a thread running a Looper, or a
  NullPointerException will be thrown.
 */
+ (ADMessageQueue *)myQueue;

/*!
 @brief Initialize the current thread as a looper.
 This gives you a chance to create handlers that then reference
  this looper, before actually starting the loop. Be sure to call 
 <code>loop()</code> after calling this method, and end it by calling 
 <code>quit()</code>.
 */
+ (void)prepare;

/*!
 @brief Initialize the current thread as a looper, marking it as an
  application's main looper.See also: <code>prepare()</code>
 */
+ (void)prepareMainLooper;

- (void)quit;

/*!
 @brief Quits the looper safely.
 <p>
  Causes the <code>loop</code> method to terminate as soon as all remaining messages
  in the message queue that are already due to be delivered have been handled.
  However pending delayed messages with due times in the future will not be
  delivered before the loop terminates. 
 </p><p>
  Any attempt to post messages to the queue after the looper is asked to quit will fail.
  For example, the <code>Handler.sendMessage(Message)</code> method will return false. 
 </p>
 */
- (void)quitSafely;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(ADLooper)

J2OBJC_FIELD_SETTER(ADLooper, mQueue_, ADMessageQueue *)

FOUNDATION_EXPORT void ADLooper_prepare(void);

FOUNDATION_EXPORT void ADLooper_prepareMainLooper(void);

FOUNDATION_EXPORT ADLooper *ADLooper_getMainLooper(void);

FOUNDATION_EXPORT void ADLooper_loop(void);

FOUNDATION_EXPORT ADLooper *ADLooper_myLooper(void);

FOUNDATION_EXPORT ADMessageQueue *ADLooper_myQueue(void);

J2OBJC_TYPE_LITERAL_HEADER(ADLooper)

@compatibility_alias RAndroidOsLooper ADLooper;


#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_Looper")
