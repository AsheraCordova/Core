//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroid\src\main\java\r\android\os\HandlerThread.java
//

#include "Handler.h"
#include "HandlerThread.h"
#include "J2ObjC_source.h"
#include "Looper.h"
#include "java/lang/InterruptedException.h"
#include "java/lang/Thread.h"


@interface ADHandlerThread () {
 @public
  ADHandler *mHandler_;
}

@end

J2OBJC_FIELD_SETTER(ADHandlerThread, mHandler_, ADHandler *)

@implementation ADHandlerThread

- (instancetype)initWithNSString:(NSString *)name {
  ADHandlerThread_initWithNSString_(self, name);
  return self;
}

- (instancetype)initWithNSString:(NSString *)name
                         withInt:(jint)priority {
  ADHandlerThread_initWithNSString_withInt_(self, name, priority);
  return self;
}

- (void)onLooperPrepared {
}

- (void)run {
  mTid_ = 100;
  ADLooper_prepare();
  @synchronized(self) {
    JreStrongAssign(&mLooper_, ADLooper_myLooper());
    [self java_notifyAll];
  }
  [self onLooperPrepared];
  ADLooper_loop();
  mTid_ = -1;
}

- (ADLooper *)getLooper {
  if (![self isAlive]) {
    return nil;
  }
  jboolean wasInterrupted = false;
  @synchronized(self) {
    while ([self isAlive] && mLooper_ == nil) {
      @try {
        [self java_wait];
      }
      @catch (JavaLangInterruptedException *e) {
        wasInterrupted = true;
      }
    }
  }
  if (wasInterrupted) {
    [((JavaLangThread *) nil_chk(JavaLangThread_currentThread())) interrupt];
  }
  return mLooper_;
}

- (ADHandler *)getThreadHandler {
  if (mHandler_ == nil) {
    JreStrongAssignAndConsume(&mHandler_, new_ADHandler_initWithADLooper_([self getLooper]));
  }
  return mHandler_;
}

- (jboolean)quit {
  ADLooper *looper = JreRetainedLocalValue([self getLooper]);
  if (looper != nil) {
    [looper quit];
    return true;
  }
  return false;
}

- (jboolean)quitSafely {
  ADLooper *looper = JreRetainedLocalValue([self getLooper]);
  if (looper != nil) {
    [looper quitSafely];
    return true;
  }
  return false;
}

- (jint)getThreadId {
  return mTid_;
}

- (void)dealloc {
  RELEASE_(mLooper_);
  RELEASE_(mHandler_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADLooper;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADHandler;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(initWithNSString:withInt:);
  methods[2].selector = @selector(onLooperPrepared);
  methods[3].selector = @selector(run);
  methods[4].selector = @selector(getLooper);
  methods[5].selector = @selector(getThreadHandler);
  methods[6].selector = @selector(quit);
  methods[7].selector = @selector(quitSafely);
  methods[8].selector = @selector(getThreadId);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mPriority_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mTid_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mLooper_", "LADLooper;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mHandler_", "LADHandler;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "LNSString;I" };
  static const J2ObjcClassInfo _ADHandlerThread = { "HandlerThread", "r.android.os", ptrTable, methods, fields, 7, 0x1, 9, 4, -1, -1, -1, -1, -1 };
  return &_ADHandlerThread;
}

@end

void ADHandlerThread_initWithNSString_(ADHandlerThread *self, NSString *name) {
  JavaLangThread_initWithNSString_(self, name);
  self->mTid_ = -1;
  self->mPriority_ = 10;
}

ADHandlerThread *new_ADHandlerThread_initWithNSString_(NSString *name) {
  J2OBJC_NEW_IMPL(ADHandlerThread, initWithNSString_, name)
}

ADHandlerThread *create_ADHandlerThread_initWithNSString_(NSString *name) {
  J2OBJC_CREATE_IMPL(ADHandlerThread, initWithNSString_, name)
}

void ADHandlerThread_initWithNSString_withInt_(ADHandlerThread *self, NSString *name, jint priority) {
  JavaLangThread_initWithNSString_(self, name);
  self->mTid_ = -1;
  self->mPriority_ = priority;
}

ADHandlerThread *new_ADHandlerThread_initWithNSString_withInt_(NSString *name, jint priority) {
  J2OBJC_NEW_IMPL(ADHandlerThread, initWithNSString_withInt_, name, priority)
}

ADHandlerThread *create_ADHandlerThread_initWithNSString_withInt_(NSString *name, jint priority) {
  J2OBJC_CREATE_IMPL(ADHandlerThread, initWithNSString_withInt_, name, priority)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADHandlerThread)
