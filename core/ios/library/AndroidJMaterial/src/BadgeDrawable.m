//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\AndroidJMaterial\src\main\java\com\google\android\material\badge\BadgeDrawable.java
//

#include "BadgeDrawable.h"
#include "BadgeState.h"
#include "BadgeUtils.h"
#include "Color.h"
#include "ColorDrawable.h"
#include "ColorStateList.h"
#include "Context.h"
#include "Drawable.h"
#include "FrameLayout.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "Log.h"
#include "PluginInvoker.h"
#include "Rect.h"
#include "TextView.h"
#include "View.h"
#include "ViewGroup.h"
#include "ViewParent.h"
#include "java/lang/Boolean.h"
#include "java/lang/Float.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/ref/WeakReference.h"
#include "java/text/NumberFormat.h"
#include "java/util/Locale.h"

@class JavaLangRefWeakReference;


@interface ADXBadgeDrawable () {
 @public
  JavaLangRefWeakReference *contextRef_;
  ADXBadgeDrawable_MaterialShapeDrawable *shapeDrawable_;
  ADXBadgeDrawable_TextDrawableHelper *textDrawableHelper_;
  ADRect *badgeBounds_;
  ADXBadgeState *state_;
  jfloat badgeCenterX_;
  jfloat badgeCenterY_;
  jint maxBadgeNumber_;
  jfloat cornerRadius_;
  jfloat halfBadgeWidth_;
  jfloat halfBadgeHeight_;
  JavaLangRefWeakReference *anchorViewRef_;
  JavaLangRefWeakReference *customBadgeParentRef_;
  NSString *textAppearanceResource_;
}

- (void)onVisibilityUpdated;

+ (void)updateAnchorParentToNotClipWithADView:(ADView *)anchorView;

- (void)onBackgroundColorUpdated;

- (void)onBadgeTextColorUpdated;

- (void)onNumberUpdated;

- (void)onMaxBadgeLengthUpdated;

- (void)onBadgeGravityUpdated;

- (void)onAlphaUpdated;

- (void)onBadgeShapeAppearanceUpdated;

- (void)updateCenterAndBounds;

- (jint)getTotalVerticalOffsetForState;

- (jint)getTotalHorizontalOffsetForState;

- (void)calculateCenterAndBoundsWithADRect:(ADRect *)anchorRect
                                withADView:(ADView *)anchorView;

- (void)autoAdjustWithinViewBoundsWithADView:(ADView *)anchorView
                                  withADView:(ADView *)ancestorView;

- (void)autoAdjustWithinGrandparentBoundsWithADView:(ADView *)anchorView;

- (jfloat)getTopCutOffWithFloat:(jfloat)totalAnchorYOffset;

- (jfloat)getLeftCutOffWithFloat:(jfloat)totalAnchorXOffset;

- (jfloat)getBottomCutOffWithFloat:(jfloat)ancestorHeight
                         withFloat:(jfloat)totalAnchorYOffset;

- (jfloat)getRightCutoffWithFloat:(jfloat)ancestorWidth
                        withFloat:(jfloat)totalAnchorXOffset;

- (jboolean)hasBadgeContent;

- (NSString *)getBadgeContent;

- (NSString *)getTextBadgeText;

- (NSString *)getNumberBadgeText;

- (void)onBadgeContentUpdated;

- (void)updateMaxBadgeNumber;

- (id)colorToNativeColorWithInt:(jint)color;

@end

J2OBJC_FIELD_SETTER(ADXBadgeDrawable, contextRef_, JavaLangRefWeakReference *)
J2OBJC_FIELD_SETTER(ADXBadgeDrawable, shapeDrawable_, ADXBadgeDrawable_MaterialShapeDrawable *)
J2OBJC_FIELD_SETTER(ADXBadgeDrawable, textDrawableHelper_, ADXBadgeDrawable_TextDrawableHelper *)
J2OBJC_FIELD_SETTER(ADXBadgeDrawable, badgeBounds_, ADRect *)
J2OBJC_FIELD_SETTER(ADXBadgeDrawable, state_, ADXBadgeState *)
J2OBJC_FIELD_SETTER(ADXBadgeDrawable, anchorViewRef_, JavaLangRefWeakReference *)
J2OBJC_FIELD_SETTER(ADXBadgeDrawable, customBadgeParentRef_, JavaLangRefWeakReference *)
J2OBJC_FIELD_SETTER(ADXBadgeDrawable, textAppearanceResource_, NSString *)

inline NSString *ADXBadgeDrawable_get_TAG(void);
static NSString *ADXBadgeDrawable_TAG = @"Badge";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXBadgeDrawable, TAG, NSString *)

__attribute__((unused)) static void ADXBadgeDrawable_onVisibilityUpdated(ADXBadgeDrawable *self);

__attribute__((unused)) static void ADXBadgeDrawable_updateAnchorParentToNotClipWithADView_(ADView *anchorView);

__attribute__((unused)) static void ADXBadgeDrawable_onBackgroundColorUpdated(ADXBadgeDrawable *self);

__attribute__((unused)) static void ADXBadgeDrawable_onBadgeTextColorUpdated(ADXBadgeDrawable *self);

__attribute__((unused)) static void ADXBadgeDrawable_onNumberUpdated(ADXBadgeDrawable *self);

__attribute__((unused)) static void ADXBadgeDrawable_onMaxBadgeLengthUpdated(ADXBadgeDrawable *self);

__attribute__((unused)) static void ADXBadgeDrawable_onBadgeGravityUpdated(ADXBadgeDrawable *self);

__attribute__((unused)) static void ADXBadgeDrawable_onAlphaUpdated(ADXBadgeDrawable *self);

__attribute__((unused)) static void ADXBadgeDrawable_onBadgeShapeAppearanceUpdated(ADXBadgeDrawable *self);

__attribute__((unused)) static void ADXBadgeDrawable_updateCenterAndBounds(ADXBadgeDrawable *self);

__attribute__((unused)) static jint ADXBadgeDrawable_getTotalVerticalOffsetForState(ADXBadgeDrawable *self);

__attribute__((unused)) static jint ADXBadgeDrawable_getTotalHorizontalOffsetForState(ADXBadgeDrawable *self);

__attribute__((unused)) static void ADXBadgeDrawable_calculateCenterAndBoundsWithADRect_withADView_(ADXBadgeDrawable *self, ADRect *anchorRect, ADView *anchorView);

__attribute__((unused)) static void ADXBadgeDrawable_autoAdjustWithinViewBoundsWithADView_withADView_(ADXBadgeDrawable *self, ADView *anchorView, ADView *ancestorView);

__attribute__((unused)) static void ADXBadgeDrawable_autoAdjustWithinGrandparentBoundsWithADView_(ADXBadgeDrawable *self, ADView *anchorView);

__attribute__((unused)) static jfloat ADXBadgeDrawable_getTopCutOffWithFloat_(ADXBadgeDrawable *self, jfloat totalAnchorYOffset);

__attribute__((unused)) static jfloat ADXBadgeDrawable_getLeftCutOffWithFloat_(ADXBadgeDrawable *self, jfloat totalAnchorXOffset);

__attribute__((unused)) static jfloat ADXBadgeDrawable_getBottomCutOffWithFloat_withFloat_(ADXBadgeDrawable *self, jfloat ancestorHeight, jfloat totalAnchorYOffset);

__attribute__((unused)) static jfloat ADXBadgeDrawable_getRightCutoffWithFloat_withFloat_(ADXBadgeDrawable *self, jfloat ancestorWidth, jfloat totalAnchorXOffset);

__attribute__((unused)) static jboolean ADXBadgeDrawable_hasBadgeContent(ADXBadgeDrawable *self);

__attribute__((unused)) static NSString *ADXBadgeDrawable_getBadgeContent(ADXBadgeDrawable *self);

__attribute__((unused)) static NSString *ADXBadgeDrawable_getTextBadgeText(ADXBadgeDrawable *self);

__attribute__((unused)) static NSString *ADXBadgeDrawable_getNumberBadgeText(ADXBadgeDrawable *self);

__attribute__((unused)) static void ADXBadgeDrawable_onBadgeContentUpdated(ADXBadgeDrawable *self);

__attribute__((unused)) static void ADXBadgeDrawable_updateMaxBadgeNumber(ADXBadgeDrawable *self);

__attribute__((unused)) static id ADXBadgeDrawable_colorToNativeColorWithInt_(ADXBadgeDrawable *self, jint color);

@interface ADXBadgeDrawable_MaterialShapeDrawable () {
 @public
  jfloat cornerSize_;
  ADColorStateList *backgroundColorStateList_;
}

@end

J2OBJC_FIELD_SETTER(ADXBadgeDrawable_MaterialShapeDrawable, backgroundColorStateList_, ADColorStateList *)

@interface ADXBadgeDrawable_TextDrawableHelper () {
 @public
  ADXBadgeDrawable *this$0_;
}

@end

NSString *ADXBadgeDrawable_DEFAULT_EXCEED_MAX_BADGE_NUMBER_SUFFIX = @"+";
NSString *ADXBadgeDrawable_DEFAULT_EXCEED_MAX_BADGE_TEXT_SUFFIX = @"\u2026";

@implementation ADXBadgeDrawable

- (void)setVisibleWithBoolean:(jboolean)visible {
  [((ADXBadgeState *) nil_chk(state_)) setVisibleWithBoolean:visible];
  ADXBadgeDrawable_onVisibilityUpdated(self);
}

- (void)onVisibilityUpdated {
  ADXBadgeDrawable_onVisibilityUpdated(self);
}

- (void)updateBadgeCoordinatesWithADView:(ADView *)anchorView
                         withADViewGroup:(ADViewGroup *)customBadgeParent {
  if (!([customBadgeParent isKindOfClass:[ADFrameLayout class]])) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"customBadgeParent must be a FrameLayout");
  }
  [self updateBadgeCoordinatesWithADView:anchorView withADFrameLayout:(ADFrameLayout *) cast_chk(customBadgeParent, [ADFrameLayout class])];
}

- (void)updateBadgeCoordinatesWithADView:(ADView *)anchorView {
  [self updateBadgeCoordinatesWithADView:anchorView withADFrameLayout:nil];
}

- (void)updateBadgeCoordinatesWithADView:(ADView *)anchorView
                       withADFrameLayout:(ADFrameLayout *)customBadgeParent {
  JreStrongAssignAndConsume(&self->anchorViewRef_, new_JavaLangRefWeakReference_initWithId_(anchorView));
  JreStrongAssignAndConsume(&self->customBadgeParentRef_, new_JavaLangRefWeakReference_initWithId_(customBadgeParent));
  ADXBadgeDrawable_updateAnchorParentToNotClipWithADView_(anchorView);
  ADXBadgeDrawable_updateCenterAndBounds(self);
  [self invalidateSelf];
}

- (ADFrameLayout *)getCustomBadgeParent {
  return customBadgeParentRef_ != nil ? [customBadgeParentRef_ get] : nil;
}

+ (void)updateAnchorParentToNotClipWithADView:(ADView *)anchorView {
  ADXBadgeDrawable_updateAnchorParentToNotClipWithADView_(anchorView);
}

- (void)setBackgroundColorWithInt:(jint)backgroundColor {
  [((ADXBadgeState *) nil_chk(state_)) setBackgroundColorWithInt:backgroundColor];
  ADXBadgeDrawable_onBackgroundColorUpdated(self);
}

- (void)onBackgroundColorUpdated {
  ADXBadgeDrawable_onBackgroundColorUpdated(self);
}

- (void)setBadgeTextColorWithInt:(jint)badgeTextColor {
  if ([((ADXBadgeDrawable_TextPaint *) nil_chk([((ADXBadgeDrawable_TextDrawableHelper *) nil_chk(textDrawableHelper_)) getTextPaint])) getColor] != badgeTextColor) {
    [((ADXBadgeState *) nil_chk(state_)) setBadgeTextColorWithInt:badgeTextColor];
    ADXBadgeDrawable_onBadgeTextColorUpdated(self);
  }
}

- (void)onBadgeTextColorUpdated {
  ADXBadgeDrawable_onBadgeTextColorUpdated(self);
}

- (jboolean)hasNumber {
  return ![((ADXBadgeState *) nil_chk(state_)) hasText] && [state_ hasNumber];
}

- (jint)getNumber {
  return [((ADXBadgeState *) nil_chk(state_)) hasNumber] ? [state_ getNumber] : 0;
}

- (void)setNumberWithInt:(jint)number {
  number = JavaLangMath_maxWithInt_withInt_(0, number);
  if ([((ADXBadgeState *) nil_chk(self->state_)) getNumber] != number) {
    [state_ setNumberWithInt:number];
    ADXBadgeDrawable_onNumberUpdated(self);
  }
}

- (void)onNumberUpdated {
  ADXBadgeDrawable_onNumberUpdated(self);
}

- (jboolean)hasText {
  return [((ADXBadgeState *) nil_chk(state_)) hasText];
}

- (NSString *)getText {
  return [((ADXBadgeState *) nil_chk(state_)) getText];
}

- (jint)getMaxCharacterCount {
  return [((ADXBadgeState *) nil_chk(state_)) getMaxCharacterCount];
}

- (void)setMaxCharacterCountWithInt:(jint)maxCharacterCount {
  if ([((ADXBadgeState *) nil_chk(self->state_)) getMaxCharacterCount] != maxCharacterCount) {
    [self->state_ setMaxCharacterCountWithInt:maxCharacterCount];
    ADXBadgeDrawable_onMaxBadgeLengthUpdated(self);
  }
}

- (jint)getMaxNumber {
  return [((ADXBadgeState *) nil_chk(state_)) getMaxNumber];
}

- (void)onMaxBadgeLengthUpdated {
  ADXBadgeDrawable_onMaxBadgeLengthUpdated(self);
}

- (void)setBadgeGravityWithInt:(jint)gravity {
  if (gravity == ADXBadgeDrawable_BOTTOM_START || gravity == ADXBadgeDrawable_BOTTOM_END) {
    ADLog_wWithNSString_withNSString_(ADXBadgeDrawable_TAG, @"Bottom badge gravities are deprecated; please use a top gravity instead.");
  }
  if ([((ADXBadgeState *) nil_chk(state_)) getBadgeGravity] != gravity) {
    [state_ setBadgeGravityWithInt:gravity];
    ADXBadgeDrawable_onBadgeGravityUpdated(self);
  }
}

- (void)onBadgeGravityUpdated {
  ADXBadgeDrawable_onBadgeGravityUpdated(self);
}

- (jint)getAlpha {
  return [((ADXBadgeState *) nil_chk(state_)) getAlpha];
}

- (void)setAlphaWithInt:(jint)alpha {
  [((ADXBadgeState *) nil_chk(state_)) setAlphaWithInt:alpha];
  ADXBadgeDrawable_onAlphaUpdated(self);
}

- (void)onAlphaUpdated {
  ADXBadgeDrawable_onAlphaUpdated(self);
}

- (void)setHorizontalOffsetWithInt:(jint)px {
  [self setHorizontalOffsetWithoutTextWithInt:px];
  [self setHorizontalOffsetWithTextWithInt:px];
}

- (jint)getHorizontalOffset {
  return [((ADXBadgeState *) nil_chk(state_)) getHorizontalOffsetWithoutText];
}

- (void)setHorizontalOffsetWithoutTextWithInt:(jint)px {
  [((ADXBadgeState *) nil_chk(state_)) setHorizontalOffsetWithoutTextWithInt:px];
  ADXBadgeDrawable_updateCenterAndBounds(self);
}

- (void)setHorizontalOffsetWithTextWithInt:(jint)px {
  [((ADXBadgeState *) nil_chk(state_)) setHorizontalOffsetWithTextWithInt:px];
  ADXBadgeDrawable_updateCenterAndBounds(self);
}

- (void)setAdditionalHorizontalOffsetWithInt:(jint)px {
  [((ADXBadgeState *) nil_chk(state_)) setAdditionalHorizontalOffsetWithInt:px];
  ADXBadgeDrawable_updateCenterAndBounds(self);
}

- (void)setVerticalOffsetWithInt:(jint)px {
  [self setVerticalOffsetWithoutTextWithInt:px];
  [self setVerticalOffsetWithTextWithInt:px];
}

- (void)setVerticalOffsetWithoutTextWithInt:(jint)px {
  [((ADXBadgeState *) nil_chk(state_)) setVerticalOffsetWithoutTextWithInt:px];
  ADXBadgeDrawable_updateCenterAndBounds(self);
}

- (void)setVerticalOffsetWithTextWithInt:(jint)px {
  [((ADXBadgeState *) nil_chk(state_)) setVerticalOffsetWithTextWithInt:px];
  ADXBadgeDrawable_updateCenterAndBounds(self);
}

- (void)setAdditionalVerticalOffsetWithInt:(jint)px {
  [((ADXBadgeState *) nil_chk(state_)) setAdditionalVerticalOffsetWithInt:px];
  ADXBadgeDrawable_updateCenterAndBounds(self);
}

- (void)onBadgeShapeAppearanceUpdated {
  ADXBadgeDrawable_onBadgeShapeAppearanceUpdated(self);
}

- (void)updateCenterAndBounds {
  ADXBadgeDrawable_updateCenterAndBounds(self);
}

- (jint)getTotalVerticalOffsetForState {
  return ADXBadgeDrawable_getTotalVerticalOffsetForState(self);
}

- (jint)getTotalHorizontalOffsetForState {
  return ADXBadgeDrawable_getTotalHorizontalOffsetForState(self);
}

- (void)calculateCenterAndBoundsWithADRect:(ADRect *)anchorRect
                                withADView:(ADView *)anchorView {
  ADXBadgeDrawable_calculateCenterAndBoundsWithADRect_withADView_(self, anchorRect, anchorView);
}

- (void)autoAdjustWithinViewBoundsWithADView:(ADView *)anchorView
                                  withADView:(ADView *)ancestorView {
  ADXBadgeDrawable_autoAdjustWithinViewBoundsWithADView_withADView_(self, anchorView, ancestorView);
}

- (void)autoAdjustWithinGrandparentBoundsWithADView:(ADView *)anchorView {
  ADXBadgeDrawable_autoAdjustWithinGrandparentBoundsWithADView_(self, anchorView);
}

- (jfloat)getTopCutOffWithFloat:(jfloat)totalAnchorYOffset {
  return ADXBadgeDrawable_getTopCutOffWithFloat_(self, totalAnchorYOffset);
}

- (jfloat)getLeftCutOffWithFloat:(jfloat)totalAnchorXOffset {
  return ADXBadgeDrawable_getLeftCutOffWithFloat_(self, totalAnchorXOffset);
}

- (jfloat)getBottomCutOffWithFloat:(jfloat)ancestorHeight
                         withFloat:(jfloat)totalAnchorYOffset {
  return ADXBadgeDrawable_getBottomCutOffWithFloat_withFloat_(self, ancestorHeight, totalAnchorYOffset);
}

- (jfloat)getRightCutoffWithFloat:(jfloat)ancestorWidth
                        withFloat:(jfloat)totalAnchorXOffset {
  return ADXBadgeDrawable_getRightCutoffWithFloat_withFloat_(self, ancestorWidth, totalAnchorXOffset);
}

- (jboolean)hasBadgeContent {
  return ADXBadgeDrawable_hasBadgeContent(self);
}

- (NSString *)getBadgeContent {
  return ADXBadgeDrawable_getBadgeContent(self);
}

- (NSString *)getTextBadgeText {
  return ADXBadgeDrawable_getTextBadgeText(self);
}

- (NSString *)getNumberBadgeText {
  return ADXBadgeDrawable_getNumberBadgeText(self);
}

- (void)onBadgeContentUpdated {
  ADXBadgeDrawable_onBadgeContentUpdated(self);
}

- (void)updateMaxBadgeNumber {
  ADXBadgeDrawable_updateMaxBadgeNumber(self);
}

+ (ADXBadgeDrawable *)createWithADContext:(ADContext *)context {
  return ADXBadgeDrawable_createWithADContext_(context);
}

- (instancetype)initWithADContext:(ADContext *)context
          withADXBadgeState_State:(ADXBadgeState_State *)savedState {
  ADXBadgeDrawable_initWithADContext_withADXBadgeState_State_(self, context, savedState);
  return self;
}

- (jint)getMinimumHeight {
  return [((ADRect *) nil_chk(badgeBounds_)) height];
}

- (jint)getMinimumWidth {
  return [((ADRect *) nil_chk(badgeBounds_)) width];
}

- (id)getAttributeWithNSString:(NSString *)key {
  {
    ADDrawable *bgdrawable;
    switch (JreIndexOfStr(key, (id[]){ @"text", @"textColor", @"borderRadius", @"background", @"textSize", @"zIndex", @"gravity", @"typeface", @"alpha", @"visibility", @"textAppearance", @"borderWidth" }, 12)) {
      case 0:
      return ADXBadgeDrawable_getBadgeContent(self);
      case 1:
      return ADXBadgeDrawable_colorToNativeColorWithInt_(self, [((ADXBadgeState *) nil_chk(state_)) getBadgeTextColor]);
      case 2:
      return JavaLangFloat_valueOfWithFloat_([((ADXBadgeDrawable_MaterialShapeDrawable *) nil_chk(shapeDrawable_)) getCornerSize]);
      case 3:
      bgdrawable = create_ADColorDrawable_init();
      [bgdrawable setDrawableWithId:ADXBadgeDrawable_colorToNativeColorWithInt_(self, [((ADXBadgeState *) nil_chk(state_)) getBackgroundColor])];
      return bgdrawable;
      case 4:
      return @"8sp";
      case 5:
      return @"1000";
      case 6:
      return @"center";
      case 7:
      return @"sans";
      case 8:
      return JavaLangFloat_valueOfWithFloat_((jfloat) [((ADXBadgeState *) nil_chk(state_)) getAlpha] / 255.0f);
      case 9:
      return [((ADXBadgeState *) nil_chk(state_)) isVisible] ? @"visible" : @"gone";
      case 10:
      return textAppearanceResource_;
      case 11:
      return @"0dp";
      default:
      break;
    }
  }
  return [super getAttributeWithNSString:key];
}

- (id)colorToNativeColorWithInt:(jint)color {
  return ADXBadgeDrawable_colorToNativeColorWithInt_(self, color);
}

- (ADRect *)getBounds {
  [self updateBadgeCoordinatesWithADView:[((JavaLangRefWeakReference *) nil_chk(anchorViewRef_)) get] withADFrameLayout:[((JavaLangRefWeakReference *) nil_chk(customBadgeParentRef_)) get]];
  return [((ADXBadgeDrawable_MaterialShapeDrawable *) nil_chk(shapeDrawable_)) getBounds];
}

- (IOSObjectArray *)getSimulatedWidgetAttrs {
  return [IOSObjectArray arrayWithObjects:(id[]){ @"zIndex", @"textSize", @"gravity", @"text", @"typeface", @"textColor", @"background", @"alpha", @"visibility", @"borderRadius", @"textAppearance", @"borderWidth" } count:12 type:NSString_class_()];
}

- (NSString *)getSimulatedWidgetLocalName {
  return [ADTextView_class_() getSimpleName];
}

- (NSString *)getSimulatedWidgetGroupName {
  return [ADTextView_class_() getSimpleName];
}

- (NSString *)getTextAppearanceResource {
  return textAppearanceResource_;
}

- (void)setTextAppearanceResourceWithNSString:(NSString *)textAppearanceResource {
  JreStrongAssign(&self->textAppearanceResource_, textAppearanceResource);
}

- (void)dealloc {
  RELEASE_(contextRef_);
  RELEASE_(shapeDrawable_);
  RELEASE_(textDrawableHelper_);
  RELEASE_(badgeBounds_);
  RELEASE_(state_);
  RELEASE_(anchorViewRef_);
  RELEASE_(customBadgeParentRef_);
  RELEASE_(textAppearanceResource_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 5, -1, -1, -1, -1 },
    { NULL, "LADFrameLayout;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 6, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 8, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 8, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 21, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 22, 23, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 24, 25, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 26, 4, -1, -1, -1, -1 },
    { NULL, "F", 0x2, 27, 28, -1, -1, -1, -1 },
    { NULL, "F", 0x2, 29, 28, -1, -1, -1, -1 },
    { NULL, "F", 0x2, 30, 31, -1, -1, -1, -1 },
    { NULL, "F", 0x2, 32, 31, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADXBadgeDrawable;", 0x9, 33, 34, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 35, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 36, 37, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, 38, 8, -1, -1, -1, -1 },
    { NULL, "LADRect;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 39, 37, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(setVisibleWithBoolean:);
  methods[1].selector = @selector(onVisibilityUpdated);
  methods[2].selector = @selector(updateBadgeCoordinatesWithADView:withADViewGroup:);
  methods[3].selector = @selector(updateBadgeCoordinatesWithADView:);
  methods[4].selector = @selector(updateBadgeCoordinatesWithADView:withADFrameLayout:);
  methods[5].selector = @selector(getCustomBadgeParent);
  methods[6].selector = @selector(updateAnchorParentToNotClipWithADView:);
  methods[7].selector = @selector(setBackgroundColorWithInt:);
  methods[8].selector = @selector(onBackgroundColorUpdated);
  methods[9].selector = @selector(setBadgeTextColorWithInt:);
  methods[10].selector = @selector(onBadgeTextColorUpdated);
  methods[11].selector = @selector(hasNumber);
  methods[12].selector = @selector(getNumber);
  methods[13].selector = @selector(setNumberWithInt:);
  methods[14].selector = @selector(onNumberUpdated);
  methods[15].selector = @selector(hasText);
  methods[16].selector = @selector(getText);
  methods[17].selector = @selector(getMaxCharacterCount);
  methods[18].selector = @selector(setMaxCharacterCountWithInt:);
  methods[19].selector = @selector(getMaxNumber);
  methods[20].selector = @selector(onMaxBadgeLengthUpdated);
  methods[21].selector = @selector(setBadgeGravityWithInt:);
  methods[22].selector = @selector(onBadgeGravityUpdated);
  methods[23].selector = @selector(getAlpha);
  methods[24].selector = @selector(setAlphaWithInt:);
  methods[25].selector = @selector(onAlphaUpdated);
  methods[26].selector = @selector(setHorizontalOffsetWithInt:);
  methods[27].selector = @selector(getHorizontalOffset);
  methods[28].selector = @selector(setHorizontalOffsetWithoutTextWithInt:);
  methods[29].selector = @selector(setHorizontalOffsetWithTextWithInt:);
  methods[30].selector = @selector(setAdditionalHorizontalOffsetWithInt:);
  methods[31].selector = @selector(setVerticalOffsetWithInt:);
  methods[32].selector = @selector(setVerticalOffsetWithoutTextWithInt:);
  methods[33].selector = @selector(setVerticalOffsetWithTextWithInt:);
  methods[34].selector = @selector(setAdditionalVerticalOffsetWithInt:);
  methods[35].selector = @selector(onBadgeShapeAppearanceUpdated);
  methods[36].selector = @selector(updateCenterAndBounds);
  methods[37].selector = @selector(getTotalVerticalOffsetForState);
  methods[38].selector = @selector(getTotalHorizontalOffsetForState);
  methods[39].selector = @selector(calculateCenterAndBoundsWithADRect:withADView:);
  methods[40].selector = @selector(autoAdjustWithinViewBoundsWithADView:withADView:);
  methods[41].selector = @selector(autoAdjustWithinGrandparentBoundsWithADView:);
  methods[42].selector = @selector(getTopCutOffWithFloat:);
  methods[43].selector = @selector(getLeftCutOffWithFloat:);
  methods[44].selector = @selector(getBottomCutOffWithFloat:withFloat:);
  methods[45].selector = @selector(getRightCutoffWithFloat:withFloat:);
  methods[46].selector = @selector(hasBadgeContent);
  methods[47].selector = @selector(getBadgeContent);
  methods[48].selector = @selector(getTextBadgeText);
  methods[49].selector = @selector(getNumberBadgeText);
  methods[50].selector = @selector(onBadgeContentUpdated);
  methods[51].selector = @selector(updateMaxBadgeNumber);
  methods[52].selector = @selector(createWithADContext:);
  methods[53].selector = @selector(initWithADContext:withADXBadgeState_State:);
  methods[54].selector = @selector(getMinimumHeight);
  methods[55].selector = @selector(getMinimumWidth);
  methods[56].selector = @selector(getAttributeWithNSString:);
  methods[57].selector = @selector(colorToNativeColorWithInt:);
  methods[58].selector = @selector(getBounds);
  methods[59].selector = @selector(getSimulatedWidgetAttrs);
  methods[60].selector = @selector(getSimulatedWidgetLocalName);
  methods[61].selector = @selector(getSimulatedWidgetGroupName);
  methods[62].selector = @selector(getTextAppearanceResource);
  methods[63].selector = @selector(setTextAppearanceResourceWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "TAG", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 40, -1, -1 },
    { "TOP_END", "I", .constantValue.asInt = ADXBadgeDrawable_TOP_END, 0x19, -1, -1, -1, -1 },
    { "TOP_START", "I", .constantValue.asInt = ADXBadgeDrawable_TOP_START, 0x19, -1, -1, -1, -1 },
    { "BOTTOM_END", "I", .constantValue.asInt = ADXBadgeDrawable_BOTTOM_END, 0x19, -1, -1, -1, -1 },
    { "BOTTOM_START", "I", .constantValue.asInt = ADXBadgeDrawable_BOTTOM_START, 0x19, -1, -1, -1, -1 },
    { "DEFAULT_EXCEED_MAX_BADGE_NUMBER_SUFFIX", "LNSString;", .constantValue.asLong = 0, 0x18, -1, 41, -1, -1 },
    { "DEFAULT_EXCEED_MAX_BADGE_TEXT_SUFFIX", "LNSString;", .constantValue.asLong = 0, 0x18, -1, 42, -1, -1 },
    { "OFFSET_ALIGNMENT_MODE_EDGE", "I", .constantValue.asInt = ADXBadgeDrawable_OFFSET_ALIGNMENT_MODE_EDGE, 0x18, -1, -1, -1, -1 },
    { "OFFSET_ALIGNMENT_MODE_LEGACY", "I", .constantValue.asInt = ADXBadgeDrawable_OFFSET_ALIGNMENT_MODE_LEGACY, 0x18, -1, -1, -1, -1 },
    { "BADGE_FIXED_EDGE_START", "I", .constantValue.asInt = ADXBadgeDrawable_BADGE_FIXED_EDGE_START, 0x19, -1, -1, -1, -1 },
    { "BADGE_FIXED_EDGE_END", "I", .constantValue.asInt = ADXBadgeDrawable_BADGE_FIXED_EDGE_END, 0x19, -1, -1, -1, -1 },
    { "BADGE_RADIUS_NOT_SPECIFIED", "I", .constantValue.asInt = ADXBadgeDrawable_BADGE_RADIUS_NOT_SPECIFIED, 0x18, -1, -1, -1, -1 },
    { "BADGE_CONTENT_NOT_TRUNCATED", "I", .constantValue.asInt = ADXBadgeDrawable_BADGE_CONTENT_NOT_TRUNCATED, 0x19, -1, -1, -1, -1 },
    { "contextRef_", "LJavaLangRefWeakReference;", .constantValue.asLong = 0, 0x12, -1, -1, 43, -1 },
    { "shapeDrawable_", "LADXBadgeDrawable_MaterialShapeDrawable;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "textDrawableHelper_", "LADXBadgeDrawable_TextDrawableHelper;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "badgeBounds_", "LADRect;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "state_", "LADXBadgeState;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "badgeCenterX_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "badgeCenterY_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "maxBadgeNumber_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "cornerRadius_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "halfBadgeWidth_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "halfBadgeHeight_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "anchorViewRef_", "LJavaLangRefWeakReference;", .constantValue.asLong = 0, 0x2, -1, -1, 44, -1 },
    { "customBadgeParentRef_", "LJavaLangRefWeakReference;", .constantValue.asLong = 0, 0x2, -1, -1, 45, -1 },
    { "textAppearanceResource_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setVisible", "Z", "updateBadgeCoordinates", "LADView;LADViewGroup;", "LADView;", "LADView;LADFrameLayout;", "updateAnchorParentToNotClip", "setBackgroundColor", "I", "setBadgeTextColor", "setNumber", "setMaxCharacterCount", "setBadgeGravity", "setAlpha", "setHorizontalOffset", "setHorizontalOffsetWithoutText", "setHorizontalOffsetWithText", "setAdditionalHorizontalOffset", "setVerticalOffset", "setVerticalOffsetWithoutText", "setVerticalOffsetWithText", "setAdditionalVerticalOffset", "calculateCenterAndBounds", "LADRect;LADView;", "autoAdjustWithinViewBounds", "LADView;LADView;", "autoAdjustWithinGrandparentBounds", "getTopCutOff", "F", "getLeftCutOff", "getBottomCutOff", "FF", "getRightCutoff", "create", "LADContext;", "LADContext;LADXBadgeState_State;", "getAttribute", "LNSString;", "colorToNativeColor", "setTextAppearanceResource", &ADXBadgeDrawable_TAG, &ADXBadgeDrawable_DEFAULT_EXCEED_MAX_BADGE_NUMBER_SUFFIX, &ADXBadgeDrawable_DEFAULT_EXCEED_MAX_BADGE_TEXT_SUFFIX, "Ljava/lang/ref/WeakReference<Lr/android/content/Context;>;", "Ljava/lang/ref/WeakReference<Lr/android/view/View;>;", "Ljava/lang/ref/WeakReference<Lr/android/widget/FrameLayout;>;", "LADXBadgeDrawable_MaterialShapeDrawable;LADXBadgeDrawable_TextPaint;LADXBadgeDrawable_TextDrawableHelper;" };
  static const J2ObjcClassInfo _ADXBadgeDrawable = { "BadgeDrawable", "com.google.android.material.badge", ptrTable, methods, fields, 7, 0x1, 64, 27, -1, 46, -1, -1, -1 };
  return &_ADXBadgeDrawable;
}

@end

void ADXBadgeDrawable_onVisibilityUpdated(ADXBadgeDrawable *self) {
  jboolean visible = [((ADXBadgeState *) nil_chk(self->state_)) isVisible];
  [self setVisibleWithBoolean:visible withBoolean:false];
}

void ADXBadgeDrawable_updateAnchorParentToNotClipWithADView_(ADView *anchorView) {
  ADXBadgeDrawable_initialize();
  ADViewGroup *anchorViewParent = (ADViewGroup *) cast_chk([((ADView *) nil_chk(anchorView)) getParent], [ADViewGroup class]);
  [((ADViewGroup *) nil_chk(anchorViewParent)) setMyAttributeWithNSString:@"clipChildren" withId:JavaLangBoolean_valueOfWithBoolean_(false)];
  [anchorViewParent setClipToPaddingWithBoolean:false];
}

void ADXBadgeDrawable_onBackgroundColorUpdated(ADXBadgeDrawable *self) {
  ADColorStateList *backgroundColorStateList = ADColorStateList_valueOfWithInt_([((ADXBadgeState *) nil_chk(self->state_)) getBackgroundColor]);
  if ([((ADXBadgeDrawable_MaterialShapeDrawable *) nil_chk(self->shapeDrawable_)) getFillColor] != backgroundColorStateList) {
    [self->shapeDrawable_ setFillColorWithADColorStateList:backgroundColorStateList];
    [self invalidateSelf];
  }
}

void ADXBadgeDrawable_onBadgeTextColorUpdated(ADXBadgeDrawable *self) {
  [((ADXBadgeDrawable_TextPaint *) nil_chk([((ADXBadgeDrawable_TextDrawableHelper *) nil_chk(self->textDrawableHelper_)) getTextPaint])) setColorWithInt:[((ADXBadgeState *) nil_chk(self->state_)) getBadgeTextColor]];
  [self invalidateSelf];
}

void ADXBadgeDrawable_onNumberUpdated(ADXBadgeDrawable *self) {
  if (![self hasText]) {
    ADXBadgeDrawable_onBadgeContentUpdated(self);
  }
}

void ADXBadgeDrawable_onMaxBadgeLengthUpdated(ADXBadgeDrawable *self) {
  ADXBadgeDrawable_updateMaxBadgeNumber(self);
  [((ADXBadgeDrawable_TextDrawableHelper *) nil_chk(self->textDrawableHelper_)) setTextSizeDirtyWithBoolean:true];
  ADXBadgeDrawable_updateCenterAndBounds(self);
  [self invalidateSelf];
}

void ADXBadgeDrawable_onBadgeGravityUpdated(ADXBadgeDrawable *self) {
  if (self->anchorViewRef_ != nil && [self->anchorViewRef_ get] != nil) {
    [self updateBadgeCoordinatesWithADView:[self->anchorViewRef_ get] withADFrameLayout:self->customBadgeParentRef_ != nil ? [self->customBadgeParentRef_ get] : nil];
  }
}

void ADXBadgeDrawable_onAlphaUpdated(ADXBadgeDrawable *self) {
  [((ADXBadgeDrawable_TextPaint *) nil_chk([((ADXBadgeDrawable_TextDrawableHelper *) nil_chk(self->textDrawableHelper_)) getTextPaint])) setAlphaWithInt:[self getAlpha]];
  [self invalidateSelf];
}

void ADXBadgeDrawable_onBadgeShapeAppearanceUpdated(ADXBadgeDrawable *self) {
  ADContext *context = JreRetainedLocalValue([((JavaLangRefWeakReference *) nil_chk(self->contextRef_)) get]);
  if (context == nil) {
    return;
  }
  [self invalidateSelf];
}

void ADXBadgeDrawable_updateCenterAndBounds(ADXBadgeDrawable *self) {
  ADContext *context = JreRetainedLocalValue([((JavaLangRefWeakReference *) nil_chk(self->contextRef_)) get]);
  ADView *anchorView = self->anchorViewRef_ != nil ? [self->anchorViewRef_ get] : nil;
  if (context == nil || anchorView == nil) {
    return;
  }
  ADRect *tmpRect = create_ADRect_init();
  [tmpRect setWithADRect:self->badgeBounds_];
  ADRect *anchorRect = create_ADRect_init();
  [anchorView getDrawingRectWithADRect:anchorRect];
  ADViewGroup *customBadgeParent = self->customBadgeParentRef_ != nil ? [self->customBadgeParentRef_ get] : nil;
  if (customBadgeParent != nil) {
  }
  ADXBadgeDrawable_calculateCenterAndBoundsWithADRect_withADView_(self, anchorRect, anchorView);
  ADXBadgeUtils_updateBadgeBoundsWithADRect_withFloat_withFloat_withFloat_withFloat_(self->badgeBounds_, self->badgeCenterX_, self->badgeCenterY_, self->halfBadgeWidth_, self->halfBadgeHeight_);
  if (self->cornerRadius_ != ADXBadgeDrawable_BADGE_RADIUS_NOT_SPECIFIED) {
    [((ADXBadgeDrawable_MaterialShapeDrawable *) nil_chk(self->shapeDrawable_)) setCornerSizeWithFloat:self->cornerRadius_];
  }
  if (![tmpRect isEqual:self->badgeBounds_]) {
    [((ADXBadgeDrawable_MaterialShapeDrawable *) nil_chk(self->shapeDrawable_)) setBoundsWithADRect:self->badgeBounds_];
  }
}

jint ADXBadgeDrawable_getTotalVerticalOffsetForState(ADXBadgeDrawable *self) {
  jint vOffset = [((ADXBadgeState *) nil_chk(self->state_)) getVerticalOffsetWithoutText];
  if (ADXBadgeDrawable_hasBadgeContent(self)) {
    vOffset = [self->state_ getVerticalOffsetWithText];
    ADContext *context = JreRetainedLocalValue([((JavaLangRefWeakReference *) nil_chk(self->contextRef_)) get]);
    if (context != nil) {
    }
  }
  if (self->state_->offsetAlignmentMode_ == ADXBadgeDrawable_OFFSET_ALIGNMENT_MODE_EDGE) {
    vOffset -= JavaLangMath_roundWithFloat_(self->halfBadgeHeight_);
  }
  return vOffset + [self->state_ getAdditionalVerticalOffset];
}

jint ADXBadgeDrawable_getTotalHorizontalOffsetForState(ADXBadgeDrawable *self) {
  jint hOffset = ADXBadgeDrawable_hasBadgeContent(self) ? [((ADXBadgeState *) nil_chk(self->state_)) getHorizontalOffsetWithText] : [((ADXBadgeState *) nil_chk(self->state_)) getHorizontalOffsetWithoutText];
  if (self->state_->offsetAlignmentMode_ == ADXBadgeDrawable_OFFSET_ALIGNMENT_MODE_LEGACY) {
    hOffset += ADXBadgeDrawable_hasBadgeContent(self) ? self->state_->horizontalInsetWithText_ : self->state_->horizontalInset_;
  }
  return hOffset + [self->state_ getAdditionalHorizontalOffset];
}

void ADXBadgeDrawable_calculateCenterAndBoundsWithADRect_withADView_(ADXBadgeDrawable *self, ADRect *anchorRect, ADView *anchorView) {
  self->cornerRadius_ = ADXBadgeDrawable_hasBadgeContent(self) ? ((ADXBadgeState *) nil_chk(self->state_))->badgeWithTextRadius_ : ((ADXBadgeState *) nil_chk(self->state_))->badgeRadius_;
  if (self->cornerRadius_ != ADXBadgeDrawable_BADGE_RADIUS_NOT_SPECIFIED) {
    self->halfBadgeWidth_ = self->cornerRadius_;
    self->halfBadgeHeight_ = self->cornerRadius_;
  }
  else {
    self->halfBadgeWidth_ = JavaLangMath_roundWithFloat_(ADXBadgeDrawable_hasBadgeContent(self) ? self->state_->badgeWithTextWidth_ / 2 : self->state_->badgeWidth_ / 2);
    self->halfBadgeHeight_ = JavaLangMath_roundWithFloat_(ADXBadgeDrawable_hasBadgeContent(self) ? self->state_->badgeWithTextHeight_ / 2 : self->state_->badgeHeight_ / 2);
  }
  if (ADXBadgeDrawable_hasBadgeContent(self)) {
    NSString *badgeContent = ADXBadgeDrawable_getBadgeContent(self);
    self->halfBadgeWidth_ = JavaLangMath_maxWithFloat_withFloat_(self->halfBadgeWidth_, [((ADXBadgeDrawable_TextDrawableHelper *) nil_chk(self->textDrawableHelper_)) getTextWidthWithNSString:badgeContent] / 2.0f + [self->state_ getBadgeHorizontalPadding]);
    self->halfBadgeHeight_ = JavaLangMath_maxWithFloat_withFloat_(self->halfBadgeHeight_, [self->textDrawableHelper_ getTextHeightWithNSString:badgeContent] / 2.0f + [self->state_ getBadgeVerticalPadding]);
    self->halfBadgeWidth_ = JavaLangMath_maxWithFloat_withFloat_(self->halfBadgeWidth_, self->halfBadgeHeight_);
  }
  jint totalVerticalOffset = ADXBadgeDrawable_getTotalVerticalOffsetForState(self);
  switch ([self->state_ getBadgeGravity]) {
    case ADXBadgeDrawable_BOTTOM_END:
    case ADXBadgeDrawable_BOTTOM_START:
    self->badgeCenterY_ = ((ADRect *) nil_chk(anchorRect))->bottom_ - totalVerticalOffset;
    break;
    case ADXBadgeDrawable_TOP_END:
    case ADXBadgeDrawable_TOP_START:
    default:
    self->badgeCenterY_ = ((ADRect *) nil_chk(anchorRect))->top_ + totalVerticalOffset;
    break;
  }
  jint totalHorizontalOffset = ADXBadgeDrawable_getTotalHorizontalOffsetForState(self);
  switch ([self->state_ getBadgeGravity]) {
    case ADXBadgeDrawable_BOTTOM_START:
    case ADXBadgeDrawable_TOP_START:
    self->badgeCenterX_ = self->state_->badgeFixedEdge_ == ADXBadgeDrawable_BADGE_FIXED_EDGE_START ? ([((ADView *) nil_chk(anchorView)) getLayoutDirection] == ADView_LAYOUT_DIRECTION_LTR ? ((ADRect *) nil_chk(anchorRect))->left_ + self->halfBadgeWidth_ - (self->halfBadgeHeight_ * 2 - totalHorizontalOffset) : ((ADRect *) nil_chk(anchorRect))->right_ - self->halfBadgeWidth_ + (self->halfBadgeHeight_ * 2 - totalHorizontalOffset)) : ([((ADView *) nil_chk(anchorView)) getLayoutDirection] == ADView_LAYOUT_DIRECTION_LTR ? ((ADRect *) nil_chk(anchorRect))->left_ - self->halfBadgeWidth_ + totalHorizontalOffset : ((ADRect *) nil_chk(anchorRect))->right_ + self->halfBadgeWidth_ - totalHorizontalOffset);
    break;
    case ADXBadgeDrawable_BOTTOM_END:
    case ADXBadgeDrawable_TOP_END:
    default:
    self->badgeCenterX_ = self->state_->badgeFixedEdge_ == ADXBadgeDrawable_BADGE_FIXED_EDGE_START ? ([((ADView *) nil_chk(anchorView)) getLayoutDirection] == ADView_LAYOUT_DIRECTION_LTR ? ((ADRect *) nil_chk(anchorRect))->right_ + self->halfBadgeWidth_ - totalHorizontalOffset : ((ADRect *) nil_chk(anchorRect))->left_ - self->halfBadgeWidth_ + totalHorizontalOffset) : ([((ADView *) nil_chk(anchorView)) getLayoutDirection] == ADView_LAYOUT_DIRECTION_LTR ? ((ADRect *) nil_chk(anchorRect))->right_ - self->halfBadgeWidth_ + (self->halfBadgeHeight_ * 2 - totalHorizontalOffset) : ((ADRect *) nil_chk(anchorRect))->left_ + self->halfBadgeWidth_ - (self->halfBadgeHeight_ * 2 - totalHorizontalOffset));
    break;
  }
  if ([self->state_ isAutoAdjustedToGrandparentBounds]) {
  }
  else {
  }
}

void ADXBadgeDrawable_autoAdjustWithinViewBoundsWithADView_withADView_(ADXBadgeDrawable *self, ADView *anchorView, ADView *ancestorView) {
  jfloat totalAnchorYOffset;
  jfloat totalAnchorXOffset;
  id<ADViewParent> anchorParent;
  id<ADViewParent> customAnchorParent = JreRetainedLocalValue([self getCustomBadgeParent]);
  if (customAnchorParent == nil) {
    totalAnchorYOffset = [((ADView *) nil_chk(anchorView)) getY];
    totalAnchorXOffset = [anchorView getX];
    anchorParent = [anchorView getParent];
  }
  else {
    totalAnchorYOffset = 0;
    totalAnchorXOffset = 0;
    anchorParent = customAnchorParent;
  }
  id<ADViewParent> currentViewParent = JreRetainedLocalValue(anchorParent);
  while ([currentViewParent isKindOfClass:[ADView class]] && currentViewParent != (id) ancestorView) {
    id<ADViewParent> viewGrandparent = JreRetainedLocalValue([((id<ADViewParent>) nil_chk(currentViewParent)) getParent]);
    if (!([viewGrandparent isKindOfClass:[ADViewGroup class]])) {
      break;
    }
    ADView *currentViewGroup = (ADView *) cast_chk(currentViewParent, [ADView class]);
    JrePlusAssignFloatF(&totalAnchorYOffset, [currentViewGroup getY]);
    JrePlusAssignFloatF(&totalAnchorXOffset, [currentViewGroup getX]);
    currentViewParent = [currentViewParent getParent];
  }
  if (!([currentViewParent isKindOfClass:[ADView class]])) {
    return;
  }
  jfloat topCutOff = ADXBadgeDrawable_getTopCutOffWithFloat_(self, totalAnchorYOffset);
  jfloat leftCutOff = ADXBadgeDrawable_getLeftCutOffWithFloat_(self, totalAnchorXOffset);
  jfloat bottomCutOff = ADXBadgeDrawable_getBottomCutOffWithFloat_withFloat_(self, [((ADView *) nil_chk(((ADView *) cast_chk(currentViewParent, [ADView class])))) getHeight], totalAnchorYOffset);
  jfloat rightCutOff = ADXBadgeDrawable_getRightCutoffWithFloat_withFloat_(self, [((ADView *) nil_chk(((ADView *) cast_chk(currentViewParent, [ADView class])))) getWidth], totalAnchorXOffset);
  if (topCutOff < 0) {
    JrePlusAssignFloatF(&self->badgeCenterY_, JavaLangMath_absWithFloat_(topCutOff));
  }
  if (leftCutOff < 0) {
    JrePlusAssignFloatF(&self->badgeCenterX_, JavaLangMath_absWithFloat_(leftCutOff));
  }
  if (bottomCutOff > 0) {
    JreMinusAssignFloatF(&self->badgeCenterY_, JavaLangMath_absWithFloat_(bottomCutOff));
  }
  if (rightCutOff > 0) {
    JreMinusAssignFloatF(&self->badgeCenterX_, JavaLangMath_absWithFloat_(rightCutOff));
  }
}

void ADXBadgeDrawable_autoAdjustWithinGrandparentBoundsWithADView_(ADXBadgeDrawable *self, ADView *anchorView) {
  id<ADViewParent> customAnchor = JreRetainedLocalValue([self getCustomBadgeParent]);
  id<ADViewParent> anchorParent = nil;
  if (customAnchor == nil) {
    anchorParent = [((ADView *) nil_chk(anchorView)) getParent];
  }
  else {
    anchorParent = customAnchor;
  }
  if ([anchorParent isKindOfClass:[ADView class]] && [[((id<ADViewParent>) nil_chk(anchorParent)) getParent] isKindOfClass:[ADView class]]) {
  }
}

jfloat ADXBadgeDrawable_getTopCutOffWithFloat_(ADXBadgeDrawable *self, jfloat totalAnchorYOffset) {
  return self->badgeCenterY_ - self->halfBadgeHeight_ + totalAnchorYOffset;
}

jfloat ADXBadgeDrawable_getLeftCutOffWithFloat_(ADXBadgeDrawable *self, jfloat totalAnchorXOffset) {
  return self->badgeCenterX_ - self->halfBadgeWidth_ + totalAnchorXOffset;
}

jfloat ADXBadgeDrawable_getBottomCutOffWithFloat_withFloat_(ADXBadgeDrawable *self, jfloat ancestorHeight, jfloat totalAnchorYOffset) {
  return self->badgeCenterY_ + self->halfBadgeHeight_ - ancestorHeight + totalAnchorYOffset;
}

jfloat ADXBadgeDrawable_getRightCutoffWithFloat_withFloat_(ADXBadgeDrawable *self, jfloat ancestorWidth, jfloat totalAnchorXOffset) {
  return self->badgeCenterX_ + self->halfBadgeWidth_ - ancestorWidth + totalAnchorXOffset;
}

jboolean ADXBadgeDrawable_hasBadgeContent(ADXBadgeDrawable *self) {
  return [self hasText] || [self hasNumber];
}

NSString *ADXBadgeDrawable_getBadgeContent(ADXBadgeDrawable *self) {
  if ([self hasText]) {
    return ADXBadgeDrawable_getTextBadgeText(self);
  }
  else if ([self hasNumber]) {
    return ADXBadgeDrawable_getNumberBadgeText(self);
  }
  else {
    return nil;
  }
}

NSString *ADXBadgeDrawable_getTextBadgeText(ADXBadgeDrawable *self) {
  NSString *text = JreRetainedLocalValue([self getText]);
  jint maxCharacterCount = [self getMaxCharacterCount];
  if (maxCharacterCount == ADXBadgeDrawable_BADGE_CONTENT_NOT_TRUNCATED) {
    return text;
  }
  if (text != nil && [text java_length] > maxCharacterCount) {
    ADContext *context = JreRetainedLocalValue([((JavaLangRefWeakReference *) nil_chk(self->contextRef_)) get]);
    if (context == nil) {
      return @"";
    }
    text = [text java_substring:0 endIndex:maxCharacterCount - 1];
    return NSString_java_formatWithNSString_withNSObjectArray_(@"%s%s", [IOSObjectArray arrayWithObjects:(id[]){ text, ADXBadgeDrawable_DEFAULT_EXCEED_MAX_BADGE_TEXT_SUFFIX } count:2 type:NSObject_class_()]);
  }
  else {
    return text;
  }
}

NSString *ADXBadgeDrawable_getNumberBadgeText(ADXBadgeDrawable *self) {
  if (self->maxBadgeNumber_ == ADXBadgeDrawable_BADGE_CONTENT_NOT_TRUNCATED || [self getNumber] <= self->maxBadgeNumber_) {
    return [((JavaTextNumberFormat *) nil_chk(JavaTextNumberFormat_getInstanceWithJavaUtilLocale_([((ADXBadgeState *) nil_chk(self->state_)) getNumberLocale]))) formatWithLong:[self getNumber]];
  }
  else {
    ADContext *context = JreRetainedLocalValue([((JavaLangRefWeakReference *) nil_chk(self->contextRef_)) get]);
    if (context == nil) {
      return @"";
    }
    return NSString_java_formatWithJavaUtilLocale_withNSString_withNSObjectArray_([((ADXBadgeState *) nil_chk(self->state_)) getNumberLocale], @"%s%s", [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(self->maxBadgeNumber_), ADXBadgeDrawable_DEFAULT_EXCEED_MAX_BADGE_NUMBER_SUFFIX } count:2 type:NSObject_class_()]);
  }
}

void ADXBadgeDrawable_onBadgeContentUpdated(ADXBadgeDrawable *self) {
  [((ADXBadgeDrawable_TextDrawableHelper *) nil_chk(self->textDrawableHelper_)) setTextSizeDirtyWithBoolean:true];
  ADXBadgeDrawable_onBadgeShapeAppearanceUpdated(self);
  ADXBadgeDrawable_updateCenterAndBounds(self);
  [self invalidateSelf];
}

void ADXBadgeDrawable_updateMaxBadgeNumber(ADXBadgeDrawable *self) {
  if ([self getMaxCharacterCount] != ADXBadgeDrawable_BADGE_CONTENT_NOT_TRUNCATED) {
    self->maxBadgeNumber_ = JreFpToInt(JavaLangMath_powWithDouble_withDouble_(10.0, (jdouble) [self getMaxCharacterCount] - 1)) - 1;
  }
  else {
    self->maxBadgeNumber_ = [self getMaxNumber];
  }
}

ADXBadgeDrawable *ADXBadgeDrawable_createWithADContext_(ADContext *context) {
  ADXBadgeDrawable_initialize();
  return create_ADXBadgeDrawable_initWithADContext_withADXBadgeState_State_(context, nil);
}

void ADXBadgeDrawable_initWithADContext_withADXBadgeState_State_(ADXBadgeDrawable *self, ADContext *context, ADXBadgeState_State *savedState) {
  ADDrawable_init(self);
  JreStrongAssignAndConsume(&self->contextRef_, new_JavaLangRefWeakReference_initWithId_(context));
  JreStrongAssignAndConsume(&self->badgeBounds_, new_ADRect_init());
  JreStrongAssignAndConsume(&self->textDrawableHelper_, new_ADXBadgeDrawable_TextDrawableHelper_initWithADXBadgeDrawable_(self));
  JreStrongAssignAndConsume(&self->state_, new_ADXBadgeState_initWithADContext_withADXBadgeState_State_(context, savedState));
  JreStrongAssignAndConsume(&self->shapeDrawable_, new_ADXBadgeDrawable_MaterialShapeDrawable_initWithADXBadgeDrawable_(self));
  self->maxBadgeNumber_ = 9999;
}

ADXBadgeDrawable *new_ADXBadgeDrawable_initWithADContext_withADXBadgeState_State_(ADContext *context, ADXBadgeState_State *savedState) {
  J2OBJC_NEW_IMPL(ADXBadgeDrawable, initWithADContext_withADXBadgeState_State_, context, savedState)
}

ADXBadgeDrawable *create_ADXBadgeDrawable_initWithADContext_withADXBadgeState_State_(ADContext *context, ADXBadgeState_State *savedState) {
  J2OBJC_CREATE_IMPL(ADXBadgeDrawable, initWithADContext_withADXBadgeState_State_, context, savedState)
}

id ADXBadgeDrawable_colorToNativeColorWithInt_(ADXBadgeDrawable *self, jint color) {
  return ASPluginInvoker_getColorWithNSString_(ADColor_formatColorWithInt_(color));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXBadgeDrawable)

@implementation ADXBadgeDrawable_MaterialShapeDrawable

- (instancetype)initWithADXBadgeDrawable:(ADXBadgeDrawable *)outer$ {
  ADXBadgeDrawable_MaterialShapeDrawable_initWithADXBadgeDrawable_(self, outer$);
  return self;
}

- (jfloat)getCornerSize {
  return cornerSize_;
}

- (void)setCornerSizeWithFloat:(jfloat)cornerSize {
  self->cornerSize_ = cornerSize;
}

- (void)setFillColorWithADColorStateList:(ADColorStateList *)backgroundColorStateList {
  JreStrongAssign(&self->backgroundColorStateList_, backgroundColorStateList);
}

- (ADColorStateList *)getFillColor {
  return backgroundColorStateList_;
}

- (void)dealloc {
  RELEASE_(backgroundColorStateList_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LADColorStateList;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithADXBadgeDrawable:);
  methods[1].selector = @selector(getCornerSize);
  methods[2].selector = @selector(setCornerSizeWithFloat:);
  methods[3].selector = @selector(setFillColorWithADColorStateList:);
  methods[4].selector = @selector(getFillColor);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "cornerSize_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "backgroundColorStateList_", "LADColorStateList;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LADXBadgeDrawable;", "setCornerSize", "F", "setFillColor", "LADColorStateList;" };
  static const J2ObjcClassInfo _ADXBadgeDrawable_MaterialShapeDrawable = { "MaterialShapeDrawable", "com.google.android.material.badge", ptrTable, methods, fields, 7, 0x0, 5, 2, 0, -1, -1, -1, -1 };
  return &_ADXBadgeDrawable_MaterialShapeDrawable;
}

@end

void ADXBadgeDrawable_MaterialShapeDrawable_initWithADXBadgeDrawable_(ADXBadgeDrawable_MaterialShapeDrawable *self, ADXBadgeDrawable *outer$) {
  ADDrawable_init(self);
}

ADXBadgeDrawable_MaterialShapeDrawable *new_ADXBadgeDrawable_MaterialShapeDrawable_initWithADXBadgeDrawable_(ADXBadgeDrawable *outer$) {
  J2OBJC_NEW_IMPL(ADXBadgeDrawable_MaterialShapeDrawable, initWithADXBadgeDrawable_, outer$)
}

ADXBadgeDrawable_MaterialShapeDrawable *create_ADXBadgeDrawable_MaterialShapeDrawable_initWithADXBadgeDrawable_(ADXBadgeDrawable *outer$) {
  J2OBJC_CREATE_IMPL(ADXBadgeDrawable_MaterialShapeDrawable, initWithADXBadgeDrawable_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXBadgeDrawable_MaterialShapeDrawable)

@implementation ADXBadgeDrawable_TextPaint

- (instancetype)initWithADXBadgeDrawable:(ADXBadgeDrawable *)outer$ {
  ADXBadgeDrawable_TextPaint_initWithADXBadgeDrawable_(self, outer$);
  return self;
}

- (jint)getColor {
  return 0;
}

- (void)setAlphaWithInt:(jint)alpha {
}

- (void)setColorWithInt:(jint)badgeTextColor {
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithADXBadgeDrawable:);
  methods[1].selector = @selector(getColor);
  methods[2].selector = @selector(setAlphaWithInt:);
  methods[3].selector = @selector(setColorWithInt:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LADXBadgeDrawable;", "setAlpha", "I", "setColor" };
  static const J2ObjcClassInfo _ADXBadgeDrawable_TextPaint = { "TextPaint", "com.google.android.material.badge", ptrTable, methods, NULL, 7, 0x0, 4, 0, 0, -1, -1, -1, -1 };
  return &_ADXBadgeDrawable_TextPaint;
}

@end

void ADXBadgeDrawable_TextPaint_initWithADXBadgeDrawable_(ADXBadgeDrawable_TextPaint *self, ADXBadgeDrawable *outer$) {
  NSObject_init(self);
}

ADXBadgeDrawable_TextPaint *new_ADXBadgeDrawable_TextPaint_initWithADXBadgeDrawable_(ADXBadgeDrawable *outer$) {
  J2OBJC_NEW_IMPL(ADXBadgeDrawable_TextPaint, initWithADXBadgeDrawable_, outer$)
}

ADXBadgeDrawable_TextPaint *create_ADXBadgeDrawable_TextPaint_initWithADXBadgeDrawable_(ADXBadgeDrawable *outer$) {
  J2OBJC_CREATE_IMPL(ADXBadgeDrawable_TextPaint, initWithADXBadgeDrawable_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXBadgeDrawable_TextPaint)

@implementation ADXBadgeDrawable_TextDrawableHelper

- (instancetype)initWithADXBadgeDrawable:(ADXBadgeDrawable *)outer$ {
  ADXBadgeDrawable_TextDrawableHelper_initWithADXBadgeDrawable_(self, outer$);
  return self;
}

- (ADXBadgeDrawable_TextPaint *)getTextPaint {
  return create_ADXBadgeDrawable_TextPaint_initWithADXBadgeDrawable_(this$0_);
}

- (jfloat)getTextWidthWithNSString:(NSString *)badgeContent {
  if ([this$0_ getMeasureTextHelper] != nil) {
    return [((id<ADDrawable_MeasureTextHelper>) nil_chk([this$0_ getMeasureTextHelper])) getTextWidth];
  }
  return 0;
}

- (jfloat)getTextHeightWithNSString:(NSString *)badgeContent {
  if ([this$0_ getMeasureTextHelper] != nil) {
    return [((id<ADDrawable_MeasureTextHelper>) nil_chk([this$0_ getMeasureTextHelper])) getTextHeight];
  }
  return 0;
}

- (void)setTextSizeDirtyWithBoolean:(jboolean)b {
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LADXBadgeDrawable_TextPaint;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "F", 0x1, 3, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithADXBadgeDrawable:);
  methods[1].selector = @selector(getTextPaint);
  methods[2].selector = @selector(getTextWidthWithNSString:);
  methods[3].selector = @selector(getTextHeightWithNSString:);
  methods[4].selector = @selector(setTextSizeDirtyWithBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LADXBadgeDrawable;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LADXBadgeDrawable;", "getTextWidth", "LNSString;", "getTextHeight", "setTextSizeDirty", "Z" };
  static const J2ObjcClassInfo _ADXBadgeDrawable_TextDrawableHelper = { "TextDrawableHelper", "com.google.android.material.badge", ptrTable, methods, fields, 7, 0x0, 5, 1, 0, -1, -1, -1, -1 };
  return &_ADXBadgeDrawable_TextDrawableHelper;
}

@end

void ADXBadgeDrawable_TextDrawableHelper_initWithADXBadgeDrawable_(ADXBadgeDrawable_TextDrawableHelper *self, ADXBadgeDrawable *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

ADXBadgeDrawable_TextDrawableHelper *new_ADXBadgeDrawable_TextDrawableHelper_initWithADXBadgeDrawable_(ADXBadgeDrawable *outer$) {
  J2OBJC_NEW_IMPL(ADXBadgeDrawable_TextDrawableHelper, initWithADXBadgeDrawable_, outer$)
}

ADXBadgeDrawable_TextDrawableHelper *create_ADXBadgeDrawable_TextDrawableHelper_initWithADXBadgeDrawable_(ADXBadgeDrawable *outer$) {
  J2OBJC_CREATE_IMPL(ADXBadgeDrawable_TextDrawableHelper, initWithADXBadgeDrawable_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXBadgeDrawable_TextDrawableHelper)
