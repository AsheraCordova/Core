//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\AndroidJMaterial\src\main\java\com\google\android\material\chip\ChipGroup.java
//

#include "CheckableGroup.h"
#include "Chip.h"
#include "ChipGroup.h"
#include "Drawable.h"
#include "FlowLayout.h"
#include "J2ObjC_source.h"
#include "View.h"
#include "ViewGroup.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/List.h"
#include "java/util/Set.h"

@class ADXChipGroup_PassThroughHierarchyChangeListener;
@protocol JavaUtilList;
@protocol JavaUtilSet;


@interface ADXChipGroup () {
 @public
  jint chipSpacingHorizontal_;
  jint chipSpacingVertical_;
  id<ADXChipGroup_OnCheckedStateChangeListener> onCheckedStateChangeListener_;
  ADXCheckableGroup *checkableGroup_;
  jint defaultCheckedId_;
  ADXChipGroup_PassThroughHierarchyChangeListener *passThroughListener_;
}

- (jint)getVisibleChipCount;

- (jboolean)isChildVisibleWithInt:(jint)i;

@end

J2OBJC_FIELD_SETTER(ADXChipGroup, onCheckedStateChangeListener_, id<ADXChipGroup_OnCheckedStateChangeListener>)
J2OBJC_FIELD_SETTER(ADXChipGroup, checkableGroup_, ADXCheckableGroup *)
J2OBJC_FIELD_SETTER(ADXChipGroup, passThroughListener_, ADXChipGroup_PassThroughHierarchyChangeListener *)

__attribute__((unused)) static jint ADXChipGroup_getVisibleChipCount(ADXChipGroup *self);

__attribute__((unused)) static jboolean ADXChipGroup_isChildVisibleWithInt_(ADXChipGroup *self, jint i);

@interface ADXChipGroup_OnCheckedChangeListener : NSObject

@end

@interface ADXChipGroup_OnCheckedStateChangeListener : NSObject

@end

@interface ADXChipGroup_1 : NSObject < ADXChipGroup_OnCheckedStateChangeListener > {
 @public
  ADXChipGroup *this$0_;
  id<ADXChipGroup_OnCheckedChangeListener> val$listener_;
}

- (instancetype)initWithADXChipGroup:(ADXChipGroup *)outer$
withADXChipGroup_OnCheckedChangeListener:(id<ADXChipGroup_OnCheckedChangeListener>)capture$0;

- (void)onCheckedChangedWithADXChipGroup:(ADXChipGroup *)group
                        withJavaUtilList:(id<JavaUtilList>)checkedIds;

@end

J2OBJC_EMPTY_STATIC_INIT(ADXChipGroup_1)

__attribute__((unused)) static void ADXChipGroup_1_initWithADXChipGroup_withADXChipGroup_OnCheckedChangeListener_(ADXChipGroup_1 *self, ADXChipGroup *outer$, id<ADXChipGroup_OnCheckedChangeListener> capture$0);

__attribute__((unused)) static ADXChipGroup_1 *new_ADXChipGroup_1_initWithADXChipGroup_withADXChipGroup_OnCheckedChangeListener_(ADXChipGroup *outer$, id<ADXChipGroup_OnCheckedChangeListener> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static ADXChipGroup_1 *create_ADXChipGroup_1_initWithADXChipGroup_withADXChipGroup_OnCheckedChangeListener_(ADXChipGroup *outer$, id<ADXChipGroup_OnCheckedChangeListener> capture$0);

@interface ADXChipGroup_PassThroughHierarchyChangeListener : NSObject < ADViewGroup_OnHierarchyChangeListener > {
 @public
  ADXChipGroup *this$0_;
  id<ADViewGroup_OnHierarchyChangeListener> onHierarchyChangeListener_;
}

- (instancetype)initWithADXChipGroup:(ADXChipGroup *)outer$;

- (void)onChildViewAddedWithADView:(ADView *)parent
                        withADView:(ADView *)child;

- (void)onChildViewRemovedWithADView:(ADView *)parent
                          withADView:(ADView *)child;

@end

J2OBJC_EMPTY_STATIC_INIT(ADXChipGroup_PassThroughHierarchyChangeListener)

J2OBJC_FIELD_SETTER(ADXChipGroup_PassThroughHierarchyChangeListener, onHierarchyChangeListener_, id<ADViewGroup_OnHierarchyChangeListener>)

__attribute__((unused)) static void ADXChipGroup_PassThroughHierarchyChangeListener_initWithADXChipGroup_(ADXChipGroup_PassThroughHierarchyChangeListener *self, ADXChipGroup *outer$);

__attribute__((unused)) static ADXChipGroup_PassThroughHierarchyChangeListener *new_ADXChipGroup_PassThroughHierarchyChangeListener_initWithADXChipGroup_(ADXChipGroup *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static ADXChipGroup_PassThroughHierarchyChangeListener *create_ADXChipGroup_PassThroughHierarchyChangeListener_initWithADXChipGroup_(ADXChipGroup *outer$);

J2OBJC_TYPE_LITERAL_HEADER(ADXChipGroup_PassThroughHierarchyChangeListener)

@interface ADXChipGroup_2 : NSObject < ADXCheckableGroup_OnCheckedStateChangeListener > {
 @public
  ADXChipGroup *this$0_;
}

- (instancetype)initWithADXChipGroup:(ADXChipGroup *)outer$;

- (void)onCheckedStateChangedWithJavaUtilSet:(id<JavaUtilSet>)checkedIds;

@end

J2OBJC_EMPTY_STATIC_INIT(ADXChipGroup_2)

__attribute__((unused)) static void ADXChipGroup_2_initWithADXChipGroup_(ADXChipGroup_2 *self, ADXChipGroup *outer$);

__attribute__((unused)) static ADXChipGroup_2 *new_ADXChipGroup_2_initWithADXChipGroup_(ADXChipGroup *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static ADXChipGroup_2 *create_ADXChipGroup_2_initWithADXChipGroup_(ADXChipGroup *outer$);

@implementation ADXChipGroup

- (ADViewGroup_LayoutParams *)generateLayoutParamsWithADViewGroup_LayoutParams:(ADViewGroup_LayoutParams *)lp {
  return create_ADXChipGroup_LayoutParams_initWithADViewGroup_LayoutParams_(lp);
}

- (ADViewGroup_LayoutParams *)generateDefaultLayoutParams {
  return create_ADXChipGroup_LayoutParams_initWithInt_withInt_(ADViewGroup_LayoutParams_WRAP_CONTENT, ADViewGroup_LayoutParams_WRAP_CONTENT);
}

- (jboolean)checkLayoutParamsWithADViewGroup_LayoutParams:(ADViewGroup_LayoutParams *)p {
  return [super checkLayoutParamsWithADViewGroup_LayoutParams:p] && ([p isKindOfClass:[ADXChipGroup_LayoutParams class]]);
}

- (void)setDividerDrawableHorizontalWithADDrawable:(ADDrawable *)divider {
  @throw create_JavaLangUnsupportedOperationException_initWithNSString_(@"Changing divider drawables have no effect. ChipGroup do not use divider drawables as spacing.");
}

- (void)setDividerDrawableVerticalWithADDrawable:(ADDrawable *)divider {
  @throw create_JavaLangUnsupportedOperationException_initWithNSString_(@"Changing divider drawables have no effect. ChipGroup do not use divider drawables as spacing.");
}

- (void)setShowDividerHorizontalWithInt:(jint)dividerMode {
  @throw create_JavaLangUnsupportedOperationException_initWithNSString_(@"Changing divider modes has no effect. ChipGroup do not use divider drawables as spacing.");
}

- (void)setShowDividerVerticalWithInt:(jint)dividerMode {
  @throw create_JavaLangUnsupportedOperationException_initWithNSString_(@"Changing divider modes has no effect. ChipGroup do not use divider drawables as spacing.");
}

- (void)setFlexWrapWithInt:(jint)flexWrap {
  @throw create_JavaLangUnsupportedOperationException_initWithNSString_(@"Changing flex wrap not allowed. ChipGroup exposes a singleLine attribute instead.");
}

- (void)checkWithInt:(jint)id_ {
  [((ADXCheckableGroup *) nil_chk(checkableGroup_)) checkWithInt:id_];
}

- (jint)getCheckedChipId {
  return [((ADXCheckableGroup *) nil_chk(checkableGroup_)) getSingleCheckedId];
}

- (id<JavaUtilList>)getCheckedChipIds {
  return [((ADXCheckableGroup *) nil_chk(checkableGroup_)) getCheckedIdsSortedByChildOrderWithADViewGroup:self];
}

- (void)clearCheck {
  [((ADXCheckableGroup *) nil_chk(checkableGroup_)) clearCheck];
}

- (void)setOnCheckedChangeListenerWithADXChipGroup_OnCheckedChangeListener:(id<ADXChipGroup_OnCheckedChangeListener>)listener {
  if (listener == nil) {
    [self setOnCheckedStateChangeListenerWithADXChipGroup_OnCheckedStateChangeListener:nil];
    return;
  }
  [self setOnCheckedStateChangeListenerWithADXChipGroup_OnCheckedStateChangeListener:create_ADXChipGroup_1_initWithADXChipGroup_withADXChipGroup_OnCheckedChangeListener_(self, listener)];
}

- (void)setOnCheckedStateChangeListenerWithADXChipGroup_OnCheckedStateChangeListener:(id<ADXChipGroup_OnCheckedStateChangeListener>)listener {
  JreStrongAssign(&onCheckedStateChangeListener_, listener);
}

- (jint)getVisibleChipCount {
  return ADXChipGroup_getVisibleChipCount(self);
}

- (jint)getIndexOfChipWithADView:(ADView *)child {
  if (!([child isKindOfClass:[ADXChip class]])) {
    return -1;
  }
  jint index = 0;
  for (jint i = 0; i < [self getChildCount]; i++) {
    ADView *current = JreRetainedLocalValue([self getChildAtWithInt:i]);
    if ([current isKindOfClass:[ADXChip class]] && ADXChipGroup_isChildVisibleWithInt_(self, i)) {
      ADXChip *chip = (ADXChip *) cast_chk(current, [ADXChip class]);
      if (chip == child) {
        return index;
      }
      index++;
    }
  }
  return -1;
}

- (jboolean)isChildVisibleWithInt:(jint)i {
  return ADXChipGroup_isChildVisibleWithInt_(self, i);
}

- (void)setChipSpacingWithInt:(jint)chipSpacing {
  [self setChipSpacingHorizontalWithInt:chipSpacing];
  [self setChipSpacingVerticalWithInt:chipSpacing];
}

- (jint)getChipSpacingHorizontal {
  return chipSpacingHorizontal_;
}

- (void)setChipSpacingHorizontalWithInt:(jint)chipSpacingHorizontal {
  if (self->chipSpacingHorizontal_ != chipSpacingHorizontal) {
    self->chipSpacingHorizontal_ = chipSpacingHorizontal;
    [self setItemSpacingWithInt:chipSpacingHorizontal];
    [self requestLayout];
  }
}

- (jint)getChipSpacingVertical {
  return chipSpacingVertical_;
}

- (void)setChipSpacingVerticalWithInt:(jint)chipSpacingVertical {
  if (self->chipSpacingVertical_ != chipSpacingVertical) {
    self->chipSpacingVertical_ = chipSpacingVertical;
    [self setLineSpacingWithInt:chipSpacingVertical];
    [self requestLayout];
  }
}

- (jboolean)isSingleLine {
  return [super isSingleLine];
}

- (void)setSingleLineWithBoolean:(jboolean)singleLine {
  [super setSingleLineWithBoolean:singleLine];
}

- (jboolean)isSingleSelection {
  return [((ADXCheckableGroup *) nil_chk(checkableGroup_)) isSingleSelection];
}

- (void)setSingleSelectionWithBoolean:(jboolean)singleSelection {
  [((ADXCheckableGroup *) nil_chk(checkableGroup_)) setSingleSelectionWithBoolean:singleSelection];
}

- (void)setSelectionRequiredWithBoolean:(jboolean)selectionRequired {
  [((ADXCheckableGroup *) nil_chk(checkableGroup_)) setSelectionRequiredWithBoolean:selectionRequired];
}

- (jboolean)isSelectionRequired {
  return [((ADXCheckableGroup *) nil_chk(checkableGroup_)) isSelectionRequired];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADXChipGroup_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dealloc {
  RELEASE_(onCheckedStateChangeListener_);
  RELEASE_(checkableGroup_);
  RELEASE_(passThroughListener_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LADViewGroup_LayoutParams;", 0x4, 0, 1, -1, -1, -1, -1 },
    { NULL, "LADViewGroup_LayoutParams;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, 2, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 7, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 11, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 15, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 16, 17, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 18, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 7, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 7, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 21, 7, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 22, 23, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 24, 23, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 25, 23, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(generateLayoutParamsWithADViewGroup_LayoutParams:);
  methods[1].selector = @selector(generateDefaultLayoutParams);
  methods[2].selector = @selector(checkLayoutParamsWithADViewGroup_LayoutParams:);
  methods[3].selector = @selector(setDividerDrawableHorizontalWithADDrawable:);
  methods[4].selector = @selector(setDividerDrawableVerticalWithADDrawable:);
  methods[5].selector = @selector(setShowDividerHorizontalWithInt:);
  methods[6].selector = @selector(setShowDividerVerticalWithInt:);
  methods[7].selector = @selector(setFlexWrapWithInt:);
  methods[8].selector = @selector(checkWithInt:);
  methods[9].selector = @selector(getCheckedChipId);
  methods[10].selector = @selector(getCheckedChipIds);
  methods[11].selector = @selector(clearCheck);
  methods[12].selector = @selector(setOnCheckedChangeListenerWithADXChipGroup_OnCheckedChangeListener:);
  methods[13].selector = @selector(setOnCheckedStateChangeListenerWithADXChipGroup_OnCheckedStateChangeListener:);
  methods[14].selector = @selector(getVisibleChipCount);
  methods[15].selector = @selector(getIndexOfChipWithADView:);
  methods[16].selector = @selector(isChildVisibleWithInt:);
  methods[17].selector = @selector(setChipSpacingWithInt:);
  methods[18].selector = @selector(getChipSpacingHorizontal);
  methods[19].selector = @selector(setChipSpacingHorizontalWithInt:);
  methods[20].selector = @selector(getChipSpacingVertical);
  methods[21].selector = @selector(setChipSpacingVerticalWithInt:);
  methods[22].selector = @selector(isSingleLine);
  methods[23].selector = @selector(setSingleLineWithBoolean:);
  methods[24].selector = @selector(isSingleSelection);
  methods[25].selector = @selector(setSingleSelectionWithBoolean:);
  methods[26].selector = @selector(setSelectionRequiredWithBoolean:);
  methods[27].selector = @selector(isSelectionRequired);
  methods[28].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "chipSpacingHorizontal_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "chipSpacingVertical_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "onCheckedStateChangeListener_", "LADXChipGroup_OnCheckedStateChangeListener;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "checkableGroup_", "LADXCheckableGroup;", .constantValue.asLong = 0, 0x12, -1, -1, 26, -1 },
    { "defaultCheckedId_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "passThroughListener_", "LADXChipGroup_PassThroughHierarchyChangeListener;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "generateLayoutParams", "LADViewGroup_LayoutParams;", "checkLayoutParams", "setDividerDrawableHorizontal", "LADDrawable;", "setDividerDrawableVertical", "setShowDividerHorizontal", "I", "setShowDividerVertical", "setFlexWrap", "check", "()Ljava/util/List<Ljava/lang/Integer;>;", "setOnCheckedChangeListener", "LADXChipGroup_OnCheckedChangeListener;", "setOnCheckedStateChangeListener", "LADXChipGroup_OnCheckedStateChangeListener;", "getIndexOfChip", "LADView;", "isChildVisible", "setChipSpacing", "setChipSpacingHorizontal", "setChipSpacingVertical", "setSingleLine", "Z", "setSingleSelection", "setSelectionRequired", "Lcom/google/android/material/internal/CheckableGroup<Lcom/google/android/material/chip/Chip;>;", "LADXChipGroup_OnCheckedChangeListener;LADXChipGroup_OnCheckedStateChangeListener;LADXChipGroup_LayoutParams;LADXChipGroup_PassThroughHierarchyChangeListener;" };
  static const J2ObjcClassInfo _ADXChipGroup = { "ChipGroup", "com.google.android.material.chip", ptrTable, methods, fields, 7, 0x1, 29, 6, -1, 27, -1, -1, -1 };
  return &_ADXChipGroup;
}

@end

jint ADXChipGroup_getVisibleChipCount(ADXChipGroup *self) {
  jint count = 0;
  for (jint i = 0; i < [self getChildCount]; i++) {
    if ([[self getChildAtWithInt:i] isKindOfClass:[ADXChip class]] && ADXChipGroup_isChildVisibleWithInt_(self, i)) {
      count++;
    }
  }
  return count;
}

jboolean ADXChipGroup_isChildVisibleWithInt_(ADXChipGroup *self, jint i) {
  return [((ADView *) nil_chk([self getChildAtWithInt:i])) getVisibility] == ADView_VISIBLE;
}

void ADXChipGroup_init(ADXChipGroup *self) {
  ADXFlowLayout_init(self);
  JreStrongAssignAndConsume(&self->checkableGroup_, new_ADXCheckableGroup_init());
  JreStrongAssignAndConsume(&self->passThroughListener_, new_ADXChipGroup_PassThroughHierarchyChangeListener_initWithADXChipGroup_(self));
  self->defaultCheckedId_ = ADView_NO_ID;
  [self setOnHierarchyChangeListenerWithADViewGroup_OnHierarchyChangeListener:self->passThroughListener_];
  [self->checkableGroup_ setOnCheckedStateChangeListenerWithADXCheckableGroup_OnCheckedStateChangeListener:create_ADXChipGroup_2_initWithADXChipGroup_(self)];
}

ADXChipGroup *new_ADXChipGroup_init() {
  J2OBJC_NEW_IMPL(ADXChipGroup, init)
}

ADXChipGroup *create_ADXChipGroup_init() {
  J2OBJC_CREATE_IMPL(ADXChipGroup, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXChipGroup)

@implementation ADXChipGroup_OnCheckedChangeListener

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x401, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(onCheckedChangedWithADXChipGroup:withInt:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "onCheckedChanged", "LADXChipGroup;I", "LADXChipGroup;" };
  static const J2ObjcClassInfo _ADXChipGroup_OnCheckedChangeListener = { "OnCheckedChangeListener", "com.google.android.material.chip", ptrTable, methods, NULL, 7, 0x609, 1, 0, 2, -1, -1, -1, -1 };
  return &_ADXChipGroup_OnCheckedChangeListener;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(ADXChipGroup_OnCheckedChangeListener)

@implementation ADXChipGroup_OnCheckedStateChangeListener

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x401, 0, 1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(onCheckedChangedWithADXChipGroup:withJavaUtilList:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "onCheckedChanged", "LADXChipGroup;LJavaUtilList;", "(Lcom/google/android/material/chip/ChipGroup;Ljava/util/List<Ljava/lang/Integer;>;)V", "LADXChipGroup;" };
  static const J2ObjcClassInfo _ADXChipGroup_OnCheckedStateChangeListener = { "OnCheckedStateChangeListener", "com.google.android.material.chip", ptrTable, methods, NULL, 7, 0x609, 1, 0, 3, -1, -1, -1, -1 };
  return &_ADXChipGroup_OnCheckedStateChangeListener;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(ADXChipGroup_OnCheckedStateChangeListener)

@implementation ADXChipGroup_LayoutParams

- (instancetype)initWithADViewGroup_LayoutParams:(ADViewGroup_LayoutParams *)source {
  ADXChipGroup_LayoutParams_initWithADViewGroup_LayoutParams_(self, source);
  return self;
}

- (instancetype)initWithInt:(jint)width
                    withInt:(jint)height {
  ADXChipGroup_LayoutParams_initWithInt_withInt_(self, width, height);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithADViewGroup_LayoutParams:);
  methods[1].selector = @selector(initWithInt:withInt:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LADViewGroup_LayoutParams;", "II", "LADXChipGroup;" };
  static const J2ObjcClassInfo _ADXChipGroup_LayoutParams = { "LayoutParams", "com.google.android.material.chip", ptrTable, methods, NULL, 7, 0x9, 2, 0, 2, -1, -1, -1, -1 };
  return &_ADXChipGroup_LayoutParams;
}

@end

void ADXChipGroup_LayoutParams_initWithADViewGroup_LayoutParams_(ADXChipGroup_LayoutParams *self, ADViewGroup_LayoutParams *source) {
  ADViewGroup_MarginLayoutParams_initWithADViewGroup_LayoutParams_(self, source);
}

ADXChipGroup_LayoutParams *new_ADXChipGroup_LayoutParams_initWithADViewGroup_LayoutParams_(ADViewGroup_LayoutParams *source) {
  J2OBJC_NEW_IMPL(ADXChipGroup_LayoutParams, initWithADViewGroup_LayoutParams_, source)
}

ADXChipGroup_LayoutParams *create_ADXChipGroup_LayoutParams_initWithADViewGroup_LayoutParams_(ADViewGroup_LayoutParams *source) {
  J2OBJC_CREATE_IMPL(ADXChipGroup_LayoutParams, initWithADViewGroup_LayoutParams_, source)
}

void ADXChipGroup_LayoutParams_initWithInt_withInt_(ADXChipGroup_LayoutParams *self, jint width, jint height) {
  ADViewGroup_MarginLayoutParams_initWithInt_withInt_(self, width, height);
}

ADXChipGroup_LayoutParams *new_ADXChipGroup_LayoutParams_initWithInt_withInt_(jint width, jint height) {
  J2OBJC_NEW_IMPL(ADXChipGroup_LayoutParams, initWithInt_withInt_, width, height)
}

ADXChipGroup_LayoutParams *create_ADXChipGroup_LayoutParams_initWithInt_withInt_(jint width, jint height) {
  J2OBJC_CREATE_IMPL(ADXChipGroup_LayoutParams, initWithInt_withInt_, width, height)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXChipGroup_LayoutParams)

@implementation ADXChipGroup_1

- (instancetype)initWithADXChipGroup:(ADXChipGroup *)outer$
withADXChipGroup_OnCheckedChangeListener:(id<ADXChipGroup_OnCheckedChangeListener>)capture$0 {
  ADXChipGroup_1_initWithADXChipGroup_withADXChipGroup_OnCheckedChangeListener_(self, outer$, capture$0);
  return self;
}

- (void)onCheckedChangedWithADXChipGroup:(ADXChipGroup *)group
                        withJavaUtilList:(id<JavaUtilList>)checkedIds {
  if (![((ADXCheckableGroup *) nil_chk(this$0_->checkableGroup_)) isSingleSelection]) {
    return;
  }
  [((id<ADXChipGroup_OnCheckedChangeListener>) nil_chk(val$listener_)) onCheckedChangedWithADXChipGroup:group withInt:[this$0_ getCheckedChipId]];
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$listener_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithADXChipGroup:withADXChipGroup_OnCheckedChangeListener:);
  methods[1].selector = @selector(onCheckedChangedWithADXChipGroup:withJavaUtilList:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LADXChipGroup;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$listener_", "LADXChipGroup_OnCheckedChangeListener;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LADXChipGroup;LADXChipGroup_OnCheckedChangeListener;", "onCheckedChanged", "LADXChipGroup;LJavaUtilList;", "(Lcom/google/android/material/chip/ChipGroup;Ljava/util/List<Ljava/lang/Integer;>;)V", "LADXChipGroup;", "setOnCheckedChangeListenerWithADXChipGroup_OnCheckedChangeListener:" };
  static const J2ObjcClassInfo _ADXChipGroup_1 = { "", "com.google.android.material.chip", ptrTable, methods, fields, 7, 0x8010, 2, 2, 4, -1, 5, -1, -1 };
  return &_ADXChipGroup_1;
}

@end

void ADXChipGroup_1_initWithADXChipGroup_withADXChipGroup_OnCheckedChangeListener_(ADXChipGroup_1 *self, ADXChipGroup *outer$, id<ADXChipGroup_OnCheckedChangeListener> capture$0) {
  JreStrongAssign(&self->this$0_, outer$);
  JreStrongAssign(&self->val$listener_, capture$0);
  NSObject_init(self);
}

ADXChipGroup_1 *new_ADXChipGroup_1_initWithADXChipGroup_withADXChipGroup_OnCheckedChangeListener_(ADXChipGroup *outer$, id<ADXChipGroup_OnCheckedChangeListener> capture$0) {
  J2OBJC_NEW_IMPL(ADXChipGroup_1, initWithADXChipGroup_withADXChipGroup_OnCheckedChangeListener_, outer$, capture$0)
}

ADXChipGroup_1 *create_ADXChipGroup_1_initWithADXChipGroup_withADXChipGroup_OnCheckedChangeListener_(ADXChipGroup *outer$, id<ADXChipGroup_OnCheckedChangeListener> capture$0) {
  J2OBJC_CREATE_IMPL(ADXChipGroup_1, initWithADXChipGroup_withADXChipGroup_OnCheckedChangeListener_, outer$, capture$0)
}

@implementation ADXChipGroup_PassThroughHierarchyChangeListener

- (instancetype)initWithADXChipGroup:(ADXChipGroup *)outer$ {
  ADXChipGroup_PassThroughHierarchyChangeListener_initWithADXChipGroup_(self, outer$);
  return self;
}

- (void)onChildViewAddedWithADView:(ADView *)parent
                        withADView:(ADView *)child {
  if (parent == this$0_ && [child isKindOfClass:[ADXChip class]]) {
    jint id_ = [((ADView *) nil_chk(child)) getId];
    if (id_ == ADView_NO_ID) {
      [child setIdWithInt:id_];
    }
    [((ADXCheckableGroup *) nil_chk(this$0_->checkableGroup_)) addCheckableWithADXMaterialCheckable:(ADXChip *) cast_chk(child, [ADXChip class])];
  }
  if (onHierarchyChangeListener_ != nil) {
    [onHierarchyChangeListener_ onChildViewAddedWithADView:parent withADView:child];
  }
}

- (void)onChildViewRemovedWithADView:(ADView *)parent
                          withADView:(ADView *)child {
  if (parent == this$0_ && [child isKindOfClass:[ADXChip class]]) {
    [((ADXCheckableGroup *) nil_chk(this$0_->checkableGroup_)) removeCheckableWithADXMaterialCheckable:(ADXChip *) cast_chk(child, [ADXChip class])];
  }
  if (onHierarchyChangeListener_ != nil) {
    [onHierarchyChangeListener_ onChildViewRemovedWithADView:parent withADView:child];
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(onHierarchyChangeListener_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithADXChipGroup:);
  methods[1].selector = @selector(onChildViewAddedWithADView:withADView:);
  methods[2].selector = @selector(onChildViewRemovedWithADView:withADView:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LADXChipGroup;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "onHierarchyChangeListener_", "LADViewGroup_OnHierarchyChangeListener;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LADXChipGroup;", "onChildViewAdded", "LADView;LADView;", "onChildViewRemoved" };
  static const J2ObjcClassInfo _ADXChipGroup_PassThroughHierarchyChangeListener = { "PassThroughHierarchyChangeListener", "com.google.android.material.chip", ptrTable, methods, fields, 7, 0x2, 3, 2, 0, -1, -1, -1, -1 };
  return &_ADXChipGroup_PassThroughHierarchyChangeListener;
}

@end

void ADXChipGroup_PassThroughHierarchyChangeListener_initWithADXChipGroup_(ADXChipGroup_PassThroughHierarchyChangeListener *self, ADXChipGroup *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

ADXChipGroup_PassThroughHierarchyChangeListener *new_ADXChipGroup_PassThroughHierarchyChangeListener_initWithADXChipGroup_(ADXChipGroup *outer$) {
  J2OBJC_NEW_IMPL(ADXChipGroup_PassThroughHierarchyChangeListener, initWithADXChipGroup_, outer$)
}

ADXChipGroup_PassThroughHierarchyChangeListener *create_ADXChipGroup_PassThroughHierarchyChangeListener_initWithADXChipGroup_(ADXChipGroup *outer$) {
  J2OBJC_CREATE_IMPL(ADXChipGroup_PassThroughHierarchyChangeListener, initWithADXChipGroup_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXChipGroup_PassThroughHierarchyChangeListener)

@implementation ADXChipGroup_2

- (instancetype)initWithADXChipGroup:(ADXChipGroup *)outer$ {
  ADXChipGroup_2_initWithADXChipGroup_(self, outer$);
  return self;
}

- (void)onCheckedStateChangedWithJavaUtilSet:(id<JavaUtilSet>)checkedIds {
  if (this$0_->onCheckedStateChangeListener_ != nil) {
    [this$0_->onCheckedStateChangeListener_ onCheckedChangedWithADXChipGroup:this$0_ withJavaUtilList:[((ADXCheckableGroup *) nil_chk(this$0_->checkableGroup_)) getCheckedIdsSortedByChildOrderWithADViewGroup:this$0_]];
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithADXChipGroup:);
  methods[1].selector = @selector(onCheckedStateChangedWithJavaUtilSet:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LADXChipGroup;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LADXChipGroup;", "onCheckedStateChanged", "LJavaUtilSet;", "(Ljava/util/Set<Ljava/lang/Integer;>;)V", "init" };
  static const J2ObjcClassInfo _ADXChipGroup_2 = { "", "com.google.android.material.chip", ptrTable, methods, fields, 7, 0x8010, 2, 1, 0, -1, 4, -1, -1 };
  return &_ADXChipGroup_2;
}

@end

void ADXChipGroup_2_initWithADXChipGroup_(ADXChipGroup_2 *self, ADXChipGroup *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

ADXChipGroup_2 *new_ADXChipGroup_2_initWithADXChipGroup_(ADXChipGroup *outer$) {
  J2OBJC_NEW_IMPL(ADXChipGroup_2, initWithADXChipGroup_, outer$)
}

ADXChipGroup_2 *create_ADXChipGroup_2_initWithADXChipGroup_(ADXChipGroup *outer$) {
  J2OBJC_CREATE_IMPL(ADXChipGroup_2, initWithADXChipGroup_, outer$)
}
