//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroidX-core\src\main\java\androidx\appcompat\view\menu\BaseMenuPresenter.java
//

#define J2OBJC_IMPORTED_BY_JAVA_IMPLEMENTATION 1




#include "BaseMenuPresenter.h"
#include "Context.h"
#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "MenuBuilder.h"
#include "MenuItemImpl.h"
#include "View.h"
#include "ViewGroup.h"
#include "ViewParent.h"
#include "java/lang/Boolean.h"
#include "java/lang/Integer.h"
#include "java/util/ArrayList.h"




#pragma clang diagnostic error "-Wreturn-type"
#pragma clang diagnostic ignored "-Wswitch"


#pragma clang diagnostic ignored "-Wprotocol"

@interface ADXBaseMenuPresenter () {
 @public
  int32_t mMenuLayoutRes_;
  int32_t mItemLayoutRes_;
  int32_t mId_;
}

@end

@interface ADXBaseMenuPresenter_MenuView : NSObject

@end

@interface ADXBaseMenuPresenter_MenuView_ItemView : NSObject

@end

@implementation ADXBaseMenuPresenter

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADXBaseMenuPresenter_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)updateMenuViewWithBoolean:(bool)cleared {
  ADViewGroup *parent = (ADViewGroup *) cast_chk(mMenuView_, [ADViewGroup class]);
  if (parent == nil) return;
  int32_t childIndex = 0;
  if (mMenu_ != nil) {
    [mMenu_ flagActionItems];
    JavaUtilArrayList *visibleItems = JreRetainedLocalValue([((ADXMenuBuilder *) nil_chk(mMenu_)) getVisibleItems]);
    int32_t itemCount = [((JavaUtilArrayList *) nil_chk(visibleItems)) size];
    for (int32_t i = 0; i < itemCount; i++) {
      ADXMenuItemImpl *item = JreRetainedLocalValue([visibleItems getWithInt:i]);
      if ([self shouldIncludeItemWithInt:childIndex withADXMenuItemImpl:item]) {
        ADView *convertView = [parent getChildAtWithInt:childIndex];
        ADXMenuItemImpl *oldItem = [ADXBaseMenuPresenter_MenuView_ItemView_class_() isInstance:convertView] ? [((id<ADXBaseMenuPresenter_MenuView_ItemView>) nil_chk(((id<ADXBaseMenuPresenter_MenuView_ItemView>) cast_check(convertView, ADXBaseMenuPresenter_MenuView_ItemView_class_())))) getItemData] : nil;
        ADView *itemView = [self getItemViewWithADXMenuItemImpl:item withADView:convertView withADViewGroup:parent];
        if (!JreObjectEqualsEquals(item, oldItem)) {
          [((ADView *) nil_chk(itemView)) setPressedWithBoolean:false];
          [itemView jumpDrawablesToCurrentState];
        }
        if (!JreObjectEqualsEquals(itemView, convertView)) {
          [self addItemViewWithADView:itemView withInt:childIndex];
        }
        childIndex++;
      }
    }
  }
  while (childIndex < [parent getChildCount]) {
    if (![self filterLeftoverViewWithADViewGroup:parent withInt:childIndex]) {
      childIndex++;
    }
  }
}

- (void)addItemViewWithADView:(ADView *)itemView
                      withInt:(int32_t)childIndex {
  ADViewGroup *currentParent = (ADViewGroup *) cast_chk([((ADView *) nil_chk(itemView)) getParent], [ADViewGroup class]);
  if (currentParent != nil) {
    [currentParent removeViewWithADView:itemView];
  }
  [((ADViewGroup *) nil_chk(((ADViewGroup *) cast_chk(mMenuView_, [ADViewGroup class])))) addViewWithADView:itemView withInt:childIndex];
}

- (bool)filterLeftoverViewWithADViewGroup:(ADViewGroup *)parent
                                  withInt:(int32_t)childIndex {
  [((ADViewGroup *) nil_chk(parent)) removeViewAtWithInt:childIndex];
  return true;
}

- (bool)shouldIncludeItemWithInt:(int32_t)childIndex
             withADXMenuItemImpl:(ADXMenuItemImpl *)item {
  return true;
}

- (bool)flagActionItems {
  return false;
}

- (ADView *)getItemViewWithADXMenuItemImpl:(ADXMenuItemImpl *)item
                                withADView:(ADView *)convertView
                           withADViewGroup:(ADViewGroup *)parent {
  ADView *itemView = nil;
  if (convertView != nil && [self isMenuItemViewWithADView:convertView]) {
    itemView = convertView;
  }
  ADView *menuParent = parent;
  itemView = [self getItemViewWithADView:menuParent withADXMenuItemImpl:item];
  return itemView;
}

- (void)setMenuWithADXMenuBuilder:(ADXMenuBuilder *)mMenu {
  JreStrongAssign(&self->mMenu_, mMenu);
}

- (ADView *)getItemViewWithADView:(ADView *)parent
              withADXMenuItemImpl:(ADXMenuItemImpl *)item {
  return nil;
}

- (bool)isMenuItemViewWithADView:(ADView *)convertView {
  return false;
}

- (void)dealloc {
  RELEASE_(mSystemContext_);
  RELEASE_(mMenu_);
  RELEASE_(mMenuView_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 2, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, 4, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADView;", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "LADView;", 0x1, 8, 12, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 13, 14, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(updateMenuViewWithBoolean:);
  methods[2].selector = @selector(addItemViewWithADView:withInt:);
  methods[3].selector = @selector(filterLeftoverViewWithADViewGroup:withInt:);
  methods[4].selector = @selector(shouldIncludeItemWithInt:withADXMenuItemImpl:);
  methods[5].selector = @selector(flagActionItems);
  methods[6].selector = @selector(getItemViewWithADXMenuItemImpl:withADView:withADViewGroup:);
  methods[7].selector = @selector(setMenuWithADXMenuBuilder:);
  methods[8].selector = @selector(getItemViewWithADView:withADXMenuItemImpl:);
  methods[9].selector = @selector(isMenuItemViewWithADView:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mSystemContext_", "LADContext;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mMenu_", "LADXMenuBuilder;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mMenuLayoutRes_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mItemLayoutRes_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mId_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mMenuView_", "LADView;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "updateMenuView", "Z", "addItemView", "LADView;I", "filterLeftoverView", "LADViewGroup;I", "shouldIncludeItem", "ILADXMenuItemImpl;", "getItemView", "LADXMenuItemImpl;LADView;LADViewGroup;", "setMenu", "LADXMenuBuilder;", "LADView;LADXMenuItemImpl;", "isMenuItemView", "LADView;", "LADXBaseMenuPresenter_MenuView;" };
  static const J2ObjcClassInfo _ADXBaseMenuPresenter = { "BaseMenuPresenter", "androidx.appcompat.view.menu", ptrTable, methods, fields, 7, 0x401, 10, 6, -1, 15, -1, -1, -1 };
  return &_ADXBaseMenuPresenter;
}

@end

void ADXBaseMenuPresenter_init(ADXBaseMenuPresenter *self) {
  NSObject_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXBaseMenuPresenter)

J2OBJC_NAME_MAPPING(ADXBaseMenuPresenter, "androidx.appcompat.view.menu", "ADX")

@implementation ADXBaseMenuPresenter_MenuView

+ (const J2ObjcClassInfo *)__metadata {
  static const void *ptrTable[] = { "LADXBaseMenuPresenter;", "LADXBaseMenuPresenter_MenuView_ItemView;" };
  static const J2ObjcClassInfo _ADXBaseMenuPresenter_MenuView = { "MenuView", "androidx.appcompat.view.menu", ptrTable, NULL, NULL, 7, 0x608, 0, 0, 0, 1, -1, -1, -1 };
  return &_ADXBaseMenuPresenter_MenuView;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(ADXBaseMenuPresenter_MenuView)

@implementation ADXBaseMenuPresenter_MenuView_ItemView

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LADXMenuItemImpl;", 0x401, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getItemData);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LADXBaseMenuPresenter_MenuView;" };
  static const J2ObjcClassInfo _ADXBaseMenuPresenter_MenuView_ItemView = { "ItemView", "androidx.appcompat.view.menu", ptrTable, methods, NULL, 7, 0x609, 1, 0, 0, -1, -1, -1, -1 };
  return &_ADXBaseMenuPresenter_MenuView_ItemView;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(ADXBaseMenuPresenter_MenuView_ItemView)
