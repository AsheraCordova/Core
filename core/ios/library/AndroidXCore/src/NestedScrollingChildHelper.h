//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroidX-core\src\main\java\androidx\core\view\NestedScrollingChildHelper.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_NestedScrollingChildHelper")
#ifdef RESTRICT_NestedScrollingChildHelper
#define INCLUDE_ALL_NestedScrollingChildHelper 0
#else
#define INCLUDE_ALL_NestedScrollingChildHelper 1
#endif
#undef RESTRICT_NestedScrollingChildHelper

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ADXNestedScrollingChildHelper_) && (INCLUDE_ALL_NestedScrollingChildHelper || defined(INCLUDE_ADXNestedScrollingChildHelper))
#define ADXNestedScrollingChildHelper_

@class ADView;
@class IOSIntArray;

/*!
 @brief Helper class for implementing nested scrolling child views compatible with Android platform
  versions earlier than Android 5.0 Lollipop (API 21).
 <p><code>View</code> subclasses should instantiate a final instance of this
  class as a field at construction. For each <code>View</code> method that has a matching
  method signature in this class, delegate the operation to the helper instance in an overridden
  method implementation. This implements the standard framework policy for nested scrolling.</p>
  
 <p>Views invoking nested scrolling functionality should always do so from the relevant 
 <code>androidx.core.view.ViewCompat</code>, <code>androidx.core.view.ViewGroupCompat</code> or 
 <code>androidx.core.view.ViewParentCompat</code> compatibility
  shim static methods. This ensures interoperability with nested scrolling views on Android
  5.0 Lollipop and newer.</p>
 */
@interface ADXNestedScrollingChildHelper : NSObject

#pragma mark Public

/*!
 @brief Construct a new helper for a given view.
 */
- (instancetype)initWithADView:(ADView *)view;

/*!
 @brief Dispatch a nested fling operation to the current nested scrolling parent.
 <p>This is a delegate method. Call it from your <code>View</code> subclass
  method/<code>androidx.core.view.NestedScrollingChild</code> interface method with the same
  signature to implement the standard policy.</p>
 @return true if the parent consumed the nested fling
 */
- (jboolean)dispatchNestedFlingWithFloat:(jfloat)velocityX
                               withFloat:(jfloat)velocityY
                             withBoolean:(jboolean)consumed;

/*!
 @brief Dispatch a nested pre-fling operation to the current nested scrolling parent.
 <p>This is a delegate method. Call it from your <code>View</code> subclass
  method/<code>androidx.core.view.NestedScrollingChild</code> interface method with the same
  signature to implement the standard policy.</p>
 @return true if the parent consumed the nested fling
 */
- (jboolean)dispatchNestedPreFlingWithFloat:(jfloat)velocityX
                                  withFloat:(jfloat)velocityY;

/*!
 @brief Dispatch one step of a nested pre-scrolling operation to the current nested scrolling parent.
 <p>This is a delegate method. Call it from your <code>View</code> subclass
  method/<code>androidx.core.view.NestedScrollingChild</code> interface method with the same
  signature to implement the standard policy.</p>
 @return true if the parent consumed any of the nested scroll
 */
- (jboolean)dispatchNestedPreScrollWithInt:(jint)dx
                                   withInt:(jint)dy
                              withIntArray:(IOSIntArray *)consumed
                              withIntArray:(IOSIntArray *)offsetInWindow;

/*!
 @brief Dispatch one step of a nested pre-scrolling operation to the current nested scrolling parent.
 <p>This is a delegate method. Call it from your <code>View</code> subclass
  method/<code>androidx.core.view.NestedScrollingChild2</code> interface method with the same
  signature to implement the standard policy.</p>
 @return true if the parent consumed any of the nested scroll
 */
- (jboolean)dispatchNestedPreScrollWithInt:(jint)dx
                                   withInt:(jint)dy
                              withIntArray:(IOSIntArray *)consumed
                              withIntArray:(IOSIntArray *)offsetInWindow
                                   withInt:(jint)type;

/*!
 @brief Dispatch one step of a nested scrolling operation to the current nested scrolling parent.
 <p>This is a delegate method. Call it from your <code>View</code> subclass
  method/<code>androidx.core.view.NestedScrollingChild</code> interface method with the same
  signature to implement the standard policy.</p>
 @return <code>true</code> if the parent consumed any of the nested scroll distance
 */
- (jboolean)dispatchNestedScrollWithInt:(jint)dxConsumed
                                withInt:(jint)dyConsumed
                                withInt:(jint)dxUnconsumed
                                withInt:(jint)dyUnconsumed
                           withIntArray:(IOSIntArray *)offsetInWindow;

/*!
 @brief Dispatch one step of a nested scrolling operation to the current nested scrolling parent.
 <p>This is a delegate method. Call it from your <code>NestedScrollingChild2</code> interface
  method with the same signature to implement the standard policy.
 @return <code>true</code> if the parent consumed any of the nested scroll distance
 */
- (jboolean)dispatchNestedScrollWithInt:(jint)dxConsumed
                                withInt:(jint)dyConsumed
                                withInt:(jint)dxUnconsumed
                                withInt:(jint)dyUnconsumed
                           withIntArray:(IOSIntArray *)offsetInWindow
                                withInt:(jint)type;

/*!
 @brief Dispatch one step of a nested scrolling operation to the current nested scrolling parent.
 <p>This is a delegate method. Call it from your <code>NestedScrollingChild3</code> interface
  method with the same signature to implement the standard policy.
 */
- (void)dispatchNestedScrollWithInt:(jint)dxConsumed
                            withInt:(jint)dyConsumed
                            withInt:(jint)dxUnconsumed
                            withInt:(jint)dyUnconsumed
                       withIntArray:(IOSIntArray *)offsetInWindow
                            withInt:(jint)type
                       withIntArray:(IOSIntArray *)consumed;

/*!
 @brief Check if this view has a nested scrolling parent view currently receiving events for
  a nested scroll in progress with the type of touch.
 <p>This is a delegate method. Call it from your <code>View</code> subclass
  method/<code>androidx.core.view.NestedScrollingChild</code> interface method with the same
  signature to implement the standard policy.</p>
 @return true if this view has a nested scrolling parent, false otherwise
 */
- (jboolean)hasNestedScrollingParent;

/*!
 @brief Check if this view has a nested scrolling parent view currently receiving events for
  a nested scroll in progress with the given type.
 <p>This is a delegate method. Call it from your <code>View</code> subclass
  method/<code>androidx.core.view.NestedScrollingChild</code> interface method with the same
  signature to implement the standard policy.</p>
 @return true if this view has a nested scrolling parent, false otherwise
 */
- (jboolean)hasNestedScrollingParentWithInt:(jint)type;

/*!
 @brief Check if nested scrolling is enabled for this view.
 <p>This is a delegate method. Call it from your <code>View</code> subclass
  method/<code>androidx.core.view.NestedScrollingChild</code> interface method with the same
  signature to implement the standard policy.</p>
 @return true if nested scrolling is enabled for this view
 */
- (jboolean)isNestedScrollingEnabled;

/*!
 @brief View subclasses should always call this method on their 
 <code>NestedScrollingChildHelper</code> when detached from a window.
 <p>This is a delegate method. Call it from your <code>View</code> subclass
  method/<code>androidx.core.view.NestedScrollingChild</code> interface method with the same
  signature to implement the standard policy.</p>
 */
- (void)onDetachedFromWindow;

/*!
 @brief Called when a nested scrolling child stops its current nested scroll operation.
 <p>This is a delegate method. Call it from your <code>View</code> subclass
  method/<code>androidx.core.view.NestedScrollingChild</code> interface method with the same
  signature to implement the standard policy.</p>
 @param child Child view stopping its nested scroll. This may not be a direct child view.
 */
- (void)onStopNestedScrollWithADView:(ADView *)child;

/*!
 @brief Enable nested scrolling.
 <p>This is a delegate method. Call it from your <code>View</code> subclass
  method/<code>androidx.core.view.NestedScrollingChild</code> interface method with the same
  signature to implement the standard policy.</p>
 @param enabled true to enable nested scrolling dispatch from this view, false otherwise
 */
- (void)setNestedScrollingEnabledWithBoolean:(jboolean)enabled;

/*!
 @brief Start a new nested scroll for this view.
 <p>This is a delegate method. Call it from your <code>View</code> subclass
  method/<code>androidx.core.view.NestedScrollingChild</code> interface method with the same
  signature to implement the standard policy.</p>
 @param axes Supported nested scroll axes.              See 
 <code>androidx.core.view.NestedScrollingChild.startNestedScroll(int)</code> .
 @return true if a cooperating parent view was found and nested scrolling started successfully
 */
- (jboolean)startNestedScrollWithInt:(jint)axes;

/*!
 @brief Start a new nested scroll for this view.
 <p>This is a delegate method. Call it from your <code>View</code> subclass
  method/<code>androidx.core.view.NestedScrollingChild2</code> interface method with the same
  signature to implement the standard policy.</p>
 @param axes Supported nested scroll axes.              See 
 <code>androidx.core.view.NestedScrollingChild2.startNestedScroll(int,
             int)</code>
  .
 @return true if a cooperating parent view was found and nested scrolling started successfully
 */
- (jboolean)startNestedScrollWithInt:(jint)axes
                             withInt:(jint)type;

/*!
 @brief Stop a nested scroll in progress.
 <p>This is a delegate method. Call it from your <code>View</code> subclass
  method/<code>androidx.core.view.NestedScrollingChild</code> interface method with the same
  signature to implement the standard policy.</p>
 */
- (void)stopNestedScroll;

/*!
 @brief Stop a nested scroll in progress.
 <p>This is a delegate method. Call it from your <code>View</code> subclass
  method/<code>androidx.core.view.NestedScrollingChild2</code> interface method with the same
  signature to implement the standard policy.</p>
 */
- (void)stopNestedScrollWithInt:(jint)type;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ADXNestedScrollingChildHelper)

FOUNDATION_EXPORT void ADXNestedScrollingChildHelper_initWithADView_(ADXNestedScrollingChildHelper *self, ADView *view);

FOUNDATION_EXPORT ADXNestedScrollingChildHelper *new_ADXNestedScrollingChildHelper_initWithADView_(ADView *view) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ADXNestedScrollingChildHelper *create_ADXNestedScrollingChildHelper_initWithADView_(ADView *view);

J2OBJC_TYPE_LITERAL_HEADER(ADXNestedScrollingChildHelper)

@compatibility_alias AndroidxCoreViewNestedScrollingChildHelper ADXNestedScrollingChildHelper;

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_NestedScrollingChildHelper")
