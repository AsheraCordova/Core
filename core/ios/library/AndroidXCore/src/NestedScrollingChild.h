//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroidX-core\src\main\java\androidx\core\view\NestedScrollingChild.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_NestedScrollingChild")
#ifdef RESTRICT_NestedScrollingChild
#define INCLUDE_ALL_NestedScrollingChild 0
#else
#define INCLUDE_ALL_NestedScrollingChild 1
#endif
#undef RESTRICT_NestedScrollingChild

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ADXNestedScrollingChild_) && (INCLUDE_ALL_NestedScrollingChild || defined(INCLUDE_ADXNestedScrollingChild))
#define ADXNestedScrollingChild_

@class IOSIntArray;

/*!
 @brief This interface should be implemented by <code>View</code> subclasses that wish
  to support dispatching nested scrolling operations to a cooperating parent 
 <code>ViewGroup</code>.
 <p>Classes implementing this interface should create a final instance of a 
 <code>NestedScrollingChildHelper</code> as a field and delegate any View methods to the 
 <code>NestedScrollingChildHelper</code> methods of the same signature.</p>
  
 <p>Views invoking nested scrolling functionality should always do so from the relevant 
 <code>ViewCompat</code>, <code>ViewGroupCompat</code> or <code>ViewParentCompat</code> compatibility
  shim static methods. This ensures interoperability with nested scrolling views on Android
  5.0 Lollipop and newer.</p>
 */
@protocol ADXNestedScrollingChild < JavaObject >

/*!
 @brief Enable or disable nested scrolling for this view.
 <p>If this property is set to true the view will be permitted to initiate nested
  scrolling operations with a compatible parent view in the current hierarchy. If this
  view does not implement nested scrolling this will have no effect. Disabling nested scrolling
  while a nested scroll is in progress has the effect of <code>stopping</code>
  the nested scroll.</p>
 @param enabled true to enable nested scrolling, false to disable
 - seealso: #isNestedScrollingEnabled()
 */
- (void)setNestedScrollingEnabledWithBoolean:(jboolean)enabled;

/*!
 @brief Returns true if nested scrolling is enabled for this view.
 <p>If nested scrolling is enabled and this View class implementation supports it,
  this view will act as a nested scrolling child view when applicable, forwarding data
  about the scroll operation in progress to a compatible and cooperating nested scrolling
  parent.</p>
 @return true if nested scrolling is enabled
 - seealso: #setNestedScrollingEnabled(boolean)
 */
- (jboolean)isNestedScrollingEnabled;

/*!
 @brief Begin a nestable scroll operation along the given axes.
 <p>A view starting a nested scroll promises to abide by the following contract:</p>
  
 <p>The view will call startNestedScroll upon initiating a scroll operation. In the case
  of a touch scroll this corresponds to the initial <code>MotionEvent.ACTION_DOWN</code>.
  In the case of touch scrolling the nested scroll will be terminated automatically in
  the same manner as <code>ViewParent.requestDisallowInterceptTouchEvent(boolean)</code>.
  In the event of programmatic scrolling the caller must explicitly call 
 <code>stopNestedScroll()</code> to indicate the end of the nested scroll.</p>
  
 <p>If <code>startNestedScroll</code> returns true, a cooperative parent was found.
  If it returns false the caller may ignore the rest of this contract until the next scroll.
  Calling startNestedScroll while a nested scroll is already in progress will return true.</p>
  
 <p>At each incremental step of the scroll the caller should invoke 
 <code>dispatchNestedPreScroll</code>
  once it has calculated the requested scrolling delta. If it returns true the nested scrolling
  parent at least partially consumed the scroll and the caller should adjust the amount it
  scrolls by.</p>
  
 <p>After applying the remainder of the scroll delta the caller should invoke 
 <code>dispatchNestedScroll</code>, passing
  both the delta consumed and the delta unconsumed. A nested scrolling parent may treat
  these values differently. See 
 <code>NestedScrollingParent.onNestedScroll(View, int, int, int, int)</code>.
  </p>
 @param axes Flags consisting of a combination of <code>ViewCompat.SCROLL_AXIS_HORIZONTAL</code>              and/or 
 <code>ViewCompat.SCROLL_AXIS_VERTICAL</code> .
 @return true if a cooperative parent was found and nested scrolling has been enabled for
          the current gesture.
 - seealso: #stopNestedScroll()
 - seealso: #dispatchNestedPreScroll(int, int, int[], int[])
 - seealso: #dispatchNestedScroll(int, int, int, int, int[])
 */
- (jboolean)startNestedScrollWithInt:(jint)axes;

/*!
 @brief Stop a nested scroll in progress.
 <p>Calling this method when a nested scroll is not currently in progress is harmless.</p>
 - seealso: #startNestedScroll(int)
 */
- (void)stopNestedScroll;

/*!
 @brief Returns true if this view has a nested scrolling parent.
 <p>The presence of a nested scrolling parent indicates that this view has initiated
  a nested scroll and it was accepted by an ancestor view further up the view hierarchy.</p>
 @return whether this view has a nested scrolling parent
 */
- (jboolean)hasNestedScrollingParent;

/*!
 @brief Dispatch one step of a nested scroll in progress.
 <p>Implementations of views that support nested scrolling should call this to report
  info about a scroll in progress to the current nested scrolling parent. If a nested scroll
  is not currently in progress or nested scrolling is not 
 <code>enabled</code> for this view this method does nothing.</p>
  
 <p>Compatible View implementations should also call 
 <code>dispatchNestedPreScroll</code> before
  consuming a component of the scroll event themselves.</p>
 @param dxConsumed Horizontal distance in pixels consumed by this view during this scroll step
 @param dyConsumed Vertical distance in pixels consumed by this view during this scroll step
 @param dxUnconsumed Horizontal scroll distance in pixels not consumed by this view
 @param dyUnconsumed Horizontal scroll distance in pixels not consumed by this view
 @param offsetInWindow Optional. If not null, on return this will contain the offset                        in local view coordinates of this view from before this operation
                         to after it completes. View implementations may use this to adjust
                         expected input coordinate tracking.
 @return true if the event was dispatched, false if it could not be dispatched.
 - seealso: #dispatchNestedPreScroll(int, int, int[], int[])
 */
- (jboolean)dispatchNestedScrollWithInt:(jint)dxConsumed
                                withInt:(jint)dyConsumed
                                withInt:(jint)dxUnconsumed
                                withInt:(jint)dyUnconsumed
                           withIntArray:(IOSIntArray *)offsetInWindow;

/*!
 @brief Dispatch one step of a nested scroll in progress before this view consumes any portion of it.
 <p>Nested pre-scroll events are to nested scroll events what touch intercept is to touch. 
 <code>dispatchNestedPreScroll</code> offers an opportunity for the parent view in a nested
  scrolling operation to consume some or all of the scroll operation before the child view
  consumes it.</p>
 @param dx Horizontal scroll distance in pixels
 @param dy Vertical scroll distance in pixels
 @param consumed Output. If not null, consumed[0] will contain the consumed component of dx                  and consumed[1] the consumed dy.
 @param offsetInWindow Optional. If not null, on return this will contain the offset                        in local view coordinates of this view from before this operation
                         to after it completes. View implementations may use this to adjust
                         expected input coordinate tracking.
 @return true if the parent consumed some or all of the scroll delta
 - seealso: #dispatchNestedScroll(int, int, int, int, int[])
 */
- (jboolean)dispatchNestedPreScrollWithInt:(jint)dx
                                   withInt:(jint)dy
                              withIntArray:(IOSIntArray *)consumed
                              withIntArray:(IOSIntArray *)offsetInWindow;

/*!
 @brief Dispatch a fling to a nested scrolling parent.
 <p>This method should be used to indicate that a nested scrolling child has detected
  suitable conditions for a fling. Generally this means that a touch scroll has ended with a 
 <code>velocity</code> in the direction of scrolling that meets or exceeds the 
 <code>minimum fling velocity</code>
  along a scrollable axis.</p>
  
 <p>If a nested scrolling child view would normally fling but it is at the edge of
  its own content, it can use this method to delegate the fling to its nested scrolling
  parent instead. The parent may optionally consume the fling or observe a child fling.</p>
 @param velocityX Horizontal fling velocity in pixels per second
 @param velocityY Vertical fling velocity in pixels per second
 @param consumed true if the child consumed the fling, false otherwise
 @return true if the nested scrolling parent consumed or otherwise reacted to the fling
 */
- (jboolean)dispatchNestedFlingWithFloat:(jfloat)velocityX
                               withFloat:(jfloat)velocityY
                             withBoolean:(jboolean)consumed;

/*!
 @brief Dispatch a fling to a nested scrolling parent before it is processed by this view.
 <p>Nested pre-fling events are to nested fling events what touch intercept is to touch
  and what nested pre-scroll is to nested scroll. <code>dispatchNestedPreFling</code>
  offsets an opportunity for the parent view in a nested fling to fully consume the fling
  before the child view consumes it. If this method returns <code>true</code>, a nested
  parent view consumed the fling and this view should not scroll as a result.</p>
  
 <p>For a better user experience, only one view in a nested scrolling chain should consume
  the fling at a time. If a parent view consumed the fling this method will return false.
  Custom view implementations should account for this in two ways:</p>
  
 <ul>
      <li>If a custom view is paged and needs to settle to a fixed page-point, do not
      call <code>dispatchNestedPreFling</code>; consume the fling and settle to a valid
      position regardless.</li>
      <li>If a nested parent does consume the fling, this view should not scroll at all,
      even to settle back to a valid idle position.</li>
  </ul>
  
 <p>Views should also not offer fling velocities to nested parent views along an axis
  where scrolling is not currently supported; a <code>ScrollView</code>
  should not offer a horizontal fling velocity to its parents since scrolling along that
  axis is not permitted and carrying velocity along that motion does not make sense.</p>
 @param velocityX Horizontal fling velocity in pixels per second
 @param velocityY Vertical fling velocity in pixels per second
 @return true if a nested scrolling parent consumed the fling
 */
- (jboolean)dispatchNestedPreFlingWithFloat:(jfloat)velocityX
                                  withFloat:(jfloat)velocityY;

@end

J2OBJC_EMPTY_STATIC_INIT(ADXNestedScrollingChild)

J2OBJC_TYPE_LITERAL_HEADER(ADXNestedScrollingChild)

#define AndroidxCoreViewNestedScrollingChild ADXNestedScrollingChild

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_NestedScrollingChild")
