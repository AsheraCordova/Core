//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroidX-core\src\main\java\androidx\appcompat\view\menu\MenuItemImpl.java
//

#include "ColorStateList.h"
#include "Drawable.h"
#include "J2ObjC_source.h"
#include "MenuBuilder.h"
#include "MenuItem.h"
#include "MenuItemImpl.h"
#include "SubMenu.h"
#include "SubMenuBuilder.h"
#include "SupportMenuItem.h"
#include "View.h"
#include "java/lang/CharSequence.h"
#include "java/lang/IllegalArgumentException.h"

@protocol JavaLangCharSequence;


@interface ADXMenuItemImpl () {
 @public
  jint mId_;
  jint mGroup_;
  jint mCategoryOrder_;
  jint mOrdering_;
  id<JavaLangCharSequence> mTitle_;
  ADDrawable *mIconDrawable_;
  jint mIconResId_;
  ADXSubMenuBuilder *mSubMenu_;
  id<JavaLangCharSequence> mTooltipText_;
  ADColorStateList *mIconTintList_;
  jboolean mHasIconTint_;
  jboolean mHasIconTintMode_;
  jboolean mNeedToApplyIconTint_;
  jint mFlags_;
  jint mShowAsAction_;
  jboolean mIsActionViewExpanded_;
  ADView *mActionView_;
  id<ADXMenuItemImpl_ActionProvider> mActionProvider_;
}

@end

J2OBJC_FIELD_SETTER(ADXMenuItemImpl, mTitle_, id<JavaLangCharSequence>)
J2OBJC_FIELD_SETTER(ADXMenuItemImpl, mIconDrawable_, ADDrawable *)
J2OBJC_FIELD_SETTER(ADXMenuItemImpl, mSubMenu_, ADXSubMenuBuilder *)
J2OBJC_FIELD_SETTER(ADXMenuItemImpl, mTooltipText_, id<JavaLangCharSequence>)
J2OBJC_FIELD_SETTER(ADXMenuItemImpl, mIconTintList_, ADColorStateList *)
J2OBJC_FIELD_SETTER(ADXMenuItemImpl, mActionView_, ADView *)
J2OBJC_FIELD_SETTER(ADXMenuItemImpl, mActionProvider_, id<ADXMenuItemImpl_ActionProvider>)

inline jint ADXMenuItemImpl_get_SHOW_AS_ACTION_MASK(void);
#define ADXMenuItemImpl_SHOW_AS_ACTION_MASK 3
J2OBJC_STATIC_FIELD_CONSTANT(ADXMenuItemImpl, SHOW_AS_ACTION_MASK, jint)

inline jint ADXMenuItemImpl_get_CHECKABLE(void);
#define ADXMenuItemImpl_CHECKABLE 1
J2OBJC_STATIC_FIELD_CONSTANT(ADXMenuItemImpl, CHECKABLE, jint)

inline jint ADXMenuItemImpl_get_CHECKED(void);
#define ADXMenuItemImpl_CHECKED 2
J2OBJC_STATIC_FIELD_CONSTANT(ADXMenuItemImpl, CHECKED, jint)

inline jint ADXMenuItemImpl_get_EXCLUSIVE(void);
#define ADXMenuItemImpl_EXCLUSIVE 4
J2OBJC_STATIC_FIELD_CONSTANT(ADXMenuItemImpl, EXCLUSIVE, jint)

inline jint ADXMenuItemImpl_get_HIDDEN(void);
#define ADXMenuItemImpl_HIDDEN 8
J2OBJC_STATIC_FIELD_CONSTANT(ADXMenuItemImpl, HIDDEN, jint)

inline jint ADXMenuItemImpl_get_ENABLED(void);
#define ADXMenuItemImpl_ENABLED 16
J2OBJC_STATIC_FIELD_CONSTANT(ADXMenuItemImpl, ENABLED, jint)

inline jint ADXMenuItemImpl_get_IS_ACTION(void);
#define ADXMenuItemImpl_IS_ACTION 32
J2OBJC_STATIC_FIELD_CONSTANT(ADXMenuItemImpl, IS_ACTION, jint)

@interface ADXMenuItemImpl_ActionProvider : NSObject

@end

@implementation ADXMenuItemImpl

- (instancetype)initWithADXMenuBuilder:(ADXMenuBuilder *)menu
                               withInt:(jint)group
                               withInt:(jint)id_
                               withInt:(jint)categoryOrder
                               withInt:(jint)ordering
              withJavaLangCharSequence:(id<JavaLangCharSequence>)title
                               withInt:(jint)showAsAction {
  ADXMenuItemImpl_initWithADXMenuBuilder_withInt_withInt_withInt_withInt_withJavaLangCharSequence_withInt_(self, menu, group, id_, categoryOrder, ordering, title, showAsAction);
  return self;
}

- (jboolean)isEnabled {
  return (mFlags_ & ADXMenuItemImpl_ENABLED) != 0;
}

- (id<ADMenuItem>)setEnabledWithBoolean:(jboolean)enabled {
  if (enabled) {
    mFlags_ |= ADXMenuItemImpl_ENABLED;
  }
  else {
    mFlags_ &= ~ADXMenuItemImpl_ENABLED;
  }
  [((ADXMenuBuilder *) nil_chk(mMenu_)) onItemsChangedWithBoolean:false];
  return self;
}

- (jint)getGroupId {
  return mGroup_;
}

- (jint)getItemId {
  return mId_;
}

- (jint)getOrdering {
  return mOrdering_;
}

- (ADXSubMenuBuilder *)getSubMenu {
  return mSubMenu_;
}

- (jboolean)hasSubMenu {
  return mSubMenu_ != nil;
}

- (void)setSubMenuWithADXSubMenuBuilder:(ADXSubMenuBuilder *)subMenu {
  JreStrongAssign(&mSubMenu_, subMenu);
  [((ADXSubMenuBuilder *) nil_chk(subMenu)) setHeaderTitleWithJavaLangCharSequence:[self getTitle]];
}

- (id<ADMenuItem>)setIconWithADDrawable:(ADDrawable *)icon {
  mIconResId_ = ADXMenuItemImpl_NO_ICON;
  JreStrongAssign(&mIconDrawable_, icon);
  mNeedToApplyIconTint_ = true;
  [((ADXMenuBuilder *) nil_chk(mMenu_)) onItemsChangedWithBoolean:false];
  return self;
}

- (id<ADMenuItem>)setIconWithInt:(jint)iconResId {
  JreStrongAssign(&mIconDrawable_, nil);
  mIconResId_ = iconResId;
  mNeedToApplyIconTint_ = true;
  [((ADXMenuBuilder *) nil_chk(mMenu_)) onItemsChangedWithBoolean:false];
  return self;
}

- (id<ADMenuItem>)setIconTintListWithADColorStateList:(ADColorStateList *)iconTintList {
  JreStrongAssign(&mIconTintList_, iconTintList);
  mHasIconTint_ = true;
  mNeedToApplyIconTint_ = true;
  [((ADXMenuBuilder *) nil_chk(mMenu_)) onItemsChangedWithBoolean:false];
  return self;
}

- (jboolean)isCheckable {
  return (mFlags_ & ADXMenuItemImpl_CHECKABLE) == ADXMenuItemImpl_CHECKABLE;
}

- (id<ADMenuItem>)setCheckableWithBoolean:(jboolean)checkable {
  jint oldFlags = mFlags_;
  mFlags_ = (mFlags_ & ~ADXMenuItemImpl_CHECKABLE) | (checkable ? ADXMenuItemImpl_CHECKABLE : 0);
  if (oldFlags != mFlags_) {
    [((ADXMenuBuilder *) nil_chk(mMenu_)) onItemsChangedWithBoolean:false];
  }
  return self;
}

- (void)setExclusiveCheckableWithBoolean:(jboolean)exclusive {
  mFlags_ = (mFlags_ & ~ADXMenuItemImpl_EXCLUSIVE) | (exclusive ? ADXMenuItemImpl_EXCLUSIVE : 0);
}

- (jboolean)isExclusiveCheckable {
  return (mFlags_ & ADXMenuItemImpl_EXCLUSIVE) != 0;
}

- (jboolean)isChecked {
  return (mFlags_ & ADXMenuItemImpl_CHECKED) == ADXMenuItemImpl_CHECKED;
}

- (id<ADMenuItem>)setCheckedWithBoolean:(jboolean)checked {
  if ((mFlags_ & ADXMenuItemImpl_EXCLUSIVE) != 0) {
    [((ADXMenuBuilder *) nil_chk(mMenu_)) setExclusiveItemCheckedWithADMenuItem:self];
  }
  else {
    [self setCheckedIntWithBoolean:checked];
  }
  return self;
}

- (void)setCheckedIntWithBoolean:(jboolean)checked {
  jint oldFlags = mFlags_;
  mFlags_ = (mFlags_ & ~ADXMenuItemImpl_CHECKED) | (checked ? ADXMenuItemImpl_CHECKED : 0);
  if (oldFlags != mFlags_) {
    [((ADXMenuBuilder *) nil_chk(mMenu_)) onItemsChangedWithBoolean:false];
  }
}

- (jboolean)isVisible {
  if (mActionProvider_ != nil && [mActionProvider_ overridesItemVisibility]) {
    return (mFlags_ & ADXMenuItemImpl_HIDDEN) == 0 && [mActionProvider_ isVisible];
  }
  return (mFlags_ & ADXMenuItemImpl_HIDDEN) == 0;
}

- (jboolean)setVisibleIntWithBoolean:(jboolean)shown {
  jint oldFlags = mFlags_;
  mFlags_ = (mFlags_ & ~ADXMenuItemImpl_HIDDEN) | (shown ? 0 : ADXMenuItemImpl_HIDDEN);
  return oldFlags != mFlags_;
}

- (id<ADMenuItem>)setVisibleWithBoolean:(jboolean)shown {
  if ([self setVisibleIntWithBoolean:shown]) [((ADXMenuBuilder *) nil_chk(mMenu_)) onItemVisibleChangedWithADXMenuItemImpl:self];
  return self;
}

- (jboolean)isActionButton {
  return (mFlags_ & ADXMenuItemImpl_IS_ACTION) == ADXMenuItemImpl_IS_ACTION;
}

- (jboolean)requestsActionButton {
  return (mShowAsAction_ & ADMenuItem_SHOW_AS_ACTION_IF_ROOM) == ADMenuItem_SHOW_AS_ACTION_IF_ROOM;
}

- (jboolean)requiresActionButton {
  return (mShowAsAction_ & ADMenuItem_SHOW_AS_ACTION_ALWAYS) == ADMenuItem_SHOW_AS_ACTION_ALWAYS;
}

- (void)setIsActionButtonWithBoolean:(jboolean)isActionButton {
  if (isActionButton) {
    mFlags_ |= ADXMenuItemImpl_IS_ACTION;
  }
  else {
    mFlags_ &= ~ADXMenuItemImpl_IS_ACTION;
  }
}

- (void)setShowAsActionWithInt:(jint)actionEnum {
  switch (actionEnum & ADXMenuItemImpl_SHOW_AS_ACTION_MASK) {
    case ADMenuItem_SHOW_AS_ACTION_ALWAYS:
    case ADMenuItem_SHOW_AS_ACTION_IF_ROOM:
    case ADMenuItem_SHOW_AS_ACTION_NEVER:
    break;
    default:
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"SHOW_AS_ACTION_ALWAYS, SHOW_AS_ACTION_IF_ROOM, and SHOW_AS_ACTION_NEVER are mutually exclusive.");
  }
  mShowAsAction_ = actionEnum;
  [((ADXMenuBuilder *) nil_chk(mMenu_)) onItemActionRequestChangedWithADXMenuItemImpl:self];
}

- (id<ADXSupportMenuItem>)setActionViewWithADView:(ADView *)view {
  JreStrongAssign(&mActionView_, view);
  JreStrongAssign(&mActionProvider_, nil);
  if (view != nil && [view getId] == ADView_NO_ID && mId_ > 0) {
    [view setIdWithInt:mId_];
  }
  [((ADXMenuBuilder *) nil_chk(mMenu_)) onItemActionRequestChangedWithADXMenuItemImpl:self];
  return self;
}

- (ADView *)getActionView {
  if (mActionView_ != nil) {
    return mActionView_;
  }
  else if (mActionProvider_ != nil) {
    JreStrongAssign(&mActionView_, [mActionProvider_ onCreateActionViewWithADXMenuItemImpl:self]);
    return mActionView_;
  }
  else {
    return nil;
  }
}

- (jboolean)hasCollapsibleActionView {
  if ((mShowAsAction_ & ADMenuItem_SHOW_AS_ACTION_COLLAPSE_ACTION_VIEW) != 0) {
    if (mActionView_ == nil && mActionProvider_ != nil) {
      JreStrongAssign(&mActionView_, [mActionProvider_ onCreateActionViewWithADXMenuItemImpl:self]);
    }
    return mActionView_ != nil;
  }
  return false;
}

- (jboolean)isActionViewExpanded {
  return mIsActionViewExpanded_;
}

- (id<JavaLangCharSequence>)getTooltipText {
  return mTooltipText_;
}

- (NSString *)getTitle {
  return (NSString *) cast_chk(mTitle_, [NSString class]);
}

- (ADDrawable *)getIcon {
  return mIconDrawable_;
}

- (jboolean)invoke {
  if ([((ADXMenuBuilder *) nil_chk(mMenu_)) dispatchMenuItemSelectedWithADXMenuBuilder:mMenu_ withADMenuItem:self]) {
    return true;
  }
  return false;
}

- (void)dealloc {
  RELEASE_(mTitle_);
  RELEASE_(mIconDrawable_);
  RELEASE_(mMenu_);
  RELEASE_(mSubMenu_);
  RELEASE_(mTooltipText_);
  RELEASE_(mIconTintList_);
  RELEASE_(mActionView_);
  RELEASE_(mActionProvider_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADMenuItem;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADXSubMenuBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LADMenuItem;", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "LADMenuItem;", 0x1, 5, 7, -1, -1, -1, -1 },
    { NULL, "LADMenuItem;", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADMenuItem;", 0x1, 10, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADMenuItem;", 0x1, 12, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 13, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 14, 2, -1, -1, -1, -1 },
    { NULL, "LADMenuItem;", 0x1, 15, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 7, -1, -1, -1, -1 },
    { NULL, "LADXSupportMenuItem;", 0x1, 18, 19, -1, -1, -1, -1 },
    { NULL, "LADView;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangCharSequence;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADDrawable;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithADXMenuBuilder:withInt:withInt:withInt:withInt:withJavaLangCharSequence:withInt:);
  methods[1].selector = @selector(isEnabled);
  methods[2].selector = @selector(setEnabledWithBoolean:);
  methods[3].selector = @selector(getGroupId);
  methods[4].selector = @selector(getItemId);
  methods[5].selector = @selector(getOrdering);
  methods[6].selector = @selector(getSubMenu);
  methods[7].selector = @selector(hasSubMenu);
  methods[8].selector = @selector(setSubMenuWithADXSubMenuBuilder:);
  methods[9].selector = @selector(setIconWithADDrawable:);
  methods[10].selector = @selector(setIconWithInt:);
  methods[11].selector = @selector(setIconTintListWithADColorStateList:);
  methods[12].selector = @selector(isCheckable);
  methods[13].selector = @selector(setCheckableWithBoolean:);
  methods[14].selector = @selector(setExclusiveCheckableWithBoolean:);
  methods[15].selector = @selector(isExclusiveCheckable);
  methods[16].selector = @selector(isChecked);
  methods[17].selector = @selector(setCheckedWithBoolean:);
  methods[18].selector = @selector(setCheckedIntWithBoolean:);
  methods[19].selector = @selector(isVisible);
  methods[20].selector = @selector(setVisibleIntWithBoolean:);
  methods[21].selector = @selector(setVisibleWithBoolean:);
  methods[22].selector = @selector(isActionButton);
  methods[23].selector = @selector(requestsActionButton);
  methods[24].selector = @selector(requiresActionButton);
  methods[25].selector = @selector(setIsActionButtonWithBoolean:);
  methods[26].selector = @selector(setShowAsActionWithInt:);
  methods[27].selector = @selector(setActionViewWithADView:);
  methods[28].selector = @selector(getActionView);
  methods[29].selector = @selector(hasCollapsibleActionView);
  methods[30].selector = @selector(isActionViewExpanded);
  methods[31].selector = @selector(getTooltipText);
  methods[32].selector = @selector(getTitle);
  methods[33].selector = @selector(getIcon);
  methods[34].selector = @selector(invoke);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "SHOW_AS_ACTION_MASK", "I", .constantValue.asInt = ADXMenuItemImpl_SHOW_AS_ACTION_MASK, 0x1a, -1, -1, -1, -1 },
    { "mId_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mGroup_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mCategoryOrder_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mOrdering_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mTitle_", "LJavaLangCharSequence;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mIconDrawable_", "LADDrawable;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mIconResId_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mMenu_", "LADXMenuBuilder;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mSubMenu_", "LADXSubMenuBuilder;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mTooltipText_", "LJavaLangCharSequence;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mIconTintList_", "LADColorStateList;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mHasIconTint_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mHasIconTintMode_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mNeedToApplyIconTint_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mFlags_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "CHECKABLE", "I", .constantValue.asInt = ADXMenuItemImpl_CHECKABLE, 0x1a, -1, -1, -1, -1 },
    { "CHECKED", "I", .constantValue.asInt = ADXMenuItemImpl_CHECKED, 0x1a, -1, -1, -1, -1 },
    { "EXCLUSIVE", "I", .constantValue.asInt = ADXMenuItemImpl_EXCLUSIVE, 0x1a, -1, -1, -1, -1 },
    { "HIDDEN", "I", .constantValue.asInt = ADXMenuItemImpl_HIDDEN, 0x1a, -1, -1, -1, -1 },
    { "ENABLED", "I", .constantValue.asInt = ADXMenuItemImpl_ENABLED, 0x1a, -1, -1, -1, -1 },
    { "IS_ACTION", "I", .constantValue.asInt = ADXMenuItemImpl_IS_ACTION, 0x1a, -1, -1, -1, -1 },
    { "mShowAsAction_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mIsActionViewExpanded_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "NO_ICON", "I", .constantValue.asInt = ADXMenuItemImpl_NO_ICON, 0x18, -1, -1, -1, -1 },
    { "mActionView_", "LADView;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mActionProvider_", "LADXMenuItemImpl_ActionProvider;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LADXMenuBuilder;IIIILJavaLangCharSequence;I", "setEnabled", "Z", "setSubMenu", "LADXSubMenuBuilder;", "setIcon", "LADDrawable;", "I", "setIconTintList", "LADColorStateList;", "setCheckable", "setExclusiveCheckable", "setChecked", "setCheckedInt", "setVisibleInt", "setVisible", "setIsActionButton", "setShowAsAction", "setActionView", "LADView;", "LADXMenuItemImpl_ActionProvider;" };
  static const J2ObjcClassInfo _ADXMenuItemImpl = { "MenuItemImpl", "androidx.appcompat.view.menu", ptrTable, methods, fields, 7, 0x11, 35, 27, -1, 20, -1, -1, -1 };
  return &_ADXMenuItemImpl;
}

@end

void ADXMenuItemImpl_initWithADXMenuBuilder_withInt_withInt_withInt_withInt_withJavaLangCharSequence_withInt_(ADXMenuItemImpl *self, ADXMenuBuilder *menu, jint group, jint id_, jint categoryOrder, jint ordering, id<JavaLangCharSequence> title, jint showAsAction) {
  NSObject_init(self);
  self->mIconResId_ = ADXMenuItemImpl_NO_ICON;
  JreStrongAssign(&self->mIconTintList_, nil);
  self->mHasIconTint_ = false;
  self->mHasIconTintMode_ = false;
  self->mNeedToApplyIconTint_ = false;
  self->mFlags_ = ADXMenuItemImpl_ENABLED;
  self->mShowAsAction_ = ADMenuItem_SHOW_AS_ACTION_NEVER;
  self->mIsActionViewExpanded_ = false;
  JreStrongAssign(&self->mMenu_, menu);
  self->mId_ = id_;
  self->mGroup_ = group;
  self->mCategoryOrder_ = categoryOrder;
  self->mOrdering_ = ordering;
  JreStrongAssign(&self->mTitle_, title);
  self->mShowAsAction_ = showAsAction;
}

ADXMenuItemImpl *new_ADXMenuItemImpl_initWithADXMenuBuilder_withInt_withInt_withInt_withInt_withJavaLangCharSequence_withInt_(ADXMenuBuilder *menu, jint group, jint id_, jint categoryOrder, jint ordering, id<JavaLangCharSequence> title, jint showAsAction) {
  J2OBJC_NEW_IMPL(ADXMenuItemImpl, initWithADXMenuBuilder_withInt_withInt_withInt_withInt_withJavaLangCharSequence_withInt_, menu, group, id_, categoryOrder, ordering, title, showAsAction)
}

ADXMenuItemImpl *create_ADXMenuItemImpl_initWithADXMenuBuilder_withInt_withInt_withInt_withInt_withJavaLangCharSequence_withInt_(ADXMenuBuilder *menu, jint group, jint id_, jint categoryOrder, jint ordering, id<JavaLangCharSequence> title, jint showAsAction) {
  J2OBJC_CREATE_IMPL(ADXMenuItemImpl, initWithADXMenuBuilder_withInt_withInt_withInt_withInt_withJavaLangCharSequence_withInt_, menu, group, id_, categoryOrder, ordering, title, showAsAction)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXMenuItemImpl)

@implementation ADXMenuItemImpl_ActionProvider

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "Z", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADView;", 0x401, 0, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x401, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(overridesItemVisibility);
  methods[1].selector = @selector(onCreateActionViewWithADXMenuItemImpl:);
  methods[2].selector = @selector(isVisible);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "onCreateActionView", "LADXMenuItemImpl;" };
  static const J2ObjcClassInfo _ADXMenuItemImpl_ActionProvider = { "ActionProvider", "androidx.appcompat.view.menu", ptrTable, methods, NULL, 7, 0x608, 3, 0, 1, -1, -1, -1, -1 };
  return &_ADXMenuItemImpl_ActionProvider;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(ADXMenuItemImpl_ActionProvider)
