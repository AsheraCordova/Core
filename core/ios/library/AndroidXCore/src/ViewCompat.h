//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroidX-core\src\main\java\androidx\core\view\ViewCompat.java
//

#import <Foundation/Foundation.h>
#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ViewCompat")
#ifdef RESTRICT_ViewCompat
#define INCLUDE_ALL_ViewCompat 0
#else
#define INCLUDE_ALL_ViewCompat 1
#endif
#undef RESTRICT_ViewCompat

#if !defined (ADXViewCompat_) && (INCLUDE_ALL_ViewCompat || defined(INCLUDE_ADXViewCompat))
#define ADXViewCompat_

@class ADView;
@class ADViewGroup;
@class JavaLangBoolean;
@class JavaLangFloat;
@class JavaLangInteger;

@interface ADXViewCompat : NSObject

#pragma mark Public

- (instancetype)init;

+ (int32_t)combineMeasuredStatesWithInt:(int32_t)curState
                                withInt:(int32_t)newState;

+ (void)dispatchApplyWindowInsetsWithADView:(ADView *)child
                                     withId:(id)wi;

+ (void)dispatchFinishTemporaryDetachWithADView:(ADView *)child;

+ (void)dispatchStartTemporaryDetachWithADView:(ADView *)view;

+ (float)getElevationWithADView:(ADView *)child;

+ (bool)getFitsSystemWindowsWithADView:(ADView *)view;

+ (int32_t)getImportantForAccessibilityWithADView:(ADView *)itemView;

+ (int32_t)getLayoutDirectionWithADView:(ADView *)view;

+ (int32_t)getMeasuredHeightAndStateWithADView:(ADView *)view;

+ (int32_t)getMeasuredStateWithADView:(ADView *)child;

+ (int32_t)getMeasuredWidthAndStateWithADView:(ADView *)view;

+ (int32_t)getMinimumHeightWithADView:(ADView *)view;

+ (int32_t)getMinimumWidthWithADView:(ADView *)view;

+ (int32_t)getPaddingEndWithADView:(ADView *)view;

+ (int32_t)getPaddingEndWithADViewGroup:(ADViewGroup *)viewGroup;

+ (int32_t)getPaddingStartWithADView:(ADView *)view;

+ (int32_t)getPaddingStartWithADViewGroup:(ADViewGroup *)viewGroup;

+ (id)getRootWindowInsetsWithId:(id)drawerLayout;

+ (bool)hasTransientStateWithADView:(ADView *)view;

+ (bool)isLaidOutWithADView:(ADView *)view;

+ (bool)isLayoutDirectionResolvedWithADView:(ADView *)view;

+ (bool)isPaddingRelativeWithADView:(ADView *)view;

+ (void)jumpDrawablesToCurrentStateWithADView:(ADView *)itemView;

+ (void)offsetLeftAndRightWithADView:(ADView *)child
                             withInt:(int32_t)dx;

+ (void)offsetTopAndBottomWithADView:(ADView *)child
                             withInt:(int32_t)dy;

+ (int32_t)resolveSizeAndStateWithInt:(int32_t)size
                              withInt:(int32_t)measureSpec
                              withInt:(int32_t)childMeasuredState;

+ (void)setElevationWithADView:(ADView *)child
                     withFloat:(float)mDrawerElevation;

+ (void)setImportantForAccessibilityWithADView:(ADView *)itemView
                                       withInt:(int32_t)importantForAccessibilityYes;

+ (void)setLayoutDirectionWithADViewGroup:(ADViewGroup *)viewGroup
                                  withInt:(int32_t)layoutDirection;

+ (void)setPaddingRelativeWithADView:(ADView *)view
                             withInt:(int32_t)start
                             withInt:(int32_t)top
                             withInt:(int32_t)end
                             withInt:(int32_t)bottom;

+ (void)setXWithADView:(ADView *)child
               withInt:(int32_t)x;

+ (void)setYWithADView:(ADView *)child
               withInt:(int32_t)y;

+ (void)stopNestedScrollWithADView:(ADView *)view;

@end

J2OBJC_EMPTY_STATIC_INIT(ADXViewCompat)

inline int32_t ADXViewCompat_get_MEASURED_STATE_MASK(void);
#define ADXViewCompat_MEASURED_STATE_MASK -16777216
J2OBJC_STATIC_FIELD_CONSTANT(ADXViewCompat, MEASURED_STATE_MASK, int32_t)

inline int32_t ADXViewCompat_get_MEASURED_STATE_TOO_SMALL(void);
#define ADXViewCompat_MEASURED_STATE_TOO_SMALL 16777216
J2OBJC_STATIC_FIELD_CONSTANT(ADXViewCompat, MEASURED_STATE_TOO_SMALL, int32_t)

inline int32_t ADXViewCompat_get_LAYOUT_DIRECTION_RTL(void);
#define ADXViewCompat_LAYOUT_DIRECTION_RTL 1
J2OBJC_STATIC_FIELD_CONSTANT(ADXViewCompat, LAYOUT_DIRECTION_RTL, int32_t)

inline int32_t ADXViewCompat_get_MEASURED_HEIGHT_STATE_SHIFT(void);
#define ADXViewCompat_MEASURED_HEIGHT_STATE_SHIFT 16
J2OBJC_STATIC_FIELD_CONSTANT(ADXViewCompat, MEASURED_HEIGHT_STATE_SHIFT, int32_t)

inline int32_t ADXViewCompat_get_MEASURED_SIZE_MASK(void);
#define ADXViewCompat_MEASURED_SIZE_MASK 16777215
J2OBJC_STATIC_FIELD_CONSTANT(ADXViewCompat, MEASURED_SIZE_MASK, int32_t)

inline int32_t ADXViewCompat_get_LAYOUT_DIRECTION_LTR(void);
#define ADXViewCompat_LAYOUT_DIRECTION_LTR 0
J2OBJC_STATIC_FIELD_CONSTANT(ADXViewCompat, LAYOUT_DIRECTION_LTR, int32_t)

inline int32_t ADXViewCompat_get_IMPORTANT_FOR_ACCESSIBILITY_AUTO(void);
#define ADXViewCompat_IMPORTANT_FOR_ACCESSIBILITY_AUTO 0
J2OBJC_STATIC_FIELD_CONSTANT(ADXViewCompat, IMPORTANT_FOR_ACCESSIBILITY_AUTO, int32_t)

inline int32_t ADXViewCompat_get_IMPORTANT_FOR_ACCESSIBILITY_NO(void);
#define ADXViewCompat_IMPORTANT_FOR_ACCESSIBILITY_NO 0
J2OBJC_STATIC_FIELD_CONSTANT(ADXViewCompat, IMPORTANT_FOR_ACCESSIBILITY_NO, int32_t)

inline int32_t ADXViewCompat_get_IMPORTANT_FOR_ACCESSIBILITY_YES(void);
#define ADXViewCompat_IMPORTANT_FOR_ACCESSIBILITY_YES 0
J2OBJC_STATIC_FIELD_CONSTANT(ADXViewCompat, IMPORTANT_FOR_ACCESSIBILITY_YES, int32_t)

inline int32_t ADXViewCompat_get_SCROLL_AXIS_NONE(void);
#define ADXViewCompat_SCROLL_AXIS_NONE 0
J2OBJC_STATIC_FIELD_CONSTANT(ADXViewCompat, SCROLL_AXIS_NONE, int32_t)

inline int32_t ADXViewCompat_get_SCROLL_AXIS_HORIZONTAL(void);
#define ADXViewCompat_SCROLL_AXIS_HORIZONTAL 1
J2OBJC_STATIC_FIELD_CONSTANT(ADXViewCompat, SCROLL_AXIS_HORIZONTAL, int32_t)

inline int32_t ADXViewCompat_get_SCROLL_AXIS_VERTICAL(void);
#define ADXViewCompat_SCROLL_AXIS_VERTICAL 2
J2OBJC_STATIC_FIELD_CONSTANT(ADXViewCompat, SCROLL_AXIS_VERTICAL, int32_t)

inline int32_t ADXViewCompat_get_TYPE_TOUCH(void);
#define ADXViewCompat_TYPE_TOUCH 0
J2OBJC_STATIC_FIELD_CONSTANT(ADXViewCompat, TYPE_TOUCH, int32_t)

inline int32_t ADXViewCompat_get_TYPE_NON_TOUCH(void);
#define ADXViewCompat_TYPE_NON_TOUCH 1
J2OBJC_STATIC_FIELD_CONSTANT(ADXViewCompat, TYPE_NON_TOUCH, int32_t)

FOUNDATION_EXPORT void ADXViewCompat_init(ADXViewCompat *self);

FOUNDATION_EXPORT ADXViewCompat *new_ADXViewCompat_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ADXViewCompat *create_ADXViewCompat_init(void);

FOUNDATION_EXPORT int32_t ADXViewCompat_getMeasuredWidthAndStateWithADView_(ADView *view);

FOUNDATION_EXPORT int32_t ADXViewCompat_getMeasuredHeightAndStateWithADView_(ADView *view);

FOUNDATION_EXPORT int32_t ADXViewCompat_getLayoutDirectionWithADView_(ADView *view);

FOUNDATION_EXPORT int32_t ADXViewCompat_resolveSizeAndStateWithInt_withInt_withInt_(int32_t size, int32_t measureSpec, int32_t childMeasuredState);

FOUNDATION_EXPORT int32_t ADXViewCompat_combineMeasuredStatesWithInt_withInt_(int32_t curState, int32_t newState);

FOUNDATION_EXPORT int32_t ADXViewCompat_getMeasuredStateWithADView_(ADView *child);

FOUNDATION_EXPORT int32_t ADXViewCompat_getPaddingStartWithADViewGroup_(ADViewGroup *viewGroup);

FOUNDATION_EXPORT int32_t ADXViewCompat_getPaddingEndWithADViewGroup_(ADViewGroup *viewGroup);

FOUNDATION_EXPORT void ADXViewCompat_setLayoutDirectionWithADViewGroup_withInt_(ADViewGroup *viewGroup, int32_t layoutDirection);

FOUNDATION_EXPORT void ADXViewCompat_setPaddingRelativeWithADView_withInt_withInt_withInt_withInt_(ADView *view, int32_t start, int32_t top, int32_t end, int32_t bottom);

FOUNDATION_EXPORT int32_t ADXViewCompat_getPaddingStartWithADView_(ADView *view);

FOUNDATION_EXPORT int32_t ADXViewCompat_getPaddingEndWithADView_(ADView *view);

FOUNDATION_EXPORT void ADXViewCompat_setXWithADView_withInt_(ADView *child, int32_t x);

FOUNDATION_EXPORT void ADXViewCompat_setYWithADView_withInt_(ADView *child, int32_t y);

FOUNDATION_EXPORT int32_t ADXViewCompat_getMinimumHeightWithADView_(ADView *view);

FOUNDATION_EXPORT void ADXViewCompat_jumpDrawablesToCurrentStateWithADView_(ADView *itemView);

FOUNDATION_EXPORT bool ADXViewCompat_getFitsSystemWindowsWithADView_(ADView *view);

FOUNDATION_EXPORT void ADXViewCompat_setElevationWithADView_withFloat_(ADView *child, float mDrawerElevation);

FOUNDATION_EXPORT float ADXViewCompat_getElevationWithADView_(ADView *child);

FOUNDATION_EXPORT void ADXViewCompat_dispatchApplyWindowInsetsWithADView_withId_(ADView *child, id wi);

FOUNDATION_EXPORT id ADXViewCompat_getRootWindowInsetsWithId_(id drawerLayout);

FOUNDATION_EXPORT int32_t ADXViewCompat_getMinimumWidthWithADView_(ADView *view);

FOUNDATION_EXPORT int32_t ADXViewCompat_getImportantForAccessibilityWithADView_(ADView *itemView);

FOUNDATION_EXPORT void ADXViewCompat_setImportantForAccessibilityWithADView_withInt_(ADView *itemView, int32_t importantForAccessibilityYes);

FOUNDATION_EXPORT void ADXViewCompat_dispatchFinishTemporaryDetachWithADView_(ADView *child);

FOUNDATION_EXPORT void ADXViewCompat_dispatchStartTemporaryDetachWithADView_(ADView *view);

FOUNDATION_EXPORT bool ADXViewCompat_hasTransientStateWithADView_(ADView *view);

FOUNDATION_EXPORT bool ADXViewCompat_isLayoutDirectionResolvedWithADView_(ADView *view);

FOUNDATION_EXPORT void ADXViewCompat_offsetLeftAndRightWithADView_withInt_(ADView *child, int32_t dx);

FOUNDATION_EXPORT void ADXViewCompat_offsetTopAndBottomWithADView_withInt_(ADView *child, int32_t dy);

FOUNDATION_EXPORT bool ADXViewCompat_isLaidOutWithADView_(ADView *view);

FOUNDATION_EXPORT bool ADXViewCompat_isPaddingRelativeWithADView_(ADView *view);

FOUNDATION_EXPORT void ADXViewCompat_stopNestedScrollWithADView_(ADView *view);

J2OBJC_TYPE_LITERAL_HEADER(ADXViewCompat)

@compatibility_alias AndroidxCoreViewViewCompat ADXViewCompat;


#endif

#pragma pop_macro("INCLUDE_ALL_ViewCompat")
