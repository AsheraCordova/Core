//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroidX-core\src\main\java\androidx\core\view\NestedScrollingChild2.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_NestedScrollingChild2")
#ifdef RESTRICT_NestedScrollingChild2
#define INCLUDE_ALL_NestedScrollingChild2 0
#else
#define INCLUDE_ALL_NestedScrollingChild2 1
#endif
#undef RESTRICT_NestedScrollingChild2

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ADXNestedScrollingChild2_) && (INCLUDE_ALL_NestedScrollingChild2 || defined(INCLUDE_ADXNestedScrollingChild2))
#define ADXNestedScrollingChild2_

#define RESTRICT_NestedScrollingChild 1
#define INCLUDE_ADXNestedScrollingChild 1
#include "NestedScrollingChild.h"

@class IOSIntArray;

/*!
 @brief This interface should be implemented by <code>View</code> subclasses that wish
  to support dispatching nested scrolling operations to a cooperating parent 
 <code>ViewGroup</code>.
 <p>Classes implementing this interface should create a final instance of a 
 <code>NestedScrollingChildHelper</code> as a field and delegate any View methods to the 
 <code>NestedScrollingChildHelper</code> methods of the same signature.</p>
  
 <p>Views invoking nested scrolling functionality should always do so from the relevant 
 <code>ViewCompat</code>, <code>ViewGroupCompat</code> or <code>ViewParentCompat</code> compatibility
  shim static methods. This ensures interoperability with nested scrolling views on all versions
  of Android.</p>
 */
@protocol ADXNestedScrollingChild2 < ADXNestedScrollingChild, JavaObject >

/*!
 @brief Begin a nestable scroll operation along the given axes, for the given input type.
 <p>A view starting a nested scroll promises to abide by the following contract:</p>
  
 <p>The view will call startNestedScroll upon initiating a scroll operation. In the case
  of a touch scroll type this corresponds to the initial <code>MotionEvent.ACTION_DOWN</code>.
  In the case of touch scrolling the nested scroll will be terminated automatically in
  the same manner as <code>ViewParent.requestDisallowInterceptTouchEvent(boolean)</code>.
  In the event of programmatic scrolling the caller must explicitly call 
 <code>stopNestedScroll(int)</code> to indicate the end of the nested scroll.</p>
  
 <p>If <code>startNestedScroll</code> returns true, a cooperative parent was found.
  If it returns false the caller may ignore the rest of this contract until the next scroll.
  Calling startNestedScroll while a nested scroll is already in progress will return true.</p>
  
 <p>At each incremental step of the scroll the caller should invoke 
 <code>dispatchNestedPreScroll</code>
  once it has calculated the requested scrolling delta. If it returns true the nested scrolling
  parent at least partially consumed the scroll and the caller should adjust the amount it
  scrolls by.</p>
  
 <p>After applying the remainder of the scroll delta the caller should invoke 
 <code>dispatchNestedScroll</code>, passing
  both the delta consumed and the delta unconsumed. A nested scrolling parent may treat
  these values differently. See 
 <code>NestedScrollingParent2.onNestedScroll(View, int, int, int, int, int)</code>.
  </p>
 @param axes Flags consisting of a combination of <code>ViewCompat.SCROLL_AXIS_HORIZONTAL</code>              and/or 
 <code>ViewCompat.SCROLL_AXIS_VERTICAL</code> .
 @param type the type of input which cause this scroll event
 @return true if a cooperative parent was found and nested scrolling has been enabled for
          the current gesture.
 - seealso: #stopNestedScroll(int)
 - seealso: #dispatchNestedPreScroll(int, int, int[], int[], int)
 - seealso: #dispatchNestedScroll(int, int, int, int, int[], int)
 */
- (jboolean)startNestedScrollWithInt:(jint)axes
                             withInt:(jint)type;

/*!
 @brief Stop a nested scroll in progress for the given input type.
 <p>Calling this method when a nested scroll is not currently in progress is harmless.</p>
 @param type the type of input which cause this scroll event
 - seealso: #startNestedScroll(int, int)
 */
- (void)stopNestedScrollWithInt:(jint)type;

/*!
 @brief Returns true if this view has a nested scrolling parent for the given input type.
 <p>The presence of a nested scrolling parent indicates that this view has initiated
  a nested scroll and it was accepted by an ancestor view further up the view hierarchy.</p>
 @param type the type of input which cause this scroll event
 @return whether this view has a nested scrolling parent
 */
- (jboolean)hasNestedScrollingParentWithInt:(jint)type;

/*!
 @brief Dispatch one step of a nested scroll in progress.
 <p>Implementations of views that support nested scrolling should call this to report
  info about a scroll in progress to the current nested scrolling parent. If a nested scroll
  is not currently in progress or nested scrolling is not 
 <code>enabled</code> for this view this method does nothing.</p>
  
 <p>Compatible View implementations should also call 
 <code>dispatchNestedPreScroll</code> before
  consuming a component of the scroll event themselves.</p>
 @param dxConsumed Horizontal distance in pixels consumed by this view during this scroll step
 @param dyConsumed Vertical distance in pixels consumed by this view during this scroll step
 @param dxUnconsumed Horizontal scroll distance in pixels not consumed by this view
 @param dyUnconsumed Horizontal scroll distance in pixels not consumed by this view
 @param offsetInWindow Optional. If not null, on return this will contain the offset                        in local view coordinates of this view from before this operation
                         to after it completes. View implementations may use this to adjust
                         expected input coordinate tracking.
 @param type the type of input which cause this scroll event
 @return true if the event was dispatched, false if it could not be dispatched.
 - seealso: #dispatchNestedPreScroll(int, int, int[], int[], int)
 */
- (jboolean)dispatchNestedScrollWithInt:(jint)dxConsumed
                                withInt:(jint)dyConsumed
                                withInt:(jint)dxUnconsumed
                                withInt:(jint)dyUnconsumed
                           withIntArray:(IOSIntArray *)offsetInWindow
                                withInt:(jint)type;

/*!
 @brief Dispatch one step of a nested scroll in progress before this view consumes any portion of it.
 <p>Nested pre-scroll events are to nested scroll events what touch intercept is to touch. 
 <code>dispatchNestedPreScroll</code> offers an opportunity for the parent view in a nested
  scrolling operation to consume some or all of the scroll operation before the child view
  consumes it.</p>
 @param dx Horizontal scroll distance in pixels
 @param dy Vertical scroll distance in pixels
 @param consumed Output. If not null, consumed[0] will contain the consumed component of dx                  and consumed[1] the consumed dy.
 @param offsetInWindow Optional. If not null, on return this will contain the offset                        in local view coordinates of this view from before this operation
                         to after it completes. View implementations may use this to adjust
                         expected input coordinate tracking.
 @param type the type of input which cause this scroll event
 @return true if the parent consumed some or all of the scroll delta
 - seealso: #dispatchNestedScroll(int, int, int, int, int[], int)
 */
- (jboolean)dispatchNestedPreScrollWithInt:(jint)dx
                                   withInt:(jint)dy
                              withIntArray:(IOSIntArray *)consumed
                              withIntArray:(IOSIntArray *)offsetInWindow
                                   withInt:(jint)type;

@end

J2OBJC_EMPTY_STATIC_INIT(ADXNestedScrollingChild2)

J2OBJC_TYPE_LITERAL_HEADER(ADXNestedScrollingChild2)

#define AndroidxCoreViewNestedScrollingChild2 ADXNestedScrollingChild2

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_NestedScrollingChild2")
