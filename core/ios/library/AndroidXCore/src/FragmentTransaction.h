//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroidX-core\src\main\java\androidx\fragment\app\FragmentTransaction.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_FragmentTransaction")
#ifdef RESTRICT_FragmentTransaction
#define INCLUDE_ALL_FragmentTransaction 0
#else
#define INCLUDE_ALL_FragmentTransaction 1
#endif
#undef RESTRICT_FragmentTransaction

#if !defined (ADXFragmentTransaction_) && (INCLUDE_ALL_FragmentTransaction || defined(INCLUDE_ADXFragmentTransaction))
#define ADXFragmentTransaction_

@protocol ASIFragmentContainer;
@protocol JavaUtilList;

@interface ADXFragmentTransaction : NSObject

#pragma mark Public

- (instancetype)init;

- (void)addWithASIFragmentContainer:(id<ASIFragmentContainer>)fragmentContainer
                       withNSString:(NSString *)name
                       withNSString:(NSString *)layout
                       withNSString:(NSString *)navGraphId
                       withNSString:(NSString *)tag;

- (void)commit;

- (id<JavaUtilList>)getOperations;

- (void)replaceWithASIFragmentContainer:(id<ASIFragmentContainer>)fragmentContainer
                           withNSString:(NSString *)name
                           withNSString:(NSString *)layout
                           withNSString:(NSString *)navGraphId
                           withNSString:(NSString *)tag;

@end

J2OBJC_EMPTY_STATIC_INIT(ADXFragmentTransaction)

FOUNDATION_EXPORT void ADXFragmentTransaction_init(ADXFragmentTransaction *self);

FOUNDATION_EXPORT ADXFragmentTransaction *new_ADXFragmentTransaction_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ADXFragmentTransaction *create_ADXFragmentTransaction_init(void);

J2OBJC_TYPE_LITERAL_HEADER(ADXFragmentTransaction)

@compatibility_alias AndroidxFragmentAppFragmentTransaction ADXFragmentTransaction;

#endif

#if !defined (ADXFragmentTransaction_Ops_) && (INCLUDE_ALL_FragmentTransaction || defined(INCLUDE_ADXFragmentTransaction_Ops))
#define ADXFragmentTransaction_Ops_

@protocol ASIFragmentContainer;

@interface ADXFragmentTransaction_Ops : NSObject {
 @public
  id<ASIFragmentContainer> fragmentContainer_;
  NSString *layout_;
  NSString *navGraphId_;
  NSString *tag_;
  NSString *name_;
  jint type_;
}

#pragma mark Public

- (instancetype)initWithInt:(jint)type
   withASIFragmentContainer:(id<ASIFragmentContainer>)fragmentContainer
               withNSString:(NSString *)name
               withNSString:(NSString *)layout
               withNSString:(NSString *)navGraphId
               withNSString:(NSString *)tag;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ADXFragmentTransaction_Ops)

J2OBJC_FIELD_SETTER(ADXFragmentTransaction_Ops, fragmentContainer_, id<ASIFragmentContainer>)
J2OBJC_FIELD_SETTER(ADXFragmentTransaction_Ops, layout_, NSString *)
J2OBJC_FIELD_SETTER(ADXFragmentTransaction_Ops, navGraphId_, NSString *)
J2OBJC_FIELD_SETTER(ADXFragmentTransaction_Ops, tag_, NSString *)
J2OBJC_FIELD_SETTER(ADXFragmentTransaction_Ops, name_, NSString *)

FOUNDATION_EXPORT void ADXFragmentTransaction_Ops_initWithInt_withASIFragmentContainer_withNSString_withNSString_withNSString_withNSString_(ADXFragmentTransaction_Ops *self, jint type, id<ASIFragmentContainer> fragmentContainer, NSString *name, NSString *layout, NSString *navGraphId, NSString *tag);

FOUNDATION_EXPORT ADXFragmentTransaction_Ops *new_ADXFragmentTransaction_Ops_initWithInt_withASIFragmentContainer_withNSString_withNSString_withNSString_withNSString_(jint type, id<ASIFragmentContainer> fragmentContainer, NSString *name, NSString *layout, NSString *navGraphId, NSString *tag) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ADXFragmentTransaction_Ops *create_ADXFragmentTransaction_Ops_initWithInt_withASIFragmentContainer_withNSString_withNSString_withNSString_withNSString_(jint type, id<ASIFragmentContainer> fragmentContainer, NSString *name, NSString *layout, NSString *navGraphId, NSString *tag);

J2OBJC_TYPE_LITERAL_HEADER(ADXFragmentTransaction_Ops)

#endif

#pragma pop_macro("INCLUDE_ALL_FragmentTransaction")
