//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroidX-core\src\main\java\androidx\core\view\NestedScrollingParent.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_NestedScrollingParent")
#ifdef RESTRICT_NestedScrollingParent
#define INCLUDE_ALL_NestedScrollingParent 0
#else
#define INCLUDE_ALL_NestedScrollingParent 1
#endif
#undef RESTRICT_NestedScrollingParent

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ADXNestedScrollingParent_) && (INCLUDE_ALL_NestedScrollingParent || defined(INCLUDE_ADXNestedScrollingParent))
#define ADXNestedScrollingParent_

@class ADView;
@class IOSIntArray;

/*!
 @brief This interface should be implemented by <code>ViewGroup</code> subclasses
  that wish to support scrolling operations delegated by a nested child view.
 <p>Classes implementing this interface should create a final instance of a 
 <code>NestedScrollingParentHelper</code> as a field and delegate any View or ViewGroup methods
  to the <code>NestedScrollingParentHelper</code> methods of the same signature.</p>
  
 <p>Views invoking nested scrolling functionality should always do so from the relevant 
 <code>ViewCompat</code>, <code>ViewGroupCompat</code> or <code>ViewParentCompat</code> compatibility
  shim static methods. This ensures interoperability with nested scrolling views on Android
  5.0 Lollipop and newer.</p>
 */
@protocol ADXNestedScrollingParent < JavaObject >

/*!
 @brief React to a descendant view initiating a nestable scroll operation, claiming the
  nested scroll operation if appropriate.
 <p>This method will be called in response to a descendant view invoking 
 <code>ViewCompat.startNestedScroll(View, int)</code>. Each parent up the view hierarchy will be
  given an opportunity to respond and claim the nested scrolling operation by returning 
 <code>true</code>.</p>
  
 <p>This method may be overridden by ViewParent implementations to indicate when the view
  is willing to support a nested scrolling operation that is about to begin. If it returns
  true, this ViewParent will become the target view's nested scrolling parent for the duration
  of the scroll operation in progress. When the nested scroll is finished this ViewParent
  will receive a call to <code>onStopNestedScroll(View)</code>.
  </p>
 @param child Direct child of this ViewParent containing target
 @param target View that initiated the nested scroll
 @param axes Flags consisting of <code>ViewCompat.SCROLL_AXIS_HORIZONTAL</code> ,
                           <code>ViewCompat.SCROLL_AXIS_VERTICAL</code>  or both
 @return true if this ViewParent accepts the nested scroll operation
 */
- (jboolean)onStartNestedScrollWithADView:(ADView *)child
                               withADView:(ADView *)target
                                  withInt:(jint)axes;

/*!
 @brief React to the successful claiming of a nested scroll operation.
 <p>This method will be called after 
 <code>onStartNestedScroll</code> returns true. It offers
  an opportunity for the view and its superclasses to perform initial configuration
  for the nested scroll. Implementations of this method should always call their superclass's
  implementation of this method if one is present.</p>
 @param child Direct child of this ViewParent containing target
 @param target View that initiated the nested scroll
 @param axes Flags consisting of <code>ViewCompat.SCROLL_AXIS_HORIZONTAL</code> ,
                           <code>ViewCompat.SCROLL_AXIS_VERTICAL</code>  or both
 - seealso: #onStartNestedScroll(View, View, int)
 - seealso: #onStopNestedScroll(View)
 */
- (void)onNestedScrollAcceptedWithADView:(ADView *)child
                              withADView:(ADView *)target
                                 withInt:(jint)axes;

/*!
 @brief React to a nested scroll operation ending.
 <p>Perform cleanup after a nested scrolling operation.
  This method will be called when a nested scroll stops, for example when a nested touch
  scroll ends with a <code>MotionEvent.ACTION_UP</code> or <code>MotionEvent.ACTION_CANCEL</code> event.
  Implementations of this method should always call their superclass's implementation of this
  method if one is present.</p>
 @param target View that initiated the nested scroll
 */
- (void)onStopNestedScrollWithADView:(ADView *)target;

/*!
 @brief React to a nested scroll in progress.
 <p>This method will be called when the ViewParent's current nested scrolling child view
  dispatches a nested scroll event. To receive calls to this method the ViewParent must have
  previously returned <code>true</code> for a call to 
 <code>onStartNestedScroll(View, View, int)</code>.</p>
  
 <p>Both the consumed and unconsumed portions of the scroll distance are reported to the
  ViewParent. An implementation may choose to use the consumed portion to match or chase scroll
  position of multiple child elements, for example. The unconsumed portion may be used to
  allow continuous dragging of multiple scrolling or draggable elements, such as scrolling
  a list within a vertical drawer where the drawer begins dragging once the edge of inner
  scrolling content is reached.</p>
 @param target The descendent view controlling the nested scroll
 @param dxConsumed Horizontal scroll distance in pixels already consumed by target
 @param dyConsumed Vertical scroll distance in pixels already consumed by target
 @param dxUnconsumed Horizontal scroll distance in pixels not consumed by target
 @param dyUnconsumed Vertical scroll distance in pixels not consumed by target
 */
- (void)onNestedScrollWithADView:(ADView *)target
                         withInt:(jint)dxConsumed
                         withInt:(jint)dyConsumed
                         withInt:(jint)dxUnconsumed
                         withInt:(jint)dyUnconsumed;

/*!
 @brief React to a nested scroll in progress before the target view consumes a portion of the scroll.
 <p>When working with nested scrolling often the parent view may want an opportunity
  to consume the scroll before the nested scrolling child does. An example of this is a
  drawer that contains a scrollable list. The user will want to be able to scroll the list
  fully into view before the list itself begins scrolling.</p>
  
 <p><code>onNestedPreScroll</code> is called when a nested scrolling child invokes 
 <code>View.dispatchNestedPreScroll(int, int, int[], int[])</code>. The implementation should
  report how any pixels of the scroll reported by dx, dy were consumed in the 
 <code>consumed</code> array. Index 0 corresponds to dx and index 1 corresponds to dy.
  This parameter will never be null. Initial values for consumed[0] and consumed[1]
  will always be 0.</p>
 @param target View that initiated the nested scroll
 @param dx Horizontal scroll distance in pixels
 @param dy Vertical scroll distance in pixels
 @param consumed Output. The horizontal and vertical scroll distance consumed by this parent
 */
- (void)onNestedPreScrollWithADView:(ADView *)target
                            withInt:(jint)dx
                            withInt:(jint)dy
                       withIntArray:(IOSIntArray *)consumed;

/*!
 @brief Request a fling from a nested scroll.
 <p>This method signifies that a nested scrolling child has detected suitable conditions
  for a fling. Generally this means that a touch scroll has ended with a 
 <code>velocity</code> in the direction of scrolling that meets or exceeds the 
 <code>minimum fling velocity</code>
  along a scrollable axis.</p>
  
 <p>If a nested scrolling child view would normally fling but it is at the edge of
  its own content, it can use this method to delegate the fling to its nested scrolling
  parent instead. The parent may optionally consume the fling or observe a child fling.</p>
 @param target View that initiated the nested scroll
 @param velocityX Horizontal velocity in pixels per second
 @param velocityY Vertical velocity in pixels per second
 @param consumed true if the child consumed the fling, false otherwise
 @return true if this parent consumed or otherwise reacted to the fling
 */
- (jboolean)onNestedFlingWithADView:(ADView *)target
                          withFloat:(jfloat)velocityX
                          withFloat:(jfloat)velocityY
                        withBoolean:(jboolean)consumed;

/*!
 @brief React to a nested fling before the target view consumes it.
 <p>This method siginfies that a nested scrolling child has detected a fling with the given
  velocity along each axis. Generally this means that a touch scroll has ended with a 
 <code>velocity</code> in the direction of scrolling that meets or exceeds the 
 <code>minimum fling velocity</code>
  along a scrollable axis.</p>
  
 <p>If a nested scrolling parent is consuming motion as part of a 
 <code>pre-scroll</code>, it may be appropriate for
  it to also consume the pre-fling to complete that same motion. By returning 
 <code>true</code> from this method, the parent indicates that the child should not
  fling its own internal content as well.</p>
 @param target View that initiated the nested scroll
 @param velocityX Horizontal velocity in pixels per second
 @param velocityY Vertical velocity in pixels per second
 @return true if this parent consumed the fling ahead of the target view
 */
- (jboolean)onNestedPreFlingWithADView:(ADView *)target
                             withFloat:(jfloat)velocityX
                             withFloat:(jfloat)velocityY;

/*!
 @brief Return the current axes of nested scrolling for this NestedScrollingParent.
 <p>A NestedScrollingParent returning something other than <code>ViewCompat.SCROLL_AXIS_NONE</code>
  is currently acting as a nested scrolling parent for one or more descendant views in
  the hierarchy.</p>
 @return Flags indicating the current axes of nested scrolling
 - seealso: ViewCompat#SCROLL_AXIS_HORIZONTAL
 - seealso: ViewCompat#SCROLL_AXIS_VERTICAL
 - seealso: ViewCompat#SCROLL_AXIS_NONE
 */
- (jint)getNestedScrollAxes;

@end

J2OBJC_EMPTY_STATIC_INIT(ADXNestedScrollingParent)

J2OBJC_TYPE_LITERAL_HEADER(ADXNestedScrollingParent)

#define AndroidxCoreViewNestedScrollingParent ADXNestedScrollingParent

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_NestedScrollingParent")
