//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroidX-core\src\main\java\androidx\appcompat\view\menu\MenuBuilder.java
//

#define J2OBJC_IMPORTED_BY_JAVA_IMPLEMENTATION 1




#include "Context.h"
#include "Drawable.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "MenuBuilder.h"
#include "MenuItem.h"
#include "MenuItemImpl.h"
#include "MenuPresenter.h"
#include "Resources.h"
#include "SubMenu.h"
#include "SubMenuBuilder.h"
#include "View.h"
#include "java/lang/Boolean.h"
#include "java/lang/CharSequence.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/ref/WeakReference.h"
#include "java/util/ArrayList.h"
#include "java/util/concurrent/CopyOnWriteArrayList.h"




#pragma clang diagnostic error "-Wreturn-type"
#pragma clang diagnostic ignored "-Wswitch"


@interface ADXMenuBuilder () {
 @public
  ADContext *mContext_;
  ADResources *mResources_;
  bool mQwertyMode_;
  bool mShortcutsVisible_;
  id<ADXMenuBuilder_Callback> mCallback_;
  JavaUtilArrayList *mItems_;
  JavaUtilArrayList *mVisibleItems_;
  bool mIsVisibleItemsStale_;
  JavaUtilArrayList *mActionItems_;
  JavaUtilArrayList *mNonActionItems_;
  bool mIsActionItemsStale_;
  int32_t mDefaultShowAsAction_;
  bool mPreventDispatchingItemsChanged_;
  bool mItemsChangedWhileDispatchPrevented_;
  bool mStructureChangedWhileDispatchPrevented_;
  bool mOptionalIconsVisible_;
  bool mIsClosing_;
  JavaUtilConcurrentCopyOnWriteArrayList *mPresenters_;
  ADXMenuItemImpl *mExpandedItem_;
  bool mGroupDividerEnabled_;
  bool mOverrideVisibleItems_;
}

- (void)dispatchPresenterUpdateWithBoolean:(bool)cleared;

- (ADXMenuItemImpl *)createNewMenuItemWithInt:(int32_t)group
                                      withInt:(int32_t)id_
                                      withInt:(int32_t)categoryOrder
                                      withInt:(int32_t)ordering
                     withJavaLangCharSequence:(id<JavaLangCharSequence>)title
                                      withInt:(int32_t)defaultShowAsAction;

+ (int32_t)getOrderingWithInt:(int32_t)categoryOrder;

+ (int32_t)findInsertIndexWithJavaUtilArrayList:(JavaUtilArrayList *)items
                                        withInt:(int32_t)ordering;

- (void)setHeaderInternalWithInt:(int32_t)titleRes
        withJavaLangCharSequence:(id<JavaLangCharSequence>)title
                         withInt:(int32_t)iconRes
                  withADDrawable:(ADDrawable *)icon
                      withADView:(ADView *)view;

- (void)collapseItemActionViewWithADMenuItem:(id<ADMenuItem>)mExpandedItem;

@end

J2OBJC_FIELD_SETTER(ADXMenuBuilder, mContext_, ADContext *)
J2OBJC_FIELD_SETTER(ADXMenuBuilder, mResources_, ADResources *)
J2OBJC_FIELD_SETTER(ADXMenuBuilder, mCallback_, id<ADXMenuBuilder_Callback>)
J2OBJC_FIELD_SETTER(ADXMenuBuilder, mItems_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(ADXMenuBuilder, mVisibleItems_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(ADXMenuBuilder, mActionItems_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(ADXMenuBuilder, mNonActionItems_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(ADXMenuBuilder, mPresenters_, JavaUtilConcurrentCopyOnWriteArrayList *)
J2OBJC_FIELD_SETTER(ADXMenuBuilder, mExpandedItem_, ADXMenuItemImpl *)

inline IOSIntArray *ADXMenuBuilder_get_sCategoryToOrder(void);
static IOSIntArray *ADXMenuBuilder_sCategoryToOrder;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXMenuBuilder, sCategoryToOrder, IOSIntArray *)

__attribute__((unused)) static void ADXMenuBuilder_dispatchPresenterUpdateWithBoolean_(ADXMenuBuilder *self, bool cleared);

__attribute__((unused)) static ADXMenuItemImpl *ADXMenuBuilder_createNewMenuItemWithInt_withInt_withInt_withInt_withJavaLangCharSequence_withInt_(ADXMenuBuilder *self, int32_t group, int32_t id_, int32_t categoryOrder, int32_t ordering, id<JavaLangCharSequence> title, int32_t defaultShowAsAction);

__attribute__((unused)) static int32_t ADXMenuBuilder_getOrderingWithInt_(int32_t categoryOrder);

__attribute__((unused)) static int32_t ADXMenuBuilder_findInsertIndexWithJavaUtilArrayList_withInt_(JavaUtilArrayList *items, int32_t ordering);

__attribute__((unused)) static void ADXMenuBuilder_setHeaderInternalWithInt_withJavaLangCharSequence_withInt_withADDrawable_withADView_(ADXMenuBuilder *self, int32_t titleRes, id<JavaLangCharSequence> title, int32_t iconRes, ADDrawable *icon, ADView *view);

__attribute__((unused)) static void ADXMenuBuilder_collapseItemActionViewWithADMenuItem_(ADXMenuBuilder *self, id<ADMenuItem> mExpandedItem);

@interface ADXMenuBuilder_Callback : NSObject

@end

@interface ADXMenuBuilder_SupportMenuItem : NSObject

@end

J2OBJC_INITIALIZED_DEFN(ADXMenuBuilder)

@implementation ADXMenuBuilder

- (void)addMenuPresenterWithADXMenuPresenter:(id<ADXMenuPresenter>)presenter {
  [self addMenuPresenterWithADXMenuPresenter:presenter withADContext:mContext_];
}

- (void)addMenuPresenterWithADXMenuPresenter:(id<ADXMenuPresenter>)presenter
                               withADContext:(ADContext *)menuContext {
  [((JavaUtilConcurrentCopyOnWriteArrayList *) nil_chk(mPresenters_)) addWithId:create_JavaLangRefWeakReference_initWithId_(presenter)];
  [((id<ADXMenuPresenter>) nil_chk(presenter)) initForMenuWithADContext:menuContext withADXMenuBuilder:self];
  mIsActionItemsStale_ = true;
}

- (void)dispatchPresenterUpdateWithBoolean:(bool)cleared {
  ADXMenuBuilder_dispatchPresenterUpdateWithBoolean_(self, cleared);
}

- (void)setCallbackWithADXMenuBuilder_Callback:(id<ADXMenuBuilder_Callback>)cb {
  JreStrongAssign(&mCallback_, cb);
}

- (id<ADMenuItem>)addInternalWithInt:(int32_t)group
                             withInt:(int32_t)id_
                             withInt:(int32_t)categoryOrder
            withJavaLangCharSequence:(id<JavaLangCharSequence>)title {
  int32_t ordering = ADXMenuBuilder_getOrderingWithInt_(categoryOrder);
  ADXMenuItemImpl *item = ADXMenuBuilder_createNewMenuItemWithInt_withInt_withInt_withInt_withJavaLangCharSequence_withInt_(self, group, id_, categoryOrder, ordering, title, mDefaultShowAsAction_);
  [((JavaUtilArrayList *) nil_chk(mItems_)) addWithInt:ADXMenuBuilder_findInsertIndexWithJavaUtilArrayList_withInt_(mItems_, ordering) withId:item];
  [self onItemsChangedWithBoolean:true];
  return item;
}

- (ADXMenuItemImpl *)createNewMenuItemWithInt:(int32_t)group
                                      withInt:(int32_t)id_
                                      withInt:(int32_t)categoryOrder
                                      withInt:(int32_t)ordering
                     withJavaLangCharSequence:(id<JavaLangCharSequence>)title
                                      withInt:(int32_t)defaultShowAsAction {
  return ADXMenuBuilder_createNewMenuItemWithInt_withInt_withInt_withInt_withJavaLangCharSequence_withInt_(self, group, id_, categoryOrder, ordering, title, defaultShowAsAction);
}

- (id<ADMenuItem>)addWithJavaLangCharSequence:(id<JavaLangCharSequence>)title {
  return [self addInternalWithInt:0 withInt:0 withInt:0 withJavaLangCharSequence:title];
}

- (id<ADMenuItem>)addWithInt:(int32_t)titleRes {
  return [self addInternalWithInt:0 withInt:0 withInt:0 withJavaLangCharSequence:[((ADResources *) nil_chk(mResources_)) getStringWithInt:titleRes]];
}

- (id<ADMenuItem>)addWithInt:(int32_t)group
                     withInt:(int32_t)id_
                     withInt:(int32_t)categoryOrder
    withJavaLangCharSequence:(id<JavaLangCharSequence>)title {
  return [self addInternalWithInt:group withInt:id_ withInt:categoryOrder withJavaLangCharSequence:title];
}

- (id<ADMenuItem>)addWithInt:(int32_t)group
                     withInt:(int32_t)id_
                     withInt:(int32_t)categoryOrder
                     withInt:(int32_t)title {
  return [self addInternalWithInt:group withInt:id_ withInt:categoryOrder withJavaLangCharSequence:[((ADResources *) nil_chk(mResources_)) getStringWithInt:title]];
}

- (id<ADSubMenu>)addSubMenuWithJavaLangCharSequence:(id<JavaLangCharSequence>)title {
  return [self addSubMenuWithInt:0 withInt:0 withInt:0 withJavaLangCharSequence:title];
}

- (id<ADSubMenu>)addSubMenuWithInt:(int32_t)titleRes {
  return [self addSubMenuWithInt:0 withInt:0 withInt:0 withJavaLangCharSequence:[((ADResources *) nil_chk(mResources_)) getStringWithInt:titleRes]];
}

- (id<ADSubMenu>)addSubMenuWithInt:(int32_t)group
                           withInt:(int32_t)id_
                           withInt:(int32_t)categoryOrder
          withJavaLangCharSequence:(id<JavaLangCharSequence>)title {
  ADXMenuItemImpl *item = (ADXMenuItemImpl *) cast_chk([self addInternalWithInt:group withInt:id_ withInt:categoryOrder withJavaLangCharSequence:title], [ADXMenuItemImpl class]);
  ADXSubMenuBuilder *subMenu = create_ADXSubMenuBuilder_initWithADContext_withADXMenuBuilder_withADXMenuItemImpl_(mContext_, self, item);
  [((ADXMenuItemImpl *) nil_chk(item)) setSubMenuWithADXSubMenuBuilder:subMenu];
  return subMenu;
}

- (id<ADSubMenu>)addSubMenuWithInt:(int32_t)group
                           withInt:(int32_t)id_
                           withInt:(int32_t)categoryOrder
                           withInt:(int32_t)title {
  return [self addSubMenuWithInt:group withInt:id_ withInt:categoryOrder withJavaLangCharSequence:[((ADResources *) nil_chk(mResources_)) getStringWithInt:title]];
}

- (void)clearAll {
  mPreventDispatchingItemsChanged_ = true;
  [self clear];
  [self clearHeader];
  [((JavaUtilConcurrentCopyOnWriteArrayList *) nil_chk(mPresenters_)) clear];
  mPreventDispatchingItemsChanged_ = false;
  mItemsChangedWhileDispatchPrevented_ = false;
  mStructureChangedWhileDispatchPrevented_ = false;
  [self onItemsChangedWithBoolean:true];
}

- (void)clear {
  if (mExpandedItem_ != nil) {
    ADXMenuBuilder_collapseItemActionViewWithADMenuItem_(self, mExpandedItem_);
  }
  [((JavaUtilArrayList *) nil_chk(mItems_)) clear];
  [self onItemsChangedWithBoolean:true];
}

- (void)setExclusiveItemCheckedWithADMenuItem:(id<ADMenuItem>)item {
  int32_t group = [((id<ADMenuItem>) nil_chk(item)) getGroupId];
  int32_t N = [((JavaUtilArrayList *) nil_chk(mItems_)) size];
  [self stopDispatchingItemsChanged];
  for (int32_t i = 0; i < N; i++) {
    ADXMenuItemImpl *curItem = JreRetainedLocalValue([((JavaUtilArrayList *) nil_chk(mItems_)) getWithInt:i]);
    if ([((ADXMenuItemImpl *) nil_chk(curItem)) getGroupId] == group) {
      if (![curItem isExclusiveCheckable]) continue;
      if (![curItem isCheckable]) continue;
      [curItem setCheckedIntWithBoolean:JreObjectEqualsEquals(curItem, item)];
    }
  }
  [self startDispatchingItemsChanged];
}

- (bool)hasVisibleItems {
  if (mOverrideVisibleItems_) {
    return true;
  }
  int32_t size = [self size];
  for (int32_t i = 0; i < size; i++) {
    ADXMenuItemImpl *item = JreRetainedLocalValue([((JavaUtilArrayList *) nil_chk(mItems_)) getWithInt:i]);
    if ([((ADXMenuItemImpl *) nil_chk(item)) isVisible]) {
      return true;
    }
  }
  return false;
}

- (id<ADMenuItem>)findItemWithInt:(int32_t)id_ {
  int32_t size = [self size];
  for (int32_t i = 0; i < size; i++) {
    ADXMenuItemImpl *item = JreRetainedLocalValue([((JavaUtilArrayList *) nil_chk(mItems_)) getWithInt:i]);
    if ([((ADXMenuItemImpl *) nil_chk(item)) getItemId] == id_) {
      return item;
    }
    else if ([item hasSubMenu]) {
      id<ADMenuItem> possibleItem = JreRetainedLocalValue([((ADXSubMenuBuilder *) nil_chk([item getSubMenu])) findItemWithInt:id_]);
      if (possibleItem != nil) {
        return possibleItem;
      }
    }
  }
  return nil;
}

- (int32_t)size {
  return [((JavaUtilArrayList *) nil_chk(mItems_)) size];
}

- (id<ADMenuItem>)getItemWithInt:(int32_t)index {
  return [((JavaUtilArrayList *) nil_chk(mItems_)) getWithInt:index];
}

+ (int32_t)getOrderingWithInt:(int32_t)categoryOrder {
  return ADXMenuBuilder_getOrderingWithInt_(categoryOrder);
}

- (bool)dispatchMenuItemSelectedWithADXMenuBuilder:(ADXMenuBuilder *)menu
                                    withADMenuItem:(id<ADMenuItem>)item {
  return mCallback_ != nil && [mCallback_ onMenuItemSelectedWithADXMenuBuilder:menu withADMenuItem:item];
}

+ (int32_t)findInsertIndexWithJavaUtilArrayList:(JavaUtilArrayList *)items
                                        withInt:(int32_t)ordering {
  return ADXMenuBuilder_findInsertIndexWithJavaUtilArrayList_withInt_(items, ordering);
}

- (void)onItemsChangedWithBoolean:(bool)structureChanged {
  if (!mPreventDispatchingItemsChanged_) {
    if (structureChanged) {
      mIsVisibleItemsStale_ = true;
      mIsActionItemsStale_ = true;
    }
    ADXMenuBuilder_dispatchPresenterUpdateWithBoolean_(self, structureChanged);
  }
  else {
    mItemsChangedWhileDispatchPrevented_ = true;
    if (structureChanged) {
      mStructureChangedWhileDispatchPrevented_ = true;
    }
  }
}

- (void)stopDispatchingItemsChanged {
  if (!mPreventDispatchingItemsChanged_) {
    mPreventDispatchingItemsChanged_ = true;
    mItemsChangedWhileDispatchPrevented_ = false;
    mStructureChangedWhileDispatchPrevented_ = false;
  }
}

- (void)startDispatchingItemsChanged {
  mPreventDispatchingItemsChanged_ = false;
  if (mItemsChangedWhileDispatchPrevented_) {
    mItemsChangedWhileDispatchPrevented_ = false;
    [self onItemsChangedWithBoolean:mStructureChangedWhileDispatchPrevented_];
  }
}

- (void)onItemVisibleChangedWithADXMenuItemImpl:(ADXMenuItemImpl *)item {
  mIsVisibleItemsStale_ = true;
  [self onItemsChangedWithBoolean:true];
}

- (void)onItemActionRequestChangedWithADXMenuItemImpl:(ADXMenuItemImpl *)item {
  mIsActionItemsStale_ = true;
  [self onItemsChangedWithBoolean:true];
}

- (JavaUtilArrayList *)getVisibleItems {
  if (!mIsVisibleItemsStale_) return mVisibleItems_;
  [((JavaUtilArrayList *) nil_chk(mVisibleItems_)) clear];
  int32_t itemsSize = [((JavaUtilArrayList *) nil_chk(mItems_)) size];
  ADXMenuItemImpl *item;
  for (int32_t i = 0; i < itemsSize; i++) {
    item = [((JavaUtilArrayList *) nil_chk(mItems_)) getWithInt:i];
    if ([((ADXMenuItemImpl *) nil_chk(item)) isVisible]) [((JavaUtilArrayList *) nil_chk(mVisibleItems_)) addWithId:item];
  }
  mIsVisibleItemsStale_ = false;
  mIsActionItemsStale_ = true;
  return mVisibleItems_;
}

- (void)flagActionItems {
  JavaUtilArrayList *visibleItems = [self getVisibleItems];
  if (!mIsActionItemsStale_) {
    return;
  }
  bool flagged = false;
  for (JavaLangRefWeakReference * __strong ref in nil_chk(mPresenters_)) {
    id<ADXMenuPresenter> presenter = [((JavaLangRefWeakReference *) nil_chk(ref)) get];
    if (presenter == nil) {
      [((JavaUtilConcurrentCopyOnWriteArrayList *) nil_chk(mPresenters_)) removeWithId:ref];
    }
    else {
      flagged |= [presenter flagActionItems];
    }
  }
  if (flagged) {
    [((JavaUtilArrayList *) nil_chk(mActionItems_)) clear];
    [((JavaUtilArrayList *) nil_chk(mNonActionItems_)) clear];
    int32_t itemsSize = [((JavaUtilArrayList *) nil_chk(visibleItems)) size];
    for (int32_t i = 0; i < itemsSize; i++) {
      ADXMenuItemImpl *item = JreRetainedLocalValue([visibleItems getWithInt:i]);
      if ([((ADXMenuItemImpl *) nil_chk(item)) isActionButton]) {
        [((JavaUtilArrayList *) nil_chk(mActionItems_)) addWithId:item];
      }
      else {
        [((JavaUtilArrayList *) nil_chk(mNonActionItems_)) addWithId:item];
      }
    }
  }
  else {
    [((JavaUtilArrayList *) nil_chk(mActionItems_)) clear];
    [((JavaUtilArrayList *) nil_chk(mNonActionItems_)) clear];
    [((JavaUtilArrayList *) nil_chk(mNonActionItems_)) addAllWithJavaUtilCollection:[self getVisibleItems]];
  }
  mIsActionItemsStale_ = false;
}

- (JavaUtilArrayList *)getActionItems {
  [self flagActionItems];
  return mActionItems_;
}

- (JavaUtilArrayList *)getNonActionItems {
  [self flagActionItems];
  return mNonActionItems_;
}

- (void)clearHeader {
  JreStrongAssign(&mHeaderIcon_, nil);
  JreStrongAssign(&mHeaderTitle_, nil);
  JreStrongAssign(&mHeaderView_, nil);
  [self onItemsChangedWithBoolean:false];
}

- (void)setHeaderInternalWithInt:(int32_t)titleRes
        withJavaLangCharSequence:(id<JavaLangCharSequence>)title
                         withInt:(int32_t)iconRes
                  withADDrawable:(ADDrawable *)icon
                      withADView:(ADView *)view {
  ADXMenuBuilder_setHeaderInternalWithInt_withJavaLangCharSequence_withInt_withADDrawable_withADView_(self, titleRes, title, iconRes, icon, view);
}

- (ADXMenuBuilder *)setHeaderTitleIntWithJavaLangCharSequence:(id<JavaLangCharSequence>)title {
  ADXMenuBuilder_setHeaderInternalWithInt_withJavaLangCharSequence_withInt_withADDrawable_withADView_(self, 0, title, 0, nil, nil);
  return self;
}

- (ADXMenuBuilder *)setHeaderTitleIntWithInt:(int32_t)titleRes {
  ADXMenuBuilder_setHeaderInternalWithInt_withJavaLangCharSequence_withInt_withADDrawable_withADView_(self, titleRes, nil, 0, nil, nil);
  return self;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADXMenuBuilder_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)collapseItemActionViewWithADMenuItem:(id<ADMenuItem>)mExpandedItem {
  ADXMenuBuilder_collapseItemActionViewWithADMenuItem_(self, mExpandedItem);
}

- (void)setActionMenuPresenterWithADXMenuPresenter:(id<ADXMenuPresenter>)mPresenter {
  [((JavaUtilConcurrentCopyOnWriteArrayList *) nil_chk(mPresenters_)) addWithId:create_JavaLangRefWeakReference_initWithId_(mPresenter)];
}

- (bool)performItemActionWithADMenuItem:(id<ADMenuItem>)item
                   withADXMenuPresenter:(id<ADXMenuPresenter>)presenter
                                withInt:(int32_t)i {
  ADXMenuItemImpl *itemImpl = (ADXMenuItemImpl *) cast_chk(item, [ADXMenuItemImpl class]);
  if (itemImpl == nil || ![itemImpl isEnabled]) {
    return false;
  }
  bool invoked = [itemImpl invoke];
  return invoked;
}

- (void)dealloc {
  RELEASE_(mContext_);
  RELEASE_(mResources_);
  RELEASE_(mCallback_);
  RELEASE_(mItems_);
  RELEASE_(mVisibleItems_);
  RELEASE_(mActionItems_);
  RELEASE_(mNonActionItems_);
  RELEASE_(mHeaderTitle_);
  RELEASE_(mHeaderIcon_);
  RELEASE_(mHeaderView_);
  RELEASE_(mPresenters_);
  RELEASE_(mExpandedItem_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "LADMenuItem;", 0x4, 7, 8, -1, -1, -1, -1 },
    { NULL, "LADXMenuItemImpl;", 0x2, 9, 10, -1, -1, -1, -1 },
    { NULL, "LADMenuItem;", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "LADMenuItem;", 0x1, 11, 13, -1, -1, -1, -1 },
    { NULL, "LADMenuItem;", 0x1, 11, 8, -1, -1, -1, -1 },
    { NULL, "LADMenuItem;", 0x1, 11, 14, -1, -1, -1, -1 },
    { NULL, "LADSubMenu;", 0x1, 15, 12, -1, -1, -1, -1 },
    { NULL, "LADSubMenu;", 0x1, 15, 13, -1, -1, -1, -1 },
    { NULL, "LADSubMenu;", 0x1, 15, 8, -1, -1, -1, -1 },
    { NULL, "LADSubMenu;", 0x1, 15, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 16, 17, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADMenuItem;", 0x1, 18, 13, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADMenuItem;", 0x1, 19, 13, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 20, 13, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 21, 22, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 23, 24, -1, 25, -1, -1 },
    { NULL, "V", 0x1, 26, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 27, 28, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 29, 28, -1, -1, -1, -1 },
    { NULL, "LJavaUtilArrayList;", 0x1, -1, -1, -1, 30, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilArrayList;", 0x1, -1, -1, -1, 30, -1, -1 },
    { NULL, "LJavaUtilArrayList;", 0x1, -1, -1, -1, 30, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 31, 32, -1, -1, -1, -1 },
    { NULL, "LADXMenuBuilder;", 0x4, 33, 12, -1, -1, -1, -1 },
    { NULL, "LADXMenuBuilder;", 0x4, 33, 13, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 34, 17, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 35, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 36, 37, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(addMenuPresenterWithADXMenuPresenter:);
  methods[1].selector = @selector(addMenuPresenterWithADXMenuPresenter:withADContext:);
  methods[2].selector = @selector(dispatchPresenterUpdateWithBoolean:);
  methods[3].selector = @selector(setCallbackWithADXMenuBuilder_Callback:);
  methods[4].selector = @selector(addInternalWithInt:withInt:withInt:withJavaLangCharSequence:);
  methods[5].selector = @selector(createNewMenuItemWithInt:withInt:withInt:withInt:withJavaLangCharSequence:withInt:);
  methods[6].selector = @selector(addWithJavaLangCharSequence:);
  methods[7].selector = @selector(addWithInt:);
  methods[8].selector = @selector(addWithInt:withInt:withInt:withJavaLangCharSequence:);
  methods[9].selector = @selector(addWithInt:withInt:withInt:withInt:);
  methods[10].selector = @selector(addSubMenuWithJavaLangCharSequence:);
  methods[11].selector = @selector(addSubMenuWithInt:);
  methods[12].selector = @selector(addSubMenuWithInt:withInt:withInt:withJavaLangCharSequence:);
  methods[13].selector = @selector(addSubMenuWithInt:withInt:withInt:withInt:);
  methods[14].selector = @selector(clearAll);
  methods[15].selector = @selector(clear);
  methods[16].selector = @selector(setExclusiveItemCheckedWithADMenuItem:);
  methods[17].selector = @selector(hasVisibleItems);
  methods[18].selector = @selector(findItemWithInt:);
  methods[19].selector = @selector(size);
  methods[20].selector = @selector(getItemWithInt:);
  methods[21].selector = @selector(getOrderingWithInt:);
  methods[22].selector = @selector(dispatchMenuItemSelectedWithADXMenuBuilder:withADMenuItem:);
  methods[23].selector = @selector(findInsertIndexWithJavaUtilArrayList:withInt:);
  methods[24].selector = @selector(onItemsChangedWithBoolean:);
  methods[25].selector = @selector(stopDispatchingItemsChanged);
  methods[26].selector = @selector(startDispatchingItemsChanged);
  methods[27].selector = @selector(onItemVisibleChangedWithADXMenuItemImpl:);
  methods[28].selector = @selector(onItemActionRequestChangedWithADXMenuItemImpl:);
  methods[29].selector = @selector(getVisibleItems);
  methods[30].selector = @selector(flagActionItems);
  methods[31].selector = @selector(getActionItems);
  methods[32].selector = @selector(getNonActionItems);
  methods[33].selector = @selector(clearHeader);
  methods[34].selector = @selector(setHeaderInternalWithInt:withJavaLangCharSequence:withInt:withADDrawable:withADView:);
  methods[35].selector = @selector(setHeaderTitleIntWithJavaLangCharSequence:);
  methods[36].selector = @selector(setHeaderTitleIntWithInt:);
  methods[37].selector = @selector(init);
  methods[38].selector = @selector(collapseItemActionViewWithADMenuItem:);
  methods[39].selector = @selector(setActionMenuPresenterWithADXMenuPresenter:);
  methods[40].selector = @selector(performItemActionWithADMenuItem:withADXMenuPresenter:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "sCategoryToOrder", "[I", .constantValue.asLong = 0, 0x1a, -1, 38, -1, -1 },
    { "mContext_", "LADContext;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mResources_", "LADResources;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mQwertyMode_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mShortcutsVisible_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mCallback_", "LADXMenuBuilder_Callback;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mItems_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x2, -1, -1, 39, -1 },
    { "mVisibleItems_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x2, -1, -1, 39, -1 },
    { "mIsVisibleItemsStale_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mActionItems_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x2, -1, -1, 39, -1 },
    { "mNonActionItems_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x2, -1, -1, 39, -1 },
    { "mIsActionItemsStale_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mDefaultShowAsAction_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mHeaderTitle_", "LJavaLangCharSequence;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mHeaderIcon_", "LADDrawable;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mHeaderView_", "LADView;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mPreventDispatchingItemsChanged_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mItemsChangedWhileDispatchPrevented_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mStructureChangedWhileDispatchPrevented_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mOptionalIconsVisible_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mIsClosing_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mPresenters_", "LJavaUtilConcurrentCopyOnWriteArrayList;", .constantValue.asLong = 0, 0x2, -1, -1, 40, -1 },
    { "mExpandedItem_", "LADXMenuItemImpl;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mGroupDividerEnabled_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mOverrideVisibleItems_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "USER_MASK", "I", .constantValue.asInt = ADXMenuBuilder_USER_MASK, 0x18, -1, -1, -1, -1 },
    { "USER_SHIFT", "I", .constantValue.asInt = ADXMenuBuilder_USER_SHIFT, 0x18, -1, -1, -1, -1 },
    { "CATEGORY_MASK", "I", .constantValue.asInt = ADXMenuBuilder_CATEGORY_MASK, 0x18, -1, -1, -1, -1 },
    { "CATEGORY_SHIFT", "I", .constantValue.asInt = ADXMenuBuilder_CATEGORY_SHIFT, 0x18, -1, -1, -1, -1 },
    { "SUPPORTED_MODIFIERS_MASK", "I", .constantValue.asInt = ADXMenuBuilder_SUPPORTED_MODIFIERS_MASK, 0x18, -1, -1, -1, -1 },
    { "FLAG_KEEP_OPEN_ON_SUBMENU_OPENED", "I", .constantValue.asInt = ADXMenuBuilder_FLAG_KEEP_OPEN_ON_SUBMENU_OPENED, 0x18, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "addMenuPresenter", "LADXMenuPresenter;", "LADXMenuPresenter;LADContext;", "dispatchPresenterUpdate", "Z", "setCallback", "LADXMenuBuilder_Callback;", "addInternal", "IIILJavaLangCharSequence;", "createNewMenuItem", "IIIILJavaLangCharSequence;I", "add", "LJavaLangCharSequence;", "I", "IIII", "addSubMenu", "setExclusiveItemChecked", "LADMenuItem;", "findItem", "getItem", "getOrdering", "dispatchMenuItemSelected", "LADXMenuBuilder;LADMenuItem;", "findInsertIndex", "LJavaUtilArrayList;I", "(Ljava/util/ArrayList<Landroidx/appcompat/view/menu/MenuItemImpl;>;I)I", "onItemsChanged", "onItemVisibleChanged", "LADXMenuItemImpl;", "onItemActionRequestChanged", "()Ljava/util/ArrayList<Landroidx/appcompat/view/menu/MenuItemImpl;>;", "setHeaderInternal", "ILJavaLangCharSequence;ILADDrawable;LADView;", "setHeaderTitleInt", "collapseItemActionView", "setActionMenuPresenter", "performItemAction", "LADMenuItem;LADXMenuPresenter;I", &ADXMenuBuilder_sCategoryToOrder, "Ljava/util/ArrayList<Landroidx/appcompat/view/menu/MenuItemImpl;>;", "Ljava/util/concurrent/CopyOnWriteArrayList<Ljava/lang/ref/WeakReference<Landroidx/appcompat/view/menu/MenuPresenter;>;>;", "LADXMenuBuilder_Callback;LADXMenuBuilder_SupportMenuItem;LADXMenuBuilder_ContextMenu;" };
  static const J2ObjcClassInfo _ADXMenuBuilder = { "MenuBuilder", "androidx.appcompat.view.menu", ptrTable, methods, fields, 7, 0x1, 41, 31, -1, 41, -1, -1, -1 };
  return &_ADXMenuBuilder;
}

+ (void)initialize {
  if (self == [ADXMenuBuilder class]) {
    JreStrongAssignAndConsume(&ADXMenuBuilder_sCategoryToOrder, [IOSIntArray newArrayWithInts:(int32_t[]){ 1, 4, 5, 3, 2, 0 } count:6]);
    J2OBJC_SET_INITIALIZED(ADXMenuBuilder)
  }
}

@end

void ADXMenuBuilder_dispatchPresenterUpdateWithBoolean_(ADXMenuBuilder *self, bool cleared) {
  if ([((JavaUtilConcurrentCopyOnWriteArrayList *) nil_chk(self->mPresenters_)) isEmpty]) return;
  [self stopDispatchingItemsChanged];
  for (JavaLangRefWeakReference * __strong ref in nil_chk(self->mPresenters_)) {
    id<ADXMenuPresenter> presenter = [((JavaLangRefWeakReference *) nil_chk(ref)) get];
    if (presenter == nil) {
      [((JavaUtilConcurrentCopyOnWriteArrayList *) nil_chk(self->mPresenters_)) removeWithId:ref];
    }
    else {
      [presenter updateMenuViewWithBoolean:cleared];
    }
  }
  [self startDispatchingItemsChanged];
}

ADXMenuItemImpl *ADXMenuBuilder_createNewMenuItemWithInt_withInt_withInt_withInt_withJavaLangCharSequence_withInt_(ADXMenuBuilder *self, int32_t group, int32_t id_, int32_t categoryOrder, int32_t ordering, id<JavaLangCharSequence> title, int32_t defaultShowAsAction) {
  return create_ADXMenuItemImpl_initWithADXMenuBuilder_withInt_withInt_withInt_withInt_withJavaLangCharSequence_withInt_(self, group, id_, categoryOrder, ordering, title, defaultShowAsAction);
}

int32_t ADXMenuBuilder_getOrderingWithInt_(int32_t categoryOrder) {
  ADXMenuBuilder_initialize();
  int32_t index = JreRShift32((categoryOrder & ADXMenuBuilder_CATEGORY_MASK), ADXMenuBuilder_CATEGORY_SHIFT);
  if (index < 0 || index >= ((IOSIntArray *) nil_chk(ADXMenuBuilder_sCategoryToOrder))->size_) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"order does not contain a valid category.");
  }
  return (JreLShift32(IOSIntArray_Get(nil_chk(ADXMenuBuilder_sCategoryToOrder), index), ADXMenuBuilder_CATEGORY_SHIFT)) | (categoryOrder & ADXMenuBuilder_USER_MASK);
}

int32_t ADXMenuBuilder_findInsertIndexWithJavaUtilArrayList_withInt_(JavaUtilArrayList *items, int32_t ordering) {
  ADXMenuBuilder_initialize();
  for (int32_t i = [((JavaUtilArrayList *) nil_chk(items)) size] - 1; i >= 0; i--) {
    ADXMenuItemImpl *item = JreRetainedLocalValue([items getWithInt:i]);
    if ([((ADXMenuItemImpl *) nil_chk(item)) getOrdering] <= ordering) {
      return i + 1;
    }
  }
  return 0;
}

void ADXMenuBuilder_setHeaderInternalWithInt_withJavaLangCharSequence_withInt_withADDrawable_withADView_(ADXMenuBuilder *self, int32_t titleRes, id<JavaLangCharSequence> title, int32_t iconRes, ADDrawable *icon, ADView *view) {
  if (view != nil) {
    JreStrongAssign(&self->mHeaderView_, view);
    JreStrongAssign(&self->mHeaderTitle_, nil);
    JreStrongAssign(&self->mHeaderIcon_, nil);
  }
  else {
    if (titleRes > 0) {
    }
    else if (title != nil) {
      JreStrongAssign(&self->mHeaderTitle_, title);
    }
    if (iconRes > 0) {
    }
    else if (icon != nil) {
      JreStrongAssign(&self->mHeaderIcon_, icon);
    }
    JreStrongAssign(&self->mHeaderView_, nil);
  }
  [self onItemsChangedWithBoolean:false];
}

void ADXMenuBuilder_init(ADXMenuBuilder *self) {
  NSObject_init(self);
  self->mDefaultShowAsAction_ = ADMenuItem_SHOW_AS_ACTION_NEVER;
  self->mPreventDispatchingItemsChanged_ = false;
  self->mItemsChangedWhileDispatchPrevented_ = false;
  self->mStructureChangedWhileDispatchPrevented_ = false;
  self->mOptionalIconsVisible_ = false;
  self->mIsClosing_ = false;
  JreStrongAssignAndConsume(&self->mPresenters_, new_JavaUtilConcurrentCopyOnWriteArrayList_init());
  self->mGroupDividerEnabled_ = false;
  JreStrongAssign(&self->mResources_, nil);
  JreStrongAssignAndConsume(&self->mItems_, new_JavaUtilArrayList_init());
  JreStrongAssignAndConsume(&self->mVisibleItems_, new_JavaUtilArrayList_init());
  JreStrongAssignAndConsume(&self->mActionItems_, new_JavaUtilArrayList_init());
  JreStrongAssignAndConsume(&self->mNonActionItems_, new_JavaUtilArrayList_init());
  self->mIsVisibleItemsStale_ = true;
  JreStrongAssign(&self->mContext_, nil);
}

ADXMenuBuilder *new_ADXMenuBuilder_init() {
  J2OBJC_NEW_IMPL(ADXMenuBuilder, init)
}

ADXMenuBuilder *create_ADXMenuBuilder_init() {
  J2OBJC_CREATE_IMPL(ADXMenuBuilder, init)
}

void ADXMenuBuilder_collapseItemActionViewWithADMenuItem_(ADXMenuBuilder *self, id<ADMenuItem> mExpandedItem) {
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXMenuBuilder)

J2OBJC_NAME_MAPPING(ADXMenuBuilder, "androidx.appcompat.view.menu", "ADX")

@implementation ADXMenuBuilder_Callback

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "Z", 0x401, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(onMenuItemSelectedWithADXMenuBuilder:withADMenuItem:);
  methods[1].selector = @selector(onMenuModeChangeWithADXMenuBuilder:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "onMenuItemSelected", "LADXMenuBuilder;LADMenuItem;", "onMenuModeChange", "LADXMenuBuilder;" };
  static const J2ObjcClassInfo _ADXMenuBuilder_Callback = { "Callback", "androidx.appcompat.view.menu", ptrTable, methods, NULL, 7, 0x609, 2, 0, 3, -1, -1, -1, -1 };
  return &_ADXMenuBuilder_Callback;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(ADXMenuBuilder_Callback)

@implementation ADXMenuBuilder_SupportMenuItem

+ (const J2ObjcClassInfo *)__metadata {
  static const void *ptrTable[] = { "LADXMenuBuilder;" };
  static const J2ObjcClassInfo _ADXMenuBuilder_SupportMenuItem = { "SupportMenuItem", "androidx.appcompat.view.menu", ptrTable, NULL, NULL, 7, 0x608, 0, 0, 0, -1, -1, -1, -1 };
  return &_ADXMenuBuilder_SupportMenuItem;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(ADXMenuBuilder_SupportMenuItem)

@implementation ADXMenuBuilder_ContextMenu

- (instancetype)initWithADXMenuBuilder:(ADXMenuBuilder *)outer$ {
  ADXMenuBuilder_ContextMenu_initWithADXMenuBuilder_(self, outer$);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithADXMenuBuilder:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LADXMenuBuilder;" };
  static const J2ObjcClassInfo _ADXMenuBuilder_ContextMenu = { "ContextMenu", "androidx.appcompat.view.menu", ptrTable, methods, NULL, 7, 0x0, 1, 0, 0, -1, -1, -1, -1 };
  return &_ADXMenuBuilder_ContextMenu;
}

@end

void ADXMenuBuilder_ContextMenu_initWithADXMenuBuilder_(ADXMenuBuilder_ContextMenu *self, ADXMenuBuilder *outer$) {
  NSObject_init(self);
}

ADXMenuBuilder_ContextMenu *new_ADXMenuBuilder_ContextMenu_initWithADXMenuBuilder_(ADXMenuBuilder *outer$) {
  J2OBJC_NEW_IMPL(ADXMenuBuilder_ContextMenu, initWithADXMenuBuilder_, outer$)
}

ADXMenuBuilder_ContextMenu *create_ADXMenuBuilder_ContextMenu_initWithADXMenuBuilder_(ADXMenuBuilder *outer$) {
  J2OBJC_CREATE_IMPL(ADXMenuBuilder_ContextMenu, initWithADXMenuBuilder_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXMenuBuilder_ContextMenu)
