//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroidX-core\src\main\java\androidx\core\view\NestedScrollingChildHelper.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "NestedScrollingChildHelper.h"
#include "View.h"
#include "ViewCompat.h"
#include "ViewParent.h"
#include "ViewParentCompat.h"


@interface ADXNestedScrollingChildHelper () {
 @public
  id<ADViewParent> mNestedScrollingParentTouch_;
  id<ADViewParent> mNestedScrollingParentNonTouch_;
  ADView *mView_;
  jboolean mIsNestedScrollingEnabled_;
  IOSIntArray *mTempNestedScrollConsumed_;
}

- (jboolean)dispatchNestedScrollInternalWithInt:(jint)dxConsumed
                                        withInt:(jint)dyConsumed
                                        withInt:(jint)dxUnconsumed
                                        withInt:(jint)dyUnconsumed
                                   withIntArray:(IOSIntArray *)offsetInWindow
                                        withInt:(jint)type
                                   withIntArray:(IOSIntArray *)consumed;

- (id<ADViewParent>)getNestedScrollingParentForTypeWithInt:(jint)type;

- (void)setNestedScrollingParentForTypeWithInt:(jint)type
                              withADViewParent:(id<ADViewParent>)p;

- (IOSIntArray *)getTempNestedScrollConsumed;

@end

J2OBJC_FIELD_SETTER(ADXNestedScrollingChildHelper, mNestedScrollingParentTouch_, id<ADViewParent>)
J2OBJC_FIELD_SETTER(ADXNestedScrollingChildHelper, mNestedScrollingParentNonTouch_, id<ADViewParent>)
J2OBJC_FIELD_SETTER(ADXNestedScrollingChildHelper, mView_, ADView *)
J2OBJC_FIELD_SETTER(ADXNestedScrollingChildHelper, mTempNestedScrollConsumed_, IOSIntArray *)

__attribute__((unused)) static jboolean ADXNestedScrollingChildHelper_dispatchNestedScrollInternalWithInt_withInt_withInt_withInt_withIntArray_withInt_withIntArray_(ADXNestedScrollingChildHelper *self, jint dxConsumed, jint dyConsumed, jint dxUnconsumed, jint dyUnconsumed, IOSIntArray *offsetInWindow, jint type, IOSIntArray *consumed);

__attribute__((unused)) static id<ADViewParent> ADXNestedScrollingChildHelper_getNestedScrollingParentForTypeWithInt_(ADXNestedScrollingChildHelper *self, jint type);

__attribute__((unused)) static void ADXNestedScrollingChildHelper_setNestedScrollingParentForTypeWithInt_withADViewParent_(ADXNestedScrollingChildHelper *self, jint type, id<ADViewParent> p);

__attribute__((unused)) static IOSIntArray *ADXNestedScrollingChildHelper_getTempNestedScrollConsumed(ADXNestedScrollingChildHelper *self);

@implementation ADXNestedScrollingChildHelper

- (instancetype)initWithADView:(ADView *)view {
  ADXNestedScrollingChildHelper_initWithADView_(self, view);
  return self;
}

- (void)setNestedScrollingEnabledWithBoolean:(jboolean)enabled {
  if (mIsNestedScrollingEnabled_) {
    ADXViewCompat_stopNestedScrollWithADView_(mView_);
  }
  mIsNestedScrollingEnabled_ = enabled;
}

- (jboolean)isNestedScrollingEnabled {
  return mIsNestedScrollingEnabled_;
}

- (jboolean)hasNestedScrollingParent {
  return [self hasNestedScrollingParentWithInt:ADXViewCompat_TYPE_TOUCH];
}

- (jboolean)hasNestedScrollingParentWithInt:(jint)type {
  return ADXNestedScrollingChildHelper_getNestedScrollingParentForTypeWithInt_(self, type) != nil;
}

- (jboolean)startNestedScrollWithInt:(jint)axes {
  return [self startNestedScrollWithInt:axes withInt:ADXViewCompat_TYPE_TOUCH];
}

- (jboolean)startNestedScrollWithInt:(jint)axes
                             withInt:(jint)type {
  if ([self hasNestedScrollingParentWithInt:type]) {
    return true;
  }
  if ([self isNestedScrollingEnabled]) {
    id<ADViewParent> p = JreRetainedLocalValue([((ADView *) nil_chk(mView_)) getParent]);
    ADView *child = JreRetainedLocalValue(mView_);
    while (p != nil) {
      if (ADXViewParentCompat_onStartNestedScrollWithADViewParent_withADView_withADView_withInt_withInt_(p, child, mView_, axes, type)) {
        ADXNestedScrollingChildHelper_setNestedScrollingParentForTypeWithInt_withADViewParent_(self, type, p);
        ADXViewParentCompat_onNestedScrollAcceptedWithADViewParent_withADView_withADView_withInt_withInt_(p, child, mView_, axes, type);
        return true;
      }
      if ([p isKindOfClass:[ADView class]]) {
        child = (ADView *) p;
      }
      p = [p getParent];
    }
  }
  return false;
}

- (void)stopNestedScroll {
  [self stopNestedScrollWithInt:ADXViewCompat_TYPE_TOUCH];
}

- (void)stopNestedScrollWithInt:(jint)type {
  id<ADViewParent> parent = ADXNestedScrollingChildHelper_getNestedScrollingParentForTypeWithInt_(self, type);
  if (parent != nil) {
    ADXViewParentCompat_onStopNestedScrollWithADViewParent_withADView_withInt_(parent, mView_, type);
    ADXNestedScrollingChildHelper_setNestedScrollingParentForTypeWithInt_withADViewParent_(self, type, nil);
  }
}

- (jboolean)dispatchNestedScrollWithInt:(jint)dxConsumed
                                withInt:(jint)dyConsumed
                                withInt:(jint)dxUnconsumed
                                withInt:(jint)dyUnconsumed
                           withIntArray:(IOSIntArray *)offsetInWindow {
  return ADXNestedScrollingChildHelper_dispatchNestedScrollInternalWithInt_withInt_withInt_withInt_withIntArray_withInt_withIntArray_(self, dxConsumed, dyConsumed, dxUnconsumed, dyUnconsumed, offsetInWindow, ADXViewCompat_TYPE_TOUCH, nil);
}

- (jboolean)dispatchNestedScrollWithInt:(jint)dxConsumed
                                withInt:(jint)dyConsumed
                                withInt:(jint)dxUnconsumed
                                withInt:(jint)dyUnconsumed
                           withIntArray:(IOSIntArray *)offsetInWindow
                                withInt:(jint)type {
  return ADXNestedScrollingChildHelper_dispatchNestedScrollInternalWithInt_withInt_withInt_withInt_withIntArray_withInt_withIntArray_(self, dxConsumed, dyConsumed, dxUnconsumed, dyUnconsumed, offsetInWindow, type, nil);
}

- (void)dispatchNestedScrollWithInt:(jint)dxConsumed
                            withInt:(jint)dyConsumed
                            withInt:(jint)dxUnconsumed
                            withInt:(jint)dyUnconsumed
                       withIntArray:(IOSIntArray *)offsetInWindow
                            withInt:(jint)type
                       withIntArray:(IOSIntArray *)consumed {
  ADXNestedScrollingChildHelper_dispatchNestedScrollInternalWithInt_withInt_withInt_withInt_withIntArray_withInt_withIntArray_(self, dxConsumed, dyConsumed, dxUnconsumed, dyUnconsumed, offsetInWindow, type, consumed);
}

- (jboolean)dispatchNestedScrollInternalWithInt:(jint)dxConsumed
                                        withInt:(jint)dyConsumed
                                        withInt:(jint)dxUnconsumed
                                        withInt:(jint)dyUnconsumed
                                   withIntArray:(IOSIntArray *)offsetInWindow
                                        withInt:(jint)type
                                   withIntArray:(IOSIntArray *)consumed {
  return ADXNestedScrollingChildHelper_dispatchNestedScrollInternalWithInt_withInt_withInt_withInt_withIntArray_withInt_withIntArray_(self, dxConsumed, dyConsumed, dxUnconsumed, dyUnconsumed, offsetInWindow, type, consumed);
}

- (jboolean)dispatchNestedPreScrollWithInt:(jint)dx
                                   withInt:(jint)dy
                              withIntArray:(IOSIntArray *)consumed
                              withIntArray:(IOSIntArray *)offsetInWindow {
  return [self dispatchNestedPreScrollWithInt:dx withInt:dy withIntArray:consumed withIntArray:offsetInWindow withInt:ADXViewCompat_TYPE_TOUCH];
}

- (jboolean)dispatchNestedPreScrollWithInt:(jint)dx
                                   withInt:(jint)dy
                              withIntArray:(IOSIntArray *)consumed
                              withIntArray:(IOSIntArray *)offsetInWindow
                                   withInt:(jint)type {
  if ([self isNestedScrollingEnabled]) {
    id<ADViewParent> parent = ADXNestedScrollingChildHelper_getNestedScrollingParentForTypeWithInt_(self, type);
    if (parent == nil) {
      return false;
    }
    if (dx != 0 || dy != 0) {
      jint startX = 0;
      jint startY = 0;
      if (offsetInWindow != nil) {
        [((ADView *) nil_chk(mView_)) getLocationInWindowWithIntArray:offsetInWindow];
        startX = IOSIntArray_Get(offsetInWindow, 0);
        startY = IOSIntArray_Get(offsetInWindow, 1);
      }
      if (consumed == nil) {
        consumed = ADXNestedScrollingChildHelper_getTempNestedScrollConsumed(self);
      }
      *IOSIntArray_GetRef(nil_chk(consumed), 0) = 0;
      *IOSIntArray_GetRef(consumed, 1) = 0;
      ADXViewParentCompat_onNestedPreScrollWithADViewParent_withADView_withInt_withInt_withIntArray_withInt_(parent, mView_, dx, dy, consumed, type);
      if (offsetInWindow != nil) {
        [((ADView *) nil_chk(mView_)) getLocationInWindowWithIntArray:offsetInWindow];
        *IOSIntArray_GetRef(offsetInWindow, 0) -= startX;
        *IOSIntArray_GetRef(offsetInWindow, 1) -= startY;
      }
      return IOSIntArray_Get(consumed, 0) != 0 || IOSIntArray_Get(consumed, 1) != 0;
    }
    else if (offsetInWindow != nil) {
      *IOSIntArray_GetRef(offsetInWindow, 0) = 0;
      *IOSIntArray_GetRef(offsetInWindow, 1) = 0;
    }
  }
  return false;
}

- (jboolean)dispatchNestedFlingWithFloat:(jfloat)velocityX
                               withFloat:(jfloat)velocityY
                             withBoolean:(jboolean)consumed {
  if ([self isNestedScrollingEnabled]) {
    id<ADViewParent> parent = ADXNestedScrollingChildHelper_getNestedScrollingParentForTypeWithInt_(self, ADXViewCompat_TYPE_TOUCH);
    if (parent != nil) {
      return ADXViewParentCompat_onNestedFlingWithADViewParent_withADView_withFloat_withFloat_withBoolean_(parent, mView_, velocityX, velocityY, consumed);
    }
  }
  return false;
}

- (jboolean)dispatchNestedPreFlingWithFloat:(jfloat)velocityX
                                  withFloat:(jfloat)velocityY {
  if ([self isNestedScrollingEnabled]) {
    id<ADViewParent> parent = ADXNestedScrollingChildHelper_getNestedScrollingParentForTypeWithInt_(self, ADXViewCompat_TYPE_TOUCH);
    if (parent != nil) {
      return ADXViewParentCompat_onNestedPreFlingWithADViewParent_withADView_withFloat_withFloat_(parent, mView_, velocityX, velocityY);
    }
  }
  return false;
}

- (void)onDetachedFromWindow {
  ADXViewCompat_stopNestedScrollWithADView_(mView_);
}

- (void)onStopNestedScrollWithADView:(ADView *)child {
  ADXViewCompat_stopNestedScrollWithADView_(mView_);
}

- (id<ADViewParent>)getNestedScrollingParentForTypeWithInt:(jint)type {
  return ADXNestedScrollingChildHelper_getNestedScrollingParentForTypeWithInt_(self, type);
}

- (void)setNestedScrollingParentForTypeWithInt:(jint)type
                              withADViewParent:(id<ADViewParent>)p {
  ADXNestedScrollingChildHelper_setNestedScrollingParentForTypeWithInt_withADViewParent_(self, type, p);
}

- (IOSIntArray *)getTempNestedScrollConsumed {
  return ADXNestedScrollingChildHelper_getTempNestedScrollConsumed(self);
}

- (void)dealloc {
  RELEASE_(mNestedScrollingParentTouch_);
  RELEASE_(mNestedScrollingParentNonTouch_);
  RELEASE_(mView_);
  RELEASE_(mTempNestedScrollConsumed_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 5, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 8, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 11, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 12, 11, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 13, 15, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 16, 17, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 18, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 0, -1, -1, -1, -1 },
    { NULL, "LADViewParent;", 0x2, 21, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 22, 23, -1, -1, -1, -1 },
    { NULL, "[I", 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithADView:);
  methods[1].selector = @selector(setNestedScrollingEnabledWithBoolean:);
  methods[2].selector = @selector(isNestedScrollingEnabled);
  methods[3].selector = @selector(hasNestedScrollingParent);
  methods[4].selector = @selector(hasNestedScrollingParentWithInt:);
  methods[5].selector = @selector(startNestedScrollWithInt:);
  methods[6].selector = @selector(startNestedScrollWithInt:withInt:);
  methods[7].selector = @selector(stopNestedScroll);
  methods[8].selector = @selector(stopNestedScrollWithInt:);
  methods[9].selector = @selector(dispatchNestedScrollWithInt:withInt:withInt:withInt:withIntArray:);
  methods[10].selector = @selector(dispatchNestedScrollWithInt:withInt:withInt:withInt:withIntArray:withInt:);
  methods[11].selector = @selector(dispatchNestedScrollWithInt:withInt:withInt:withInt:withIntArray:withInt:withIntArray:);
  methods[12].selector = @selector(dispatchNestedScrollInternalWithInt:withInt:withInt:withInt:withIntArray:withInt:withIntArray:);
  methods[13].selector = @selector(dispatchNestedPreScrollWithInt:withInt:withIntArray:withIntArray:);
  methods[14].selector = @selector(dispatchNestedPreScrollWithInt:withInt:withIntArray:withIntArray:withInt:);
  methods[15].selector = @selector(dispatchNestedFlingWithFloat:withFloat:withBoolean:);
  methods[16].selector = @selector(dispatchNestedPreFlingWithFloat:withFloat:);
  methods[17].selector = @selector(onDetachedFromWindow);
  methods[18].selector = @selector(onStopNestedScrollWithADView:);
  methods[19].selector = @selector(getNestedScrollingParentForTypeWithInt:);
  methods[20].selector = @selector(setNestedScrollingParentForTypeWithInt:withADViewParent:);
  methods[21].selector = @selector(getTempNestedScrollConsumed);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mNestedScrollingParentTouch_", "LADViewParent;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mNestedScrollingParentNonTouch_", "LADViewParent;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mView_", "LADView;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mIsNestedScrollingEnabled_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mTempNestedScrollConsumed_", "[I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LADView;", "setNestedScrollingEnabled", "Z", "hasNestedScrollingParent", "I", "startNestedScroll", "II", "stopNestedScroll", "dispatchNestedScroll", "IIII[I", "IIII[II", "IIII[II[I", "dispatchNestedScrollInternal", "dispatchNestedPreScroll", "II[I[I", "II[I[II", "dispatchNestedFling", "FFZ", "dispatchNestedPreFling", "FF", "onStopNestedScroll", "getNestedScrollingParentForType", "setNestedScrollingParentForType", "ILADViewParent;" };
  static const J2ObjcClassInfo _ADXNestedScrollingChildHelper = { "NestedScrollingChildHelper", "androidx.core.view", ptrTable, methods, fields, 7, 0x1, 22, 5, -1, -1, -1, -1, -1 };
  return &_ADXNestedScrollingChildHelper;
}

@end

void ADXNestedScrollingChildHelper_initWithADView_(ADXNestedScrollingChildHelper *self, ADView *view) {
  NSObject_init(self);
  JreStrongAssign(&self->mView_, view);
}

ADXNestedScrollingChildHelper *new_ADXNestedScrollingChildHelper_initWithADView_(ADView *view) {
  J2OBJC_NEW_IMPL(ADXNestedScrollingChildHelper, initWithADView_, view)
}

ADXNestedScrollingChildHelper *create_ADXNestedScrollingChildHelper_initWithADView_(ADView *view) {
  J2OBJC_CREATE_IMPL(ADXNestedScrollingChildHelper, initWithADView_, view)
}

jboolean ADXNestedScrollingChildHelper_dispatchNestedScrollInternalWithInt_withInt_withInt_withInt_withIntArray_withInt_withIntArray_(ADXNestedScrollingChildHelper *self, jint dxConsumed, jint dyConsumed, jint dxUnconsumed, jint dyUnconsumed, IOSIntArray *offsetInWindow, jint type, IOSIntArray *consumed) {
  if ([self isNestedScrollingEnabled]) {
    id<ADViewParent> parent = ADXNestedScrollingChildHelper_getNestedScrollingParentForTypeWithInt_(self, type);
    if (parent == nil) {
      return false;
    }
    if (dxConsumed != 0 || dyConsumed != 0 || dxUnconsumed != 0 || dyUnconsumed != 0) {
      jint startX = 0;
      jint startY = 0;
      if (offsetInWindow != nil) {
        [((ADView *) nil_chk(self->mView_)) getLocationInWindowWithIntArray:offsetInWindow];
        startX = IOSIntArray_Get(offsetInWindow, 0);
        startY = IOSIntArray_Get(offsetInWindow, 1);
      }
      if (consumed == nil) {
        consumed = ADXNestedScrollingChildHelper_getTempNestedScrollConsumed(self);
        *IOSIntArray_GetRef(nil_chk(consumed), 0) = 0;
        *IOSIntArray_GetRef(consumed, 1) = 0;
      }
      ADXViewParentCompat_onNestedScrollWithADViewParent_withADView_withInt_withInt_withInt_withInt_withInt_withIntArray_(parent, self->mView_, dxConsumed, dyConsumed, dxUnconsumed, dyUnconsumed, type, consumed);
      if (offsetInWindow != nil) {
        [((ADView *) nil_chk(self->mView_)) getLocationInWindowWithIntArray:offsetInWindow];
        *IOSIntArray_GetRef(offsetInWindow, 0) -= startX;
        *IOSIntArray_GetRef(offsetInWindow, 1) -= startY;
      }
      return true;
    }
    else if (offsetInWindow != nil) {
      *IOSIntArray_GetRef(offsetInWindow, 0) = 0;
      *IOSIntArray_GetRef(offsetInWindow, 1) = 0;
    }
  }
  return false;
}

id<ADViewParent> ADXNestedScrollingChildHelper_getNestedScrollingParentForTypeWithInt_(ADXNestedScrollingChildHelper *self, jint type) {
  switch (type) {
    case ADXViewCompat_TYPE_TOUCH:
    return self->mNestedScrollingParentTouch_;
    case ADXViewCompat_TYPE_NON_TOUCH:
    return self->mNestedScrollingParentNonTouch_;
  }
  return nil;
}

void ADXNestedScrollingChildHelper_setNestedScrollingParentForTypeWithInt_withADViewParent_(ADXNestedScrollingChildHelper *self, jint type, id<ADViewParent> p) {
  switch (type) {
    case ADXViewCompat_TYPE_TOUCH:
    JreStrongAssign(&self->mNestedScrollingParentTouch_, p);
    break;
    case ADXViewCompat_TYPE_NON_TOUCH:
    JreStrongAssign(&self->mNestedScrollingParentNonTouch_, p);
    break;
  }
}

IOSIntArray *ADXNestedScrollingChildHelper_getTempNestedScrollConsumed(ADXNestedScrollingChildHelper *self) {
  if (self->mTempNestedScrollConsumed_ == nil) {
    JreStrongAssignAndConsume(&self->mTempNestedScrollConsumed_, [IOSIntArray newArrayWithLength:2]);
  }
  return self->mTempNestedScrollConsumed_;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXNestedScrollingChildHelper)
